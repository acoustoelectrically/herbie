[{"memory":[[20384,20384]],"time":0.0830078125,"type":"start"},{"compiler":[[19,16]],"memory":[[-1570784,44607520]],"method":["search"],"sampling":[[12,{"invalid":0.16382229139981064,"precondition":0.0014641286106780171,"unknown":0.2467085697866196,"valid":0.5880050102028918}],[11,{"invalid":0.1404191069141234,"precondition":0.0014641286106780171,"unknown":0.29058954069728316,"valid":0.5675272237779154}],[10,{"invalid":0.13261804541889433,"precondition":0.0014641286106780171,"unknown":0.3627493595281521,"valid":0.5031684664422755}],[9,{"invalid":0.08581167644751986,"precondition":0.0014641286106780171,"unknown":0.4290583822375993,"valid":0.48366581270420284}],[8,{"invalid":0.062408491961832624,"precondition":0.0014641286106780171,"unknown":0.48366581270420284,"valid":0.4524615667232865}],[7,{"invalid":0.062408491961832624,"precondition":0.0014641286106780171,"unknown":0.5616764276564936,"valid":0.37445095177099574}],[6,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.6240849196183262,"valid":0.37445095177099574}],[5,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.6240849196183262,"valid":0.37445095177099574}],[4,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.7489019035419915,"valid":0.2496339678473305}],[3,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[2,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}]],"time":298.1650390625,"type":"analyze"},{"bogosity":[{"infinite":0.06144797038359269,"invalid":0.2502844798156623,"precondition":0.0014641286106780171,"valid":0.686803421190067}],"memory":[[21054016,446657632]],"mixsample":[[8.384521484375,"ival-sub",1200],[87.72509765625,"adjust",800],[141.41748046875,"ival-div",0],[0.242431640625,"ival-sub",4800],[0.029052734375,"ival-sqrt",6000],[7.0888671875,"ival-mult",1200],[0.02734375,"ival-div",400],[3.218017578125,"ival-sub",1600],[5.275146484375,"ival-assert",0],[0.08349609375,"ival-sub",3600],[161.59228515625,"ival-sub",0],[14.655029296875,"ival-sqrt",1200],[0.495361328125,"ival-sqrt",4800],[95.489013671875,"ival-sqrt",0],[5.51806640625,"ival-sub",400],[7.373046875,"ival-mult",800],[0.702880859375,"ival-sub",4400],[17.58642578125,"ival-sub",800],[0.934326171875,"ival-mult",1600],[9.0576171875,"adjust",2800],[0.023193359375,"ival-div",2000],[0.14404296875,"ival-sqrt",3600],[0.32275390625,"ival-sub",4000],[8.65087890625,"ival-sqrt",400],[6.163330078125,"ival-sqrt",2000],[0.17822265625,"ival-mult",2000],[3.622802734375,"ival-sub",2000],[12.4423828125,"ival-sqrt",800],[0.768310546875,"ival-sqrt",4000],[0.005126953125,"ival-sub",6800],[0.01806640625,"ival-sqrt",6800],[1.54736328125,"ival-sqrt",4400],[34.677490234375,"adjust",2000],[4.234619140625,"ival-sub",2400],[0.011962890625,"ival-sub",6000],[5.77587890625,"ival-sqrt",1600],[356.210205078125,"ival-mult",0],[10.0244140625,"ival-mult",400],[0.020751953125,"ival-div",800],[10.6083984375,"ival-true",0],[8.01806640625,"ival-sqrt",2400],[14.51806640625,"exact",0],[73.013671875,"ival-neg",0]],"outcomes":[[325.30859375,1,"valid",1381],[122.492919921875,0,"invalid",954],[354.235107421875,2,"valid",1165],[74.65625,3,"valid",184],[659.27099609375,0,"valid",5526]],"time":2100.35986328125,"type":"sample"},{"compiler":[[17,14],[72,16],[72,16]],"confusion":[[124,0,23,109]],"explanations":[["/.f64","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","n/o",1,0,[["(*.f64 #s(literal 2 binary64) a)","overflow",1]],[[]]],["-.f64","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","nan-rescue",2,0,[["(*.f64 b b)","overflow",81],["(*.f64 #s(literal 4 binary64) (*.f64 a c))","overflow",24],["(*.f64 a c)","overflow",24]],[[1,2,1]]],["sqrt.f64","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","uflow-rescue",5,0,[["(*.f64 b b)","underflow",48],["(*.f64 #s(literal 4 binary64) (*.f64 a c))","underflow",42],["(*.f64 a c)","underflow",42],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","underflow",5]],[[1,2]]],["/.f64","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","u/n",16,0,[["(*.f64 b b)","underflow",48],["(-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","underflow",23],["(*.f64 #s(literal 4 binary64) (*.f64 a c))","underflow",42],["(*.f64 a c)","underflow",42],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","underflow",5]],[[]]],["-.f64","(-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","cancellation",57,0,[],[[1]]],["sqrt.f64","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","oflow-rescue",97,0,[["(*.f64 b b)","overflow",81],["(*.f64 #s(literal 4 binary64) (*.f64 a c))","overflow",24],["(*.f64 a c)","overflow",24],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","overflow",97]],[[1,2]]]],"fperrors":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",18,0,false,1,[-6.038868225964078e-138,-1.2646502650834609e+62,8.319625348387604e-116]],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))",2,0,false,0,false],["(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))",103,0,false,1,[1.5250316439499783e-290,-2.5613947582151125e-158,-1.9032505304527158e-230]],["(-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))",57,0,false,0,false],["a",0,0,false,0,false],["(*.f64 #s(literal 4 binary64) (*.f64 a c))",0,0,false,0,false],["(*.f64 a c)",0,0,false,0,false],["#s(literal 4 binary64)",0,0,false,0,false],["(*.f64 b b)",0,0,false,0,false],["(*.f64 #s(literal 2 binary64) a)",0,0,false,0,false],["c",0,0,false,0,false],["#s(literal 2 binary64)",0,0,false,0,false],["(neg.f64 b)",0,0,false,0,false],["b",0,0,false,0,false]],"freqs":[[3,1],[2,29],[1,117],[0,109]],"maybe-confusion":[[124,0,0,23,0,109]],"memory":[[-7135280,88021088]],"mixsample":[[0.313232421875,"ival-sub",1200],[6.174072265625,"ival-div",0],[4.281982421875,"adjust",800],[0.008056640625,"ival-sub",4800],[0.252197265625,"ival-mult",1200],[0.20654296875,"ival-sub",1600],[0.25634765625,"ival-assert",0],[7.1064453125,"ival-sub",0],[0.5205078125,"ival-sqrt",1200],[0.02783203125,"ival-sqrt",4800],[4.288818359375,"ival-sqrt",0],[0.38671875,"ival-sub",400],[0.562744140625,"ival-mult",800],[0.010986328125,"ival-sub",4400],[0.419677734375,"ival-sub",800],[0.03125,"ival-mult",1600],[0.19482421875,"adjust",2800],[0.03662109375,"ival-sub",4000],[0.355712890625,"ival-sqrt",400],[0.33544921875,"ival-sqrt",2000],[0.802001953125,"ival-sqrt",800],[0.239990234375,"ival-sub",2000],[0.073974609375,"ival-sqrt",4000],[0.031982421875,"ival-sqrt",4400],[1.68115234375,"adjust",2000],[0.1416015625,"ival-sub",2400],[15.27490234375,"ival-mult",0],[0.315185546875,"ival-sqrt",1600],[0.247314453125,"ival-mult",400],[0.572998046875,"ival-true",0],[0.25732421875,"ival-sqrt",2400],[0.638916015625,"exact",0],[2.54736328125,"ival-neg",0]],"outcomes":[[14.313720703125,1,"valid",70],[21.668212890625,2,"valid",76],[3.78515625,3,"valid",10],[39.693115234375,0,"valid",356]],"time":193.054931640625,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[17,14]],"egraph":[[0,2395,15,0.010972272],[12,2395,16,0.020384036],[11,2389,16,0.022731391],[10,2389,16,0.018034503],[9,2379,16,0.014170172],[8,2306,16,0.021681114],[7,2142,16,0.0225479],[6,1613,16,0.017476829],[5,746,16,0.009755403],[4,409,16,0.003449469],[3,247,16,0.001801505],[2,104,17,0.001030601],[1,45,17,0.000497559],[0,23,17,0.00029652],[0,14,17,0.000164894]],"inputs":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[2898784,20275952]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[[]],"time":419.195068359375,"type":"preprocess"},{"compiler":[[0,3]],"memory":[[53200,53200]],"time":0.129150390625,"type":"eval"},{"alts":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","next",29.61315973905582,"binary64"]],"compiler":[[17,14]],"memory":[[353232,353232]],"time":0.538818359375,"type":"prune"},{"egraph":[[0,2395,65,0.008365253],[12,2395,69,0.017170296],[11,2389,69,0.018011296],[10,2389,69,0.013790732],[9,2379,69,0.015941739],[8,2306,69,0.017763512],[7,2142,69,0.015286382],[6,1613,69,0.020206832],[5,746,69,0.010919784],[4,409,69,0.003673062],[3,247,69,0.001647524],[2,104,70,0.000929525],[1,45,70,0.000434934],[0,23,70,0.000321125],[0,14,70,0.000171476]],"inputs":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(neg.f64 b)","b","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(*.f64 b b)","(*.f64 #s(literal 4 binary64) (*.f64 a c))","#s(literal 4 binary64)","(*.f64 a c)","a","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"locations":[["(neg.f64 b)","cost-diff",0],["(-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","cost-diff",0],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","cost-diff",1],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","cost-diff",1]],"memory":[[-3379456,4666304]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(neg.f64 b)","b","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(*.f64 b b)","(*.f64 #s(literal 4 binary64) (*.f64 a c))","(*.f64 (*.f64 c a) #s(literal 4 binary64))","#s(literal 4 binary64)","(*.f64 a c)","(*.f64 c a)","a","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":176.580078125,"type":"simplify"},{"compiler":[[72,16]],"locations":[["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","accuracy",0.40234375000000006],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","accuracy",4.177692687887851],["(-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","accuracy",13.097526183512986],["(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","accuracy",23.929958470936878]],"memory":[[-223312,16562096]],"mixsample":[[0.166015625,"ival-sub",1200],[3.81201171875,"ival-div",0],[1.696533203125,"adjust",800],[0.009033203125,"ival-sub",4800],[0.2109375,"ival-mult",1200],[0.08203125,"ival-sub",1600],[0.087890625,"ival-assert",0],[3.076171875,"ival-sub",0],[0.240234375,"ival-sqrt",1200],[0.01513671875,"ival-sqrt",4800],[1.89306640625,"ival-sqrt",0],[0.0908203125,"ival-sub",400],[0.2060546875,"ival-mult",800],[0.0048828125,"ival-sub",4400],[0.20263671875,"ival-sub",800],[0.01513671875,"ival-mult",1600],[0.0732421875,"adjust",2800],[0.010009765625,"ival-sub",4000],[0.15234375,"ival-sqrt",400],[0.14501953125,"ival-sqrt",2000],[0.43994140625,"ival-sqrt",800],[0.082763671875,"ival-sub",2000],[0.02392578125,"ival-sqrt",4000],[0.012939453125,"ival-sqrt",4400],[0.764404296875,"adjust",2000],[0.060546875,"ival-sub",2400],[6.19775390625,"ival-mult",0],[0.149658203125,"ival-sqrt",1600],[0.124755859375,"ival-mult",400],[0.200927734375,"ival-true",0],[0.130126953125,"ival-sqrt",2400],[0.258544921875,"exact",0],[1.42529296875,"ival-neg",0]],"outcomes":[[6.058837890625,1,"valid",35],[10.209228515625,2,"valid",38],[1.73291015625,3,"valid",5],[17.09375,0,"valid",178]],"time":57.492919921875,"type":"localize"},{"count":[[5,99]],"inputs":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(neg.f64 b)","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))"]],"memory":[[732800,8392096]],"outputs":[["(* -1 (/ b a))","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/ (+ (* -1 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* -1 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* -2 b)","(- (* 2 (/ (* a c) b)) (* 2 b))","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) (* 2 b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) (* 2 b))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/2 (/ b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* -4 (* a c))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (- (/ b a) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(- (pow b 2) (* 4 (* a c)))","(- (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(* -1 b)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(* b (- (/ c (pow b 2)) (/ 1 a)))","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a)))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* b (- (* 2 (/ (* a c) (pow b 2))) 2))","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (/ c b))","(* -1 (/ (+ c (/ (* a (pow c 2)) (pow b 2))) b))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(* -2 (/ (* a c) b))","(* -1 (/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b))","(* -1 (/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(* -1 (/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(+ (* -1 (/ b a)) (/ c b))","(+ (* -1 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) (* 2 b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) (* 2 b))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/2 (/ b (* a c)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(* -1 (* c (- (/ b c) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))"]],"series":[[3.80810546875,"((/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b b) (* 4 (* a c))) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","c","-inf"],[2.60498046875,"((/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b b) (* 4 (* a c))) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","c","inf"],[1.39501953125,"((/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b b) (* 4 (* a c))) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","c","0"],[1.782958984375,"((/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b b) (* 4 (* a c))) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","b","-inf"],[3.39404296875,"((/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b b) (* 4 (* a c))) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","b","inf"],[2.5,"((/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b b) (* 4 (* a c))) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","b","0"],[2.630859375,"((/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b b) (* 4 (* a c))) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","a","-inf"],[3.0380859375,"((/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b b) (* 4 (* a c))) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","a","inf"],[1.76416015625,"((/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (* b b) (* 4 (* a c))) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","a","0"]],"time":26.342041015625,"type":"series"},{"count":[[99,98]],"egraph":[[0,8487,2534,0.114298549],[2,5883,2670,0.028924635],[1,1718,2710,0.020545057],[0,545,2739,0.005300609]],"inputs":[["(* -1 (/ b a))","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/ (+ (* -1 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* -1 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* -2 b)","(- (* 2 (/ (* a c) b)) (* 2 b))","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) (* 2 b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) (* 2 b))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/2 (/ b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* -4 (* a c))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (- (/ b a) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(- (pow b 2) (* 4 (* a c)))","(- (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(* -1 b)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(* b (- (/ c (pow b 2)) (/ 1 a)))","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a)))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* b (- (* 2 (/ (* a c) (pow b 2))) 2))","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (/ c b))","(* -1 (/ (+ c (/ (* a (pow c 2)) (pow b 2))) b))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(* -2 (/ (* a c) b))","(* -1 (/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b))","(* -1 (/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(* -1 (/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(+ (* -1 (/ b a)) (/ c b))","(+ (* -1 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) (* 2 b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) (* 2 b))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/2 (/ b (* a c)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(* -1 (* c (- (/ b c) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))"]],"memory":[[9752496,52973344]],"method":["egg-herbie"],"outputs":[["(* -1 (/ b a))","(/.f64 (neg.f64 b) a)","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a)","(/ (+ (* -1 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/.f64 (fma.f64 (*.f64 (fma.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) a (/.f64 #s(literal 1 binary64) b)) c) a (neg.f64 b)) a)","(/ (+ (* -1 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 c (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) #s(literal 2 binary64)) (pow.f64 b #s(literal 5 binary64)))) a (/.f64 c b)) a (neg.f64 b)) a)","(pow b 2)","(*.f64 b b)","(+ (* -4 (* a c)) (pow b 2))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(* -2 b)","(*.f64 #s(literal -2 binary64) b)","(- (* 2 (/ (* a c) b)) (* 2 b))","(*.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) #s(literal 2 binary64))","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) (* 2 b))","(fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 (fma.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) a (/.f64 #s(literal 1 binary64) b)) c)) a (*.f64 #s(literal -2 binary64) b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) (* 2 b))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal 2 binary64) (*.f64 c c)) (pow.f64 b #s(literal 3 binary64)))) a (*.f64 #s(literal 2 binary64) (/.f64 c b))) a (*.f64 #s(literal -2 binary64) b))","b","(+ b (* -2 (/ (* a c) b)))","(fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(fma.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (fma.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) a (/.f64 #s(literal 1 binary64) b)) c) b)","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) c) c) (pow.f64 b #s(literal 3 binary64)))) a (*.f64 #s(literal -2 binary64) (/.f64 c b))) a b)","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/2 (/ b a)))","(*.f64 (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)) #s(literal -1/2 binary64))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(fma.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)) #s(literal -1/2 binary64)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(fma.f64 (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)) #s(literal -1/2 binary64) (fma.f64 (/.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/64 binary64) (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))))))","(* -4 (* a c))","(*.f64 #s(literal -4 binary64) (*.f64 c a))","(* a (- (/ (pow b 2) a) (* 4 c)))","(*.f64 (fma.f64 #s(literal -4 binary64) c (*.f64 b (/.f64 b a))) a)","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 c a)))","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a))) a)","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))) a)","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(*.f64 (fma.f64 #s(literal -1/32 binary64) (/.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (sqrt.f64 #s(literal -4 binary64))) (neg.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a))))) a)","(* (sqrt (* a c)) (sqrt -4))","(*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))))) a)","(* (sqrt (/ c a)) (sqrt -1))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 #s(literal 1/2 binary64) b)) (neg.f64 a)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 #s(literal 1/2 binary64) b (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/128 binary64)))) (neg.f64 a))) (neg.f64 a)))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(*.f64 (fma.f64 #s(literal -4 binary64) c (*.f64 b (/.f64 b a))) a)","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a)))","(* -1 (* a (- (/ b a) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))","(* -1 (* a (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) (neg.f64 b)) a) (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))) a)","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (+.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/64 binary64)))) a) b) a)))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (fma.f64 (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -1/2 binary64) a)) b))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 b b)) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/64 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/4 binary64))) b (/.f64 #s(literal -1/2 binary64) a)) b (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a))))","(- (pow b 2) (* 4 (* a c)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(- (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(-.f64 (neg.f64 b) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 c a)) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) #s(literal -1 binary64)) b))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 c a)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/32 binary64) (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/2 binary64))) b #s(literal -1 binary64)) b))","(* -1 b)","(neg.f64 b)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(fma.f64 (fma.f64 #s(literal 1/32 binary64) (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (sqrt.f64 #s(literal -4 binary64))) (*.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 b (/.f64 b (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))))) (*.f64 b b) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(* b (- (/ c (pow b 2)) (/ 1 a)))","(*.f64 (-.f64 (/.f64 (/.f64 c b) b) (/.f64 #s(literal 1 binary64) a)) b)","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))","(fma.f64 b (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))) (/.f64 (/.f64 c b) b)) (/.f64 (neg.f64 b) a))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a)))","(fma.f64 b (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))) (/.f64 (/.f64 c b) b))) (/.f64 (neg.f64 b) a))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)","(* b (- (* 2 (/ (* a c) (pow b 2))) 2))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (/.f64 c b)) (/.f64 a b) #s(literal -2 binary64)) b)","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (fma.f64 #s(literal 2 binary64) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -2 binary64)) b)","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -2 binary64) #s(literal 2 binary64))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -2 binary64) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(*.f64 (fma.f64 (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -2 binary64) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -2 binary64) #s(literal 1 binary64))) b)","(* -1 (/ c b))","(/.f64 c (neg.f64 b))","(* -1 (/ (+ c (/ (* a (pow c 2)) (pow b 2))) b))","(/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) (neg.f64 b))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b))","(/.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64) (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c)) (neg.f64 b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(/.f64 (fma.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 b #s(literal 6 binary64))) (*.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (/.f64 #s(literal 20 binary64) a)) (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64) (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c))) (neg.f64 b))","(* -2 (/ (* a c) b))","(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","(* -1 (/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b))","(/.f64 (*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) c) b) (/.f64 c b) (*.f64 c a)) #s(literal -2 binary64)) b)","(* -1 (/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(/.f64 (fma.f64 #s(literal 2 binary64) (fma.f64 (/.f64 (*.f64 (*.f64 a a) c) b) (/.f64 c b) (*.f64 c a)) (*.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))))) (neg.f64 b))","(* -1 (/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (/.f64 #s(literal 20 binary64) (pow.f64 b #s(literal 6 binary64)))) #s(literal 1/2 binary64) (*.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))))) (*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) c) b) (/.f64 c b) (*.f64 c a)) #s(literal -2 binary64))) b)","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (fma.f64 (/.f64 #s(literal 2 binary64) b) (/.f64 (*.f64 c a) b) #s(literal -1 binary64)) b)","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (fma.f64 (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -2 binary64) #s(literal 1 binary64)) (neg.f64 b))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -2 binary64) #s(literal 1 binary64))) (neg.f64 b))","(+ (* -1 (/ b a)) (/ c b))","(-.f64 (/.f64 c b) (/.f64 b a))","(+ (* -1 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(fma.f64 (fma.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) a (/.f64 #s(literal 1 binary64) b)) c (/.f64 (neg.f64 b) a))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 a (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal 1 binary64) b)) c (/.f64 (neg.f64 b) a))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) (* 2 b))","(fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 c (*.f64 a (/.f64 a (pow.f64 b #s(literal 3 binary64)))) (/.f64 a b))) c (*.f64 #s(literal -2 binary64) b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) (* 2 b))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (*.f64 (*.f64 a (/.f64 a (pow.f64 b #s(literal 3 binary64)))) #s(literal 2 binary64))) c (*.f64 (/.f64 a b) #s(literal 2 binary64))) c (*.f64 #s(literal -2 binary64) b))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(fma.f64 (*.f64 (fma.f64 c (*.f64 a (/.f64 a (pow.f64 b #s(literal 3 binary64)))) (/.f64 a b)) #s(literal -2 binary64)) c b)","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (*.f64 (*.f64 a (/.f64 a (pow.f64 b #s(literal 3 binary64)))) #s(literal -2 binary64))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c b)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/2 (/ b (* a c)))))","(*.f64 (*.f64 c #s(literal -1/2 binary64)) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 b a) c)))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(*.f64 (fma.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 b a) c)) #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))))) c)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(*.f64 (fma.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 b a) c)) #s(literal -1/2 binary64) (fma.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) b) (sqrt.f64 #s(literal -4 binary64))) (/.f64 b #s(literal -4 binary64)) (*.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/64 binary64)))) c)","(* c (- (/ (pow b 2) c) (* 4 a)))","(*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c))) c)","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c)))) c)","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(*.f64 (fma.f64 #s(literal -1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (neg.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c))))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))))) c)","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(*.f64 (neg.f64 c) (-.f64 (*.f64 (/.f64 (/.f64 b a) c) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))) c)) c)","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/128 binary64)))) (neg.f64 c))) c)) c)","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)","(* -1 (* c (- (/ b c) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (/.f64 b c)))","(* -1 (* c (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) (neg.f64 b)) c) (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)))) c)","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) (*.f64 b b)) #s(literal -1/4 binary64) (*.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/64 binary64)))) c) b) c)))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal 1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))))"]],"stop":[["iter limit",1],["node limit",1]],"time":300.89892578125,"type":"simplify"},{"count":[[5,512]],"egraph":[[0,8102,44,0.062270606],[2,591,48,0.022622356],[1,81,51,0.002443922],[0,23,51,0.000907468],[0,14,51,0.000170839]],"inputs":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(neg.f64 b)","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))"]],"memory":[[-2697088,53232656]],"outputs":[["(*.f64 (/.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(*.f64 (/.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(*.f64 (/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(*.f64 (/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))) (+.f64 (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (pow.f64 b #s(literal 4 binary64))))","(*.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) #s(literal -1/2 binary64)) (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(*.f64 (/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) a) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) a) (/.f64 (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))) #s(literal -1 binary64)) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) a) #s(literal 1/2 binary64))","(*.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))) (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a)) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(*.f64 (-.f64 (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 2 binary64)) (/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))) (/.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(*.f64 (-.f64 (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 2 binary64)))))","(*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (neg.f64 a)))","(*.f64 (/.f64 #s(literal -1 binary64) a) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal 1/2 binary64)))","(*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal 1/2 binary64)) (/.f64 #s(literal -1 binary64) a))","(*.f64 (fma.f64 (*.f64 b #s(literal 2 binary64)) a (*.f64 (*.f64 #s(literal -2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal 2 binary64)) a)))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64)) (/.f64 #s(literal 1/2 binary64) a)))","(*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal 2 binary64)) a)))","(*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) a)))","(*.f64 #s(literal -1 binary64) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 (*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 2 binary64)) a)))","(*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (*.f64 (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) (/.f64 #s(literal 1/2 binary64) a)))","(*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 2 binary64)) a)))","(*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (/.f64 (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) a)))","(*.f64 #s(literal 1/2 binary64) (pow.f64 (/.f64 a (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) #s(literal -1 binary64)))","(*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) a))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) #s(literal 1 binary64))","(*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a))","(pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) #s(literal -1 binary64))","(/.f64 (/.f64 (fma.f64 (*.f64 b #s(literal 2 binary64)) a (*.f64 (*.f64 #s(literal -2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (/.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) (/.f64 a (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(/.f64 (/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -2 binary64) a) (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (pow.f64 a #s(literal -1 binary64))) #s(literal -2 binary64))","(/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) #s(literal 2 binary64))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(/.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal -1/2 binary64) a)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (/.f64 #s(literal -1/2 binary64) a)) (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1/2 binary64)) #s(literal 1 binary64)) a)","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) a)) #s(literal 2 binary64))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))))) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 2 binary64)) (/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 3 binary64)))) (fma.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 2 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal 1/2 binary64))) (neg.f64 a))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 b #s(literal 2 binary64)) a (*.f64 (*.f64 #s(literal -2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (*.f64 #s(literal -2 binary64) a))","(/.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) a) #s(literal -2 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a)))","(/.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 b a) #s(literal 3 binary64)) (pow.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a))) (*.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a))))))","(/.f64 (neg.f64 (/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) a)) #s(literal -2 binary64))","(/.f64 (neg.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))))) (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 2 binary64)) (/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (*.f64 b #s(literal 2 binary64)) a (*.f64 (*.f64 #s(literal -2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (neg.f64 (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal 1 binary64)) (*.f64 #s(literal -2 binary64) a))","(/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 #s(literal 2 binary64) (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal 2 binary64)))","(/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -2 binary64) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))) (*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 2 binary64)))","(/.f64 (*.f64 #s(literal -1 binary64) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (*.f64 #s(literal -1 binary64) (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 a (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 a (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (*.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))) (*.f64 a (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (pow.f64 a #s(literal -1 binary64))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 2 binary64)))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal -1 binary64)) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1 binary64)) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1 binary64)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1/2 binary64)) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) a))","(/.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 a #s(literal -1 binary64))) (*.f64 (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) #s(literal 2 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64)) (*.f64 (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) a))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 a #s(literal -1 binary64))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal 2 binary64)))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) #s(literal -1 binary64)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) #s(literal 1/2 binary64)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) a))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (pow.f64 a #s(literal -1 binary64))) (*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 1/2 binary64)) (*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) a))","(/.f64 (-.f64 (*.f64 (/.f64 b a) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) a))) #s(literal 4 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 b a) a) (*.f64 #s(literal 2 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 b a) (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal 2 binary64) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 b a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (/.f64 b a) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal 2 binary64) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal -1/2 binary64)) #s(literal 2 binary64)) (*.f64 a (/.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal -1/2 binary64)) a) (*.f64 a (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal -1/2 binary64)) (*.f64 #s(literal -2 binary64) a)) (*.f64 a (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal -1/2 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal -1/2 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 a (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 b #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 b a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 b (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b) (*.f64 (*.f64 #s(literal -2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (/.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) a))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) b) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 b #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) a))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 b a) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 b (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 #s(literal -2 binary64) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 (/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) a) #s(literal 2 binary64))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64))) (*.f64 (*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal 2 binary64)) a) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (-.f64 (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 2 binary64)) (/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a)))","(/.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3 binary64))) (*.f64 (*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal 2 binary64)) a) (fma.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3 binary64))) (*.f64 (*.f64 (*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 2 binary64)) a) (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 9 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 9/2 binary64))) (*.f64 (*.f64 (*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 2 binary64)) a) (fma.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 3 binary64))) (fma.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 2 binary64))))","(/.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (neg.f64 (*.f64 (*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 2 binary64)) a)))","(/.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(/.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (neg.f64 (*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal 2 binary64)) a)))","(/.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (*.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal 1/2 binary64)) (neg.f64 a))","(/.f64 (fma.f64 (*.f64 b #s(literal 2 binary64)) a (*.f64 (*.f64 #s(literal -2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1/2 binary64)) (neg.f64 (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1/2 binary64)) a)","(/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal 2 binary64)) a))","(/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 2 binary64)) (/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 2 binary64))) (-.f64 (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)) (fma.f64 (*.f64 b #s(literal 2 binary64)) a (*.f64 (*.f64 #s(literal -2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (*.f64 (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (*.f64 (*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 2 binary64)) a))","(/.f64 #s(literal 1/2 binary64) (*.f64 (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) a))","(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(neg.f64 (*.f64 #s(literal 1 binary64) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a))))","(neg.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (*.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a))))","(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 (/.f64 b a) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 (/.f64 b a) #s(literal 1/2 binary64) (*.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a))))","(fma.f64 (/.f64 b a) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a))))","(fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (*.f64 b #s(literal -1/2 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (*.f64 b #s(literal -1/2 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a))))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (*.f64 b #s(literal -1/2 binary64)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 (*.f64 b #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 (*.f64 b #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a))))","(fma.f64 (*.f64 b #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1 binary64)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 (*.f64 b #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 (*.f64 b #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) a) (*.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a))))","(fma.f64 (*.f64 b #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) a) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 #s(literal -1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(fma.f64 #s(literal -1 binary64) (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 #s(literal -1 binary64) (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a))))","(fma.f64 #s(literal -1 binary64) (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) b (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) b (*.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) b (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 #s(literal 1 binary64) (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 #s(literal 1 binary64) (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a))))","(fma.f64 #s(literal 1 binary64) (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal -1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal -1 binary64) (*.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a))))","(fma.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal -1 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 1 binary64) (*.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)) #s(literal 1 binary64)))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(fma.f64 b (*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 b (*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a))))","(fma.f64 b (*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 b (/.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 b (/.f64 #s(literal -1/2 binary64) a) (*.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a))))","(fma.f64 b (/.f64 #s(literal -1/2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 b (/.f64 #s(literal 1/2 binary64) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 b (/.f64 #s(literal 1/2 binary64) a) (*.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a))))","(fma.f64 b (/.f64 #s(literal 1/2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(-.f64 (/.f64 (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 2 binary64)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a))) (/.f64 (/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a))))","(-.f64 (/.f64 (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 3 binary64)) (fma.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 3 binary64)) (fma.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 2 binary64)))))","(-.f64 (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(-.f64 (/.f64 (*.f64 b b) (*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal 2 binary64)) a)) (/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal 2 binary64)) a)))","(-.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 2 binary64)) a)) (/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (*.f64 (*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 2 binary64)) a)))","(-.f64 (/.f64 (/.f64 (*.f64 b b) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 #s(literal 0 binary64) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a)))","(-.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 1 binary64)) (*.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(+.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(+.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(+.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a))))","(+.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(*.f64 (/.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (-.f64 (pow.f64 b #s(literal 8 binary64)) (pow.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) #s(literal 2 binary64)))) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(*.f64 (/.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) #s(literal 3 binary64)) (pow.f64 b #s(literal 12 binary64)))) (fma.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (-.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (pow.f64 b #s(literal 4 binary64))) (pow.f64 b #s(literal 8 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(*.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(*.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64))) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64)) (*.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64)) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(*.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))","(*.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))","(*.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(*.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))))","(*.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))","(*.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (*.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))))","(*.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))","(*.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(*.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) (/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))))","(*.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 2 binary64))","(pow.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 2 binary64))","(pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 8 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 4 binary64))) (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 12 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 6 binary64))) (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) #s(literal 2 binary64)) (pow.f64 b #s(literal 8 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 12 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 6 binary64))) (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 18 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 9 binary64))) (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))) (fma.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64))) (pow.f64 b #s(literal 12 binary64))))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (hypot.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (hypot.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (*.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))) (+.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))))) (+.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) #s(literal 3 binary64)) (pow.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (fma.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64)))) (neg.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))","(/.f64 (neg.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64))) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))","(/.f64 (*.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal 1 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))","(/.f64 (*.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 1 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 8 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 12 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) #s(literal 2 binary64)) (pow.f64 b #s(literal 8 binary64))) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 12 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 18 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64))) (pow.f64 b #s(literal 12 binary64))) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (hypot.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (*.f64 (hypot.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (*.f64 (hypot.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (hypot.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64)))) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)))) (*.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 12 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 6 binary64))) (*.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (+.f64 (pow.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) #s(literal 2 binary64)) (pow.f64 b #s(literal 8 binary64)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 12 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 6 binary64))) (*.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 8 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 4 binary64))) (*.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 b #s(literal 18 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 9 binary64))) (*.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64))) (pow.f64 b #s(literal 12 binary64)))))","(/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64)) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(/.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64))) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(/.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(/.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 #s(literal 4 binary64) (*.f64 b b)) c) a))))","(/.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))","(neg.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))","(fma.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) (neg.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(fma.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (neg.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(fma.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (-.f64 (pow.f64 b #s(literal 8 binary64)) (pow.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) #s(literal 2 binary64)))) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))))","(fma.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (+.f64 (pow.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) #s(literal 3 binary64)) (pow.f64 b #s(literal 12 binary64)))) (fma.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (-.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (pow.f64 b #s(literal 4 binary64))) (pow.f64 b #s(literal 8 binary64))) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))))","(fma.f64 (*.f64 #s(literal -1 binary64) (*.f64 c #s(literal 4 binary64))) a (*.f64 b b))","(fma.f64 (neg.f64 (*.f64 c #s(literal 4 binary64))) a (*.f64 b b))","(fma.f64 (exp.f64 (log.f64 b)) (exp.f64 (log.f64 b)) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(fma.f64 (*.f64 c #s(literal 4 binary64)) (neg.f64 a) (*.f64 b b))","(fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))","(fma.f64 (neg.f64 c) (*.f64 a #s(literal 4 binary64)) (*.f64 b b))","(fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))","(fma.f64 (*.f64 (neg.f64 a) c) #s(literal 4 binary64) (*.f64 b b))","(fma.f64 (neg.f64 a) (*.f64 c #s(literal 4 binary64)) (*.f64 b b))","(fma.f64 (*.f64 a #s(literal 4 binary64)) (neg.f64 c) (*.f64 b b))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(fma.f64 #s(literal -1 binary64) (*.f64 (*.f64 c a) #s(literal 4 binary64)) (*.f64 b b))","(fma.f64 #s(literal -1 binary64) (*.f64 b b) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(fma.f64 #s(literal 1 binary64) (*.f64 b b) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(fma.f64 (pow.f64 b #s(literal 3 binary64)) (/.f64 b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (neg.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(fma.f64 (pow.f64 b #s(literal 3 binary64)) (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))))","(fma.f64 (pow.f64 b #s(literal 4 binary64)) (/.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))))","(fma.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) (neg.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(fma.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))))","(fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal -1 binary64) (*.f64 b b))","(fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b))","(fma.f64 c (*.f64 #s(literal -4 binary64) a) (*.f64 b b))","(fma.f64 a (*.f64 #s(literal 4 binary64) (neg.f64 c)) (*.f64 b b))","(fma.f64 a (neg.f64 (*.f64 c #s(literal 4 binary64))) (*.f64 b b))","(fma.f64 a (*.f64 #s(literal -4 binary64) c) (*.f64 b b))","(fma.f64 #s(literal 4 binary64) (*.f64 (neg.f64 a) c) (*.f64 b b))","(fma.f64 (*.f64 b b) (/.f64 (*.f64 b b) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (neg.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(fma.f64 (*.f64 b b) (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))))","(fma.f64 (*.f64 b b) #s(literal -1 binary64) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(fma.f64 (*.f64 b b) #s(literal 1 binary64) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(fma.f64 b (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (neg.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(fma.f64 b b (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(sqrt.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64)))","(-.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(-.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))))","(-.f64 #s(literal 0 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))","(-.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 b b))","(-.f64 (*.f64 b b) (*.f64 (*.f64 c a) #s(literal 4 binary64)))","(fabs.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(hypot.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 b b))","(hypot.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 b b))","(hypot.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (*.f64 b b))","(hypot.f64 (*.f64 b b) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 1 binary64)))","(hypot.f64 (*.f64 b b) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(hypot.f64 (*.f64 b b) (*.f64 (*.f64 c a) #s(literal 4 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(+.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (neg.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(+.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))))","(+.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 b b))","(+.f64 (*.f64 b b) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(*.f64 (/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (+.f64 (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (pow.f64 b #s(literal 4 binary64))))","(*.f64 (/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(*.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64)) (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))","(*.f64 (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))))","(*.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64))))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(*.f64 #s(literal 1 binary64) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64))))","(*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (*.f64 (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 1 binary64))","(pow.f64 (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64))) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64))) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3 binary64))) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64))) (fma.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64))) (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 9 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 9/2 binary64))) (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b b) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (/.f64 (*.f64 b b) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))) (*.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (fma.f64 b (/.f64 b (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (*.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (+.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(/.f64 (-.f64 #s(literal 0 binary64) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(/.f64 (-.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 b b) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) #s(literal 3 binary64)) (pow.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 b b) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (/.f64 (*.f64 b b) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (fma.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 (/.f64 (*.f64 b b) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (fma.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (*.f64 #s(literal 0 binary64) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 9 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 9/2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1 binary64)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (*.f64 b b) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))) (*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (*.f64 b b) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (*.f64 b (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))))) (*.f64 b (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (-.f64 (*.f64 (*.f64 b b) (hypot.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))) (*.f64 b (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 b (hypot.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 3 binary64)) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (*.f64 (*.f64 b b) (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))))) (*.f64 (*.f64 b b) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 3 binary64)) (hypot.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))) (*.f64 (*.f64 b b) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 (*.f64 b b) (hypot.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))))","(/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3 binary64))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (fma.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3 binary64))) (*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 9 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 9/2 binary64))) (*.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (fma.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64)))))","(/.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (+.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (-.f64 (*.f64 b b) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (neg.f64 (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(neg.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal 1 binary64)))","(neg.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(fma.f64 (/.f64 (*.f64 b b) (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (neg.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(fma.f64 (/.f64 (*.f64 b b) (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (neg.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(fma.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (neg.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(fma.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (+.f64 (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (pow.f64 b #s(literal 4 binary64))) (neg.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(fma.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64))) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64)) b)","(fma.f64 (neg.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64))) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64)) b)","(fma.f64 (pow.f64 b #s(literal 1/2 binary64)) (pow.f64 b #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(fma.f64 (pow.f64 b #s(literal 3/2 binary64)) (/.f64 (pow.f64 b #s(literal 3/2 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (neg.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(fma.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64)) (neg.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64))) b)","(fma.f64 #s(literal -1 binary64) (/.f64 (*.f64 b b) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (neg.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(fma.f64 #s(literal -1 binary64) (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (neg.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)","(fma.f64 #s(literal -1 binary64) b (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(fma.f64 #s(literal 1 binary64) (/.f64 (*.f64 b b) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (neg.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(fma.f64 #s(literal 1 binary64) b (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(fma.f64 (pow.f64 b #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 b b)) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(fma.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal -1 binary64) b)","(fma.f64 (*.f64 b b) (/.f64 b (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (neg.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(fma.f64 (*.f64 b b) (/.f64 #s(literal 1 binary64) b) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(fma.f64 (*.f64 b b) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64)) (neg.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(fma.f64 b (/.f64 b (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (neg.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(fma.f64 b (/.f64 (*.f64 b b) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (neg.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(fma.f64 b #s(literal -1 binary64) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(fma.f64 b #s(literal 1 binary64) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(-.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 0 binary64)) b)","(-.f64 (/.f64 (*.f64 b b) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(-.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(-.f64 #s(literal 0 binary64) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(-.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b)","(-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(+.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 0 binary64)) b)","(+.f64 (/.f64 (*.f64 b b) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (neg.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(+.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (neg.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))","(+.f64 #s(literal 0 binary64) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(+.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b)","(+.f64 b (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(*.f64 (pow.f64 b #s(literal 1/2 binary64)) (pow.f64 b #s(literal 1/2 binary64)))","(*.f64 #s(literal -1 binary64) b)","(*.f64 #s(literal 1 binary64) b)","(*.f64 (pow.f64 b #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 b b)))","(*.f64 (*.f64 b b) (/.f64 #s(literal 1 binary64) b))","(*.f64 b #s(literal -1 binary64))","(*.f64 b #s(literal 1 binary64))","(pow.f64 b #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 b (*.f64 b b)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64))))","(/.f64 (pow.f64 b #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (-.f64 (*.f64 b b) #s(literal 0 binary64))))","(/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 b b))","(/.f64 (*.f64 b b) b)","(neg.f64 b)","(fma.f64 (pow.f64 b #s(literal 1/2 binary64)) (pow.f64 b #s(literal 1/2 binary64)) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) b #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) b #s(literal 0 binary64))","(fma.f64 (pow.f64 b #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 b b)) #s(literal 0 binary64))","(fma.f64 (*.f64 b b) (/.f64 #s(literal 1 binary64) b) #s(literal 0 binary64))","(fma.f64 b #s(literal -1 binary64) #s(literal 0 binary64))","(fma.f64 b #s(literal 1 binary64) #s(literal 0 binary64))","(-.f64 (/.f64 #s(literal 0 binary64) b) b)","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 b b)) b)","(-.f64 #s(literal 0 binary64) b)","(exp.f64 (*.f64 (log.f64 b) #s(literal 1 binary64)))","(+.f64 #s(literal 0 binary64) b)","(+.f64 b #s(literal 0 binary64))","b","(*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (sqrt.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(*.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (hypot.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(pow.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1 binary64))","(pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/2 binary64))","(/.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (neg.f64 (hypot.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))))","(/.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (hypot.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (hypot.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(neg.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(-.f64 #s(literal 0 binary64) (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(fabs.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(exp.f64 (log.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":275.337158203125,"type":"rewrite"},{"compiler":[[21740,2333]],"memory":[[2637216,57173216]],"time":83.39697265625,"type":"eval"},{"alts":[["(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","next",30.06703905165023,"binary64"],["(/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","fresh",47.720830970416685,"binary64"],["(/.f64 (/.f64 (-.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","fresh",45.0711460876403,"binary64"],["(/.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","fresh",52.27743054514327,"binary64"],["(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal -1/2 binary64)) a) (*.f64 a (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 a a))","fresh",39.958014463763305,"binary64"],["(/.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b) (*.f64 #s(literal 2 binary64) a))","next",29.61315973905582,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) a))","fresh",29.965552319382407,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","next",46.64672374324652,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","fresh",40.3895445300286,"binary64"],["(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))) (*.f64 #s(literal 2 binary64) a))","fresh",42.09770324424859,"binary64"],["(/.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","fresh",46.15783040982228,"binary64"],["(/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (/.f64 c b)) (/.f64 a b) #s(literal -2 binary64)) b)) (*.f64 #s(literal 2 binary64) a))","fresh",42.11509762248876,"binary64"],["(/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","fresh",48.61582998567862,"binary64"],["(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","fresh",40.289294269636784,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","next",40.28538801965062,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) (neg.f64 b)))","fresh",43.734694380435826,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a))","fresh",42.06760633561329,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","fresh",41.931286932027966,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","next",43.03389990877592,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","fresh",42.03137650553396,"binary64"]],"compiler":[[18,13],[27,16],[28,14],[42,19],[23,17],[16,13],[20,16],[21,16],[23,18],[26,19],[27,16],[30,21],[25,19],[15,12],[15,12],[31,21],[27,19],[22,17],[22,17],[25,18],[18,13],[27,16],[28,14],[42,19],[23,17],[16,13],[20,16],[21,16],[23,18],[26,19],[27,16],[30,21],[25,19],[15,12],[15,12],[31,21],[27,19],[22,17],[22,17],[25,18]],"count":[[608,20]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[607,20],"picked":[1,0]}],"memory":[[-22201824,31875776]],"min-error":[[5.566992060171517,"binary64"]],"time":29.14892578125,"type":"prune"},{"egraph":[[0,4293,286,0.015192456],[16,4293,286,0.032653952],[15,4287,286,0.033973399],[14,4283,286,0.029758238],[13,4279,286,0.027674052],[12,4187,286,0.03250809],[11,4063,286,0.03214613],[10,4063,286,0.016551475],[9,4056,286,0.016175411],[8,4032,286,0.01595219],[7,3852,286,0.019465451],[6,3220,286,0.023337678],[5,1827,286,0.018852601],[4,1020,286,0.009849357],[3,580,286,0.004375956],[2,247,287,0.002025364],[1,117,290,0.000860621],[0,61,290,0.000554966],[0,39,297,0.000335707]],"inputs":[["(/.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b)","(neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","#s(literal -4 binary64)","(*.f64 c a)","c","a","(*.f64 b b)","b","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","(/.f64 c (neg.f64 b))","c","(neg.f64 b)","b","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))","(neg.f64 b)","b","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))","#s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))","(*.f64 b b)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","a","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 #s(literal 1/2 binary64) a)","#s(literal 1/2 binary64)","a","(-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","b","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","#s(literal -4 binary64)","(*.f64 c a)","c","(*.f64 b b)","(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(/.f64 b a)","b","a","#s(literal -1/2 binary64)","(*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a))","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","#s(literal -4 binary64)","(*.f64 c a)","c","(*.f64 b b)","(/.f64 #s(literal -1/2 binary64) a)"]],"locations":[["(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","cost-diff",0],["(*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a))","cost-diff",0],["(/.f64 b a)","cost-diff",0],["(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","cost-diff",3],["(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","cost-diff",0],["(-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","cost-diff",0],["(/.f64 #s(literal 1/2 binary64) a)","cost-diff",0],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","cost-diff",0],["(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))","cost-diff",0],["(neg.f64 b)","cost-diff",0],["(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))","cost-diff",0],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","cost-diff",1],["(neg.f64 b)","cost-diff",0],["(/.f64 c (neg.f64 b))","cost-diff",0],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","cost-diff",0],["(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","cost-diff",0],["(neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","cost-diff",0],["(-.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b)","cost-diff",0],["(/.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b) (*.f64 #s(literal 2 binary64) a))","cost-diff",1]],"memory":[[322320,8450096]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b) (*.f64 #s(literal 2 binary64) a))","(*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (/.f64 #s(literal -1/2 binary64) a))","(-.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b)","(-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","(neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(neg.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))","#s(literal -4 binary64)","(*.f64 c a)","(*.f64 a c)","c","a","(*.f64 b b)","b","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","(/.f64 c (neg.f64 b))","c","(neg.f64 b)","b","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (+.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) b) (/.f64 #s(literal -1/2 binary64) a))","(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))","(neg.f64 b)","b","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))","#s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))","(*.f64 b b)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","a","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (/.f64 #s(literal -1/2 binary64) a))","(/.f64 #s(literal 1/2 binary64) a)","#s(literal 1/2 binary64)","a","(-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","b","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))","#s(literal -4 binary64)","(*.f64 c a)","(*.f64 a c)","c","(*.f64 b b)","(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (/.f64 #s(literal -1/2 binary64) a))","(/.f64 b a)","b","a","#s(literal -1/2 binary64)","(*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))","#s(literal -4 binary64)","(*.f64 c a)","(*.f64 a c)","c","(*.f64 b b)","(/.f64 #s(literal -1/2 binary64) a)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":399.446044921875,"type":"simplify"},{"compiler":[[292,35]],"locations":[["(*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a))","accuracy",0.25390625],["(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","accuracy",0.40234375000000006],["(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","accuracy",17.195135057881043],["(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","accuracy",23.929958470936878],["(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","accuracy",0.40234375000000006],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","accuracy",3.3164016309035493],["(-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","accuracy",12.992468175560182],["(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","accuracy",23.929958470936878],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","accuracy",4.177692687887851],["(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))","accuracy",13.097526183512986],["#s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))","accuracy",21.012929320370638],["(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))","accuracy",23.929958470936878],["(/.f64 c (neg.f64 b))","accuracy",0.0],["(neg.f64 b)","accuracy",0.0],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","accuracy",43.03389990877592],["(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","accuracy",0.40234375000000006],["(/.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b) (*.f64 #s(literal 2 binary64) a))","accuracy",4.177692687887851],["(-.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b)","accuracy",13.097526183512986],["(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","accuracy",23.929958470936878]],"memory":[[2841040,50954352]],"mixsample":[[9.04931640625,"adjust",800],[0.004150390625,"ival-sub",4800],[0.388427734375,"ival-mult",1200],[0.02392578125,"ival-sqrt",3200],[0.188232421875,"ival-neg",800],[1.052490234375,"ival-sqrt",1200],[0.020751953125,"ival-mult",5600],[4.309814453125,"ival-sqrt",0],[0.0966796875,"ival-sub",400],[0.089111328125,"ival-neg",400],[0.004150390625,"ival-sub",4400],[0.357666015625,"ival-mult",800],[0.08984375,"ival-sqrt",2800],[0.111083984375,"ival-neg",1200],[0.2021484375,"ival-add",400],[0.011962890625,"ival-sqrt",3600],[0.243896484375,"ival-add",2400],[0.07275390625,"ival-mult",2400],[0.005126953125,"ival-add",6400],[0.0068359375,"ival-neg",4000],[0.401611328125,"ival-sqrt",400],[0.070556640625,"ival-div",2400],[0.540283203125,"ival-add",1200],[0.466064453125,"ival-sqrt",2000],[0.194580078125,"ival-mult",2000],[0.881103515625,"ival-sqrt",800],[0.09716796875,"ival-mult",2800],[0.070556640625,"ival-neg",1600],[0.127197265625,"ival-sqrt",4400],[0.02783203125,"ival-div",3200],[0.0986328125,"ival-div",2800],[0.050537109375,"ival-sub",2400],[0.35302734375,"ival-div",1200],[0.635498046875,"ival-sqrt",1600],[0.309326171875,"ival-add",1600],[0.25634765625,"ival-mult",400],[0.004150390625,"ival-neg",4400],[0.016845703125,"ival-sqrt",6400],[0.08740234375,"ival-add",2800],[0.320556640625,"ival-true",0],[0.52099609375,"ival-sqrt",2400],[0.013916015625,"ival-div",3600],[0.013916015625,"ival-sqrt",5600],[0.0361328125,"ival-mult",3200],[0.05615234375,"ival-add",4400],[0.121337890625,"ival-sub",1200],[15.341796875,"ival-div",0],[0.010986328125,"ival-add",4800],[0.04833984375,"ival-neg",2400],[0.246337890625,"ival-div",400],[0.07177734375,"ival-sub",1600],[0.13671875,"ival-assert",0],[0.4736328125,"ival-div",1600],[9.209716796875,"ival-sub",0],[0.0517578125,"ival-sqrt",4800],[4.10986328125,"ival-add",0],[0.01513671875,"ival-mult",3600],[0.19580078125,"ival-sub",800],[0.005126953125,"ival-neg",4800],[0.392333984375,"ival-mult",1600],[0.75439453125,"adjust",2800],[0.225341796875,"ival-div",2000],[0.008056640625,"ival-sub",4000],[0.007080078125,"ival-add",5600],[0.07177734375,"ival-sub",2000],[0.046142578125,"ival-sqrt",4000],[0.01416015625,"ival-div",5600],[0.01318359375,"ival-add",3200],[0.005859375,"ival-add",3600],[4.354248046875,"adjust",2000],[19.113037109375,"ival-mult",0],[0.159912109375,"ival-add",2000],[0.185302734375,"ival-neg",2000],[0.35302734375,"ival-div",800],[0.412353515625,"ival-add",800],[0.706787109375,"exact",0],[2.97314453125,"ival-neg",0]],"outcomes":[[34.07958984375,1,"valid",67],[54.83544921875,2,"valid",76],[14.522705078125,3,"valid",17],[26.3916015625,0,"valid",96]],"time":165.549072265625,"type":"localize"},{"count":[[18,215]],"inputs":[["(/.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b)","(neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","(/.f64 c (neg.f64 b))","(neg.f64 b)","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 #s(literal 1/2 binary64) a)","(-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(/.f64 b a)","(*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","#s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))"]],"memory":[[-3032416,13995840]],"outputs":[["(* -1 (/ b a))","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/ (+ (* -1 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* -1 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(* -2 b)","(- (* 2 (/ (* a c) b)) (* 2 b))","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) (* 2 b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) (* 2 b))","(* -1 b)","(- (* 2 (/ (* a c) b)) b)","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) b)","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) b)","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(/ c b)","(+ (/ c b) (/ (* a (pow c 2)) (pow b 3)))","(+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b))","(+ (* a (+ (* a (+ (* 1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)) (* 2 (/ (pow c 3) (pow b 5))))) (/ (pow c 2) (pow b 3)))) (/ c b))","(/ 1/2 a)","(* 2 (/ (* a c) b))","(* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b))))","(* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b))))","(* a (- (* a (- (* a (- (* 1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)) (* -4 (/ (pow c 3) (pow b 5))))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b))))","(/ b a)","(* -1/2 (/ b a))","(/ (+ (* -1/2 b) (/ (* a c) b)) a)","(/ (+ (* -1/2 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* -1/2 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/2 (/ b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (- (* -1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* 1/2 (/ b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (/ b a))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (* 1/2 (/ b a)))))","(* a (- (/ b a) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (/ b a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* -4 (* a c))","(* a (+ (* -4 c) (/ (pow b 2) a)))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (- (/ b a) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* 1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (- (* -1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(+ (* 1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/2 b) (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* -1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* a (- (* -1 (/ b a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (+ b (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (+ b (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/1024 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (pow b 2) a)) (* 4 c))))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(- (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(- (* (pow b 2) (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(- (* (pow b 2) (- (* (pow b 2) (- (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(* -1 (/ c b))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (+ (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(- b (* (sqrt (* a c)) (sqrt -4)))","(- (* b (+ 1 (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (+ 1 (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* (pow b 2) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* (pow b 2) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))))))))","(- (pow b 2) (* 4 (* a c)))","(* b (- (/ c (pow b 2)) (/ 1 a)))","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a)))","(* b (- (* 2 (/ (* a c) (pow b 2))) 2))","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (- (* 2 (/ (* a c) (pow b 2))) 1))","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(/ (+ c (/ (* a (pow c 2)) (pow b 2))) b)","(/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b)","(/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b)","(/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b)","(/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b)","(* b (- (/ c (pow b 2)) (* 1/2 (/ 1 a))))","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (* 1/2 (/ 1 a))))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (* 1/2 (/ 1 a))))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* -1 (/ (+ c (/ (* a (pow c 2)) (pow b 2))) b))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(* -2 (/ (* a c) b))","(* -1 (/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b))","(* -1 (/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(* -1 (/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b))","(* -1 (* b (- (* 2 (/ (* a c) (pow b 2))) 1)))","(* -1 (* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 1 (* -2 (/ (* a c) (pow b 2)))))))","(* -1 (* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (* b (- (/ c (pow b 2)) (/ 1 a))))","(* -1 (* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))","(* -1 (* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a))))","(* 2 b)","(* -1 (* b (- (* 2 (/ (* a c) (pow b 2))) 2)))","(* -1 (* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2)))))))","(* -1 (* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* 1/2 (/ b a))","(* -1 (* b (- (/ c (pow b 2)) (* 1/2 (/ 1 a)))))","(* -1 (* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (* 1/2 (/ 1 a)))))","(* -1 (* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (* 1/2 (/ 1 a)))))","(+ (* -1 (/ b a)) (/ c b))","(+ (* -1 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) (* 2 b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) (* 2 b))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) b)","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) b)","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (/ 1 b) (/ (* a c) (pow b 3))))","(* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b)))","(* c (+ (* c (+ (* c (+ (* 1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))) (* 2 (/ (pow a 2) (pow b 5))))) (/ a (pow b 3)))) (/ 1 b)))","(* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b))))","(* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b))))","(* c (- (* c (- (* c (- (* 1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b)) (* -4 (/ (pow a 3) (pow b 5))))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b))))","(+ (* -1/2 (/ b a)) (/ c b))","(+ (* -1/2 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* -1/2 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/2 (/ b (* a c)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (- (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* 1/2 (/ b (* a c)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (/ b (* a c))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (* 1/2 (/ b (* a c)))))))","(* c (- (/ b c) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (/ b c)) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 7) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (+ (* -4 a) (/ (pow b 2) c)))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)))))","(* -1 (* c (- (/ b c) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* -1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1/2 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 1/2 (/ b a))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* 1/2 (/ b a))) c)))))","(* -1 (* c (- (* -1 (/ b c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (+ b (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (+ b (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1))))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (+ (* -1/1024 (* (sqrt (/ 1 (* (pow a 7) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1)))))))))","(* -1 (* c (+ (* -1 (/ (pow b 2) c)) (* 4 a))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))"]],"series":[[3.34619140625,"((/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (neg (sqrt (+ (* -4 (* c a)) (* b b)))) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ c (neg b)) (neg b) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (+ (* (/ b a) -1/2) (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a))) (/ b a) (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (+ (* -4 (* c a)) (* b b)) (- (* b b) (* 4 (* a c))))","c","-inf"],[3.5361328125,"((/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (neg (sqrt (+ (* -4 (* c a)) (* b b)))) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ c (neg b)) (neg b) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (+ (* (/ b a) -1/2) (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a))) (/ b a) (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (+ (* -4 (* c a)) (* b b)) (- (* b b) (* 4 (* a c))))","c","inf"],[2.56591796875,"((/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (neg (sqrt (+ (* -4 (* c a)) (* b b)))) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ c (neg b)) (neg b) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (+ (* (/ b a) -1/2) (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a))) (/ b a) (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (+ (* -4 (* c a)) (* b b)) (- (* b b) (* 4 (* a c))))","c","0"],[2.760009765625,"((/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (neg (sqrt (+ (* -4 (* c a)) (* b b)))) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ c (neg b)) (neg b) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (+ (* (/ b a) -1/2) (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a))) (/ b a) (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (+ (* -4 (* c a)) (* b b)) (- (* b b) (* 4 (* a c))))","b","-inf"],[3.572998046875,"((/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (neg (sqrt (+ (* -4 (* c a)) (* b b)))) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ c (neg b)) (neg b) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (+ (* (/ b a) -1/2) (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a))) (/ b a) (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (+ (* -4 (* c a)) (* b b)) (- (* b b) (* 4 (* a c))))","b","inf"],[5.427978515625,"((/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (neg (sqrt (+ (* -4 (* c a)) (* b b)))) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ c (neg b)) (neg b) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (+ (* (/ b a) -1/2) (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a))) (/ b a) (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (+ (* -4 (* c a)) (* b b)) (- (* b b) (* 4 (* a c))))","b","0"],[3.559814453125,"((/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (neg (sqrt (+ (* -4 (* c a)) (* b b)))) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ c (neg b)) (neg b) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (+ (* (/ b a) -1/2) (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a))) (/ b a) (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (+ (* -4 (* c a)) (* b b)) (- (* b b) (* 4 (* a c))))","a","-inf"],[5.68408203125,"((/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (neg (sqrt (+ (* -4 (* c a)) (* b b)))) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ c (neg b)) (neg b) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (+ (* (/ b a) -1/2) (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a))) (/ b a) (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (+ (* -4 (* c a)) (* b b)) (- (* b b) (* 4 (* a c))))","a","inf"],[2.735107421875,"((/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (neg (sqrt (+ (* -4 (* c a)) (* b b)))) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ c (neg b)) (neg b) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (sqrt (- (* b b) (* 4 (* a c)))) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (+ (* (/ b a) -1/2) (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a))) (/ b a) (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (+ (* -4 (* c a)) (* b b)) (- (* b b) (* 4 (* a c))))","a","0"]],"time":38.98583984375,"type":"series"},{"count":[[215,214]],"egraph":[[0,8309,6171,0.116776503],[1,2694,6456,0.035812275],[0,848,6527,0.015869499]],"inputs":[["(* -1 (/ b a))","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/ (+ (* -1 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* -1 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(* -2 b)","(- (* 2 (/ (* a c) b)) (* 2 b))","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) (* 2 b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) (* 2 b))","(* -1 b)","(- (* 2 (/ (* a c) b)) b)","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) b)","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) b)","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(/ c b)","(+ (/ c b) (/ (* a (pow c 2)) (pow b 3)))","(+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b))","(+ (* a (+ (* a (+ (* 1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)) (* 2 (/ (pow c 3) (pow b 5))))) (/ (pow c 2) (pow b 3)))) (/ c b))","(/ 1/2 a)","(* 2 (/ (* a c) b))","(* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b))))","(* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b))))","(* a (- (* a (- (* a (- (* 1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)) (* -4 (/ (pow c 3) (pow b 5))))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b))))","(/ b a)","(* -1/2 (/ b a))","(/ (+ (* -1/2 b) (/ (* a c) b)) a)","(/ (+ (* -1/2 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* -1/2 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/2 (/ b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (- (* -1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* 1/2 (/ b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (/ b a))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (* 1/2 (/ b a)))))","(* a (- (/ b a) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (/ b a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* -4 (* a c))","(* a (+ (* -4 c) (/ (pow b 2) a)))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (- (/ b a) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* 1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (- (* -1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(+ (* 1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/2 b) (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* -1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* a (- (* -1 (/ b a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (+ b (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (+ b (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/1024 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (pow b 2) a)) (* 4 c))))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(- (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(- (* (pow b 2) (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(- (* (pow b 2) (- (* (pow b 2) (- (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(* -1 (/ c b))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (+ (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(- b (* (sqrt (* a c)) (sqrt -4)))","(- (* b (+ 1 (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (+ 1 (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* (pow b 2) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* (pow b 2) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))))))))","(- (pow b 2) (* 4 (* a c)))","(* b (- (/ c (pow b 2)) (/ 1 a)))","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a)))","(* b (- (* 2 (/ (* a c) (pow b 2))) 2))","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (- (* 2 (/ (* a c) (pow b 2))) 1))","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(/ (+ c (/ (* a (pow c 2)) (pow b 2))) b)","(/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b)","(/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b)","(/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b)","(/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b)","(* b (- (/ c (pow b 2)) (* 1/2 (/ 1 a))))","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (* 1/2 (/ 1 a))))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (* 1/2 (/ 1 a))))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* -1 (/ (+ c (/ (* a (pow c 2)) (pow b 2))) b))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(* -2 (/ (* a c) b))","(* -1 (/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b))","(* -1 (/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(* -1 (/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b))","(* -1 (* b (- (* 2 (/ (* a c) (pow b 2))) 1)))","(* -1 (* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 1 (* -2 (/ (* a c) (pow b 2)))))))","(* -1 (* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (* b (- (/ c (pow b 2)) (/ 1 a))))","(* -1 (* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))","(* -1 (* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a))))","(* 2 b)","(* -1 (* b (- (* 2 (/ (* a c) (pow b 2))) 2)))","(* -1 (* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2)))))))","(* -1 (* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* 1/2 (/ b a))","(* -1 (* b (- (/ c (pow b 2)) (* 1/2 (/ 1 a)))))","(* -1 (* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (* 1/2 (/ 1 a)))))","(* -1 (* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (* 1/2 (/ 1 a)))))","(+ (* -1 (/ b a)) (/ c b))","(+ (* -1 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) (* 2 b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) (* 2 b))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) b)","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) b)","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (/ 1 b) (/ (* a c) (pow b 3))))","(* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b)))","(* c (+ (* c (+ (* c (+ (* 1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))) (* 2 (/ (pow a 2) (pow b 5))))) (/ a (pow b 3)))) (/ 1 b)))","(* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b))))","(* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b))))","(* c (- (* c (- (* c (- (* 1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b)) (* -4 (/ (pow a 3) (pow b 5))))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b))))","(+ (* -1/2 (/ b a)) (/ c b))","(+ (* -1/2 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* -1/2 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/2 (/ b (* a c)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (- (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* 1/2 (/ b (* a c)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (/ b (* a c))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (* 1/2 (/ b (* a c)))))))","(* c (- (/ b c) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (/ b c)) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 7) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (+ (* -4 a) (/ (pow b 2) c)))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)))))","(* -1 (* c (- (/ b c) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* -1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1/2 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 1/2 (/ b a))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* 1/2 (/ b a))) c)))))","(* -1 (* c (- (* -1 (/ b c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (+ b (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (+ b (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1))))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (+ (* -1/1024 (* (sqrt (/ 1 (* (pow a 7) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1)))))))))","(* -1 (* c (+ (* -1 (/ (pow b 2) c)) (* 4 a))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))"]],"memory":[[101088,59454352]],"method":["egg-herbie"],"outputs":[["(* -1 (/ b a))","(/.f64 (neg.f64 b) a)","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/.f64 (fma.f64 a (/.f64 c b) (neg.f64 b)) a)","(/ (+ (* -1 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/.f64 (fma.f64 (fma.f64 (*.f64 a c) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)) a (neg.f64 b)) a)","(/ (+ (* -1 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 a #s(literal 2 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64)))) a (/.f64 c b)) a (neg.f64 b)) a)","(* -2 b)","(*.f64 #s(literal -2 binary64) b)","(- (* 2 (/ (* a c) b)) (* 2 b))","(*.f64 #s(literal 2 binary64) (fma.f64 a (/.f64 c b) (neg.f64 b)))","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) (* 2 b))","(fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (*.f64 a c) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 c b))) a (*.f64 #s(literal -2 binary64) b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) (* 2 b))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal 2 binary64) (*.f64 c c)) (pow.f64 b #s(literal 3 binary64)))) a (*.f64 (/.f64 c b) #s(literal 2 binary64))) a (*.f64 #s(literal -2 binary64) b))","(* -1 b)","(neg.f64 b)","(- (* 2 (/ (* a c) b)) b)","(-.f64 (*.f64 (/.f64 (*.f64 a c) b) #s(literal 2 binary64)) b)","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) b)","(fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (*.f64 a c) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 c b))) a (neg.f64 b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) b)","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal 2 binary64) (*.f64 c c)) (pow.f64 b #s(literal 3 binary64)))) a (*.f64 (/.f64 c b) #s(literal 2 binary64))) a (neg.f64 b))","b","(+ b (* -2 (/ (* a c) b)))","(fma.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 c b) b)","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(fma.f64 (*.f64 a #s(literal -2 binary64)) (fma.f64 (*.f64 a c) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)) b)","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) (pow.f64 b #s(literal 5 binary64))) (*.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a c) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)))) a b)","(/ c b)","(/.f64 c b)","(+ (/ c b) (/ (* a (pow c 2)) (pow b 3)))","(fma.f64 (*.f64 a c) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 c b))","(+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b))","(fma.f64 (fma.f64 (*.f64 a #s(literal 2 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64)))) a (/.f64 c b))","(+ (* a (+ (* a (+ (* 1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)) (* 2 (/ (pow c 3) (pow b 5))))) (/ (pow c 2) (pow b 3)))) (/ c b))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) (*.f64 #s(literal 20 binary64) a)) b) #s(literal 1/4 binary64) (/.f64 (*.f64 #s(literal 2 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 5 binary64)))) a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64)))) a (/.f64 c b))","(/ 1/2 a)","(/.f64 #s(literal 1/2 binary64) a)","(* 2 (/ (* a c) b))","(*.f64 (/.f64 (*.f64 a c) b) #s(literal 2 binary64))","(* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b))))","(*.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (*.f64 a c) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 c b))) a)","(* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal 2 binary64) (*.f64 c c)) (pow.f64 b #s(literal 3 binary64)))) a (*.f64 (/.f64 c b) #s(literal 2 binary64))) a)","(* a (- (* a (- (* a (- (* 1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)) (* -4 (/ (pow c 3) (pow b 5))))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) (*.f64 #s(literal 20 binary64) a)) b) (/.f64 (*.f64 #s(literal 4 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 5 binary64)))) a (/.f64 (*.f64 #s(literal 2 binary64) (*.f64 c c)) (pow.f64 b #s(literal 3 binary64)))) a (*.f64 (/.f64 c b) #s(literal 2 binary64))) a)","(/ b a)","(/.f64 b a)","(* -1/2 (/ b a))","(*.f64 #s(literal -1/2 binary64) (/.f64 b a))","(/ (+ (* -1/2 b) (/ (* a c) b)) a)","(/.f64 (fma.f64 #s(literal -1/2 binary64) b (/.f64 (*.f64 a c) b)) a)","(/ (+ (* -1/2 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/.f64 (fma.f64 (fma.f64 (*.f64 a c) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)) a (*.f64 #s(literal -1/2 binary64) b)) a)","(/ (+ (* -1/2 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 a #s(literal 2 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64)))) a (/.f64 c b)) a (*.f64 #s(literal -1/2 binary64) b)) a)","(pow b 2)","(*.f64 b b)","(+ (* -4 (* a c)) (pow b 2))","(fma.f64 #s(literal -4 binary64) (*.f64 a c) (*.f64 b b))","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/2 (/ b a)))","(*.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/4 binary64) (*.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(fma.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)) (fma.f64 (*.f64 #s(literal -1/4 binary64) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))))))","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 a c)))","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a))) a)","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))) a)","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))) a)","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)))) a)","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(* a (- (* -1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(* (sqrt (* a c)) (sqrt -4))","(*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))))) a)","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* 1/2 (/ b a)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 #s(literal 1/2 binary64) (/.f64 b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (/ b a))))","(fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/4 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 #s(literal 1/2 binary64) (/.f64 b a))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (* 1/2 (/ b a)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (fma.f64 (*.f64 #s(literal -1/4 binary64) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 #s(literal 1/2 binary64) (/.f64 b a)))))","(* a (- (/ b a) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (-.f64 (/.f64 b a) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* a (- (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (-.f64 (/.f64 b a) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(* a (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (/ b a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 b a)) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))))","(fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/4 binary64) (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3))))))","(fma.f64 (*.f64 #s(literal -1/4 binary64) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (fma.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/16 binary64) (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (fma.f64 (*.f64 #s(literal -1/32 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal -1/4 binary64) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))))))","(* -4 (* a c))","(*.f64 #s(literal -4 binary64) (*.f64 a c))","(* a (+ (* -4 c) (/ (pow b 2) a)))","(*.f64 (fma.f64 #s(literal -4 binary64) c (/.f64 (*.f64 b b) a)) a)","(* a (- (/ (pow b 2) a) (* 4 c)))","(*.f64 (fma.f64 #s(literal -4 binary64) c (/.f64 (*.f64 b b) a)) a)","(* (sqrt (/ c a)) (sqrt -1))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 #s(literal 1/2 binary64) b)) (neg.f64 a)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 #s(literal 1/2 binary64) b (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/128 binary64)))) (neg.f64 a))) (neg.f64 a)))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 a c)))","(* -1 (* a (- (/ b a) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (-.f64 (/.f64 b a) (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) (neg.f64 b)) a) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/64 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 #s(literal -1/4 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b))) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 a)) b) a) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/4 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (- (* 1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (-.f64 (*.f64 (*.f64 #s(literal 1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))))","(* -1 (* a (- (* -1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(*.f64 (neg.f64 a) (-.f64 (fma.f64 (*.f64 #s(literal -1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (*.f64 #s(literal 1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 a c)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))))","(+ (* 1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (*.f64 #s(literal 1/2 binary64) (/.f64 b a)))","(+ (* -1 (/ (+ (* -1/2 b) (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 #s(literal -1/2 binary64) b)) (neg.f64 a)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* -1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 #s(literal -1/2 binary64) b (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/128 binary64)))) (neg.f64 a))) (neg.f64 a)))","(* -1 (* a (- (* -1 (/ b a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (-.f64 (/.f64 (neg.f64 b) a) (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (- (* -1 (/ (+ b (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) b) a) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (- (* -1 (/ (+ b (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (/.f64 (-.f64 b (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/64 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 #s(literal -1/4 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b))) (sqrt.f64 #s(literal -1 binary64)))) a)) a) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))))","(+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))","(+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(fma.f64 (*.f64 #s(literal -1/128 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))","(+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/1024 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(fma.f64 (*.f64 #s(literal -1/128 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 1/1024 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))))","(* -1 (* a (+ (* -1 (/ (pow b 2) a)) (* 4 c))))","(*.f64 (neg.f64 a) (neg.f64 (fma.f64 #s(literal -4 binary64) c (/.f64 (*.f64 b b) a))))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(*.f64 (neg.f64 a) (neg.f64 (fma.f64 #s(literal -4 binary64) c (/.f64 (*.f64 b b) a))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -1/2 binary64) a)) b))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/16 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/4 binary64))) b (/.f64 #s(literal -1/2 binary64) a)) b))","(- (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(-.f64 (neg.f64 b) (*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(-.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) #s(literal -1 binary64)) b) (*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/2 binary64))) b #s(literal -1 binary64)) b (*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 a c))))","(- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 a c))))","(- (* (pow b 2) (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/2 binary64))) b) b (*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 a c))))","(- (* (pow b 2) (- (* (pow b 2) (- (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (/.f64 (*.f64 b b) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) #s(literal 1/8 binary64))) (*.f64 b b) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/2 binary64))) (*.f64 b b) (*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 a c))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (*.f64 b b) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) #s(literal -1/8 binary64))) (*.f64 b b) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))","(* -1 (/ c b))","(/.f64 (neg.f64 c) b)","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) b))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (+ (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/16 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/4 binary64))) b (/.f64 #s(literal 1/2 binary64) a)) b))","(- b (* (sqrt (* a c)) (sqrt -4)))","(-.f64 b (*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))","(- (* b (+ 1 (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(-.f64 (fma.f64 (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c)))) (*.f64 #s(literal -1/2 binary64) b) b) (*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))","(- (* b (+ 1 (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/2 binary64))) b #s(literal 1 binary64)) b (*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 a c))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* (pow b 2) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/16 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/4 binary64))) (*.f64 b b) (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* (pow b 2) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/32 binary64) (/.f64 (*.f64 b b) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) #s(literal 1/16 binary64))) (*.f64 b b) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/4 binary64))) (*.f64 b b) (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a))))","(- (pow b 2) (* 4 (* a c)))","(fma.f64 #s(literal -4 binary64) (*.f64 a c) (*.f64 b b))","(* b (- (/ c (pow b 2)) (/ 1 a)))","(*.f64 (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1 binary64) a)) b)","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))","(*.f64 (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1 binary64) a))) b)","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a)))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1 binary64) a)))) b)","(* b (- (* 2 (/ (* a c) (pow b 2))) 2))","(*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal 2 binary64) #s(literal -2 binary64)) b)","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (-.f64 (/.f64 (*.f64 #s(literal 2 binary64) (*.f64 (*.f64 (*.f64 c c) a) a)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -2 binary64) #s(literal 2 binary64))) b)","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 a (/.f64 c (*.f64 b b)))) #s(literal 2 binary64))) b)","(* b (- (* 2 (/ (* a c) (pow b 2))) 1))","(*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal 2 binary64) #s(literal -1 binary64)) b)","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (-.f64 (/.f64 (*.f64 #s(literal 2 binary64) (*.f64 (*.f64 (*.f64 c c) a) a)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -2 binary64) #s(literal 1 binary64))) b)","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 a (/.f64 c (*.f64 b b)))) #s(literal 1 binary64))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -2 binary64) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(*.f64 (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 a (/.f64 c (*.f64 b b)))) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 a (/.f64 c (*.f64 b b)))) #s(literal 1 binary64))) b)","(/ (+ c (/ (* a (pow c 2)) (pow b 2))) b)","(/.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c) b)","(/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b)","(/.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) c)) b)","(/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b)","(/.f64 (fma.f64 (/.f64 #s(literal 1/4 binary64) a) (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (*.f64 (pow.f64 c #s(literal 4 binary64)) #s(literal 20 binary64))) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) c))) b)","(/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b)","(/.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b) (*.f64 a c))) b)","(/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 #s(literal 2 binary64) (fma.f64 a c (*.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b))))) b)","(/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b)","(/.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (*.f64 (pow.f64 c #s(literal 4 binary64)) #s(literal 20 binary64))) (pow.f64 b #s(literal 6 binary64))) #s(literal 1/2 binary64) (*.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))))) (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b) (*.f64 a c)))) b)","(* b (- (/ c (pow b 2)) (* 1/2 (/ 1 a))))","(*.f64 (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a)) b)","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (* 1/2 (/ 1 a))))","(*.f64 (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a))) b)","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (* 1/2 (/ 1 a))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a)))) b)","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(*.f64 (*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)","(* -1 (/ (+ c (/ (* a (pow c 2)) (pow b 2))) b))","(/.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c) (neg.f64 b))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b))","(/.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) c)) (neg.f64 b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(/.f64 (fma.f64 (/.f64 #s(literal 1/4 binary64) a) (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (*.f64 (pow.f64 c #s(literal 4 binary64)) #s(literal 20 binary64))) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) c))) (neg.f64 b))","(* -2 (/ (* a c) b))","(*.f64 #s(literal -2 binary64) (/.f64 (*.f64 a c) b))","(* -1 (/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b))","(/.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b) (*.f64 a c))) (neg.f64 b))","(* -1 (/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(/.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 #s(literal 2 binary64) (fma.f64 a c (*.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b))))) (neg.f64 b))","(* -1 (/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b))","(/.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (*.f64 (pow.f64 c #s(literal 4 binary64)) #s(literal 20 binary64))) (pow.f64 b #s(literal 6 binary64))) #s(literal 1/2 binary64) (*.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))))) (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b) (*.f64 a c)))) (neg.f64 b))","(* -1 (* b (- (* 2 (/ (* a c) (pow b 2))) 1)))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal 2 binary64) #s(literal -1 binary64)))","(* -1 (* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 1 (* -2 (/ (* a c) (pow b 2)))))))","(*.f64 (neg.f64 b) (-.f64 (/.f64 (*.f64 #s(literal 2 binary64) (*.f64 (*.f64 (*.f64 c c) a) a)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -2 binary64) #s(literal 1 binary64))))","(* -1 (* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(*.f64 (neg.f64 b) (-.f64 (*.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 a (/.f64 c (*.f64 b b)))) #s(literal 1 binary64))))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -2 binary64) #s(literal 1 binary64)))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (neg.f64 b) (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 a (/.f64 c (*.f64 b b)))) #s(literal 1 binary64)))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 a (/.f64 c (*.f64 b b)))) #s(literal 1 binary64))))","(* -1 (* b (- (/ c (pow b 2)) (/ 1 a))))","(*.f64 (neg.f64 b) (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1 binary64) a)))","(* -1 (* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))","(*.f64 (neg.f64 b) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1 binary64) a))))","(* -1 (* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1 binary64) a)))))","(* 2 b)","(*.f64 #s(literal 2 binary64) b)","(* -1 (* b (- (* 2 (/ (* a c) (pow b 2))) 2)))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal 2 binary64) #s(literal -2 binary64)))","(* -1 (* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2)))))))","(*.f64 (neg.f64 b) (-.f64 (/.f64 (*.f64 #s(literal 2 binary64) (*.f64 (*.f64 (*.f64 c c) a) a)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -2 binary64) #s(literal 2 binary64))))","(* -1 (* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(*.f64 (neg.f64 b) (-.f64 (*.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 a (/.f64 c (*.f64 b b)))) #s(literal 2 binary64))))","(* 1/2 (/ b a))","(*.f64 #s(literal 1/2 binary64) (/.f64 b a))","(* -1 (* b (- (/ c (pow b 2)) (* 1/2 (/ 1 a)))))","(*.f64 (neg.f64 b) (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a)))","(* -1 (* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (* 1/2 (/ 1 a)))))","(*.f64 (neg.f64 b) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a))))","(* -1 (* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (* 1/2 (/ 1 a)))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a)))))","(+ (* -1 (/ b a)) (/ c b))","(-.f64 (/.f64 c b) (/.f64 b a))","(+ (* -1 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(fma.f64 (fma.f64 a (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) b)) c (/.f64 (neg.f64 b) a))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 a (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal 1 binary64) b)) c (/.f64 (neg.f64 b) a))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) (* 2 b))","(fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 a (*.f64 c (/.f64 a (pow.f64 b #s(literal 3 binary64)))) (/.f64 a b))) c (*.f64 #s(literal -2 binary64) b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) (* 2 b))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal 2 binary64))) c (*.f64 #s(literal -2 binary64) b))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) b)","(fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 a (*.f64 c (/.f64 a (pow.f64 b #s(literal 3 binary64)))) (/.f64 a b))) c (neg.f64 b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) b)","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal 2 binary64))) c (neg.f64 b))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(fma.f64 (*.f64 #s(literal -2 binary64) (fma.f64 a (*.f64 c (/.f64 a (pow.f64 b #s(literal 3 binary64)))) (/.f64 a b))) c b)","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c b)","(* c (+ (/ 1 b) (/ (* a c) (pow b 3))))","(*.f64 (fma.f64 a (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) b)) c)","(* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b)))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 a (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal 1 binary64) b)) c)","(* c (+ (* c (+ (* c (+ (* 1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))) (* 2 (/ (pow a 2) (pow b 5))))) (/ a (pow b 3)))) (/ 1 b)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 a a) (pow.f64 b #s(literal 5 binary64))) #s(literal 2 binary64) (*.f64 (/.f64 (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) (*.f64 #s(literal 20 binary64) c)) (*.f64 b a)) #s(literal 1/4 binary64))) c (/.f64 a (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal 1 binary64) b)) c)","(* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b))))","(*.f64 (*.f64 #s(literal 2 binary64) (fma.f64 a (*.f64 c (/.f64 a (pow.f64 b #s(literal 3 binary64)))) (/.f64 a b))) c)","(* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal 2 binary64))) c)","(* c (- (* c (- (* c (- (* 1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b)) (* -4 (/ (pow a 3) (pow b 5))))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) (*.f64 #s(literal 20 binary64) c)) b) #s(literal 1/2 binary64) (/.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 b #s(literal 5 binary64)))) c (/.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal 2 binary64))) c)","(+ (* -1/2 (/ b a)) (/ c b))","(fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (/.f64 c b))","(+ (* -1/2 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(fma.f64 (fma.f64 a (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) b)) c (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(+ (* -1/2 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 a (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal 1 binary64) b)) c (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/2 (/ b (* a c)))))","(*.f64 (*.f64 c #s(literal -1/2 binary64)) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 b a) c)))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal -1/4 binary64) (*.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 b a) c)))) c)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 b a) c)) (fma.f64 (*.f64 #s(literal -1/4 binary64) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64))))))) c)","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c))) c)","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c)))) c)","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64))))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c)))) c)","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 a c)))) c)","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64))))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (- (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (*.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))))) c)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* 1/2 (/ b (* a c)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 (/.f64 (/.f64 b a) c) #s(literal 1/2 binary64))) c)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (/ b (* a c))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal -1/4 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 (/.f64 (/.f64 b a) c) #s(literal 1/2 binary64)))) c)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (* 1/2 (/ b (* a c)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c)))) (sqrt.f64 #s(literal -4 binary64)) (fma.f64 (*.f64 #s(literal -1/4 binary64) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (/.f64 (/.f64 b a) c) #s(literal 1/2 binary64))))) c)","(* c (- (/ b c) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (-.f64 (/.f64 b c) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))) c)","(* c (- (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal -1/2 binary64) (-.f64 (/.f64 b c) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (/ b c)) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 b c)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal -1/4 binary64) (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))))) c)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) #s(literal 1/16 binary64) (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c)))))) c)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 7) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c)))) (sqrt.f64 #s(literal -4 binary64)) (fma.f64 (*.f64 #s(literal -1/32 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal -1/4 binary64) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))))))) c)","(* c (+ (* -4 a) (/ (pow b 2) c)))","(*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)","(* c (- (/ (pow b 2) c) (* 4 a)))","(*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(*.f64 (neg.f64 c) (-.f64 (*.f64 (/.f64 (/.f64 b a) c) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))) c))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/128 binary64)))) (neg.f64 c))) c))))","(* -1 (* c (- (/ b c) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (-.f64 (/.f64 b c) (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)))))","(* -1 (* c (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) (neg.f64 b)) c) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/64 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) (*.f64 b b)) #s(literal -1/4 binary64))) (neg.f64 c)) b) c) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)))))","(* -1 (* c (- (* -1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/4 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)))))","(* -1 (* c (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (neg.f64 c) (-.f64 (*.f64 (*.f64 #s(literal 1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64))))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))))","(* -1 (* c (- (* -1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(*.f64 (neg.f64 c) (-.f64 (fma.f64 (*.f64 #s(literal -1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (*.f64 (*.f64 #s(literal 1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal 1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1/2 (/ b (* a c))))))","(*.f64 (neg.f64 c) (-.f64 (*.f64 (/.f64 (/.f64 b a) c) #s(literal -1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 1/2 (/ b a))) c)))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 #s(literal 1/2 binary64) (/.f64 b a))) c))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* 1/2 (/ b a))) c)))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 b a) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/128 binary64)))) (neg.f64 c))) c))))","(* -1 (* c (- (* -1 (/ b c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (-.f64 (/.f64 (neg.f64 b) c) (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)))))","(* -1 (* c (- (* -1 (/ (+ b (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) b) c) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)))))","(* -1 (* c (- (* -1 (/ (+ b (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (/.f64 (-.f64 b (/.f64 (fma.f64 (*.f64 #s(literal 1/64 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) (*.f64 b b)) #s(literal -1/4 binary64))) c)) c) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b) b)) #s(literal -1/8 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1))))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal 1/128 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b) b)) #s(literal -1/8 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c)))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (+ (* -1/1024 (* (sqrt (/ 1 (* (pow a 7) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1)))))))))","(*.f64 (neg.f64 c) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c)))) (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal -1/1024 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal 1/128 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b) b)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))))))))","(* -1 (* c (+ (* -1 (/ (pow b 2) c)) (* 4 a))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c))))"]],"stop":[["iter limit",1],["node limit",1]],"time":351.961181640625,"type":"simplify"},{"count":[[18,1830]],"egraph":[[0,8507,200,0.071700483],[2,1870,200,0.036984796],[1,245,204,0.007158901],[0,61,204,0.001868512],[0,39,211,0.000324614]],"inputs":[["(/.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b)","(neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","(/.f64 c (neg.f64 b))","(neg.f64 b)","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 #s(literal 1/2 binary64) a)","(-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(/.f64 b a)","(*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","#s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))"]],"memory":[[10924560,98418880]],"outputs":[["(*.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 (/.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(*.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal -2 binary64)) (/.f64 (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) a)))","(*.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (neg.f64 a)) (/.f64 (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) (neg.f64 a)))","(*.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) a) (/.f64 (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) a) (/.f64 (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) #s(literal -2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -2 binary64)) (/.f64 (pow.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) a)))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (neg.f64 a)) (/.f64 (pow.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)) (neg.f64 a)))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) a) (/.f64 (pow.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) a) (/.f64 (pow.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)) #s(literal -2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal -2 binary64)) (/.f64 (pow.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) a)))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) (neg.f64 a)) (/.f64 (pow.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) (neg.f64 a)))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) a) (/.f64 (pow.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) a) (/.f64 (pow.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) #s(literal -2 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) #s(literal -1 binary64)) (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a) #s(literal 1/2 binary64))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(*.f64 (/.f64 #s(literal -1 binary64) a) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal 1/2 binary64)))","(*.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (pow.f64 (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal 1/2 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(*.f64 #s(literal -1/2 binary64) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a))","(*.f64 #s(literal 1/2 binary64) (pow.f64 (/.f64 a (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) #s(literal -1 binary64)))","(*.f64 #s(literal 1/2 binary64) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a))","(*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (/.f64 #s(literal -1/2 binary64) a))","(pow.f64 (/.f64 (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)) (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64))) (fma.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 a (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal 1/2 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a)) #s(literal -2 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal 1 binary64))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (fma.f64 (pow.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (/.f64 b a) #s(literal 1/2 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal 1/2 binary64)))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) b))) (neg.f64 (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (neg.f64 (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (/.f64 b a) #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (neg.f64 (neg.f64 (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) b) a (*.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (neg.f64 (*.f64 a a)))","(/.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a (*.f64 a (*.f64 #s(literal -1/2 binary64) b)))) (neg.f64 (*.f64 a a)))","(/.f64 (neg.f64 (/.f64 (-.f64 (*.f64 #s(literal -1/8 binary64) (pow.f64 b #s(literal 3 binary64))) (*.f64 #s(literal -1/8 binary64) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)))) (pow.f64 a #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1/4 binary64) (fma.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))))))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) a) (*.f64 #s(literal 2 binary64) (/.f64 b #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (*.f64 #s(literal 2 binary64) (/.f64 a b))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) (/.f64 a b))))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 b a))) #s(literal 4 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal 2 binary64) (neg.f64 b))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal 2 binary64) b)) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) a) (*.f64 a (/.f64 b #s(literal 2 binary64)))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 a b))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (*.f64 #s(literal 2 binary64) (/.f64 a b))))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) #s(literal 2 binary64)) (*.f64 a (/.f64 b a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) a)) (*.f64 a (neg.f64 b))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 a b)) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 b #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) (/.f64 a b))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) (/.f64 a b))))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 b a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 b))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (/.f64 b #s(literal 2 binary64)))) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) (/.f64 a b))) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 a b))))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (/.f64 b a))) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (neg.f64 b))) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) b)) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 b #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) (/.f64 a b))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 2 binary64) (/.f64 a b))))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 b a))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 b))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (*.f64 (neg.f64 a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) a) (*.f64 (neg.f64 a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) (*.f64 #s(literal -2 binary64) a)) (*.f64 (neg.f64 a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 (neg.f64 a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (neg.f64 a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) #s(literal 2 binary64)) (*.f64 (neg.f64 a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) a) (*.f64 (neg.f64 a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) (*.f64 #s(literal -2 binary64) a)) (*.f64 (neg.f64 a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) (*.f64 #s(literal 2 binary64) a)) (*.f64 (neg.f64 a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (neg.f64 a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a))) #s(literal 4 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) a) (*.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal 2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal 2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 b #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 a (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 b #s(literal -2 binary64)) a) (*.f64 a (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (/.f64 b #s(literal -2 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (/.f64 b #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) a)) (*.f64 a (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 b #s(literal -2 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) b)) #s(literal 2 binary64)) (*.f64 (neg.f64 a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) b)) a) (*.f64 (neg.f64 a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) b)) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) b)) (*.f64 #s(literal -2 binary64) a)) (*.f64 (neg.f64 a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) b)) (*.f64 #s(literal 2 binary64) a)) (*.f64 (neg.f64 a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (neg.f64 a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) b) #s(literal 2 binary64)) (*.f64 a (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) b) a) (*.f64 a (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) b) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) b) (*.f64 #s(literal -2 binary64) a)) (*.f64 a (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) b) (*.f64 #s(literal 2 binary64) a)) (*.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) #s(literal 1 binary64))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 #s(literal -1 binary64) (*.f64 (/.f64 a b) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a))) (*.f64 (/.f64 a b) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 a b) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (/.f64 a b) a))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (/.f64 a b) #s(literal 1 binary64))) (*.f64 (/.f64 a b) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 a b) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (/.f64 a b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (/.f64 a b) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 b) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 b) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 b) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 b #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 b a) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (-.f64 (*.f64 b (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 b (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a))) (*.f64 (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)) (*.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a))))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (neg.f64 a) (*.f64 #s(literal 2 binary64) (*.f64 (neg.f64 b) #s(literal -1/2 binary64)))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (neg.f64 a) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -1/2 binary64) (neg.f64 b)))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) (/.f64 (neg.f64 b) a))) #s(literal 4 binary64))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) a (*.f64 #s(literal 2 binary64) (/.f64 b #s(literal -2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (neg.f64 a) (*.f64 #s(literal 2 binary64) (neg.f64 (*.f64 #s(literal -1/2 binary64) b)))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) a (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -1/2 binary64) b))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 a (*.f64 #s(literal -1/2 binary64) b))))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (*.f64 #s(literal -2 binary64) (/.f64 a b)) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) (/.f64 a b))))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (/.f64 a b) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 a b)))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 2 binary64) (neg.f64 b))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) b)) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (neg.f64 a) (*.f64 a (*.f64 (neg.f64 b) #s(literal -1/2 binary64)))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (neg.f64 a) (*.f64 a (*.f64 #s(literal -1/2 binary64) (neg.f64 b)))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) #s(literal 2 binary64) (*.f64 a (/.f64 (neg.f64 b) a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) a (*.f64 a (/.f64 b #s(literal -2 binary64)))) (*.f64 a a))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (neg.f64 a) (*.f64 a (neg.f64 (*.f64 #s(literal -1/2 binary64) b)))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) a (*.f64 a (*.f64 #s(literal -1/2 binary64) b))) (*.f64 a a))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 a (*.f64 #s(literal -1/2 binary64) b))))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 a #s(literal 1 binary64))) (*.f64 a (*.f64 #s(literal -2 binary64) (/.f64 a b))))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (/.f64 a b) (*.f64 a #s(literal -1/2 binary64))) (*.f64 a (/.f64 a b)))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) a) (*.f64 a (neg.f64 b))) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 a b)) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 b) #s(literal -1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -1/2 binary64) (neg.f64 b)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal 2 binary64) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (neg.f64 b) a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) a (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 b #s(literal -2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (*.f64 #s(literal -1/2 binary64) b)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) a (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -1/2 binary64) b))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 a (*.f64 #s(literal -1/2 binary64) b))))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) (/.f64 a b))))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 a b) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1/2 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 a b)))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 b))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 (neg.f64 b) #s(literal -1/2 binary64)))) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 #s(literal -1/2 binary64) (neg.f64 b)))) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (neg.f64 a)))","(/.f64 (+.f64 #s(literal 2 binary64) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (/.f64 (neg.f64 b) a))) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) #s(literal 2 binary64)))","(/.f64 (fma.f64 #s(literal 1 binary64) a (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (/.f64 b #s(literal -2 binary64)))) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) a))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (neg.f64 (*.f64 #s(literal -1/2 binary64) b)))) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) a (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 #s(literal -1/2 binary64) b))) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) a))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (/.f64 a (*.f64 #s(literal -1/2 binary64) b))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) (/.f64 a b))))","(/.f64 (+.f64 (/.f64 a b) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) #s(literal -1/2 binary64))) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (/.f64 a b)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (neg.f64 b))) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) b)) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 (neg.f64 b) #s(literal -1/2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -1/2 binary64) (neg.f64 b)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (neg.f64 b) a))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 b #s(literal -2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (*.f64 #s(literal -1/2 binary64) b)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -1/2 binary64) b))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 a (*.f64 #s(literal -1/2 binary64) b))))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) (/.f64 a b))))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 a b) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal -1/2 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 a b)))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 b))) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) #s(literal 2 binary64) (*.f64 (neg.f64 a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) a (*.f64 (neg.f64 a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) (*.f64 #s(literal 2 binary64) a) (*.f64 (neg.f64 a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (neg.f64 a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) #s(literal 2 binary64) (*.f64 (neg.f64 a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) a (*.f64 (neg.f64 a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) (*.f64 #s(literal 2 binary64) a) (*.f64 (neg.f64 a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (neg.f64 a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))) #s(literal 4 binary64))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) a (*.f64 #s(literal 2 binary64) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64))))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (/.f64 b #s(literal -2 binary64)) #s(literal 2 binary64) (*.f64 a (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (/.f64 b #s(literal -2 binary64)) a (*.f64 a (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 a a))","(/.f64 (fma.f64 (/.f64 b #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 a (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (/.f64 b #s(literal -2 binary64)) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 a #s(literal 1 binary64))) (*.f64 a (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64))))","(/.f64 (fma.f64 (/.f64 b #s(literal -2 binary64)) (*.f64 #s(literal 2 binary64) a) (*.f64 a (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) b)) #s(literal 2 binary64) (*.f64 (neg.f64 a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) b)) a (*.f64 (neg.f64 a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) b)) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) b)) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64))))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) b)) (*.f64 #s(literal 2 binary64) a) (*.f64 (neg.f64 a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (neg.f64 a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) b) #s(literal 2 binary64) (*.f64 a (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) b) a (*.f64 a (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 a a))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) b) (*.f64 #s(literal -2 binary64) a) (*.f64 a (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) b) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 a #s(literal 1 binary64))) (*.f64 a (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) b) (*.f64 #s(literal 2 binary64) a) (*.f64 a (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (+.f64 #s(literal 2 binary64) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) #s(literal 2 binary64)))","(/.f64 (fma.f64 #s(literal 1 binary64) a (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) a))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) #s(literal 1 binary64))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (+.f64 #s(literal 2 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) #s(literal 2 binary64)))","(/.f64 (fma.f64 #s(literal 1 binary64) a (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) a))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (+.f64 #s(literal -1 binary64) (*.f64 (/.f64 a b) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))) (*.f64 (/.f64 a b) #s(literal 2 binary64)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) a (*.f64 (/.f64 a b) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 (/.f64 a b) a))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 a b) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 (/.f64 a b) #s(literal 1 binary64))) (*.f64 (/.f64 a b) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 2 binary64) a) (*.f64 (/.f64 a b) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (/.f64 a b) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 b) #s(literal 2 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (fma.f64 (neg.f64 b) a (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (fma.f64 (neg.f64 b) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 b) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64))))","(/.f64 (fma.f64 (neg.f64 b) (*.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (fma.f64 b #s(literal 2 binary64) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (fma.f64 b a (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (fma.f64 b (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 b (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64))))","(/.f64 (fma.f64 b (*.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) (neg.f64 a) (*.f64 (neg.f64 a) (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) a (*.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) (neg.f64 a) (*.f64 (neg.f64 a) (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) a (*.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) (neg.f64 a) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) (neg.f64 a) (*.f64 #s(literal 2 binary64) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) (neg.f64 a) (*.f64 #s(literal 2 binary64) (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) a (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (/.f64 b #s(literal -2 binary64)) (neg.f64 a) (*.f64 a (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (/.f64 b #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (/.f64 b #s(literal -2 binary64)) (neg.f64 a) (*.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (/.f64 b #s(literal -2 binary64)) (neg.f64 a) (*.f64 a (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (/.f64 b #s(literal -2 binary64)) a (*.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 a a))","(/.f64 (fma.f64 (/.f64 b #s(literal -2 binary64)) (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (fma.f64 (/.f64 b #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) b)) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) b)) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) b)) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) b)) (neg.f64 a) (*.f64 (neg.f64 a) (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) b)) a (*.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) b)) (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) b)) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) b) (neg.f64 a) (*.f64 a (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) b) (*.f64 #s(literal -2 binary64) a) (*.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) b) (neg.f64 a) (*.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) b) (neg.f64 a) (*.f64 a (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) b) (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) b) (*.f64 #s(literal -2 binary64) a) (*.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) a (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) a))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) #s(literal 1 binary64))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) a (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) a))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (neg.f64 a) (*.f64 (/.f64 a b) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (/.f64 a b) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 a b) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))) (*.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (neg.f64 a) (*.f64 (/.f64 a b) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 (/.f64 a b) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (neg.f64 a) (*.f64 (/.f64 a b) (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (/.f64 a b) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) a (*.f64 (/.f64 a b) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (/.f64 a b) a))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (/.f64 a b) #s(literal 1 binary64))) (*.f64 (/.f64 a b) (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 a b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 b) (neg.f64 a) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 b) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 b) (neg.f64 a) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 b) (neg.f64 a) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 b) a (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (fma.f64 (neg.f64 b) (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (fma.f64 (neg.f64 b) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 b (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 b (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 b (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 b (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 b a (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (fma.f64 b (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (fma.f64 b (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 (neg.f64 b) #s(literal -1/2 binary64)))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) (neg.f64 b)))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64) (*.f64 (neg.f64 a) (/.f64 (neg.f64 b) a))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a (*.f64 (neg.f64 a) (/.f64 b #s(literal -2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a) (*.f64 (neg.f64 a) (neg.f64 (*.f64 #s(literal -1/2 binary64) b)))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a (*.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) b))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 a (*.f64 #s(literal -1/2 binary64) b))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) (/.f64 a b))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 a b) (*.f64 (neg.f64 a) #s(literal -1/2 binary64))) (*.f64 (neg.f64 a) (/.f64 a b)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a) (*.f64 (neg.f64 a) (neg.f64 b))) (*.f64 (neg.f64 a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) b)) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 b) #s(literal -1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -1/2 binary64) (neg.f64 b)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) #s(literal 2 binary64) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (neg.f64 b) a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) a (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 b #s(literal -2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (*.f64 #s(literal -1/2 binary64) b)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) a (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -1/2 binary64) b))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 a (*.f64 #s(literal -1/2 binary64) b))))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) (/.f64 a b))))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) (/.f64 a b) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1/2 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 a b)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 b))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 (neg.f64 b) #s(literal -1/2 binary64)))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) (neg.f64 b)))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) #s(literal 2 binary64) (*.f64 (neg.f64 a) (/.f64 (neg.f64 b) a))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) a (*.f64 (neg.f64 a) (/.f64 b #s(literal -2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (neg.f64 a) (*.f64 (neg.f64 a) (neg.f64 (*.f64 #s(literal -1/2 binary64) b)))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) a (*.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) b))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 a (*.f64 #s(literal -1/2 binary64) b))))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) (/.f64 a b))))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (/.f64 a b) (*.f64 (neg.f64 a) #s(literal -1/2 binary64))) (*.f64 (neg.f64 a) (/.f64 a b)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (*.f64 #s(literal 2 binary64) a) (*.f64 (neg.f64 a) (neg.f64 b))) (*.f64 (neg.f64 a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) b)) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 (neg.f64 b) #s(literal -1/2 binary64)))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) (neg.f64 b)))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal 2 binary64) (*.f64 (neg.f64 a) (/.f64 (neg.f64 b) a))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) a (*.f64 (neg.f64 a) (/.f64 b #s(literal -2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 a) (*.f64 (neg.f64 a) (neg.f64 (*.f64 #s(literal -1/2 binary64) b)))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) a (*.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) b))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 a (*.f64 #s(literal -1/2 binary64) b))))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) (/.f64 a b))))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 a b) (*.f64 (neg.f64 a) #s(literal -1/2 binary64))) (*.f64 (neg.f64 a) (/.f64 a b)))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a) (*.f64 (neg.f64 a) (neg.f64 b))) (*.f64 (neg.f64 a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) b)) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a) (*.f64 a (*.f64 (neg.f64 b) #s(literal -1/2 binary64)))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a) (*.f64 a (*.f64 #s(literal -1/2 binary64) (neg.f64 b)))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64) (*.f64 a (/.f64 (neg.f64 b) a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a (*.f64 a (/.f64 b #s(literal -2 binary64)))) (*.f64 a a))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a) (*.f64 a (neg.f64 (*.f64 #s(literal -1/2 binary64) b)))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 a (*.f64 #s(literal -1/2 binary64) b))))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 a #s(literal 1 binary64))) (*.f64 a (*.f64 #s(literal -2 binary64) (/.f64 a b))))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 a b) (*.f64 a #s(literal -1/2 binary64))) (*.f64 a (/.f64 a b)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a) (*.f64 a (neg.f64 b))) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a) (*.f64 a b)) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (neg.f64 b) #s(literal -1/2 binary64)))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -1/2 binary64) (neg.f64 b)))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 a)))","(/.f64 (+.f64 #s(literal 2 binary64) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 (neg.f64 b) a))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal 2 binary64)))","(/.f64 (fma.f64 #s(literal 1 binary64) a (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 b #s(literal -2 binary64)))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) a))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 (*.f64 #s(literal -1/2 binary64) b)))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) a (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -1/2 binary64) b))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) a))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal 1 binary64))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 a (*.f64 #s(literal -1/2 binary64) b))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal 1 binary64))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -2 binary64) (/.f64 a b))))","(/.f64 (+.f64 (/.f64 a b) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal -1/2 binary64))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 a b)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 b))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) b)) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 b) #s(literal -1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -1/2 binary64) (neg.f64 b)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (neg.f64 b) a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 b #s(literal -2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (*.f64 #s(literal -1/2 binary64) b)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -1/2 binary64) b))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 a (*.f64 #s(literal -1/2 binary64) b))))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) (/.f64 a b))))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 a b) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1/2 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 a b)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 b))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 b)) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) b) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64))) a)","(/.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a) #s(literal 2 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 b (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64))) (fma.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (/.f64 b a) #s(literal 1/2 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64))) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 3 binary64))) (fma.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (fma.f64 (pow.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (/.f64 b a) #s(literal 1/2 binary64))))))","(/.f64 (/.f64 (-.f64 (*.f64 #s(literal -1/8 binary64) (pow.f64 b #s(literal 3 binary64))) (*.f64 #s(literal -1/8 binary64) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)))) (pow.f64 a #s(literal 3 binary64))) (fma.f64 (pow.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1/4 binary64) (fma.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (/.f64 (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) b) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) b) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 a a)))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal 1/2 binary64))) (neg.f64 a))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal 1 binary64)) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) b)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) b) a (*.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 a a))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a (*.f64 a (*.f64 #s(literal -1/2 binary64) b))) (*.f64 a a))","(/.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal 1/2 binary64)) a)","(/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal 1/2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)) (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64))) (fma.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)) (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64))) (fma.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 a (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 3 binary64))) (fma.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (/.f64 (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) b) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) b) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 a a))))","(/.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64))))","(/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (neg.f64 (neg.f64 (*.f64 #s(literal -2 binary64) a))))","(/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (neg.f64 (*.f64 #s(literal -2 binary64) a)))","(/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a))","(/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))","(neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(fma.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -2 binary64)) (pow.f64 a #s(literal -1 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 a)) #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)) (/.f64 #s(literal 1/2 binary64) a) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) (neg.f64 a)) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) (neg.f64 a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal -2 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) a) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) a) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal -2 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (/.f64 (neg.f64 b) #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) #s(literal -1/2 binary64) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 b #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (/.f64 b #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) a) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) a) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) b) (pow.f64 a #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (pow.f64 a #s(literal -1 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 #s(literal -1 binary64) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 #s(literal -1 binary64) (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -2 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 b #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 #s(literal -1/2 binary64) (*.f64 (pow.f64 a #s(literal -1 binary64)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 #s(literal 1/2 binary64) (/.f64 (neg.f64 b) a) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 b (/.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(-.f64 (/.f64 (*.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (/.f64 b a) #s(literal 1/2 binary64)))) (/.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (fma.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (/.f64 b a) #s(literal 1/2 binary64)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))) (/.f64 (*.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)) (fma.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (fma.f64 (pow.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (/.f64 b a) #s(literal 1/2 binary64)))))) (/.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 3 binary64)) (fma.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (fma.f64 (pow.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (/.f64 b a) #s(literal 1/2 binary64)))))))","(-.f64 (/.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 3 binary64)) (fma.f64 (pow.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1/4 binary64) (fma.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))))) (/.f64 (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)) (fma.f64 (pow.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1/4 binary64) (fma.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))))))","(-.f64 (/.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(-.f64 (/.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(-.f64 (/.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(-.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (/.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(-.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(-.f64 (/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 0 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 (/.f64 b a) #s(literal 1/2 binary64)))","(-.f64 (/.f64 (fma.f64 #s(literal -1 binary64) b #s(literal 0 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))","(-.f64 (/.f64 (/.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 0 binary64)) (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(-.f64 (/.f64 (fma.f64 #s(literal -1 binary64) b #s(literal 0 binary64)) (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(-.f64 (/.f64 (/.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a)) (/.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a)))","(-.f64 (/.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a)) (/.f64 (/.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a)))","(-.f64 (/.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)) (/.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(-.f64 (/.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a)) (/.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a)))","(-.f64 (/.f64 (*.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a))) (/.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a))))","(-.f64 (/.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a))) (/.f64 (*.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 b)) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 (-.f64 b (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 b)) (*.f64 #s(literal -2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(-.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(-.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(-.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))","(-.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (/.f64 b a) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) #s(literal -1 binary64)))","(+.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(+.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(*.f64 (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)))) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (pow.f64 (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)))) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (pow.f64 (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64))))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))","(*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) (pow.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))))) (neg.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))) (neg.f64 (neg.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))) (neg.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 b b))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (-.f64 (*.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)))) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (*.f64 b b)) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))) (*.f64 (+.f64 #s(literal 0 binary64) b) (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (*.f64 b b)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))) (*.f64 (+.f64 #s(literal 0 binary64) b) (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (*.f64 b b)) (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) b) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) b) (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (*.f64 b b)) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))))) (*.f64 (+.f64 #s(literal 0 binary64) b) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) b) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))) (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (*.f64 b b)) (+.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (+.f64 #s(literal 0 binary64) b) (-.f64 #s(literal 0 binary64) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (+.f64 #s(literal 0 binary64) b) (+.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (*.f64 b b)) (+.f64 #s(literal 0 binary64) (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (+.f64 #s(literal 0 binary64) b) (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) b) (+.f64 #s(literal 0 binary64) (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (-.f64 #s(literal 0 binary64) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (+.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (+.f64 #s(literal 0 binary64) (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (+.f64 #s(literal 0 binary64) b) (*.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (-.f64 #s(literal 0 binary64) (*.f64 b b)))) (*.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (+.f64 #s(literal 0 binary64) b)))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (*.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) (+.f64 #s(literal 0 binary64) b) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (-.f64 #s(literal 0 binary64) (*.f64 b b)))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (+.f64 #s(literal 0 binary64) b)))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (neg.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 (*.f64 b b) (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 b))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(/.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (neg.f64 (neg.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (neg.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 b))))","(/.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (neg.f64 (-.f64 (neg.f64 b) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (neg.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)))) (neg.f64 (neg.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b b (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (neg.f64 b) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b b (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)))) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (-.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 b)))","(/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (-.f64 (neg.f64 b) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (neg.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 (*.f64 b b) (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 b)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (neg.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) (fma.f64 b b (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (neg.f64 b) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) (fma.f64 b b (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) (neg.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))","(fma.f64 (sqrt.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) b)","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) b)","(fma.f64 (sqrt.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (sqrt.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) b)","(fma.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) b)","(fma.f64 (pow.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) b)","(fma.f64 (pow.f64 #s(literal -1 binary64) #s(literal 1/2 binary64)) (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal 1/2 binary64)) b)","(fma.f64 (pow.f64 #s(literal 1 binary64) #s(literal 1/2 binary64)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)","(fma.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) b)","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))) b)","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) b)","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64))) b)","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) b)","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))) b)","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))) #s(literal -1 binary64))) b)","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) b)","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) b)","(fma.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 b) #s(literal 1 binary64)) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 b) #s(literal 1 binary64)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(fma.f64 #s(literal -1 binary64) (neg.f64 b) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(fma.f64 #s(literal -1 binary64) (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 b))","(fma.f64 #s(literal -1 binary64) b (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)","(fma.f64 #s(literal 1 binary64) b (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(fma.f64 #s(literal 1 binary64) b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64) (neg.f64 b))","(fma.f64 b #s(literal -1 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(-.f64 (/.f64 (*.f64 b b) (neg.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (neg.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(-.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (neg.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (/.f64 (*.f64 b b) (neg.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(-.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 b))) (/.f64 (*.f64 b b) (-.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 b))))","(-.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 (neg.f64 b) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 (*.f64 b b) (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 b))))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 (*.f64 b b) (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 b))))))","(-.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (neg.f64 b) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b b (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (neg.f64 b) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))))","(-.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 0 binary64)) b)","(-.f64 (fma.f64 #s(literal -1 binary64) b #s(literal 0 binary64)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(-.f64 (/.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(-.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(-.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(-.f64 #s(literal 0 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 b)))","(-.f64 #s(literal 0 binary64) (-.f64 b (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(-.f64 #s(literal 0 binary64) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))","(-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(-.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) b)","(+.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) b)","(+.f64 (neg.f64 b) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(+.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 b))","(+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)","(+.f64 b (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(+.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(*.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))))","(/.f64 (-.f64 #s(literal 0 binary64) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (+.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (+.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (+.f64 #s(literal 0 binary64) (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))))","(-.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(+.f64 #s(literal 0 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 (sqrt.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(*.f64 (sqrt.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (sqrt.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 (pow.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)))","(*.f64 (pow.f64 #s(literal -1 binary64) #s(literal 1/2 binary64)) (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal 1/2 binary64)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 1 binary64))","(pow.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64))","(pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/2 binary64))","(/.f64 (neg.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (neg.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))))","(/.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))))","(/.f64 (sqrt.f64 (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (sqrt.f64 (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 a c) #s(literal -4 binary64)))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (+.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b)))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))))","(sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))","(fabs.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fabs.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(exp.f64 (log.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","(*.f64 (/.f64 c #s(literal -1 binary64)) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (/.f64 c b) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 c b))","(*.f64 (/.f64 #s(literal -1 binary64) b) (pow.f64 (pow.f64 c #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) b) c)","(*.f64 #s(literal 1 binary64) (/.f64 c (neg.f64 b)))","(*.f64 (neg.f64 c) (pow.f64 b #s(literal -1 binary64)))","(*.f64 c (/.f64 #s(literal -1 binary64) b))","(pow.f64 (/.f64 (/.f64 (neg.f64 b) c) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (neg.f64 b) c) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 c #s(literal -1 binary64))) (neg.f64 b))","(/.f64 (neg.f64 (*.f64 c #s(literal 1 binary64))) b)","(/.f64 (neg.f64 (neg.f64 (neg.f64 c))) b)","(/.f64 (/.f64 c #s(literal -1 binary64)) b)","(/.f64 (*.f64 c #s(literal 1 binary64)) (neg.f64 b))","(/.f64 (neg.f64 (neg.f64 c)) (neg.f64 b))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (neg.f64 b) c) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (neg.f64 b) c)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (neg.f64 b) c))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (neg.f64 b) c) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 b) c))","(/.f64 (neg.f64 c) b)","(/.f64 c (neg.f64 b))","(neg.f64 (/.f64 c b))","(-.f64 (/.f64 #s(literal 0 binary64) b) (/.f64 c b))","(-.f64 #s(literal 0 binary64) (/.f64 c b))","(exp.f64 (*.f64 (log.f64 (/.f64 (neg.f64 b) c)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) b)","(*.f64 b #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (*.f64 b b))) (neg.f64 (+.f64 #s(literal 0 binary64) b)))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 b b)) (+.f64 #s(literal 0 binary64) b))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))))","(neg.f64 b)","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) b)) (/.f64 (*.f64 b b) (+.f64 #s(literal 0 binary64) b)))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))))","(-.f64 #s(literal 0 binary64) b)","(+.f64 #s(literal 0 binary64) (neg.f64 b))","(*.f64 (/.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(*.f64 (/.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(*.f64 (/.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) a) (/.f64 (pow.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64))) a) (/.f64 (pow.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) a) #s(literal 1/2 binary64))","(*.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal -2 binary64)))","(*.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal 1/2 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(*.f64 (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (neg.f64 a)))","(*.f64 #s(literal 1/2 binary64) (pow.f64 (/.f64 a (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) #s(literal -1 binary64)))","(*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) a))","(*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a))","(pow.f64 (/.f64 a (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal 1/2 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) a)) #s(literal -2 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal 1 binary64))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1/4 binary64) (+.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal 1/2 binary64)))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))) (neg.f64 (neg.f64 (*.f64 #s(literal -2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (-.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))) (neg.f64 (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (*.f64 (neg.f64 a) (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) a))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) a) (*.f64 (neg.f64 a) (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) (*.f64 #s(literal -2 binary64) a)) (*.f64 (neg.f64 a) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 (neg.f64 a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 (neg.f64 a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) #s(literal 2 binary64)) (*.f64 (neg.f64 a) (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) a))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) a) (*.f64 (neg.f64 a) (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) (*.f64 #s(literal -2 binary64) a)) (*.f64 (neg.f64 a) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) (*.f64 #s(literal 2 binary64) a)) (*.f64 (neg.f64 a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 (neg.f64 a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) a))) #s(literal 4 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) a) (*.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal 2 binary64) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 b #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 a (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 b #s(literal -2 binary64)) a) (*.f64 a (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (/.f64 b #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) a)) (*.f64 a (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 b #s(literal -2 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (/.f64 b #s(literal -2 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 a (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) b)) #s(literal 2 binary64)) (*.f64 (neg.f64 a) (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) a))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) b)) a) (*.f64 (neg.f64 a) (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) b)) (*.f64 #s(literal -2 binary64) a)) (*.f64 (neg.f64 a) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) b)) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) b)) (*.f64 #s(literal 2 binary64) a)) (*.f64 (neg.f64 a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 (neg.f64 a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) b) #s(literal 2 binary64)) (*.f64 a (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) b) a) (*.f64 a (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) b) (*.f64 #s(literal -2 binary64) a)) (*.f64 a (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) b) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) b) (*.f64 #s(literal 2 binary64) a)) (*.f64 a (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) a))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) #s(literal 1 binary64))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) a))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 #s(literal -1 binary64) (*.f64 (/.f64 a b) (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) a))) (*.f64 (/.f64 a b) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 a b) (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (/.f64 a b) a))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 a b) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))) (*.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 (/.f64 a b) #s(literal 1 binary64))) (*.f64 (/.f64 a b) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (/.f64 a b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 (/.f64 a b) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 b) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) a))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 b) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 b) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 b #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 b a) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (-.f64 (*.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 b (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 b (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) b) (/.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) #s(literal 2 binary64))) a)","(/.f64 (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) a) #s(literal 2 binary64))","(/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(/.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 b (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64))) (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64))) (fma.f64 (pow.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1/4 binary64) (+.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal 1/2 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))) (neg.f64 (*.f64 #s(literal -2 binary64) a)))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))))","(/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal 1/2 binary64)) a)","(/.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal 1/2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))))","(/.f64 #s(literal 1 binary64) (/.f64 a (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(neg.f64 (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(fma.f64 (/.f64 (neg.f64 b) #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) a) (neg.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 b #s(literal 2 binary64)) (neg.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (/.f64 b #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) a) (neg.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) b) (pow.f64 a #s(literal -1 binary64)) (neg.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 #s(literal -1 binary64) (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) (neg.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 b #s(literal -2 binary64)) (neg.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (neg.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (neg.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (neg.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 #s(literal 1/2 binary64) (/.f64 (neg.f64 b) a) (neg.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 b (/.f64 #s(literal -1/2 binary64) a) (neg.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(-.f64 (/.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))) (/.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 3 binary64)) (fma.f64 (pow.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1/4 binary64) (+.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))))) (/.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)) (fma.f64 (pow.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1/4 binary64) (+.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))))))","(-.f64 (/.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))) (/.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))))","(-.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))) (/.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))))","(-.f64 (/.f64 (/.f64 (*.f64 b b) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 (-.f64 b (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 (+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(-.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))) #s(literal -1 binary64)))","(+.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (neg.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(*.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (pow.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64))) (pow.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (neg.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))))","(/.f64 (-.f64 (*.f64 (*.f64 b b) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64)))) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (neg.f64 (-.f64 (neg.f64 b) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (neg.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b b (-.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) (*.f64 (neg.f64 b) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (-.f64 (neg.f64 b) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (-.f64 (*.f64 b b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64))) (fma.f64 b b (-.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) (*.f64 (neg.f64 b) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64))) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(neg.f64 (+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b))","(fma.f64 #s(literal -1 binary64) b (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(fma.f64 b #s(literal -1 binary64) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(-.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))) (/.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) (-.f64 (neg.f64 b) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))))","(-.f64 (/.f64 (*.f64 b b) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (/.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) (fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(-.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))) (/.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (neg.f64 b) #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(-.f64 #s(literal 0 binary64) (-.f64 b (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))))","(-.f64 #s(literal 0 binary64) (+.f64 b (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))","(+.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (neg.f64 b))","(+.f64 (neg.f64 b) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(*.f64 (sqrt.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (sqrt.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(*.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 1/4 binary64)))","(pow.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) #s(literal 1 binary64))","(pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))","(fabs.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))","(exp.f64 (log.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(*.f64 (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal 2 binary64)) (/.f64 (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) a) (/.f64 (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) a) (/.f64 (pow.f64 (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) #s(literal 1/2 binary64))","(*.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))","(*.f64 #s(literal 1/2 binary64) (*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(pow.f64 (/.f64 a (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 1/2 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a))) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))","(/.f64 (neg.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 1 binary64))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1/2 binary64))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))))) (neg.f64 (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 1/2 binary64)))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))) (neg.f64 (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))))) (neg.f64 (*.f64 (neg.f64 a) (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))) (neg.f64 (*.f64 a (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))))) (neg.f64 (*.f64 a (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (fma.f64 (/.f64 b #s(literal 2 binary64)) #s(literal 2 binary64) (*.f64 a (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (/.f64 b #s(literal 2 binary64)) a (*.f64 a (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 a a))","(/.f64 (fma.f64 (/.f64 b #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 a (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (/.f64 b #s(literal 2 binary64)) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 a #s(literal 1 binary64))) (*.f64 a (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64))))","(/.f64 (fma.f64 (/.f64 b #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) a) (*.f64 a (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (+.f64 #s(literal 2 binary64) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a b)) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a b)) #s(literal 2 binary64)))","(/.f64 (fma.f64 #s(literal 1 binary64) a (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a b)) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a b)) a))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a b)) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a b)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a b)) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a b)) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a b)) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a b)) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (/.f64 b a) #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))) #s(literal 4 binary64))","(/.f64 (fma.f64 (/.f64 b a) a (*.f64 #s(literal 2 binary64) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (/.f64 b a) (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (/.f64 b a) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64))))","(/.f64 (fma.f64 (/.f64 b a) (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 b) #s(literal 2 binary64) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (fma.f64 (neg.f64 b) a (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (fma.f64 (neg.f64 b) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 b) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64))))","(/.f64 (fma.f64 (neg.f64 b) (*.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 b #s(literal 2 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (fma.f64 b a (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (fma.f64 b (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 b (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64))))","(/.f64 (fma.f64 b (*.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 a))","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))","(/.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1/2 binary64)) (neg.f64 a))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)))) (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (neg.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 1/2 binary64))) (neg.f64 a))","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal -1/2 binary64)) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal 1/2 binary64)) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal -1/2 binary64)) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 1/2 binary64)) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)))) (*.f64 (neg.f64 a) (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (*.f64 a (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)))) (*.f64 a (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal 1 binary64)) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 1/2 binary64)) a)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 a (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 1/2 binary64))))","(/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(fma.f64 (/.f64 (neg.f64 b) a) #s(literal -1/2 binary64) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (/.f64 b #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 b #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (/.f64 b #s(literal 2 binary64)) (pow.f64 a #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (/.f64 b #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) a) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 b #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) b (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(fma.f64 #s(literal 1 binary64) (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 #s(literal -1/2 binary64) (/.f64 (neg.f64 b) a) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (/.f64 b a) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 #s(literal 1/2 binary64) (/.f64 b a) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 b (/.f64 #s(literal 1/2 binary64) a) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(-.f64 (/.f64 (+.f64 b #s(literal 0 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))","(-.f64 (/.f64 (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))","(+.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) b) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(+.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal 1/2 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 #s(literal -1/2 binary64) (/.f64 #s(literal -1 binary64) a))","(*.f64 #s(literal 1/2 binary64) (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal -1 binary64))","(/.f64 (neg.f64 (pow.f64 a #s(literal -1 binary64))) #s(literal -2 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (*.f64 #s(literal -2 binary64) a))","(/.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal 2 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 #s(literal -2 binary64) a)))","(/.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal -1/2 binary64) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 #s(literal -1/2 binary64) (neg.f64 a))","(/.f64 #s(literal 1/2 binary64) (neg.f64 (neg.f64 a)))","(/.f64 #s(literal 1/2 binary64) a)","(neg.f64 (/.f64 #s(literal -1/2 binary64) a))","(exp.f64 (*.f64 (log.f64 (*.f64 #s(literal 2 binary64) a)) #s(literal -1 binary64)))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (pow.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)))) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (pow.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(*.f64 (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (pow.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)))) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (pow.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64))))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) (pow.f64 (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))","(/.f64 (-.f64 (*.f64 (*.f64 b b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)))) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (*.f64 b b)) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (+.f64 #s(literal 0 binary64) b) (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (*.f64 b b)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))) (*.f64 (+.f64 #s(literal 0 binary64) b) (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (*.f64 b b)) (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (+.f64 #s(literal 0 binary64) b) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) b) (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (*.f64 b b)) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b)))) (*.f64 (+.f64 #s(literal 0 binary64) b) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) b) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))) (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b)))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))))))","(/.f64 (fma.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (+.f64 #s(literal 0 binary64) b) (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))) (-.f64 #s(literal 0 binary64) (*.f64 b b)))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))) (+.f64 #s(literal 0 binary64) b)))","(/.f64 (fma.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))) (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))))","(/.f64 (fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (+.f64 #s(literal 0 binary64) b) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))) (-.f64 #s(literal 0 binary64) (*.f64 b b)))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))) (+.f64 #s(literal 0 binary64) b)))","(/.f64 (fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))) (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (+.f64 #s(literal 0 binary64) b) (*.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (-.f64 #s(literal 0 binary64) (*.f64 b b)))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (+.f64 #s(literal 0 binary64) b)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (+.f64 #s(literal 0 binary64) b) (*.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b)))) (-.f64 #s(literal 0 binary64) (*.f64 b b)))) (*.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b)))) (+.f64 #s(literal 0 binary64) b)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))) (*.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b)))) (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))))) (*.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b)))) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 (*.f64 b b) (*.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))))","(/.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (neg.f64 (-.f64 b (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b b (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (-.f64 b (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 (*.f64 b b) (*.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) (fma.f64 b b (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (sqrt.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 b))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (neg.f64 b))","(fma.f64 (sqrt.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (sqrt.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 b))","(fma.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 b))","(fma.f64 (pow.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) (neg.f64 b))","(fma.f64 (pow.f64 #s(literal -1 binary64) #s(literal 1/2 binary64)) (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal 1/2 binary64)) (neg.f64 b))","(fma.f64 (pow.f64 #s(literal 1 binary64) #s(literal 1/2 binary64)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 b))","(fma.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) (neg.f64 b))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))) (neg.f64 b))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64))) (neg.f64 b))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))) (neg.f64 b))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))) #s(literal -1 binary64))) (neg.f64 b))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b))","(fma.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 b) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 #s(literal -1 binary64) (neg.f64 b) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)","(fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(fma.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 b))","(fma.f64 #s(literal 1 binary64) b (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64) b)","(fma.f64 b #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(-.f64 (/.f64 (*.f64 b b) (-.f64 b (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 b (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(-.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b b (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))))","(-.f64 (+.f64 b #s(literal 0 binary64)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(-.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(-.f64 (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(-.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(-.f64 #s(literal 0 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))","(-.f64 #s(literal 0 binary64) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(+.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(+.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) b)","(+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 b))","(+.f64 b (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 (/.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(*.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal -2 binary64)) (/.f64 (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) a)))","(*.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (neg.f64 a)) (/.f64 (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) (neg.f64 a)))","(*.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) a) (/.f64 (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) a) (/.f64 (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) #s(literal -2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -2 binary64)) (/.f64 (pow.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) a)))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (neg.f64 a)) (/.f64 (pow.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)) (neg.f64 a)))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) a) (/.f64 (pow.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) a) (/.f64 (pow.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)) #s(literal -2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal -2 binary64)) (/.f64 (pow.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) a)))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) (neg.f64 a)) (/.f64 (pow.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) (neg.f64 a)))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) a) (/.f64 (pow.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) a) (/.f64 (pow.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) #s(literal -2 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) #s(literal -1 binary64)) (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a) #s(literal 1/2 binary64))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(*.f64 (/.f64 #s(literal -1 binary64) a) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal 1/2 binary64)))","(*.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (pow.f64 (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal 1/2 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(*.f64 #s(literal -1/2 binary64) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a))","(*.f64 #s(literal 1/2 binary64) (pow.f64 (/.f64 a (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) #s(literal -1 binary64)))","(*.f64 #s(literal 1/2 binary64) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a))","(*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (/.f64 #s(literal -1/2 binary64) a))","(pow.f64 (/.f64 (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)) (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64))) (fma.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 a (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal 1/2 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a)) #s(literal -2 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal 1 binary64))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (fma.f64 (pow.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (/.f64 b a) #s(literal 1/2 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal 1/2 binary64)))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) b))) (neg.f64 (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (neg.f64 (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (/.f64 b a) #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (neg.f64 (neg.f64 (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) b) a (*.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (neg.f64 (*.f64 a a)))","(/.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a (*.f64 a (*.f64 #s(literal -1/2 binary64) b)))) (neg.f64 (*.f64 a a)))","(/.f64 (neg.f64 (/.f64 (-.f64 (*.f64 #s(literal -1/8 binary64) (pow.f64 b #s(literal 3 binary64))) (*.f64 #s(literal -1/8 binary64) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)))) (pow.f64 a #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1/4 binary64) (fma.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))))))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) a) (*.f64 #s(literal 2 binary64) (/.f64 b #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (*.f64 #s(literal 2 binary64) (/.f64 a b))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) (/.f64 a b))))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 b a))) #s(literal 4 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal 2 binary64) (neg.f64 b))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal 2 binary64) b)) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) a) (*.f64 a (/.f64 b #s(literal 2 binary64)))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 a b))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (*.f64 #s(literal 2 binary64) (/.f64 a b))))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) #s(literal 2 binary64)) (*.f64 a (/.f64 b a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) a)) (*.f64 a (neg.f64 b))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 a b)) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 b #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) (/.f64 a b))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) (/.f64 a b))))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 b a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 b))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (/.f64 b #s(literal 2 binary64)))) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) (/.f64 a b))) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 a b))))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (/.f64 b a))) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (neg.f64 b))) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) b)) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 b #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) (/.f64 a b))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 2 binary64) (/.f64 a b))))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 b a))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 b))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (*.f64 (neg.f64 a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) a) (*.f64 (neg.f64 a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) (*.f64 #s(literal -2 binary64) a)) (*.f64 (neg.f64 a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 (neg.f64 a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (neg.f64 a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) #s(literal 2 binary64)) (*.f64 (neg.f64 a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) a) (*.f64 (neg.f64 a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) (*.f64 #s(literal -2 binary64) a)) (*.f64 (neg.f64 a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) (*.f64 #s(literal 2 binary64) a)) (*.f64 (neg.f64 a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (neg.f64 a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a))) #s(literal 4 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) a) (*.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal 2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal 2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 b #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 a (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 b #s(literal -2 binary64)) a) (*.f64 a (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (/.f64 b #s(literal -2 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (/.f64 b #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) a)) (*.f64 a (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 b #s(literal -2 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) b)) #s(literal 2 binary64)) (*.f64 (neg.f64 a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) b)) a) (*.f64 (neg.f64 a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) b)) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) b)) (*.f64 #s(literal -2 binary64) a)) (*.f64 (neg.f64 a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) b)) (*.f64 #s(literal 2 binary64) a)) (*.f64 (neg.f64 a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (neg.f64 a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) b) #s(literal 2 binary64)) (*.f64 a (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) b) a) (*.f64 a (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) b) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) b) (*.f64 #s(literal -2 binary64) a)) (*.f64 a (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) b) (*.f64 #s(literal 2 binary64) a)) (*.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) #s(literal 1 binary64))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 #s(literal -1 binary64) (*.f64 (/.f64 a b) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a))) (*.f64 (/.f64 a b) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 a b) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (/.f64 a b) a))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (/.f64 a b) #s(literal 1 binary64))) (*.f64 (/.f64 a b) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 a b) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (/.f64 a b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (/.f64 a b) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 b) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 b) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 b) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 b #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 b a) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (-.f64 (*.f64 b (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 b (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a))) (*.f64 (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)) (*.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a))))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (neg.f64 a) (*.f64 #s(literal 2 binary64) (*.f64 (neg.f64 b) #s(literal -1/2 binary64)))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (neg.f64 a) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -1/2 binary64) (neg.f64 b)))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) (/.f64 (neg.f64 b) a))) #s(literal 4 binary64))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) a (*.f64 #s(literal 2 binary64) (/.f64 b #s(literal -2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (neg.f64 a) (*.f64 #s(literal 2 binary64) (neg.f64 (*.f64 #s(literal -1/2 binary64) b)))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) a (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -1/2 binary64) b))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 a (*.f64 #s(literal -1/2 binary64) b))))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (*.f64 #s(literal -2 binary64) (/.f64 a b)) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) (/.f64 a b))))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (/.f64 a b) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 a b)))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 2 binary64) (neg.f64 b))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) b)) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (neg.f64 a) (*.f64 a (*.f64 (neg.f64 b) #s(literal -1/2 binary64)))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (neg.f64 a) (*.f64 a (*.f64 #s(literal -1/2 binary64) (neg.f64 b)))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) #s(literal 2 binary64) (*.f64 a (/.f64 (neg.f64 b) a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) a (*.f64 a (/.f64 b #s(literal -2 binary64)))) (*.f64 a a))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (neg.f64 a) (*.f64 a (neg.f64 (*.f64 #s(literal -1/2 binary64) b)))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) a (*.f64 a (*.f64 #s(literal -1/2 binary64) b))) (*.f64 a a))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 a (*.f64 #s(literal -1/2 binary64) b))))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 a #s(literal 1 binary64))) (*.f64 a (*.f64 #s(literal -2 binary64) (/.f64 a b))))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (/.f64 a b) (*.f64 a #s(literal -1/2 binary64))) (*.f64 a (/.f64 a b)))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) a) (*.f64 a (neg.f64 b))) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 a b)) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 b) #s(literal -1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -1/2 binary64) (neg.f64 b)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal 2 binary64) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (neg.f64 b) a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) a (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 b #s(literal -2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (*.f64 #s(literal -1/2 binary64) b)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) a (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -1/2 binary64) b))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 a (*.f64 #s(literal -1/2 binary64) b))))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) (/.f64 a b))))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 a b) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1/2 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 a b)))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 b))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 (neg.f64 b) #s(literal -1/2 binary64)))) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 #s(literal -1/2 binary64) (neg.f64 b)))) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (neg.f64 a)))","(/.f64 (+.f64 #s(literal 2 binary64) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (/.f64 (neg.f64 b) a))) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) #s(literal 2 binary64)))","(/.f64 (fma.f64 #s(literal 1 binary64) a (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (/.f64 b #s(literal -2 binary64)))) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) a))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (neg.f64 (*.f64 #s(literal -1/2 binary64) b)))) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) a (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 #s(literal -1/2 binary64) b))) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) a))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (/.f64 a (*.f64 #s(literal -1/2 binary64) b))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) (/.f64 a b))))","(/.f64 (+.f64 (/.f64 a b) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) #s(literal -1/2 binary64))) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (/.f64 a b)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (neg.f64 b))) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) b)) (*.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 (neg.f64 b) #s(literal -1/2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -1/2 binary64) (neg.f64 b)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (neg.f64 b) a))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 b #s(literal -2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (*.f64 #s(literal -1/2 binary64) b)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -1/2 binary64) b))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 a (*.f64 #s(literal -1/2 binary64) b))))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) (/.f64 a b))))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 a b) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal -1/2 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 a b)))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 b))) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) #s(literal 2 binary64) (*.f64 (neg.f64 a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) a (*.f64 (neg.f64 a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64))))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) (*.f64 #s(literal 2 binary64) a) (*.f64 (neg.f64 a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (neg.f64 a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) #s(literal 2 binary64) (*.f64 (neg.f64 a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) a (*.f64 (neg.f64 a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) (*.f64 #s(literal 2 binary64) a) (*.f64 (neg.f64 a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (neg.f64 a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))) #s(literal 4 binary64))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) a (*.f64 #s(literal 2 binary64) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64))))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 2 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (/.f64 b #s(literal -2 binary64)) #s(literal 2 binary64) (*.f64 a (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (/.f64 b #s(literal -2 binary64)) a (*.f64 a (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 a a))","(/.f64 (fma.f64 (/.f64 b #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 a (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (/.f64 b #s(literal -2 binary64)) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 a #s(literal 1 binary64))) (*.f64 a (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64))))","(/.f64 (fma.f64 (/.f64 b #s(literal -2 binary64)) (*.f64 #s(literal 2 binary64) a) (*.f64 a (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) b)) #s(literal 2 binary64) (*.f64 (neg.f64 a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) b)) a (*.f64 (neg.f64 a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) b)) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) b)) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64))))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) b)) (*.f64 #s(literal 2 binary64) a) (*.f64 (neg.f64 a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (neg.f64 a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) b) #s(literal 2 binary64) (*.f64 a (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) b) a (*.f64 a (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 a a))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) b) (*.f64 #s(literal -2 binary64) a) (*.f64 a (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) b) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 a #s(literal 1 binary64))) (*.f64 a (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) b) (*.f64 #s(literal 2 binary64) a) (*.f64 a (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (+.f64 #s(literal 2 binary64) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) #s(literal 2 binary64)))","(/.f64 (fma.f64 #s(literal 1 binary64) a (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) a))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) #s(literal 1 binary64))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (+.f64 #s(literal 2 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) #s(literal 2 binary64)))","(/.f64 (fma.f64 #s(literal 1 binary64) a (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) a))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (+.f64 #s(literal -1 binary64) (*.f64 (/.f64 a b) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))) (*.f64 (/.f64 a b) #s(literal 2 binary64)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) a (*.f64 (/.f64 a b) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 (/.f64 a b) a))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 a b) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 (/.f64 a b) #s(literal 1 binary64))) (*.f64 (/.f64 a b) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 2 binary64) a) (*.f64 (/.f64 a b) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (/.f64 a b) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 b) #s(literal 2 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (fma.f64 (neg.f64 b) a (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (fma.f64 (neg.f64 b) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 b) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64))))","(/.f64 (fma.f64 (neg.f64 b) (*.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (fma.f64 b #s(literal 2 binary64) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (fma.f64 b a (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (fma.f64 b (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 b (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64))))","(/.f64 (fma.f64 b (*.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) (neg.f64 a) (*.f64 (neg.f64 a) (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) a (*.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) (neg.f64 a) (*.f64 (neg.f64 a) (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) a (*.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) (neg.f64 a) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) (neg.f64 a) (*.f64 #s(literal 2 binary64) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) (neg.f64 a) (*.f64 #s(literal 2 binary64) (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) a (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (/.f64 b #s(literal -2 binary64)) (neg.f64 a) (*.f64 a (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (/.f64 b #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (/.f64 b #s(literal -2 binary64)) (neg.f64 a) (*.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (/.f64 b #s(literal -2 binary64)) (neg.f64 a) (*.f64 a (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (/.f64 b #s(literal -2 binary64)) a (*.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 a a))","(/.f64 (fma.f64 (/.f64 b #s(literal -2 binary64)) (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (fma.f64 (/.f64 b #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) b)) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) b)) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) b)) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) b)) (neg.f64 a) (*.f64 (neg.f64 a) (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) b)) a (*.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) b)) (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) b)) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) b) (neg.f64 a) (*.f64 a (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) b) (*.f64 #s(literal -2 binary64) a) (*.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) b) (neg.f64 a) (*.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) b) (neg.f64 a) (*.f64 a (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) b) (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) b) (*.f64 #s(literal -2 binary64) a) (*.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) a (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) a))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) #s(literal 1 binary64))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) a (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) a))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (neg.f64 a) (*.f64 (/.f64 a b) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (/.f64 a b) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 a b) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))) (*.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (neg.f64 a) (*.f64 (/.f64 a b) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 (/.f64 a b) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (neg.f64 a) (*.f64 (/.f64 a b) (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (/.f64 a b) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) a (*.f64 (/.f64 a b) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (/.f64 a b) a))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (/.f64 a b) #s(literal 1 binary64))) (*.f64 (/.f64 a b) (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 a b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 b) (neg.f64 a) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 b) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 b) (neg.f64 a) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 b) (neg.f64 a) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 b) a (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (fma.f64 (neg.f64 b) (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (fma.f64 (neg.f64 b) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 b (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 b (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 b (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 b (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 b a (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (fma.f64 b (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (fma.f64 b (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 (neg.f64 b) #s(literal -1/2 binary64)))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) (neg.f64 b)))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64) (*.f64 (neg.f64 a) (/.f64 (neg.f64 b) a))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a (*.f64 (neg.f64 a) (/.f64 b #s(literal -2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a) (*.f64 (neg.f64 a) (neg.f64 (*.f64 #s(literal -1/2 binary64) b)))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a (*.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) b))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 a (*.f64 #s(literal -1/2 binary64) b))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) (/.f64 a b))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 a b) (*.f64 (neg.f64 a) #s(literal -1/2 binary64))) (*.f64 (neg.f64 a) (/.f64 a b)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a) (*.f64 (neg.f64 a) (neg.f64 b))) (*.f64 (neg.f64 a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) b)) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 b) #s(literal -1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -1/2 binary64) (neg.f64 b)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) #s(literal 2 binary64) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (neg.f64 b) a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) a (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 b #s(literal -2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (*.f64 #s(literal -1/2 binary64) b)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) a (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -1/2 binary64) b))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 a (*.f64 #s(literal -1/2 binary64) b))))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) (/.f64 a b))))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) (/.f64 a b) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1/2 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 a b)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 b))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 (neg.f64 b) #s(literal -1/2 binary64)))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) (neg.f64 b)))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) #s(literal 2 binary64) (*.f64 (neg.f64 a) (/.f64 (neg.f64 b) a))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) a (*.f64 (neg.f64 a) (/.f64 b #s(literal -2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (neg.f64 a) (*.f64 (neg.f64 a) (neg.f64 (*.f64 #s(literal -1/2 binary64) b)))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) a (*.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) b))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 a (*.f64 #s(literal -1/2 binary64) b))))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) (/.f64 a b))))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (/.f64 a b) (*.f64 (neg.f64 a) #s(literal -1/2 binary64))) (*.f64 (neg.f64 a) (/.f64 a b)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (*.f64 #s(literal 2 binary64) a) (*.f64 (neg.f64 a) (neg.f64 b))) (*.f64 (neg.f64 a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) b)) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 (neg.f64 b) #s(literal -1/2 binary64)))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) (neg.f64 b)))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal 2 binary64) (*.f64 (neg.f64 a) (/.f64 (neg.f64 b) a))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) a (*.f64 (neg.f64 a) (/.f64 b #s(literal -2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 a) (*.f64 (neg.f64 a) (neg.f64 (*.f64 #s(literal -1/2 binary64) b)))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) a (*.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) b))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 a (*.f64 #s(literal -1/2 binary64) b))))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) (/.f64 a b))))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 a b) (*.f64 (neg.f64 a) #s(literal -1/2 binary64))) (*.f64 (neg.f64 a) (/.f64 a b)))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a) (*.f64 (neg.f64 a) (neg.f64 b))) (*.f64 (neg.f64 a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) b)) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a) (*.f64 a (*.f64 (neg.f64 b) #s(literal -1/2 binary64)))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a) (*.f64 a (*.f64 #s(literal -1/2 binary64) (neg.f64 b)))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64) (*.f64 a (/.f64 (neg.f64 b) a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a (*.f64 a (/.f64 b #s(literal -2 binary64)))) (*.f64 a a))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a) (*.f64 a (neg.f64 (*.f64 #s(literal -1/2 binary64) b)))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 a (*.f64 #s(literal -1/2 binary64) b))))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 a #s(literal 1 binary64))) (*.f64 a (*.f64 #s(literal -2 binary64) (/.f64 a b))))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 a b) (*.f64 a #s(literal -1/2 binary64))) (*.f64 a (/.f64 a b)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a) (*.f64 a (neg.f64 b))) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a) (*.f64 a b)) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (neg.f64 b) #s(literal -1/2 binary64)))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -1/2 binary64) (neg.f64 b)))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 a)))","(/.f64 (+.f64 #s(literal 2 binary64) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 (neg.f64 b) a))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal 2 binary64)))","(/.f64 (fma.f64 #s(literal 1 binary64) a (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 b #s(literal -2 binary64)))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) a))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 (*.f64 #s(literal -1/2 binary64) b)))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) a (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -1/2 binary64) b))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) a))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal 1 binary64))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 a (*.f64 #s(literal -1/2 binary64) b))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal 1 binary64))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -2 binary64) (/.f64 a b))))","(/.f64 (+.f64 (/.f64 a b) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal -1/2 binary64))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 a b)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 b))) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) b)) (*.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 b) #s(literal -1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -1/2 binary64) (neg.f64 b)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (neg.f64 b) a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 b #s(literal -2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (*.f64 #s(literal -1/2 binary64) b)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -1/2 binary64) b))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 a (*.f64 #s(literal -1/2 binary64) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 a (*.f64 #s(literal -1/2 binary64) b))))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal -2 binary64) (/.f64 a b)) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) (/.f64 a b))))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 a b) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1/2 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 a b)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 b))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 b)) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) b) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64))) a)","(/.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a) #s(literal 2 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 b (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64))) (fma.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (/.f64 b a) #s(literal 1/2 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64))) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 3 binary64))) (fma.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (fma.f64 (pow.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (/.f64 b a) #s(literal 1/2 binary64))))))","(/.f64 (/.f64 (-.f64 (*.f64 #s(literal -1/8 binary64) (pow.f64 b #s(literal 3 binary64))) (*.f64 #s(literal -1/8 binary64) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)))) (pow.f64 a #s(literal 3 binary64))) (fma.f64 (pow.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1/4 binary64) (fma.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (/.f64 (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) b) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) b) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 a a)))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal 1/2 binary64))) (neg.f64 a))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal 1 binary64)) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) b)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) b) a (*.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 a a))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a (*.f64 a (*.f64 #s(literal -1/2 binary64) b))) (*.f64 a a))","(/.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal 1/2 binary64)) a)","(/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal 1/2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)) (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64))) (fma.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)) (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64))) (fma.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 a (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 3 binary64))) (fma.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (/.f64 (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) b) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) b) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 a a))))","(/.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)) (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64))))","(/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (neg.f64 (neg.f64 (*.f64 #s(literal -2 binary64) a))))","(/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (neg.f64 (*.f64 #s(literal -2 binary64) a)))","(/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a))","(/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))","(neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(fma.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -2 binary64)) (pow.f64 a #s(literal -1 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 a)) #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)) (/.f64 #s(literal 1/2 binary64) a) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) (neg.f64 a)) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) (neg.f64 a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal -2 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) a) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) a) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal -2 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (/.f64 (neg.f64 b) #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) #s(literal -1/2 binary64) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 b #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (/.f64 b #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) a) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) a) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) b) (pow.f64 a #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (pow.f64 a #s(literal -1 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 #s(literal -1 binary64) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 #s(literal -1 binary64) (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -2 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 b #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 #s(literal -1/2 binary64) (*.f64 (pow.f64 a #s(literal -1 binary64)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 #s(literal 1/2 binary64) (/.f64 (neg.f64 b) a) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 b (/.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(-.f64 (/.f64 (*.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (/.f64 b a) #s(literal 1/2 binary64)))) (/.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (fma.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (/.f64 b a) #s(literal 1/2 binary64)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))) (/.f64 (*.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)) (fma.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (fma.f64 (pow.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (/.f64 b a) #s(literal 1/2 binary64)))))) (/.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 3 binary64)) (fma.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (fma.f64 (pow.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (/.f64 b a) #s(literal 1/2 binary64)))))))","(-.f64 (/.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 3 binary64)) (fma.f64 (pow.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1/4 binary64) (fma.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))))) (/.f64 (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)) (fma.f64 (pow.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1/4 binary64) (fma.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))))))","(-.f64 (/.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(-.f64 (/.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(-.f64 (/.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(-.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (/.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(-.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(-.f64 (/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 0 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 (/.f64 b a) #s(literal 1/2 binary64)))","(-.f64 (/.f64 (fma.f64 #s(literal -1 binary64) b #s(literal 0 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))","(-.f64 (/.f64 (/.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 0 binary64)) (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(-.f64 (/.f64 (fma.f64 #s(literal -1 binary64) b #s(literal 0 binary64)) (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(-.f64 (/.f64 (/.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a)) (/.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a)))","(-.f64 (/.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a)) (/.f64 (/.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a)))","(-.f64 (/.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)) (/.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(-.f64 (/.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a)) (/.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b b (fma.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a)))","(-.f64 (/.f64 (*.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a))) (/.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a))))","(-.f64 (/.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a))) (/.f64 (*.f64 (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 b)) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 (-.f64 b (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 b)) (*.f64 #s(literal -2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(-.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(-.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(-.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))","(-.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (/.f64 b a) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) #s(literal -1 binary64)))","(+.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(+.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(*.f64 (/.f64 b #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) a))","(*.f64 #s(literal -1 binary64) (/.f64 (neg.f64 b) a))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) b)","(*.f64 #s(literal 1 binary64) (/.f64 b a))","(*.f64 (neg.f64 b) (/.f64 #s(literal -1 binary64) a))","(*.f64 b (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 a b) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 a b) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 b #s(literal 1 binary64))) (neg.f64 a))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 a)) (*.f64 (neg.f64 a) b)) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (*.f64 b #s(literal 1 binary64)) a)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 a b) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a b)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 a b))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a b) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 a b))","(/.f64 (neg.f64 b) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 (neg.f64 b) (neg.f64 a))","(/.f64 b (neg.f64 (neg.f64 a)))","(/.f64 b a)","(neg.f64 (/.f64 (neg.f64 b) a))","(-.f64 (/.f64 #s(literal 0 binary64) a) (/.f64 (neg.f64 b) a))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 a)) (/.f64 (neg.f64 b) a))","(exp.f64 (*.f64 (log.f64 (/.f64 a b)) #s(literal -1 binary64)))","(*.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 a)) #s(literal 1/2 binary64))","(*.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) (*.f64 #s(literal 2 binary64) a)))","(*.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) (neg.f64 a)) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) (neg.f64 a)))","(*.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal -2 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) a))","(*.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) a) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal -2 binary64)))","(*.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) #s(literal -1/2 binary64))","(*.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64)))","(*.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) a))","(*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (pow.f64 a #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -2 binary64)))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(*.f64 #s(literal -1/2 binary64) (*.f64 (pow.f64 a #s(literal -1 binary64)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a))","(*.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 a)))","(*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a))","(pow.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a)) #s(literal -2 binary64))","(/.f64 (neg.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (neg.f64 (*.f64 #s(literal -2 binary64) a)))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64))) (neg.f64 (*.f64 #s(literal -2 binary64) a)))","(/.f64 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (neg.f64 (neg.f64 a)))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) #s(literal 2 binary64))","(/.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) (*.f64 #s(literal -2 binary64) a))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (neg.f64 a))","(/.f64 (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) a)","(/.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 a))","(/.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a)","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -2 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 a (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 (*.f64 #s(literal -2 binary64) a)))","(/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal -2 binary64) a))","(neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))","(*.f64 (pow.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 1 binary64)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(*.f64 (pow.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(*.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) (pow.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))","(*.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (pow.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64))","(pow.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64))","(pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))))))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (*.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 3 binary64)))) (*.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 a c) #s(literal -4 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))))","(/.f64 (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (neg.f64 (+.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b)))))","(/.f64 (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (neg.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (neg.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) (-.f64 (*.f64 b b) (*.f64 (*.f64 a c) #s(literal -4 binary64))))","(/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))","(/.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (+.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))))","(/.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))","(/.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))))","(neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(neg.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (exp.f64 (log.f64 b)) (exp.f64 (log.f64 b)) (*.f64 (*.f64 a c) #s(literal -4 binary64)))","(fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))","(fma.f64 (*.f64 (neg.f64 b) #s(literal -1 binary64)) b (*.f64 (*.f64 a c) #s(literal -4 binary64)))","(fma.f64 (neg.f64 (*.f64 #s(literal 4 binary64) a)) c (*.f64 b b))","(fma.f64 (neg.f64 (*.f64 a c)) #s(literal 4 binary64) (*.f64 b b))","(fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))","(fma.f64 (*.f64 #s(literal 4 binary64) a) (neg.f64 c) (*.f64 b b))","(fma.f64 #s(literal -1 binary64) (*.f64 b (neg.f64 b)) (*.f64 (*.f64 a c) #s(literal -4 binary64)))","(fma.f64 #s(literal -1 binary64) (*.f64 (*.f64 a c) #s(literal 4 binary64)) (*.f64 b b))","(fma.f64 #s(literal 1 binary64) (*.f64 b b) (*.f64 (*.f64 a c) #s(literal -4 binary64)))","(fma.f64 (neg.f64 b) (neg.f64 b) (*.f64 (*.f64 a c) #s(literal -4 binary64)))","(fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))","(fma.f64 #s(literal 4 binary64) (neg.f64 (*.f64 a c)) (*.f64 b b))","(fma.f64 (*.f64 b b) #s(literal 1 binary64) (*.f64 (*.f64 a c) #s(literal -4 binary64)))","(fma.f64 b b (*.f64 (*.f64 a c) #s(literal -4 binary64)))","(fma.f64 a (*.f64 c #s(literal -4 binary64)) (*.f64 b b))","(fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))","(fma.f64 #s(literal -4 binary64) (*.f64 a c) (*.f64 b b))","(sqrt.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 2 binary64)))","(-.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (*.f64 b b) (*.f64 (*.f64 a c) #s(literal -4 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 b b) (*.f64 (*.f64 a c) #s(literal -4 binary64)))))","(-.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))) (/.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))))","(-.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(-.f64 (*.f64 b b) (*.f64 (*.f64 a c) #s(literal 4 binary64)))","(fabs.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(+.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) (*.f64 b b))","(+.f64 (*.f64 b b) (*.f64 (*.f64 a c) #s(literal -4 binary64)))","(*.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))","(pow.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal 2 binary64))","(pow.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) #s(literal 2 binary64))","(pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 1 binary64))","#s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))","(sqrt.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 2 binary64)))","(fabs.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))","(exp.f64 (*.f64 (log.f64 (pow.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) #s(literal 1 binary64)))","(exp.f64 (log.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":331.6259765625,"type":"rewrite"},{"compiler":[[63266,5828]],"memory":[[18596432,169574672]],"time":241.90087890625,"type":"eval"},{"alts":[["(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))))","fresh",41.931286932027966,"binary64"],["(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a (*.f64 a (*.f64 #s(literal -1/2 binary64) b))) (*.f64 a a))","fresh",40.281638025608956,"binary64"],["(/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","fresh",47.720830970416685,"binary64"],["(/.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","fresh",45.0750523376403,"binary64"],["(/.f64 (/.f64 (-.f64 (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 b b))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) a))","fresh",49.9919103865146,"binary64"],["(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64))) (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","fresh",62.49017779452867,"binary64"],["(/.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))) b) (*.f64 #s(literal 2 binary64) a))","next",40.3895445300286,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) a))","fresh",29.965552319382407,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (exp.f64 (log.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) a))","fresh",47.89142653234473,"binary64"],["(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))) (*.f64 #s(literal 2 binary64) a))","fresh",42.09770324424859,"binary64"],["(/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a))","next",29.604698306053503,"binary64"],["(/.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","fresh",46.15783040982228,"binary64"],["(/.f64 #s(approx (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (*.f64 #s(literal -2 binary64) (/.f64 (*.f64 a c) b))) (*.f64 #s(literal 2 binary64) a))","fresh",48.07729205688405,"binary64"],["(/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (/.f64 c b)) (/.f64 a b) #s(literal -2 binary64)) b)) (*.f64 #s(literal 2 binary64) a))","fresh",42.11509762248876,"binary64"],["(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","fresh",40.289294269636784,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","fresh",46.68578624324652,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))))","next",51.48517520384772,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))","next",56.51703465819093,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))))","fresh",46.37294315574114,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (*.f64 (/.f64 (*.f64 a c) b) #s(literal 2 binary64))))","fresh",59.03679273725268,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (*.f64 #s(literal 2 binary64) b)))","fresh",62.43940561905425,"binary64"],["(*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (/.f64 #s(literal -1/2 binary64) a))","fresh",29.676138082230366,"binary64"],["#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (fma.f64 a (/.f64 c b) (neg.f64 b)) a))","fresh",42.06760633561329,"binary64"],["#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (neg.f64 b) a))","fresh",41.931286932027966,"binary64"],["#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (*.f64 (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1 binary64) a)) b))","fresh",42.21875912534343,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","done",43.03389990877592,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (/.f64 #s(literal -1 binary64) b) c))","fresh",43.08858740877592,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (exp.f64 (*.f64 (log.f64 (/.f64 (neg.f64 b) c)) #s(literal -1 binary64))))","fresh",54.02175174709062,"binary64"],["#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 c b))","next",59.0057137210855,"binary64"]],"compiler":[[25,17],[22,15],[27,16],[28,14],[64,17],[52,23],[23,18],[20,16],[23,18],[26,19],[15,12],[27,16],[25,19],[30,21],[15,12],[21,16],[31,22],[20,15],[22,17],[24,18],[20,16],[15,12],[27,19],[22,17],[29,21],[22,17],[23,18],[26,21],[20,15],[25,17],[22,15],[27,16],[28,14],[64,17],[52,23],[23,18],[20,16],[23,18],[26,19],[15,12],[27,16],[25,19],[30,21],[15,12],[21,16],[31,22],[20,15],[22,17],[24,18],[20,16],[15,12],[27,19],[22,17],[29,21],[23,18],[26,21],[20,15]],"count":[[1878,29]],"kept":[{"done":[0,0],"fresh":[15,6],"new":[1858,22],"picked":[5,1]}],"memory":[[-14921216,84508048]],"min-error":[[5.563757474805276,"binary64"]],"time":65.300048828125,"type":"prune"},{"egraph":[[0,8122,378,0.040868385],[5,3532,379,0.027964031],[4,1304,379,0.014514132],[3,531,406,0.004655743],[2,248,407,0.001965391],[1,129,407,0.000966525],[0,76,407,0.000677465],[0,47,427,0.000500236]],"inputs":[["(/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a))","(+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)","(sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))","(fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))","(*.f64 #s(literal -4 binary64) a)","#s(literal -4 binary64)","a","c","(*.f64 b b)","b","(*.f64 #s(literal -2 binary64) a)","#s(literal -2 binary64)","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 c b))","(/.f64 c b)","c","b","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))","(/.f64 #s(literal 1/2 binary64) a)","#s(literal 1/2 binary64)","a","(-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))","b","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))","#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))","(*.f64 b b)","(/.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))) b) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))) b)","(neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))))","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))","#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))","(*.f64 #s(literal -4 binary64) (*.f64 a c))","#s(literal -4 binary64)","(*.f64 a c)","a","c","b","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))))","(/.f64 #s(literal 1/2 binary64) a)","#s(literal 1/2 binary64)","a","(-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))","b","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))","#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))","(*.f64 (*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)","(*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -4 binary64) #s(literal 1 binary64)) b)","(fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -4 binary64) #s(literal 1 binary64))","(*.f64 a (/.f64 c (*.f64 b b)))","(/.f64 c (*.f64 b b))","c","(*.f64 b b)","#s(literal -4 binary64)","#s(literal 1 binary64)"]],"locations":[["(/.f64 #s(literal 1/2 binary64) a)","cost-diff",0],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))))","cost-diff",0],["(*.f64 (*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)","cost-diff",2],["(*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -4 binary64) #s(literal 1 binary64)) b)","cost-diff",4],["(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))","cost-diff",0],["(neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))))","cost-diff",0],["(-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))) b)","cost-diff",0],["(/.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))) b) (*.f64 #s(literal 2 binary64) a))","cost-diff",1],["(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))","cost-diff",0],["(-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))","cost-diff",0],["(/.f64 #s(literal 1/2 binary64) a)","cost-diff",0],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))","cost-diff",0],["(/.f64 c b)","cost-diff",0],["#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 c b))","cost-diff",0],["(fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))","cost-diff",0],["(sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))","cost-diff",0],["(+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)","cost-diff",0],["(/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a))","cost-diff",0]],"memory":[[7561920,23462592]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a))","(/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a))","(+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)","(+.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b))) b)","(sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))","(sqrt.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b)))","(fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))","(fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b))","(*.f64 #s(literal -4 binary64) a)","(*.f64 a #s(literal -4 binary64))","#s(literal -4 binary64)","a","c","(*.f64 b b)","b","(*.f64 #s(literal -2 binary64) a)","#s(literal -2 binary64)","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 c b))","(/.f64 c b)","c","b","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b))","(/.f64 #s(literal 1/2 binary64) a)","#s(literal 1/2 binary64)","a","(-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))","b","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))","#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))","(*.f64 b b)","(/.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))) b) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c #s(literal -4 binary64)) a))) b))","(-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))) b)","(-.f64 (neg.f64 b) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c #s(literal -4 binary64)) a))))","(neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))))","(neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c #s(literal -4 binary64)) a))))","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c #s(literal -4 binary64)) a)))","#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))","#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c #s(literal -4 binary64)) a))","(*.f64 #s(literal -4 binary64) (*.f64 a c))","(*.f64 (*.f64 c #s(literal -4 binary64)) a)","#s(literal -4 binary64)","(*.f64 a c)","(*.f64 c a)","a","c","b","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b)))) b))","(/.f64 #s(literal 1/2 binary64) a)","#s(literal 1/2 binary64)","a","(-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))","(-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b)))))","b","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b))))","#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))","#s(approx (+ (* -4 (* c a)) (* b b)) (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b)))","(*.f64 (*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)","(fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b))","(*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -4 binary64) #s(literal 1 binary64)) b)","(fma.f64 (/.f64 c b) (*.f64 a #s(literal -4 binary64)) b)","(fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -4 binary64) #s(literal 1 binary64))","(fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64))","(*.f64 a (/.f64 c (*.f64 b b)))","(*.f64 (/.f64 (/.f64 c b) b) a)","(/.f64 c (*.f64 b b))","(/.f64 (/.f64 c b) b)","c","(*.f64 b b)","#s(literal -4 binary64)","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":152.4970703125,"type":"simplify"},{"compiler":[[326,38]],"locations":[["(*.f64 a (/.f64 c (*.f64 b b)))","accuracy",5.790126181610192],["(/.f64 c (*.f64 b b))","accuracy",8.364082412736554],["(-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))","accuracy",12.992468175560182],["(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))","accuracy",23.929958470936878],["(/.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))) b) (*.f64 #s(literal 2 binary64) a))","accuracy",4.177692687887851],["(-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))) b)","accuracy",13.097526183512986],["(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))","accuracy",23.929958470936878],["#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))","accuracy",38.497395304021886],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))","accuracy",3.3164016309035493],["(-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))","accuracy",12.992468175560182],["#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))","accuracy",21.012929320370638],["(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))","accuracy",23.929958470936878],["(/.f64 c b)","accuracy",0.0],["#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 c b))","accuracy",42.03137654896942],["(*.f64 #s(literal -4 binary64) a)","accuracy",0.0],["(/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a))","accuracy",4.177692687887851],["(+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)","accuracy",13.097526183512986],["(sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))","accuracy",23.929958470936878]],"memory":[[-9024720,51110800]],"mixsample":[[12.086181640625,"ival-div",0],[8.380859375,"adjust",800],[0.008056640625,"ival-mult",1200],[0.02880859375,"ival-add",4800],[0.044677734375,"ival-neg",2400],[0.11572265625,"ival-assert",0],[0.156494140625,"ival-neg",800],[5.173828125,"ival-sub",0],[0.837158203125,"ival-sqrt",1200],[0.05419921875,"ival-sqrt",4800],[3.672119140625,"ival-sqrt",0],[0.080322265625,"ival-neg",400],[0.009033203125,"ival-sqrt",2800],[5.718017578125,"ival-add",0],[0.052978515625,"ival-mult",800],[0.102294921875,"ival-neg",1200],[0.003173828125,"ival-neg",4800],[0.363037109375,"ival-add",400],[0.7900390625,"adjust",2800],[0.0078125,"ival-div",2000],[0.345458984375,"ival-add",2400],[0.005126953125,"ival-add",6400],[0.009033203125,"ival-neg",4000],[0.515380859375,"ival-sqrt",400],[0.574462890625,"ival-add",1200],[0.4208984375,"ival-sqrt",2000],[0.005126953125,"ival-sub",2000],[0.009033203125,"ival-mult",2000],[0.920654296875,"ival-sqrt",800],[0.0419921875,"ival-sqrt",4000],[0.06103515625,"ival-neg",1600],[0.11328125,"ival-sqrt",4400],[0.01904296875,"ival-add",4000],[3.92919921875,"adjust",2000],[23.819580078125,"ival-mult",0],[0.402099609375,"ival-sqrt",1600],[0.2333984375,"ival-add",1600],[0.06494140625,"ival-mult",400],[0.004150390625,"ival-neg",4400],[0.0048828125,"ival-add",2800],[0.016845703125,"ival-sqrt",6400],[0.33837890625,"ival-add",2000],[0.059814453125,"ival-neg",2000],[0.256591796875,"ival-true",0],[0.51806640625,"ival-sqrt",2400],[0.5791015625,"ival-add",800],[0.653076171875,"exact",0],[0.055908203125,"ival-add",4400],[2.47900390625,"ival-neg",0]],"outcomes":[[56.843505859375,1,"valid",71],[45.967529296875,2,"valid",72],[13.277099609375,3,"valid",17],[25.4501953125,0,"valid",96]],"time":175.989013671875,"type":"localize"},{"count":[[24,220]],"inputs":[["(/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a))","(+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)","(sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))","(fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 c b))","(/.f64 c b)","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))","(/.f64 #s(literal 1/2 binary64) a)","(-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))","(/.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))) b) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))) b)","(neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))))","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))","(*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -4 binary64) #s(literal 1 binary64)) b)","(*.f64 (*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))))","(*.f64 #s(literal -4 binary64) a)","#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))","#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))","(-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))","(/.f64 c (*.f64 b b))","(*.f64 a (/.f64 c (*.f64 b b)))"]],"memory":[[-1967200,15132224]],"outputs":[["(* -1 (/ b a))","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/ (+ (* -1 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* -1 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(* 2 b)","(+ (* -2 (/ (* a c) b)) (* 2 b))","(+ (* 2 b) (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ (* 2 b) (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(/ c b)","(+ (/ c b) (/ (* a (pow c 2)) (pow b 3)))","(+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b))","(+ (* a (+ (* a (+ (* 1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)) (* 2 (/ (pow c 3) (pow b 5))))) (/ (pow c 2) (pow b 3)))) (/ c b))","(/ 1/2 a)","(* 2 (/ (* a c) b))","(* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b))))","(* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b))))","(* a (- (* a (- (* a (- (* 1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)) (* -4 (/ (pow c 3) (pow b 5))))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b))))","(* -2 b)","(- (* 2 (/ (* a c) b)) (* 2 b))","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) (* 2 b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) (* 2 b))","(* -1 b)","(- (* 2 (/ (* a c) b)) b)","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) b)","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) b)","(+ b (* -4 (/ (* a c) b)))","(* -4 a)","(/ (* a c) (pow b 2))","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/2 (/ b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -4 (* a c))","(* a (+ (* -4 c) (/ (pow b 2) a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* 1/2 (/ b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (/ b a))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (* 1/2 (/ b a)))))","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(* a (- (/ b a) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (/ b a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (- (* -1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -4 (/ (* a c) b))","(* a (+ (* -4 (/ c b)) (/ b a)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* -1 (/ b a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (+ b (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (+ b (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(* -1 (* a (+ (* -1 (/ (pow b 2) a)) (* 4 c))))","(+ (* 1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/2 b) (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* -1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (- (* -1 (/ b a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (+ b (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (+ b (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (/ b a) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* 1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (- (* -1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(* -1 (* a (+ (* -1 (/ b a)) (* 4 (/ c b)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(+ b (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (+ 1 (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (+ 1 (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (+ (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(- b (* (sqrt (* a c)) (sqrt -4)))","(- (* b (+ 1 (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (+ 1 (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))) (* (sqrt (* a c)) (sqrt -4)))","(- (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(- (* (pow b 2) (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(- (* (pow b 2) (- (* (pow b 2) (- (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(/ (+ (* -4 (* a c)) (pow b 2)) b)","(/ c (pow b 2))","(* b (- (/ c (pow b 2)) (/ 1 a)))","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a)))","(* b (+ 2 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(/ (+ c (/ (* a (pow c 2)) (pow b 2))) b)","(/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b)","(/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b)","(/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b)","(/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b)","(* b (- (* 2 (/ (* a c) (pow b 2))) 2))","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (- (* 2 (/ (* a c) (pow b 2))) 1))","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* -1 (/ c b))","(* -1 (/ (+ c (/ (* a (pow c 2)) (pow b 2))) b))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(* -1 (/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(* -1 (/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(/ b a)","(* -1 (* b (- (/ c (pow b 2)) (/ 1 a))))","(* -1 (* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))","(* -1 (* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a))))","(* -1 (* b (- (* 2 (/ (* a c) (pow b 2))) 2)))","(* -1 (* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2)))))))","(* -1 (* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -2 (/ (* a c) b))","(* -1 (/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b))","(* -1 (/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(* -1 (/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b))","(* -1 (* b (- (* 2 (/ (* a c) (pow b 2))) 1)))","(* -1 (* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 1 (* -2 (/ (* a c) (pow b 2)))))))","(* -1 (* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (* b (- (* 4 (/ (* a c) (pow b 2))) 1)))","(+ (* -1 (/ b a)) (/ c b))","(+ (* -1 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(+ (* 2 b) (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ (* 2 b) (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (/ 1 b) (/ (* a c) (pow b 3))))","(* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b)))","(* c (+ (* c (+ (* c (+ (* 1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))) (* 2 (/ (pow a 2) (pow b 5))))) (/ a (pow b 3)))) (/ 1 b)))","(* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b))))","(* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b))))","(* c (- (* c (- (* c (- (* 1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b)) (* -4 (/ (pow a 3) (pow b 5))))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b))))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) (* 2 b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) (* 2 b))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) b)","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) b)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/2 (/ b (* a c)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* c (+ (* -4 a) (/ (pow b 2) c)))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* 1/2 (/ b (* a c)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (/ b (* a c))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (* 1/2 (/ b (* a c)))))))","(* c (- (/ b c) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (/ b c)) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (- (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* c (+ (* -4 (/ a b)) (/ b c)))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)))))","(* -1 (* c (+ (* -1 (/ b c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (+ b (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (+ b (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* -1 (* c (+ (* -1 (/ (pow b 2) c)) (* 4 a))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1/2 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 1/2 (/ b a))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* 1/2 (/ b a))) c)))))","(* -1 (* c (- (* -1 (/ b c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (+ b (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (+ b (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (/ b c) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* -1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* -1 (* c (+ (* -1 (/ b c)) (* 4 (/ a b)))))"]],"series":[[3.68896484375,"((/ (+ (sqrt (+ (* (* -4 a) c) (* b b))) b) (* -2 a)) (+ (sqrt (+ (* (* -4 a) c) (* b b))) b) (sqrt (+ (* (* -4 a) c) (* b b))) (+ (* (* -4 a) c) (* b b)) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/ c b) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (neg (sqrt (+ (* -4 (* c a)) (* b b)))) (sqrt (+ (* -4 (* c a)) (* b b))) (* (+ (* (* a (/ c (* b b))) -4) 1) b) (* (* (+ (* (* a (/ c (* b b))) -4) 1) b) b) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (* -4 a) (+ (* -4 (* c a)) (* b b)) (+ (* -4 (* c a)) (* b b)) (sqrt (+ (* -4 (* c a)) (* b b))) (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (/ c (* b b)) (* a (/ c (* b b))))","c","-inf"],[3.31787109375,"((/ (+ (sqrt (+ (* (* -4 a) c) (* b b))) b) (* -2 a)) (+ (sqrt (+ (* (* -4 a) c) (* b b))) b) (sqrt (+ (* (* -4 a) c) (* b b))) (+ (* (* -4 a) c) (* b b)) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/ c b) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (neg (sqrt (+ (* -4 (* c a)) (* b b)))) (sqrt (+ (* -4 (* c a)) (* b b))) (* (+ (* (* a (/ c (* b b))) -4) 1) b) (* (* (+ (* (* a (/ c (* b b))) -4) 1) b) b) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (* -4 a) (+ (* -4 (* c a)) (* b b)) (+ (* -4 (* c a)) (* b b)) (sqrt (+ (* -4 (* c a)) (* b b))) (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (/ c (* b b)) (* a (/ c (* b b))))","c","inf"],[2.633056640625,"((/ (+ (sqrt (+ (* (* -4 a) c) (* b b))) b) (* -2 a)) (+ (sqrt (+ (* (* -4 a) c) (* b b))) b) (sqrt (+ (* (* -4 a) c) (* b b))) (+ (* (* -4 a) c) (* b b)) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/ c b) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (neg (sqrt (+ (* -4 (* c a)) (* b b)))) (sqrt (+ (* -4 (* c a)) (* b b))) (* (+ (* (* a (/ c (* b b))) -4) 1) b) (* (* (+ (* (* a (/ c (* b b))) -4) 1) b) b) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (* -4 a) (+ (* -4 (* c a)) (* b b)) (+ (* -4 (* c a)) (* b b)) (sqrt (+ (* -4 (* c a)) (* b b))) (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (/ c (* b b)) (* a (/ c (* b b))))","c","0"],[11.006103515625,"((/ (+ (sqrt (+ (* (* -4 a) c) (* b b))) b) (* -2 a)) (+ (sqrt (+ (* (* -4 a) c) (* b b))) b) (sqrt (+ (* (* -4 a) c) (* b b))) (+ (* (* -4 a) c) (* b b)) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/ c b) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (neg (sqrt (+ (* -4 (* c a)) (* b b)))) (sqrt (+ (* -4 (* c a)) (* b b))) (* (+ (* (* a (/ c (* b b))) -4) 1) b) (* (* (+ (* (* a (/ c (* b b))) -4) 1) b) b) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (* -4 a) (+ (* -4 (* c a)) (* b b)) (+ (* -4 (* c a)) (* b b)) (sqrt (+ (* -4 (* c a)) (* b b))) (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (/ c (* b b)) (* a (/ c (* b b))))","b","-inf"],[2.462158203125,"((/ (+ (sqrt (+ (* (* -4 a) c) (* b b))) b) (* -2 a)) (+ (sqrt (+ (* (* -4 a) c) (* b b))) b) (sqrt (+ (* (* -4 a) c) (* b b))) (+ (* (* -4 a) c) (* b b)) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/ c b) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (neg (sqrt (+ (* -4 (* c a)) (* b b)))) (sqrt (+ (* -4 (* c a)) (* b b))) (* (+ (* (* a (/ c (* b b))) -4) 1) b) (* (* (+ (* (* a (/ c (* b b))) -4) 1) b) b) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (* -4 a) (+ (* -4 (* c a)) (* b b)) (+ (* -4 (* c a)) (* b b)) (sqrt (+ (* -4 (* c a)) (* b b))) (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (/ c (* b b)) (* a (/ c (* b b))))","b","inf"],[2.638916015625,"((/ (+ (sqrt (+ (* (* -4 a) c) (* b b))) b) (* -2 a)) (+ (sqrt (+ (* (* -4 a) c) (* b b))) b) (sqrt (+ (* (* -4 a) c) (* b b))) (+ (* (* -4 a) c) (* b b)) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/ c b) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (neg (sqrt (+ (* -4 (* c a)) (* b b)))) (sqrt (+ (* -4 (* c a)) (* b b))) (* (+ (* (* a (/ c (* b b))) -4) 1) b) (* (* (+ (* (* a (/ c (* b b))) -4) 1) b) b) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (* -4 a) (+ (* -4 (* c a)) (* b b)) (+ (* -4 (* c a)) (* b b)) (sqrt (+ (* -4 (* c a)) (* b b))) (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (/ c (* b b)) (* a (/ c (* b b))))","b","0"],[3.18603515625,"((/ (+ (sqrt (+ (* (* -4 a) c) (* b b))) b) (* -2 a)) (+ (sqrt (+ (* (* -4 a) c) (* b b))) b) (sqrt (+ (* (* -4 a) c) (* b b))) (+ (* (* -4 a) c) (* b b)) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/ c b) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (neg (sqrt (+ (* -4 (* c a)) (* b b)))) (sqrt (+ (* -4 (* c a)) (* b b))) (* (+ (* (* a (/ c (* b b))) -4) 1) b) (* (* (+ (* (* a (/ c (* b b))) -4) 1) b) b) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (* -4 a) (+ (* -4 (* c a)) (* b b)) (+ (* -4 (* c a)) (* b b)) (sqrt (+ (* -4 (* c a)) (* b b))) (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (/ c (* b b)) (* a (/ c (* b b))))","a","-inf"],[3.001953125,"((/ (+ (sqrt (+ (* (* -4 a) c) (* b b))) b) (* -2 a)) (+ (sqrt (+ (* (* -4 a) c) (* b b))) b) (sqrt (+ (* (* -4 a) c) (* b b))) (+ (* (* -4 a) c) (* b b)) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/ c b) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (neg (sqrt (+ (* -4 (* c a)) (* b b)))) (sqrt (+ (* -4 (* c a)) (* b b))) (* (+ (* (* a (/ c (* b b))) -4) 1) b) (* (* (+ (* (* a (/ c (* b b))) -4) 1) b) b) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (* -4 a) (+ (* -4 (* c a)) (* b b)) (+ (* -4 (* c a)) (* b b)) (sqrt (+ (* -4 (* c a)) (* b b))) (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (/ c (* b b)) (* a (/ c (* b b))))","a","inf"],[4.35205078125,"((/ (+ (sqrt (+ (* (* -4 a) c) (* b b))) b) (* -2 a)) (+ (sqrt (+ (* (* -4 a) c) (* b b))) b) (sqrt (+ (* (* -4 a) c) (* b b))) (+ (* (* -4 a) c) (* b b)) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/ c b) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (neg (sqrt (+ (* -4 (* c a)) (* b b)))) (sqrt (+ (* -4 (* c a)) (* b b))) (* (+ (* (* a (/ c (* b b))) -4) 1) b) (* (* (+ (* (* a (/ c (* b b))) -4) 1) b) b) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (* -4 a) (+ (* -4 (* c a)) (* b b)) (+ (* -4 (* c a)) (* b b)) (sqrt (+ (* -4 (* c a)) (* b b))) (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (/ c (* b b)) (* a (/ c (* b b))))","a","0"]],"time":40.8798828125,"type":"series"},{"count":[[220,219]],"egraph":[[0,8178,6006,0.117563832],[1,2757,6296,0.027749648],[0,857,6369,0.009030565]],"inputs":[["(* -1 (/ b a))","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/ (+ (* -1 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* -1 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(* 2 b)","(+ (* -2 (/ (* a c) b)) (* 2 b))","(+ (* 2 b) (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ (* 2 b) (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(/ c b)","(+ (/ c b) (/ (* a (pow c 2)) (pow b 3)))","(+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b))","(+ (* a (+ (* a (+ (* 1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)) (* 2 (/ (pow c 3) (pow b 5))))) (/ (pow c 2) (pow b 3)))) (/ c b))","(/ 1/2 a)","(* 2 (/ (* a c) b))","(* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b))))","(* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b))))","(* a (- (* a (- (* a (- (* 1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)) (* -4 (/ (pow c 3) (pow b 5))))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b))))","(* -2 b)","(- (* 2 (/ (* a c) b)) (* 2 b))","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) (* 2 b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) (* 2 b))","(* -1 b)","(- (* 2 (/ (* a c) b)) b)","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) b)","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) b)","(+ b (* -4 (/ (* a c) b)))","(* -4 a)","(/ (* a c) (pow b 2))","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/2 (/ b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -4 (* a c))","(* a (+ (* -4 c) (/ (pow b 2) a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* 1/2 (/ b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (/ b a))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (* 1/2 (/ b a)))))","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(* a (- (/ b a) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (/ b a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (- (* -1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -4 (/ (* a c) b))","(* a (+ (* -4 (/ c b)) (/ b a)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* -1 (/ b a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (+ b (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (+ b (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(* -1 (* a (+ (* -1 (/ (pow b 2) a)) (* 4 c))))","(+ (* 1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/2 b) (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* -1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (- (* -1 (/ b a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (+ b (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (+ b (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (/ b a) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* 1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (- (* -1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(* -1 (* a (+ (* -1 (/ b a)) (* 4 (/ c b)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(+ b (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (+ 1 (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (+ 1 (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (+ (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(- b (* (sqrt (* a c)) (sqrt -4)))","(- (* b (+ 1 (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (+ 1 (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))) (* (sqrt (* a c)) (sqrt -4)))","(- (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(- (* (pow b 2) (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(- (* (pow b 2) (- (* (pow b 2) (- (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(/ (+ (* -4 (* a c)) (pow b 2)) b)","(/ c (pow b 2))","(* b (- (/ c (pow b 2)) (/ 1 a)))","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a)))","(* b (+ 2 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(/ (+ c (/ (* a (pow c 2)) (pow b 2))) b)","(/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b)","(/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b)","(/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b)","(/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b)","(* b (- (* 2 (/ (* a c) (pow b 2))) 2))","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (- (* 2 (/ (* a c) (pow b 2))) 1))","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* -1 (/ c b))","(* -1 (/ (+ c (/ (* a (pow c 2)) (pow b 2))) b))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(* -1 (/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(* -1 (/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(/ b a)","(* -1 (* b (- (/ c (pow b 2)) (/ 1 a))))","(* -1 (* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))","(* -1 (* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a))))","(* -1 (* b (- (* 2 (/ (* a c) (pow b 2))) 2)))","(* -1 (* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2)))))))","(* -1 (* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -2 (/ (* a c) b))","(* -1 (/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b))","(* -1 (/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(* -1 (/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b))","(* -1 (* b (- (* 2 (/ (* a c) (pow b 2))) 1)))","(* -1 (* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 1 (* -2 (/ (* a c) (pow b 2)))))))","(* -1 (* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (* b (- (* 4 (/ (* a c) (pow b 2))) 1)))","(+ (* -1 (/ b a)) (/ c b))","(+ (* -1 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(+ (* 2 b) (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ (* 2 b) (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (/ 1 b) (/ (* a c) (pow b 3))))","(* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b)))","(* c (+ (* c (+ (* c (+ (* 1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))) (* 2 (/ (pow a 2) (pow b 5))))) (/ a (pow b 3)))) (/ 1 b)))","(* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b))))","(* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b))))","(* c (- (* c (- (* c (- (* 1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b)) (* -4 (/ (pow a 3) (pow b 5))))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b))))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) (* 2 b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) (* 2 b))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) b)","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) b)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/2 (/ b (* a c)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* c (+ (* -4 a) (/ (pow b 2) c)))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* 1/2 (/ b (* a c)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (/ b (* a c))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (* 1/2 (/ b (* a c)))))))","(* c (- (/ b c) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (/ b c)) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (- (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* c (+ (* -4 (/ a b)) (/ b c)))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)))))","(* -1 (* c (+ (* -1 (/ b c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (+ b (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (+ b (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* -1 (* c (+ (* -1 (/ (pow b 2) c)) (* 4 a))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1/2 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 1/2 (/ b a))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* 1/2 (/ b a))) c)))))","(* -1 (* c (- (* -1 (/ b c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (+ b (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (+ b (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (/ b c) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* -1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* -1 (* c (+ (* -1 (/ b c)) (* 4 (/ a b)))))"]],"memory":[[6518624,57027504]],"method":["egg-herbie"],"outputs":[["(* -1 (/ b a))","(/.f64 (neg.f64 b) a)","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/.f64 (fma.f64 a (/.f64 c b) (neg.f64 b)) a)","(/ (+ (* -1 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/.f64 (fma.f64 (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)) a (neg.f64 b)) a)","(/ (+ (* -1 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64)))) a (/.f64 c b)) a (neg.f64 b)) a)","(* 2 b)","(*.f64 #s(literal 2 binary64) b)","(+ (* -2 (/ (* a c) b)) (* 2 b))","(fma.f64 #s(literal -2 binary64) (/.f64 (*.f64 c a) b) (*.f64 #s(literal 2 binary64) b))","(+ (* 2 b) (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(fma.f64 (*.f64 a #s(literal -2 binary64)) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)) (*.f64 #s(literal 2 binary64) b))","(+ (* 2 b) (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) (pow.f64 b #s(literal 5 binary64))) (*.f64 #s(literal -2 binary64) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)))) a (*.f64 #s(literal 2 binary64) b))","b","(+ b (* -2 (/ (* a c) b)))","(fma.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 c b) b)","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(fma.f64 (*.f64 a #s(literal -2 binary64)) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)) b)","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) (pow.f64 b #s(literal 5 binary64))) (*.f64 #s(literal -2 binary64) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)))) a b)","(pow b 2)","(*.f64 b b)","(+ (* -4 (* a c)) (pow b 2))","(fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b))","(/ c b)","(/.f64 c b)","(+ (/ c b) (/ (* a (pow c 2)) (pow b 3)))","(fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b))","(+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b))","(fma.f64 (fma.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64)))) a (/.f64 c b))","(+ (* a (+ (* a (+ (* 1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)) (* 2 (/ (pow c 3) (pow b 5))))) (/ (pow c 2) (pow b 3)))) (/ c b))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) (*.f64 #s(literal 20 binary64) a)) b) #s(literal 1/4 binary64) (/.f64 (*.f64 #s(literal 2 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 5 binary64)))) a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64)))) a (/.f64 c b))","(/ 1/2 a)","(/.f64 #s(literal 1/2 binary64) a)","(* 2 (/ (* a c) b))","(*.f64 #s(literal 2 binary64) (/.f64 (*.f64 c a) b))","(* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b))))","(*.f64 (*.f64 #s(literal 2 binary64) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b))) a)","(* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (*.f64 (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64))) a (*.f64 #s(literal 2 binary64) (/.f64 c b))) a)","(* a (- (* a (- (* a (- (* 1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)) (* -4 (/ (pow c 3) (pow b 5))))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) (*.f64 #s(literal 20 binary64) a)) b) #s(literal 1/2 binary64) (*.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) #s(literal 4 binary64))) a (*.f64 (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64))) a (*.f64 #s(literal 2 binary64) (/.f64 c b))) a)","(* -2 b)","(*.f64 #s(literal -2 binary64) b)","(- (* 2 (/ (* a c) b)) (* 2 b))","(*.f64 #s(literal 2 binary64) (fma.f64 a (/.f64 c b) (neg.f64 b)))","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) (* 2 b))","(fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b))) a (*.f64 #s(literal -2 binary64) b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) (* 2 b))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (*.f64 (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64))) a (*.f64 #s(literal 2 binary64) (/.f64 c b))) a (*.f64 #s(literal -2 binary64) b))","(* -1 b)","(neg.f64 b)","(- (* 2 (/ (* a c) b)) b)","(-.f64 (*.f64 #s(literal 2 binary64) (/.f64 (*.f64 c a) b)) b)","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) b)","(fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b))) a (neg.f64 b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) b)","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (*.f64 (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64))) a (*.f64 #s(literal 2 binary64) (/.f64 c b))) a (neg.f64 b))","(+ b (* -4 (/ (* a c) b)))","(fma.f64 (/.f64 (*.f64 c a) b) #s(literal -4 binary64) b)","(* -4 a)","(*.f64 #s(literal -4 binary64) a)","(/ (* a c) (pow b 2))","(*.f64 (/.f64 a b) (/.f64 c b))","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/2 (/ b a)))","(*.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/4 binary64) (*.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(fma.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (*.f64 #s(literal -1/4 binary64) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))))))","(* (sqrt (* a c)) (sqrt -4))","(*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64)))","(* a (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))","(*.f64 (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)) a)","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))) a)","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))))) a)","(* -4 (* a c))","(*.f64 (*.f64 c a) #s(literal -4 binary64))","(* a (+ (* -4 c) (/ (pow b 2) a)))","(*.f64 (fma.f64 #s(literal -4 binary64) c (/.f64 (*.f64 b b) a)) a)","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* 1/2 (/ b a)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (/.f64 b a) #s(literal 1/2 binary64)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (/ b a))))","(fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/4 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (/.f64 b a) #s(literal 1/2 binary64))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (* 1/2 (/ b a)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal -1/4 binary64) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (/.f64 b a) #s(literal 1/2 binary64)))))","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 c a)))","(* a (- (/ b a) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (-.f64 (/.f64 b a) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* a (- (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/2 binary64) (-.f64 (/.f64 b a) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(* a (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (/ b a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 b a)) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a))) a)","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))) a)","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))) a)","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)))) a)","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(* a (- (* -1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(* -4 (/ (* a c) b))","(*.f64 (/.f64 (*.f64 c a) b) #s(literal -4 binary64))","(* a (+ (* -4 (/ c b)) (/ b a)))","(*.f64 (fma.f64 (/.f64 c b) #s(literal -4 binary64) (/.f64 b a)) a)","(* (sqrt (/ c a)) (sqrt -1))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 #s(literal 1/2 binary64) b)) (neg.f64 a)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 #s(literal 1/2 binary64) b (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/128 binary64)))) (neg.f64 a))) (neg.f64 a)))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a)))","(* -1 (* a (+ (* -1 (/ b a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b) a)))","(* -1 (* a (+ (* -1 (/ (+ b (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/4 binary64)) b) (neg.f64 a))))","(* -1 (* a (+ (* -1 (/ (+ b (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 (-.f64 b (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/64 binary64)))) a)) (neg.f64 a))))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))))","(* -1 (* a (+ (* -1 (/ (pow b 2) a)) (* 4 c))))","(*.f64 (neg.f64 a) (fma.f64 #s(literal 4 binary64) c (/.f64 (*.f64 (neg.f64 b) b) a)))","(+ (* 1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (*.f64 (/.f64 b a) #s(literal 1/2 binary64)))","(+ (* -1 (/ (+ (* -1/2 b) (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 #s(literal -1/2 binary64) b)) (neg.f64 a)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* -1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 #s(literal -1/2 binary64) b (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/128 binary64)))) (neg.f64 a))) (neg.f64 a)))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a)))","(* -1 (* a (- (* -1 (/ b a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (-.f64 (/.f64 (neg.f64 b) a) (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (- (* -1 (/ (+ b (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) b) a) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (- (* -1 (/ (+ b (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (/.f64 (-.f64 b (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/64 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 #s(literal -1/4 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b))) (sqrt.f64 #s(literal -1 binary64)))) a)) a) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (- (/ b a) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (-.f64 (/.f64 b a) (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) (neg.f64 b)) a) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/64 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (sqrt.f64 #s(literal -1 binary64))) (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 #s(literal -1/4 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b))) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 a)) b) a) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/4 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (- (* 1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (-.f64 (*.f64 (*.f64 #s(literal 1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))))","(* -1 (* a (- (* -1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(*.f64 (neg.f64 a) (-.f64 (fma.f64 (*.f64 #s(literal -1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (*.f64 #s(literal 1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))))","(* -1 (* a (+ (* -1 (/ b a)) (* 4 (/ c b)))))","(*.f64 (neg.f64 a) (fma.f64 #s(literal 4 binary64) (/.f64 c b) (/.f64 (neg.f64 b) a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -1/2 binary64) a)) b))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/16 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/4 binary64))) b (/.f64 #s(literal -1/2 binary64) a)) b))","(+ b (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64)) b)","(+ (* b (+ 1 (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64)) (fma.f64 (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 #s(literal 1/2 binary64) b) b))","(+ (* b (+ 1 (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) b #s(literal 1 binary64)) b (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (*.f64 b b) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) #s(literal -1/8 binary64))) (*.f64 b b) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) b))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (+ (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/16 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/4 binary64))) b (/.f64 #s(literal 1/2 binary64) a)) b))","(- b (* (sqrt (* a c)) (sqrt -4)))","(-.f64 b (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(- (* b (+ 1 (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(-.f64 (fma.f64 (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 #s(literal -1/2 binary64) b) b) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(- (* b (+ 1 (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/2 binary64))) b #s(literal 1 binary64)) b (*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 c a))))","(- (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(neg.f64 (fma.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64)) b))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(-.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) #s(literal -1 binary64)) b) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/2 binary64))) b #s(literal -1 binary64)) b (*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 c a))))","(- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 c a))))","(- (* (pow b 2) (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/2 binary64))) b) b (*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 c a))))","(- (* (pow b 2) (- (* (pow b 2) (- (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (/.f64 (*.f64 b b) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) #s(literal 1/8 binary64))) (*.f64 b b) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/2 binary64))) (*.f64 b b) (*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 c a))))","(/ (+ (* -4 (* a c)) (pow b 2)) b)","(/.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b)) b)","(/ c (pow b 2))","(/.f64 c (*.f64 b b))","(* b (- (/ c (pow b 2)) (/ 1 a)))","(*.f64 (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1 binary64) a)) b)","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))","(*.f64 (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1 binary64) a))) b)","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a)))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1 binary64) a)))) b)","(* b (+ 2 (* -2 (/ (* a c) (pow b 2)))))","(*.f64 (fma.f64 (/.f64 #s(literal -2 binary64) b) (/.f64 (*.f64 c a) b) #s(literal 2 binary64)) b)","(* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(*.f64 (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 a b) (/.f64 c b))) #s(literal 2 binary64)) b)","(* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 a b) (/.f64 c b))) #s(literal 2 binary64))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(fma.f64 (*.f64 #s(literal -2 binary64) b) (*.f64 (/.f64 a b) (/.f64 c b)) b)","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(fma.f64 (*.f64 #s(literal -2 binary64) b) (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) b)","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 a b) (/.f64 c b))) #s(literal 1 binary64))) b)","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(*.f64 (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) (/.f64 c (*.f64 b b)) #s(literal 1 binary64)) b) b)","(/ (+ c (/ (* a (pow c 2)) (pow b 2))) b)","(/.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c) b)","(/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b)","(/.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) c)) b)","(/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b)","(/.f64 (fma.f64 (/.f64 #s(literal 1/4 binary64) a) (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (*.f64 (pow.f64 c #s(literal 4 binary64)) #s(literal 20 binary64))) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) c))) b)","(/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b)","(/.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b) (*.f64 c a))) b)","(/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 #s(literal 2 binary64) (fma.f64 c a (*.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b))))) b)","(/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b)","(/.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (*.f64 (pow.f64 c #s(literal 4 binary64)) #s(literal 20 binary64))) (pow.f64 b #s(literal 6 binary64))) #s(literal 1/2 binary64) (*.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))))) (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b) (*.f64 c a)))) b)","(* b (- (* 2 (/ (* a c) (pow b 2))) 2))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 c (*.f64 b b)) #s(literal -2 binary64)) b)","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (-.f64 (/.f64 (*.f64 #s(literal 2 binary64) (*.f64 (*.f64 (*.f64 c c) a) a)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal -2 binary64) b) (/.f64 (*.f64 c a) b) #s(literal 2 binary64))) b)","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 a b) (/.f64 c b))))) b)","(* b (- (* 2 (/ (* a c) (pow b 2))) 1))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 c (*.f64 b b)) #s(literal -1 binary64)) b)","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (-.f64 (/.f64 (*.f64 #s(literal 2 binary64) (*.f64 (*.f64 (*.f64 c c) a) a)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal -2 binary64) b) (/.f64 (*.f64 c a) b) #s(literal 1 binary64))) b)","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) (*.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 a b) (/.f64 c b))))) b)","(* b (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) (/.f64 c (*.f64 b b)) #s(literal 1 binary64)) b)","(* -1 (/ c b))","(/.f64 (neg.f64 c) b)","(* -1 (/ (+ c (/ (* a (pow c 2)) (pow b 2))) b))","(/.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c) (neg.f64 b))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b))","(/.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) c)) (neg.f64 b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(/.f64 (fma.f64 (/.f64 #s(literal 1/4 binary64) a) (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (*.f64 (pow.f64 c #s(literal 4 binary64)) #s(literal 20 binary64))) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) c))) (neg.f64 b))","(* -1 (/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b))","(/.f64 (*.f64 #s(literal 2 binary64) (fma.f64 c a (*.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b)))) b)","(* -1 (/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b) (*.f64 c a)))) (neg.f64 b))","(* -1 (/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b))","(/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (*.f64 (pow.f64 c #s(literal 4 binary64)) #s(literal 20 binary64))) (pow.f64 b #s(literal 6 binary64))) #s(literal -1/2 binary64) (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b) (*.f64 c a))))) (neg.f64 b))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (neg.f64 b) (fma.f64 (/.f64 #s(literal -2 binary64) b) (/.f64 (*.f64 c a) b) #s(literal 1 binary64)))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (neg.f64 b) (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 a b) (/.f64 c b))) #s(literal 1 binary64)))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 a b) (/.f64 c b))) #s(literal 1 binary64))))","(/ b a)","(/.f64 b a)","(* -1 (* b (- (/ c (pow b 2)) (/ 1 a))))","(*.f64 (neg.f64 b) (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1 binary64) a)))","(* -1 (* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))","(*.f64 (neg.f64 b) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1 binary64) a))))","(* -1 (* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1 binary64) a)))))","(* -1 (* b (- (* 2 (/ (* a c) (pow b 2))) 2)))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 c (*.f64 b b)) #s(literal -2 binary64)))","(* -1 (* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2)))))))","(*.f64 (neg.f64 b) (-.f64 (/.f64 (*.f64 #s(literal 2 binary64) (*.f64 (*.f64 (*.f64 c c) a) a)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal -2 binary64) b) (/.f64 (*.f64 c a) b) #s(literal 2 binary64))))","(* -1 (* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(*.f64 (neg.f64 b) (-.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 a b) (/.f64 c b))))))","(* -2 (/ (* a c) b))","(*.f64 #s(literal -2 binary64) (/.f64 (*.f64 c a) b))","(* -1 (/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b))","(/.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b) (*.f64 c a))) (neg.f64 b))","(* -1 (/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(/.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 #s(literal 2 binary64) (fma.f64 c a (*.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b))))) (neg.f64 b))","(* -1 (/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b))","(/.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (*.f64 (pow.f64 c #s(literal 4 binary64)) #s(literal 20 binary64))) (pow.f64 b #s(literal 6 binary64))) #s(literal 1/2 binary64) (*.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))))) (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b) (*.f64 c a)))) (neg.f64 b))","(* -1 (* b (- (* 2 (/ (* a c) (pow b 2))) 1)))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 c (*.f64 b b)) #s(literal -1 binary64)))","(* -1 (* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 1 (* -2 (/ (* a c) (pow b 2)))))))","(*.f64 (neg.f64 b) (-.f64 (/.f64 (*.f64 #s(literal 2 binary64) (*.f64 (*.f64 (*.f64 c c) a) a)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal -2 binary64) b) (/.f64 (*.f64 c a) b) #s(literal 1 binary64))))","(* -1 (* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(*.f64 (neg.f64 b) (-.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) (*.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 a b) (/.f64 c b))))))","(* -1 (* b (- (* 4 (/ (* a c) (pow b 2))) 1)))","(*.f64 (neg.f64 b) (fma.f64 (/.f64 #s(literal 4 binary64) b) (/.f64 (*.f64 c a) b) #s(literal -1 binary64)))","(+ (* -1 (/ b a)) (/ c b))","(-.f64 (/.f64 c b) (/.f64 b a))","(+ (* -1 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(fma.f64 (fma.f64 a (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) b)) c (/.f64 (neg.f64 b) a))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 a (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal 1 binary64) b)) c (/.f64 (neg.f64 b) a))","(+ (* 2 b) (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(fma.f64 (*.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 a b))) c (*.f64 #s(literal 2 binary64) b))","(+ (* 2 b) (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c (*.f64 #s(literal 2 binary64) b))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(fma.f64 (*.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 a b))) c b)","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c b)","(* c (+ (/ 1 b) (/ (* a c) (pow b 3))))","(*.f64 (fma.f64 a (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) b)) c)","(* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b)))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 a (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal 1 binary64) b)) c)","(* c (+ (* c (+ (* c (+ (* 1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))) (* 2 (/ (pow a 2) (pow b 5))))) (/ a (pow b 3)))) (/ 1 b)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 a a) (pow.f64 b #s(literal 5 binary64))) #s(literal 2 binary64) (*.f64 (/.f64 (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) (*.f64 #s(literal 20 binary64) c)) (*.f64 b a)) #s(literal 1/4 binary64))) c (/.f64 a (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal 1 binary64) b)) c)","(* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b))))","(*.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 a b))) c)","(* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (*.f64 (/.f64 (*.f64 a a) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64))) c (*.f64 (/.f64 a b) #s(literal 2 binary64))) c)","(* c (- (* c (- (* c (- (* 1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b)) (* -4 (/ (pow a 3) (pow b 5))))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) (*.f64 #s(literal 20 binary64) c)) b) #s(literal 1/2 binary64) (*.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) #s(literal 4 binary64))) c (*.f64 (/.f64 (*.f64 a a) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64))) c (*.f64 (/.f64 a b) #s(literal 2 binary64))) c)","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) (* 2 b))","(fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 a b))) c (*.f64 #s(literal -2 binary64) b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) (* 2 b))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (*.f64 (/.f64 (*.f64 a a) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64))) c (*.f64 (/.f64 a b) #s(literal 2 binary64))) c (*.f64 #s(literal -2 binary64) b))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) b)","(fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 a b))) c (neg.f64 b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) b)","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (*.f64 (/.f64 (*.f64 a a) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64))) c (*.f64 (/.f64 a b) #s(literal 2 binary64))) c (neg.f64 b))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/2 (/ b (* a c)))))","(*.f64 (*.f64 c #s(literal -1/2 binary64)) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 b a) c)))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal -1/4 binary64) (*.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 b a) c)))) c)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 b a) c)) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (*.f64 #s(literal -1/4 binary64) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))))) c)","(* c (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c)) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c)))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))))) c)","(* c (+ (* -4 a) (/ (pow b 2) c)))","(*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* 1/2 (/ b (* a c)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (/.f64 (/.f64 b a) c) #s(literal 1/2 binary64))) c)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (/ b (* a c))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal -1/4 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (/.f64 (/.f64 b a) c) #s(literal 1/2 binary64)))) c)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (* 1/2 (/ b (* a c)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (sqrt.f64 #s(literal -4 binary64)) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal -1/4 binary64) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 (/.f64 b a) c) #s(literal 1/2 binary64))))) c)","(* c (- (/ b c) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (-.f64 (/.f64 b c) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))) c)","(* c (- (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal -1/2 binary64) (-.f64 (/.f64 b c) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (- (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (/ b c)) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 b c)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c))) c)","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c)))) c)","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64))))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c)))) c)","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 a c)))) c)","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(*.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64))))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (- (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (*.f64 (*.f64 #s(literal 1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (+ (* -4 (/ a b)) (/ b c)))","(*.f64 (fma.f64 (/.f64 a b) #s(literal -4 binary64) (/.f64 b c)) c)","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(*.f64 (neg.f64 c) (-.f64 (*.f64 (/.f64 (/.f64 b a) c) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))) c))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/128 binary64)))) (neg.f64 c))) c))))","(* -1 (* c (+ (* -1 (/ b c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (/.f64 (neg.f64 b) c)))","(* -1 (* c (+ (* -1 (/ (+ b (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/4 binary64)) b) (neg.f64 c))))","(* -1 (* c (+ (* -1 (/ (+ b (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (/.f64 (-.f64 b (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/64 binary64)))) c)) (neg.f64 c))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))))","(* -1 (* c (+ (* -1 (/ (pow b 2) c)) (* 4 a))))","(*.f64 (neg.f64 c) (fma.f64 #s(literal 4 binary64) a (/.f64 (*.f64 (neg.f64 b) b) c)))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1/2 (/ b (* a c))))))","(*.f64 (neg.f64 c) (-.f64 (*.f64 (/.f64 (/.f64 b a) c) #s(literal -1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 1/2 (/ b a))) c)))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 (/.f64 b a) #s(literal 1/2 binary64))) c))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* 1/2 (/ b a))) c)))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (/.f64 b a) #s(literal 1/2 binary64) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/128 binary64)))) (neg.f64 c))) c))))","(* -1 (* c (- (* -1 (/ b c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (-.f64 (/.f64 (neg.f64 b) c) (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)))))","(* -1 (* c (- (* -1 (/ (+ b (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) b) c) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)))))","(* -1 (* c (- (* -1 (/ (+ b (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (/.f64 (-.f64 b (/.f64 (fma.f64 (*.f64 #s(literal 1/64 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) (*.f64 b b)) #s(literal -1/4 binary64))) c)) c) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)))))","(* -1 (* c (- (/ b c) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (-.f64 (/.f64 b c) (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)))))","(* -1 (* c (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) (neg.f64 b)) c) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/64 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) (*.f64 b b)) #s(literal -1/4 binary64))) (neg.f64 c)) b) c) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)))))","(* -1 (* c (- (* -1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/4 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)))))","(* -1 (* c (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (neg.f64 c) (-.f64 (*.f64 (*.f64 #s(literal 1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64))))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))))","(* -1 (* c (- (* -1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(*.f64 (neg.f64 c) (-.f64 (fma.f64 (*.f64 #s(literal -1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (*.f64 (*.f64 #s(literal 1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))))","(* -1 (* c (+ (* -1 (/ b c)) (* 4 (/ a b)))))","(*.f64 (neg.f64 c) (fma.f64 (/.f64 a b) #s(literal 4 binary64) (/.f64 (neg.f64 b) c)))"]],"stop":[["iter limit",1],["node limit",1]],"time":293.56298828125,"type":"simplify"},{"count":[[24,951]],"egraph":[[0,8259,333,0.089876005],[2,1780,333,0.032651578],[1,263,333,0.007745696],[0,76,333,0.002322078],[0,47,346,0.000470192]],"inputs":[["(/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a))","(+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)","(sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))","(fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 c b))","(/.f64 c b)","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))","(/.f64 #s(literal 1/2 binary64) a)","(-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))","(/.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))) b) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))) b)","(neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))))","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))","(*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -4 binary64) #s(literal 1 binary64)) b)","(*.f64 (*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))))","(*.f64 #s(literal -4 binary64) a)","#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))","#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))","(-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))","(/.f64 c (*.f64 b b))","(*.f64 a (/.f64 c (*.f64 b b)))"]],"memory":[[-2260416,77963584]],"outputs":[["(*.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) #s(literal -1 binary64)) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 (/.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) (*.f64 #s(literal -2 binary64) a)) (/.f64 (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) (neg.f64 a)) #s(literal 1/2 binary64))","(*.f64 (/.f64 (-.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (*.f64 b b)) #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) a)))","(*.f64 (/.f64 (-.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (*.f64 b b)) (neg.f64 a)) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (*.f64 b b)) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) #s(literal -1 binary64)) (neg.f64 a)))","(*.f64 (/.f64 (-.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (*.f64 b b)) #s(literal -2 binary64)) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (*.f64 b b)) a) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal -2 binary64)))","(*.f64 (/.f64 (+.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) a)))","(*.f64 (/.f64 (+.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 3/2 binary64))) (neg.f64 a)) (/.f64 (pow.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (+.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) #s(literal -1 binary64)) (neg.f64 a)))","(*.f64 (/.f64 (+.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal -2 binary64)) (/.f64 (pow.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (+.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 3/2 binary64))) a) (/.f64 (pow.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) #s(literal -1 binary64)) #s(literal -2 binary64)))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) a))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (*.f64 b b))) #s(literal -1 binary64)) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (+.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 3/2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) #s(literal 2 binary64)))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) a) #s(literal -1/2 binary64))","(*.f64 (*.f64 (-.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal -1/2 binary64) a)) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 3/2 binary64))) (/.f64 #s(literal -1/2 binary64) a)) (pow.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) #s(literal 1 binary64)) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 (neg.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) a))","(*.f64 (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b))) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 (*.f64 (-.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (*.f64 b b)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a))))","(*.f64 (*.f64 (+.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) (*.f64 #s(literal -2 binary64) a))))","(*.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (-.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b))))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b)))))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) #s(literal -1/2 binary64)))","(*.f64 (+.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 3/2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal -2 binary64) a) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))))))","(*.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b)) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 #s(literal -1/2 binary64) (pow.f64 (/.f64 a (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b)) #s(literal -1 binary64)))","(*.f64 #s(literal -1/2 binary64) (/.f64 (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) a))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1/2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b)))","(*.f64 #s(literal 1/2 binary64) (/.f64 (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) (neg.f64 a)))","(*.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b)))","(*.f64 (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) (/.f64 #s(literal -1/2 binary64) a))","(pow.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) a)) #s(literal 2 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal -1/2 binary64) a))) (neg.f64 (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 3/2 binary64))) (/.f64 #s(literal -1/2 binary64) a))) (neg.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) #s(literal 1 binary64))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (neg.f64 (neg.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) #s(literal -1/2 binary64)))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (neg.f64 (*.f64 (-.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (*.f64 b b)) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) (*.f64 #s(literal -2 binary64) a))))","(/.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) a) #s(literal -2 binary64))","(/.f64 (*.f64 (-.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal -1/2 binary64) a)) (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b))","(/.f64 (*.f64 (+.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 3/2 binary64))) (/.f64 #s(literal -1/2 binary64) a)) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))))","(/.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) #s(literal 1 binary64)) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (-.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (*.f64 b b))) (neg.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b))))","(/.f64 (neg.f64 (+.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 3/2 binary64)))) (neg.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) #s(literal -1/2 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (*.f64 (-.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (*.f64 b b)) #s(literal 1 binary64)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 (+.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) #s(literal -1/2 binary64)) a)","(/.f64 (-.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (*.f64 b b)) (*.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b))))","(/.f64 (+.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 3/2 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))))","(/.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal -2 binary64) (/.f64 (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) (*.f64 (-.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal -1/2 binary64) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) (*.f64 (+.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 3/2 binary64))) (/.f64 #s(literal -1/2 binary64) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)) (*.f64 (-.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (*.f64 b b)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) (*.f64 #s(literal -2 binary64) a)) (*.f64 (+.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b)) (-.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (*.f64 b b))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) (+.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 3/2 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b)))","(/.f64 (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a))","(neg.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a)))","(-.f64 (/.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (*.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b))) (/.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b))))","(-.f64 (/.f64 (/.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b)) (*.f64 #s(literal -2 binary64) a)) (/.f64 (/.f64 (*.f64 b b) (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b)) (*.f64 #s(literal -2 binary64) a)))","(-.f64 (*.f64 #s(literal 0 binary64) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a)))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b))) #s(literal -1 binary64)))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) (/.f64 (-.f64 (*.f64 b b) (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) (-.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (*.f64 b b)))) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b)))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) (/.f64 (-.f64 (*.f64 b b) (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) (+.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 3/2 binary64))))) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 3/2 binary64)))) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) (pow.f64 (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (-.f64 b (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))))) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) #s(literal -1 binary64))))","(*.f64 (neg.f64 (-.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (*.f64 b b))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b))))","(*.f64 (neg.f64 (+.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 3/2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))))))","(*.f64 (-.f64 (*.f64 b b) (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) (/.f64 #s(literal 1 binary64) (-.f64 b (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))))))","(*.f64 (-.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (*.f64 b b)) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 3/2 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 b b (-.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b)))))","(*.f64 (+.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 3/2 binary64))) (pow.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b))","(pow.f64 (pow.f64 (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b)) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 b b) (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b)) #s(literal 3 binary64))) (fma.f64 (/.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b)) (/.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b)) (fma.f64 (/.f64 (*.f64 b b) (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b)) (/.f64 (*.f64 b b) (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b)) (*.f64 (/.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b)) (/.f64 (*.f64 b b) (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (*.f64 b b)))) (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) (*.f64 b b))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b)))","(/.f64 (neg.f64 (-.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (*.f64 b b))) (neg.f64 (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b)))","(/.f64 (neg.f64 (+.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b b (-.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) (neg.f64 (-.f64 b (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 b b) (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) (-.f64 b (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))))","(/.f64 (-.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) #s(literal -1 binary64))))","(/.f64 (+.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 3/2 binary64))) (fma.f64 b b (-.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b))))","(/.f64 (+.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 3/2 binary64))) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) (-.f64 (*.f64 b b) (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b b (-.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b))) (+.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 3/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) #s(literal -1 binary64)))","(fma.f64 (sqrt.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) (sqrt.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) b)","(fma.f64 (pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 1/4 binary64)) b)","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b)))) b)","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b)) #s(literal -1 binary64))) b)","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) b)","(fma.f64 (hypot.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b))))) b)","(fma.f64 (hypot.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (sqrt.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b))) #s(literal -1 binary64))) b)","(fma.f64 (hypot.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) b)","(-.f64 (/.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))))) (/.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))))))","(-.f64 (/.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b)) (/.f64 (*.f64 b b) (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b)))","(+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b)","(+.f64 b (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))))","(*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) (sqrt.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))))","(*.f64 (pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b)))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (hypot.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b))))))","(*.f64 (hypot.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (sqrt.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b))) #s(literal -1 binary64))))","(*.f64 (hypot.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(pow.f64 (pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 1/2 binary64))","(pow.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) #s(literal 1 binary64))","(/.f64 (neg.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b)))))","(/.f64 (neg.f64 (hypot.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b))))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)))) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b)))))","(/.f64 (sqrt.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal -64 binary64) (pow.f64 b #s(literal 6 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b))))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b))))","(/.f64 (hypot.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (sqrt.f64 (+.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b)))))","(/.f64 (hypot.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b))) (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b)))) (hypot.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))))","(sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))","(fabs.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))))","(exp.f64 (log.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))))","(*.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal -64 binary64) (pow.f64 b #s(literal 6 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (*.f64 b b) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal -64 binary64) (pow.f64 b #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b))))))","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) (neg.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))))","(*.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal -64 binary64) (pow.f64 b #s(literal 6 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b)))))","(*.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal -64 binary64) (pow.f64 b #s(literal 6 binary64))) (pow.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))","(*.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (neg.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) #s(literal 2 binary64))","(pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 1 binary64))","(pow.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) #s(literal 2 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b))) (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b))) (fma.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b))) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal -64 binary64) (pow.f64 b #s(literal 6 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b))) (*.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b)) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b))))","(/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64))) (-.f64 (*.f64 b b) (*.f64 (*.f64 c a) #s(literal -4 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (neg.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal -64 binary64) (pow.f64 b #s(literal 6 binary64)))) (neg.f64 (+.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal -64 binary64) (pow.f64 b #s(literal 6 binary64)))) (neg.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))))","(/.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal -64 binary64) (pow.f64 b #s(literal 6 binary64))) (+.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b))))","(/.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal -64 binary64) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b))) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal -64 binary64) (pow.f64 b #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))))","(fma.f64 (exp.f64 (log.f64 b)) (exp.f64 (log.f64 b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))","(fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))","(fma.f64 (neg.f64 b) (neg.f64 b) (*.f64 (*.f64 c a) #s(literal -4 binary64)))","(fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b))","(fma.f64 b b (*.f64 (*.f64 c a) #s(literal -4 binary64)))","(fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))","(fma.f64 (*.f64 a #s(literal -4 binary64)) c (*.f64 b b))","(fma.f64 a (*.f64 c #s(literal -4 binary64)) (*.f64 b b))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(sqrt.f64 (pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 2 binary64)))","(-.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (*.f64 b b) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 b b) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 (neg.f64 b) b))))","(fabs.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))) #s(literal 2 binary64)))","(exp.f64 (log.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))))","(+.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) (*.f64 b b))","(+.f64 (*.f64 b b) (*.f64 (*.f64 c a) #s(literal -4 binary64)))","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 c b))","(*.f64 (*.f64 c #s(literal 1 binary64)) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (neg.f64 (neg.f64 c)) (pow.f64 b #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 b c))))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (pow.f64 (pow.f64 c #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 b #s(literal -1 binary64)) c)","(*.f64 (neg.f64 c) (pow.f64 (neg.f64 b) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 c b))","(*.f64 c (pow.f64 b #s(literal -1 binary64)))","(pow.f64 (/.f64 b c) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 c #s(literal 1 binary64))) (neg.f64 b))","(/.f64 (neg.f64 (neg.f64 (neg.f64 c))) (neg.f64 (neg.f64 (neg.f64 b))))","(/.f64 (*.f64 c #s(literal 1 binary64)) b)","(/.f64 (neg.f64 (neg.f64 c)) (neg.f64 (neg.f64 b)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b c)))","(/.f64 (neg.f64 c) (neg.f64 b))","(/.f64 #s(literal 1 binary64) (/.f64 b (*.f64 c #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 b c))))","(/.f64 #s(literal 1 binary64) (/.f64 b c))","(/.f64 c b)","(neg.f64 (/.f64 (neg.f64 c) b))","(neg.f64 (/.f64 c (neg.f64 b)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 b)) (/.f64 c (neg.f64 b)))","(exp.f64 (*.f64 (log.f64 (/.f64 b c)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 (/.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (neg.f64 a)) #s(literal -1/2 binary64))","(*.f64 (/.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) #s(literal 2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) a))","(*.f64 (/.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) #s(literal -1 binary64)) (/.f64 (pow.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b) #s(literal -1 binary64)) (*.f64 #s(literal -2 binary64) a)))","(*.f64 (/.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) (neg.f64 a)) (/.f64 (pow.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal -2 binary64)))","(*.f64 (/.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) #s(literal 2 binary64)) (/.f64 (pow.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) #s(literal -2 binary64)) (/.f64 (pow.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b) #s(literal -1 binary64)) (neg.f64 a)))","(*.f64 (/.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) a) (/.f64 (pow.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) #s(literal -1 binary64)) (*.f64 #s(literal -2 binary64) a)))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64))) (neg.f64 a)) (/.f64 (pow.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) #s(literal -1 binary64)) #s(literal -2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal -2 binary64)) (/.f64 (pow.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) #s(literal -1 binary64)) (neg.f64 a)))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64))) a) (/.f64 (pow.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) #s(literal -2 binary64)))","(*.f64 (/.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) a) #s(literal 1/2 binary64))","(*.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))) (/.f64 #s(literal -1 binary64) a))","(*.f64 (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) a))","(*.f64 (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (pow.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64)))) (pow.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) #s(literal 1/2 binary64))) (/.f64 #s(literal -1 binary64) a))","(*.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) #s(literal -1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b) (neg.f64 a))))","(*.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b) a)))","(*.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal -1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (neg.f64 a))))","(*.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) a)))","(*.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b))))","(*.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 a) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))))","(*.f64 (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b))))","(*.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))))","(*.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (/.f64 #s(literal 1 binary64) (*.f64 a (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b))))","(*.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 a (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))))","(*.f64 (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) #s(literal 2 binary64)))","(*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (neg.f64 a)))","(*.f64 #s(literal 1 binary64) (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a)))","(*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))","(*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) a))","(*.f64 #s(literal 1/2 binary64) (*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))))","(pow.f64 (/.f64 a (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) #s(literal 1/2 binary64))) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) b) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))) #s(literal 3 binary64))) (fma.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) b) (*.f64 (/.f64 #s(literal 1/2 binary64) a) b) (-.f64 (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) b) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))))))","(/.f64 (+.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)) (pow.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a))) (*.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) #s(literal -1/2 binary64))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) #s(literal 1 binary64))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))) (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b)))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64))))) (neg.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) #s(literal 1/2 binary64)))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b) a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) a)))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))) (neg.f64 (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64))))) (neg.f64 (*.f64 (neg.f64 a) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))) (neg.f64 (*.f64 a (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64))))) (neg.f64 (*.f64 a (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))))","(/.f64 (neg.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))) (neg.f64 a))","(/.f64 (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) #s(literal -1/2 binary64)) (neg.f64 a))","(/.f64 (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64)))) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))","(/.f64 (neg.f64 (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) #s(literal 1/2 binary64))) (neg.f64 a))","(/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) #s(literal -1/2 binary64)) (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) #s(literal 1 binary64)) (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) #s(literal 1/2 binary64)) (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b) a))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal -1/2 binary64)) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 1/2 binary64)) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) a))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b)))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64)))) (*.f64 (neg.f64 a) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (*.f64 a (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b)))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64)))) (*.f64 a (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))))","(/.f64 (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) #s(literal 1/2 binary64)) a)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) #s(literal 1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b) (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64))) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 a) (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b) (neg.f64 a)) (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b) a) (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (neg.f64 a)) (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) a) (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b)) (*.f64 #s(literal -1/2 binary64) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 a) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))) (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b)) (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))) (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b)) (*.f64 #s(literal 1/2 binary64) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))) (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) #s(literal 1/2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))))","(/.f64 #s(literal 1 binary64) (/.f64 a (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) #s(literal 1/2 binary64))))","(/.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 b #s(literal -2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 (/.f64 b a) #s(literal 1/2 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 (*.f64 b #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 b #s(literal 1/2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 #s(literal -1/2 binary64) (/.f64 b (neg.f64 a)) (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 (neg.f64 b) (/.f64 #s(literal -1/2 binary64) a) (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 #s(literal 1 binary64) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) b (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))))","(fma.f64 #s(literal 1/2 binary64) (/.f64 b a) (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 b (/.f64 #s(literal 1/2 binary64) a) (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a)))","(-.f64 (/.f64 (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b)) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b)) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)))","(+.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) b) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))))","(+.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a)))","(*.f64 (/.f64 #s(literal -1 binary64) a) #s(literal -1/2 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal 1/2 binary64))","(*.f64 #s(literal -1/2 binary64) (/.f64 #s(literal -1 binary64) a))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 #s(literal 1/2 binary64) (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal -1 binary64))","(/.f64 (neg.f64 (pow.f64 a #s(literal -1 binary64))) #s(literal -2 binary64))","(/.f64 #s(literal -1 binary64) (*.f64 #s(literal -2 binary64) a))","(/.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal 2 binary64))","(/.f64 #s(literal -1/2 binary64) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 #s(literal -1/2 binary64) (neg.f64 a))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (pow.f64 a #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/2 binary64) (neg.f64 (neg.f64 a)))","(/.f64 #s(literal 1/2 binary64) a)","(neg.f64 (/.f64 #s(literal -1/2 binary64) a))","(exp.f64 (*.f64 (log.f64 (*.f64 #s(literal 2 binary64) a)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b))))","(*.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))))","(*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) (/.f64 #s(literal 1 binary64) (-.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))))","(*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) (pow.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 b b (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) (*.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))))))","(*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64))) (pow.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b)) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b)) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b)) (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b)) (fma.f64 (/.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b)) (/.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b)) (*.f64 (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b)) (/.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))) (fma.f64 (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))) (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))) (*.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))) (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (+.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) (-.f64 (*.f64 b b) (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) b))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))) (neg.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))))","(/.f64 (-.f64 (*.f64 (*.f64 b b) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b)) (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b)))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64)))) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (neg.f64 (-.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b)))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b b (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) (*.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) (-.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64))) (fma.f64 b b (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) (*.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64))) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b b (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) (*.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))))) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b)","(-.f64 (/.f64 (*.f64 b b) (-.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))) (/.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) (-.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))))","(-.f64 (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b)) (/.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b)))","(-.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))) (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))))","(-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))","(+.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) b)","(+.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))","(*.f64 (sqrt.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (sqrt.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))","(*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 1/4 binary64)))","(pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) #s(literal 1 binary64))","(pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))","(fabs.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))","(exp.f64 (log.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))","(*.f64 (/.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 (/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)))","(*.f64 (/.f64 (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(*.f64 (/.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) (neg.f64 a)) #s(literal -1/2 binary64))","(*.f64 (/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(literal -1 binary64)) (*.f64 #s(literal -2 binary64) a)))","(*.f64 (/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) (neg.f64 a)) (/.f64 (pow.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(literal -1 binary64)) #s(literal -2 binary64)))","(*.f64 (/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) #s(literal -2 binary64)) (/.f64 (pow.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(literal -1 binary64)) (neg.f64 a)))","(*.f64 (/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) a) (/.f64 (pow.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1 binary64)) (*.f64 #s(literal -2 binary64) a)))","(*.f64 (/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (neg.f64 a)) (/.f64 (pow.f64 (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1 binary64)) #s(literal -2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -2 binary64)) (/.f64 (pow.f64 (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1 binary64)) (neg.f64 a)))","(*.f64 (/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) a) (/.f64 (pow.f64 (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) a))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) #s(literal -2 binary64)))","(*.f64 (/.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) a) #s(literal 1/2 binary64))","(*.f64 (*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1 binary64)))","(*.f64 (*.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 (-.f64 (pow.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) #s(literal -1/2 binary64) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))))","(*.f64 (-.f64 (*.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) #s(literal 3 binary64))) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) #s(literal -1/2 binary64)) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))))))","(*.f64 (neg.f64 (*.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) #s(literal 1/2 binary64))) (/.f64 #s(literal -1 binary64) a))","(*.f64 (neg.f64 (neg.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)))) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 (*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) b)) (/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(*.f64 (*.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))))))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) #s(literal 1/2 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(*.f64 (neg.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 #s(literal -1/2 binary64) (/.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) (neg.f64 a)))","(*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) (/.f64 #s(literal 1/2 binary64) a)))","(*.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)))","(*.f64 #s(literal 1/2 binary64) (pow.f64 (/.f64 a (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))) #s(literal -1 binary64)))","(*.f64 #s(literal 1/2 binary64) (/.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) a))","(pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))) #s(literal -1 binary64))","(/.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) #s(literal 3 binary64)) (pow.f64 (neg.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a))) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (neg.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) #s(literal -1/2 binary64)) (neg.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))))))","(/.f64 (neg.f64 (/.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) a)) #s(literal -2 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) #s(literal 1 binary64))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) #s(literal -1/2 binary64) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) #s(literal 3 binary64))) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) #s(literal -1/2 binary64)) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) #s(literal 1/2 binary64)))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) b))) (neg.f64 (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) a) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 b a))) #s(literal 4 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) a) a) (*.f64 #s(literal 2 binary64) (*.f64 b #s(literal 1/2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) a) (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal 2 binary64) (neg.f64 b))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) a) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) a) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal 2 binary64) b)) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 a (/.f64 b a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal 1/2 binary64)) a) (*.f64 a (*.f64 b #s(literal 1/2 binary64)))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal 1/2 binary64)) (*.f64 #s(literal -2 binary64) a)) (*.f64 a (neg.f64 b))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal 1/2 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal 1/2 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 a b)) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 b a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 b #s(literal 1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 b))) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (*.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -2 binary64)) (/.f64 b a))) (*.f64 (*.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -2 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (*.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -2 binary64)) (*.f64 b #s(literal 1/2 binary64)))) (*.f64 (*.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -2 binary64)) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -2 binary64)) (neg.f64 b))) (*.f64 (*.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 (*.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -2 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -2 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -2 binary64)) b)) (*.f64 (*.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -2 binary64)) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 b a))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 b #s(literal 1/2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 b))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (neg.f64 b)) (*.f64 #s(literal -2 binary64) a))","(/.f64 (/.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) a) #s(literal 2 binary64))","(/.f64 (*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(/.f64 (*.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64))) (fma.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) #s(literal -1/2 binary64) (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 (-.f64 (*.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) #s(literal 3 binary64))) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) #s(literal -1/2 binary64)) (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) #s(literal 1/2 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (neg.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 (*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) b)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (*.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) #s(literal 1/2 binary64)) a)","(/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)))))","(/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))) (*.f64 #s(literal -2 binary64) a))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (/.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) (*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) #s(literal -1/2 binary64) (*.f64 b (/.f64 #s(literal 1/2 binary64) a))) (-.f64 (pow.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) #s(literal -1/2 binary64)) (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))) (-.f64 (*.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) #s(literal 3 binary64))) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)) (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) b))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))))","(/.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) (*.f64 #s(literal 2 binary64) a))","(neg.f64 (*.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1 binary64)) (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (neg.f64 a)) #s(literal 1/2 binary64) (neg.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -2 binary64)) (pow.f64 a #s(literal -1 binary64)) (neg.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 1/2 binary64)) (neg.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (/.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) a) #s(literal 1/2 binary64) (neg.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) #s(literal -1/2 binary64) (neg.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 1/2 binary64)) (/.f64 #s(literal -1 binary64) a) (neg.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)) (neg.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (/.f64 #s(literal -1/2 binary64) a) (neg.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 #s(literal -1 binary64) (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal 1/2 binary64) a)) (neg.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -2 binary64)) (neg.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) (neg.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 #s(literal -2 binary64) a)) (neg.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 #s(literal 1 binary64) (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) #s(literal -1/2 binary64)) (neg.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (neg.f64 a)) (neg.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))","(-.f64 (/.f64 (pow.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (fma.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) #s(literal -1/2 binary64) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))) (/.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (fma.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) #s(literal -1/2 binary64) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))))","(-.f64 (/.f64 (*.f64 #s(literal -1/8 binary64) (pow.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) #s(literal -1/2 binary64)) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))))) (/.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) #s(literal -1/2 binary64)) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))))))","(-.f64 (/.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(-.f64 (/.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))) (/.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))))","(-.f64 (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(-.f64 (/.f64 (/.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (*.f64 b b) (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (*.f64 #s(literal 0 binary64) (/.f64 #s(literal 1/2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (neg.f64 b)) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (*.f64 #s(literal 0 binary64) (/.f64 #s(literal 1/2 binary64) a)) (/.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (*.f64 #s(literal 0 binary64) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) (/.f64 #s(literal -1/2 binary64) a)))","(-.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) #s(literal -1/2 binary64)) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)))) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) #s(literal -1/2 binary64)) (neg.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))","(*.f64 (neg.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))))","(*.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) (/.f64 #s(literal 1 binary64) (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (neg.f64 b))))","(*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) (pow.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (-.f64 (*.f64 b b) (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (neg.f64 b))))))","(*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)))","(pow.f64 (pow.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 b b) (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) #s(literal 3 binary64))) (fma.f64 (/.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) (/.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) (fma.f64 (/.f64 (*.f64 b b) (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) (/.f64 (*.f64 b b) (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) (*.f64 (/.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) (/.f64 (*.f64 b b) (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (fma.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (neg.f64 b)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (neg.f64 b)) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (neg.f64 b)) (*.f64 #s(literal 0 binary64) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (neg.f64 b))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) (*.f64 #s(literal 0 binary64) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64))) (fma.f64 b b (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 (neg.f64 b) (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)))) (neg.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 (-.f64 (*.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) (*.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) (*.f64 b b))) (*.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b))) (neg.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (neg.f64 b))))","(/.f64 (neg.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b))) (neg.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (-.f64 (*.f64 b b) (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (neg.f64 b))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (neg.f64 b)))","(/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (+.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (-.f64 (*.f64 b b) (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (neg.f64 b)))))","(/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (neg.f64 b)) (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (-.f64 (*.f64 b b) (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (neg.f64 b)))) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) #s(literal -1 binary64)))","(neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))","(fma.f64 (-.f64 #s(literal 0 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (neg.f64 b))","(fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (+.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))) (neg.f64 b))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (neg.f64 b))","(fma.f64 #s(literal -1 binary64) b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1 binary64) (neg.f64 b))","(-.f64 (/.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (neg.f64 b))) (/.f64 (*.f64 b b) (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (neg.f64 b))))","(-.f64 (/.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) (/.f64 (*.f64 b b) (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)))","(-.f64 (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(-.f64 #s(literal 0 binary64) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (neg.f64 b)))","(-.f64 #s(literal 0 binary64) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))","(-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b)","(+.f64 (neg.f64 b) (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(+.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (neg.f64 b))","(*.f64 (-.f64 #s(literal 0 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(*.f64 (-.f64 #s(literal 0 binary64) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (+.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))))","(*.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1 binary64))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 #s(literal 0 binary64) (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (neg.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (+.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))))","(/.f64 (-.f64 #s(literal 0 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (+.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (-.f64 #s(literal 0 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 0 binary64) (+.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))) (-.f64 #s(literal 0 binary64) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)))))","(neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (/.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (+.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (+.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))) (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (+.f64 #s(literal 0 binary64) (+.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))))","(-.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(+.f64 #s(literal 0 binary64) (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 1/4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 1/4 binary64)))","(pow.f64 (exp.f64 (log.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))","(exp.f64 (*.f64 (log.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 1/2 binary64)))","(*.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal 2 binary64)) #s(literal 16 binary64) #s(literal -1 binary64)) b) (pow.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) (pow.f64 b #s(literal -2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal 3 binary64)) #s(literal -64 binary64) #s(literal 1 binary64)) b) (pow.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64)))) #s(literal -1 binary64)))","(*.f64 (*.f64 b (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal 2 binary64)) #s(literal 16 binary64) #s(literal -1 binary64))) (pow.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) (pow.f64 b #s(literal -2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 b (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal 3 binary64)) #s(literal -64 binary64) #s(literal 1 binary64))) (pow.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b)","(*.f64 b (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64)) b) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 1 binary64) b) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64)) b) (*.f64 (*.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64)) b) (-.f64 (*.f64 (*.f64 #s(literal 1 binary64) b) (*.f64 #s(literal 1 binary64) b)) (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64)) b) (*.f64 #s(literal 1 binary64) b)))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1 binary64) b) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64)) b) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal 1 binary64) b) (*.f64 #s(literal 1 binary64) b) (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64)) b) (*.f64 (*.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64)) b)) (*.f64 (*.f64 #s(literal 1 binary64) b) (*.f64 (*.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64)) b)))))","(/.f64 (+.f64 (pow.f64 (*.f64 b (*.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 b #s(literal 1 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 b (*.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64))) (*.f64 b (*.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64))) (-.f64 (*.f64 (*.f64 b #s(literal 1 binary64)) (*.f64 b #s(literal 1 binary64))) (*.f64 (*.f64 b (*.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64))) (*.f64 b #s(literal 1 binary64))))))","(/.f64 (+.f64 (pow.f64 (*.f64 b #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 b (*.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64))) #s(literal 3 binary64))) (fma.f64 (*.f64 b #s(literal 1 binary64)) (*.f64 b #s(literal 1 binary64)) (-.f64 (*.f64 (*.f64 b (*.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64))) (*.f64 b (*.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64)))) (*.f64 (*.f64 b #s(literal 1 binary64)) (*.f64 b (*.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64)))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal 2 binary64)) #s(literal 16 binary64) #s(literal -1 binary64)) b)) (neg.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) (pow.f64 b #s(literal -2 binary64)) #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal 3 binary64)) #s(literal -64 binary64) #s(literal 1 binary64)) b)) (neg.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64))))))","(/.f64 (neg.f64 (*.f64 b (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal 2 binary64)) #s(literal 16 binary64) #s(literal -1 binary64)))) (neg.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) (pow.f64 b #s(literal -2 binary64)) #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 b (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal 3 binary64)) #s(literal -64 binary64) #s(literal 1 binary64)))) (neg.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64))))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal 2 binary64)) #s(literal 16 binary64) #s(literal -1 binary64)) b) (fma.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) (pow.f64 b #s(literal -2 binary64)) #s(literal -1 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal 3 binary64)) #s(literal -64 binary64) #s(literal 1 binary64)) b) (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64)))))","(/.f64 (*.f64 b (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal 2 binary64)) #s(literal 16 binary64) #s(literal -1 binary64))) (fma.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) (pow.f64 b #s(literal -2 binary64)) #s(literal -1 binary64)))","(/.f64 (*.f64 b (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal 3 binary64)) #s(literal -64 binary64) #s(literal 1 binary64))) (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) (pow.f64 b #s(literal -2 binary64)) #s(literal -1 binary64)) (*.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal 2 binary64)) #s(literal 16 binary64) #s(literal -1 binary64)) b)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64)))) (*.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal 3 binary64)) #s(literal -64 binary64) #s(literal 1 binary64)) b)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) (pow.f64 b #s(literal -2 binary64)) #s(literal -1 binary64)) (*.f64 b (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal 2 binary64)) #s(literal 16 binary64) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64)))) (*.f64 b (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal 3 binary64)) #s(literal -64 binary64) #s(literal 1 binary64)))))","(fma.f64 (*.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64)) b (*.f64 #s(literal 1 binary64) b))","(fma.f64 #s(literal 1 binary64) b (*.f64 (*.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64)) b))","(fma.f64 b (*.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64)) (*.f64 b #s(literal 1 binary64)))","(fma.f64 b #s(literal 1 binary64) (*.f64 b (*.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64))))","(+.f64 (*.f64 (*.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64)) b) (*.f64 #s(literal 1 binary64) b))","(+.f64 (*.f64 #s(literal 1 binary64) b) (*.f64 (*.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64)) b))","(+.f64 (*.f64 b (*.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64))) (*.f64 b #s(literal 1 binary64)))","(+.f64 (*.f64 b #s(literal 1 binary64)) (*.f64 b (*.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64))))","(*.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal 2 binary64)) #s(literal 16 binary64) #s(literal -1 binary64)) (*.f64 b b)) (pow.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) (pow.f64 b #s(literal -2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal 3 binary64)) #s(literal -64 binary64) #s(literal 1 binary64)) (*.f64 b b)) (pow.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64)))) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)","(*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) (*.f64 b b))","(*.f64 (*.f64 b b) (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)))","(*.f64 b (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal 2 binary64)) #s(literal 16 binary64) #s(literal -1 binary64)) (*.f64 b b))) (neg.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) (pow.f64 b #s(literal -2 binary64)) #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal 3 binary64)) #s(literal -64 binary64) #s(literal 1 binary64)) (*.f64 b b))) (neg.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64))))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal 2 binary64)) #s(literal 16 binary64) #s(literal -1 binary64)) (*.f64 b b)) (fma.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) (pow.f64 b #s(literal -2 binary64)) #s(literal -1 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal 3 binary64)) #s(literal -64 binary64) #s(literal 1 binary64)) (*.f64 b b)) (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) (pow.f64 b #s(literal -2 binary64)) #s(literal -1 binary64)) (*.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal 2 binary64)) #s(literal 16 binary64) #s(literal -1 binary64)) (*.f64 b b))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64)))) (*.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal 3 binary64)) #s(literal -64 binary64) #s(literal 1 binary64)) (*.f64 b b))))","(*.f64 (/.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 (/.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (neg.f64 a)) #s(literal -1/2 binary64))","(*.f64 (/.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) #s(literal 2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) a))","(*.f64 (/.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) #s(literal -1 binary64)) (/.f64 (pow.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b) #s(literal -1 binary64)) (*.f64 #s(literal -2 binary64) a)))","(*.f64 (/.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) (neg.f64 a)) (/.f64 (pow.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b) #s(literal -1 binary64)) #s(literal -2 binary64)))","(*.f64 (/.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) #s(literal 2 binary64)) (/.f64 (pow.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) #s(literal -2 binary64)) (/.f64 (pow.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b) #s(literal -1 binary64)) (neg.f64 a)))","(*.f64 (/.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) a) (/.f64 (pow.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) #s(literal -1 binary64)) (*.f64 #s(literal -2 binary64) a)))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64))) (neg.f64 a)) (/.f64 (pow.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) #s(literal -1 binary64)) #s(literal -2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64))) #s(literal -2 binary64)) (/.f64 (pow.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) #s(literal -1 binary64)) (neg.f64 a)))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64))) a) (/.f64 (pow.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) #s(literal -2 binary64)))","(*.f64 (/.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) a) #s(literal 1/2 binary64))","(*.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))) (/.f64 #s(literal -1 binary64) a))","(*.f64 (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) a))","(*.f64 (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) #s(literal 1 binary64)) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (pow.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64)))) (pow.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) #s(literal 1/2 binary64))) (/.f64 #s(literal -1 binary64) a))","(*.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) #s(literal -1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b) (neg.f64 a))))","(*.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b) a)))","(*.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64))) #s(literal -1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (neg.f64 a))))","(*.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64))) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64))) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) a)))","(*.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b))))","(*.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 a) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))))))","(*.f64 (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b))))","(*.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))))))","(*.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (/.f64 #s(literal 1 binary64) (*.f64 a (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b))))","(*.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 a (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))))))","(*.f64 (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (*.f64 #s(literal -2 binary64) a)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) #s(literal 2 binary64)))","(*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (neg.f64 a)))","(*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 #s(literal 1 binary64) (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (/.f64 #s(literal 1/2 binary64) a)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))))","(*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) a))","(*.f64 #s(literal 1/2 binary64) (*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))))","(pow.f64 (/.f64 a (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) #s(literal 1/2 binary64))) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) b) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))) #s(literal 3 binary64))) (fma.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) b) (*.f64 (/.f64 #s(literal 1/2 binary64) a) b) (-.f64 (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))))) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) b) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))))))))","(/.f64 (+.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)) (pow.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (/.f64 #s(literal 1/2 binary64) a))) (*.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (/.f64 #s(literal 1/2 binary64) a))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) #s(literal -1/2 binary64))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) #s(literal 1 binary64))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))) (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b)))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64))))) (neg.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) #s(literal 1/2 binary64)))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b) a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64))) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64))) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) a)))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))) (neg.f64 (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64))))) (neg.f64 (*.f64 (neg.f64 a) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))))))","(/.f64 (neg.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))) (neg.f64 (*.f64 a (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64))))) (neg.f64 (*.f64 a (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))))))","(/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) (/.f64 #s(literal 1/2 binary64) a)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))) (neg.f64 a))","(/.f64 (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) #s(literal -1/2 binary64)) (neg.f64 a))","(/.f64 (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64)))) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))))","(/.f64 (neg.f64 (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) #s(literal 1/2 binary64))) (neg.f64 a))","(/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) #s(literal -1/2 binary64)) (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) #s(literal 1 binary64)) (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) #s(literal 1/2 binary64)) (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b) a))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64))) #s(literal -1/2 binary64)) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64))) #s(literal 1/2 binary64)) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) a))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b)))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64)))) (*.f64 (neg.f64 a) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (*.f64 a (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b)))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64)))) (*.f64 a (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))))","(/.f64 (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) #s(literal 1/2 binary64)) a)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) #s(literal 1/2 binary64)))))","(/.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b) (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64))) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 a) (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b) (neg.f64 a)) (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b) a) (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (neg.f64 a)) (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64))) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) a) (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64))) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b)) (*.f64 #s(literal -1/2 binary64) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 a) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))) (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b)) (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))) (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b)) (*.f64 #s(literal 1/2 binary64) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))) (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) #s(literal 1/2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 a (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) #s(literal 1/2 binary64))))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 b #s(literal -2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 (/.f64 b a) #s(literal 1/2 binary64) (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 (*.f64 b #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 b #s(literal 1/2 binary64)) (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 #s(literal -1/2 binary64) (/.f64 b (neg.f64 a)) (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 (neg.f64 b) (/.f64 #s(literal -1/2 binary64) a) (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 #s(literal 1 binary64) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) b (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))))","(fma.f64 #s(literal 1/2 binary64) (/.f64 b a) (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 b (/.f64 #s(literal 1/2 binary64) a) (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (/.f64 #s(literal 1/2 binary64) a)))","(-.f64 (/.f64 (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b)) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b)) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) (*.f64 #s(literal 2 binary64) a)))","(+.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) b) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))))","(+.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (/.f64 #s(literal 1/2 binary64) a)))","(*.f64 a #s(literal -4 binary64))","(*.f64 #s(literal -4 binary64) a)","(*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))","(*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))","(pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) #s(literal 2 binary64))","(pow.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) #s(literal 2 binary64))","(pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 1 binary64))","#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))","(sqrt.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 2 binary64)))","(fabs.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))","(exp.f64 (*.f64 (log.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))) #s(literal 1 binary64)))","(exp.f64 (log.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b))))","(*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -1 binary64)) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(*.f64 #s(literal -1 binary64) (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(*.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))","(*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 1 binary64))","(pow.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal 2 binary64))","(pow.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 2 binary64))","#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))","(neg.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(neg.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(sqrt.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)))","(exp.f64 (fma.f64 (log.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (log.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 1/2 binary64))))","(exp.f64 (*.f64 (log.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) #s(literal 2 binary64)))","(*.f64 (sqrt.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (sqrt.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))))","(*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 1/4 binary64)))","(pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) #s(literal 1 binary64))","(pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))","(fabs.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))","(exp.f64 (log.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))))","(*.f64 (neg.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b))))","(*.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))))))","(*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) (/.f64 #s(literal 1 binary64) (-.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))))))","(*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) (pow.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 b b (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) (*.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))))))))","(*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64))) (pow.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b)) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b)) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b)) (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b)) (fma.f64 (/.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b)) (/.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b)) (*.f64 (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b)) (/.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))) (fma.f64 (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))) (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))) (*.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))) (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (+.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) (-.f64 (*.f64 b b) (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) b))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))) (neg.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))))))","(/.f64 (-.f64 (*.f64 (*.f64 b b) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b)) (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b)))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64)))) (*.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (neg.f64 (-.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))))))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b)))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b b (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) (*.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))))","(/.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) (-.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))))","(/.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64))) (fma.f64 b b (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) (*.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64))) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b b (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) (*.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))))) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b)","(-.f64 (/.f64 (*.f64 b b) (-.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))))) (/.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) (-.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))))))","(-.f64 (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b)) (/.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b)))","(-.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))) (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)) #s(literal 3/2 binary64)) (fma.f64 b b (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))))","(-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b))))","(+.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))) b)","(+.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 (/.f64 (/.f64 c b) b) a) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))))","(*.f64 (/.f64 #s(literal -1 binary64) b) (/.f64 c (neg.f64 b)))","(*.f64 (*.f64 c #s(literal 1 binary64)) (pow.f64 b #s(literal -2 binary64)))","(*.f64 (neg.f64 (neg.f64 c)) (pow.f64 b #s(literal -2 binary64)))","(*.f64 (neg.f64 (/.f64 c b)) (pow.f64 (neg.f64 b) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (*.f64 b b) c))))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (/.f64 c b))","(*.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 (pow.f64 c #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 b #s(literal -2 binary64)) c)","(*.f64 (neg.f64 c) (pow.f64 (*.f64 (neg.f64 b) b) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 c b) b))","(*.f64 (/.f64 c b) (pow.f64 b #s(literal -1 binary64)))","(*.f64 c (pow.f64 b #s(literal -2 binary64)))","(pow.f64 (*.f64 (/.f64 b c) b) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 b b) c) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (/.f64 c b))) (neg.f64 (neg.f64 b)))","(/.f64 (neg.f64 (*.f64 c #s(literal 1 binary64))) (*.f64 (neg.f64 b) b))","(/.f64 (neg.f64 (neg.f64 (neg.f64 c))) (neg.f64 (neg.f64 (*.f64 (neg.f64 b) b))))","(/.f64 (*.f64 c #s(literal 1 binary64)) (*.f64 b b))","(/.f64 (neg.f64 (neg.f64 c)) (neg.f64 (*.f64 (neg.f64 b) b)))","(/.f64 (neg.f64 (/.f64 c b)) (neg.f64 b))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 b b) c)))","(/.f64 (neg.f64 c) (*.f64 (neg.f64 b) b))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 b b) (*.f64 c #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (*.f64 b b) c))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 b b) c))","(/.f64 (/.f64 c b) b)","(/.f64 c (*.f64 b b))","(neg.f64 (*.f64 (neg.f64 c) (pow.f64 b #s(literal -2 binary64))))","(neg.f64 (/.f64 c (*.f64 (neg.f64 b) b)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 b) b)) (/.f64 c (*.f64 (neg.f64 b) b)))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 b b) c)) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 c) #s(literal -1 binary64)) (*.f64 a (pow.f64 b #s(literal -2 binary64))))","(*.f64 (/.f64 a (neg.f64 b)) (/.f64 (neg.f64 c) b))","(*.f64 (/.f64 a #s(literal -1 binary64)) (*.f64 (neg.f64 c) (pow.f64 b #s(literal -2 binary64))))","(*.f64 (*.f64 a (pow.f64 b #s(literal -2 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 c a) b) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (*.f64 (neg.f64 c) a) (pow.f64 (*.f64 (neg.f64 b) b) #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) a) (/.f64 (/.f64 c b) b))","(*.f64 (*.f64 (/.f64 c b) a) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (*.f64 a (neg.f64 c)) (pow.f64 (*.f64 (neg.f64 b) b) #s(literal -1 binary64)))","(*.f64 (*.f64 a (/.f64 c b)) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 c) b) (/.f64 a (neg.f64 b)))","(*.f64 (*.f64 a #s(literal 1 binary64)) (/.f64 (/.f64 c b) b))","(*.f64 (/.f64 a b) (/.f64 c b))","(*.f64 (neg.f64 (*.f64 c a)) (pow.f64 (*.f64 (neg.f64 b) b) #s(literal -1 binary64)))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (/.f64 a (/.f64 b c)))","(*.f64 (pow.f64 b #s(literal -2 binary64)) (/.f64 a (pow.f64 c #s(literal -1 binary64))))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 (/.f64 c b) b) a))","(*.f64 (/.f64 (/.f64 c b) b) a)","(*.f64 (*.f64 c a) (pow.f64 b #s(literal -2 binary64)))","(*.f64 (/.f64 c b) (/.f64 a b))","(*.f64 c (*.f64 a (pow.f64 b #s(literal -2 binary64))))","(*.f64 c (*.f64 (pow.f64 b #s(literal -2 binary64)) a))","(*.f64 a (/.f64 (/.f64 c b) b))","(pow.f64 (*.f64 (/.f64 b a) (/.f64 b c)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 a #s(literal 1 binary64))) (neg.f64 (/.f64 (*.f64 b b) c)))","(/.f64 (neg.f64 (/.f64 (*.f64 c a) b)) (neg.f64 b))","(/.f64 (neg.f64 (*.f64 (neg.f64 c) a)) (neg.f64 (*.f64 (neg.f64 b) b)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) a)) (neg.f64 (/.f64 (*.f64 b b) c)))","(/.f64 (neg.f64 (*.f64 (/.f64 c b) a)) (neg.f64 b))","(/.f64 (neg.f64 (*.f64 a (neg.f64 c))) (neg.f64 (*.f64 (neg.f64 b) b)))","(/.f64 (neg.f64 (*.f64 a (/.f64 c b))) (neg.f64 b))","(/.f64 (neg.f64 (neg.f64 (*.f64 c a))) (neg.f64 (*.f64 (neg.f64 b) b)))","(/.f64 (/.f64 (*.f64 c a) b) b)","(/.f64 (*.f64 (neg.f64 c) a) (*.f64 (neg.f64 b) b))","(/.f64 (*.f64 #s(literal 1 binary64) a) (/.f64 (*.f64 b b) c))","(/.f64 (*.f64 (/.f64 c b) a) b)","(/.f64 (*.f64 a (neg.f64 c)) (*.f64 (neg.f64 b) b))","(/.f64 (*.f64 a (/.f64 c b)) b)","(/.f64 (*.f64 a #s(literal 1 binary64)) (/.f64 (*.f64 b b) c))","(/.f64 (neg.f64 (*.f64 c a)) (*.f64 (neg.f64 b) b))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 b a) (/.f64 b c))))","(/.f64 (neg.f64 a) (neg.f64 (/.f64 (*.f64 b b) c)))","(/.f64 #s(literal 1 binary64) (/.f64 b (/.f64 (*.f64 c a) b)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 b) b) (*.f64 (neg.f64 c) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 b b) c) (*.f64 #s(literal 1 binary64) a)))","(/.f64 #s(literal 1 binary64) (/.f64 b (*.f64 (/.f64 c b) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 b) b) (*.f64 a (neg.f64 c))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 b b) c) (*.f64 a #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 b (*.f64 a (/.f64 c b))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (/.f64 b a) (/.f64 b c)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 b b) c) a))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 b a) (/.f64 b c)))","(/.f64 (*.f64 c a) (*.f64 b b))","(/.f64 a (/.f64 (*.f64 b b) c))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":395.303955078125,"type":"rewrite"},{"compiler":[[52337,4712]],"memory":[[3942224,113297344]],"time":181.26806640625,"type":"eval"},{"alts":[["(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))))","next",41.931286932027966,"binary64"],["(/.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","fresh",45.0750523376403,"binary64"],["(/.f64 (/.f64 (-.f64 (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 b b))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) a))","fresh",49.9919103865146,"binary64"],["(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64))) (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","fresh",62.49017779452867,"binary64"],["(/.f64 (-.f64 (/.f64 (-.f64 #s(literal 0 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (+.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) b) (*.f64 #s(literal 2 binary64) a))","fresh",43.58263199083829,"binary64"],["(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal 1/2 binary64)) a) (*.f64 a (*.f64 b #s(literal 1/2 binary64)))) (*.f64 a a))","fresh",47.18302260811387,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (exp.f64 (log.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) a))","fresh",47.89142653234473,"binary64"],["(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))) (*.f64 #s(literal 2 binary64) a))","next",42.09770324424859,"binary64"],["(/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)))","fresh",43.27873699441694,"binary64"],["(/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a))","done",29.604698306053503,"binary64"],["(/.f64 (+.f64 (sqrt.f64 #s(approx (+ (* (* -4 a) c) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) (*.f64 #s(literal -2 binary64) a))","fresh",40.3895445300286,"binary64"],["(/.f64 (*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))","next",41.06603099685136,"binary64"],["(/.f64 #s(approx (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (*.f64 #s(literal -2 binary64) (/.f64 (*.f64 c a) b))) (*.f64 #s(literal 2 binary64) a))","fresh",48.07729205688405,"binary64"],["(/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (/.f64 c b)) (/.f64 a b) #s(literal -2 binary64)) b)) (*.f64 #s(literal 2 binary64) a))","fresh",42.11509762248876,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) (*.f64 (-.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal -1/2 binary64) a))))","fresh",45.069498201839,"binary64"],["(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","fresh",40.289294269636784,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","fresh",46.68578624324652,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))","done",56.51703465819093,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))))","fresh",46.37294315574114,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (*.f64 (/.f64 (*.f64 a c) b) #s(literal 2 binary64))))","fresh",59.03679273725268,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (*.f64 #s(literal 2 binary64) b)))","fresh",62.43940561905425,"binary64"],["(*.f64 (/.f64 #s(literal -1/2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b))","next",29.676138082230366,"binary64"],["#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (fma.f64 a (/.f64 c b) (neg.f64 b)) a))","fresh",42.06760633561329,"binary64"],["#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (neg.f64 b) a))","fresh",41.931286932027966,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","done",43.03389990877592,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (/.f64 #s(literal -1 binary64) b) c))","fresh",43.08858740877592,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (exp.f64 (*.f64 (log.f64 (/.f64 (neg.f64 b) c)) #s(literal -1 binary64))))","fresh",54.02175174709062,"binary64"],["#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 c b))","done",59.0057137210855,"binary64"],["#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 b a))","next",62.43940561905425,"binary64"],["#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 #s(literal 1 binary64) (/.f64 b c)))","fresh",59.005713721085414,"binary64"],["#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (*.f64 (pow.f64 b #s(literal -1 binary64)) (pow.f64 (pow.f64 c #s(literal -1 binary64)) #s(literal -1 binary64))))","fresh",59.0057137210855,"binary64"],["#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (exp.f64 (*.f64 (log.f64 (/.f64 b c)) #s(literal -1 binary64))))","fresh",61.343120751135174,"binary64"]],"compiler":[[25,17],[28,14],[64,17],[52,23],[42,21],[31,22],[23,18],[26,19],[43,21],[15,12],[22,17],[43,21],[25,19],[30,21],[30,16],[15,12],[21,16],[20,15],[22,17],[24,18],[20,16],[15,12],[27,19],[22,17],[22,17],[23,18],[26,21],[20,15],[20,15],[22,17],[26,19],[24,19],[25,17],[28,14],[64,17],[52,23],[42,21],[31,22],[23,18],[26,19],[43,21],[22,17],[43,21],[25,19],[30,21],[30,16],[15,12],[21,16],[22,17],[24,18],[20,16],[15,12],[27,19],[22,17],[23,18],[26,21],[20,15],[22,17],[26,19],[24,19]],"count":[[1217,32]],"kept":[{"done":[1,1],"fresh":[23,16],"new":[1188,12],"picked":[5,3]}],"memory":[[-470832,59683008]],"min-error":[[5.563757474805276,"binary64"]],"time":52.208984375,"type":"prune"},{"egraph":[[0,8135,368,0.054580825],[7,7905,368,0.01588091],[6,5550,368,0.034724631],[5,2066,368,0.031111107],[4,979,368,0.009070775],[3,540,368,0.004741332],[2,283,369,0.001979514],[1,158,369,0.001213141],[0,83,371,0.00069846],[0,53,384,0.000430759]],"inputs":[["(*.f64 (/.f64 #s(literal -1/2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b))","(/.f64 #s(literal -1/2 binary64) a)","#s(literal -1/2 binary64)","a","(+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b)","(sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))","(fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))","c","(*.f64 a #s(literal -4 binary64))","#s(literal -4 binary64)","(*.f64 b b)","b","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 b a))","(/.f64 b a)","b","a","(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))))","(/.f64 b a)","b","a","#s(literal -1/2 binary64)","#s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(*.f64 #s(literal -1/2 binary64) (/.f64 b a))","(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)))","(neg.f64 b)","b","#s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))","(fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)","(*.f64 #s(literal -2 binary64) c)","#s(literal -2 binary64)","c","(/.f64 a b)","a","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(/.f64 (*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))","(*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a))","(-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b))","#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))","(*.f64 (*.f64 c a) #s(literal -4 binary64))","(*.f64 c a)","c","a","#s(literal -4 binary64)","(*.f64 b b)","b","(/.f64 #s(literal 1/2 binary64) a)","#s(literal 1/2 binary64)","(fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)","#s(literal -1 binary64)","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))"]],"locations":[["(-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b))","cost-diff",0],["(*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a))","cost-diff",0],["(/.f64 (*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))","cost-diff",0],["(fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)","cost-diff",1],["#s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))","cost-diff",0],["(neg.f64 b)","cost-diff",0],["(-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)))","cost-diff",0],["(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))) (*.f64 #s(literal 2 binary64) a))","cost-diff",1],["(*.f64 #s(literal -1/2 binary64) (/.f64 b a))","cost-diff",0],["#s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","cost-diff",0],["(/.f64 b a)","cost-diff",0],["(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))))","cost-diff",0],["(/.f64 b a)","cost-diff",0],["#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 b a))","cost-diff",0],["(sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))","cost-diff",0],["(+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b)","cost-diff",0],["(/.f64 #s(literal -1/2 binary64) a)","cost-diff",0],["(*.f64 (/.f64 #s(literal -1/2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b))","cost-diff",0]],"memory":[[3155120,27420368]],"method":["egg-herbie"],"outputs":[["(*.f64 (/.f64 #s(literal -1/2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b))","(*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (/.f64 #s(literal -1/2 binary64) a))","(/.f64 #s(literal -1/2 binary64) a)","#s(literal -1/2 binary64)","a","(+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b)","(+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)","(sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))","(sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))","(fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))","(fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))","c","(*.f64 a #s(literal -4 binary64))","(*.f64 #s(literal -4 binary64) a)","#s(literal -4 binary64)","(*.f64 b b)","b","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 b a))","(/.f64 b a)","b","a","(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))))","(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))))","(/.f64 b a)","b","a","#s(literal -1/2 binary64)","#s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","#s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(*.f64 #s(literal -1/2 binary64) (/.f64 b a))","(*.f64 (/.f64 b a) #s(literal -1/2 binary64))","(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) b) a) #s(literal -1/2 binary64))","(-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)))","(-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))","(neg.f64 b)","b","#s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))","#s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))","(fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)","(fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)","(*.f64 #s(literal -2 binary64) c)","#s(literal -2 binary64)","c","(/.f64 a b)","a","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(/.f64 (*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))","(*.f64 (/.f64 (/.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) #s(literal 1/2 binary64))","(*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b))","(fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))","#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))","(*.f64 (*.f64 c a) #s(literal -4 binary64))","(*.f64 c a)","c","a","#s(literal -4 binary64)","(*.f64 b b)","b","(/.f64 #s(literal 1/2 binary64) a)","#s(literal 1/2 binary64)","(fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)","(-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","#s(literal -1 binary64)","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":260.615966796875,"type":"simplify"},{"compiler":[[309,50]],"locations":[["(*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a))","accuracy",15.650856620801253],["(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))","accuracy",23.929958470936878],["(-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b))","accuracy",33.466489832689675],["#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))","accuracy",38.497395304021886],["(fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)","accuracy",1.2259109965110457],["(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))) (*.f64 #s(literal 2 binary64) a))","accuracy",4.177692687887851],["(-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)))","accuracy",13.097526183512986],["#s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))","accuracy",42.447424027163294],["(/.f64 b a)","accuracy",0.0],["(*.f64 #s(literal -1/2 binary64) (/.f64 b a))","accuracy",0.00390625],["(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))))","accuracy",17.195135057881043],["#s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","accuracy",42.3373409760011],["(/.f64 b a)","accuracy",0.0],["#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 b a))","accuracy",42.84245937978134],["(*.f64 a #s(literal -4 binary64))","accuracy",0.0],["(*.f64 (/.f64 #s(literal -1/2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b))","accuracy",4.065829133750318],["(+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b)","accuracy",13.097526183512986],["(sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))","accuracy",23.929958470936878]],"memory":[[-7097568,63133600]],"mixsample":[[11.998046875,"adjust",800],[0.005126953125,"ival-sub",4800],[0.525146484375,"ival-mult",1200],[0.02197265625,"ival-sqrt",3200],[0.983642578125,"ival-sqrt",1200],[0.02099609375,"ival-mult",5600],[5.7998046875,"ival-sqrt",0],[0.0810546875,"ival-sub",400],[0.1044921875,"ival-mult",4400],[0.50732421875,"ival-mult",800],[0.078125,"ival-sqrt",2800],[0.00390625,"ival-sub",4400],[0.01318359375,"ival-mult",4800],[0.213134765625,"ival-add",400],[0.02587890625,"ival-sqrt",3600],[0.227783203125,"ival-mult",2400],[0.21484375,"ival-add",2400],[0.574951171875,"ival-sqrt",400],[0.087158203125,"ival-div",2400],[0.3447265625,"ival-add",1200],[0.5478515625,"ival-sqrt",2000],[0.26318359375,"ival-mult",2000],[1.0439453125,"ival-sqrt",800],[0.10009765625,"ival-mult",2800],[0.21826171875,"ival-sqrt",4400],[0.01416015625,"ival-add",4000],[0.037109375,"ival-div",3200],[0.1103515625,"ival-div",2800],[0.049560546875,"ival-sub",2400],[0.436279296875,"ival-div",1200],[0.6044921875,"ival-sqrt",1600],[0.378662109375,"ival-mult",400],[0.393798828125,"ival-add",1600],[0.038330078125,"ival-add",2800],[0.01806640625,"ival-sqrt",6400],[0.23779296875,"ival-true",0],[0.554443359375,"ival-sqrt",2400],[0.01708984375,"ival-div",3600],[0.012939453125,"ival-sqrt",5600],[0.030029296875,"ival-mult",3200],[0.01025390625,"ival-add",4400],[0.1181640625,"ival-sub",1200],[13.56689453125,"ival-div",0],[0.012939453125,"ival-add",4800],[0.06396484375,"ival-sub",1600],[0.26220703125,"ival-div",400],[0.113037109375,"ival-assert",0],[0.504638671875,"ival-div",1600],[7.80078125,"ival-sub",0],[0.06103515625,"ival-sqrt",4800],[12.12451171875,"ival-add",0],[0.02587890625,"ival-mult",3600],[0.165771484375,"ival-sub",800],[0.41259765625,"ival-mult",1600],[1.4912109375,"adjust",2800],[0.244140625,"ival-div",2000],[0.01220703125,"ival-sub",4000],[0.00390625,"ival-add",5600],[0.07568359375,"ival-sub",2000],[0.047119140625,"ival-sqrt",4000],[0.021240234375,"ival-div",5600],[0.126220703125,"ival-add",3200],[0.030029296875,"ival-add",3600],[6.464599609375,"adjust",2000],[33.681640625,"ival-mult",0],[0.29736328125,"ival-add",2000],[0.41064453125,"ival-div",800],[0.284423828125,"ival-add",800],[0.849853515625,"exact",0],[1.1845703125,"ival-neg",0]],"outcomes":[[39.88037109375,1,"valid",67],[56.94677734375,2,"valid",72],[20.429931640625,3,"valid",21],[32.612060546875,0,"valid",96]],"time":195.489990234375,"type":"localize"},{"count":[[21,244]],"inputs":[["(*.f64 (/.f64 #s(literal -1/2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b))","(/.f64 #s(literal -1/2 binary64) a)","(+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b)","(sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 b a))","(/.f64 b a)","(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))))","#s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(*.f64 #s(literal -1/2 binary64) (/.f64 b a))","(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)))","(neg.f64 b)","#s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)","(/.f64 (*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))","(*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a))","(-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b))","(*.f64 a #s(literal -4 binary64))","(fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)","#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))"]],"memory":[[1550304,17321744]],"outputs":[["(* -1 (/ b a))","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/ (+ (* -1 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* -1 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(/ -1/2 a)","(* 2 b)","(+ (* -2 (/ (* a c) b)) (* 2 b))","(+ (* 2 b) (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ (* 2 b) (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(/ c b)","(+ (/ c b) (/ (* a (pow c 2)) (pow b 3)))","(+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b))","(+ (* a (+ (* a (+ (* 1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)) (* 2 (/ (pow c 3) (pow b 5))))) (/ (pow c 2) (pow b 3)))) (/ c b))","(/ b a)","(* -1/2 (/ b a))","(/ (+ (* -1/2 b) (/ (* a c) b)) a)","(/ (+ (* -1/2 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* -1/2 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(* -2 b)","(- (* 2 (/ (* a c) b)) (* 2 b))","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) (* 2 b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) (* 2 b))","(+ b (* -1 b))","(+ b (+ (* -1 b) (* 2 (/ (* a c) b))))","(+ b (+ (* -1 b) (* a (+ (* 2 (/ c b)) (* 2 (/ (* a (pow c 2)) (pow b 3)))))))","(+ b (+ (* -1 b) (* a (+ (* 2 (/ c b)) (* a (+ (* 2 (/ (pow c 2) (pow b 3))) (* 4 (/ (* a (pow c 3)) (pow b 5)))))))))","(* -2 (/ c (+ b (* -1 b))))","(+ (* -2 (/ c (+ b (* -1 b)))) (* 4 (/ (* a (pow c 2)) (* b (pow (+ b (* -1 b)) 2)))))","(+ (* -2 (/ c (+ b (* -1 b)))) (* a (+ (* 2 (* a (+ (* -4 (/ (pow c 3) (* (pow b 2) (pow (+ b (* -1 b)) 3)))) (* 2 (/ (pow c 3) (* (pow b 3) (pow (+ b (* -1 b)) 2))))))) (* 4 (/ (pow c 2) (* b (pow (+ b (* -1 b)) 2)))))))","(+ (* -2 (/ c (+ b (* -1 b)))) (* a (+ (* 4 (/ (pow c 2) (* b (pow (+ b (* -1 b)) 2)))) (* a (+ (* 2 (* a (+ (* -4 (/ (pow c 4) (* (pow b 4) (pow (+ b (* -1 b)) 3)))) (+ (* -2 (/ (* c (+ (* -4 (/ (pow c 3) (* (pow b 2) (pow (+ b (* -1 b)) 3)))) (* 2 (/ (pow c 3) (* (pow b 3) (pow (+ b (* -1 b)) 2)))))) (* b (+ b (* -1 b))))) (* 4 (/ (pow c 4) (* (pow b 5) (pow (+ b (* -1 b)) 2)))))))) (* 2 (+ (* -4 (/ (pow c 3) (* (pow b 2) (pow (+ b (* -1 b)) 3)))) (* 2 (/ (pow c 3) (* (pow b 3) (pow (+ b (* -1 b)) 2)))))))))))","(* -2 c)","(* -4 (* a c))","(* -4 a)","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/2 (/ b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* 1/2 (/ b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (/ b a))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (* 1/2 (/ b a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(* a (+ (* -1 (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(* a (+ (* -1 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (/ b a))))","(* a (+ (* -1 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (/ b a)))))","(* 2 (* (sqrt (/ c a)) (/ 1 (sqrt -4))))","(/ (+ (* 2 (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (* 2 (/ b (pow (sqrt -4) 2)))) a)","(/ (+ (* 2 (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (+ (* 2 (/ b (pow (sqrt -4) 2))) (* 2 (/ (+ (* -1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3)))) (pow a 2))))) a)","(/ (+ (* 2 (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (+ (* 2 (/ b (pow (sqrt -4) 2))) (+ (* 2 (/ (+ (* -1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3)))) (pow a 2))) (* 2 (/ (+ (* -1/2 (/ (* (pow a 2) (pow b 3)) (* c (pow (sqrt -4) 4)))) (* (sqrt (/ a c)) (/ (* b (+ (* -1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3))))) (sqrt -4)))) (pow a 3)))))) a)","(* -2 (/ (* a c) b))","(* a (+ (* -2 (/ c b)) (/ b a)))","(* a (+ (* -4 c) (/ (pow b 2) a)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* -1 (/ b a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (+ b (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (+ b (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(+ (* 1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/2 b) (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* -1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/1024 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (- (/ b a) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b a)))))","(* -1 (* a (+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)))))","(* -1 (* a (+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b (* -1 (/ (+ (* -1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a))) a)))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (/ (+ (* 1/2 b) (* (sqrt (* a c)) (sqrt -1))) a))","(* -1 (/ (+ (* -1 (/ (+ (* -2 (/ (+ (* -1/16 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1))))) a)) (* -1/2 (* a b))) a)) (* (sqrt (* a c)) (sqrt -1))) a))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -2 (/ (+ (* -1/32 (/ (* (pow a 2) (pow b 3)) c)) (* 1/2 (* (sqrt (/ a c)) (* b (* (sqrt -1) (+ (* -1/16 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1)))))))))) a)) (* 2 (+ (* -1/16 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1))))))) a)) (* -1/2 (* a b))) a)) (* (sqrt (* a c)) (sqrt -1))) a))","(* -1 (* a (+ (* -1 (/ b a)) (* 2 (/ c b)))))","(* -1 (* a (+ (* -1 (/ (pow b 2) a)) (* 4 c))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(+ b (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (+ 1 (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (+ 1 (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (+ (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* (pow b 2) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* (pow b 2) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))))))))","(- (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(* -1 b)","(+ b (* -1 (* (sqrt (* a c)) (sqrt -4))))","(+ (* -1 (* (sqrt (* a c)) (sqrt -4))) (* b (+ 1 (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))))))","(+ (* -1 (* (sqrt (* a c)) (sqrt -4))) (* b (+ 1 (* b (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))))))","(+ (* 2 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* 2 (/ b (* a (pow (sqrt -4) 2)))))","(+ (* 2 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* b (+ (* 2 (* b (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))) (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))))) (* 2 (/ 1 (* a (pow (sqrt -4) 2)))))))","(+ (* 2 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* b (+ (* b (+ (* -2 (* b (- (* 1/2 (/ 1 (* (pow a 2) (* c (pow (sqrt -4) 4))))) (* (sqrt (/ 1 (* a c))) (/ (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))) (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))) (sqrt -4)))))) (* 2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))) (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3))))))) (* 2 (/ 1 (* a (pow (sqrt -4) 2)))))))","(/ (+ (* -2 (* a c)) (pow b 2)) b)","(* b (- (/ c (pow b 2)) (/ 1 a)))","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a)))","(* b (+ 2 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(/ (+ c (/ (* a (pow c 2)) (pow b 2))) b)","(/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b)","(/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b)","(* b (- (/ c (pow b 2)) (* 1/2 (/ 1 a))))","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (* 1/2 (/ 1 a))))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (* 1/2 (/ 1 a))))","(* b (- (* 2 (/ (* a c) (pow b 2))) 2))","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* 2 (/ (* a c) b))","(/ (+ (* 2 (* a c)) (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/ (+ (* 2 (* a c)) (+ (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))))) b)","(/ (+ (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* 2 (* a c)) (+ (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4)))))) b)","(* b (- (+ (* 2 (/ (+ (* -1/2 (* a (pow c 2))) (* a (pow c 2))) (pow b 4))) (/ c (pow b 2))) (/ 1 a)))","(* b (- (+ (* 2 (/ (+ (* -1 (* a (* c (+ (* -1/2 (* a (pow c 2))) (* a (pow c 2)))))) (+ (* -1 (* (pow a 2) (pow c 3))) (* 1/8 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* (pow a 2) c))))) (pow b 6))) (+ (* 2 (/ (+ (* -1/2 (* a (pow c 2))) (* a (pow c 2))) (pow b 4))) (/ c (pow b 2)))) (/ 1 a)))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* -1 (/ c b))","(* -1 (/ (+ c (/ (* a (pow c 2)) (pow b 2))) b))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(* -1 (/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(* -1 (/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (* b (- (/ c (pow b 2)) (/ 1 a))))","(* -1 (* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))","(* -1 (* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a))))","(* 1/2 (/ b a))","(* -1 (* b (- (/ c (pow b 2)) (* 1/2 (/ 1 a)))))","(* -1 (* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (* 1/2 (/ 1 a)))))","(* -1 (* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (* 1/2 (/ 1 a)))))","(* -1 (/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b))","(* -1 (/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(* -1 (/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b))","(* -1 (* b (- (* 2 (/ (* a c) (pow b 2))) 2)))","(* -1 (* b (- (+ (* 2 (/ (* a c) (pow b 2))) (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))) 2)))","(* -1 (* b (- (+ (* 2 (/ (* a c) (pow b 2))) (+ (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))))) 2)))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* 2 (/ (+ (* 1/2 (* (pow a 3) (pow c 4))) (* 2 (* (pow a 3) (pow c 4)))) (pow b 6))) (/ (* a (pow c 2)) (pow b 2))))) b))","(* -1 (* b (- (* 2 (/ (* a c) (pow b 2))) 1)))","(+ (* -1 (/ b a)) (/ c b))","(+ (* -1 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(+ (* 2 b) (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ (* 2 b) (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (/ 1 b) (/ (* a c) (pow b 3))))","(* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b)))","(* c (+ (* c (+ (* c (+ (* 1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))) (* 2 (/ (pow a 2) (pow b 5))))) (/ a (pow b 3)))) (/ 1 b)))","(+ (* -1/2 (/ b a)) (/ c b))","(+ (* -1/2 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* -1/2 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) (* 2 b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) (* 2 b))","(+ b (+ (* -1 b) (* c (+ (* 2 (/ a b)) (* 2 (/ (* (pow a 2) c) (pow b 3)))))))","(+ b (+ (* -1 b) (* c (+ (* 2 (/ a b)) (* c (+ (* 2 (/ (pow a 2) (pow b 3))) (* 4 (/ (* (pow a 3) c) (pow b 5)))))))))","(* c (- (* 4 (/ (* a c) (* b (pow (+ b (* -1 b)) 2)))) (* 2 (/ 1 (+ b (* -1 b))))))","(* c (- (* c (+ (* 2 (* c (+ (* -4 (/ (pow a 2) (* (pow b 2) (pow (+ b (* -1 b)) 3)))) (* 2 (/ (pow a 2) (* (pow b 3) (pow (+ b (* -1 b)) 2))))))) (* 4 (/ a (* b (pow (+ b (* -1 b)) 2)))))) (* 2 (/ 1 (+ b (* -1 b))))))","(* c (- (* c (+ (* 4 (/ a (* b (pow (+ b (* -1 b)) 2)))) (* c (+ (* 2 (* c (+ (* -4 (/ (pow a 3) (* (pow b 4) (pow (+ b (* -1 b)) 3)))) (+ (* -2 (/ (* a (+ (* -4 (/ (pow a 2) (* (pow b 2) (pow (+ b (* -1 b)) 3)))) (* 2 (/ (pow a 2) (* (pow b 3) (pow (+ b (* -1 b)) 2)))))) (* b (+ b (* -1 b))))) (* 4 (/ (pow a 3) (* (pow b 5) (pow (+ b (* -1 b)) 2)))))))) (* 2 (+ (* -4 (/ (pow a 2) (* (pow b 2) (pow (+ b (* -1 b)) 3)))) (* 2 (/ (pow a 2) (* (pow b 3) (pow (+ b (* -1 b)) 2)))))))))) (* 2 (/ 1 (+ b (* -1 b))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/2 (/ b (* a c)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* 1/2 (/ b (* a c)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (/ b (* a c))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (* 1/2 (/ b (* a c)))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 7) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(* c (+ (* -1 (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(* c (+ (* -1 (* (sqrt (/ a c)) (sqrt -4))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (/ b c))))","(* c (+ (* -1 (* (sqrt (/ a c)) (sqrt -4))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (/ b c)))))","(- (+ (* -1 (/ (+ (* -2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (pow c 2))) (* 2 (* (sqrt (/ c a)) (/ 1 (sqrt -4))))) (* -2 (/ b (* a (pow (sqrt -4) 2)))))","(- (+ (* -1 (/ (+ (* (sqrt (/ c a)) (/ (* b (+ (* -2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3))))) (sqrt -4))) (/ (* (pow b 3) (pow c 2)) (* (pow a 2) (pow (sqrt -4) 4)))) (pow c 3))) (* 2 (* (sqrt (/ c a)) (/ 1 (sqrt -4))))) (+ (* -2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (pow (sqrt -4) 3)))) (+ (* -2 (/ b (* a (pow (sqrt -4) 2)))) (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (pow (sqrt -4) 3))))))","(* c (+ (* -2 (/ a b)) (/ b c)))","(* c (+ (* -4 a) (/ (pow b 2) c)))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)))))","(* -1 (* c (+ (* -1 (/ b c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (+ b (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (+ b (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1/2 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 1/2 (/ b a))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* 1/2 (/ b a))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1))))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (+ (* -1/1024 (* (sqrt (/ 1 (* (pow a 7) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1)))))))))","(* -1 (* c (- (/ b c) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -2 (* (sqrt (/ a c)) (sqrt -1))) (* -1 (/ b c)))))","(* -1 (* c (+ (* -2 (* (sqrt (/ a c)) (sqrt -1))) (* -1 (/ (+ b (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -2 (* (sqrt (/ a c)) (sqrt -1))) (* -1 (/ (+ b (* -1 (/ (+ (* -1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1)))) (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1))))) c))) c)))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (- (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/4 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) (* -1/2 (/ (* b c) a))) c)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (- (* -1 (/ (- (+ (* -1/16 (/ (* (pow b 3) c) (pow a 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (* b (* (sqrt -1) (+ (* -1/8 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/4 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1)))))))))) (+ (* -1/8 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/4 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1)))))) c)) (* -1/2 (/ (* b c) a))) c)))","(* -1 (* c (+ (* -1 (/ b c)) (* 2 (/ a b)))))","(* -1 (* c (+ (* -1 (/ (pow b 2) c)) (* 4 a))))"]],"series":[[5.52197265625,"((* (/ -1/2 a) (+ (sqrt (+ (* c (* a -4)) (* b b))) b)) (/ -1/2 a) (+ (sqrt (+ (* c (* a -4)) (* b b))) b) (sqrt (+ (* c (* a -4)) (* b b))) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/ b a) (+ (* (/ b a) -1/2) (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a))) (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (* -1/2 (/ b a)) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))) (+ (* -1 (sqrt (+ (* -4 (* c a)) (* b b)))) b) (/ (* (- (+ (* -4 (* c a)) (* b b)) (* b b)) (/ 1/2 a)) (+ (* -1 (sqrt (+ (* -4 (* c a)) (* b b)))) b)) (* (- (+ (* -4 (* c a)) (* b b)) (* b b)) (/ 1/2 a)) (- (+ (* -4 (* c a)) (* b b)) (* b b)) (* a -4) (+ (* (* -2 c) (/ a b)) b) (+ (* -4 (* c a)) (* b b)) (sqrt (+ (* -4 (* c a)) (* b b))))","c","-inf"],[4.045166015625,"((* (/ -1/2 a) (+ (sqrt (+ (* c (* a -4)) (* b b))) b)) (/ -1/2 a) (+ (sqrt (+ (* c (* a -4)) (* b b))) b) (sqrt (+ (* c (* a -4)) (* b b))) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/ b a) (+ (* (/ b a) -1/2) (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a))) (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (* -1/2 (/ b a)) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))) (+ (* -1 (sqrt (+ (* -4 (* c a)) (* b b)))) b) (/ (* (- (+ (* -4 (* c a)) (* b b)) (* b b)) (/ 1/2 a)) (+ (* -1 (sqrt (+ (* -4 (* c a)) (* b b)))) b)) (* (- (+ (* -4 (* c a)) (* b b)) (* b b)) (/ 1/2 a)) (- (+ (* -4 (* c a)) (* b b)) (* b b)) (* a -4) (+ (* (* -2 c) (/ a b)) b) (+ (* -4 (* c a)) (* b b)) (sqrt (+ (* -4 (* c a)) (* b b))))","c","inf"],[3.132080078125,"((* (/ -1/2 a) (+ (sqrt (+ (* c (* a -4)) (* b b))) b)) (/ -1/2 a) (+ (sqrt (+ (* c (* a -4)) (* b b))) b) (sqrt (+ (* c (* a -4)) (* b b))) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/ b a) (+ (* (/ b a) -1/2) (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a))) (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (* -1/2 (/ b a)) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))) (+ (* -1 (sqrt (+ (* -4 (* c a)) (* b b)))) b) (/ (* (- (+ (* -4 (* c a)) (* b b)) (* b b)) (/ 1/2 a)) (+ (* -1 (sqrt (+ (* -4 (* c a)) (* b b)))) b)) (* (- (+ (* -4 (* c a)) (* b b)) (* b b)) (/ 1/2 a)) (- (+ (* -4 (* c a)) (* b b)) (* b b)) (* a -4) (+ (* (* -2 c) (/ a b)) b) (+ (* -4 (* c a)) (* b b)) (sqrt (+ (* -4 (* c a)) (* b b))))","c","0"],[3.89794921875,"((* (/ -1/2 a) (+ (sqrt (+ (* c (* a -4)) (* b b))) b)) (/ -1/2 a) (+ (sqrt (+ (* c (* a -4)) (* b b))) b) (sqrt (+ (* c (* a -4)) (* b b))) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/ b a) (+ (* (/ b a) -1/2) (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a))) (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (* -1/2 (/ b a)) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))) (+ (* -1 (sqrt (+ (* -4 (* c a)) (* b b)))) b) (/ (* (- (+ (* -4 (* c a)) (* b b)) (* b b)) (/ 1/2 a)) (+ (* -1 (sqrt (+ (* -4 (* c a)) (* b b)))) b)) (* (- (+ (* -4 (* c a)) (* b b)) (* b b)) (/ 1/2 a)) (- (+ (* -4 (* c a)) (* b b)) (* b b)) (* a -4) (+ (* (* -2 c) (/ a b)) b) (+ (* -4 (* c a)) (* b b)) (sqrt (+ (* -4 (* c a)) (* b b))))","b","-inf"],[4.4091796875,"((* (/ -1/2 a) (+ (sqrt (+ (* c (* a -4)) (* b b))) b)) (/ -1/2 a) (+ (sqrt (+ (* c (* a -4)) (* b b))) b) (sqrt (+ (* c (* a -4)) (* b b))) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/ b a) (+ (* (/ b a) -1/2) (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a))) (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (* -1/2 (/ b a)) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))) (+ (* -1 (sqrt (+ (* -4 (* c a)) (* b b)))) b) (/ (* (- (+ (* -4 (* c a)) (* b b)) (* b b)) (/ 1/2 a)) (+ (* -1 (sqrt (+ (* -4 (* c a)) (* b b)))) b)) (* (- (+ (* -4 (* c a)) (* b b)) (* b b)) (/ 1/2 a)) (- (+ (* -4 (* c a)) (* b b)) (* b b)) (* a -4) (+ (* (* -2 c) (/ a b)) b) (+ (* -4 (* c a)) (* b b)) (sqrt (+ (* -4 (* c a)) (* b b))))","b","inf"],[4.797119140625,"((* (/ -1/2 a) (+ (sqrt (+ (* c (* a -4)) (* b b))) b)) (/ -1/2 a) (+ (sqrt (+ (* c (* a -4)) (* b b))) b) (sqrt (+ (* c (* a -4)) (* b b))) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/ b a) (+ (* (/ b a) -1/2) (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a))) (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (* -1/2 (/ b a)) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))) (+ (* -1 (sqrt (+ (* -4 (* c a)) (* b b)))) b) (/ (* (- (+ (* -4 (* c a)) (* b b)) (* b b)) (/ 1/2 a)) (+ (* -1 (sqrt (+ (* -4 (* c a)) (* b b)))) b)) (* (- (+ (* -4 (* c a)) (* b b)) (* b b)) (/ 1/2 a)) (- (+ (* -4 (* c a)) (* b b)) (* b b)) (* a -4) (+ (* (* -2 c) (/ a b)) b) (+ (* -4 (* c a)) (* b b)) (sqrt (+ (* -4 (* c a)) (* b b))))","b","0"],[4.55615234375,"((* (/ -1/2 a) (+ (sqrt (+ (* c (* a -4)) (* b b))) b)) (/ -1/2 a) (+ (sqrt (+ (* c (* a -4)) (* b b))) b) (sqrt (+ (* c (* a -4)) (* b b))) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/ b a) (+ (* (/ b a) -1/2) (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a))) (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (* -1/2 (/ b a)) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))) (+ (* -1 (sqrt (+ (* -4 (* c a)) (* b b)))) b) (/ (* (- (+ (* -4 (* c a)) (* b b)) (* b b)) (/ 1/2 a)) (+ (* -1 (sqrt (+ (* -4 (* c a)) (* b b)))) b)) (* (- (+ (* -4 (* c a)) (* b b)) (* b b)) (/ 1/2 a)) (- (+ (* -4 (* c a)) (* b b)) (* b b)) (* a -4) (+ (* (* -2 c) (/ a b)) b) (+ (* -4 (* c a)) (* b b)) (sqrt (+ (* -4 (* c a)) (* b b))))","a","-inf"],[4.76904296875,"((* (/ -1/2 a) (+ (sqrt (+ (* c (* a -4)) (* b b))) b)) (/ -1/2 a) (+ (sqrt (+ (* c (* a -4)) (* b b))) b) (sqrt (+ (* c (* a -4)) (* b b))) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/ b a) (+ (* (/ b a) -1/2) (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a))) (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (* -1/2 (/ b a)) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))) (+ (* -1 (sqrt (+ (* -4 (* c a)) (* b b)))) b) (/ (* (- (+ (* -4 (* c a)) (* b b)) (* b b)) (/ 1/2 a)) (+ (* -1 (sqrt (+ (* -4 (* c a)) (* b b)))) b)) (* (- (+ (* -4 (* c a)) (* b b)) (* b b)) (/ 1/2 a)) (- (+ (* -4 (* c a)) (* b b)) (* b b)) (* a -4) (+ (* (* -2 c) (/ a b)) b) (+ (* -4 (* c a)) (* b b)) (sqrt (+ (* -4 (* c a)) (* b b))))","a","inf"],[4.4609375,"((* (/ -1/2 a) (+ (sqrt (+ (* c (* a -4)) (* b b))) b)) (/ -1/2 a) (+ (sqrt (+ (* c (* a -4)) (* b b))) b) (sqrt (+ (* c (* a -4)) (* b b))) (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/ b a) (+ (* (/ b a) -1/2) (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a))) (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (* -1/2 (/ b a)) (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (neg b) (sqrt (- (* b b) (* 4 (* a c)))) (+ (* -1 (sqrt (+ (* -4 (* c a)) (* b b)))) b) (/ (* (- (+ (* -4 (* c a)) (* b b)) (* b b)) (/ 1/2 a)) (+ (* -1 (sqrt (+ (* -4 (* c a)) (* b b)))) b)) (* (- (+ (* -4 (* c a)) (* b b)) (* b b)) (/ 1/2 a)) (- (+ (* -4 (* c a)) (* b b)) (* b b)) (* a -4) (+ (* (* -2 c) (/ a b)) b) (+ (* -4 (* c a)) (* b b)) (sqrt (+ (* -4 (* c a)) (* b b))))","a","0"]],"time":45.072021484375,"type":"series"},{"count":[[244,243]],"egraph":[[0,8566,6918,0.099021062],[1,3880,7256,0.03287844],[0,1166,7584,0.01513788]],"inputs":[["(* -1 (/ b a))","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/ (+ (* -1 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* -1 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(/ -1/2 a)","(* 2 b)","(+ (* -2 (/ (* a c) b)) (* 2 b))","(+ (* 2 b) (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ (* 2 b) (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(/ c b)","(+ (/ c b) (/ (* a (pow c 2)) (pow b 3)))","(+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b))","(+ (* a (+ (* a (+ (* 1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)) (* 2 (/ (pow c 3) (pow b 5))))) (/ (pow c 2) (pow b 3)))) (/ c b))","(/ b a)","(* -1/2 (/ b a))","(/ (+ (* -1/2 b) (/ (* a c) b)) a)","(/ (+ (* -1/2 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/ (+ (* -1/2 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(* -2 b)","(- (* 2 (/ (* a c) b)) (* 2 b))","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) (* 2 b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) (* 2 b))","(+ b (* -1 b))","(+ b (+ (* -1 b) (* 2 (/ (* a c) b))))","(+ b (+ (* -1 b) (* a (+ (* 2 (/ c b)) (* 2 (/ (* a (pow c 2)) (pow b 3)))))))","(+ b (+ (* -1 b) (* a (+ (* 2 (/ c b)) (* a (+ (* 2 (/ (pow c 2) (pow b 3))) (* 4 (/ (* a (pow c 3)) (pow b 5)))))))))","(* -2 (/ c (+ b (* -1 b))))","(+ (* -2 (/ c (+ b (* -1 b)))) (* 4 (/ (* a (pow c 2)) (* b (pow (+ b (* -1 b)) 2)))))","(+ (* -2 (/ c (+ b (* -1 b)))) (* a (+ (* 2 (* a (+ (* -4 (/ (pow c 3) (* (pow b 2) (pow (+ b (* -1 b)) 3)))) (* 2 (/ (pow c 3) (* (pow b 3) (pow (+ b (* -1 b)) 2))))))) (* 4 (/ (pow c 2) (* b (pow (+ b (* -1 b)) 2)))))))","(+ (* -2 (/ c (+ b (* -1 b)))) (* a (+ (* 4 (/ (pow c 2) (* b (pow (+ b (* -1 b)) 2)))) (* a (+ (* 2 (* a (+ (* -4 (/ (pow c 4) (* (pow b 4) (pow (+ b (* -1 b)) 3)))) (+ (* -2 (/ (* c (+ (* -4 (/ (pow c 3) (* (pow b 2) (pow (+ b (* -1 b)) 3)))) (* 2 (/ (pow c 3) (* (pow b 3) (pow (+ b (* -1 b)) 2)))))) (* b (+ b (* -1 b))))) (* 4 (/ (pow c 4) (* (pow b 5) (pow (+ b (* -1 b)) 2)))))))) (* 2 (+ (* -4 (/ (pow c 3) (* (pow b 2) (pow (+ b (* -1 b)) 3)))) (* 2 (/ (pow c 3) (* (pow b 3) (pow (+ b (* -1 b)) 2)))))))))))","(* -2 c)","(* -4 (* a c))","(* -4 a)","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/2 (/ b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* 1/2 (/ b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (/ b a))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (* 1/2 (/ b a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(* a (+ (* -1 (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(* a (+ (* -1 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (/ b a))))","(* a (+ (* -1 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (/ b a)))))","(* 2 (* (sqrt (/ c a)) (/ 1 (sqrt -4))))","(/ (+ (* 2 (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (* 2 (/ b (pow (sqrt -4) 2)))) a)","(/ (+ (* 2 (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (+ (* 2 (/ b (pow (sqrt -4) 2))) (* 2 (/ (+ (* -1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3)))) (pow a 2))))) a)","(/ (+ (* 2 (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (+ (* 2 (/ b (pow (sqrt -4) 2))) (+ (* 2 (/ (+ (* -1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3)))) (pow a 2))) (* 2 (/ (+ (* -1/2 (/ (* (pow a 2) (pow b 3)) (* c (pow (sqrt -4) 4)))) (* (sqrt (/ a c)) (/ (* b (+ (* -1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3))))) (sqrt -4)))) (pow a 3)))))) a)","(* -2 (/ (* a c) b))","(* a (+ (* -2 (/ c b)) (/ b a)))","(* a (+ (* -4 c) (/ (pow b 2) a)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* -1 (/ b a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (+ b (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (+ b (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(+ (* 1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1/2 b) (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* -1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/1024 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (- (/ b a) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b a)))))","(* -1 (* a (+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)))))","(* -1 (* a (+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b (* -1 (/ (+ (* -1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a))) a)))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (/ (+ (* 1/2 b) (* (sqrt (* a c)) (sqrt -1))) a))","(* -1 (/ (+ (* -1 (/ (+ (* -2 (/ (+ (* -1/16 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1))))) a)) (* -1/2 (* a b))) a)) (* (sqrt (* a c)) (sqrt -1))) a))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -2 (/ (+ (* -1/32 (/ (* (pow a 2) (pow b 3)) c)) (* 1/2 (* (sqrt (/ a c)) (* b (* (sqrt -1) (+ (* -1/16 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1)))))))))) a)) (* 2 (+ (* -1/16 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1))))))) a)) (* -1/2 (* a b))) a)) (* (sqrt (* a c)) (sqrt -1))) a))","(* -1 (* a (+ (* -1 (/ b a)) (* 2 (/ c b)))))","(* -1 (* a (+ (* -1 (/ (pow b 2) a)) (* 4 c))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(+ b (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (+ 1 (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (+ 1 (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (+ (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* (pow b 2) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* (pow b 2) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))))))))","(- (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(* -1 b)","(+ b (* -1 (* (sqrt (* a c)) (sqrt -4))))","(+ (* -1 (* (sqrt (* a c)) (sqrt -4))) (* b (+ 1 (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))))))","(+ (* -1 (* (sqrt (* a c)) (sqrt -4))) (* b (+ 1 (* b (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))))))","(+ (* 2 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* 2 (/ b (* a (pow (sqrt -4) 2)))))","(+ (* 2 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* b (+ (* 2 (* b (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))) (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))))) (* 2 (/ 1 (* a (pow (sqrt -4) 2)))))))","(+ (* 2 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* b (+ (* b (+ (* -2 (* b (- (* 1/2 (/ 1 (* (pow a 2) (* c (pow (sqrt -4) 4))))) (* (sqrt (/ 1 (* a c))) (/ (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))) (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))) (sqrt -4)))))) (* 2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))) (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3))))))) (* 2 (/ 1 (* a (pow (sqrt -4) 2)))))))","(/ (+ (* -2 (* a c)) (pow b 2)) b)","(* b (- (/ c (pow b 2)) (/ 1 a)))","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a)))","(* b (+ 2 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(/ (+ c (/ (* a (pow c 2)) (pow b 2))) b)","(/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b)","(/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b)","(* b (- (/ c (pow b 2)) (* 1/2 (/ 1 a))))","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (* 1/2 (/ 1 a))))","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (* 1/2 (/ 1 a))))","(* b (- (* 2 (/ (* a c) (pow b 2))) 2))","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* 2 (/ (* a c) b))","(/ (+ (* 2 (* a c)) (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/ (+ (* 2 (* a c)) (+ (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))))) b)","(/ (+ (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* 2 (* a c)) (+ (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4)))))) b)","(* b (- (+ (* 2 (/ (+ (* -1/2 (* a (pow c 2))) (* a (pow c 2))) (pow b 4))) (/ c (pow b 2))) (/ 1 a)))","(* b (- (+ (* 2 (/ (+ (* -1 (* a (* c (+ (* -1/2 (* a (pow c 2))) (* a (pow c 2)))))) (+ (* -1 (* (pow a 2) (pow c 3))) (* 1/8 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* (pow a 2) c))))) (pow b 6))) (+ (* 2 (/ (+ (* -1/2 (* a (pow c 2))) (* a (pow c 2))) (pow b 4))) (/ c (pow b 2)))) (/ 1 a)))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* -1 (/ c b))","(* -1 (/ (+ c (/ (* a (pow c 2)) (pow b 2))) b))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(* -1 (/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(* -1 (/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (* b (- (/ c (pow b 2)) (/ 1 a))))","(* -1 (* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))","(* -1 (* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a))))","(* 1/2 (/ b a))","(* -1 (* b (- (/ c (pow b 2)) (* 1/2 (/ 1 a)))))","(* -1 (* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (* 1/2 (/ 1 a)))))","(* -1 (* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (* 1/2 (/ 1 a)))))","(* -1 (/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b))","(* -1 (/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(* -1 (/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b))","(* -1 (* b (- (* 2 (/ (* a c) (pow b 2))) 2)))","(* -1 (* b (- (+ (* 2 (/ (* a c) (pow b 2))) (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))) 2)))","(* -1 (* b (- (+ (* 2 (/ (* a c) (pow b 2))) (+ (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))))) 2)))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* 2 (/ (+ (* 1/2 (* (pow a 3) (pow c 4))) (* 2 (* (pow a 3) (pow c 4)))) (pow b 6))) (/ (* a (pow c 2)) (pow b 2))))) b))","(* -1 (* b (- (* 2 (/ (* a c) (pow b 2))) 1)))","(+ (* -1 (/ b a)) (/ c b))","(+ (* -1 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(+ (* 2 b) (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ (* 2 b) (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (/ 1 b) (/ (* a c) (pow b 3))))","(* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b)))","(* c (+ (* c (+ (* c (+ (* 1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))) (* 2 (/ (pow a 2) (pow b 5))))) (/ a (pow b 3)))) (/ 1 b)))","(+ (* -1/2 (/ b a)) (/ c b))","(+ (* -1/2 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(+ (* -1/2 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) (* 2 b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) (* 2 b))","(+ b (+ (* -1 b) (* c (+ (* 2 (/ a b)) (* 2 (/ (* (pow a 2) c) (pow b 3)))))))","(+ b (+ (* -1 b) (* c (+ (* 2 (/ a b)) (* c (+ (* 2 (/ (pow a 2) (pow b 3))) (* 4 (/ (* (pow a 3) c) (pow b 5)))))))))","(* c (- (* 4 (/ (* a c) (* b (pow (+ b (* -1 b)) 2)))) (* 2 (/ 1 (+ b (* -1 b))))))","(* c (- (* c (+ (* 2 (* c (+ (* -4 (/ (pow a 2) (* (pow b 2) (pow (+ b (* -1 b)) 3)))) (* 2 (/ (pow a 2) (* (pow b 3) (pow (+ b (* -1 b)) 2))))))) (* 4 (/ a (* b (pow (+ b (* -1 b)) 2)))))) (* 2 (/ 1 (+ b (* -1 b))))))","(* c (- (* c (+ (* 4 (/ a (* b (pow (+ b (* -1 b)) 2)))) (* c (+ (* 2 (* c (+ (* -4 (/ (pow a 3) (* (pow b 4) (pow (+ b (* -1 b)) 3)))) (+ (* -2 (/ (* a (+ (* -4 (/ (pow a 2) (* (pow b 2) (pow (+ b (* -1 b)) 3)))) (* 2 (/ (pow a 2) (* (pow b 3) (pow (+ b (* -1 b)) 2)))))) (* b (+ b (* -1 b))))) (* 4 (/ (pow a 3) (* (pow b 5) (pow (+ b (* -1 b)) 2)))))))) (* 2 (+ (* -4 (/ (pow a 2) (* (pow b 2) (pow (+ b (* -1 b)) 3)))) (* 2 (/ (pow a 2) (* (pow b 3) (pow (+ b (* -1 b)) 2)))))))))) (* 2 (/ 1 (+ b (* -1 b))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/2 (/ b (* a c)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* 1/2 (/ b (* a c)))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (/ b (* a c))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (* 1/2 (/ b (* a c)))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 7) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(* c (+ (* -1 (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(* c (+ (* -1 (* (sqrt (/ a c)) (sqrt -4))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (/ b c))))","(* c (+ (* -1 (* (sqrt (/ a c)) (sqrt -4))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (/ b c)))))","(- (+ (* -1 (/ (+ (* -2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (pow c 2))) (* 2 (* (sqrt (/ c a)) (/ 1 (sqrt -4))))) (* -2 (/ b (* a (pow (sqrt -4) 2)))))","(- (+ (* -1 (/ (+ (* (sqrt (/ c a)) (/ (* b (+ (* -2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3))))) (sqrt -4))) (/ (* (pow b 3) (pow c 2)) (* (pow a 2) (pow (sqrt -4) 4)))) (pow c 3))) (* 2 (* (sqrt (/ c a)) (/ 1 (sqrt -4))))) (+ (* -2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (pow (sqrt -4) 3)))) (+ (* -2 (/ b (* a (pow (sqrt -4) 2)))) (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (pow (sqrt -4) 3))))))","(* c (+ (* -2 (/ a b)) (/ b c)))","(* c (+ (* -4 a) (/ (pow b 2) c)))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)))))","(* -1 (* c (+ (* -1 (/ b c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (+ b (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (+ b (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1/2 (/ b (* a c))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 1/2 (/ b a))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* 1/2 (/ b a))) c)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1))))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (+ (* -1/1024 (* (sqrt (/ 1 (* (pow a 7) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1)))))))))","(* -1 (* c (- (/ b c) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -2 (* (sqrt (/ a c)) (sqrt -1))) (* -1 (/ b c)))))","(* -1 (* c (+ (* -2 (* (sqrt (/ a c)) (sqrt -1))) (* -1 (/ (+ b (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)))))","(* -1 (* c (+ (* -2 (* (sqrt (/ a c)) (sqrt -1))) (* -1 (/ (+ b (* -1 (/ (+ (* -1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1)))) (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1))))) c))) c)))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (- (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/4 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) (* -1/2 (/ (* b c) a))) c)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (- (* -1 (/ (- (+ (* -1/16 (/ (* (pow b 3) c) (pow a 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (* b (* (sqrt -1) (+ (* -1/8 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/4 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1)))))))))) (+ (* -1/8 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/4 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1)))))) c)) (* -1/2 (/ (* b c) a))) c)))","(* -1 (* c (+ (* -1 (/ b c)) (* 2 (/ a b)))))","(* -1 (* c (+ (* -1 (/ (pow b 2) c)) (* 4 a))))"]],"memory":[[5270480,59021328]],"method":["egg-herbie"],"outputs":[["(* -1 (/ b a))","(/.f64 (neg.f64 b) a)","(/ (+ (* -1 b) (/ (* a c) b)) a)","(/.f64 (fma.f64 a (/.f64 c b) (neg.f64 b)) a)","(/ (+ (* -1 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/.f64 (fma.f64 (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)) a (neg.f64 b)) a)","(/ (+ (* -1 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) (pow.f64 b #s(literal 5 binary64))) #s(literal 2 binary64) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64)))) a (/.f64 c b)) a (neg.f64 b)) a)","(/ -1/2 a)","(/.f64 #s(literal -1/2 binary64) a)","(* 2 b)","(*.f64 #s(literal 2 binary64) b)","(+ (* -2 (/ (* a c) b)) (* 2 b))","(fma.f64 #s(literal -2 binary64) (/.f64 (*.f64 c a) b) (*.f64 #s(literal 2 binary64) b))","(+ (* 2 b) (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(fma.f64 (*.f64 #s(literal -2 binary64) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b))) a (*.f64 #s(literal 2 binary64) b))","(+ (* 2 b) (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 (*.f64 #s(literal -4 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)) (pow.f64 b #s(literal 5 binary64)))) a (*.f64 #s(literal -2 binary64) (/.f64 c b))) a (*.f64 #s(literal 2 binary64) b))","b","(+ b (* -2 (/ (* a c) b)))","(fma.f64 #s(literal -2 binary64) (/.f64 (*.f64 c a) b) b)","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(fma.f64 (*.f64 #s(literal -2 binary64) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b))) a b)","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal -2 binary64) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 (*.f64 #s(literal -4 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)) (pow.f64 b #s(literal 5 binary64)))) a (*.f64 #s(literal -2 binary64) (/.f64 c b))) a b)","(/ c b)","(/.f64 c b)","(+ (/ c b) (/ (* a (pow c 2)) (pow b 3)))","(fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b))","(+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b))","(fma.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) (pow.f64 b #s(literal 5 binary64))) #s(literal 2 binary64) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64)))) a (/.f64 c b))","(+ (* a (+ (* a (+ (* 1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)) (* 2 (/ (pow c 3) (pow b 5))))) (/ (pow c 2) (pow b 3)))) (/ c b))","(fma.f64 (fma.f64 (fma.f64 (*.f64 a (/.f64 (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 20 binary64)) b)) #s(literal 1/4 binary64) (/.f64 (*.f64 #s(literal 2 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 5 binary64)))) a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64)))) a (/.f64 c b))","(/ b a)","(/.f64 b a)","(* -1/2 (/ b a))","(*.f64 (/.f64 b a) #s(literal -1/2 binary64))","(/ (+ (* -1/2 b) (/ (* a c) b)) a)","(/.f64 (fma.f64 #s(literal -1/2 binary64) b (/.f64 (*.f64 c a) b)) a)","(/ (+ (* -1/2 b) (* a (+ (/ c b) (/ (* a (pow c 2)) (pow b 3))))) a)","(/.f64 (fma.f64 (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)) a (*.f64 #s(literal -1/2 binary64) b)) a)","(/ (+ (* -1/2 b) (* a (+ (* a (+ (* 2 (/ (* a (pow c 3)) (pow b 5))) (/ (pow c 2) (pow b 3)))) (/ c b)))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) (pow.f64 b #s(literal 5 binary64))) #s(literal 2 binary64) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64)))) a (/.f64 c b)) a (*.f64 #s(literal -1/2 binary64) b)) a)","(* -2 b)","(*.f64 #s(literal -2 binary64) b)","(- (* 2 (/ (* a c) b)) (* 2 b))","(*.f64 #s(literal 2 binary64) (fma.f64 a (/.f64 c b) (neg.f64 b)))","(- (* a (- (* 2 (/ (* a (pow c 2)) (pow b 3))) (* -2 (/ c b)))) (* 2 b))","(fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b))) a (*.f64 #s(literal -2 binary64) b))","(- (* a (- (* a (- (* 4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))) (* -2 (/ c b)))) (* 2 b))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64) (/.f64 (*.f64 #s(literal 4 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)) (pow.f64 b #s(literal 5 binary64)))) a (*.f64 #s(literal 2 binary64) (/.f64 c b))) a (*.f64 #s(literal -2 binary64) b))","(+ b (* -1 b))","#s(literal 0 binary64)","(+ b (+ (* -1 b) (* 2 (/ (* a c) b))))","(+.f64 #s(literal 0 binary64) (*.f64 #s(literal 2 binary64) (/.f64 (*.f64 c a) b)))","(+ b (+ (* -1 b) (* a (+ (* 2 (/ c b)) (* 2 (/ (* a (pow c 2)) (pow b 3)))))))","(+.f64 #s(literal 0 binary64) (*.f64 (*.f64 #s(literal 2 binary64) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b))) a))","(+ b (+ (* -1 b) (* a (+ (* 2 (/ c b)) (* a (+ (* 2 (/ (pow c 2) (pow b 3))) (* 4 (/ (* a (pow c 3)) (pow b 5)))))))))","(+.f64 #s(literal 0 binary64) (*.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64) (/.f64 (*.f64 #s(literal 4 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)) (pow.f64 b #s(literal 5 binary64)))) a (*.f64 #s(literal 2 binary64) (/.f64 c b))) a))","(* -2 (/ c (+ b (* -1 b))))","(*.f64 (/.f64 c #s(literal 0 binary64)) #s(literal -2 binary64))","(+ (* -2 (/ c (+ b (* -1 b)))) (* 4 (/ (* a (pow c 2)) (* b (pow (+ b (* -1 b)) 2)))))","(fma.f64 (/.f64 c #s(literal 0 binary64)) #s(literal -2 binary64) (*.f64 (/.f64 (*.f64 (*.f64 c c) a) #s(literal 0 binary64)) #s(literal 4 binary64)))","(+ (* -2 (/ c (+ b (* -1 b)))) (* a (+ (* 2 (* a (+ (* -4 (/ (pow c 3) (* (pow b 2) (pow (+ b (* -1 b)) 3)))) (* 2 (/ (pow c 3) (* (pow b 3) (pow (+ b (* -1 b)) 2))))))) (* 4 (/ (pow c 2) (* b (pow (+ b (* -1 b)) 2)))))))","(fma.f64 (/.f64 c #s(literal 0 binary64)) #s(literal -2 binary64) (*.f64 (fma.f64 (/.f64 (*.f64 c c) #s(literal 0 binary64)) #s(literal 4 binary64) (*.f64 (*.f64 (fma.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal 0 binary64)) #s(literal 2 binary64) (*.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal 0 binary64)) #s(literal -4 binary64))) a) #s(literal 2 binary64))) a))","(+ (* -2 (/ c (+ b (* -1 b)))) (* a (+ (* 4 (/ (pow c 2) (* b (pow (+ b (* -1 b)) 2)))) (* a (+ (* 2 (* a (+ (* -4 (/ (pow c 4) (* (pow b 4) (pow (+ b (* -1 b)) 3)))) (+ (* -2 (/ (* c (+ (* -4 (/ (pow c 3) (* (pow b 2) (pow (+ b (* -1 b)) 3)))) (* 2 (/ (pow c 3) (* (pow b 3) (pow (+ b (* -1 b)) 2)))))) (* b (+ b (* -1 b))))) (* 4 (/ (pow c 4) (* (pow b 5) (pow (+ b (* -1 b)) 2)))))))) (* 2 (+ (* -4 (/ (pow c 3) (* (pow b 2) (pow (+ b (* -1 b)) 3)))) (* 2 (/ (pow c 3) (* (pow b 3) (pow (+ b (* -1 b)) 2)))))))))))","(fma.f64 (/.f64 c #s(literal 0 binary64)) #s(literal -2 binary64) (*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (fma.f64 (/.f64 #s(literal -4 binary64) (pow.f64 b #s(literal 4 binary64))) (/.f64 (pow.f64 c #s(literal 4 binary64)) #s(literal 0 binary64)) (fma.f64 (/.f64 #s(literal 4 binary64) (pow.f64 b #s(literal 5 binary64))) (/.f64 (pow.f64 c #s(literal 4 binary64)) #s(literal 0 binary64)) (*.f64 (/.f64 (*.f64 (fma.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal 0 binary64)) #s(literal 2 binary64) (*.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal 0 binary64)) #s(literal -4 binary64))) c) #s(literal 0 binary64)) #s(literal -2 binary64)))) a (fma.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal 0 binary64)) #s(literal 2 binary64) (*.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal 0 binary64)) #s(literal -4 binary64))))) a (*.f64 (/.f64 (*.f64 c c) #s(literal 0 binary64)) #s(literal 4 binary64))) a))","(* -2 c)","(*.f64 #s(literal -2 binary64) c)","(* -4 (* a c))","(*.f64 (*.f64 c a) #s(literal -4 binary64))","(* -4 a)","(*.f64 #s(literal -4 binary64) a)","(pow b 2)","(*.f64 b b)","(+ (* -4 (* a c)) (pow b 2))","(fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))","(* -1/2 (* (sqrt (/ c a)) (sqrt -4)))","(*.f64 (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal -1/2 binary64))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/2 (/ b a)))","(*.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4))))))","(fma.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)) (*.f64 (*.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (/ b a)) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(fma.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)) (fma.f64 (*.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (*.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/16 binary64))))","(* (sqrt (* a c)) (sqrt -4))","(*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64)))","(* a (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))","(*.f64 (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)) a)","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(*.f64 (fma.f64 #s(literal -1/8 binary64) (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))) a)","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(*.f64 (fma.f64 #s(literal -1/8 binary64) (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(*.f64 (fma.f64 #s(literal -1/8 binary64) (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) (fma.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))))) a)","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* 1/2 (/ b a)))","(fma.f64 (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal -1/2 binary64) (*.f64 (/.f64 b a) #s(literal 1/2 binary64)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (/ b a))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (fma.f64 (*.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (*.f64 (/.f64 b a) #s(literal 1/2 binary64))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (* 1/2 (/ b a)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (fma.f64 (*.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/16 binary64) (*.f64 (/.f64 b a) #s(literal 1/2 binary64)))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))))","(fma.f64 (*.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal -1/2 binary64)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3))))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (fma.f64 (*.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (*.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/16 binary64))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (fma.f64 (*.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 #s(literal -1/32 binary64) (*.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64))))) (*.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/16 binary64)))))","(* -1 (* (sqrt (* a c)) (sqrt -4)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 c a)))","(* a (- (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a))) a)","(* a (- (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (neg.f64 (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))) a)","(* a (- (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ c a)) (sqrt -4)) (/ b a)))))","(*.f64 (-.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))) a)","(* a (+ (* -1 (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(*.f64 (-.f64 (/.f64 b a) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* a (+ (* -1 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (/ b a))))","(*.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (/.f64 b a))) a)","(* a (+ (* -1 (* (sqrt (/ c a)) (sqrt -4))) (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (/ b a)))))","(*.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 #s(literal 1/8 binary64) (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) (/.f64 b a)))) a)","(* 2 (* (sqrt (/ c a)) (/ 1 (sqrt -4))))","(*.f64 (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64))) #s(literal 2 binary64))","(/ (+ (* 2 (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (* 2 (/ b (pow (sqrt -4) 2)))) a)","(/.f64 (*.f64 #s(literal 2 binary64) (+.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))) a)","(/ (+ (* 2 (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (+ (* 2 (/ b (pow (sqrt -4) 2))) (* 2 (/ (+ (* -1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3)))) (pow a 2))))) a)","(/.f64 (fma.f64 #s(literal 2 binary64) (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c)) (sqrt.f64 #s(literal -4 binary64))) (/.f64 (*.f64 b b) #s(literal -4 binary64))) a) (/.f64 b #s(literal -4 binary64))) (*.f64 (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))) #s(literal 2 binary64))) a)","(/ (+ (* 2 (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (+ (* 2 (/ b (pow (sqrt -4) 2))) (+ (* 2 (/ (+ (* -1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3)))) (pow a 2))) (* 2 (/ (+ (* -1/2 (/ (* (pow a 2) (pow b 3)) (* c (pow (sqrt -4) 4)))) (* (sqrt (/ a c)) (/ (* b (+ (* -1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3))))) (sqrt -4)))) (pow a 3)))))) a)","(/.f64 (*.f64 #s(literal 2 binary64) (+.f64 (+.f64 (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))) (/.f64 b #s(literal -4 binary64))) (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c)) (sqrt.f64 #s(literal -4 binary64))) (/.f64 (*.f64 b b) #s(literal -4 binary64))) a) (/.f64 (fma.f64 (*.f64 b (/.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c)) (sqrt.f64 #s(literal -4 binary64))) (/.f64 (*.f64 b b) #s(literal -4 binary64)))) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 a c)) (*.f64 (/.f64 #s(literal -1/2 binary64) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 4 binary64))) (*.f64 (*.f64 a a) (/.f64 (pow.f64 b #s(literal 3 binary64)) c)))) (pow.f64 a #s(literal 3 binary64)))))) a)","(* -2 (/ (* a c) b))","(*.f64 #s(literal -2 binary64) (/.f64 (*.f64 c a) b))","(* a (+ (* -2 (/ c b)) (/ b a)))","(*.f64 (fma.f64 #s(literal -2 binary64) (/.f64 c b) (/.f64 b a)) a)","(* a (+ (* -4 c) (/ (pow b 2) a)))","(*.f64 (fma.f64 #s(literal -4 binary64) c (/.f64 (*.f64 b b) a)) a)","(* (sqrt (/ c a)) (sqrt -1))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))","(+ (* -1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 #s(literal 1/2 binary64) b)) (neg.f64 a)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* 1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 #s(literal 1/2 binary64) b (/.f64 (fma.f64 (*.f64 #s(literal -1/128 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 (*.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 a c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)))) (neg.f64 a))) (neg.f64 a)))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a))) #s(literal -2 binary64))","(* -1 (* a (+ (* -1 (/ b a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal 2 binary64) (/.f64 (neg.f64 b) a)))","(* -1 (* a (+ (* -1 (/ (+ b (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) b) (neg.f64 a))))","(* -1 (* a (+ (* -1 (/ (+ b (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a))) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 b (/.f64 (fma.f64 (*.f64 #s(literal -1/64 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 a c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)))) a)) (neg.f64 a))))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/64 binary64) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/64 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal 1/512 binary64) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)))))))","(+ (* 1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (*.f64 (/.f64 b a) #s(literal 1/2 binary64)))","(+ (* -1 (/ (+ (* -1/2 b) (* -1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 #s(literal -1/2 binary64) b)) (neg.f64 a)))","(+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) (* -1/2 b)) a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 #s(literal -1/2 binary64) b (/.f64 (fma.f64 (*.f64 #s(literal -1/128 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 (*.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 a c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)))) (neg.f64 a))) (neg.f64 a)))","(+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/8 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))","(+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/128 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/8 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))","(+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/1024 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/128 binary64) (fma.f64 #s(literal 1/1024 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64))))) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/8 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))))","(* 2 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a))) #s(literal 2 binary64))","(* -1 (* a (- (/ b a) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (-.f64 (/.f64 b a) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal 2 binary64))))","(* -1 (* a (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (neg.f64 b)) a) #s(literal -1 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal -2 binary64))))","(* -1 (* a (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 a c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (*.f64 #s(literal 1/64 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))))) (neg.f64 a)) b) a) #s(literal -1 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal -2 binary64))))","(* -1 (* a (+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b a)))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal -2 binary64) (/.f64 (neg.f64 b) a)))","(* -1 (* a (+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) a)))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) b) (neg.f64 a))))","(* -1 (* a (+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b (* -1 (/ (+ (* -1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a))) a)))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 b (/.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 a c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (*.f64 #s(literal 1/64 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))))) a)) (neg.f64 a))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))","(* -1 (/ (+ (* 1/2 b) (* (sqrt (* a c)) (sqrt -1))) a))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a)) (*.f64 #s(literal 1/2 binary64) b)) (neg.f64 a))","(* -1 (/ (+ (* -1 (/ (+ (* -2 (/ (+ (* -1/16 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1))))) a)) (* -1/2 (* a b))) a)) (* (sqrt (* a c)) (sqrt -1))) a))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a)) (/.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c)) (*.f64 b b)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/16 binary64)) a) #s(literal -2 binary64) (*.f64 (*.f64 b a) #s(literal -1/2 binary64))) (neg.f64 a))) (neg.f64 a))","(* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -2 (/ (+ (* -1/32 (/ (* (pow a 2) (pow b 3)) c)) (* 1/2 (* (sqrt (/ a c)) (* b (* (sqrt -1) (+ (* -1/16 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1)))))))))) a)) (* 2 (+ (* -1/16 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1))))))) a)) (* -1/2 (* a b))) a)) (* (sqrt (* a c)) (sqrt -1))) a))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a)) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) a) b (/.f64 (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 a c))) (*.f64 (*.f64 b (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c)) (*.f64 b b)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/16 binary64))) (*.f64 (*.f64 (*.f64 a a) (/.f64 (pow.f64 b #s(literal 3 binary64)) c)) #s(literal -1/32 binary64))) a) #s(literal -2 binary64) (*.f64 (*.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c)) (*.f64 b b)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/16 binary64)) #s(literal 2 binary64))) (neg.f64 a))) (neg.f64 a))) (neg.f64 a))","(* -1 (* a (+ (* -1 (/ b a)) (* 2 (/ c b)))))","(*.f64 (neg.f64 a) (fma.f64 #s(literal 2 binary64) (/.f64 c b) (/.f64 (neg.f64 b) a)))","(* -1 (* a (+ (* -1 (/ (pow b 2) a)) (* 4 c))))","(*.f64 (neg.f64 a) (fma.f64 #s(literal 4 binary64) c (/.f64 (*.f64 (neg.f64 b) b) a)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(fma.f64 (fma.f64 (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/4 binary64) (/.f64 #s(literal -1/2 binary64) a)) b (*.f64 (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal -1/2 binary64)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) (/.f64 b #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/16 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) b (/.f64 #s(literal -1/2 binary64) a)) b (*.f64 (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal -1/2 binary64)))","(+ b (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64)) b)","(+ (* b (+ 1 (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) #s(literal 1/2 binary64) #s(literal 1 binary64)) b (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* b (+ 1 (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) (/.f64 b #s(literal -4 binary64)))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) b #s(literal 1 binary64)) b (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) (/.f64 b #s(literal -4 binary64)))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64))))) (/.f64 (*.f64 b b) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) #s(literal -1/8 binary64))) (*.f64 b b) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(fma.f64 (fma.f64 (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal -1/4 binary64) (/.f64 #s(literal 1/2 binary64) a)) b (*.f64 (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal -1/2 binary64)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (+ (* b (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (* 1/2 (/ 1 a)))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) (/.f64 b #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/16 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) b (/.f64 #s(literal 1/2 binary64) a)) b (*.f64 (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal -1/2 binary64)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* (pow b 2) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) (/.f64 b #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/16 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (*.f64 b b)))","(+ (* -1/2 (* (sqrt (/ c a)) (sqrt -4))) (* (pow b 2) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/32 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64))))) (/.f64 (*.f64 b b) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) #s(literal 1/16 binary64))) (*.f64 b b) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (*.f64 b b) (*.f64 (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal -1/2 binary64)))","(- (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(neg.f64 (fma.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64)) b))","(- (* b (- (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) #s(literal -1/2 binary64) #s(literal -1 binary64)) b (*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 c a))))","(- (* b (- (* b (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) (/.f64 b #s(literal -4 binary64)))) #s(literal 1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/2 binary64))) b #s(literal -1 binary64)) b (*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 c a))))","(* -1 b)","(neg.f64 b)","(+ b (* -1 (* (sqrt (* a c)) (sqrt -4))))","(fma.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 c a)) b)","(+ (* -1 (* (sqrt (* a c)) (sqrt -4))) (* b (+ 1 (* -1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))))))","(fma.f64 (neg.f64 (sqrt.f64 (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (*.f64 (fma.f64 (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) #s(literal -1/2 binary64) #s(literal 1 binary64)) b))","(+ (* -1 (* (sqrt (* a c)) (sqrt -4))) (* b (+ 1 (* b (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) (/.f64 b #s(literal -4 binary64)))) #s(literal 1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/2 binary64))) b #s(literal 1 binary64)) b (*.f64 (neg.f64 (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (*.f64 c a))))","(+ (* 2 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* 2 (/ b (* a (pow (sqrt -4) 2)))))","(fma.f64 (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64))) #s(literal 2 binary64) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(+ (* 2 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* b (+ (* 2 (* b (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))) (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))))) (* 2 (/ 1 (* a (pow (sqrt -4) 2)))))))","(fma.f64 (fma.f64 (*.f64 #s(literal 2 binary64) b) (*.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (/.f64 #s(literal 2 binary64) (*.f64 #s(literal -4 binary64) a))) b (*.f64 (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64))) #s(literal 2 binary64)))","(+ (* 2 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* b (+ (* b (+ (* -2 (* b (- (* 1/2 (/ 1 (* (pow a 2) (* c (pow (sqrt -4) 4))))) (* (sqrt (/ 1 (* a c))) (/ (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))) (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))) (sqrt -4)))))) (* 2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))) (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3))))))) (* 2 (/ 1 (* a (pow (sqrt -4) 2)))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (*.f64 a a) c) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 4 binary64)))) (/.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))))) (sqrt.f64 #s(literal -4 binary64)))) b) #s(literal -2 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) #s(literal 2 binary64))) b (/.f64 #s(literal 2 binary64) (*.f64 #s(literal -4 binary64) a))) b (*.f64 (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64))) #s(literal 2 binary64)))","(/ (+ (* -2 (* a c)) (pow b 2)) b)","(/.f64 (fma.f64 #s(literal -2 binary64) (*.f64 c a) (*.f64 b b)) b)","(* b (- (/ c (pow b 2)) (/ 1 a)))","(*.f64 (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1 binary64) a)) b)","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))","(*.f64 (-.f64 (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (/.f64 c (*.f64 b b))) (/.f64 #s(literal 1 binary64) a)) b)","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a)))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64))) #s(literal 2 binary64) (-.f64 (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (/.f64 c (*.f64 b b))) (/.f64 #s(literal 1 binary64) a))) b)","(* b (+ 2 (* -2 (/ (* a c) (pow b 2)))))","(*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -2 binary64) #s(literal 2 binary64)) b)","(* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(*.f64 (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 a (/.f64 c (*.f64 b b)))) #s(literal 2 binary64)) b)","(* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (+.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64))) #s(literal -4 binary64) (*.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 a (/.f64 c (*.f64 b b)))))) #s(literal 2 binary64)) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -2 binary64) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(fma.f64 (*.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 a (/.f64 c (*.f64 b b))))) b b)","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(fma.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64))) #s(literal -4 binary64) (*.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 a (/.f64 c (*.f64 b b)))))) b b)","(/ (+ c (/ (* a (pow c 2)) (pow b 2))) b)","(/.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c) b)","(/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b)","(/.f64 (+.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c) (*.f64 (/.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64))) b)","(/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b)","(/.f64 (+.f64 (fma.f64 (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (pow.f64 b #s(literal 6 binary64))) (/.f64 #s(literal 20 binary64) a)) #s(literal 1/4 binary64) (fma.f64 (/.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64) (*.f64 (/.f64 (*.f64 c c) b) (/.f64 a b)))) c) b)","(* b (- (/ c (pow b 2)) (* 1/2 (/ 1 a))))","(*.f64 (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a)) b)","(* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (* 1/2 (/ 1 a))))","(*.f64 (-.f64 (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (/.f64 c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) b)","(* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (* 1/2 (/ 1 a))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64))) #s(literal 2 binary64) (-.f64 (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (/.f64 c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))) b)","(* b (- (* 2 (/ (* a c) (pow b 2))) 2))","(*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal 2 binary64) #s(literal -2 binary64)) b)","(* b (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (*.f64 c c)) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64) (neg.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -2 binary64) #s(literal 2 binary64)))) b)","(* b (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64))) #s(literal 4 binary64) #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 a (/.f64 c (*.f64 b b)))))) b)","(* 2 (/ (* a c) b))","(*.f64 #s(literal 2 binary64) (/.f64 (*.f64 c a) b))","(/ (+ (* 2 (* a c)) (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b) (*.f64 c a))) b)","(/ (+ (* 2 (* a c)) (+ (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))))) b)","(/.f64 (fma.f64 #s(literal 2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b) (*.f64 c a)) (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 4 binary64))) #s(literal 4 binary64))) b)","(/ (+ (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* 2 (* a c)) (+ (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4)))))) b)","(/.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) #s(literal 20 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b) (*.f64 c a)) (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 4 binary64))) #s(literal 4 binary64)))) b)","(* b (- (+ (* 2 (/ (+ (* -1/2 (* a (pow c 2))) (* a (pow c 2))) (pow b 4))) (/ c (pow b 2))) (/ 1 a)))","(*.f64 (-.f64 (fma.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 c c) a)) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64) (/.f64 c (*.f64 b b))) (/.f64 #s(literal 1 binary64) a)) b)","(* b (- (+ (* 2 (/ (+ (* -1 (* a (* c (+ (* -1/2 (* a (pow c 2))) (* a (pow c 2)))))) (+ (* -1 (* (pow a 2) (pow c 3))) (* 1/8 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* (pow a 2) c))))) (pow b 6))) (+ (* 2 (/ (+ (* -1/2 (* a (pow c 2))) (* a (pow c 2))) (pow b 4))) (/ c (pow b 2)))) (/ 1 a)))","(*.f64 (fma.f64 #s(literal 2 binary64) (+.f64 (/.f64 (fma.f64 (neg.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 c c) a)) c)) a (fma.f64 (neg.f64 (pow.f64 c #s(literal 3 binary64))) (*.f64 a a) (*.f64 (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (*.f64 a a)) (/.f64 #s(literal 20 binary64) c)) #s(literal 1/8 binary64)))) (pow.f64 b #s(literal 6 binary64))) (/.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 c c) a)) (pow.f64 b #s(literal 4 binary64)))) (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1 binary64) a))) b)","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -4 binary64) #s(literal 1 binary64)) (*.f64 b b))","(* -1 (/ c b))","(/.f64 c (neg.f64 b))","(* -1 (/ (+ c (/ (* a (pow c 2)) (pow b 2))) b))","(/.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c) (neg.f64 b))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2)))) b))","(/.f64 (+.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c) (*.f64 (/.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64))) (neg.f64 b))","(* -1 (/ (+ c (+ (* 1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6)))) (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (/ (* a (pow c 2)) (pow b 2))))) b))","(/.f64 (+.f64 (fma.f64 (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (pow.f64 b #s(literal 6 binary64))) (/.f64 #s(literal 20 binary64) a)) #s(literal 1/4 binary64) (fma.f64 (/.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64) (*.f64 (/.f64 (*.f64 c c) b) (/.f64 a b)))) c) (neg.f64 b))","(* -1 (/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b))","(/.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b) (*.f64 c a))) b)","(* -1 (/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(/.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 4 binary64))) #s(literal -4 binary64) (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b) (*.f64 c a)))) (neg.f64 b))","(* -1 (/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b))","(/.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 4 binary64))) #s(literal -4 binary64) (fma.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b) (*.f64 c a)) (*.f64 (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) #s(literal 20 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1/2 binary64)))) (neg.f64 b))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -2 binary64) #s(literal 1 binary64)) (neg.f64 b))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 a (/.f64 c (*.f64 b b)))) #s(literal 1 binary64)) (neg.f64 b))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(neg.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64))) #s(literal -4 binary64) (*.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 a (/.f64 c (*.f64 b b)))))) b b))","(* -1 (* b (- (/ c (pow b 2)) (/ 1 a))))","(*.f64 (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1 binary64) a)) (neg.f64 b))","(* -1 (* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))","(*.f64 (-.f64 (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (/.f64 c (*.f64 b b))) (/.f64 #s(literal 1 binary64) a)) (neg.f64 b))","(* -1 (* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (/ 1 a))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64))) #s(literal 2 binary64) (-.f64 (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (/.f64 c (*.f64 b b))) (/.f64 #s(literal 1 binary64) a))) (neg.f64 b))","(* 1/2 (/ b a))","(*.f64 (/.f64 b a) #s(literal 1/2 binary64))","(* -1 (* b (- (/ c (pow b 2)) (* 1/2 (/ 1 a)))))","(*.f64 (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a)) (neg.f64 b))","(* -1 (* b (- (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4))) (* 1/2 (/ 1 a)))))","(*.f64 (-.f64 (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (/.f64 c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (neg.f64 b))","(* -1 (* b (- (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (/ c (pow b 2)) (/ (* a (pow c 2)) (pow b 4)))) (* 1/2 (/ 1 a)))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64))) #s(literal 2 binary64) (-.f64 (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (/.f64 c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 b))","(* -1 (/ (- (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -2 (* a c))) b))","(/.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b) (*.f64 c a))) (neg.f64 b))","(* -1 (/ (- (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b))","(/.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 4 binary64))) #s(literal 4 binary64) (*.f64 #s(literal 2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b) (*.f64 c a)))) (neg.f64 b))","(* -1 (/ (- (* 1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6))) (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))))) b))","(/.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) #s(literal 20 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 1/2 binary64) (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 4 binary64))) #s(literal 4 binary64))) (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b) (*.f64 c a)))) (neg.f64 b))","(* -1 (* b (- (* 2 (/ (* a c) (pow b 2))) 2)))","(*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal 2 binary64) #s(literal -2 binary64)) (neg.f64 b))","(* -1 (* b (- (+ (* 2 (/ (* a c) (pow b 2))) (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))) 2)))","(*.f64 (fma.f64 #s(literal 2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 a (/.f64 c (*.f64 b b)))) #s(literal -2 binary64)) (neg.f64 b))","(* -1 (* b (- (+ (* 2 (/ (* a c) (pow b 2))) (+ (* 2 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* 4 (/ (* (pow a 3) (pow c 3)) (pow b 6))))) 2)))","(*.f64 (-.f64 (fma.f64 #s(literal 2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 a (/.f64 c (*.f64 b b)))) (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64))) #s(literal 4 binary64))) #s(literal 2 binary64)) (neg.f64 b))","(* -1 (/ (+ c (+ (* 2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* 2 (/ (+ (* 1/2 (* (pow a 3) (pow c 4))) (* 2 (* (pow a 3) (pow c 4)))) (pow b 6))) (/ (* a (pow c 2)) (pow b 2))))) b))","(/.f64 (+.f64 (fma.f64 #s(literal 2 binary64) (fma.f64 (*.f64 a a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 4 binary64))) #s(literal 5/2 binary64)) (pow.f64 b #s(literal 6 binary64)))) (*.f64 (/.f64 (*.f64 c c) b) (/.f64 a b))) c) (neg.f64 b))","(* -1 (* b (- (* 2 (/ (* a c) (pow b 2))) 1)))","(*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal 2 binary64) #s(literal -1 binary64)) (neg.f64 b))","(+ (* -1 (/ b a)) (/ c b))","(-.f64 (/.f64 c b) (/.f64 b a))","(+ (* -1 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(fma.f64 (fma.f64 a (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) b)) c (/.f64 (neg.f64 b) a))","(+ (* -1 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 5 binary64)))) #s(literal 2 binary64) (/.f64 a (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal 1 binary64) b)) c (/.f64 (neg.f64 b) a))","(+ (* 2 b) (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(fma.f64 (*.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 a b))) c (*.f64 #s(literal 2 binary64) b))","(+ (* 2 b) (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 a a) (pow.f64 b #s(literal 3 binary64))) #s(literal -2 binary64) (/.f64 (*.f64 #s(literal -4 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)) (pow.f64 b #s(literal 5 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c (*.f64 #s(literal 2 binary64) b))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(fma.f64 (*.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 a b))) c b)","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 a a) (pow.f64 b #s(literal 3 binary64))) #s(literal -2 binary64) (/.f64 (*.f64 #s(literal -4 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)) (pow.f64 b #s(literal 5 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c b)","(* c (+ (/ 1 b) (/ (* a c) (pow b 3))))","(*.f64 (fma.f64 a (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) b)) c)","(* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b)))","(*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 5 binary64)))) #s(literal 2 binary64) (/.f64 a (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal 1 binary64) b)) c)","(* c (+ (* c (+ (* c (+ (* 1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))) (* 2 (/ (pow a 2) (pow b 5))))) (/ a (pow b 3)))) (/ 1 b)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 #s(literal 1/4 binary64) b) (/.f64 (*.f64 (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 20 binary64)) c) a) (/.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a)) (pow.f64 b #s(literal 5 binary64)))) c (/.f64 a (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal 1 binary64) b)) c)","(+ (* -1/2 (/ b a)) (/ c b))","(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (/.f64 c b))","(+ (* -1/2 (/ b a)) (* c (+ (/ 1 b) (/ (* a c) (pow b 3)))))","(fma.f64 (fma.f64 a (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) b)) c (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ b a)) (* c (+ (* c (+ (* 2 (/ (* (pow a 2) c) (pow b 5))) (/ a (pow b 3)))) (/ 1 b))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 5 binary64)))) #s(literal 2 binary64) (/.f64 a (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal 1 binary64) b)) c (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(- (* c (- (* 2 (/ (* (pow a 2) c) (pow b 3))) (* -2 (/ a b)))) (* 2 b))","(fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 a b))) c (*.f64 #s(literal -2 binary64) b))","(- (* c (- (* c (- (* 4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))) (* -2 (/ a b)))) (* 2 b))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 a a) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64) (/.f64 (*.f64 #s(literal 4 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)) (pow.f64 b #s(literal 5 binary64)))) c (*.f64 (/.f64 a b) #s(literal 2 binary64))) c (*.f64 #s(literal -2 binary64) b))","(+ b (+ (* -1 b) (* c (+ (* 2 (/ a b)) (* 2 (/ (* (pow a 2) c) (pow b 3)))))))","(+.f64 #s(literal 0 binary64) (*.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 a b))) c))","(+ b (+ (* -1 b) (* c (+ (* 2 (/ a b)) (* c (+ (* 2 (/ (pow a 2) (pow b 3))) (* 4 (/ (* (pow a 3) c) (pow b 5)))))))))","(+.f64 #s(literal 0 binary64) (*.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 a a) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64) (/.f64 (*.f64 #s(literal 4 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)) (pow.f64 b #s(literal 5 binary64)))) c (*.f64 (/.f64 a b) #s(literal 2 binary64))) c))","(* c (- (* 4 (/ (* a c) (* b (pow (+ b (* -1 b)) 2)))) (* 2 (/ 1 (+ b (* -1 b))))))","(*.f64 (fma.f64 (/.f64 (*.f64 c a) #s(literal 0 binary64)) #s(literal 4 binary64) (/.f64 #s(literal -2 binary64) #s(literal 0 binary64))) c)","(* c (- (* c (+ (* 2 (* c (+ (* -4 (/ (pow a 2) (* (pow b 2) (pow (+ b (* -1 b)) 3)))) (* 2 (/ (pow a 2) (* (pow b 3) (pow (+ b (* -1 b)) 2))))))) (* 4 (/ a (* b (pow (+ b (* -1 b)) 2)))))) (* 2 (/ 1 (+ b (* -1 b))))))","(*.f64 (fma.f64 (fma.f64 (/.f64 a #s(literal 0 binary64)) #s(literal 4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) c) (fma.f64 (/.f64 (*.f64 a a) #s(literal 0 binary64)) #s(literal 2 binary64) (*.f64 (/.f64 (*.f64 a a) #s(literal 0 binary64)) #s(literal -4 binary64))))) c (/.f64 #s(literal -2 binary64) #s(literal 0 binary64))) c)","(* c (- (* c (+ (* 4 (/ a (* b (pow (+ b (* -1 b)) 2)))) (* c (+ (* 2 (* c (+ (* -4 (/ (pow a 3) (* (pow b 4) (pow (+ b (* -1 b)) 3)))) (+ (* -2 (/ (* a (+ (* -4 (/ (pow a 2) (* (pow b 2) (pow (+ b (* -1 b)) 3)))) (* 2 (/ (pow a 2) (* (pow b 3) (pow (+ b (* -1 b)) 2)))))) (* b (+ b (* -1 b))))) (* 4 (/ (pow a 3) (* (pow b 5) (pow (+ b (* -1 b)) 2)))))))) (* 2 (+ (* -4 (/ (pow a 2) (* (pow b 2) (pow (+ b (* -1 b)) 3)))) (* 2 (/ (pow a 2) (* (pow b 3) (pow (+ b (* -1 b)) 2)))))))))) (* 2 (/ 1 (+ b (* -1 b))))))","(*.f64 (fma.f64 (fma.f64 (/.f64 a #s(literal 0 binary64)) #s(literal 4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (fma.f64 (/.f64 #s(literal -4 binary64) (pow.f64 b #s(literal 4 binary64))) (/.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 0 binary64)) (fma.f64 (*.f64 a (/.f64 (fma.f64 (/.f64 (*.f64 a a) #s(literal 0 binary64)) #s(literal 2 binary64) (*.f64 (/.f64 (*.f64 a a) #s(literal 0 binary64)) #s(literal -4 binary64))) #s(literal 0 binary64))) #s(literal -2 binary64) (*.f64 (/.f64 #s(literal 4 binary64) (pow.f64 b #s(literal 5 binary64))) (/.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 0 binary64))))) c (fma.f64 (/.f64 (*.f64 a a) #s(literal 0 binary64)) #s(literal 2 binary64) (*.f64 (/.f64 (*.f64 a a) #s(literal 0 binary64)) #s(literal -4 binary64))))) c)) c (/.f64 #s(literal -2 binary64) #s(literal 0 binary64))) c)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/2 (/ b (* a c)))))","(*.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 b a) c))) c)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 b a) c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal -1/4 binary64))) c)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/2 (/ b (* a c))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 b a) c)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) #s(literal 1/16 binary64) (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal -1/4 binary64)))) c)","(* c (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c)) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c)))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))))) c)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* 1/2 (/ b (* a c)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal -1/2 binary64) (*.f64 (/.f64 (/.f64 b a) c) #s(literal 1/2 binary64))) c)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (/ b (* a c))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (sqrt.f64 #s(literal -4 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal -1/4 binary64) (*.f64 (/.f64 (/.f64 b a) c) #s(literal 1/2 binary64)))) c)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (* 1/2 (/ b (* a c)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (sqrt.f64 #s(literal -4 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal -1/4 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) #s(literal 1/16 binary64) (*.f64 (/.f64 (/.f64 b a) c) #s(literal 1/2 binary64))))) c)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (sqrt.f64 #s(literal -4 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal -1/4 binary64))) c)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (sqrt.f64 #s(literal -4 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) #s(literal 1/16 binary64) (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal -1/4 binary64)))) c)","(* c (+ (* -1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 7) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3))))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (sqrt.f64 #s(literal -4 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal -1/4 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 7 binary64)))) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) #s(literal -1/32 binary64) (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) #s(literal 1/16 binary64))))) c)","(* c (- (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c))) c)","(* c (- (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c)))) c)","(* c (- (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* (sqrt (/ a c)) (sqrt -4)) (/ b c)))))","(*.f64 (-.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) #s(literal 1/8 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b c)))) c)","(* c (+ (* -1 (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(*.f64 (-.f64 (/.f64 b c) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))) c)","(* c (+ (* -1 (* (sqrt (/ a c)) (sqrt -4))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (/ b c))))","(*.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -4 binary64)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (/.f64 b c))) c)","(* c (+ (* -1 (* (sqrt (/ a c)) (sqrt -4))) (+ (* -1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (/ b c)))))","(*.f64 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -4 binary64)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) #s(literal 1/8 binary64) (/.f64 b c)))) c)","(- (+ (* -1 (/ (+ (* -2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (pow c 2))) (* 2 (* (sqrt (/ c a)) (/ 1 (sqrt -4))))) (* -2 (/ b (* a (pow (sqrt -4) 2)))))","(fma.f64 (/.f64 #s(literal -1 binary64) c) (/.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) (/.f64 b #s(literal -4 binary64))))) c) (fma.f64 (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64))) #s(literal 2 binary64) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))))","(- (+ (* -1 (/ (+ (* (sqrt (/ c a)) (/ (* b (+ (* -2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3))))) (sqrt -4))) (/ (* (pow b 3) (pow c 2)) (* (pow a 2) (pow (sqrt -4) 4)))) (pow c 3))) (* 2 (* (sqrt (/ c a)) (/ 1 (sqrt -4))))) (+ (* -2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (pow (sqrt -4) 3)))) (+ (* -2 (/ b (* a (pow (sqrt -4) 2)))) (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (pow (sqrt -4) 3))))))","(-.f64 (fma.f64 (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64))) #s(literal 2 binary64) (/.f64 (fma.f64 (*.f64 b (/.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) (/.f64 b #s(literal -4 binary64))))) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 c a)) (*.f64 (/.f64 (*.f64 c c) (*.f64 a a)) (/.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 4 binary64))))) (neg.f64 (pow.f64 c #s(literal 3 binary64))))) (fma.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) (/.f64 (*.f64 b b) #s(literal -4 binary64))) #s(literal -2 binary64) (fma.f64 (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) (/.f64 b #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (/.f64 b a) #s(literal 1/2 binary64)))))","(* c (+ (* -2 (/ a b)) (/ b c)))","(*.f64 (fma.f64 (/.f64 a b) #s(literal -2 binary64) (/.f64 b c)) c)","(* c (+ (* -4 a) (/ (pow b 2) c)))","(*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* 1/2 (/ b (* a c))))))","(*.f64 (neg.f64 c) (-.f64 (*.f64 (/.f64 (/.f64 b a) c) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1/2 (/ b a)) (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) c))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (/.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64))))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (*.f64 #s(literal 1/128 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))))) (neg.f64 c))) c))))","(* -1 (* c (+ (* -1 (/ b c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 a c))) #s(literal 2 binary64) (/.f64 (neg.f64 b) c)))","(* -1 (* c (+ (* -1 (/ (+ b (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) b) (neg.f64 c))))","(* -1 (* c (+ (* -1 (/ (+ b (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c))) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 b (/.f64 (fma.f64 (*.f64 #s(literal -1/64 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 c a))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)))) c)) (neg.f64 c))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) #s(literal -1/64 binary64) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) #s(literal -1/64 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) #s(literal 1/512 binary64) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)))))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1/2 (/ b (* a c))))))","(*.f64 (neg.f64 c) (-.f64 (*.f64 (/.f64 (/.f64 b a) c) #s(literal -1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 1/2 (/ b a))) c)))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (/.f64 b a) #s(literal 1/2 binary64))) c))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1))))) c)) (* 1/2 (/ b a))) c)))))","(*.f64 (neg.f64 c) (neg.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (/.f64 b a) #s(literal 1/2 binary64) (/.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64))))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (*.f64 #s(literal 1/128 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))))) (neg.f64 c))) c))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))))))","(*.f64 (neg.f64 c) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b))) #s(literal -1/8 binary64))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1))))))))","(*.f64 (neg.f64 c) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) #s(literal 1/128 binary64) (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b))) #s(literal -1/8 binary64)))))","(* -1 (* c (+ (* -1 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (+ (* -1/1024 (* (sqrt (/ 1 (* (pow a 7) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1)))))))))","(*.f64 (neg.f64 c) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 7 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) #s(literal -1/1024 binary64) (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) #s(literal 1/128 binary64))))))","(* -1 (* c (- (/ b c) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (-.f64 (/.f64 b c) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 a c))) #s(literal 2 binary64))))","(* -1 (* c (- (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (neg.f64 b)) c) #s(literal -1 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 a c))) #s(literal -2 binary64))))","(* -1 (* c (- (* -1 (/ (- (* -1 (/ (- (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (neg.f64 c) (fma.f64 (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 c a))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (*.f64 #s(literal 1/64 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))))) (neg.f64 c)) b) c) #s(literal -1 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 a c))) #s(literal -2 binary64))))","(* -1 (* c (+ (* -2 (* (sqrt (/ a c)) (sqrt -1))) (* -1 (/ b c)))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 a c))) #s(literal -2 binary64) (/.f64 (neg.f64 b) c)))","(* -1 (* c (+ (* -2 (* (sqrt (/ a c)) (sqrt -1))) (* -1 (/ (+ b (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1))))) c)))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) b) (neg.f64 c))))","(* -1 (* c (+ (* -2 (* (sqrt (/ a c)) (sqrt -1))) (* -1 (/ (+ b (* -1 (/ (+ (* -1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1)))) (* 1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1))))) c))) c)))))","(*.f64 (neg.f64 c) (fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 b (/.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 c a))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (*.f64 #s(literal 1/64 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))))) c)) (neg.f64 c))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(-.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (- (+ (* -1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/4 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) (* -1/2 (/ (* b c) a))) c)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b b)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/8 binary64) (*.f64 (*.f64 b (/.f64 c a)) #s(literal 1/2 binary64))) c)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (- (* -1 (/ (- (+ (* -1/16 (/ (* (pow b 3) c) (pow a 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (* b (* (sqrt -1) (+ (* -1/8 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/4 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1)))))))))) (+ (* -1/8 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/4 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1)))))) c)) (* -1/2 (/ (* b c) a))) c)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 #s(literal -1/16 binary64) a) (/.f64 (*.f64 (pow.f64 b #s(literal 3 binary64)) c) a) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 (*.f64 b (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b))) #s(literal 1/8 binary64))) (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b))) #s(literal -1/8 binary64)))) c) #s(literal -1 binary64) (*.f64 (*.f64 b (/.f64 c a)) #s(literal 1/2 binary64))) c)))","(* -1 (* c (+ (* -1 (/ b c)) (* 2 (/ a b)))))","(*.f64 (neg.f64 c) (fma.f64 (/.f64 a b) #s(literal 2 binary64) (/.f64 (neg.f64 b) c)))","(* -1 (* c (+ (* -1 (/ (pow b 2) c)) (* 4 a))))","(*.f64 (neg.f64 c) (fma.f64 #s(literal 4 binary64) a (/.f64 (*.f64 (neg.f64 b) b) c)))"]],"stop":[["iter limit",1],["node limit",1]],"time":278.01806640625,"type":"simplify"},{"count":[[21,1079]],"egraph":[[0,8544,293,0.075997405],[2,2218,293,0.032024056],[1,314,311,0.007190181],[0,83,313,0.002553277],[0,53,326,0.000465567]],"inputs":[["(*.f64 (/.f64 #s(literal -1/2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b))","(/.f64 #s(literal -1/2 binary64) a)","(+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b)","(sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)))","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 b a))","(/.f64 b a)","(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))))","#s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(*.f64 #s(literal -1/2 binary64) (/.f64 b a))","(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))) (*.f64 #s(literal 2 binary64) a))","(-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)))","(neg.f64 b)","#s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)","(/.f64 (*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))","(*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a))","(-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b))","(*.f64 a #s(literal -4 binary64))","(fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)","#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))"]],"memory":[[356304,81201856]],"outputs":[["(*.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (neg.f64 a)) #s(literal 1/2 binary64))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) a))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (neg.f64 a)) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) a)))","(*.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)) (neg.f64 a)))","(*.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal -2 binary64)) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) a) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal -2 binary64)))","(*.f64 (/.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (neg.f64 a)) (/.f64 (pow.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) a)))","(*.f64 (/.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)) (neg.f64 a)))","(*.f64 (/.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -2 binary64)) (/.f64 (pow.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) a) (/.f64 (pow.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)) #s(literal -2 binary64)))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a) #s(literal -1/2 binary64))","(*.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal 2 binary64)))","(*.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -2 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a)))","(*.f64 #s(literal 1/2 binary64) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (neg.f64 a)))","(*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))","(*.f64 #s(literal -1/2 binary64) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a))","(*.f64 #s(literal -1/2 binary64) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(pow.f64 (/.f64 a (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1/2 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal -1/2 binary64) a))) (neg.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal -1/2 binary64) a))) (neg.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (neg.f64 (*.f64 #s(literal -2 binary64) a)))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal 1 binary64))) (neg.f64 (*.f64 #s(literal -2 binary64) a)))","(/.f64 (neg.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal 1/2 binary64))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) a) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))) (neg.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) a) (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (/.f64 #s(literal -1/2 binary64) a) #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1/2 binary64)))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal -2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))) (neg.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))) (neg.f64 (*.f64 (neg.f64 a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 (neg.f64 a) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))) (neg.f64 (*.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 a (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 b) #s(literal -1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 1 binary64) b))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -1/2 binary64) (neg.f64 b)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 b #s(literal 1 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (neg.f64 b) a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 b #s(literal 1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 1/2 binary64) b))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (neg.f64 b) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (*.f64 b #s(literal -1/2 binary64))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (neg.f64 b)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 b #s(literal -1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 a (*.f64 b #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (/.f64 a b) #s(literal -2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 a b) #s(literal -2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 b))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 a b) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1/2 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 a b)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 (neg.f64 b) #s(literal -1/2 binary64)))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (*.f64 #s(literal 1 binary64) b))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) (neg.f64 b)))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (*.f64 b #s(literal 1 binary64)))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64) (*.f64 (neg.f64 a) (/.f64 (neg.f64 b) a))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 b #s(literal 1/2 binary64)))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 #s(literal 1/2 binary64) b))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a (*.f64 (neg.f64 a) (/.f64 (neg.f64 b) #s(literal 2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a) (*.f64 (neg.f64 a) (neg.f64 (*.f64 b #s(literal -1/2 binary64))))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (neg.f64 (neg.f64 b)))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a (*.f64 (neg.f64 a) (*.f64 b #s(literal -1/2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 a (*.f64 b #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (/.f64 a b) #s(literal -2 binary64)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (*.f64 (/.f64 a b) #s(literal -2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a) (*.f64 (neg.f64 a) (neg.f64 b))) (*.f64 (neg.f64 a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) b)) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 a b) (*.f64 (neg.f64 a) #s(literal -1/2 binary64))) (*.f64 (neg.f64 a) (/.f64 a b)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 b) #s(literal -1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 1 binary64) b))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -1/2 binary64) (neg.f64 b)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 b #s(literal 1 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) #s(literal 2 binary64) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (neg.f64 b) a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 b #s(literal 1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 1/2 binary64) b))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) a (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (neg.f64 b) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (*.f64 b #s(literal -1/2 binary64))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (neg.f64 b)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) a (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 b #s(literal -1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 a (*.f64 b #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) (*.f64 (/.f64 a b) #s(literal -2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 a b) #s(literal -2 binary64))))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 b))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)) (/.f64 a b) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1/2 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 a b)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 (neg.f64 b) #s(literal -1/2 binary64)))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (*.f64 #s(literal 1 binary64) b))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) (neg.f64 b)))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (*.f64 b #s(literal 1 binary64)))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) #s(literal 2 binary64) (*.f64 (neg.f64 a) (/.f64 (neg.f64 b) a))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 b #s(literal 1/2 binary64)))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 #s(literal 1/2 binary64) b))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) a (*.f64 (neg.f64 a) (/.f64 (neg.f64 b) #s(literal 2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (neg.f64 a) (*.f64 (neg.f64 a) (neg.f64 (*.f64 b #s(literal -1/2 binary64))))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (neg.f64 (neg.f64 b)))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) a (*.f64 (neg.f64 a) (*.f64 b #s(literal -1/2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 a (*.f64 b #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (*.f64 (/.f64 a b) #s(literal -2 binary64)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (*.f64 (/.f64 a b) #s(literal -2 binary64))))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (*.f64 #s(literal 2 binary64) a) (*.f64 (neg.f64 a) (neg.f64 b))) (*.f64 (neg.f64 a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) b)) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (/.f64 a b) (*.f64 (neg.f64 a) #s(literal -1/2 binary64))) (*.f64 (neg.f64 a) (/.f64 a b)))","(/.f64 (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 (neg.f64 b) #s(literal -1/2 binary64)))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (*.f64 #s(literal 1 binary64) b))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) (neg.f64 b)))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (*.f64 b #s(literal 1 binary64)))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) #s(literal 2 binary64) (*.f64 (neg.f64 a) (/.f64 (neg.f64 b) a))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 b #s(literal 1/2 binary64)))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 #s(literal 1/2 binary64) b))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) a (*.f64 (neg.f64 a) (/.f64 (neg.f64 b) #s(literal 2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (neg.f64 a) (*.f64 (neg.f64 a) (neg.f64 (*.f64 b #s(literal -1/2 binary64))))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (neg.f64 (neg.f64 b)))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) a (*.f64 (neg.f64 a) (*.f64 b #s(literal -1/2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 a (*.f64 b #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 (/.f64 a b) #s(literal -2 binary64)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (*.f64 (/.f64 a b) #s(literal -2 binary64))))","(/.f64 (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 #s(literal 2 binary64) a) (*.f64 (neg.f64 a) (neg.f64 b))) (*.f64 (neg.f64 a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) b)) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (/.f64 a b) (*.f64 (neg.f64 a) #s(literal -1/2 binary64))) (*.f64 (neg.f64 a) (/.f64 a b)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) (neg.f64 a) (*.f64 a (*.f64 (neg.f64 b) #s(literal -1/2 binary64)))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 a (*.f64 #s(literal 1 binary64) b))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) (neg.f64 a) (*.f64 a (*.f64 #s(literal -1/2 binary64) (neg.f64 b)))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 a (*.f64 b #s(literal 1 binary64)))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) #s(literal 2 binary64) (*.f64 a (/.f64 (neg.f64 b) a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) (neg.f64 a) (*.f64 a (*.f64 b #s(literal 1/2 binary64)))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) (neg.f64 a) (*.f64 a (*.f64 #s(literal 1/2 binary64) b))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) a (*.f64 a (/.f64 (neg.f64 b) #s(literal 2 binary64)))) (*.f64 a a))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) (neg.f64 a) (*.f64 a (neg.f64 (*.f64 b #s(literal -1/2 binary64))))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 a (neg.f64 (neg.f64 b)))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) a (*.f64 a (*.f64 b #s(literal -1/2 binary64)))) (*.f64 a a))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 a (*.f64 b #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) (*.f64 (/.f64 a b) #s(literal -2 binary64)) (*.f64 a #s(literal 1 binary64))) (*.f64 a (*.f64 (/.f64 a b) #s(literal -2 binary64))))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) (*.f64 #s(literal 2 binary64) a) (*.f64 a (neg.f64 b))) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 a b)) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) (/.f64 a b) (*.f64 a #s(literal -1/2 binary64))) (*.f64 a (/.f64 a b)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 (neg.f64 b) #s(literal -1/2 binary64)))) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 #s(literal 1 binary64) b))) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 #s(literal -1/2 binary64) (neg.f64 b)))) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 b #s(literal 1 binary64)))) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (+.f64 #s(literal 2 binary64) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (/.f64 (neg.f64 b) a))) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) #s(literal 2 binary64)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 b #s(literal 1/2 binary64)))) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 #s(literal 1/2 binary64) b))) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) a (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (/.f64 (neg.f64 b) #s(literal 2 binary64)))) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) a))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (neg.f64 (*.f64 b #s(literal -1/2 binary64))))) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (neg.f64 (neg.f64 b)))) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) a (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 b #s(literal -1/2 binary64)))) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) a))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (/.f64 a (*.f64 b #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (/.f64 a b) #s(literal -2 binary64)) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 (/.f64 a b) #s(literal -2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (neg.f64 b))) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) b)) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (+.f64 (/.f64 a b) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) #s(literal -1/2 binary64))) (*.f64 (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (/.f64 a b)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 b) #s(literal -1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 1 binary64) b))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -1/2 binary64) (neg.f64 b)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 b #s(literal 1 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (neg.f64 b) a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 b #s(literal 1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 1/2 binary64) b))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (neg.f64 b) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (*.f64 b #s(literal -1/2 binary64))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (neg.f64 b)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 b #s(literal -1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 a (*.f64 b #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (/.f64 a b) #s(literal -2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 a b) #s(literal -2 binary64))))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 b))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 a b) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1/2 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 a b)))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) (neg.f64 a) (*.f64 (neg.f64 a) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) a (*.f64 (neg.f64 a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) b) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) b) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) b) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) b) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) b) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) b) a (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) b) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1 binary64) b) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) (neg.f64 a) (*.f64 (neg.f64 a) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) a (*.f64 (neg.f64 a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 b #s(literal 1 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 b #s(literal 1 binary64)) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 b #s(literal 1 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 b #s(literal 1 binary64)) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 b #s(literal 1 binary64)) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 b #s(literal 1 binary64)) a (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (fma.f64 (*.f64 b #s(literal 1 binary64)) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 (*.f64 b #s(literal 1 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) (neg.f64 a) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) (neg.f64 a) (*.f64 #s(literal 2 binary64) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) (neg.f64 a) (*.f64 #s(literal 2 binary64) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) a (*.f64 #s(literal 2 binary64) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 b #s(literal 1/2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 b #s(literal 1/2 binary64)) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 b #s(literal 1/2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 b #s(literal 1/2 binary64)) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 b #s(literal 1/2 binary64)) (neg.f64 a) (*.f64 (neg.f64 a) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 b #s(literal 1/2 binary64)) a (*.f64 (neg.f64 a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (*.f64 b #s(literal 1/2 binary64)) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 (*.f64 b #s(literal 1/2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) b) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) b) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) b) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) b) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) b) (neg.f64 a) (*.f64 (neg.f64 a) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) b) a (*.f64 (neg.f64 a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) b) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) b) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 a (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) #s(literal 2 binary64)) (neg.f64 a) (*.f64 a (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) #s(literal 2 binary64)) (neg.f64 a) (*.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) #s(literal 2 binary64)) (neg.f64 a) (*.f64 a (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) #s(literal 2 binary64)) a (*.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))) (*.f64 a a))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) #s(literal 2 binary64)) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 (/.f64 (neg.f64 b) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 b #s(literal -1/2 binary64))) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 b #s(literal -1/2 binary64))) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 b #s(literal -1/2 binary64))) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 b #s(literal -1/2 binary64))) (neg.f64 a) (*.f64 (neg.f64 a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 b #s(literal -1/2 binary64))) (neg.f64 a) (*.f64 (neg.f64 a) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))))) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (*.f64 b #s(literal -1/2 binary64))) a (*.f64 (neg.f64 a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (fma.f64 (neg.f64 (*.f64 b #s(literal -1/2 binary64))) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 (neg.f64 (*.f64 b #s(literal -1/2 binary64))) (*.f64 #s(literal -2 binary64) a) (*.f64 (neg.f64 a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (neg.f64 b)) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (neg.f64 b)) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (neg.f64 b)) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (neg.f64 b)) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (neg.f64 b)) (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 (neg.f64 b)) a (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (fma.f64 (neg.f64 (neg.f64 b)) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 (neg.f64 (neg.f64 b)) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 b #s(literal -1/2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 a (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 b #s(literal -1/2 binary64)) (neg.f64 a) (*.f64 a (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 b #s(literal -1/2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (*.f64 b #s(literal -1/2 binary64)) (neg.f64 a) (*.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 b #s(literal -1/2 binary64)) (neg.f64 a) (*.f64 a (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))))) (*.f64 a (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 b #s(literal -1/2 binary64)) a (*.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))) (*.f64 a a))","(/.f64 (fma.f64 (*.f64 b #s(literal -1/2 binary64)) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 (*.f64 b #s(literal -1/2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 a (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) a (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) a))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal 1 binary64) a (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) a))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 b) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 b) (neg.f64 a) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 b) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 b) (neg.f64 a) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 b) (neg.f64 a) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))))) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 (neg.f64 b) a (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (fma.f64 (neg.f64 b) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 (neg.f64 b) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 b (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 b (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 b (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 b (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 b (neg.f64 a) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 a)))","(/.f64 (fma.f64 b a (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (fma.f64 b (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 b (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 a b) (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (neg.f64 a) (*.f64 (/.f64 a b) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 (/.f64 a b) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 a b) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))) (*.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (neg.f64 a) (*.f64 (/.f64 a b) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 (/.f64 a b) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (neg.f64 a) (*.f64 (/.f64 a b) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))))) (*.f64 (/.f64 a b) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal -1/2 binary64) a (*.f64 (/.f64 a b) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))) (*.f64 (/.f64 a b) a))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64))) (*.f64 (/.f64 a b) #s(literal 1 binary64))) (*.f64 (/.f64 a b) (/.f64 a (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 a b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal -1/2 binary64) a)) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))","(/.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal -1/2 binary64) a)) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (*.f64 #s(literal -2 binary64) a))","(/.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (neg.f64 a))","(/.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal 1 binary64)) (*.f64 #s(literal -2 binary64) a))","(/.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal 1/2 binary64)) (neg.f64 a))","(/.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) a) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))","(/.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) a) (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(/.f64 (-.f64 (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(literal 2 binary64))) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (pow.f64 (/.f64 #s(literal -1/2 binary64) a) #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))))))","(/.f64 (neg.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1/2 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (neg.f64 (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal 1 binary64)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal 1/2 binary64)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal -1/2 binary64)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a))","(/.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64)) (*.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 a)))","(/.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64)) (*.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (*.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (*.f64 (neg.f64 a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(/.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (neg.f64 a) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (*.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(/.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 a (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1/2 binary64)) a)","(/.f64 #s(literal 1 binary64) (/.f64 a (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1/2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1/2 binary64)))))","(/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a))","(fma.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 a)) #s(literal 1/2 binary64) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(fma.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) a) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(fma.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -2 binary64)) (pow.f64 a #s(literal -1 binary64)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(fma.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)) (/.f64 #s(literal 1/2 binary64) a) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) (neg.f64 a)) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) (neg.f64 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal -2 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) a) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) a) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(fma.f64 (/.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -1 binary64)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 (/.f64 b #s(literal -1 binary64)) (/.f64 #s(literal 1/2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) #s(literal -1/2 binary64) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 b #s(literal 2 binary64)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 (/.f64 b #s(literal 1 binary64)) (/.f64 #s(literal -1/2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 (/.f64 b #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 (/.f64 b (neg.f64 a)) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1 binary64)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(fma.f64 (*.f64 b #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1 binary64)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -2 binary64)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 b #s(literal -2 binary64)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 #s(literal -1 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 b (*.f64 #s(literal 2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(fma.f64 #s(literal 1/2 binary64) (/.f64 (neg.f64 b) a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 #s(literal 1/2 binary64) (/.f64 b (neg.f64 a)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(fma.f64 b (/.f64 #s(literal -1/2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 (/.f64 #s(literal -1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(fma.f64 (/.f64 #s(literal -1/2 binary64) a) b (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(fma.f64 #s(literal -1/2 binary64) (*.f64 (pow.f64 a #s(literal -1 binary64)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(-.f64 (/.f64 (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)) #s(literal 2 binary64)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a))) (/.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a))))","(-.f64 (/.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (*.f64 #s(literal -2 binary64) a)) (/.f64 (/.f64 (*.f64 b b) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (*.f64 #s(literal -2 binary64) a)))","(+.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(+.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(*.f64 (/.f64 #s(literal -1 binary64) a) #s(literal 1/2 binary64))","(*.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal -1/2 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 #s(literal 1/2 binary64) (/.f64 #s(literal -1 binary64) a))","(*.f64 #s(literal -1/2 binary64) (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 #s(literal -2 binary64) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 #s(literal -2 binary64) a)))","(/.f64 #s(literal 1/2 binary64) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 #s(literal 1/2 binary64) (neg.f64 a))","(/.f64 #s(literal -1/2 binary64) (neg.f64 (neg.f64 a)))","(/.f64 #s(literal -1/2 binary64) a)","(neg.f64 (/.f64 #s(literal 1/2 binary64) a))","(exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -2 binary64) a)) #s(literal -1 binary64)))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (/.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (/.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)))) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (pow.f64 (fma.f64 b b (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (-.f64 (*.f64 b b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64))))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))) (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 b b))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(/.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (neg.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(/.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (fma.f64 b b (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (fma.f64 b b (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(fma.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) b)","(fma.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) b)","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))) b)","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) b)","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 (neg.f64 b) b)) #s(literal -1 binary64))) b)","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) b)","(fma.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))) b)","(fma.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b))) #s(literal -1 binary64))) b)","(fma.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) b)","(fma.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) b)","(-.f64 (/.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(-.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (/.f64 (*.f64 b b) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)","(+.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 (neg.f64 b) b)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b))) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64))","(pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/2 binary64))","(/.f64 (neg.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (neg.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 (neg.f64 b) b)))))","(/.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b))))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 (neg.f64 b) b)))))","(/.f64 (sqrt.f64 (neg.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (sqrt.f64 (neg.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b))))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)))) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)))) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 (neg.f64 b) b))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (+.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b)))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 (neg.f64 b) b)) (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b))) (fma.f64 #s(literal 64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))))","(sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))","(fabs.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(exp.f64 (log.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 b a))","(*.f64 (/.f64 b #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) a))","(*.f64 (pow.f64 (pow.f64 (neg.f64 b) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) a))","(*.f64 (pow.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) a) (pow.f64 (pow.f64 (neg.f64 b) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) a) (neg.f64 b))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) b)","(*.f64 #s(literal 1 binary64) (/.f64 b a))","(*.f64 #s(literal -1 binary64) (/.f64 b (neg.f64 a)))","(*.f64 (neg.f64 b) (/.f64 #s(literal -1 binary64) a))","(*.f64 b (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 a b) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 a b) #s(literal -1 binary64))","(pow.f64 (/.f64 b a) #s(literal 1 binary64))","(/.f64 (neg.f64 (*.f64 b #s(literal 1 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 (neg.f64 b))) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 (neg.f64 (pow.f64 a #s(literal -1 binary64))) (neg.f64 (pow.f64 b #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 a)) (*.f64 (neg.f64 a) b)) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (*.f64 b #s(literal 1 binary64)) a)","(/.f64 (neg.f64 (neg.f64 b)) (neg.f64 (neg.f64 a)))","(/.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 b #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 a b))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a b) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 a b))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 a b) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a b)))","(/.f64 (neg.f64 b) (neg.f64 a))","(/.f64 b a)","(neg.f64 (/.f64 (neg.f64 b) a))","(neg.f64 (/.f64 b (neg.f64 a)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 a)) (/.f64 b (neg.f64 a)))","(exp.f64 (*.f64 (log.f64 (/.f64 a b)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) #s(literal 2 binary64))) (pow.f64 (-.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (/.f64 a b) #s(literal -3 binary64)) #s(literal -1/8 binary64) (pow.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) #s(literal 3 binary64))) (pow.f64 (fma.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) (-.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) (pow.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))) (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) (-.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) (pow.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (/.f64 a b) #s(literal -3 binary64)) #s(literal -1/8 binary64) (pow.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (/.f64 a b) #s(literal -3 binary64)) #s(literal -1/8 binary64) (pow.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) (-.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) (pow.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))))) (*.f64 (-.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))) (pow.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) #s(literal 2 binary64)))) (*.f64 (-.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))) (-.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))))))","(/.f64 (-.f64 (pow.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(literal 2 binary64))) (-.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (/.f64 a b) #s(literal -3 binary64)) #s(literal -1/8 binary64) (pow.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (/.f64 a b) #s(literal -3 binary64)) #s(literal -1/8 binary64) (pow.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) (-.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) (pow.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) #s(literal 2 binary64))) (-.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))) (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) (-.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) (pow.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (/.f64 a b) #s(literal -3 binary64)) #s(literal -1/8 binary64) (pow.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) #s(literal 3 binary64)))))","(/.f64 (fma.f64 (pow.f64 (/.f64 a b) #s(literal -3 binary64)) #s(literal -1/8 binary64) (pow.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))))))","(/.f64 (fma.f64 (pow.f64 (/.f64 a b) #s(literal -3 binary64)) #s(literal -1/8 binary64) (pow.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) #s(literal 3 binary64))) (fma.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) (-.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) (pow.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))) (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) (-.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) (pow.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (/.f64 a b) #s(literal -3 binary64)) #s(literal -1/8 binary64) (pow.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) #s(literal 3 binary64))))))","(fma.f64 (/.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -1 binary64)) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))))","(fma.f64 (/.f64 b #s(literal -1 binary64)) (/.f64 #s(literal 1/2 binary64) a) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 b #s(literal 2 binary64)) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))))","(fma.f64 (/.f64 b #s(literal 1 binary64)) (/.f64 #s(literal -1/2 binary64) a) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))))","(fma.f64 (/.f64 b #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) a) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))))","(fma.f64 (/.f64 b (neg.f64 a)) #s(literal 1/2 binary64) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))))","(fma.f64 (*.f64 b #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1 binary64)) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 b #s(literal -2 binary64)) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))))","(fma.f64 #s(literal -1 binary64) (/.f64 b (*.f64 #s(literal 2 binary64) a)) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))))","(fma.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))))","(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))))","(fma.f64 #s(literal 1/2 binary64) (/.f64 (neg.f64 b) a) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))))","(fma.f64 #s(literal 1/2 binary64) (/.f64 b (neg.f64 a)) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))))","(fma.f64 b (/.f64 #s(literal -1/2 binary64) a) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))))","(fma.f64 (/.f64 #s(literal -1/2 binary64) a) b #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))))","(fma.f64 #s(literal -1/2 binary64) (/.f64 b a) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))))","(-.f64 (/.f64 (pow.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))) (/.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))))) (/.f64 (pow.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) #s(literal 2 binary64)) (-.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))))))","(+.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))))","(+.f64 #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","#s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(*.f64 (/.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 b #s(literal -1 binary64)) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 b #s(literal 2 binary64)))","(*.f64 (/.f64 b #s(literal 1 binary64)) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 (/.f64 b #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) a))","(*.f64 (/.f64 b (neg.f64 a)) #s(literal 1/2 binary64))","(*.f64 (*.f64 b #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 b #s(literal -2 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 b (*.f64 #s(literal 2 binary64) a)))","(*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 (/.f64 b a) #s(literal -1/2 binary64))","(*.f64 #s(literal 1/2 binary64) (/.f64 (neg.f64 b) a))","(*.f64 #s(literal 1/2 binary64) (/.f64 b (neg.f64 a)))","(*.f64 b (/.f64 #s(literal -1/2 binary64) a))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) b)","(*.f64 #s(literal -1/2 binary64) (/.f64 b a))","(pow.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) b)) (neg.f64 (*.f64 #s(literal -2 binary64) a)))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 b #s(literal 1/2 binary64))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) b)) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (/.f64 (neg.f64 b) #s(literal 2 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 (*.f64 b #s(literal -1/2 binary64)))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 b #s(literal 1 binary64))) (neg.f64 (*.f64 #s(literal -2 binary64) a)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 b))) (neg.f64 (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) b)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) (neg.f64 a))","(/.f64 (*.f64 #s(literal 1 binary64) b) (*.f64 #s(literal -2 binary64) a))","(/.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) (neg.f64 a))","(/.f64 (*.f64 b #s(literal 1 binary64)) (*.f64 #s(literal -2 binary64) a))","(/.f64 (/.f64 (neg.f64 b) a) #s(literal 2 binary64))","(/.f64 (*.f64 b #s(literal 1/2 binary64)) (neg.f64 a))","(/.f64 (*.f64 #s(literal 1/2 binary64) b) (neg.f64 a))","(/.f64 (/.f64 (neg.f64 b) #s(literal 2 binary64)) a)","(/.f64 (neg.f64 (*.f64 b #s(literal -1/2 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 b)) (*.f64 #s(literal -2 binary64) a))","(/.f64 (*.f64 b #s(literal -1/2 binary64)) a)","(/.f64 #s(literal 1 binary64) (/.f64 a (*.f64 b #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 a b) #s(literal -2 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64))))","(/.f64 (neg.f64 b) (neg.f64 (*.f64 #s(literal -2 binary64) a)))","(/.f64 (neg.f64 b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (/.f64 b a) #s(literal -2 binary64))","(/.f64 #s(literal 1/2 binary64) (neg.f64 (/.f64 a b)))","(/.f64 b (*.f64 #s(literal -2 binary64) a))","(/.f64 #s(literal -1/2 binary64) (/.f64 a b))","(neg.f64 (/.f64 b (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 b (*.f64 #s(literal 2 binary64) a)))","(*.f64 (/.f64 (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b))))","(*.f64 (/.f64 (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b)) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b))))","(*.f64 (/.f64 (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64))) a) (/.f64 (pow.f64 (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b)) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64))) a) (/.f64 (pow.f64 (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) a) #s(literal 1/2 binary64))","(*.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) #s(literal -2 binary64)))","(*.f64 (*.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) #s(literal 1/2 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))))","(*.f64 (neg.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (pow.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))","(*.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 #s(literal 1/2 binary64) (pow.f64 (/.f64 a (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) a))","(*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) (neg.f64 a)))","(pow.f64 (/.f64 a (*.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) #s(literal 1/2 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) a)) #s(literal -2 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b))))","(/.f64 (neg.f64 (*.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) #s(literal 1 binary64))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1/4 binary64) (+.f64 (pow.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a)))))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) #s(literal 1/2 binary64)))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))))) (neg.f64 (neg.f64 (*.f64 #s(literal -2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b)) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (-.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))) (neg.f64 (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (*.f64 (neg.f64 a) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) a))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) a) (*.f64 (neg.f64 a) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) (*.f64 #s(literal -2 binary64) a)) (*.f64 (neg.f64 a) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 b) #s(literal -1/2 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 (neg.f64 a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 (neg.f64 a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1 binary64) b) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1 binary64) b) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1 binary64) b) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1 binary64) b) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1 binary64) b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) #s(literal 2 binary64)) (*.f64 (neg.f64 a) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) a))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) a) (*.f64 (neg.f64 a) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) (*.f64 #s(literal -2 binary64) a)) (*.f64 (neg.f64 a) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 b)) (*.f64 #s(literal 2 binary64) a)) (*.f64 (neg.f64 a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 (neg.f64 a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal 1 binary64)) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal 1 binary64)) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal 1 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) a))) #s(literal 4 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) a) (*.f64 #s(literal 2 binary64) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal 2 binary64) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) a) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal 2 binary64) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 (neg.f64 a) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) a))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal 1/2 binary64)) a) (*.f64 (neg.f64 a) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal 1/2 binary64)) (*.f64 #s(literal -2 binary64) a)) (*.f64 (neg.f64 a) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal 1/2 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal 1/2 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 (neg.f64 a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 (neg.f64 a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) b) #s(literal 2 binary64)) (*.f64 (neg.f64 a) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) a))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) b) a) (*.f64 (neg.f64 a) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) b) (*.f64 #s(literal -2 binary64) a)) (*.f64 (neg.f64 a) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) b) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (neg.f64 a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 (neg.f64 a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) #s(literal 2 binary64)) #s(literal 2 binary64)) (*.f64 a (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) #s(literal 2 binary64)) a) (*.f64 a (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) a)) (*.f64 a (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) #s(literal 2 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))))","(/.f64 (-.f64 (*.f64 (/.f64 (neg.f64 b) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 a #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 b #s(literal -1/2 binary64))) #s(literal 2 binary64)) (*.f64 (neg.f64 a) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) a))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 b #s(literal -1/2 binary64))) a) (*.f64 (neg.f64 a) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 b #s(literal -1/2 binary64))) (*.f64 #s(literal -2 binary64) a)) (*.f64 (neg.f64 a) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 b #s(literal -1/2 binary64))) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (*.f64 b #s(literal -1/2 binary64))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (neg.f64 a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 (neg.f64 a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 b)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 b)) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 b)) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 b)) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 b)) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal -1/2 binary64)) #s(literal 2 binary64)) (*.f64 a (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal -1/2 binary64)) a) (*.f64 a (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal -1/2 binary64)) (*.f64 #s(literal -2 binary64) a)) (*.f64 a (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal -1/2 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal -1/2 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 a #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) a))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 (/.f64 a (*.f64 b #s(literal -1/2 binary64))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) a))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 b) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) a))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 b) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 b) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))))","(/.f64 (-.f64 (*.f64 b #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 b a) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (-.f64 (*.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 b (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))))","(/.f64 (-.f64 (*.f64 b (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 #s(literal -1 binary64) (*.f64 (/.f64 a b) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) a))) (*.f64 (/.f64 a b) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 a b) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)))) (*.f64 (/.f64 a b) a))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 a b) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))) (*.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 (/.f64 a b) #s(literal 1 binary64))) (*.f64 (/.f64 a b) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (/.f64 a b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 (/.f64 a b) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 b #s(literal -1/2 binary64)) (/.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64))) a)","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) b) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (*.f64 b #s(literal 1 binary64)) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (neg.f64 (neg.f64 b)) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) a) #s(literal 2 binary64))","(/.f64 (*.f64 (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b)))","(/.f64 (*.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 b (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64))) (fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64))) (fma.f64 (pow.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1/4 binary64) (+.f64 (pow.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a))))))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) #s(literal 1/2 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))) (neg.f64 (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b)) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) #s(literal 1/2 binary64)) a)","(/.f64 (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))))))","(/.f64 #s(literal 1 binary64) (/.f64 a (*.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b))))","(/.f64 (neg.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 #s(literal -2 binary64) a))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (*.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) #s(literal 1/2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))))","(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) (*.f64 #s(literal 2 binary64) a))","(neg.f64 (/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) (*.f64 #s(literal -2 binary64) a)))","(fma.f64 (/.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -1 binary64)) (neg.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (/.f64 b #s(literal -1 binary64)) (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 b #s(literal 2 binary64)) (neg.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (/.f64 b #s(literal 1 binary64)) (/.f64 #s(literal -1/2 binary64) a) (neg.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (/.f64 b #s(literal 2 binary64)) (/.f64 #s(literal -1 binary64) a) (neg.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (/.f64 b (neg.f64 a)) #s(literal 1/2 binary64) (neg.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (*.f64 b #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1 binary64)) (neg.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 b #s(literal -2 binary64)) (neg.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 #s(literal -1 binary64) (/.f64 b (*.f64 #s(literal 2 binary64) a)) (neg.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (neg.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 #s(literal 1/2 binary64) (/.f64 (neg.f64 b) a) (neg.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 #s(literal 1/2 binary64) (/.f64 b (neg.f64 a)) (neg.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 b (/.f64 #s(literal -1/2 binary64) a) (neg.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 (/.f64 #s(literal -1/2 binary64) a) b (neg.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a))))","(fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (neg.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a))))","(-.f64 (/.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(literal 2 binary64)) (fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a)))) (/.f64 (pow.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) #s(literal 3 binary64)) (fma.f64 (pow.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1/4 binary64) (+.f64 (pow.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a)))))) (/.f64 (pow.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)) (fma.f64 (pow.f64 (/.f64 a b) #s(literal -2 binary64)) #s(literal 1/4 binary64) (+.f64 (pow.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a)))))))","(-.f64 (/.f64 (*.f64 (neg.f64 b) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(-.f64 (/.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)))) (/.f64 (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)))))","(-.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b)))) (/.f64 (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b)))))","(-.f64 (/.f64 (/.f64 (*.f64 b b) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 (-.f64 b (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 (+.f64 b #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) (*.f64 #s(literal -2 binary64) a)))","(-.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a)))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (neg.f64 (*.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (/.f64 #s(literal 1/2 binary64) a))))","(*.f64 (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64))) (pow.f64 (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b)) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b)))))","(/.f64 (-.f64 (*.f64 (*.f64 b b) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b))) (*.f64 (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)))) (*.f64 (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b))))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b))) (*.f64 (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64)))) (*.f64 (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b)) (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b))))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (neg.f64 b) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)))) (neg.f64 (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 b b (-.f64 (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)) (*.f64 (neg.f64 b) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b))))","(/.f64 (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64))) (-.f64 (neg.f64 b) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))))","(/.f64 (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64))) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b)) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64))) (fma.f64 b b (-.f64 (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)) (*.f64 (neg.f64 b) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64))) (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (-.f64 (*.f64 b b) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b)) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64))))))","(neg.f64 (+.f64 b #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))","(fma.f64 #s(literal -1 binary64) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b))","(fma.f64 #s(literal -1 binary64) b (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))","(fma.f64 b #s(literal -1 binary64) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))","(-.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))) (/.f64 (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)) (-.f64 (neg.f64 b) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))))","(-.f64 (/.f64 (*.f64 b b) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b))) (/.f64 (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b))))","(-.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b))) (/.f64 (pow.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) #s(literal 3 binary64)) (fma.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (+.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)) (neg.f64 b)) (*.f64 b b))))","(-.f64 #s(literal 0 binary64) (-.f64 b (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))))","(-.f64 #s(literal 0 binary64) (+.f64 b #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))","(-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)))","(+.f64 (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))) (neg.f64 b))","(+.f64 (neg.f64 b) (neg.f64 #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))))","(*.f64 #s(literal -1 binary64) b)","(*.f64 b #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b))))","(/.f64 (*.f64 (neg.f64 b) b) (+.f64 #s(literal 0 binary64) b))","(/.f64 (*.f64 b b) (neg.f64 (+.f64 #s(literal 0 binary64) b)))","(neg.f64 b)","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (fma.f64 b b (*.f64 #s(literal 0 binary64) b)))))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) b)) (/.f64 (*.f64 b b) (+.f64 #s(literal 0 binary64) b)))","(-.f64 #s(literal 0 binary64) b)","(+.f64 #s(literal 0 binary64) (neg.f64 b))","#s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b))","(*.f64 (+.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (fma.f64 b (-.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b) (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b (-.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (+.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (neg.f64 (-.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (neg.f64 (neg.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 b (-.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 (-.f64 (*.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b)) (*.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b) (*.f64 b b))) (*.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b) (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b)))","(/.f64 (neg.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (neg.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b)))","(/.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (-.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (fma.f64 b b (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (neg.f64 b))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (fma.f64 b (-.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b) (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b (-.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (+.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 (+.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (fma.f64 b b (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (neg.f64 b)))))","(/.f64 (+.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (fma.f64 b (-.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(/.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b) (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b (-.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (+.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1 binary64) b)","(fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)","(-.f64 (/.f64 (*.f64 b b) (-.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))) (/.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (-.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))))","(-.f64 (/.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b)) (/.f64 (*.f64 b b) (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b)))","(-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(+.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b)","(+.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(*.f64 (/.f64 (neg.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(*.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) a) #s(literal -1 binary64)) (/.f64 (neg.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(*.f64 (/.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) a) #s(literal -1 binary64)) (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b))","(*.f64 (/.f64 (*.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 1/2 binary64)) (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (/.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b) #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 1/2 binary64)) (+.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (fma.f64 b (-.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal 1/2 binary64) (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (pow.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal 1/2 binary64) (+.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (pow.f64 (fma.f64 b (-.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (+.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (fma.f64 b (-.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal 1/2 binary64) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (/.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a))","(*.f64 (pow.f64 (/.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 1/2 binary64))) #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (/.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) a) (+.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 (fma.f64 b (-.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1 binary64))))","(*.f64 (*.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b) #s(literal -1 binary64))))","(*.f64 (*.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b))","(*.f64 (/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (+.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 b (-.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (+.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 b (-.f64 b (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(*.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(*.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 (pow.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(*.f64 #s(literal 1 binary64) (*.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b) (/.f64 #s(literal 1/2 binary64) a)))","(*.f64 (*.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal -1/2 binary64) a)) (pow.f64 (neg.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (pow.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (*.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b))","(*.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(pow.f64 (/.f64 (pow.f64 (*.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b) (/.f64 #s(literal 1/2 binary64) a)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (*.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b) (/.f64 #s(literal 1/2 binary64) a)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (*.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 1/2 binary64)) (pow.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -1 binary64)))) (neg.f64 a))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))) (neg.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))) (neg.f64 (fma.f64 (*.f64 b b) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal 1 binary64))) (neg.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal -1/2 binary64) a)))) (neg.f64 (neg.f64 (neg.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))))","(/.f64 (neg.f64 (*.f64 (*.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 1/2 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 a (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (*.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (*.f64 (fma.f64 (*.f64 b b) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64))) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))))","(/.f64 (*.f64 (*.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 1/2 binary64)) (pow.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -1 binary64))) a)","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))) (fma.f64 (*.f64 b b) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64))))","(/.f64 (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal 1 binary64)) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) a)))","(/.f64 (neg.f64 (*.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal -1/2 binary64) a))) (neg.f64 (neg.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))))","(/.f64 (*.f64 (*.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 1/2 binary64)) #s(literal 1 binary64)) (*.f64 a (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (fma.f64 (*.f64 b b) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64))) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 (*.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 1/2 binary64)) (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) a))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (*.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b) (/.f64 #s(literal 1/2 binary64) a)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (*.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b) (/.f64 #s(literal 1/2 binary64) a)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b) (/.f64 #s(literal 1/2 binary64) a)) #s(literal -1 binary64)))","(/.f64 (*.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal -1/2 binary64) a)) (neg.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (*.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b) (/.f64 #s(literal 1/2 binary64) a)) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (*.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b) (/.f64 #s(literal 1/2 binary64) a)) #s(literal -1 binary64))))","(neg.f64 (/.f64 (*.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal -1/2 binary64) a)) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(neg.f64 (*.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) a) #s(literal -1 binary64)) (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))) (*.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) a) #s(literal -1 binary64)) (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (*.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b) (/.f64 #s(literal 1/2 binary64) a)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) a) (/.f64 (pow.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 b b) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) a) (/.f64 (pow.f64 (fma.f64 (*.f64 b b) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) #s(literal 1/2 binary64))","(*.f64 (/.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 (*.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 2 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(*.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a))","(*.f64 #s(literal 1/2 binary64) (*.f64 (pow.f64 a #s(literal -1 binary64)) (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(pow.f64 (/.f64 a (*.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 1/2 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (neg.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (neg.f64 (fma.f64 (*.f64 b b) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 1 binary64))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (*.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1/2 binary64))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (neg.f64 (*.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 1/2 binary64)))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 (*.f64 b b) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (neg.f64 (*.f64 a (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (neg.f64 (*.f64 a (fma.f64 (*.f64 b b) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (neg.f64 (*.f64 (neg.f64 a) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (neg.f64 (*.f64 (neg.f64 a) (fma.f64 (*.f64 b b) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (*.f64 b b) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (fma.f64 (*.f64 b b) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64))) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (fma.f64 (*.f64 b b) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64))) a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 (*.f64 b b) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (neg.f64 a))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 (*.f64 b b) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64))))","(/.f64 (*.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (*.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1/2 binary64)) (neg.f64 a))","(/.f64 (neg.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (*.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 1/2 binary64))) (neg.f64 a))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 (*.f64 b b) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 a (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (*.f64 a (fma.f64 (*.f64 b b) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (neg.f64 a) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (*.f64 (neg.f64 a) (fma.f64 (*.f64 b b) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal 1/2 binary64)) (*.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1/2 binary64)) (*.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 b b) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 1/2 binary64)) (*.f64 (fma.f64 (*.f64 b b) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64))) a))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1/2 binary64)) (*.f64 (fma.f64 (*.f64 b b) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64))) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 (*.f64 b b) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64))))","(/.f64 (*.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 1/2 binary64)) a)","(/.f64 #s(literal 1 binary64) (/.f64 a (*.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (*.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 1/2 binary64)))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (*.f64 (neg.f64 b) b)))","(fma.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (/.f64 #s(literal 1/2 binary64) a) (*.f64 (*.f64 (neg.f64 b) b) (/.f64 #s(literal 1/2 binary64) a)))","(-.f64 (/.f64 (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3 binary64)) (fma.f64 (*.f64 b b) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 b b) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (*.f64 b b) (*.f64 #s(literal 2 binary64) a)))","(+.f64 (*.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (*.f64 (neg.f64 b) b) (/.f64 #s(literal 1/2 binary64) a)))","(+.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (*.f64 (neg.f64 b) b)))","(*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (pow.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (pow.f64 (fma.f64 (*.f64 b b) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b))","(pow.f64 (/.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 b b) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (neg.f64 (neg.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 b b) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3 binary64)) (fma.f64 (*.f64 b b) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)))) (*.f64 (fma.f64 (*.f64 b b) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64))) (pow.f64 b #s(literal 6 binary64)))) (*.f64 (fma.f64 (*.f64 b b) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64))) (fma.f64 (*.f64 b b) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (neg.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 (neg.f64 b) b))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (neg.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (neg.f64 (+.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 (neg.f64 b) b))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (neg.f64 (fma.f64 (*.f64 b b) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 (neg.f64 b) b)))","(/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 b b) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (+.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 (neg.f64 b) b)))))","(/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (*.f64 b b) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 b b) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))))","(fma.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -1 binary64)) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 (neg.f64 b) b))","(fma.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -1 binary64) (*.f64 (neg.f64 b) b))","(fma.f64 #s(literal 1 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 (neg.f64 b) b))","(fma.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 (neg.f64 b) b))","(fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (*.f64 (neg.f64 b) b))","(fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 (neg.f64 b) b))","(fma.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 1 binary64) (*.f64 (neg.f64 b) b))","(fma.f64 #s(literal -1 binary64) (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (*.f64 (neg.f64 b) b))","(fma.f64 #s(literal -1 binary64) (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))","(fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))","(fma.f64 b (neg.f64 b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))","(-.f64 (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 (neg.f64 b) b))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 (neg.f64 b) b))))","(-.f64 (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(-.f64 (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3 binary64)) (fma.f64 (*.f64 b b) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)))) (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 b b) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)))))","(-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b))","(+.f64 (*.f64 (neg.f64 b) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))","(+.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 (neg.f64 b) b))","(*.f64 #s(literal -4 binary64) a)","(*.f64 a #s(literal -4 binary64))","(*.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64) (*.f64 (neg.f64 b) b)) (pow.f64 (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c (neg.f64 b)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 3 binary64)) #s(literal -8 binary64) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (fma.f64 b (-.f64 b (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c (neg.f64 b)) (fma.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64) (*.f64 (neg.f64 b) b))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b (-.f64 b (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64))) (fma.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 3 binary64)) #s(literal -8 binary64) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) (*.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64)))) (neg.f64 (-.f64 b (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64) (*.f64 (neg.f64 b) b)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c (neg.f64 b)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 3 binary64)) #s(literal -8 binary64) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 b (-.f64 b (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64)) (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c (neg.f64 b))) (*.f64 (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c (neg.f64 b)) (*.f64 b b))) (*.f64 (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c (neg.f64 b)) (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c (neg.f64 b))))","(/.f64 (-.f64 (*.f64 b b) (*.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64))) (-.f64 b (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64) (*.f64 (neg.f64 b) b))) (neg.f64 (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c (neg.f64 b))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 3 binary64)) #s(literal -8 binary64) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (fma.f64 b b (-.f64 (*.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 (/.f64 a b) (*.f64 (*.f64 #s(literal -2 binary64) c) b))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 3 binary64)) #s(literal -8 binary64) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (fma.f64 b (-.f64 b (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64)))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64) (*.f64 (neg.f64 b) b)) (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c (neg.f64 b)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c (neg.f64 b)) (fma.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64) (*.f64 (neg.f64 b) b))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b (-.f64 b (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64))) (fma.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 3 binary64)) #s(literal -8 binary64) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 3 binary64)) #s(literal -8 binary64) (pow.f64 b #s(literal 3 binary64))) (fma.f64 b b (-.f64 (*.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64)) (*.f64 (/.f64 a b) (*.f64 (*.f64 #s(literal -2 binary64) c) b)))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 3 binary64)) #s(literal -8 binary64) (pow.f64 b #s(literal 3 binary64))) (fma.f64 b (-.f64 b (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c (neg.f64 b)) (fma.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64) (*.f64 (neg.f64 b) b)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b (-.f64 b (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64))) (fma.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 3 binary64)) #s(literal -8 binary64) (pow.f64 b #s(literal 3 binary64))))))","(fma.f64 (/.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 #s(literal -1 binary64) a)) (pow.f64 (neg.f64 b) #s(literal -1 binary64)) b)","(fma.f64 (/.f64 (*.f64 #s(literal -2 binary64) c) (pow.f64 a #s(literal -1 binary64))) (pow.f64 b #s(literal -1 binary64)) b)","(fma.f64 (/.f64 (*.f64 #s(literal -2 binary64) c) #s(literal 1 binary64)) (/.f64 a b) b)","(fma.f64 (/.f64 (*.f64 #s(literal -2 binary64) c) (neg.f64 b)) (/.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) a)) b)","(fma.f64 (/.f64 (*.f64 #s(literal -2 binary64) c) #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (/.f64 b (neg.f64 a))) b)","(fma.f64 (/.f64 (*.f64 #s(literal -2 binary64) c) #s(literal -1 binary64)) (/.f64 (neg.f64 a) b) b)","(fma.f64 (/.f64 (*.f64 #s(literal -2 binary64) c) b) (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal -1 binary64))) b)","(fma.f64 (/.f64 (*.f64 #s(literal -2 binary64) c) b) (/.f64 a #s(literal 1 binary64)) b)","(fma.f64 (/.f64 #s(literal -2 binary64) (neg.f64 b)) (/.f64 c (/.f64 #s(literal -1 binary64) a)) b)","(fma.f64 (/.f64 #s(literal -2 binary64) b) (/.f64 c (pow.f64 a #s(literal -1 binary64))) b)","(fma.f64 (/.f64 #s(literal -2 binary64) (/.f64 #s(literal -1 binary64) a)) (/.f64 c (neg.f64 b)) b)","(fma.f64 (/.f64 #s(literal -2 binary64) (pow.f64 a #s(literal -1 binary64))) (/.f64 c b) b)","(fma.f64 (/.f64 c (/.f64 #s(literal -1 binary64) a)) (/.f64 #s(literal -2 binary64) (neg.f64 b)) b)","(fma.f64 (/.f64 c (pow.f64 a #s(literal -1 binary64))) (/.f64 #s(literal -2 binary64) b) b)","(fma.f64 (/.f64 c #s(literal 1 binary64)) (/.f64 #s(literal -2 binary64) (/.f64 b a)) b)","(fma.f64 (/.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) a)) (/.f64 (*.f64 #s(literal -2 binary64) c) (neg.f64 b)) b)","(fma.f64 (/.f64 c (neg.f64 b)) (/.f64 #s(literal -2 binary64) (/.f64 #s(literal -1 binary64) a)) b)","(fma.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal -1 binary64))) (/.f64 (*.f64 #s(literal -2 binary64) c) b) b)","(fma.f64 (/.f64 c #s(literal -1 binary64)) (/.f64 #s(literal -2 binary64) (/.f64 b (neg.f64 a))) b)","(fma.f64 (/.f64 c b) (/.f64 #s(literal -2 binary64) (pow.f64 a #s(literal -1 binary64))) b)","(fma.f64 (/.f64 (neg.f64 a) b) (/.f64 (*.f64 #s(literal -2 binary64) c) #s(literal -1 binary64)) b)","(fma.f64 (pow.f64 (neg.f64 b) #s(literal -1 binary64)) (/.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 #s(literal -1 binary64) a)) b)","(fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c b)","(fma.f64 (/.f64 a #s(literal 1 binary64)) (/.f64 (*.f64 #s(literal -2 binary64) c) b) b)","(fma.f64 (*.f64 (*.f64 #s(literal -2 binary64) c) a) (pow.f64 b #s(literal -1 binary64)) b)","(fma.f64 (*.f64 (/.f64 a b) c) #s(literal -2 binary64) b)","(fma.f64 (pow.f64 b #s(literal -1 binary64)) (/.f64 (*.f64 #s(literal -2 binary64) c) (pow.f64 a #s(literal -1 binary64))) b)","(fma.f64 #s(literal 1 binary64) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c) b)","(fma.f64 #s(literal -1 binary64) (/.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 b (neg.f64 a))) b)","(fma.f64 #s(literal 2 binary64) (/.f64 c (/.f64 b (neg.f64 a))) b)","(fma.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c) b)","(fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)","(fma.f64 #s(literal -2 binary64) (*.f64 (/.f64 a b) c) b)","(fma.f64 c (*.f64 (/.f64 a b) #s(literal -2 binary64)) b)","(fma.f64 a (*.f64 (pow.f64 b #s(literal -1 binary64)) (*.f64 #s(literal -2 binary64) c)) b)","(-.f64 (/.f64 (*.f64 b b) (-.f64 b (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))) (/.f64 (*.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64)) (-.f64 b (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))))","(-.f64 (/.f64 (*.f64 (pow.f64 (*.f64 (/.f64 a b) c) #s(literal 2 binary64)) #s(literal 4 binary64)) (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c (neg.f64 b))) (/.f64 (*.f64 b b) (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c (neg.f64 b))))","(+.f64 (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c) b)","(+.f64 b (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))","(*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -1 binary64)) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))","(*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(*.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal 2 binary64))","(pow.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 2 binary64))","(pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 1 binary64))","#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))","(neg.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(neg.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(sqrt.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)))","(exp.f64 (fma.f64 (log.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (log.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 1/2 binary64))))","(exp.f64 (*.f64 (log.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) #s(literal 2 binary64)))","(*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 1/4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 1/4 binary64)))","(pow.f64 (exp.f64 (log.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))","(exp.f64 (*.f64 (log.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 1/2 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":314.945068359375,"type":"rewrite"},{"compiler":[[58540,4855]],"memory":[[8640576,132055088]],"time":232.800048828125,"type":"eval"},{"alts":[["(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))))","done",41.931286932027966,"binary64"],["(/.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","fresh",45.0750523376403,"binary64"],["(/.f64 (/.f64 (-.f64 (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 b b))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) a))","fresh",49.9919103865146,"binary64"],["(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64))) (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","fresh",62.49017779452867,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (exp.f64 (log.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) a))","fresh",47.89142653234473,"binary64"],["(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))) (*.f64 #s(literal 2 binary64) a))","done",42.09770324424859,"binary64"],["(/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a))","done",29.604698306053503,"binary64"],["(/.f64 (+.f64 (sqrt.f64 #s(approx (+ (* (* -4 a) c) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) (*.f64 #s(literal -2 binary64) a))","fresh",40.3895445300286,"binary64"],["(/.f64 (*.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 1/2 binary64)) (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) a))","fresh",43.27873699441694,"binary64"],["(/.f64 #s(approx (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (*.f64 #s(literal -2 binary64) (/.f64 (*.f64 c a) b))) (*.f64 #s(literal 2 binary64) a))","fresh",48.07729205688405,"binary64"],["(/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (/.f64 c b)) (/.f64 a b) #s(literal -2 binary64)) b)) (*.f64 #s(literal 2 binary64) a))","fresh",42.11509762248876,"binary64"],["(/.f64 #s(approx (* (- (+ (* -4 (* c a)) (* b b)) (* b b)) (/ 1/2 a)) (*.f64 #s(literal -2 binary64) c)) (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))","fresh",42.66391750736013,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) (*.f64 (-.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal -1/2 binary64) a))))","fresh",45.069498201839,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))","done",56.51703465819093,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))))","fresh",46.37294315574114,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (*.f64 (/.f64 (*.f64 a c) b) #s(literal 2 binary64))))","fresh",59.03679273725268,"binary64"],["(*.f64 (/.f64 #s(literal -1/2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b))","done",29.676138082230366,"binary64"],["(*.f64 (/.f64 #s(literal -1/2 binary64) a) #s(approx (+ (sqrt (+ (* c (* a -4)) (* b b))) b) (*.f64 #s(literal 2 binary64) b)))","fresh",41.993786932027966,"binary64"],["#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (fma.f64 a (/.f64 c b) (neg.f64 b)) a))","fresh",42.06760633561329,"binary64"],["#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (neg.f64 b) a))","fresh",41.931286932027966,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","done",43.03389990877592,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (/.f64 #s(literal -1 binary64) b) c))","fresh",43.08858740877592,"binary64"],["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (exp.f64 (*.f64 (log.f64 (/.f64 (neg.f64 b) c)) #s(literal -1 binary64))))","fresh",54.02175174709062,"binary64"],["#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 c b))","done",59.0057137210855,"binary64"],["#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 b a))","done",62.43940561905425,"binary64"],["#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 #s(literal 1 binary64) (/.f64 b c)))","fresh",59.005713721085414,"binary64"],["#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 #s(literal 1 binary64) (/.f64 a b)))","fresh",62.43940555710474,"binary64"],["#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (*.f64 (pow.f64 b #s(literal -1 binary64)) (pow.f64 (pow.f64 c #s(literal -1 binary64)) #s(literal -1 binary64))))","fresh",59.0057137210855,"binary64"],["#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (*.f64 (/.f64 #s(literal -1 binary64) a) (neg.f64 b)))","fresh",62.43940561905425,"binary64"],["#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (exp.f64 (*.f64 (log.f64 (/.f64 b c)) #s(literal -1 binary64))))","fresh",61.343120751135174,"binary64"]],"compiler":[[1568,290],[25,17],[28,14],[64,17],[52,23],[23,18],[26,19],[15,12],[22,17],[42,20],[25,19],[30,21],[41,23],[30,16],[20,15],[22,17],[24,18],[15,12],[20,16],[27,19],[22,17],[22,17],[23,18],[26,21],[20,15],[20,15],[22,17],[22,17],[26,19],[23,18],[24,19]],"count":[[1444,30]],"kept":[{"done":[4,4],"fresh":[23,17],"new":[1412,5],"picked":[5,4]}],"memory":[[-3171392,72143056]],"min-error":[[5.563757474805276,"binary64"]],"time":57.408935546875,"type":"prune"},{"accuracy":[9.391472716365232],"baseline":[29.604698306053503],"branch":[["a",29.6046983060535,1,"binary64"],["b",9.391472716365232,3,"binary64"],["c",29.604698306053482,1,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",14.12117589017118,5,"binary64"]],"compiler":[[1,3],[1,3],[1,3],[17,14]],"count":[[60,3]],"inputs":[["#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 b a))","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 c b))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (/.f64 #s(literal -1 binary64) b) c))","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (*.f64 (/.f64 #s(literal -1 binary64) a) (neg.f64 b)))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) #s(approx (+ (sqrt (+ (* c (* a -4)) (* b b))) b) (*.f64 #s(literal 2 binary64) b)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (*.f64 #s(literal 2 binary64) b)))","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 #s(literal 1 binary64) (/.f64 a b)))","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 #s(literal 1 binary64) (/.f64 b c)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (fma.f64 a (/.f64 c b) (neg.f64 b)) a))","(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (*.f64 (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1 binary64) a)) b))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (*.f64 (/.f64 (*.f64 a c) b) #s(literal 2 binary64))))","(/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (*.f64 #s(literal -2 binary64) (/.f64 (*.f64 a c) b))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (*.f64 #s(literal -2 binary64) (/.f64 (*.f64 c a) b))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))))","(/.f64 (+.f64 (sqrt.f64 #s(approx (+ (* (* -4 a) c) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (* (- (+ (* -4 (* c a)) (* b b)) (* b b)) (/ 1/2 a)) (*.f64 #s(literal -2 binary64) c)) (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))","(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) (neg.f64 b)))","(/.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (/.f64 c b)) (/.f64 a b) #s(literal -2 binary64)) b)) (*.f64 #s(literal 2 binary64) a))","(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal 1/2 binary64)) a) (*.f64 a (*.f64 b #s(literal 1/2 binary64)))) (*.f64 a a))","(/.f64 (*.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 1/2 binary64)) (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) a))","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a (*.f64 a (*.f64 #s(literal -1/2 binary64) b))) (*.f64 a a))","(/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)))","(/.f64 (-.f64 (*.f64 (*.f64 b #s(literal -1/2 binary64)) a) (*.f64 a (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1/2 binary64)))) (*.f64 a a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)))))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal 0 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (+.f64 #s(literal 0 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))","(/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(/.f64 (/.f64 (-.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b) (*.f64 (-.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal -1/2 binary64) a))))","(/.f64 (/.f64 (-.f64 (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 b b))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) a))","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (exp.f64 (*.f64 (log.f64 (/.f64 b c)) #s(literal -1 binary64))))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (exp.f64 (*.f64 (log.f64 (/.f64 (neg.f64 b) c)) #s(literal -1 binary64))))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (exp.f64 (log.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a))","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (*.f64 (pow.f64 b #s(literal -1 binary64)) (pow.f64 (pow.f64 c #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 b a) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64))) (fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))"]],"memory":[[-3626832,30431936]],"oracle":[63.99586150820712],"outputs":[["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","(/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))"]],"repr":["binary64"],"time":66.56298828125,"times":[[16.718017578125,"a"],[14.6650390625,"b"],[13.60693359375,"c"],[16.659912109375,"(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"]],"type":"regimes"},{"accuracy":[9.439474992542094],"baseline":[29.676138082230366],"branch":[["b",9.439474992542094,3,"binary64"]],"compiler":[[1,3]],"count":[[32,3]],"inputs":[["#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 b a))","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 c b))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (/.f64 #s(literal -1 binary64) b) c))","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (*.f64 (/.f64 #s(literal -1 binary64) a) (neg.f64 b)))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) #s(approx (+ (sqrt (+ (* c (* a -4)) (* b b))) b) (*.f64 #s(literal 2 binary64) b)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (*.f64 #s(literal 2 binary64) b)))","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 #s(literal 1 binary64) (/.f64 a b)))","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 #s(literal 1 binary64) (/.f64 b c)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (fma.f64 a (/.f64 c b) (neg.f64 b)) a))","(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (*.f64 (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1 binary64) a)) b))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (*.f64 (/.f64 (*.f64 a c) b) #s(literal 2 binary64))))","(/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (*.f64 #s(literal -2 binary64) (/.f64 (*.f64 a c) b))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (*.f64 #s(literal -2 binary64) (/.f64 (*.f64 c a) b))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))))","(/.f64 (+.f64 (sqrt.f64 #s(approx (+ (* (* -4 a) c) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (* (- (+ (* -4 (* c a)) (* b b)) (* b b)) (/ 1/2 a)) (*.f64 #s(literal -2 binary64) c)) (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))","(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))) b))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))"]],"memory":[[-1734240,6374928]],"oracle":[63.50779037218892],"outputs":[["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","(*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (/.f64 #s(literal -1/2 binary64) a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))"]],"repr":["binary64"],"time":11.286865234375,"times":[[8.970947265625,"b"]],"type":"regimes"},{"accuracy":[11.822291394132336],"baseline":[40.3895445300286],"branch":[["b",11.822291394132336,3,"binary64"]],"compiler":[[1,3]],"count":[[29,3]],"inputs":[["#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 b a))","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 c b))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (/.f64 #s(literal -1 binary64) b) c))","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (*.f64 (/.f64 #s(literal -1 binary64) a) (neg.f64 b)))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) #s(approx (+ (sqrt (+ (* c (* a -4)) (* b b))) b) (*.f64 #s(literal 2 binary64) b)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (*.f64 #s(literal 2 binary64) b)))","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 #s(literal 1 binary64) (/.f64 a b)))","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 #s(literal 1 binary64) (/.f64 b c)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (fma.f64 a (/.f64 c b) (neg.f64 b)) a))","(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (*.f64 (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1 binary64) a)) b))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (*.f64 (/.f64 (*.f64 a c) b) #s(literal 2 binary64))))","(/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (*.f64 #s(literal -2 binary64) (/.f64 (*.f64 a c) b))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (*.f64 #s(literal -2 binary64) (/.f64 (*.f64 c a) b))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))))","(/.f64 (+.f64 (sqrt.f64 #s(approx (+ (* (* -4 a) c) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (* (- (+ (* -4 (* c a)) (* b b)) (* b b)) (/ 1/2 a)) (*.f64 #s(literal -2 binary64) c)) (fma.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))","(/.f64 (-.f64 (neg.f64 b) #s(approx (sqrt (- (* b b) (* 4 (* a c)))) (fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b))) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[-3995536,5772384]],"oracle":[63.50779037218892],"outputs":[["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","(/.f64 (+.f64 (sqrt.f64 #s(approx (+ (* (* -4 a) c) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) (*.f64 #s(literal -2 binary64) a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))"]],"repr":["binary64"],"time":9.39404296875,"times":[[7.509033203125,"b"]],"type":"regimes"},{"accuracy":[12.341907863954225],"baseline":[41.931286932027966],"branch":[["b",12.341907863954225,3,"binary64"]],"compiler":[[1,3]],"count":[[24,3]],"inputs":[["#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 b a))","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 c b))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (/.f64 #s(literal -1 binary64) b) c))","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (*.f64 (/.f64 #s(literal -1 binary64) a) (neg.f64 b)))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) #s(approx (+ (sqrt (+ (* c (* a -4)) (* b b))) b) (*.f64 #s(literal 2 binary64) b)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (*.f64 #s(literal 2 binary64) b)))","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 #s(literal 1 binary64) (/.f64 a b)))","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 #s(literal 1 binary64) (/.f64 b c)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (fma.f64 a (/.f64 c b) (neg.f64 b)) a))","(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (*.f64 (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1 binary64) a)) b))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (*.f64 (/.f64 (*.f64 a c) b) #s(literal 2 binary64))))","(/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (*.f64 #s(literal -2 binary64) (/.f64 (*.f64 a c) b))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (*.f64 #s(literal -2 binary64) (/.f64 (*.f64 c a) b))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))))"]],"memory":[[5042176,5042176]],"oracle":[63.507782306705],"outputs":[["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))"]],"repr":["binary64"],"time":7.6259765625,"times":[[5.962890625,"b"]],"type":"regimes"},{"accuracy":[22.430753174751608],"baseline":[41.931286932027966],"branch":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",31.150515447057494,3,"binary64"],["b",22.430753174751608,2,"binary64"]],"compiler":[[17,14],[1,3]],"count":[[23,2]],"inputs":[["#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 b a))","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 c b))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (/.f64 #s(literal -1 binary64) b) c))","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (*.f64 (/.f64 #s(literal -1 binary64) a) (neg.f64 b)))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) #s(approx (+ (sqrt (+ (* c (* a -4)) (* b b))) b) (*.f64 #s(literal 2 binary64) b)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (*.f64 #s(literal 2 binary64) b)))","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 #s(literal 1 binary64) (/.f64 a b)))","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 #s(literal 1 binary64) (/.f64 b c)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (fma.f64 (/.f64 c b) a (neg.f64 b)) a))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (fma.f64 a (/.f64 c b) (neg.f64 b)) a))","(fma.f64 (/.f64 b a) #s(literal -1/2 binary64) #s(approx (* (sqrt (+ (* -4 (* c a)) (* b b))) (/ -1/2 a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 b b)))))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (*.f64 (-.f64 (/.f64 c (*.f64 b b)) (/.f64 #s(literal 1 binary64) a)) b))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))))","(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (*.f64 (/.f64 (*.f64 a c) b) #s(literal 2 binary64))))","(/.f64 #s(approx (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (*.f64 #s(literal -2 binary64) (/.f64 (*.f64 a c) b))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (*.f64 #s(literal -2 binary64) (/.f64 (*.f64 c a) b))) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[52384,8233216]],"oracle":[63.336298195409576],"outputs":[["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a)))"]],"repr":["binary64"],"time":13.79296875,"times":[[5.62109375,"(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"],[6.4150390625,"b"]],"type":"regimes"},{"accuracy":[22.450772448277416],"baseline":[41.931286932027966],"branch":[["b",22.450772448277416,2,"binary64"]],"compiler":[[1,3]],"count":[[11,2]],"inputs":[["#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 b a))","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 c b))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (- (neg (sqrt (+ (* -4 (* c a)) (* b b)))) b) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 (/.f64 #s(literal -1 binary64) b) c))","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (*.f64 (/.f64 #s(literal -1 binary64) a) (neg.f64 b)))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) #s(approx (+ (sqrt (+ (* c (* a -4)) (* b b))) b) (*.f64 #s(literal 2 binary64) b)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- b (sqrt (+ (* -4 (* c a)) (* b b)))) (*.f64 #s(literal 2 binary64) b)))","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 #s(literal 1 binary64) (/.f64 a b)))","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 #s(literal 1 binary64) (/.f64 b c)))"]],"memory":[[-4965936,3171200]],"oracle":[63.23831393331806],"outputs":[["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))"]],"repr":["binary64"],"time":4.485107421875,"times":[[3.575927734375,"b"]],"type":"regimes"},{"accuracy":[43.03389990877592],"baseline":[43.03389990877592],"branch":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",43.03389990877597,1,"binary64"],["a",43.03389990877593,1,"binary64"],["c",43.03389990877592,1,"binary64"],["b",43.03389990877595,1,"binary64"]],"compiler":[[17,14],[1,3],[1,3],[1,3]],"count":[[3,1]],"inputs":[["#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 b a))","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 c b))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))"]],"memory":[[-1258640,7038176]],"oracle":[63.165299584227505],"outputs":[["#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))"]],"repr":["binary64"],"time":7.154052734375,"times":[[1.697021484375,"(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"],[1.571044921875,"a"],[1.5771484375,"c"],[1.544921875,"b"]],"type":"regimes"},{"accuracy":[59.005713721085485],"baseline":[59.0057137210855],"branch":[["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",59.00571372108552,1,"binary64"],["b",59.00571372108555,1,"binary64"],["a",59.005713721085485,1,"binary64"],["c",59.00571372108553,1,"binary64"]],"compiler":[[17,14],[1,3],[1,3],[1,3]],"count":[[2,1]],"inputs":[["#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 b a))","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 c b))"]],"memory":[[6578032,6578032]],"oracle":[63.00496128085708],"outputs":[["#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 c b))"]],"repr":["binary64"],"time":6.02294921875,"times":[[1.325927734375,"(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"],[1.27001953125,"b"],[1.283935546875,"a"],[1.382080078125,"c"]],"type":"regimes"},{"accuracy":[62.43940561905425],"baseline":[62.43940561905425],"branch":[["b",62.439405619054256,1,"binary64"],["c",62.43940561905426,1,"binary64"],["(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",62.43940561905425,1,"binary64"],["a",62.439405619054305,1,"binary64"]],"compiler":[[1,3],[1,3],[17,14],[1,3]],"count":[[1,1]],"inputs":[["#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 b a))"]],"link":["."],"memory":[[-2962016,6228928]],"name":["quadm (p42, negative)"],"oracle":[62.43940561905425],"outputs":[["#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 b a))"]],"repr":["binary64"],"time":5.341064453125,"times":[[1.071044921875,"b"],[1.055908203125,"c"],[1.139892578125,"(/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"],[1.369140625,"a"]],"type":"regimes"},{"bstep":[[17.26513671875,9.608324616917976e+126,1.1980464686503454e+135],[21.55712890625,-2.5613947582151125e-158,-9.259265024436073e-162]],"compiler":[[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[19,17],[1,3]],"memory":[[-840016,15140704]],"method":["binary-search","binary-search"],"mixsample":[[2.467529296875,"ival-div",0],[0.632568359375,"adjust",800],[0.01416015625,"ival-mult",800],[0.01904296875,"ival-sqrt",1600],[0.10498046875,"ival-mult",400],[7.577880859375,"ival-mult",0],[0.009765625,"ival-sub",1600],[0.111572265625,"ival-assert",0],[3.4140625,"ival-sub",0],[0.255615234375,"ival-true",0],[0.1728515625,"ival-sub",400],[2.136474609375,"ival-sqrt",0],[0.302734375,"exact",0],[0.093994140625,"adjust",2000],[0.227294921875,"ival-sqrt",400],[1.521484375,"ival-neg",0]],"outcomes":[[3.47900390625,1,"valid",25],[1.18896484375,2,"valid",6],[4.2978515625,0,"invalid",52],[18.443115234375,0,"valid",241]],"stop":[["predicate-same",1],["narrow-enough",1]],"time":45.843994140625,"type":"bsearch"},{"bstep":[[1.0400390625,9.608324616917976e+126,1.1980464686503454e+135],[1.119140625,-2.5613947582151125e-158,-9.259265024436073e-162]],"compiler":[[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[19,17],[1,3]],"memory":[[1400064,1400064]],"method":["binary-search","binary-search"],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":2.992919921875,"type":"bsearch"},{"bstep":[[14.97998046875,4.7777207163861344e-42,3.0225774677824295e-40],[0.964111328125,-2.5613947582151125e-158,-9.259265024436073e-162]],"compiler":[[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[19,17],[1,3]],"memory":[[-1507616,6346912]],"method":["binary-search","binary-search"],"mixsample":[[1.09912109375,"ival-sub",0],[0.82470703125,"ival-div",0],[0.08251953125,"ival-true",0],[2.9853515625,"ival-mult",0],[1.909912109375,"ival-sqrt",0],[0.11767578125,"exact",0],[0.040771484375,"ival-assert",0],[0.56396484375,"ival-neg",0]],"outcomes":[[0.95849609375,0,"invalid",12],[9.833251953125,0,"valid",112]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":18.794921875,"type":"bsearch"},{"bstep":[[3.130126953125,4.7777207163861344e-42,3.0225774677824295e-40],[1.109130859375,-2.5613947582151125e-158,-9.259265024436073e-162]],"compiler":[[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[19,17],[1,3]],"memory":[[2146432,2146432]],"method":["binary-search","binary-search"],"mixsample":[[0.18798828125,"ival-sub",0],[0.14453125,"ival-div",0],[0.01416015625,"ival-true",0],[0.475830078125,"ival-mult",0],[0.138427734375,"ival-sqrt",0],[0.02587890625,"exact",0],[0.007080078125,"ival-assert",0],[0.0966796875,"ival-neg",0]],"outcomes":[[0.450439453125,0,"invalid",5],[1.234130859375,0,"valid",16]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":5.444091796875,"type":"bsearch"},{"bstep":[[18.39697265625,-7.388757949674414e-308,2.4784084176596646e-307]],"compiler":[[25,19],[22,18],[25,19],[22,18],[25,19],[22,18],[25,19],[22,18],[25,19],[22,18],[25,19],[22,18],[25,19],[22,18],[19,17],[1,3]],"memory":[[-2200208,7089328]],"method":["binary-search"],"mixsample":[[1.48828125,"ival-sub",0],[1.10693359375,"ival-div",0],[0.100341796875,"ival-true",0],[4.568115234375,"ival-mult",0],[1.150146484375,"ival-sqrt",0],[0.156494140625,"exact",0],[0.06103515625,"ival-assert",0],[0.7578125,"ival-neg",0]],"outcomes":[[4.895263671875,0,"invalid",50],[8.695068359375,0,"valid",112]],"stop":[["narrow-enough",1]],"time":21.68408203125,"type":"bsearch"},{"bstep":[[22.196044921875,-4.6368870474170235e-210,-2.569426610781117e-219]],"compiler":[[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[19,17],[1,3]],"memory":[[630272,8545648]],"method":["binary-search"],"mixsample":[[0.28076171875,"adjust",800],[1.396484375,"ival-div",0],[0.060302734375,"ival-mult",400],[5.401611328125,"ival-mult",0],[0.080322265625,"ival-assert",0],[1.761962890625,"ival-sub",0],[0.117431640625,"ival-true",0],[0.043701171875,"ival-sub",400],[1.277587890625,"ival-sqrt",0],[0.218994140625,"exact",0],[0.881591796875,"ival-neg",0],[0.076171875,"ival-sqrt",400]],"outcomes":[[1.584716796875,1,"valid",11],[3.69580078125,0,"invalid",47],[11.174072265625,0,"valid",133]],"stop":[["narrow-enough",1]],"time":26.279052734375,"type":"bsearch"},{"egraph":[[6,4568,443,0.061722228],[5,1388,443,0.022119474],[4,675,443,0.006931264],[3,407,443,0.003383808],[2,221,443,0.00241771],[1,127,443,0.00172606],[0,85,443,0.001430222]],"inputs":[["(if (<=.f64 b #s(literal -8903894453031763/989321605892418136242010084078588760140525396404847359656252224371588900426127468681265604244972179958390685704064557357405460137227004839870184620407572671666427088594796544 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (if (<=.f64 b #s(literal 1800000000000000078058036195597047924105592170313145973762740256848876476073983515351609532769080294059523067440291506840888208785408 binary64)) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))))","(if (<=.f64 b #s(literal -8903894453031763/989321605892418136242010084078588760140525396404847359656252224371588900426127468681265604244972179958390685704064557357405460137227004839870184620407572671666427088594796544 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (if (<=.f64 b #s(literal 1750000000000000102157761543315671623288685787900190011211379207802261019259679576088990448968079582389602707712449392188615529857024 binary64)) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (/.f64 #s(literal -1/2 binary64) a)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))))","(if (<=.f64 b #s(literal -8903894453031763/989321605892418136242010084078588760140525396404847359656252224371588900426127468681265604244972179958390685704064557357405460137227004839870184620407572671666427088594796544 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (if (<=.f64 b #s(literal 8238696027695019/196159429230833773869868419475239575503198607639501078528 binary64)) (/.f64 (+.f64 (sqrt.f64 #s(approx (+ (* (* -4 a) c) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) (*.f64 #s(literal -2 binary64) a)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))))","(if (<=.f64 b #s(literal -8903894453031763/989321605892418136242010084078588760140525396404847359656252224371588900426127468681265604244972179958390685704064557357405460137227004839870184620407572671666427088594796544 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (if (<=.f64 b #s(literal 7846377169233351/196159429230833773869868419475239575503198607639501078528 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))))","(if (<=.f64 b #s(literal -20240225330731/101201126653655309176247673359458653524778324882071059178450679013715169783997673445980191850718562247593538932158405955694904368692896738433506699970369254960758712138283180682233453871046608170619883839236372534281003741712346349309051677824579778170405028256179384776166707307615251266093163754323003131653853870546747392 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a))))","(if (<=.f64 b #s(literal -8266848337882815/3179557053031851899185109992371205233166102563054994659612778573877352351101699863205638981281067986842598872467724437926239395930347139873677900339284338973090723790890700606566943304973513615002138622348731328001828550356615286489088 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 c b))","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 b a))"]],"memory":[[-1840160,13982384]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 b #s(literal -8903894453031763/989321605892418136242010084078588760140525396404847359656252224371588900426127468681265604244972179958390685704064557357405460137227004839870184620407572671666427088594796544 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (if (<=.f64 b #s(literal 1800000000000000078058036195597047924105592170313145973762740256848876476073983515351609532769080294059523067440291506840888208785408 binary64)) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))))","(if (<=.f64 b #s(literal -8903894453031763/989321605892418136242010084078588760140525396404847359656252224371588900426127468681265604244972179958390685704064557357405460137227004839870184620407572671666427088594796544 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (if (<=.f64 b #s(literal 1750000000000000102157761543315671623288685787900190011211379207802261019259679576088990448968079582389602707712449392188615529857024 binary64)) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (/.f64 #s(literal -1/2 binary64) a)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))))","(if (<=.f64 b #s(literal -8903894453031763/989321605892418136242010084078588760140525396404847359656252224371588900426127468681265604244972179958390685704064557357405460137227004839870184620407572671666427088594796544 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (if (<=.f64 b #s(literal 8238696027695019/196159429230833773869868419475239575503198607639501078528 binary64)) (/.f64 (+.f64 (sqrt.f64 #s(approx (+ (* (* -4 a) c) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) (*.f64 #s(literal -2 binary64) a)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))))","(if (<=.f64 b #s(literal -8903894453031763/989321605892418136242010084078588760140525396404847359656252224371588900426127468681265604244972179958390685704064557357405460137227004839870184620407572671666427088594796544 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (if (<=.f64 b #s(literal 7846377169233351/196159429230833773869868419475239575503198607639501078528 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))))","(if (<=.f64 b #s(literal -8903894453031763/989321605892418136242010084078588760140525396404847359656252224371588900426127468681265604244972179958390685704064557357405460137227004839870184620407572671666427088594796544 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) (if (<=.f64 b #s(literal 7846377169233351/196159429230833773869868419475239575503198607639501078528 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* (* -4 a) c) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))))","(if (<=.f64 b #s(literal -20240225330731/101201126653655309176247673359458653524778324882071059178450679013715169783997673445980191850718562247593538932158405955694904368692896738433506699970369254960758712138283180682233453871046608170619883839236372534281003741712346349309051677824579778170405028256179384776166707307615251266093163754323003131653853870546747392 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (-.f64 (/.f64 c b) (/.f64 b a))))","(if (<=.f64 b #s(literal -8266848337882815/3179557053031851899185109992371205233166102563054994659612778573877352351101699863205638981281067986842598872467724437926239395930347139873677900339284338973090723790890700606566943304973513615002138622348731328001828550356615286489088 binary64)) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b))) #s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)))","#s(approx (/ (- (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 c (neg.f64 b)))","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 c b))","#s(approx (* (/ 1/2 a) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 b a))"]],"stop":[["node limit",1]],"time":135.7919921875,"type":"simplify"},{"compiler":[[443,87]],"memory":[[2098448,2098448]],"stop":[["fuel",1]],"time":4.343994140625,"type":"soundness"},{"compiler":[[443,87],[443,87],[105,28],[105,28],[17,14],[17,14]],"memory":[[4998848,47093648]],"remove-preprocessing":[[],[],[],[],[],[],[],[],[],[]],"time":89.3798828125,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.02001953125,"type":"end"}]