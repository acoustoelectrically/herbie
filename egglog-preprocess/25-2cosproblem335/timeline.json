[{"memory":[[27264,27264]],"time":0.04296875,"type":"start"},{"compiler":[[27,19]],"memory":[[4352000,12656896]],"method":["search"],"sampling":[[12,{"invalid":0.4790512532736102,"precondition":0.4942799140699208,"unknown":0.02666883265646902,"valid":0.0}],[11,{"invalid":0.47510031510228146,"precondition":0.4942799140699208,"unknown":0.030619770827797765,"valid":0.0}],[10,{"invalid":0.46028429695979867,"precondition":0.4942799140699208,"unknown":0.045435788970280555,"valid":0.0}],[9,{"invalid":0.44645601336014806,"precondition":0.4942799140699208,"unknown":0.05926407256993116,"valid":0.0}],[8,{"invalid":0.41879944616084686,"precondition":0.4942799140699208,"unknown":0.08692063976923237,"valid":0.0}],[7,{"invalid":0.3950938171328744,"precondition":0.4942799140699208,"unknown":0.11062626879720483,"valid":0.0}],[6,{"invalid":0.34768255907692946,"precondition":0.4942799140699208,"unknown":0.15803752685314976,"valid":0.0}],[5,{"invalid":0.3160750537062995,"precondition":0.4942799140699208,"unknown":0.1896450322237797,"valid":0.0}],[4,{"invalid":0.2528600429650396,"precondition":0.4942799140699208,"unknown":0.2528600429650396,"valid":0.0}],[3,{"invalid":0.2528600429650396,"precondition":0.4942799140699208,"unknown":0.2528600429650396,"valid":0.0}],[2,{"invalid":0.0,"precondition":0.4942799140699208,"unknown":0.5057200859300792,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.4942799140699208,"unknown":0.5057200859300792,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.4942799140699208,"unknown":0.5057200859300792,"valid":0.0}]],"time":46.721923828125,"type":"analyze"},{"bogosity":[{"invalid":0.499308382889549,"precondition":0.4942799140699208,"valid":0.006411703040530234}],"memory":[[-8753880,1808249888]],"mixsample":[[297.908935546875,"adjust",800],[1801.15478515625,"ival-cos",1600],[16.83349609375,"ival-assert",0],[301.417724609375,"ival-sub",0],[131.662353515625,"ival-and",0],[634.900390625,"ival-cos",0],[0.03369140625,"ival-sub",400],[666.2919921875,"const",0],[242.59521484375,"ival-cos",400],[170.521240234375,"adjust",2000],[248.675537109375,"ival-add",0],[0.031982421875,"ival-sub",800],[294.724609375,"ival-mult",0],[238.723876953125,"ival-fabs",0],[4.947509765625,"ival-add",400],[230.3837890625,"ival-<=",0],[56.915771484375,"exact",0],[2.255859375,"ival-add",800],[182.775634765625,"ival-<",0]],"outcomes":[[551.654296875,1,"valid",2492],[3125.44140625,0,"invalid",26084],[3178.13916015625,2,"valid",5645],[19.171142578125,0,"valid",119]],"time":8890.305908203125,"type":"sample"},{"compiler":[[7,6],[20,8],[20,8]],"confusion":[[135,0,0,121]],"explanations":[["-.f64","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","cancellation",135,0,[],[[]]]],"fperrors":[["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",135,0,false,0,false],["eps",0,0,false,0,false],["(+.f64 x eps)",0,0,false,0,false],["(cos.f64 x)",0,0,false,0,false],["(cos.f64 (+.f64 x eps))",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,135],[0,121]],"maybe-confusion":[[135,0,0,0,0,121]],"memory":[[2820912,46293120]],"mixsample":[[13.476806640625,"adjust",800],[3.5556640625,"ival-add",0],[96.109619140625,"ival-cos",1600],[0.238037109375,"ival-assert",0],[0.22509765625,"ival-add",400],[8.103271484375,"ival-sub",0],[0.567138671875,"ival-true",0],[8.702392578125,"ival-cos",0],[14.2236328125,"ival-cos",400],[0.15869140625,"ival-add",800],[8.01513671875,"adjust",2000]],"outcomes":[[27.127197265625,1,"valid",156],[157.433837890625,2,"valid",352],[0.275146484375,0,"valid",4]],"time":238.93701171875,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[7,6]],"egraph":[[0,183,7,0.001075172],[10,183,7,0.000973499],[9,175,7,0.000950161],[8,159,7,0.000921818],[7,110,7,0.000773278],[6,80,7,0.000819895],[5,47,7,0.000453908],[4,32,7,0.000227653],[3,24,7,0.000179994],[2,18,7,0.000125188],[1,13,7,0.000120599],[0,10,7,0.000142692],[0,6,7,0.000107437]],"inputs":[["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"memory":[[-2443760,14566144]],"method":["egg-herbie"],"outputs":[["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[[]],"time":292.703125,"type":"preprocess"},{"compiler":[[0,2]],"memory":[[45904,45904]],"time":0.14892578125,"type":"eval"},{"alts":[["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","next",31.25478915018141,"binary64"]],"compiler":[[7,6]],"memory":[[302176,302176]],"time":0.9951171875,"type":"prune"},{"egraph":[[0,183,18,0.000981185],[10,183,18,0.001434935],[9,175,18,0.001869798],[8,159,18,0.002609862],[7,110,18,0.001309822],[6,80,18,0.001410003],[5,47,18,0.000641451],[4,32,18,0.000334895],[3,24,18,0.000269743],[2,18,18,0.000220073],[1,13,18,0.000217831],[0,10,18,0.000251461],[0,6,18,0.000167839]],"inputs":[["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(cos.f64 (+.f64 x eps))","(+.f64 x eps)","x","eps","(cos.f64 x)"]],"locations":[["(cos.f64 x)","cost-diff",0],["(+.f64 x eps)","cost-diff",0],["(cos.f64 (+.f64 x eps))","cost-diff",0],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","cost-diff",0]],"memory":[[819664,819664]],"method":["egg-herbie"],"outputs":[["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(cos.f64 (+.f64 x eps))","(cos.f64 (+.f64 eps x))","(+.f64 x eps)","(+.f64 eps x)","x","eps","(cos.f64 x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":22.760986328125,"type":"simplify"},{"compiler":[[20,8]],"locations":[["(+.f64 x eps)","accuracy",0.0],["(cos.f64 (+.f64 x eps))","accuracy",0.0],["(cos.f64 x)","accuracy",0.0],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","accuracy",31.25478915018141]],"memory":[[-2746096,13118832]],"mixsample":[[9.111572265625,"adjust",800],[2.42578125,"ival-add",0],[62.98583984375,"ival-cos",1600],[0.157958984375,"ival-assert",0],[0.16845703125,"ival-add",400],[5.6396484375,"ival-sub",0],[0.349853515625,"ival-true",0],[5.966552734375,"ival-cos",0],[9.420654296875,"ival-cos",400],[0.1162109375,"ival-add",800],[5.579345703125,"adjust",2000]],"outcomes":[[17.372802734375,1,"valid",78],[111.36767578125,2,"valid",176],[0.118896484375,0,"valid",2]],"time":142.90185546875,"type":"localize"},{"count":[[4,33]],"inputs":[["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(cos.f64 (+.f64 x eps))","(+.f64 x eps)","(cos.f64 x)"]],"memory":[[1903184,1903184]],"outputs":[["(- (cos eps) 1)","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(cos eps)","(+ (cos eps) (* -1 (* x (sin eps))))","(+ (cos eps) (* x (- (* -1/2 (* x (cos eps))) (sin eps))))","(+ (cos eps) (* x (- (* x (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps))))) (sin eps))))","eps","(+ eps x)","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(- (cos (+ eps x)) (cos x))","(cos (+ eps x))","x","(* x (+ 1 (/ eps x)))","(cos x)","(- (cos (- eps (* -1 x))) (cos x))","(cos (- eps (* -1 x)))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(* -1 (* eps (sin x)))","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(+ (cos x) (* -1 (* eps (sin x))))","(+ (cos x) (* eps (- (* -1/2 (* eps (cos x))) (sin x))))","(+ (cos x) (* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x))))","(* eps (+ 1 (/ x eps)))","(- (cos (- x (* -1 eps))) (cos x))","(cos (- x (* -1 eps)))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))"]],"series":[[0.9169921875,"((- (cos (+ x eps)) (cos x)) (cos (+ x eps)) (+ x eps) (cos x))","eps","-inf"],[1.198974609375,"((- (cos (+ x eps)) (cos x)) (cos (+ x eps)) (+ x eps) (cos x))","eps","inf"],[1.18408203125,"((- (cos (+ x eps)) (cos x)) (cos (+ x eps)) (+ x eps) (cos x))","eps","0"],[0.597900390625,"((- (cos (+ x eps)) (cos x)) (cos (+ x eps)) (+ x eps) (cos x))","x","-inf"],[0.72412109375,"((- (cos (+ x eps)) (cos x)) (cos (+ x eps)) (+ x eps) (cos x))","x","inf"],[1.39306640625,"((- (cos (+ x eps)) (cos x)) (cos (+ x eps)) (+ x eps) (cos x))","x","0"]],"time":6.626953125,"type":"series"},{"count":[[33,31]],"egraph":[[0,8397,272,0.087498291],[3,2426,292,0.033050446],[2,628,293,0.009428897],[1,277,293,0.002264271],[0,105,296,0.00145708]],"inputs":[["(- (cos eps) 1)","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(cos eps)","(+ (cos eps) (* -1 (* x (sin eps))))","(+ (cos eps) (* x (- (* -1/2 (* x (cos eps))) (sin eps))))","(+ (cos eps) (* x (- (* x (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps))))) (sin eps))))","eps","(+ eps x)","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(- (cos (+ eps x)) (cos x))","(cos (+ eps x))","x","(* x (+ 1 (/ eps x)))","(cos x)","(- (cos (- eps (* -1 x))) (cos x))","(cos (- eps (* -1 x)))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(* -1 (* eps (sin x)))","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(+ (cos x) (* -1 (* eps (sin x))))","(+ (cos x) (* eps (- (* -1/2 (* eps (cos x))) (sin x))))","(+ (cos x) (* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x))))","(* eps (+ 1 (/ x eps)))","(- (cos (- x (* -1 eps))) (cos x))","(cos (- x (* -1 eps)))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))"]],"memory":[[-2096896,39458496]],"method":["egg-herbie"],"outputs":[["(- (cos eps) 1)","(-.f64 (cos.f64 eps) #s(literal 1 binary64))","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(-.f64 (cos.f64 eps) (fma.f64 (sin.f64 eps) x #s(literal 1 binary64)))","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(fma.f64 (-.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) (cos.f64 eps) #s(literal 1/2 binary64)) x) (sin.f64 eps)) x (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(fma.f64 (fma.f64 (sin.f64 eps) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) x #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1/2 binary64) (cos.f64 eps) #s(literal 1/2 binary64)) x)) x (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(cos eps)","(cos.f64 eps)","(+ (cos eps) (* -1 (* x (sin eps))))","(fma.f64 (neg.f64 x) (sin.f64 eps) (cos.f64 eps))","(+ (cos eps) (* x (- (* -1/2 (* x (cos eps))) (sin eps))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (cos.f64 eps) (neg.f64 (sin.f64 eps))) x (cos.f64 eps))","(+ (cos eps) (* x (- (* x (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps))))) (sin eps))))","(fma.f64 (fma.f64 (sin.f64 eps) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) x #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 eps) x) #s(literal -1/2 binary64))) x (cos.f64 eps))","eps","(+ eps x)","(+.f64 eps x)","1","#s(literal 1 binary64)","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(- (cos (+ eps x)) (cos x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(cos (+ eps x))","(cos.f64 (+.f64 eps x))","x","(* x (+ 1 (/ eps x)))","(+.f64 eps x)","(cos x)","(cos.f64 x)","(- (cos (- eps (* -1 x))) (cos x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(cos (- eps (* -1 x)))","(cos.f64 (+.f64 eps x))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(+.f64 eps x)","(* -1 (* eps (sin x)))","(*.f64 (neg.f64 (sin.f64 x)) eps)","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(*.f64 (-.f64 (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps) (sin.f64 x)) eps)","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps)","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(*.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 (cos.f64 x) #s(literal -1/2 binary64))) eps) (sin.f64 x)) eps)","(+ (cos x) (* -1 (* eps (sin x))))","(fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x))","(+ (cos x) (* eps (- (* -1/2 (* eps (cos x))) (sin x))))","(fma.f64 (-.f64 (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps) (sin.f64 x)) eps (cos.f64 x))","(+ (cos x) (* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x))))","(fma.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps (cos.f64 x))","(* eps (+ 1 (/ x eps)))","(+.f64 eps x)","(- (cos (- x (* -1 eps))) (cos x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(cos (- x (* -1 eps)))","(cos.f64 (+.f64 eps x))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))","(+.f64 eps x)"]],"stop":[["iter limit",1],["node limit",1]],"time":272.570068359375,"type":"simplify"},{"count":[[4,228]],"egraph":[[0,8343,16,0.07496115],[3,4790,16,0.044153421],[2,385,16,0.013888359],[1,54,16,0.001902593],[0,10,16,0.000761958],[0,6,16,9.6588e-5]],"inputs":[["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(cos.f64 (+.f64 x eps))","(+.f64 x eps)","(cos.f64 x)"]],"memory":[[3265136,51651424]],"outputs":[["(*.f64 (pow.f64 (/.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 9 binary64)) (pow.f64 (cos.f64 x) #s(literal 9 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal 2 binary64) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))) #s(literal -1 binary64)) (pow.f64 (/.f64 (*.f64 (cos.f64 (/.f64 (+.f64 #s(literal 0 binary64) eps) #s(literal -2 binary64))) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))) (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 4 binary64)) (pow.f64 (*.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x))))","(*.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 6 binary64)))) (fma.f64 (*.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x)) (-.f64 (*.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x)) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 4 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))))","(*.f64 (*.f64 #s(literal -2 binary64) (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps)))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))))","(*.f64 (/.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) #s(literal 2 binary64)) (/.f64 (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)) (*.f64 (cos.f64 (/.f64 (+.f64 #s(literal 0 binary64) eps) #s(literal -2 binary64))) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) #s(literal -2 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))))","(*.f64 (pow.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))","(*.f64 (pow.f64 (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (neg.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (neg.f64 (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)))","(*.f64 #s(literal 1/2 binary64) (pow.f64 (/.f64 (*.f64 (cos.f64 (/.f64 (+.f64 #s(literal 0 binary64) eps) #s(literal -2 binary64))) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (/.f64 (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))))","(*.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (*.f64 (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)) (pow.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (pow.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) (/.f64 (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(*.f64 (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) (*.f64 (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)) (pow.f64 (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))) #s(literal -2 binary64))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) #s(literal -2 binary64)))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))) (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(literal -2 binary64)))","(*.f64 #s(literal -2 binary64) (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))))","(pow.f64 (/.f64 (pow.f64 (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 2 binary64)) (*.f64 (cos.f64 (/.f64 (+.f64 #s(literal 0 binary64) eps) #s(literal -2 binary64))) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64))) (fma.f64 (cos.f64 x) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 9 binary64)) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) (pow.f64 (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64))) (+.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (+.f64 #s(literal 0 binary64) eps) (fma.f64 #s(literal 2 binary64) x eps)))) (cos.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 (+.f64 #s(literal 0 binary64) eps) (fma.f64 #s(literal 2 binary64) x eps))))) #s(literal -2 binary64)) #s(literal 2 binary64))","(/.f64 (*.f64 #s(literal -2 binary64) (-.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (+.f64 #s(literal 0 binary64) eps) (fma.f64 #s(literal 2 binary64) x eps)))) (cos.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 (+.f64 #s(literal 0 binary64) eps) (fma.f64 #s(literal 2 binary64) x eps)))))) #s(literal 2 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))) #s(literal 2 binary64))) (+.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))) #s(literal 2 binary64))) (+.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64)) (pow.f64 (fma.f64 (sin.f64 eps) (sin.f64 x) (cos.f64 x)) #s(literal 2 binary64))) (fma.f64 (cos.f64 eps) (cos.f64 x) (fma.f64 (sin.f64 eps) (sin.f64 x) (cos.f64 x))))","(/.f64 (-.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (sin.f64 eps) (sin.f64 x) (cos.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (fma.f64 (sin.f64 eps) (sin.f64 x) (cos.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (fma.f64 (sin.f64 eps) (sin.f64 x) (cos.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 4 binary64))) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 9 binary64)) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) #s(literal 3 binary64))) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) #s(literal 1 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))) (*.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (pow.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (*.f64 (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 4 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (*.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (fma.f64 (cos.f64 x) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 9 binary64)) (pow.f64 (cos.f64 x) #s(literal 9 binary64))) (*.f64 (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) (+.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (pow.f64 (*.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (*.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (+.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 4 binary64))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 (cos.f64 x) #s(literal 6 binary64))) (*.f64 (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))))","(/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x))))))","(/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64))) (neg.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64))) (neg.f64 (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 (pow.f64 (*.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (cos.f64 (-.f64 eps x)) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 (cos.f64 x)))","(fma.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) (cos.f64 (-.f64 eps x)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 (cos.f64 x)))","(fma.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 4 binary64)) (pow.f64 (*.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (*.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 6 binary64)))) (fma.f64 (*.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x)) (-.f64 (*.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x)) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 4 binary64))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (cos.f64 x) #s(literal 3 binary64)))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))))))","(fma.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (cos.f64 x) #s(literal 2 binary64)))) (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))))))","(fma.f64 (/.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (/.f64 (cos.f64 (+.f64 eps x)) (*.f64 (cos.f64 (/.f64 (+.f64 #s(literal 0 binary64) eps) #s(literal -2 binary64))) (cos.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x eps) #s(literal -2 binary64))))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))))))","(fma.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3/2 binary64)) (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3/2 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 (*.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (-.f64 eps x)) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)))","(fma.f64 #s(literal -1 binary64) (cos.f64 x) (cos.f64 (+.f64 eps x)))","(fma.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) (cos.f64 (-.f64 eps x)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (cos.f64 x)))","(fma.f64 (+.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x))) #s(literal 1/2 binary64) (-.f64 (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)) (cos.f64 x)))","(fma.f64 (+.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x))) #s(literal 1/2 binary64) (fma.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps) (neg.f64 (cos.f64 x))))","(fma.f64 (+.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x))) #s(literal 1/2 binary64) (neg.f64 (fma.f64 (sin.f64 eps) (sin.f64 x) (cos.f64 x))))","(fma.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (/.f64 (cos.f64 (+.f64 eps x)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))))))","(fma.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 (cos.f64 eps) (cos.f64 x) (-.f64 (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)) (cos.f64 x)))","(fma.f64 (cos.f64 eps) (cos.f64 x) (fma.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps) (neg.f64 (cos.f64 x))))","(fma.f64 (cos.f64 eps) (cos.f64 x) (neg.f64 (fma.f64 (sin.f64 eps) (sin.f64 x) (cos.f64 x))))","(fma.f64 (cos.f64 x) #s(literal -1 binary64) (cos.f64 (+.f64 eps x)))","(fma.f64 (cos.f64 x) (cos.f64 eps) (-.f64 (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)) (cos.f64 x)))","(fma.f64 (cos.f64 x) (cos.f64 eps) (fma.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps) (neg.f64 (cos.f64 x))))","(fma.f64 (cos.f64 x) (cos.f64 eps) (neg.f64 (fma.f64 (sin.f64 eps) (sin.f64 x) (cos.f64 x))))","(fma.f64 (cos.f64 (+.f64 eps x)) (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(fma.f64 (cos.f64 (+.f64 eps x)) (/.f64 (cos.f64 (+.f64 eps x)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))))))","(-.f64 (+.f64 (cos.f64 (+.f64 eps x)) #s(literal 0 binary64)) (cos.f64 x))","(-.f64 (fma.f64 #s(literal -1 binary64) (cos.f64 x) (*.f64 (cos.f64 eps) (cos.f64 x))) (*.f64 (sin.f64 eps) (sin.f64 x)))","(-.f64 #s(literal 0 binary64) (-.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))))","(-.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))))","(-.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(-.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (fma.f64 (sin.f64 eps) (sin.f64 x) (cos.f64 x)))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (fma.f64 #s(literal -1 binary64) (cos.f64 x) (*.f64 (cos.f64 eps) (cos.f64 x))) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","(+.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x)))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 2 binary64)) (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))))))","(+.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) #s(literal 3 binary64)) (fma.f64 (+.f64 (cos.f64 x) (cos.f64 (+.f64 eps x))) (cos.f64 x) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(+.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 eps x)))","(+.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (-.f64 (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)) (cos.f64 x)))","(+.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (fma.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps) (neg.f64 (cos.f64 x))))","(+.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (neg.f64 (fma.f64 (sin.f64 eps) (sin.f64 x) (cos.f64 x))))","(+.f64 (cos.f64 (+.f64 eps x)) (neg.f64 (cos.f64 x)))","(*.f64 (pow.f64 (*.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (cos.f64 (-.f64 eps x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) (cos.f64 (-.f64 eps x)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (-.f64 eps x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) (cos.f64 (-.f64 eps x)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (cos.f64 (-.f64 eps x)) (*.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) (cos.f64 (-.f64 eps x)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 1 binary64))","(/.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)) #s(literal 2 binary64))) (cos.f64 (-.f64 eps x)))","(/.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)) #s(literal 2 binary64)) (*.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps))))))","(/.f64 (neg.f64 (*.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x)))) (neg.f64 (cos.f64 (-.f64 eps x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) (cos.f64 (-.f64 eps x)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (+.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x))))) #s(literal 4 binary64))","(/.f64 (-.f64 (+.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x))) (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x)))) #s(literal 2 binary64))","(/.f64 (*.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x))) (cos.f64 (-.f64 eps x)))","(/.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 3 binary64))) (fma.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) (cos.f64 (-.f64 eps x)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (cos.f64 (-.f64 eps x)) (*.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) (cos.f64 (-.f64 eps x)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 3 binary64)))))","(fma.f64 (cos.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x))) (cos.f64 (/.f64 (*.f64 x x) (-.f64 eps x))) (*.f64 (sin.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x))) (sin.f64 (/.f64 (*.f64 x x) (-.f64 eps x)))))","(fma.f64 (cos.f64 (*.f64 x (/.f64 x (-.f64 x eps)))) (cos.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))) (*.f64 (sin.f64 (*.f64 x (/.f64 x (-.f64 x eps)))) (sin.f64 (*.f64 eps (/.f64 eps (-.f64 x eps))))))","(fma.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps) (*.f64 (cos.f64 eps) (cos.f64 x)))","(fma.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x) (*.f64 (cos.f64 eps) (cos.f64 x)))","(fma.f64 #s(literal -1 binary64) (*.f64 (sin.f64 eps) (sin.f64 x)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(fma.f64 (+.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 eps x))) #s(literal 1/2 binary64) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","(fma.f64 (sin.f64 eps) (neg.f64 (sin.f64 x)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(fma.f64 (cos.f64 eps) (cos.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","(fma.f64 (cos.f64 x) (cos.f64 eps) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","(-.f64 (*.f64 (cos.f64 (*.f64 x (/.f64 x (-.f64 x eps)))) (cos.f64 (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))) (*.f64 (sin.f64 (*.f64 x (/.f64 x (-.f64 x eps)))) (sin.f64 (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))))","(-.f64 (/.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64)) (cos.f64 (-.f64 eps x))) (/.f64 (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 2 binary64)) (cos.f64 (-.f64 eps x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (fma.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) (cos.f64 (-.f64 eps x)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 3 binary64)) (fma.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) (cos.f64 (-.f64 eps x)) (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64)))))","(-.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (*.f64 (sin.f64 eps) (sin.f64 x)))","(cos.f64 (/.f64 (neg.f64 (*.f64 (-.f64 x eps) (+.f64 eps x))) (-.f64 x eps)))","(cos.f64 (/.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (-.f64 eps x) eps (*.f64 x x))))","(cos.f64 (/.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) (neg.f64 (-.f64 x eps))))","(cos.f64 (/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)))))","(cos.f64 (+.f64 eps x))","(exp.f64 (*.f64 (log.f64 (cos.f64 (+.f64 eps x))) #s(literal 1 binary64)))","(+.f64 (*.f64 (cos.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x))) (cos.f64 (/.f64 (*.f64 x x) (-.f64 eps x)))) (*.f64 (sin.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x))) (sin.f64 (/.f64 (*.f64 x x) (-.f64 eps x)))))","(+.f64 (*.f64 (cos.f64 (*.f64 x (/.f64 x (-.f64 x eps)))) (cos.f64 (*.f64 eps (/.f64 eps (-.f64 x eps))))) (*.f64 (sin.f64 (*.f64 x (/.f64 x (-.f64 x eps)))) (sin.f64 (*.f64 eps (/.f64 eps (-.f64 x eps))))))","(+.f64 (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)) (*.f64 (cos.f64 eps) (cos.f64 x)))","(+.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) (+.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 x #s(literal 9 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 (*.f64 eps x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 x eps) (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 eps #s(literal 4 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 eps eps (*.f64 x x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 x eps) (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 eps eps) (fma.f64 eps eps (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps (+.f64 eps x) (*.f64 x x)))","(*.f64 (/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 (*.f64 (-.f64 eps x) eps) #s(literal 2 binary64)))) (-.f64 (*.f64 x x) (*.f64 (-.f64 eps x) eps)))","(*.f64 (/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (-.f64 eps x) eps) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (*.f64 (-.f64 eps x) eps) (-.f64 (*.f64 (-.f64 eps x) eps) (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(*.f64 (/.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) (*.f64 (-.f64 x eps) (+.f64 eps x))) (+.f64 eps x))","(*.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (pow.f64 (-.f64 eps x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 x eps) #s(literal -1 binary64)) (pow.f64 (pow.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 x eps) #s(literal -1 binary64)) (*.f64 (-.f64 x eps) (+.f64 eps x)))","(*.f64 (pow.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) #s(literal -1 binary64)) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))","(*.f64 (neg.f64 (*.f64 (-.f64 x eps) (+.f64 eps x))) (pow.f64 (neg.f64 (-.f64 x eps)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (neg.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (+.f64 eps x))","(*.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) (pow.f64 (-.f64 x eps) #s(literal -1 binary64)))","(*.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) (/.f64 (+.f64 eps x) (fma.f64 (-.f64 eps x) eps (*.f64 x x))))","(*.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) (*.f64 (+.f64 eps x) (pow.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) #s(literal -1 binary64))))","(*.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) #s(literal -1 binary64)))","(*.f64 (+.f64 eps x) (/.f64 (-.f64 x eps) (-.f64 x eps)))","(*.f64 (+.f64 eps x) (*.f64 (-.f64 x eps) (pow.f64 (-.f64 x eps) #s(literal -1 binary64))))","(pow.f64 (/.f64 (-.f64 eps x) (*.f64 (+.f64 eps x) (-.f64 eps x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (+.f64 eps x) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (+.f64 eps x) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 eps #s(literal 4 binary64))) (pow.f64 (-.f64 x eps) #s(literal -1 binary64))) (fma.f64 eps eps (*.f64 x x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 (-.f64 x eps) #s(literal -1 binary64))) (fma.f64 (*.f64 eps eps) (fma.f64 eps eps (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 x #s(literal 9 binary64))) (pow.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 (*.f64 eps x) #s(literal 3 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 x eps))) #s(literal 2 binary64)) (pow.f64 (*.f64 eps (/.f64 eps (-.f64 x eps))) #s(literal 2 binary64))) (fma.f64 x (/.f64 x (-.f64 x eps)) (*.f64 eps (/.f64 eps (-.f64 x eps)))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (-.f64 x eps) #s(literal -3 binary64))) (*.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (-.f64 x eps) #s(literal -3 binary64)))) (+.f64 (pow.f64 (*.f64 x (/.f64 x (-.f64 x eps))) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 eps (/.f64 eps (-.f64 x eps))) #s(literal 2 binary64)) (*.f64 (*.f64 x (/.f64 x (-.f64 x eps))) (*.f64 eps (/.f64 eps (-.f64 x eps)))))))","(/.f64 (neg.f64 (*.f64 (+.f64 eps x) (-.f64 eps x))) (neg.f64 (-.f64 eps x)))","(/.f64 (neg.f64 (neg.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)))) (neg.f64 (neg.f64 (-.f64 x eps))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)))))","(/.f64 (*.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (-.f64 eps x) eps (*.f64 x x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 eps #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 eps eps (*.f64 x x)) (-.f64 x eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 eps eps) (fma.f64 eps eps (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (-.f64 x eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (-.f64 eps x) eps (*.f64 x x))))","(/.f64 (*.f64 (+.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 x #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 (*.f64 eps x) #s(literal 3 binary64))) (fma.f64 (-.f64 eps x) eps (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x eps)) (*.f64 (-.f64 x eps) (*.f64 eps eps))) (pow.f64 (-.f64 x eps) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (-.f64 x eps) (fma.f64 eps eps (*.f64 x x))))","(/.f64 (*.f64 (+.f64 eps x) (-.f64 eps x)) (-.f64 eps x))","(/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (*.f64 (-.f64 x eps) (fma.f64 (*.f64 eps eps) (fma.f64 eps eps (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (*.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (+.f64 eps x) #s(literal -1 binary64))))","(/.f64 (+.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 x #s(literal 9 binary64))) (*.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)) (-.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) (pow.f64 (*.f64 eps x) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 x eps) (+.f64 eps x))) (neg.f64 (-.f64 x eps)))","(/.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 eps x) (*.f64 (+.f64 eps x) (-.f64 eps x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (+.f64 eps x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 eps x) #s(literal -1 binary64)))","(/.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) (-.f64 x eps))","(/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (-.f64 eps x) eps (*.f64 x x)))","(neg.f64 (/.f64 (neg.f64 (*.f64 (-.f64 x eps) (+.f64 eps x))) (-.f64 x eps)))","(neg.f64 (/.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (-.f64 eps x) eps (*.f64 x x))))","(neg.f64 (/.f64 (*.f64 (-.f64 x eps) (+.f64 eps x)) (neg.f64 (-.f64 x eps))))","(neg.f64 (/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (neg.f64 (fma.f64 (-.f64 eps x) eps (*.f64 x x)))))","(fma.f64 (/.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 eps (+.f64 eps x) (*.f64 x x)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))","(fma.f64 (/.f64 (*.f64 x x) (*.f64 (-.f64 x eps) (+.f64 eps x))) (+.f64 eps x) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))","(fma.f64 (*.f64 x x) (pow.f64 (-.f64 x eps) #s(literal -1 binary64)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))","(fma.f64 x (/.f64 x (-.f64 x eps)) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))","(-.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x)) (/.f64 (*.f64 x x) (-.f64 eps x)))","(-.f64 (*.f64 x (/.f64 x (-.f64 x eps))) (*.f64 eps (/.f64 eps (-.f64 x eps))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (+.f64 eps x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (*.f64 x (/.f64 x (-.f64 x eps))) (neg.f64 (*.f64 eps (/.f64 eps (-.f64 x eps)))))","(+.f64 eps x)","(+.f64 x eps)","(pow.f64 (cos.f64 x) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (cos.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))","(cos.f64 (neg.f64 x))","(cos.f64 x)","(exp.f64 (*.f64 (log.f64 (cos.f64 x)) #s(literal 1 binary64)))","(+.f64 (*.f64 #s(literal 1 binary64) (cos.f64 x)) (*.f64 #s(literal 0 binary64) (sin.f64 x)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":260.0400390625,"type":"rewrite"},{"compiler":[[6613,893]],"memory":[[4433120,22948704]],"time":40.762939453125,"type":"eval"},{"alts":[["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","done",31.25478915018141,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))))","next",31.416010987968896,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) #s(literal 1 binary64)))","next",31.53876676779808,"binary64"],["(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))) #s(literal -2 binary64))","fresh",0.11328125,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","next",31.59359769053274,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps))","next",0.10546875,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps) (sin.f64 x)) eps))","fresh",0.1709950106471134,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","next",12.347635529453676,"binary64"]],"compiler":[[7,6],[24,15],[9,8],[16,14],[12,10],[25,18],[19,14],[13,10],[24,15],[9,8],[16,14],[12,10],[25,18],[19,14],[13,10]],"count":[[252,8]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[251,7],"picked":[1,1]}],"memory":[[-3365216,12228192]],"min-error":[[0.10546875,"binary64"]],"time":15.39599609375,"type":"prune"},{"egraph":[[0,7370,245,0.047506503],[25,7370,245,0.07465016],[24,7356,245,0.0994694],[23,7356,245,0.066963985],[22,7356,245,0.049661569],[21,7342,245,0.057003882],[20,7342,245,0.033398046],[19,7342,245,0.038305712],[18,7274,245,0.03516411],[17,6949,245,0.04060081],[16,6949,245,0.022152821],[15,6937,245,0.028505972],[14,6841,245,0.024687175],[13,6157,245,0.049693619],[12,4427,245,0.099203855],[11,3495,245,0.018173962],[10,3370,245,0.014099007],[9,3336,245,0.016450842],[8,3205,245,0.013855487],[7,2745,245,0.015344289],[6,1962,245,0.014777476],[5,1329,245,0.008808924],[4,839,245,0.006060324],[3,406,245,0.003031507],[2,194,245,0.001445475],[1,107,245,0.000922049],[0,63,245,0.000603801],[0,37,245,0.000601243]],"inputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps))","(*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps)","(fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps))","(sin.f64 x)","x","(fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))","(*.f64 eps eps)","eps","#s(literal 1/6 binary64)","#s(literal -1 binary64)","(*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)","(*.f64 (cos.f64 x) #s(literal -1/2 binary64))","(cos.f64 x)","#s(literal -1/2 binary64)","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(-.f64 (cos.f64 eps) #s(literal 1 binary64))","(cos.f64 eps)","eps","#s(literal 1 binary64)","(-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) #s(literal 1 binary64)))","(cos.f64 (+.f64 x eps))","(+.f64 x eps)","x","eps","#s(approx (cos x) #s(literal 1 binary64))","#s(literal 1 binary64)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","(*.f64 (neg.f64 (sin.f64 x)) eps)","(neg.f64 (sin.f64 x))","(sin.f64 x)","x","eps","(-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))))","(cos.f64 (+.f64 x eps))","(+.f64 x eps)","x","eps","#s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64))","(fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64))","#s(literal -1/720 binary64)","(*.f64 x x)","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)"]],"locations":[["#s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","cost-diff",0],["(+.f64 x eps)","cost-diff",0],["(cos.f64 (+.f64 x eps))","cost-diff",0],["(-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))))","cost-diff",0],["(sin.f64 x)","cost-diff",0],["(neg.f64 (sin.f64 x))","cost-diff",0],["(*.f64 (neg.f64 (sin.f64 x)) eps)","cost-diff",0],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","cost-diff",0],["#s(approx (cos x) #s(literal 1 binary64))","cost-diff",0],["(+.f64 x eps)","cost-diff",0],["(cos.f64 (+.f64 x eps))","cost-diff",0],["(-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) #s(literal 1 binary64)))","cost-diff",0],["(cos.f64 eps)","cost-diff",0],["(-.f64 (cos.f64 eps) #s(literal 1 binary64))","cost-diff",0],["#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","cost-diff",0],["(sin.f64 x)","cost-diff",0],["(fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps))","cost-diff",0],["(*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps)","cost-diff",0],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps))","cost-diff",0]],"memory":[[-1541664,22994592]],"method":["egg-herbie"],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) (sin.f64 x)) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))) eps (sin.f64 x)) (neg.f64 eps)))","(*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps)","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) (sin.f64 x)) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))) eps (sin.f64 x)) (neg.f64 eps))","(fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps))","(sin.f64 x)","x","(fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64))","(*.f64 eps eps)","eps","#s(literal 1/6 binary64)","#s(literal -1 binary64)","(*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)","(*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)","(*.f64 (cos.f64 x) #s(literal -1/2 binary64))","(*.f64 #s(literal -1/2 binary64) (cos.f64 x))","(cos.f64 x)","#s(literal -1/2 binary64)","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(-.f64 (cos.f64 eps) #s(literal 1 binary64))","(cos.f64 eps)","eps","#s(literal 1 binary64)","(-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) #s(literal 1 binary64)))","(-.f64 (cos.f64 (+.f64 eps x)) #s(approx (cos x) #s(literal 1 binary64)))","(cos.f64 (+.f64 x eps))","(cos.f64 (+.f64 eps x))","(+.f64 x eps)","(+.f64 eps x)","x","eps","#s(approx (cos x) #s(literal 1 binary64))","#s(literal 1 binary64)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 eps) (sin.f64 x)))","(*.f64 (neg.f64 (sin.f64 x)) eps)","(*.f64 (neg.f64 eps) (sin.f64 x))","(neg.f64 (sin.f64 x))","(sin.f64 x)","x","eps","(-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))))","(-.f64 (cos.f64 (+.f64 eps x)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))))","(cos.f64 (+.f64 x eps))","(cos.f64 (+.f64 eps x))","(+.f64 x eps)","(+.f64 eps x)","x","eps","#s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","#s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64))","(fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64))","(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64))","#s(literal -1/720 binary64)","(*.f64 x x)","#s(literal 1/24 binary64)","#s(literal -1/2 binary64)","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":1000.8740234375,"type":"simplify"},{"compiler":[[191,34]],"locations":[["(cos.f64 (+.f64 x eps))","accuracy",0.0],["(fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64))","accuracy",0.01171875],["#s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","accuracy",0.14688328630021075],["(-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))))","accuracy",31.25478915018141],["(sin.f64 x)","accuracy",0.0],["(neg.f64 (sin.f64 x))","accuracy",0.0],["(*.f64 (neg.f64 (sin.f64 x)) eps)","accuracy",0.0078125],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","accuracy",12.35154177945362],["(+.f64 x eps)","accuracy",0.0],["(cos.f64 (+.f64 x eps))","accuracy",0.0],["#s(approx (cos x) #s(literal 1 binary64))","accuracy",0.6542473730176315],["(-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) #s(literal 1 binary64)))","accuracy",31.25478915018141],["(cos.f64 eps)","accuracy",0.0],["#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","accuracy",30.75942211979457],["(-.f64 (cos.f64 eps) #s(literal 1 binary64))","accuracy",30.975100737598652],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps))","accuracy",0.00390625],["(fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps))","accuracy",0.01171875],["(*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)","accuracy",0.01171875],["(*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps)","accuracy",0.109375]],"memory":[[-6384752,62797952]],"mixsample":[[22.207763671875,"adjust",800],[86.2490234375,"ival-cos",1600],[0.0380859375,"ival-mult",2000],[0.071044921875,"const",400],[0.17041015625,"ival-assert",0],[9.688720703125,"ival-sub",0],[7.671142578125,"ival-cos",0],[16.92431640625,"const",0],[12.996337890625,"ival-cos",400],[15.48388671875,"adjust",2000],[17.17578125,"ival-add",0],[0.153076171875,"ival-mult",800],[0.036865234375,"ival-cos",800],[0.0517578125,"ival-sin",400],[0.091552734375,"ival-mult",400],[38.898193359375,"ival-mult",0],[4.19921875,"ival-sin",0],[0.416015625,"ival-cos",2000],[0.020263671875,"ival-add",2000],[0.255859375,"ival-add",400],[0.134033203125,"adjust",2800],[1.802978515625,"ival-sin",2000],[0.38232421875,"ival-true",0],[0.558837890625,"exact",0],[0.14453125,"ival-add",800],[0.14794921875,"ival-sin",800],[2.73486328125,"ival-neg",0]],"outcomes":[[50.59619140625,1,"valid",74],[247.5986328125,2,"valid",180],[5.93212890625,3,"valid",2]],"time":439.23095703125,"type":"localize"},{"count":[[18,83]],"inputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps))","(*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps)","(fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps))","(sin.f64 x)","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(-.f64 (cos.f64 eps) #s(literal 1 binary64))","(cos.f64 eps)","(-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) #s(literal 1 binary64)))","(cos.f64 (+.f64 x eps))","(+.f64 x eps)","#s(approx (cos x) #s(literal 1 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","(*.f64 (neg.f64 (sin.f64 x)) eps)","(neg.f64 (sin.f64 x))","(-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))))","#s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)","(fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64))"]],"memory":[[1186256,8655152]],"outputs":[["(- (cos eps) 1)","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(* -1/2 (pow eps 2))","(+ (* -1/2 (pow eps 2)) (* eps (* x (- (* 1/6 (pow eps 2)) 1))))","(+ (* -1/2 (pow eps 2)) (* x (+ (* 1/4 (* (pow eps 2) x)) (* eps (- (* 1/6 (pow eps 2)) 1)))))","(+ (* -1/2 (pow eps 2)) (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* x (+ (* -1/6 (* eps (* x (- (* 1/6 (pow eps 2)) 1)))) (* 1/4 (pow eps 2)))))))","(* -1/2 eps)","(+ (* -1/2 eps) (* x (- (* 1/6 (pow eps 2)) 1)))","(+ (* -1/2 eps) (* x (- (+ (* 1/6 (pow eps 2)) (* 1/4 (* eps x))) 1)))","(+ (* -1/2 eps) (* x (- (+ (* 1/6 (pow eps 2)) (* x (+ (* -1/6 (* x (- (* 1/6 (pow eps 2)) 1))) (* 1/4 eps)))) 1)))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(cos eps)","(+ (cos eps) (* -1 (* x (sin eps))))","(+ (cos eps) (* x (- (* -1/2 (* x (cos eps))) (sin eps))))","(+ (cos eps) (* x (- (* x (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps))))) (sin eps))))","eps","(+ eps x)","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(* -1 (* eps x))","(* x (+ (* -1 eps) (* 1/6 (* eps (pow x 2)))))","(* x (+ (* -1 eps) (* (pow x 2) (+ (* -1/120 (* eps (pow x 2))) (* 1/6 eps)))))","(* x (+ (* -1 eps) (* (pow x 2) (+ (* 1/6 eps) (* (pow x 2) (+ (* -1/120 eps) (* 1/5040 (* eps (pow x 2)))))))))","(* -1 x)","(* x (- (* 1/6 (pow x 2)) 1))","(* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1))","(* x (- (* (pow x 2) (+ 1/6 (* (pow x 2) (- (* 1/5040 (pow x 2)) 1/120)))) 1))","(+ (* -1/2 eps) (* 1/4 (* eps (pow x 2))))","(+ (* -1/2 eps) (* (pow x 2) (+ (* -1/48 (* eps (pow x 2))) (* 1/4 eps))))","(+ (* -1/2 eps) (* (pow x 2) (+ (* 1/4 eps) (* (pow x 2) (+ (* -1/48 eps) (* 1/1440 (* eps (pow x 2))))))))","1/24","(+ 1/24 (* -1/720 (pow x 2)))","(- (cos (+ eps x)) (cos x))","(* eps (+ (* -1/2 (* eps (cos x))) (* (sin x) (- (* 1/6 (pow eps 2)) 1))))","(+ (* -1/2 (* eps (cos x))) (* (sin x) (- (* 1/6 (pow eps 2)) 1)))","(sin x)","(cos (+ eps x))","(* x (+ 1 (/ eps x)))","(cos x)","(* -1 (* eps (sin x)))","(* -1 (sin x))","(* -1/2 (* eps (cos x)))","(* -1/720 (pow x 2))","(* (pow x 2) (- (* 1/24 (/ 1 (pow x 2))) 1/720))","(- (cos (- eps (* -1 x))) (cos x))","(cos (- eps (* -1 x)))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(* eps (+ (* -1 (sin x)) (* -1/2 (* eps (cos x)))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x)))))))","(+ (* -1 (sin x)) (* -1/2 (* eps (cos x))))","(+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))))","(* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2))","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* (pow eps 2) (- (* 1/40320 (pow eps 2)) 1/720)))) 1/2))","(+ 1 (* -1/2 (pow eps 2)))","(+ 1 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2)))","(+ (cos x) (* -1 (* eps (sin x))))","(+ (cos x) (* eps (- (* -1/2 (* eps (cos x))) (sin x))))","(+ (cos x) (* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x))))","(* 1/6 (* (pow eps 3) (sin x)))","(* (pow eps 3) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))))","(* (pow eps 3) (+ (* -1 (/ (sin x) (pow eps 2))) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x)))))","(* 1/6 (* (pow eps 2) (sin x)))","(* (pow eps 2) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))))","(* (pow eps 2) (+ (* -1 (/ (sin x) (pow eps 2))) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x)))))","(* eps (+ 1 (/ x eps)))","(- (cos (- x (* -1 eps))) (cos x))","(* -1 (* (pow eps 3) (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))) eps)) (* -1/6 (sin x)))))","(* (pow eps 2) (+ (* -1 (/ (+ (* 1/2 (cos x)) (/ (sin x) eps)) eps)) (* 1/6 (sin x))))","(cos (- x (* -1 eps)))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))"]],"series":[[2.49609375,"((- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (sin x) (- (cos (+ x eps)) (cos x)) (- (cos eps) 1) (cos eps) (- (cos (+ x eps)) (cos x)) (cos (+ x eps)) (+ x eps) (cos x) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (- (cos (+ x eps)) (cos x)) (cos x) (* (* (cos x) -1/2) eps) (+ (* -1/720 (* x x)) 1/24))","eps","-inf"],[4.654052734375,"((- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (sin x) (- (cos (+ x eps)) (cos x)) (- (cos eps) 1) (cos eps) (- (cos (+ x eps)) (cos x)) (cos (+ x eps)) (+ x eps) (cos x) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (- (cos (+ x eps)) (cos x)) (cos x) (* (* (cos x) -1/2) eps) (+ (* -1/720 (* x x)) 1/24))","eps","inf"],[4.22314453125,"((- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (sin x) (- (cos (+ x eps)) (cos x)) (- (cos eps) 1) (cos eps) (- (cos (+ x eps)) (cos x)) (cos (+ x eps)) (+ x eps) (cos x) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (- (cos (+ x eps)) (cos x)) (cos x) (* (* (cos x) -1/2) eps) (+ (* -1/720 (* x x)) 1/24))","eps","0"],[6.4931640625,"((- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (sin x) (- (cos (+ x eps)) (cos x)) (- (cos eps) 1) (cos eps) (- (cos (+ x eps)) (cos x)) (cos (+ x eps)) (+ x eps) (cos x) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (- (cos (+ x eps)) (cos x)) (cos x) (* (* (cos x) -1/2) eps) (+ (* -1/720 (* x x)) 1/24))","x","-inf"],[4.6650390625,"((- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (sin x) (- (cos (+ x eps)) (cos x)) (- (cos eps) 1) (cos eps) (- (cos (+ x eps)) (cos x)) (cos (+ x eps)) (+ x eps) (cos x) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (- (cos (+ x eps)) (cos x)) (cos x) (* (* (cos x) -1/2) eps) (+ (* -1/720 (* x x)) 1/24))","x","inf"],[3.31689453125,"((- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (sin x) (- (cos (+ x eps)) (cos x)) (- (cos eps) 1) (cos eps) (- (cos (+ x eps)) (cos x)) (cos (+ x eps)) (+ x eps) (cos x) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (- (cos (+ x eps)) (cos x)) (cos x) (* (* (cos x) -1/2) eps) (+ (* -1/720 (* x x)) 1/24))","x","0"]],"time":27.78515625,"type":"series"},{"count":[[83,81]],"egraph":[[0,8518,895,0.108325293],[3,5883,981,0.032542617],[2,2273,981,0.025085703],[1,808,1013,0.00851419],[0,277,1032,0.002549716]],"inputs":[["(- (cos eps) 1)","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(* -1/2 (pow eps 2))","(+ (* -1/2 (pow eps 2)) (* eps (* x (- (* 1/6 (pow eps 2)) 1))))","(+ (* -1/2 (pow eps 2)) (* x (+ (* 1/4 (* (pow eps 2) x)) (* eps (- (* 1/6 (pow eps 2)) 1)))))","(+ (* -1/2 (pow eps 2)) (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* x (+ (* -1/6 (* eps (* x (- (* 1/6 (pow eps 2)) 1)))) (* 1/4 (pow eps 2)))))))","(* -1/2 eps)","(+ (* -1/2 eps) (* x (- (* 1/6 (pow eps 2)) 1)))","(+ (* -1/2 eps) (* x (- (+ (* 1/6 (pow eps 2)) (* 1/4 (* eps x))) 1)))","(+ (* -1/2 eps) (* x (- (+ (* 1/6 (pow eps 2)) (* x (+ (* -1/6 (* x (- (* 1/6 (pow eps 2)) 1))) (* 1/4 eps)))) 1)))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(cos eps)","(+ (cos eps) (* -1 (* x (sin eps))))","(+ (cos eps) (* x (- (* -1/2 (* x (cos eps))) (sin eps))))","(+ (cos eps) (* x (- (* x (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps))))) (sin eps))))","eps","(+ eps x)","1","(+ 1 (* -1/2 (pow x 2)))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(* -1 (* eps x))","(* x (+ (* -1 eps) (* 1/6 (* eps (pow x 2)))))","(* x (+ (* -1 eps) (* (pow x 2) (+ (* -1/120 (* eps (pow x 2))) (* 1/6 eps)))))","(* x (+ (* -1 eps) (* (pow x 2) (+ (* 1/6 eps) (* (pow x 2) (+ (* -1/120 eps) (* 1/5040 (* eps (pow x 2)))))))))","(* -1 x)","(* x (- (* 1/6 (pow x 2)) 1))","(* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1))","(* x (- (* (pow x 2) (+ 1/6 (* (pow x 2) (- (* 1/5040 (pow x 2)) 1/120)))) 1))","(+ (* -1/2 eps) (* 1/4 (* eps (pow x 2))))","(+ (* -1/2 eps) (* (pow x 2) (+ (* -1/48 (* eps (pow x 2))) (* 1/4 eps))))","(+ (* -1/2 eps) (* (pow x 2) (+ (* 1/4 eps) (* (pow x 2) (+ (* -1/48 eps) (* 1/1440 (* eps (pow x 2))))))))","1/24","(+ 1/24 (* -1/720 (pow x 2)))","(- (cos (+ eps x)) (cos x))","(* eps (+ (* -1/2 (* eps (cos x))) (* (sin x) (- (* 1/6 (pow eps 2)) 1))))","(+ (* -1/2 (* eps (cos x))) (* (sin x) (- (* 1/6 (pow eps 2)) 1)))","(sin x)","(cos (+ eps x))","(* x (+ 1 (/ eps x)))","(cos x)","(* -1 (* eps (sin x)))","(* -1 (sin x))","(* -1/2 (* eps (cos x)))","(* -1/720 (pow x 2))","(* (pow x 2) (- (* 1/24 (/ 1 (pow x 2))) 1/720))","(- (cos (- eps (* -1 x))) (cos x))","(cos (- eps (* -1 x)))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(* eps (+ (* -1 (sin x)) (* -1/2 (* eps (cos x)))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x)))))))","(+ (* -1 (sin x)) (* -1/2 (* eps (cos x))))","(+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))))","(* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2))","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* (pow eps 2) (- (* 1/40320 (pow eps 2)) 1/720)))) 1/2))","(+ 1 (* -1/2 (pow eps 2)))","(+ 1 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2)))","(+ (cos x) (* -1 (* eps (sin x))))","(+ (cos x) (* eps (- (* -1/2 (* eps (cos x))) (sin x))))","(+ (cos x) (* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x))))","(* 1/6 (* (pow eps 3) (sin x)))","(* (pow eps 3) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))))","(* (pow eps 3) (+ (* -1 (/ (sin x) (pow eps 2))) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x)))))","(* 1/6 (* (pow eps 2) (sin x)))","(* (pow eps 2) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))))","(* (pow eps 2) (+ (* -1 (/ (sin x) (pow eps 2))) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x)))))","(* eps (+ 1 (/ x eps)))","(- (cos (- x (* -1 eps))) (cos x))","(* -1 (* (pow eps 3) (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))) eps)) (* -1/6 (sin x)))))","(* (pow eps 2) (+ (* -1 (/ (+ (* 1/2 (cos x)) (/ (sin x) eps)) eps)) (* 1/6 (sin x))))","(cos (- x (* -1 eps)))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))"]],"memory":[[3183760,47302640]],"method":["egg-herbie"],"outputs":[["(- (cos eps) 1)","(-.f64 (cos.f64 eps) #s(literal 1 binary64))","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(-.f64 (cos.f64 eps) (fma.f64 (sin.f64 eps) x #s(literal 1 binary64)))","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(fma.f64 (-.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) (cos.f64 eps) #s(literal 1/2 binary64)) x) (sin.f64 eps)) x (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(fma.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 (sin.f64 eps) x) (fma.f64 #s(literal -1/2 binary64) (cos.f64 eps) #s(literal 1/2 binary64))) x) (sin.f64 eps)) x (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(* -1/2 (pow eps 2))","(*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))","(+ (* -1/2 (pow eps 2)) (* eps (* x (- (* 1/6 (pow eps 2)) 1))))","(*.f64 eps (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)))","(+ (* -1/2 (pow eps 2)) (* x (+ (* 1/4 (* (pow eps 2) x)) (* eps (- (* 1/6 (pow eps 2)) 1)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps (*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 eps eps) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x))","(+ (* -1/2 (pow eps 2)) (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* x (+ (* -1/6 (* eps (* x (- (* 1/6 (pow eps 2)) 1)))) (* 1/4 (pow eps 2)))))))","(fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))","(* -1/2 eps)","(*.f64 #s(literal -1/2 binary64) eps)","(+ (* -1/2 eps) (* x (- (* 1/6 (pow eps 2)) 1)))","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))","(+ (* -1/2 eps) (* x (- (+ (* 1/6 (pow eps 2)) (* 1/4 (* eps x))) 1)))","(fma.f64 (fma.f64 eps (fma.f64 #s(literal 1/4 binary64) x (*.f64 #s(literal 1/6 binary64) eps)) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))","(+ (* -1/2 eps) (* x (- (+ (* 1/6 (pow eps 2)) (* x (+ (* -1/6 (* x (- (* 1/6 (pow eps 2)) 1))) (* 1/4 eps)))) 1)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x (*.f64 #s(literal -1/2 binary64) eps))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/6 binary64) x)","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64)) x)","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) x)","(cos eps)","(cos.f64 eps)","(+ (cos eps) (* -1 (* x (sin eps))))","(fma.f64 (neg.f64 x) (sin.f64 eps) (cos.f64 eps))","(+ (cos eps) (* x (- (* -1/2 (* x (cos eps))) (sin eps))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (cos.f64 eps) (neg.f64 (sin.f64 eps))) x (cos.f64 eps))","(+ (cos eps) (* x (- (* x (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps))))) (sin eps))))","(fma.f64 (fma.f64 (sin.f64 eps) (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 eps) x) #s(literal -1/2 binary64))) x (cos.f64 eps))","eps","(+ eps x)","(+.f64 eps x)","1","#s(literal 1 binary64)","(+ 1 (* -1/2 (pow x 2)))","(fma.f64 (*.f64 x x) #s(literal -1/2 binary64) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* 1/24 (pow x 2)) 1/2)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/24 (* -1/720 (pow x 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))","(* -1 (* eps x))","(*.f64 (neg.f64 x) eps)","(* x (+ (* -1 eps) (* 1/6 (* eps (pow x 2)))))","(*.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64))) x)","(* x (+ (* -1 eps) (* (pow x 2) (+ (* -1/120 (* eps (pow x 2))) (* 1/6 eps)))))","(*.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64))) (*.f64 x x) (neg.f64 eps)) x)","(* x (+ (* -1 eps) (* (pow x 2) (+ (* 1/6 eps) (* (pow x 2) (+ (* -1/120 eps) (* 1/5040 (* eps (pow x 2)))))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 eps (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64))) (*.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)))) x)","(* -1 x)","(neg.f64 x)","(* x (- (* 1/6 (pow x 2)) 1))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)","(* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)","(* x (- (* (pow x 2) (+ 1/6 (* (pow x 2) (- (* 1/5040 (pow x 2)) 1/120)))) 1))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)","(+ (* -1/2 eps) (* 1/4 (* eps (pow x 2))))","(*.f64 eps (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)))","(+ (* -1/2 eps) (* (pow x 2) (+ (* -1/48 (* eps (pow x 2))) (* 1/4 eps))))","(fma.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal -1/48 binary64) #s(literal 1/4 binary64))) (*.f64 x x) (*.f64 #s(literal -1/2 binary64) eps))","(+ (* -1/2 eps) (* (pow x 2) (+ (* 1/4 eps) (* (pow x 2) (+ (* -1/48 eps) (* 1/1440 (* eps (pow x 2))))))))","(fma.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/1440 binary64) #s(literal -1/48 binary64))) (*.f64 eps (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64))))","1/24","#s(literal 1/24 binary64)","(+ 1/24 (* -1/720 (pow x 2)))","(fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64))","(- (cos (+ eps x)) (cos x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(* eps (+ (* -1/2 (* eps (cos x))) (* (sin x) (- (* 1/6 (pow eps 2)) 1))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(+ (* -1/2 (* eps (cos x))) (* (sin x) (- (* 1/6 (pow eps 2)) 1)))","(fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x)))","(sin x)","(sin.f64 x)","(cos (+ eps x))","(cos.f64 (+.f64 eps x))","(* x (+ 1 (/ eps x)))","(+.f64 eps x)","(cos x)","(cos.f64 x)","(* -1 (* eps (sin x)))","(*.f64 (neg.f64 (sin.f64 x)) eps)","(* -1 (sin x))","(neg.f64 (sin.f64 x))","(* -1/2 (* eps (cos x)))","(*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)","(* -1/720 (pow x 2))","(*.f64 #s(literal -1/720 binary64) (*.f64 x x))","(* (pow x 2) (- (* 1/24 (/ 1 (pow x 2))) 1/720))","(*.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/24 binary64) (*.f64 x x)) #s(literal 1/720 binary64)) x) x)","(- (cos (- eps (* -1 x))) (cos x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(cos (- eps (* -1 x)))","(cos.f64 (+.f64 eps x))","(* -1 (* x (- (* -1 (/ eps x)) 1)))","(+.f64 eps x)","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps (neg.f64 (sin.f64 x))) eps)","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(*.f64 (fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(*.f64 (-.f64 (*.f64 (fma.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps) (sin.f64 x)) eps)","(* eps (+ (* -1 (sin x)) (* -1/2 (* eps (cos x)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps (neg.f64 (sin.f64 x))) eps)","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(+ (* -1 (sin x)) (* -1/2 (* eps (cos x))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps (neg.f64 (sin.f64 x)))","(+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))))","(fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x)))","(* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2))","(*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps)","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps)","(* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* (pow eps 2) (- (* 1/40320 (pow eps 2)) 1/720)))) 1/2))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/40320 binary64) (*.f64 eps eps) #s(literal -1/720 binary64)) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) eps) eps)","(+ 1 (* -1/2 (pow eps 2)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps #s(literal 1 binary64))","(+ 1 (* (pow eps 2) (- (* 1/24 (pow eps 2)) 1/2)))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 eps eps) #s(literal 1 binary64))","(+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/24 (* -1/720 (pow eps 2)))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 eps eps) #s(literal 1/24 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 eps eps) #s(literal 1 binary64))","(+ (cos x) (* -1 (* eps (sin x))))","(fma.f64 (neg.f64 (sin.f64 x)) eps (cos.f64 x))","(+ (cos x) (* eps (- (* -1/2 (* eps (cos x))) (sin x))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps (neg.f64 (sin.f64 x))) eps (cos.f64 x))","(+ (cos x) (* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps (cos.f64 x))","(* 1/6 (* (pow eps 3) (sin x)))","(*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64)) (sin.f64 x))","(* (pow eps 3) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))))","(*.f64 (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (*.f64 (sin.f64 x) #s(literal 1/6 binary64))) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ (* -1 (/ (sin x) (pow eps 2))) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x)))))","(*.f64 (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) #s(literal -1/6 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) (cos.f64 x) (/.f64 (sin.f64 x) eps)) eps)))","(* 1/6 (* (pow eps 2) (sin x)))","(*.f64 (*.f64 (*.f64 (sin.f64 x) eps) eps) #s(literal 1/6 binary64))","(* (pow eps 2) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))))","(*.f64 (*.f64 (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (*.f64 (sin.f64 x) #s(literal 1/6 binary64))) eps) eps)","(* (pow eps 2) (+ (* -1 (/ (sin x) (pow eps 2))) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x)))))","(*.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) (cos.f64 x) (/.f64 (sin.f64 x) eps)) (neg.f64 eps))) (*.f64 eps eps))","(* eps (+ 1 (/ x eps)))","(+.f64 eps x)","(- (cos (- x (* -1 eps))) (cos x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(* -1 (* (pow eps 3) (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps)))))","(*.f64 (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (*.f64 (sin.f64 x) #s(literal 1/6 binary64))) (pow.f64 eps #s(literal 3 binary64)))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))) eps)) (* -1/6 (sin x)))))","(*.f64 (pow.f64 (neg.f64 eps) #s(literal 3 binary64)) (fma.f64 (sin.f64 x) #s(literal -1/6 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) (cos.f64 x) (/.f64 (sin.f64 x) eps)) eps)))","(* (pow eps 2) (+ (* -1 (/ (+ (* 1/2 (cos x)) (/ (sin x) eps)) eps)) (* 1/6 (sin x))))","(*.f64 (fma.f64 (sin.f64 x) #s(literal 1/6 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) (cos.f64 x) (/.f64 (sin.f64 x) eps)) (neg.f64 eps))) (*.f64 eps eps))","(cos (- x (* -1 eps)))","(cos.f64 (+.f64 eps x))","(* -1 (* eps (- (* -1 (/ x eps)) 1)))","(+.f64 eps x)"]],"stop":[["iter limit",1],["node limit",1]],"time":310.947021484375,"type":"simplify"},{"count":[[18,284]],"egraph":[[0,8902,173,0.107990249],[2,1714,173,0.03594241],[1,240,173,0.006390408],[0,63,173,0.001893626],[0,37,173,0.000429137]],"inputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps))","(*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps)","(fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps))","(sin.f64 x)","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(-.f64 (cos.f64 eps) #s(literal 1 binary64))","(cos.f64 eps)","(-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) #s(literal 1 binary64)))","(cos.f64 (+.f64 x eps))","(+.f64 x eps)","#s(approx (cos x) #s(literal 1 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","(*.f64 (neg.f64 (sin.f64 x)) eps)","(neg.f64 (sin.f64 x))","(-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))))","#s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)","(fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64))"]],"memory":[[-1119392,57517056]],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)) eps))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)) eps)","(*.f64 eps (fma.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) eps) (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) eps) (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) eps) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) eps)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) eps) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) eps) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) eps) (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) eps) (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) eps)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) eps) (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 eps (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))) #s(literal 3 binary64)) (pow.f64 (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)) #s(literal 3 binary64))) (fma.f64 (*.f64 eps (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))) (*.f64 eps (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))) (-.f64 (*.f64 (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)) (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps))) (*.f64 (*.f64 eps (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))) (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps))))))","(/.f64 (+.f64 (pow.f64 (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 eps (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))) #s(literal 3 binary64))) (fma.f64 (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)) (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)) (-.f64 (*.f64 (*.f64 eps (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))) (*.f64 eps (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)))) (*.f64 (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)) (*.f64 eps (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64))) eps)) (neg.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 eps (cos.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64))) eps)) (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 eps (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64))))) (neg.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps))))","(/.f64 (neg.f64 (*.f64 eps (fma.f64 (pow.f64 (*.f64 eps (cos.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64))) eps) (-.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 eps (cos.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64))) eps) (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64))))","(/.f64 (*.f64 eps (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64)))) (-.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)))","(/.f64 (*.f64 eps (fma.f64 (pow.f64 (*.f64 eps (cos.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64)))) (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) eps (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) eps))","(fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) eps (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) eps))","(fma.f64 eps (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)))","(fma.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 eps (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))))","(+.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) eps) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) eps))","(+.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) eps) (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) eps))","(+.f64 (*.f64 eps (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))) (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)))","(+.f64 (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)) (*.f64 eps (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64))) (pow.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 eps (cos.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (*.f64 eps (cos.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps))) #s(literal 3 binary64)) (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64))) (fma.f64 (fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps))) (fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps))) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps))) (neg.f64 (sin.f64 x))))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal -1 binary64) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps)) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 #s(literal -1 binary64) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)) (fma.f64 #s(literal -1 binary64) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps))) (*.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps)) (fma.f64 #s(literal -1 binary64) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 eps (cos.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64))) (-.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 6 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 4 binary64)) (+.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)) #s(literal 2 binary64)))) (-.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 6 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 9 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 6 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 6 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)) #s(literal 3 binary64)))) (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps))) (*.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64)))) (*.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)) (-.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 eps (cos.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (*.f64 eps (cos.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 eps (cos.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64))) (-.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)))","(/.f64 (fma.f64 (pow.f64 (*.f64 eps (cos.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64))) (fma.f64 (pow.f64 (*.f64 eps (cos.f64 x)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)))))","(/.f64 (fma.f64 (pow.f64 (*.f64 eps (cos.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (*.f64 eps (cos.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (*.f64 eps (cos.f64 x)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64))))))","(fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)))","(fma.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps) (fma.f64 #s(literal -1 binary64) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)))","(fma.f64 (*.f64 (sin.f64 x) (*.f64 eps eps)) #s(literal 1/6 binary64) (fma.f64 #s(literal -1 binary64) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)))","(fma.f64 (*.f64 (sin.f64 x) eps) (*.f64 #s(literal 1/6 binary64) eps) (fma.f64 #s(literal -1 binary64) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)))","(fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 eps eps)) (sin.f64 x) (fma.f64 #s(literal -1 binary64) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)))","(fma.f64 #s(literal -1/2 binary64) (*.f64 (cos.f64 x) eps) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps))","(fma.f64 #s(literal 1/6 binary64) (*.f64 (*.f64 eps eps) (sin.f64 x)) (fma.f64 #s(literal -1 binary64) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)))","(fma.f64 (*.f64 eps eps) (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) (fma.f64 #s(literal -1 binary64) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)))","(fma.f64 (sin.f64 x) (*.f64 #s(literal 1/6 binary64) (*.f64 eps eps)) (fma.f64 #s(literal -1 binary64) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)))","(fma.f64 (sin.f64 x) (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps))","(fma.f64 (cos.f64 x) (*.f64 #s(literal -1/2 binary64) eps) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)))","(fma.f64 eps (*.f64 (*.f64 #s(literal 1/6 binary64) eps) (sin.f64 x)) (fma.f64 #s(literal -1 binary64) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)))","(fma.f64 eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps))) (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps))))","(+.f64 (fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps))) (neg.f64 (sin.f64 x)))","(+.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps)) (fma.f64 #s(literal -1 binary64) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)))","(+.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps))","(+.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)))","(sin.f64 x)","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 #s(literal 1 binary64) (cos.f64 eps)) (+.f64 #s(literal 1 binary64) (cos.f64 eps))) (/.f64 (-.f64 (cos.f64 eps) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(literal 1 binary64) (cos.f64 eps)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) (cos.f64 eps)) (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps))) (-.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (cos.f64 eps) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (cos.f64 eps) #s(literal 2 binary64)) (*.f64 #s(literal -1 binary64) (cos.f64 eps)))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 #s(literal 1 binary64) (cos.f64 eps)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 eps) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (cos.f64 eps))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 eps) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (cos.f64 eps) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 eps) #s(literal 2 binary64)))) (+.f64 #s(literal 1 binary64) (cos.f64 eps))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 eps) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 eps) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (cos.f64 eps) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (cos.f64 eps) #s(literal 3 binary64)))) (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (cos.f64 eps) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) (cos.f64 eps))) (+.f64 #s(literal 1 binary64) (cos.f64 eps))) (pow.f64 (+.f64 #s(literal 1 binary64) (cos.f64 eps)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps)))) (*.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps))) #s(literal 1 binary64))) (*.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps))) (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps)))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (neg.f64 (-.f64 (cos.f64 eps) #s(literal -1 binary64))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (neg.f64 (+.f64 #s(literal 1 binary64) (cos.f64 eps))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (-.f64 #s(literal 1 binary64) (*.f64 (cos.f64 eps) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (cos.f64 eps) #s(literal -1 binary64)))","(/.f64 (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (+.f64 #s(literal 1 binary64) (cos.f64 eps)))","(/.f64 (-.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (cos.f64 eps) (cos.f64 eps) (-.f64 #s(literal 1 binary64) (*.f64 (cos.f64 eps) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (cos.f64 eps)) (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps))) (-.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) (cos.f64 eps)) (neg.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps))) (-.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(fma.f64 #s(literal 1 binary64) (cos.f64 eps) #s(literal -1 binary64))","(fma.f64 (cos.f64 eps) #s(literal 1 binary64) #s(literal -1 binary64))","(-.f64 (/.f64 (pow.f64 (cos.f64 eps) #s(literal 2 binary64)) (-.f64 (cos.f64 eps) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (cos.f64 eps) #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) (fma.f64 (cos.f64 eps) (cos.f64 eps) (-.f64 #s(literal 1 binary64) (*.f64 (cos.f64 eps) #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (fma.f64 (cos.f64 eps) (cos.f64 eps) (-.f64 #s(literal 1 binary64) (*.f64 (cos.f64 eps) #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 (cos.f64 eps) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) (cos.f64 eps))) (pow.f64 (+.f64 #s(literal 1 binary64) (cos.f64 eps)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (cos.f64 eps) #s(literal 3 binary64)) (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps)))) (pow.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 #s(literal 1 binary64) (cos.f64 eps))) #s(literal -1 binary64)))","(-.f64 (cos.f64 eps) #s(literal 1 binary64))","(+.f64 (cos.f64 eps) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (cos.f64 eps))","(*.f64 #s(literal 1 binary64) (cos.f64 eps))","(*.f64 (cos.f64 eps) #s(literal 1 binary64))","(cos.f64 eps)","(*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))) (pow.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) (cos.f64 (+.f64 eps x))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (neg.f64 #s(approx (cos x) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64))) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(approx (cos x) #s(literal 1 binary64)) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (*.f64 (neg.f64 #s(approx (cos x) #s(literal 1 binary64))) (cos.f64 (+.f64 eps x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) (cos.f64 (+.f64 eps x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 4 binary64)) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) (cos.f64 (+.f64 eps x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 4 binary64)) (+.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 4 binary64)) (pow.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (cos.f64 (+.f64 eps x))) #s(literal 2 binary64)))) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) (cos.f64 (+.f64 eps x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 9 binary64)) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 6 binary64)) (+.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 6 binary64)) (pow.f64 (*.f64 #s(approx (cos x) #s(literal 1 binary64)) (cos.f64 (+.f64 eps x))) #s(literal 3 binary64)))) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) (cos.f64 (+.f64 eps x)))) (*.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) (cos.f64 (+.f64 eps x))) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (*.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) (cos.f64 (+.f64 eps x))) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) (cos.f64 (+.f64 eps x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)))) (*.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (cos.f64 (+.f64 eps x)) (neg.f64 #s(approx (cos x) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (neg.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) (cos.f64 (+.f64 eps x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (-.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (cos.f64 (+.f64 eps x)) (neg.f64 #s(approx (cos x) #s(literal 1 binary64))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 (cos.f64 (+.f64 eps x)) (neg.f64 #s(approx (cos x) #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) (cos.f64 (+.f64 eps x))))","(/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (-.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 (cos.f64 (+.f64 eps x)) (neg.f64 #s(approx (cos x) #s(literal 1 binary64)))))))","(/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) (cos.f64 (+.f64 eps x))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 #s(approx (cos x) #s(literal 1 binary64)) (cos.f64 (+.f64 eps x))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64))))))","(fma.f64 #s(literal -1 binary64) #s(approx (cos x) #s(literal 1 binary64)) (cos.f64 (+.f64 eps x)))","(-.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (-.f64 (cos.f64 (+.f64 eps x)) (neg.f64 #s(approx (cos x) #s(literal 1 binary64))))) (/.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (cos.f64 (+.f64 eps x)) (neg.f64 #s(approx (cos x) #s(literal 1 binary64))))))","(-.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) (cos.f64 (+.f64 eps x)))) (/.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) (cos.f64 (+.f64 eps x)))))","(-.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 #s(approx (cos x) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (cos x) #s(literal 1 binary64)) (+.f64 #s(approx (cos x) #s(literal 1 binary64)) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(-.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (fma.f64 (sin.f64 eps) (sin.f64 x) #s(approx (cos x) #s(literal 1 binary64))))","(-.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (-.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) (neg.f64 #s(approx (cos x) #s(literal 1 binary64)))))","(-.f64 (cos.f64 (+.f64 eps x)) #s(approx (cos x) #s(literal 1 binary64)))","(+.f64 (neg.f64 #s(approx (cos x) #s(literal 1 binary64))) (cos.f64 (+.f64 eps x)))","(+.f64 (cos.f64 (+.f64 eps x)) (neg.f64 #s(approx (cos x) #s(literal 1 binary64))))","(/.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps))) (*.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (neg.f64 (*.f64 (sin.f64 eps) (sin.f64 x))) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64)) (-.f64 (*.f64 (neg.f64 (*.f64 (sin.f64 eps) (sin.f64 x))) (neg.f64 (*.f64 (sin.f64 eps) (sin.f64 x)))) (*.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (neg.f64 (*.f64 (sin.f64 eps) (sin.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 2 binary64)))) (neg.f64 (cos.f64 (-.f64 x eps))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (*.f64 (sin.f64 eps) (sin.f64 x)))))))","(/.f64 (-.f64 (*.f64 (+.f64 (cos.f64 (+.f64 eps x)) (cos.f64 (-.f64 x eps))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x))))) #s(literal 4 binary64))","(/.f64 (-.f64 (+.f64 (cos.f64 (+.f64 eps x)) (cos.f64 (-.f64 x eps))) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 eps x)))) #s(literal 2 binary64))","(/.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 2 binary64))) (cos.f64 (-.f64 x eps)))","(/.f64 (-.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (*.f64 (sin.f64 eps) (sin.f64 x))))))","(fma.f64 (cos.f64 (/.f64 (*.f64 x x) (-.f64 x eps))) (cos.f64 (/.f64 (*.f64 eps eps) (-.f64 x eps))) (*.f64 (sin.f64 (/.f64 (*.f64 x x) (-.f64 x eps))) (sin.f64 (/.f64 (*.f64 eps eps) (-.f64 x eps)))))","(fma.f64 (cos.f64 eps) (cos.f64 x) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","(fma.f64 (cos.f64 eps) (cos.f64 x) (neg.f64 (*.f64 (sin.f64 eps) (sin.f64 x))))","(fma.f64 (cos.f64 x) (cos.f64 eps) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","(fma.f64 (cos.f64 x) (cos.f64 eps) (neg.f64 (*.f64 (sin.f64 eps) (sin.f64 x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64)) (cos.f64 (-.f64 x eps))) (/.f64 (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 2 binary64)) (cos.f64 (-.f64 x eps))))","(-.f64 (/.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (*.f64 (sin.f64 eps) (sin.f64 x)))))) (/.f64 (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (*.f64 (sin.f64 eps) (sin.f64 x)))))))","(-.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (*.f64 (sin.f64 eps) (sin.f64 x)))","(cos.f64 (+.f64 eps x))","(+.f64 (*.f64 (cos.f64 (/.f64 (*.f64 x x) (-.f64 x eps))) (cos.f64 (/.f64 (*.f64 eps eps) (-.f64 x eps)))) (*.f64 (sin.f64 (/.f64 (*.f64 x x) (-.f64 x eps))) (sin.f64 (/.f64 (*.f64 eps eps) (-.f64 x eps)))))","(+.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (*.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps)))","(+.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (neg.f64 (*.f64 (sin.f64 eps) (sin.f64 x))))","(*.f64 (*.f64 (+.f64 eps x) (-.f64 x eps)) (pow.f64 (-.f64 x eps) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 x eps) (*.f64 (+.f64 eps x) (-.f64 x eps))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (*.f64 eps eps) (*.f64 x x))) (neg.f64 (-.f64 eps x)))","(/.f64 (neg.f64 (neg.f64 (*.f64 (+.f64 eps x) (-.f64 x eps)))) (neg.f64 (neg.f64 (-.f64 x eps))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 eps #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 x x (*.f64 eps eps)) (-.f64 x eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (+.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (*.f64 eps x) #s(literal 2 binary64)))) (-.f64 x eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 eps #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (fma.f64 eps (-.f64 eps x) (*.f64 x x))))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) (pow.f64 eps #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (*.f64 eps x) #s(literal 3 binary64)))) (fma.f64 eps (-.f64 eps x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x eps)) (*.f64 (-.f64 x eps) (*.f64 eps eps))) (*.f64 (-.f64 x eps) (-.f64 x eps)))","(/.f64 (-.f64 (*.f64 eps eps) (*.f64 x x)) (-.f64 eps x))","(/.f64 (neg.f64 (*.f64 (+.f64 eps x) (-.f64 x eps))) (neg.f64 (-.f64 x eps)))","(/.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 eps eps (-.f64 (*.f64 x x) (*.f64 eps x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x))))","(/.f64 (*.f64 (+.f64 eps x) (-.f64 x eps)) (-.f64 x eps))","(/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 eps eps (-.f64 (*.f64 x x) (*.f64 eps x))))","(/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 eps (-.f64 eps x) (*.f64 x x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x eps) (*.f64 (+.f64 eps x) (-.f64 x eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 x eps) (*.f64 (+.f64 eps x) (-.f64 x eps)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 eps (-.f64 eps x) (*.f64 x x)) (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(-.f64 (/.f64 (*.f64 eps eps) (-.f64 eps x)) (/.f64 (*.f64 x x) (-.f64 eps x)))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x eps)) (/.f64 (*.f64 eps eps) (-.f64 x eps)))","(+.f64 eps x)","(+.f64 x eps)","#s(approx (cos x) #s(literal 1 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","(*.f64 (*.f64 eps #s(literal -1 binary64)) (sin.f64 x))","(*.f64 (neg.f64 (sin.f64 x)) eps)","(*.f64 #s(literal -1 binary64) (*.f64 (sin.f64 x) eps))","(*.f64 (sin.f64 x) (neg.f64 eps))","(*.f64 eps (neg.f64 (sin.f64 x)))","(neg.f64 (*.f64 (sin.f64 x) eps))","(-.f64 #s(literal 0 binary64) (*.f64 (sin.f64 x) eps))","(*.f64 #s(literal -1 binary64) (sin.f64 x))","(*.f64 (sin.f64 x) #s(literal -1 binary64))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x))))))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (sin.f64 x))))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (+.f64 #s(literal 0 binary64) (sin.f64 x)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (sin.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x)))))","(neg.f64 (sin.f64 x))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (sin.f64 x))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (+.f64 #s(literal 0 binary64) (sin.f64 x))))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x))))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (fma.f64 (sin.f64 x) (sin.f64 x) (*.f64 #s(literal 0 binary64) (sin.f64 x))))))","(-.f64 #s(literal 0 binary64) (sin.f64 x))","(+.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 x)))","(*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64))) (pow.f64 (+.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (cos.f64 (+.f64 eps x))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 3 binary64))) (pow.f64 (fma.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (+.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (cos.f64 (+.f64 eps x))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (+.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64))) (+.f64 (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (*.f64 (neg.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) (cos.f64 (+.f64 eps x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (cos.f64 (+.f64 eps x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (+.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 4 binary64)) (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (cos.f64 (+.f64 eps x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 4 binary64)) (+.f64 (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 4 binary64)) (pow.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (cos.f64 (+.f64 eps x))) #s(literal 2 binary64)))) (+.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (cos.f64 (+.f64 eps x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 6 binary64)) (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (+.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 9 binary64)) (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 6 binary64)) (+.f64 (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 6 binary64)) (pow.f64 (*.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (cos.f64 (+.f64 eps x))) #s(literal 3 binary64)))) (fma.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (+.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (cos.f64 (+.f64 eps x)))) (*.f64 (+.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (cos.f64 (+.f64 eps x))) (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64)))) (*.f64 (+.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (cos.f64 (+.f64 eps x))) (+.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (cos.f64 (+.f64 eps x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (+.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (+.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 3 binary64)))) (*.f64 (fma.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (+.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) (fma.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (+.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64)))) (neg.f64 (-.f64 (cos.f64 (+.f64 eps x)) (neg.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64)))) (neg.f64 (+.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (cos.f64 (+.f64 eps x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (-.f64 (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (cos.f64 (+.f64 eps x)) (neg.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (+.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64))) (-.f64 (cos.f64 (+.f64 eps x)) (neg.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))))))","(/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (cos.f64 (+.f64 eps x))))","(/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (-.f64 (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (cos.f64 (+.f64 eps x)) (neg.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))))))))","(/.f64 (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (+.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (cos.f64 (+.f64 eps x))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (+.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (cos.f64 (+.f64 eps x))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (+.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 3 binary64))))))","(fma.f64 #s(literal -1 binary64) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (cos.f64 (+.f64 eps x)))","(-.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (-.f64 (cos.f64 (+.f64 eps x)) (neg.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))))) (/.f64 (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 (cos.f64 (+.f64 eps x)) (neg.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))))))","(-.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)) (+.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (cos.f64 (+.f64 eps x)))) (/.f64 (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (cos.f64 (+.f64 eps x)))))","(-.f64 (/.f64 (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 3 binary64)) (fma.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (+.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) #s(literal 3 binary64)) (fma.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (+.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))) (cos.f64 (+.f64 eps x))) (pow.f64 (cos.f64 (+.f64 eps x)) #s(literal 2 binary64)))))","(-.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (fma.f64 (sin.f64 eps) (sin.f64 x) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))))","(-.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (-.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) (neg.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))))))","(-.f64 (cos.f64 (+.f64 eps x)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))))","(+.f64 (neg.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))) (cos.f64 (+.f64 eps x)))","(+.f64 (cos.f64 (+.f64 eps x)) (neg.f64 #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))))","#s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(*.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64))","(*.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x))","(*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)","(*.f64 #s(literal -1/2 binary64) (*.f64 (cos.f64 x) eps))","(*.f64 (cos.f64 x) (*.f64 #s(literal -1/2 binary64) eps))","(*.f64 eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x)))","(*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/576 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal -1/24 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64)) (pow.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/576 binary64) (*.f64 (*.f64 x x) #s(literal -1/17280 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal -1/24 binary64)) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/576 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/576 binary64) (*.f64 (*.f64 x x) #s(literal -1/17280 binary64)))) (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 1/576 binary64) (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal 1/24 binary64) (*.f64 (*.f64 x x) #s(literal -1/720 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/576 binary64)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal -1/24 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/576 binary64) (*.f64 (*.f64 x x) #s(literal -1/17280 binary64)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 x x) #s(literal -1/720 binary64)) #s(literal 4 binary64)) #s(literal 1/331776 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/576 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal -1/24 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 x x) #s(literal -1/720 binary64)) #s(literal 6 binary64)) #s(literal 1/191102976 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 x x) #s(literal -1/720 binary64)) #s(literal 4 binary64)) (+.f64 #s(literal 1/331776 binary64) (*.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1/576 binary64)))) (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal -1/24 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 x x) #s(literal -1/720 binary64)) #s(literal 6 binary64)) #s(literal 1/191102976 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (*.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 1/13824 binary64)) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/576 binary64) (*.f64 (*.f64 x x) #s(literal -1/17280 binary64))))))","(/.f64 (*.f64 (fma.f64 #s(literal -1/51998697814228992000000000 binary64) (pow.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 3 binary64)) #s(literal 1/2641807540224 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/139314069504000000 binary64) (pow.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 3 binary64)) (-.f64 #s(literal 1/191102976 binary64) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1/5159780352000 binary64)))) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/576 binary64) (*.f64 (*.f64 x x) #s(literal -1/17280 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal -1/24 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal -1/24 binary64)) #s(literal 1/576 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal -1/24 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal -1/24 binary64))))","(/.f64 (-.f64 #s(literal 1/576 binary64) (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 #s(literal 1/24 binary64) (*.f64 (*.f64 x x) #s(literal -1/720 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/576 binary64))) (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal -1/24 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64))) (neg.f64 (+.f64 #s(literal 1/576 binary64) (-.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal -1/17280 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64))) (neg.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/576 binary64) (*.f64 (*.f64 x x) #s(literal -1/17280 binary64))))))","(/.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/576 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal -1/24 binary64)))","(/.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64)) (+.f64 #s(literal 1/576 binary64) (-.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal -1/17280 binary64)))))","(/.f64 (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64)) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/576 binary64) (*.f64 (*.f64 x x) #s(literal -1/17280 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal -1/24 binary64)) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/576 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/576 binary64) (*.f64 (*.f64 x x) #s(literal -1/17280 binary64)))) (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal -1/24 binary64)) (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/576 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/576 binary64) (*.f64 (*.f64 x x) #s(literal -1/17280 binary64)))) (fma.f64 #s(literal -1/373248000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/13824 binary64)))))","(fma.f64 (*.f64 #s(literal -1/720 binary64) x) x #s(literal 1/24 binary64))","(fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal 1/24 binary64))","(fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64))","(fma.f64 x (*.f64 #s(literal -1/720 binary64) x) #s(literal 1/24 binary64))","(-.f64 (/.f64 #s(literal 1/576 binary64) (-.f64 #s(literal 1/24 binary64) (*.f64 (*.f64 x x) #s(literal -1/720 binary64)))) (/.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal 1/24 binary64) (*.f64 (*.f64 x x) #s(literal -1/720 binary64)))))","(-.f64 (/.f64 (*.f64 #s(literal 1/518400 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal -1/24 binary64))) (/.f64 #s(literal 1/576 binary64) (fma.f64 (*.f64 x x) #s(literal -1/720 binary64) #s(literal -1/24 binary64))))","(+.f64 (*.f64 (*.f64 x x) #s(literal -1/720 binary64)) #s(literal 1/24 binary64))","(+.f64 #s(literal 1/24 binary64) (*.f64 (*.f64 x x) #s(literal -1/720 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":312.1240234375,"type":"rewrite"},{"compiler":[[15355,1642]],"memory":[[754560,39278768]],"time":104.787841796875,"type":"eval"},{"alts":[["(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))) #s(literal -2 binary64))","fresh",0.11328125,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))) eps))","next",0.1015625,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps (neg.f64 (sin.f64 x))) eps))","fresh",0.1709950106471134,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) #s(approx (* (* (cos x) -1/2) eps) (fma.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal -1/48 binary64) #s(literal 1/4 binary64))) (*.f64 x x) (*.f64 #s(literal -1/2 binary64) eps)))) eps))","fresh",0.17746595855159467,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 eps (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64))))) eps))","next",0.25259259945407553,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","done",12.347635529453676,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","fresh",0.4449939731039356,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","fresh",0.7173887707296801,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","fresh",12.35166589929007,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","next",12.363138070512848,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","fresh",12.403022376800878,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","next",12.628445556850021,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","next",0.3434314731039305,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps (*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 eps eps) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x))))","fresh",0.7603578342280729,"binary64"]],"compiler":[[16,14],[25,18],[19,14],[41,26],[34,23],[13,10],[54,33],[39,27],[32,20],[27,18],[22,16],[16,12],[59,38],[49,33],[16,14],[25,18],[19,14],[41,26],[34,23],[54,33],[39,27],[32,20],[27,18],[22,16],[16,12],[59,38],[49,33]],"count":[[419,14]],"kept":[{"done":[1,0],"fresh":[2,1],"new":[411,12],"picked":[5,1]}],"memory":[[-4910944,22085296]],"min-error":[[0.0,"binary64"]],"time":19.244140625,"type":"prune"},{"egraph":[[0,8208,563,0.085431727],[5,6608,578,0.027447749],[4,2963,578,0.022084991],[3,1015,586,0.009331419],[2,397,590,0.003054148],[1,194,590,0.001747162],[0,105,590,0.001142637],[0,62,592,0.000616454]],"inputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))) eps))","(*.f64 (fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))) eps)","(fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)))","(*.f64 eps (cos.f64 x))","eps","(cos.f64 x)","x","#s(literal -1/2 binary64)","(*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))","(fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64))","#s(literal 1/6 binary64)","(*.f64 eps eps)","#s(literal -1 binary64)","(sin.f64 x)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","(*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps)","#s(approx (neg (sin x)) (neg.f64 x))","(neg.f64 x)","x","eps","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","(*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps)","#s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64))","(fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64))","#s(literal -1/120 binary64)","(*.f64 x x)","x","#s(literal 1/6 binary64)","#s(literal -1 binary64)","eps","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 eps (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64))))) eps))","(*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 eps (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64))))) eps)","(fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 eps (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)))))","(sin.f64 x)","x","(fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))","(*.f64 eps eps)","eps","#s(literal 1/6 binary64)","#s(literal -1 binary64)","#s(approx (* (* (cos x) -1/2) eps) (*.f64 eps (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64))))","(*.f64 eps (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)))","(fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64))","#s(literal 1/4 binary64)","(*.f64 x x)","#s(literal -1/2 binary64)","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))))","(fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))","(fma.f64 (*.f64 eps (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)))","(*.f64 eps (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps)))","eps","(fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps))","#s(literal -1/6 binary64)","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)","(fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))","(*.f64 eps eps)","#s(literal 1/6 binary64)","#s(literal -1 binary64)","x","(*.f64 #s(literal 1/4 binary64) eps)","#s(literal 1/4 binary64)","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))","(pow.f64 eps #s(literal 3 binary64))","#s(literal 3 binary64)","(neg.f64 eps)","(*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))","#s(literal -1/2 binary64)"]],"locations":[["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","cost-diff",0],["(fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))","cost-diff",1],["(fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps))","cost-diff",2],["(fma.f64 (*.f64 eps (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)))","cost-diff",2],["(sin.f64 x)","cost-diff",0],["(fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 eps (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)))))","cost-diff",0],["(*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 eps (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64))))) eps)","cost-diff",0],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 eps (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64))))) eps))","cost-diff",0],["#s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))","cost-diff",0],["(*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps)","cost-diff",0],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","cost-diff",0],["(*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)","cost-diff",1],["(neg.f64 x)","cost-diff",0],["#s(approx (neg (sin x)) (neg.f64 x))","cost-diff",0],["(*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps)","cost-diff",0],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","cost-diff",0],["(*.f64 eps (cos.f64 x))","cost-diff",0],["(fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)))","cost-diff",0],["(*.f64 (fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))) eps)","cost-diff",0],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))) eps))","cost-diff",0]],"memory":[[2379296,39583872]],"method":["egg-herbie"],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)) eps))","(*.f64 (fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))) eps)","(*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)) eps)","(fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)))","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps))","(*.f64 eps (cos.f64 x))","(*.f64 (cos.f64 x) eps)","eps","(cos.f64 x)","x","#s(literal -1/2 binary64)","(*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))","(fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64))","(fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))","#s(literal 1/6 binary64)","(*.f64 eps eps)","#s(literal -1 binary64)","(sin.f64 x)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","(*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps)","#s(approx (neg (sin x)) (neg.f64 x))","(neg.f64 x)","x","eps","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (fma.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -1/120 binary64) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 x)))) eps))","(*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps)","(*.f64 #s(approx (neg (sin x)) (fma.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -1/120 binary64) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 x)))) eps)","#s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))","#s(approx (neg (sin x)) (fma.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -1/120 binary64) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 x))))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)","(fma.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -1/120 binary64) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 x)))","(fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64))","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64))","(fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64))","(fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64))","#s(literal -1/120 binary64)","(*.f64 x x)","x","#s(literal 1/6 binary64)","#s(literal -1 binary64)","eps","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 eps (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64))))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))) eps))","(*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 eps (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64))))) eps)","(*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))) eps)","(fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 eps (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)))))","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)))","(sin.f64 x)","x","(fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))","(*.f64 eps eps)","eps","#s(literal 1/6 binary64)","#s(literal -1 binary64)","#s(approx (* (* (cos x) -1/2) eps) (*.f64 eps (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64))))","#s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))","(*.f64 eps (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)))","(*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)","(fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64))","#s(literal 1/4 binary64)","(*.f64 x x)","#s(literal -1/2 binary64)","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (*.f64 eps (fma.f64 eps (fma.f64 (*.f64 #s(literal 1/6 binary64) x) eps #s(literal -1/2 binary64)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) x (*.f64 #s(literal 1/4 binary64) eps)) x #s(literal -1 binary64)) x)))))","#s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))))","#s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (*.f64 eps (fma.f64 eps (fma.f64 (*.f64 #s(literal 1/6 binary64) x) eps #s(literal -1/2 binary64)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) x (*.f64 #s(literal 1/4 binary64) eps)) x #s(literal -1 binary64)) x))))","(fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))","(*.f64 eps (fma.f64 eps (fma.f64 (*.f64 #s(literal 1/6 binary64) x) eps #s(literal -1/2 binary64)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) x (*.f64 #s(literal 1/4 binary64) eps)) x #s(literal -1 binary64)) x)))","(fma.f64 (*.f64 eps (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)))","(*.f64 eps (fma.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) x) x #s(literal 1 binary64)) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 eps x) #s(literal 1/4 binary64))))","(*.f64 eps (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps)))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) x (*.f64 #s(literal 1/4 binary64) eps)) eps)","eps","(fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps))","(fma.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) x (*.f64 #s(literal 1/4 binary64) eps))","#s(literal -1/6 binary64)","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)","(fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))","(*.f64 eps eps)","#s(literal 1/6 binary64)","#s(literal -1 binary64)","x","(*.f64 #s(literal 1/4 binary64) eps)","#s(literal 1/4 binary64)","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))","(pow.f64 eps #s(literal 3 binary64))","#s(literal 3 binary64)","(neg.f64 eps)","(*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))","#s(literal -1/2 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":243.9208984375,"type":"simplify"},{"compiler":[[411,57]],"locations":[["(fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))","accuracy",0.0078125],["(*.f64 eps (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps)))","accuracy",0.1171875],["#s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))))","accuracy",0.3395252231019761],["(fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps))","accuracy",0.34779755317403704],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 eps (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64))))) eps))","accuracy",0.00390625],["(fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 eps (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)))))","accuracy",0.01171875],["(*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 eps (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64))))) eps)","accuracy",0.109375],["#s(approx (* (* (cos x) -1/2) eps) (*.f64 eps (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64))))","accuracy",0.37300028592931245],["(*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps)","accuracy",0.0078125],["(fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64))","accuracy",0.01171875],["#s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))","accuracy",0.20439358464454643],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","accuracy",12.35154177945362],["(neg.f64 x)","accuracy",0.0],["(*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps)","accuracy",0.0078125],["#s(approx (neg (sin x)) (neg.f64 x))","accuracy",0.6145827159200783],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","accuracy",12.35154177945362],["(fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)))","accuracy",0.0078125],["(*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))","accuracy",0.0078125],["(*.f64 eps (cos.f64 x))","accuracy",0.01171875],["(*.f64 (fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))) eps)","accuracy",0.109375]],"memory":[[-451392,100778800]],"mixsample":[[0.02490234375,"const",800],[60.027587890625,"adjust",800],[48.501708984375,"ival-cos",1600],[0.1005859375,"ival-mult",2000],[0.074951171875,"const",400],[0.14404296875,"ival-assert",0],[3.7822265625,"ival-sub",0],[4.081298828125,"ival-cos",0],[17.042724609375,"const",0],[7.928955078125,"ival-cos",400],[17.488525390625,"adjust",2000],[3.953369140625,"ival-pow",0],[27.116455078125,"ival-add",0],[0.1181640625,"ival-mult",800],[0.036865234375,"ival-cos",800],[0.051025390625,"ival-sin",400],[0.1767578125,"ival-mult",400],[77.3955078125,"ival-mult",0],[5.286865234375,"ival-sin",0],[0.418212890625,"ival-cos",2000],[0.046630859375,"ival-add",2000],[0.02099609375,"const",2000],[0.2265625,"ival-add",400],[1.675048828125,"ival-sin",2000],[0.2802734375,"adjust",2800],[0.297607421875,"ival-true",0],[0.14892578125,"ival-sin",800],[0.60498046875,"exact",0],[0.138671875,"ival-add",800],[4.30029296875,"ival-neg",0]],"outcomes":[[106.090576171875,1,"valid",79],[234.71044921875,2,"valid",172],[8.078125,3,"valid",3],[0.989990234375,0,"valid",2]],"time":419.991943359375,"type":"localize"},{"count":[[25,133]],"inputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))) eps))","(*.f64 (fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))) eps)","(fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)))","(*.f64 eps (cos.f64 x))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","(*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps)","#s(approx (neg (sin x)) (neg.f64 x))","(neg.f64 x)","(*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","(*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps)","#s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 eps (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64))))) eps))","(*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 eps (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64))))) eps)","(fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 eps (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)))))","(sin.f64 x)","(fma.f64 (*.f64 eps (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)))","(fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps))","(fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","(*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))","(fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64))","#s(approx (* (* (cos x) -1/2) eps) (*.f64 eps (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64))))","#s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))))","(*.f64 eps (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps)))"]],"memory":[[5123680,13145296]],"outputs":[["(- (cos eps) 1)","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(* -1/2 (pow eps 2))","(+ (* -1/2 (pow eps 2)) (* eps (* x (- (* 1/6 (pow eps 2)) 1))))","(+ (* -1/2 (pow eps 2)) (* x (+ (* 1/4 (* (pow eps 2) x)) (* eps (- (* 1/6 (pow eps 2)) 1)))))","(+ (* -1/2 (pow eps 2)) (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* x (+ (* -1/6 (* eps (* x (- (* 1/6 (pow eps 2)) 1)))) (* 1/4 (pow eps 2)))))))","(* -1/2 eps)","(+ (* -1/2 eps) (* x (- (* 1/6 (pow eps 2)) 1)))","(+ (* -1/2 eps) (* x (- (+ (* 1/6 (pow eps 2)) (* 1/4 (* eps x))) 1)))","(+ (* -1/2 eps) (* x (- (+ (* 1/6 (pow eps 2)) (* x (+ (* -1/6 (* x (- (* 1/6 (pow eps 2)) 1))) (* 1/4 eps)))) 1)))","eps","(+ eps (* -1/2 (* eps (pow x 2))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* 1/24 (* eps (pow x 2))))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* (pow x 2) (+ (* -1/720 (* eps (pow x 2))) (* 1/24 eps))))))","(* -1 (* eps x))","(* x (+ (* -1 eps) (* 1/6 (* eps (pow x 2)))))","(* x (+ (* -1 eps) (* (pow x 2) (+ (* -1/120 (* eps (pow x 2))) (* 1/6 eps)))))","(* x (+ (* -1 eps) (* (pow x 2) (+ (* 1/6 eps) (* (pow x 2) (+ (* -1/120 eps) (* 1/5040 (* eps (pow x 2)))))))))","(* -1 x)","(* x (- (* 1/6 (pow x 2)) 1))","(* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1))","(* x (- (* (pow x 2) (+ 1/6 (* (pow x 2) (- (* 1/5040 (pow x 2)) 1/120)))) 1))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(- (* 1/6 (pow eps 3)) eps)","(- (+ (* 1/6 (pow eps 3)) (* 1/4 (* (pow eps 2) x))) eps)","(- (+ (* 1/6 (pow eps 3)) (* x (+ (* -1/6 (* eps (* x (- (* 1/6 (pow eps 2)) 1)))) (* 1/4 (pow eps 2))))) eps)","(* 1/4 eps)","(+ (* -1/6 (* x (- (* 1/6 (pow eps 2)) 1))) (* 1/4 eps))","(+ (* -1/2 (pow eps 2)) (* x (- (* 1/6 (pow eps 3)) eps)))","(+ (* -1/2 (pow eps 2)) (* x (- (+ (* 1/6 (pow eps 3)) (* 1/4 (* (pow eps 2) x))) eps)))","(+ (* -1/2 (pow eps 2)) (* x (- (+ (* 1/6 (pow eps 3)) (* x (+ (* -1/6 (* eps (* x (- (* 1/6 (pow eps 2)) 1)))) (* 1/4 (pow eps 2))))) eps)))","(* x (- (* 1/6 (pow eps 2)) 1))","(* x (- (+ (* -1/6 (* (pow x 2) (- (* 1/6 (pow eps 2)) 1))) (* 1/6 (pow eps 2))) 1))","(* x (- (+ (* 1/6 (pow eps 2)) (* (pow x 2) (+ (* -1/6 (- (* 1/6 (pow eps 2)) 1)) (* 1/120 (* (pow x 2) (- (* 1/6 (pow eps 2)) 1)))))) 1))","(* x (- (+ (* 1/6 (pow eps 2)) (* (pow x 2) (+ (* -1/6 (- (* 1/6 (pow eps 2)) 1)) (* (pow x 2) (+ (* -1/5040 (* (pow x 2) (- (* 1/6 (pow eps 2)) 1))) (* 1/120 (- (* 1/6 (pow eps 2)) 1))))))) 1))","1/6","(+ 1/6 (* -1/120 (pow x 2)))","(+ (* -1/2 eps) (* 1/4 (* eps (pow x 2))))","(+ (* -1/2 eps) (* (pow x 2) (+ (* -1/48 (* eps (pow x 2))) (* 1/4 eps))))","(+ (* -1/2 eps) (* (pow x 2) (+ (* 1/4 eps) (* (pow x 2) (+ (* -1/48 eps) (* 1/1440 (* eps (pow x 2))))))))","(* 1/4 (pow eps 2))","(+ (* -1/6 (* eps (* x (- (* 1/6 (pow eps 2)) 1)))) (* 1/4 (pow eps 2)))","(- (cos (+ eps x)) (cos x))","(* eps (+ (* -1/2 (* eps (cos x))) (* (sin x) (- (* 1/6 (pow eps 2)) 1))))","(+ (* -1/2 (* eps (cos x))) (* (sin x) (- (* 1/6 (pow eps 2)) 1)))","(* eps (cos x))","(* -1 (* eps (sin x)))","(* -1 (sin x))","(* -1/120 (pow x 5))","(* (pow x 5) (- (* 1/6 (/ 1 (pow x 2))) 1/120))","(* (pow x 5) (- (* 1/6 (/ 1 (pow x 2))) (+ 1/120 (/ 1 (pow x 4)))))","(sin x)","(* -1/6 (* eps (* (pow x 2) (- (* 1/6 (pow eps 2)) 1))))","(* (pow x 2) (+ (* -1/6 (* eps (- (* 1/6 (pow eps 2)) 1))) (* 1/4 (/ (pow eps 2) x))))","(* (pow x 2) (- (+ (* -1/6 (* eps (- (* 1/6 (pow eps 2)) 1))) (+ (* 1/6 (/ (pow eps 3) (pow x 2))) (* 1/4 (/ (pow eps 2) x)))) (/ eps (pow x 2))))","(* -1/6 (* x (- (* 1/6 (pow eps 2)) 1)))","(* x (+ (* -1/6 (- (* 1/6 (pow eps 2)) 1)) (* 1/4 (/ eps x))))","(* -1/6 (* eps (* (pow x 3) (- (* 1/6 (pow eps 2)) 1))))","(* (pow x 3) (+ (* -1/6 (* eps (- (* 1/6 (pow eps 2)) 1))) (* 1/4 (/ (pow eps 2) x))))","(* (pow x 3) (- (+ (* -1/6 (* eps (- (* 1/6 (pow eps 2)) 1))) (+ (* 1/6 (/ (pow eps 3) (pow x 2))) (* 1/4 (/ (pow eps 2) x)))) (/ eps (pow x 2))))","(* (pow x 3) (- (+ (* -1/2 (/ (pow eps 2) (pow x 3))) (+ (* -1/6 (* eps (- (* 1/6 (pow eps 2)) 1))) (+ (* 1/6 (/ (pow eps 3) (pow x 2))) (* 1/4 (/ (pow eps 2) x))))) (/ eps (pow x 2))))","(* (sin x) (- (* 1/6 (pow eps 2)) 1))","(* -1/120 (pow x 2))","(* (pow x 2) (- (* 1/6 (/ 1 (pow x 2))) 1/120))","(* -1/2 (* eps (cos x)))","(* -1/6 (* eps (* x (- (* 1/6 (pow eps 2)) 1))))","(* x (+ (* -1/6 (* eps (- (* 1/6 (pow eps 2)) 1))) (* 1/4 (/ (pow eps 2) x))))","(- (cos (- eps (* -1 x))) (cos x))","(* -1 (* (pow x 5) (- 1/120 (* 1/6 (/ 1 (pow x 2))))))","(* -1 (* (pow x 5) (- (+ 1/120 (/ 1 (pow x 4))) (* 1/6 (/ 1 (pow x 2))))))","(* (pow x 2) (+ (* -1 (/ (+ (* -1 (/ (- (* 1/6 (pow eps 3)) eps) x)) (* -1/4 (pow eps 2))) x)) (* -1/6 (* eps (- (* 1/6 (pow eps 2)) 1)))))","(* -1 (* x (+ (* -1/4 (/ eps x)) (* 1/6 (- (* 1/6 (pow eps 2)) 1)))))","(* -1 (* (pow x 3) (+ (* -1/4 (/ (pow eps 2) x)) (* 1/6 (* eps (- (* 1/6 (pow eps 2)) 1))))))","(* -1 (* (pow x 3) (+ (* -1 (/ (- (+ (* 1/6 (/ (pow eps 3) x)) (* 1/4 (pow eps 2))) (/ eps x)) x)) (* 1/6 (* eps (- (* 1/6 (pow eps 2)) 1))))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (- (* 1/6 (pow eps 3)) eps)) (* 1/2 (/ (pow eps 2) x))) x)) (* 1/4 (pow eps 2))) x)) (* 1/6 (* eps (- (* 1/6 (pow eps 2)) 1))))))","(* -1 (* x (+ (* -1/4 (/ (pow eps 2) x)) (* 1/6 (* eps (- (* 1/6 (pow eps 2)) 1))))))","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(* eps (+ (* -1 (sin x)) (* -1/2 (* eps (cos x)))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x)))))))","(+ (* -1 (sin x)) (* -1/2 (* eps (cos x))))","(+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))))","(* eps (- (* 1/6 (pow x 2)) 1))","(* eps (- (+ (* 1/6 (pow x 2)) (* 1/4 (* eps x))) 1))","(* eps (- (+ (* 1/6 (pow x 2)) (* eps (+ (* 1/4 x) (* eps (+ 1/6 (* -1/36 (pow x 2))))))) 1))","(* 1/6 x)","(+ (* 1/6 x) (* 1/4 eps))","(+ (* 1/6 x) (* eps (+ 1/4 (* -1/36 (* eps x)))))","(* eps (* x (- (* 1/6 (pow x 2)) 1)))","(* eps (+ (* eps (- (* 1/4 (pow x 2)) 1/2)) (* x (- (* 1/6 (pow x 2)) 1))))","(* eps (+ (* eps (- (+ (* 1/4 (pow x 2)) (* eps (* x (+ 1/6 (* -1/36 (pow x 2)))))) 1/2)) (* x (- (* 1/6 (pow x 2)) 1))))","(+ (* -1 (sin x)) (* 1/6 (* (pow eps 2) (sin x))))","(* 1/6 (* eps x))","(* eps (+ (* 1/6 x) (* 1/4 eps)))","(* eps (+ (* 1/6 x) (* eps (+ 1/4 (* -1/36 (* eps x))))))","(* 1/6 (* (pow eps 3) (sin x)))","(* (pow eps 3) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))))","(* (pow eps 3) (+ (* -1 (/ (sin x) (pow eps 2))) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x)))))","(* 1/6 (* (pow eps 2) (sin x)))","(* (pow eps 2) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))))","(* (pow eps 2) (+ (* -1 (/ (sin x) (pow eps 2))) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x)))))","(* (pow eps 3) (+ 1/6 (* -1/36 (pow x 2))))","(* (pow eps 3) (+ 1/6 (+ (* -1/36 (pow x 2)) (* 1/4 (/ x eps)))))","(* (pow eps 3) (- (+ 1/6 (+ (* -1/36 (pow x 2)) (+ (* 1/6 (/ (pow x 2) (pow eps 2))) (* 1/4 (/ x eps))))) (/ 1 (pow eps 2))))","(* -1/36 (* (pow eps 2) x))","(* (pow eps 2) (+ (* -1/36 x) (* 1/4 (/ 1 eps))))","(* (pow eps 2) (+ (* -1/36 x) (+ (* 1/6 (/ x (pow eps 2))) (* 1/4 (/ 1 eps)))))","(* (pow eps 3) (* x (+ 1/6 (* -1/36 (pow x 2)))))","(* (pow eps 3) (- (+ (* 1/4 (/ (pow x 2) eps)) (* x (+ 1/6 (* -1/36 (pow x 2))))) (* 1/2 (/ 1 eps))))","(* (pow eps 3) (- (+ (* 1/4 (/ (pow x 2) eps)) (+ (* x (+ 1/6 (* -1/36 (pow x 2)))) (/ (* x (- (* 1/6 (pow x 2)) 1)) (pow eps 2)))) (* 1/2 (/ 1 eps))))","(* (pow eps 2) (+ (* -1 (/ (sin x) (pow eps 2))) (* 1/6 (sin x))))","(* -1/36 (* (pow eps 3) x))","(* (pow eps 3) (+ (* -1/36 x) (* 1/4 (/ 1 eps))))","(* (pow eps 3) (+ (* -1/36 x) (+ (* 1/6 (/ x (pow eps 2))) (* 1/4 (/ 1 eps)))))","(- (cos (- x (* -1 eps))) (cos x))","(* -1 (* (pow eps 3) (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))) eps)) (* -1/6 (sin x)))))","(* (pow eps 2) (+ (* -1 (/ (+ (* 1/2 (cos x)) (/ (sin x) eps)) eps)) (* 1/6 (sin x))))","(* -1 (* (pow eps 3) (- (* 1/36 (pow x 2)) 1/6)))","(* -1 (* (pow eps 3) (- (+ (* -1/4 (/ x eps)) (* 1/36 (pow x 2))) 1/6)))","(* -1 (* (pow eps 3) (- (+ (* -1 (/ (+ (* -1 (/ (+ 1 (* -1/6 (pow x 2))) eps)) (* 1/4 x)) eps)) (* 1/36 (pow x 2))) 1/6)))","(* (pow eps 2) (+ (* -1 (/ (- (* -1/6 (/ x eps)) 1/4) eps)) (* -1/36 x)))","(* -1 (* (pow eps 3) (* x (- (* 1/36 (pow x 2)) 1/6))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (- (* 1/4 (pow x 2)) 1/2) eps)) (* x (- (* 1/36 (pow x 2)) 1/6)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (- (+ (* -1 (/ (* x (+ 1 (* -1/6 (pow x 2)))) eps)) (* 1/4 (pow x 2))) 1/2) eps)) (* x (- (* 1/36 (pow x 2)) 1/6)))))","(* -1 (* (pow eps 3) (- (* 1/36 x) (* 1/4 (/ 1 eps)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ 1/4 (* 1/6 (/ x eps))) eps)) (* 1/36 x))))"]],"series":[[3.849853515625,"((- (cos (+ x eps)) (cos x)) (* (+ (* (* eps (cos x)) -1/2) (* (+ (* 1/6 (* eps eps)) -1) (sin x))) eps) (+ (* (* eps (cos x)) -1/2) (* (+ (* 1/6 (* eps eps)) -1) (sin x))) (* eps (cos x)) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (neg x) (* (+ (* (+ (* -1/120 (* x x)) 1/6) (* x x)) -1) x) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (sin x) (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps)) (+ (* (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) x) (* (* eps eps) -1/2)) (- (cos (+ x eps)) (cos x)) (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (+ (* -1/120 (* x x)) 1/6) (* (* (cos x) -1/2) eps) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))))","eps","-inf"],[3.5810546875,"((- (cos (+ x eps)) (cos x)) (* (+ (* (* eps (cos x)) -1/2) (* (+ (* 1/6 (* eps eps)) -1) (sin x))) eps) (+ (* (* eps (cos x)) -1/2) (* (+ (* 1/6 (* eps eps)) -1) (sin x))) (* eps (cos x)) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (neg x) (* (+ (* (+ (* -1/120 (* x x)) 1/6) (* x x)) -1) x) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (sin x) (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps)) (+ (* (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) x) (* (* eps eps) -1/2)) (- (cos (+ x eps)) (cos x)) (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (+ (* -1/120 (* x x)) 1/6) (* (* (cos x) -1/2) eps) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))))","eps","inf"],[4.5029296875,"((- (cos (+ x eps)) (cos x)) (* (+ (* (* eps (cos x)) -1/2) (* (+ (* 1/6 (* eps eps)) -1) (sin x))) eps) (+ (* (* eps (cos x)) -1/2) (* (+ (* 1/6 (* eps eps)) -1) (sin x))) (* eps (cos x)) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (neg x) (* (+ (* (+ (* -1/120 (* x x)) 1/6) (* x x)) -1) x) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (sin x) (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps)) (+ (* (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) x) (* (* eps eps) -1/2)) (- (cos (+ x eps)) (cos x)) (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (+ (* -1/120 (* x x)) 1/6) (* (* (cos x) -1/2) eps) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))))","eps","0"],[3.94091796875,"((- (cos (+ x eps)) (cos x)) (* (+ (* (* eps (cos x)) -1/2) (* (+ (* 1/6 (* eps eps)) -1) (sin x))) eps) (+ (* (* eps (cos x)) -1/2) (* (+ (* 1/6 (* eps eps)) -1) (sin x))) (* eps (cos x)) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (neg x) (* (+ (* (+ (* -1/120 (* x x)) 1/6) (* x x)) -1) x) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (sin x) (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps)) (+ (* (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) x) (* (* eps eps) -1/2)) (- (cos (+ x eps)) (cos x)) (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (+ (* -1/120 (* x x)) 1/6) (* (* (cos x) -1/2) eps) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))))","x","-inf"],[3.97509765625,"((- (cos (+ x eps)) (cos x)) (* (+ (* (* eps (cos x)) -1/2) (* (+ (* 1/6 (* eps eps)) -1) (sin x))) eps) (+ (* (* eps (cos x)) -1/2) (* (+ (* 1/6 (* eps eps)) -1) (sin x))) (* eps (cos x)) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (neg x) (* (+ (* (+ (* -1/120 (* x x)) 1/6) (* x x)) -1) x) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (sin x) (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps)) (+ (* (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) x) (* (* eps eps) -1/2)) (- (cos (+ x eps)) (cos x)) (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (+ (* -1/120 (* x x)) 1/6) (* (* (cos x) -1/2) eps) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))))","x","inf"],[5.9228515625,"((- (cos (+ x eps)) (cos x)) (* (+ (* (* eps (cos x)) -1/2) (* (+ (* 1/6 (* eps eps)) -1) (sin x))) eps) (+ (* (* eps (cos x)) -1/2) (* (+ (* 1/6 (* eps eps)) -1) (sin x))) (* eps (cos x)) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (neg x) (* (+ (* (+ (* -1/120 (* x x)) 1/6) (* x x)) -1) x) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (sin x) (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps)) (+ (* (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) x) (* (* eps eps) -1/2)) (- (cos (+ x eps)) (cos x)) (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (+ (* -1/120 (* x x)) 1/6) (* (* (cos x) -1/2) eps) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))))","x","0"]],"time":29.2099609375,"type":"series"},{"count":[[133,131]],"egraph":[[0,8407,1892,0.098493788],[2,5061,2064,0.027539483],[1,1525,2123,0.017075165],[0,485,2239,0.004705932]],"inputs":[["(- (cos eps) 1)","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(* -1/2 (pow eps 2))","(+ (* -1/2 (pow eps 2)) (* eps (* x (- (* 1/6 (pow eps 2)) 1))))","(+ (* -1/2 (pow eps 2)) (* x (+ (* 1/4 (* (pow eps 2) x)) (* eps (- (* 1/6 (pow eps 2)) 1)))))","(+ (* -1/2 (pow eps 2)) (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* x (+ (* -1/6 (* eps (* x (- (* 1/6 (pow eps 2)) 1)))) (* 1/4 (pow eps 2)))))))","(* -1/2 eps)","(+ (* -1/2 eps) (* x (- (* 1/6 (pow eps 2)) 1)))","(+ (* -1/2 eps) (* x (- (+ (* 1/6 (pow eps 2)) (* 1/4 (* eps x))) 1)))","(+ (* -1/2 eps) (* x (- (+ (* 1/6 (pow eps 2)) (* x (+ (* -1/6 (* x (- (* 1/6 (pow eps 2)) 1))) (* 1/4 eps)))) 1)))","eps","(+ eps (* -1/2 (* eps (pow x 2))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* 1/24 (* eps (pow x 2))))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* (pow x 2) (+ (* -1/720 (* eps (pow x 2))) (* 1/24 eps))))))","(* -1 (* eps x))","(* x (+ (* -1 eps) (* 1/6 (* eps (pow x 2)))))","(* x (+ (* -1 eps) (* (pow x 2) (+ (* -1/120 (* eps (pow x 2))) (* 1/6 eps)))))","(* x (+ (* -1 eps) (* (pow x 2) (+ (* 1/6 eps) (* (pow x 2) (+ (* -1/120 eps) (* 1/5040 (* eps (pow x 2)))))))))","(* -1 x)","(* x (- (* 1/6 (pow x 2)) 1))","(* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1))","(* x (- (* (pow x 2) (+ 1/6 (* (pow x 2) (- (* 1/5040 (pow x 2)) 1/120)))) 1))","x","(* x (+ 1 (* -1/6 (pow x 2))))","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(- (* 1/6 (pow eps 3)) eps)","(- (+ (* 1/6 (pow eps 3)) (* 1/4 (* (pow eps 2) x))) eps)","(- (+ (* 1/6 (pow eps 3)) (* x (+ (* -1/6 (* eps (* x (- (* 1/6 (pow eps 2)) 1)))) (* 1/4 (pow eps 2))))) eps)","(* 1/4 eps)","(+ (* -1/6 (* x (- (* 1/6 (pow eps 2)) 1))) (* 1/4 eps))","(+ (* -1/2 (pow eps 2)) (* x (- (* 1/6 (pow eps 3)) eps)))","(+ (* -1/2 (pow eps 2)) (* x (- (+ (* 1/6 (pow eps 3)) (* 1/4 (* (pow eps 2) x))) eps)))","(+ (* -1/2 (pow eps 2)) (* x (- (+ (* 1/6 (pow eps 3)) (* x (+ (* -1/6 (* eps (* x (- (* 1/6 (pow eps 2)) 1)))) (* 1/4 (pow eps 2))))) eps)))","(* x (- (* 1/6 (pow eps 2)) 1))","(* x (- (+ (* -1/6 (* (pow x 2) (- (* 1/6 (pow eps 2)) 1))) (* 1/6 (pow eps 2))) 1))","(* x (- (+ (* 1/6 (pow eps 2)) (* (pow x 2) (+ (* -1/6 (- (* 1/6 (pow eps 2)) 1)) (* 1/120 (* (pow x 2) (- (* 1/6 (pow eps 2)) 1)))))) 1))","(* x (- (+ (* 1/6 (pow eps 2)) (* (pow x 2) (+ (* -1/6 (- (* 1/6 (pow eps 2)) 1)) (* (pow x 2) (+ (* -1/5040 (* (pow x 2) (- (* 1/6 (pow eps 2)) 1))) (* 1/120 (- (* 1/6 (pow eps 2)) 1))))))) 1))","1/6","(+ 1/6 (* -1/120 (pow x 2)))","(+ (* -1/2 eps) (* 1/4 (* eps (pow x 2))))","(+ (* -1/2 eps) (* (pow x 2) (+ (* -1/48 (* eps (pow x 2))) (* 1/4 eps))))","(+ (* -1/2 eps) (* (pow x 2) (+ (* 1/4 eps) (* (pow x 2) (+ (* -1/48 eps) (* 1/1440 (* eps (pow x 2))))))))","(* 1/4 (pow eps 2))","(+ (* -1/6 (* eps (* x (- (* 1/6 (pow eps 2)) 1)))) (* 1/4 (pow eps 2)))","(- (cos (+ eps x)) (cos x))","(* eps (+ (* -1/2 (* eps (cos x))) (* (sin x) (- (* 1/6 (pow eps 2)) 1))))","(+ (* -1/2 (* eps (cos x))) (* (sin x) (- (* 1/6 (pow eps 2)) 1)))","(* eps (cos x))","(* -1 (* eps (sin x)))","(* -1 (sin x))","(* -1/120 (pow x 5))","(* (pow x 5) (- (* 1/6 (/ 1 (pow x 2))) 1/120))","(* (pow x 5) (- (* 1/6 (/ 1 (pow x 2))) (+ 1/120 (/ 1 (pow x 4)))))","(sin x)","(* -1/6 (* eps (* (pow x 2) (- (* 1/6 (pow eps 2)) 1))))","(* (pow x 2) (+ (* -1/6 (* eps (- (* 1/6 (pow eps 2)) 1))) (* 1/4 (/ (pow eps 2) x))))","(* (pow x 2) (- (+ (* -1/6 (* eps (- (* 1/6 (pow eps 2)) 1))) (+ (* 1/6 (/ (pow eps 3) (pow x 2))) (* 1/4 (/ (pow eps 2) x)))) (/ eps (pow x 2))))","(* -1/6 (* x (- (* 1/6 (pow eps 2)) 1)))","(* x (+ (* -1/6 (- (* 1/6 (pow eps 2)) 1)) (* 1/4 (/ eps x))))","(* -1/6 (* eps (* (pow x 3) (- (* 1/6 (pow eps 2)) 1))))","(* (pow x 3) (+ (* -1/6 (* eps (- (* 1/6 (pow eps 2)) 1))) (* 1/4 (/ (pow eps 2) x))))","(* (pow x 3) (- (+ (* -1/6 (* eps (- (* 1/6 (pow eps 2)) 1))) (+ (* 1/6 (/ (pow eps 3) (pow x 2))) (* 1/4 (/ (pow eps 2) x)))) (/ eps (pow x 2))))","(* (pow x 3) (- (+ (* -1/2 (/ (pow eps 2) (pow x 3))) (+ (* -1/6 (* eps (- (* 1/6 (pow eps 2)) 1))) (+ (* 1/6 (/ (pow eps 3) (pow x 2))) (* 1/4 (/ (pow eps 2) x))))) (/ eps (pow x 2))))","(* (sin x) (- (* 1/6 (pow eps 2)) 1))","(* -1/120 (pow x 2))","(* (pow x 2) (- (* 1/6 (/ 1 (pow x 2))) 1/120))","(* -1/2 (* eps (cos x)))","(* -1/6 (* eps (* x (- (* 1/6 (pow eps 2)) 1))))","(* x (+ (* -1/6 (* eps (- (* 1/6 (pow eps 2)) 1))) (* 1/4 (/ (pow eps 2) x))))","(- (cos (- eps (* -1 x))) (cos x))","(* -1 (* (pow x 5) (- 1/120 (* 1/6 (/ 1 (pow x 2))))))","(* -1 (* (pow x 5) (- (+ 1/120 (/ 1 (pow x 4))) (* 1/6 (/ 1 (pow x 2))))))","(* (pow x 2) (+ (* -1 (/ (+ (* -1 (/ (- (* 1/6 (pow eps 3)) eps) x)) (* -1/4 (pow eps 2))) x)) (* -1/6 (* eps (- (* 1/6 (pow eps 2)) 1)))))","(* -1 (* x (+ (* -1/4 (/ eps x)) (* 1/6 (- (* 1/6 (pow eps 2)) 1)))))","(* -1 (* (pow x 3) (+ (* -1/4 (/ (pow eps 2) x)) (* 1/6 (* eps (- (* 1/6 (pow eps 2)) 1))))))","(* -1 (* (pow x 3) (+ (* -1 (/ (- (+ (* 1/6 (/ (pow eps 3) x)) (* 1/4 (pow eps 2))) (/ eps x)) x)) (* 1/6 (* eps (- (* 1/6 (pow eps 2)) 1))))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (- (* 1/6 (pow eps 3)) eps)) (* 1/2 (/ (pow eps 2) x))) x)) (* 1/4 (pow eps 2))) x)) (* 1/6 (* eps (- (* 1/6 (pow eps 2)) 1))))))","(* -1 (* x (+ (* -1/4 (/ (pow eps 2) x)) (* 1/6 (* eps (- (* 1/6 (pow eps 2)) 1))))))","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(* eps (+ (* -1 (sin x)) (* -1/2 (* eps (cos x)))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x)))))))","(+ (* -1 (sin x)) (* -1/2 (* eps (cos x))))","(+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))))","(* eps (- (* 1/6 (pow x 2)) 1))","(* eps (- (+ (* 1/6 (pow x 2)) (* 1/4 (* eps x))) 1))","(* eps (- (+ (* 1/6 (pow x 2)) (* eps (+ (* 1/4 x) (* eps (+ 1/6 (* -1/36 (pow x 2))))))) 1))","(* 1/6 x)","(+ (* 1/6 x) (* 1/4 eps))","(+ (* 1/6 x) (* eps (+ 1/4 (* -1/36 (* eps x)))))","(* eps (* x (- (* 1/6 (pow x 2)) 1)))","(* eps (+ (* eps (- (* 1/4 (pow x 2)) 1/2)) (* x (- (* 1/6 (pow x 2)) 1))))","(* eps (+ (* eps (- (+ (* 1/4 (pow x 2)) (* eps (* x (+ 1/6 (* -1/36 (pow x 2)))))) 1/2)) (* x (- (* 1/6 (pow x 2)) 1))))","(+ (* -1 (sin x)) (* 1/6 (* (pow eps 2) (sin x))))","(* 1/6 (* eps x))","(* eps (+ (* 1/6 x) (* 1/4 eps)))","(* eps (+ (* 1/6 x) (* eps (+ 1/4 (* -1/36 (* eps x))))))","(* 1/6 (* (pow eps 3) (sin x)))","(* (pow eps 3) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))))","(* (pow eps 3) (+ (* -1 (/ (sin x) (pow eps 2))) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x)))))","(* 1/6 (* (pow eps 2) (sin x)))","(* (pow eps 2) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))))","(* (pow eps 2) (+ (* -1 (/ (sin x) (pow eps 2))) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x)))))","(* (pow eps 3) (+ 1/6 (* -1/36 (pow x 2))))","(* (pow eps 3) (+ 1/6 (+ (* -1/36 (pow x 2)) (* 1/4 (/ x eps)))))","(* (pow eps 3) (- (+ 1/6 (+ (* -1/36 (pow x 2)) (+ (* 1/6 (/ (pow x 2) (pow eps 2))) (* 1/4 (/ x eps))))) (/ 1 (pow eps 2))))","(* -1/36 (* (pow eps 2) x))","(* (pow eps 2) (+ (* -1/36 x) (* 1/4 (/ 1 eps))))","(* (pow eps 2) (+ (* -1/36 x) (+ (* 1/6 (/ x (pow eps 2))) (* 1/4 (/ 1 eps)))))","(* (pow eps 3) (* x (+ 1/6 (* -1/36 (pow x 2)))))","(* (pow eps 3) (- (+ (* 1/4 (/ (pow x 2) eps)) (* x (+ 1/6 (* -1/36 (pow x 2))))) (* 1/2 (/ 1 eps))))","(* (pow eps 3) (- (+ (* 1/4 (/ (pow x 2) eps)) (+ (* x (+ 1/6 (* -1/36 (pow x 2)))) (/ (* x (- (* 1/6 (pow x 2)) 1)) (pow eps 2)))) (* 1/2 (/ 1 eps))))","(* (pow eps 2) (+ (* -1 (/ (sin x) (pow eps 2))) (* 1/6 (sin x))))","(* -1/36 (* (pow eps 3) x))","(* (pow eps 3) (+ (* -1/36 x) (* 1/4 (/ 1 eps))))","(* (pow eps 3) (+ (* -1/36 x) (+ (* 1/6 (/ x (pow eps 2))) (* 1/4 (/ 1 eps)))))","(- (cos (- x (* -1 eps))) (cos x))","(* -1 (* (pow eps 3) (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))) eps)) (* -1/6 (sin x)))))","(* (pow eps 2) (+ (* -1 (/ (+ (* 1/2 (cos x)) (/ (sin x) eps)) eps)) (* 1/6 (sin x))))","(* -1 (* (pow eps 3) (- (* 1/36 (pow x 2)) 1/6)))","(* -1 (* (pow eps 3) (- (+ (* -1/4 (/ x eps)) (* 1/36 (pow x 2))) 1/6)))","(* -1 (* (pow eps 3) (- (+ (* -1 (/ (+ (* -1 (/ (+ 1 (* -1/6 (pow x 2))) eps)) (* 1/4 x)) eps)) (* 1/36 (pow x 2))) 1/6)))","(* (pow eps 2) (+ (* -1 (/ (- (* -1/6 (/ x eps)) 1/4) eps)) (* -1/36 x)))","(* -1 (* (pow eps 3) (* x (- (* 1/36 (pow x 2)) 1/6))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (- (* 1/4 (pow x 2)) 1/2) eps)) (* x (- (* 1/36 (pow x 2)) 1/6)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (- (+ (* -1 (/ (* x (+ 1 (* -1/6 (pow x 2)))) eps)) (* 1/4 (pow x 2))) 1/2) eps)) (* x (- (* 1/36 (pow x 2)) 1/6)))))","(* -1 (* (pow eps 3) (- (* 1/36 x) (* 1/4 (/ 1 eps)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ 1/4 (* 1/6 (/ x eps))) eps)) (* 1/36 x))))"]],"memory":[[552000,50209888]],"method":["egg-herbie"],"outputs":[["(- (cos eps) 1)","(-.f64 (cos.f64 eps) #s(literal 1 binary64))","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(fma.f64 (fma.f64 (sin.f64 eps) x #s(literal 1 binary64)) #s(literal -1 binary64) (cos.f64 eps))","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(fma.f64 (-.f64 (*.f64 (fma.f64 (cos.f64 eps) #s(literal -1/2 binary64) #s(literal 1/2 binary64)) x) (sin.f64 eps)) x (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(fma.f64 (-.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal 1/6 binary64) (fma.f64 (cos.f64 eps) #s(literal -1/2 binary64) #s(literal 1/2 binary64))) x) (sin.f64 eps)) x (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(* -1/2 (pow eps 2))","(*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))","(+ (* -1/2 (pow eps 2)) (* eps (* x (- (* 1/6 (pow eps 2)) 1))))","(*.f64 eps (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)))","(+ (* -1/2 (pow eps 2)) (* x (+ (* 1/4 (* (pow eps 2) x)) (* eps (- (* 1/6 (pow eps 2)) 1)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps (*.f64 (fma.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/6 binary64) eps (*.f64 #s(literal 1/4 binary64) x)) (neg.f64 eps)) x))","(+ (* -1/2 (pow eps 2)) (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* x (+ (* -1/6 (* eps (* x (- (* 1/6 (pow eps 2)) 1)))) (* 1/4 (pow eps 2)))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/6 binary64) #s(literal 1 binary64)) (neg.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps)) (*.f64 (*.f64 (*.f64 eps eps) x) #s(literal 1/4 binary64))) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))","(* -1/2 eps)","(*.f64 #s(literal -1/2 binary64) eps)","(+ (* -1/2 eps) (* x (- (* 1/6 (pow eps 2)) 1)))","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))","(+ (* -1/2 eps) (* x (- (+ (* 1/6 (pow eps 2)) (* 1/4 (* eps x))) 1)))","(fma.f64 (fma.f64 eps (fma.f64 #s(literal 1/6 binary64) eps (*.f64 #s(literal 1/4 binary64) x)) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))","(+ (* -1/2 eps) (* x (- (+ (* 1/6 (pow eps 2)) (* x (+ (* -1/6 (* x (- (* 1/6 (pow eps 2)) 1))) (* 1/4 eps)))) 1)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x (*.f64 #s(literal -1/2 binary64) eps))","eps","(+ eps (* -1/2 (* eps (pow x 2))))","(fma.f64 (*.f64 (*.f64 x x) eps) #s(literal -1/2 binary64) eps)","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* 1/24 (* eps (pow x 2))))))","(fma.f64 (*.f64 eps (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64))) (*.f64 x x) eps)","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* (pow x 2) (+ (* -1/720 (* eps (pow x 2))) (* 1/24 eps))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/720 binary64) eps) (pow.f64 x #s(literal 4 binary64)) (*.f64 eps (fma.f64 #s(literal 1/24 binary64) (*.f64 x x) #s(literal -1/2 binary64)))) (*.f64 x x) eps)","(* -1 (* eps x))","(*.f64 (neg.f64 x) eps)","(* x (+ (* -1 eps) (* 1/6 (* eps (pow x 2)))))","(*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) eps)","(* x (+ (* -1 eps) (* (pow x 2) (+ (* -1/120 (* eps (pow x 2))) (* 1/6 eps)))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 eps (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64))) (*.f64 (neg.f64 x) eps))","(* x (+ (* -1 eps) (* (pow x 2) (+ (* 1/6 eps) (* (pow x 2) (+ (* -1/120 eps) (* 1/5040 (* eps (pow x 2)))))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps (*.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 eps (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64))))) x)","(* -1 x)","(neg.f64 x)","(* x (- (* 1/6 (pow x 2)) 1))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)","(* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)","(* x (- (* (pow x 2) (+ 1/6 (* (pow x 2) (- (* 1/5040 (pow x 2)) 1/120)))) 1))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)","x","(* x (+ 1 (* -1/6 (pow x 2))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/6 binary64) x)","(* x (+ 1 (* (pow x 2) (- (* 1/120 (pow x 2)) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64)) x)","(* x (+ 1 (* (pow x 2) (- (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) 1/6))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) x)","(- (* 1/6 (pow eps 3)) eps)","(neg.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps))","(- (+ (* 1/6 (pow eps 3)) (* 1/4 (* (pow eps 2) x))) eps)","(fma.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/6 binary64) eps (*.f64 #s(literal 1/4 binary64) x)) (neg.f64 eps))","(- (+ (* 1/6 (pow eps 3)) (* x (+ (* -1/6 (* eps (* x (- (* 1/6 (pow eps 2)) 1)))) (* 1/4 (pow eps 2))))) eps)","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/6 binary64) #s(literal 1 binary64)) (neg.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps)) (*.f64 (*.f64 (*.f64 eps eps) x) #s(literal 1/4 binary64)))","(* 1/4 eps)","(*.f64 #s(literal 1/4 binary64) eps)","(+ (* -1/6 (* x (- (* 1/6 (pow eps 2)) 1))) (* 1/4 eps))","(fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps))","(+ (* -1/2 (pow eps 2)) (* x (- (* 1/6 (pow eps 3)) eps)))","(*.f64 eps (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)))","(+ (* -1/2 (pow eps 2)) (* x (- (+ (* 1/6 (pow eps 3)) (* 1/4 (* (pow eps 2) x))) eps)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps (*.f64 (fma.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/6 binary64) eps (*.f64 #s(literal 1/4 binary64) x)) (neg.f64 eps)) x))","(+ (* -1/2 (pow eps 2)) (* x (- (+ (* 1/6 (pow eps 3)) (* x (+ (* -1/6 (* eps (* x (- (* 1/6 (pow eps 2)) 1)))) (* 1/4 (pow eps 2))))) eps)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/6 binary64) #s(literal 1 binary64)) (neg.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps)) (*.f64 (*.f64 (*.f64 eps eps) x) #s(literal 1/4 binary64))) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))","(* x (- (* 1/6 (pow eps 2)) 1))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)","(* x (- (+ (* -1/6 (* (pow x 2) (- (* 1/6 (pow eps 2)) 1))) (* 1/6 (pow eps 2))) 1))","(*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/6 binary64) #s(literal 1 binary64)) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x)","(* x (- (+ (* 1/6 (pow eps 2)) (* (pow x 2) (+ (* -1/6 (- (* 1/6 (pow eps 2)) 1)) (* 1/120 (* (pow x 2) (- (* 1/6 (pow eps 2)) 1)))))) 1))","(*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x)","(* x (- (+ (* 1/6 (pow eps 2)) (* (pow x 2) (+ (* -1/6 (- (* 1/6 (pow eps 2)) 1)) (* (pow x 2) (+ (* -1/5040 (* (pow x 2) (- (* 1/6 (pow eps 2)) 1))) (* 1/120 (- (* 1/6 (pow eps 2)) 1))))))) 1))","(*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x)","1/6","#s(literal 1/6 binary64)","(+ 1/6 (* -1/120 (pow x 2)))","(fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64))","(+ (* -1/2 eps) (* 1/4 (* eps (pow x 2))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) x) x #s(literal -1/2 binary64)) eps)","(+ (* -1/2 eps) (* (pow x 2) (+ (* -1/48 (* eps (pow x 2))) (* 1/4 eps))))","(fma.f64 (*.f64 #s(literal -1/48 binary64) eps) (pow.f64 x #s(literal 4 binary64)) (*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) x) x #s(literal -1/2 binary64)) eps))","(+ (* -1/2 eps) (* (pow x 2) (+ (* 1/4 eps) (* (pow x 2) (+ (* -1/48 eps) (* 1/1440 (* eps (pow x 2))))))))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) x) x #s(literal -1/2 binary64)) eps (*.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 eps (fma.f64 #s(literal 1/1440 binary64) (*.f64 x x) #s(literal -1/48 binary64)))))","(* 1/4 (pow eps 2))","(*.f64 #s(literal 1/4 binary64) (*.f64 eps eps))","(+ (* -1/6 (* eps (* x (- (* 1/6 (pow eps 2)) 1)))) (* 1/4 (pow eps 2)))","(*.f64 eps (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps)))","(- (cos (+ eps x)) (cos x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(* eps (+ (* -1/2 (* eps (cos x))) (* (sin x) (- (* 1/6 (pow eps 2)) 1))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(+ (* -1/2 (* eps (cos x))) (* (sin x) (- (* 1/6 (pow eps 2)) 1)))","(fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x)))","(* eps (cos x))","(*.f64 (cos.f64 x) eps)","(* -1 (* eps (sin x)))","(*.f64 (neg.f64 (sin.f64 x)) eps)","(* -1 (sin x))","(neg.f64 (sin.f64 x))","(* -1/120 (pow x 5))","(*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -1/120 binary64))","(* (pow x 5) (- (* 1/6 (/ 1 (pow x 2))) 1/120))","(*.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) (*.f64 x x)) #s(literal 1/120 binary64)) (pow.f64 x #s(literal 5 binary64)))","(* (pow x 5) (- (* 1/6 (/ 1 (pow x 2))) (+ 1/120 (/ 1 (pow x 4)))))","(*.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) (*.f64 x x)) #s(literal 1/120 binary64)) (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64)))) (pow.f64 x #s(literal 5 binary64)))","(sin x)","(sin.f64 x)","(* -1/6 (* eps (* (pow x 2) (- (* 1/6 (pow eps 2)) 1))))","(*.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) x) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps)) x)","(* (pow x 2) (+ (* -1/6 (* eps (- (* 1/6 (pow eps 2)) 1))) (* 1/4 (/ (pow eps 2) x))))","(*.f64 (fma.f64 (/.f64 (*.f64 eps eps) x) #s(literal 1/4 binary64) (*.f64 #s(literal -1/6 binary64) (neg.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps)))) (*.f64 x x))","(* (pow x 2) (- (+ (* -1/6 (* eps (- (* 1/6 (pow eps 2)) 1))) (+ (* 1/6 (/ (pow eps 3) (pow x 2))) (* 1/4 (/ (pow eps 2) x)))) (/ eps (pow x 2))))","(*.f64 (-.f64 (fma.f64 (/.f64 #s(literal 1/6 binary64) x) (/.f64 (pow.f64 eps #s(literal 3 binary64)) x) (fma.f64 (/.f64 (*.f64 eps eps) x) #s(literal 1/4 binary64) (*.f64 #s(literal -1/6 binary64) (neg.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps))))) (/.f64 eps (*.f64 x x))) (*.f64 x x))","(* -1/6 (* x (- (* 1/6 (pow eps 2)) 1)))","(*.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x))","(* x (+ (* -1/6 (- (* 1/6 (pow eps 2)) 1)) (* 1/4 (/ eps x))))","(*.f64 (fma.f64 (/.f64 eps x) #s(literal 1/4 binary64) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) x)","(* -1/6 (* eps (* (pow x 3) (- (* 1/6 (pow eps 2)) 1))))","(*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64)) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps))","(* (pow x 3) (+ (* -1/6 (* eps (- (* 1/6 (pow eps 2)) 1))) (* 1/4 (/ (pow eps 2) x))))","(*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (/.f64 (*.f64 eps eps) x) #s(literal 1/4 binary64) (*.f64 #s(literal -1/6 binary64) (neg.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps)))))","(* (pow x 3) (- (+ (* -1/6 (* eps (- (* 1/6 (pow eps 2)) 1))) (+ (* 1/6 (/ (pow eps 3) (pow x 2))) (* 1/4 (/ (pow eps 2) x)))) (/ eps (pow x 2))))","(*.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 (fma.f64 (/.f64 #s(literal 1/6 binary64) x) (/.f64 (pow.f64 eps #s(literal 3 binary64)) x) (fma.f64 (/.f64 (*.f64 eps eps) x) #s(literal 1/4 binary64) (*.f64 #s(literal -1/6 binary64) (neg.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps))))) (/.f64 eps (*.f64 x x))))","(* (pow x 3) (- (+ (* -1/2 (/ (pow eps 2) (pow x 3))) (+ (* -1/6 (* eps (- (* 1/6 (pow eps 2)) 1))) (+ (* 1/6 (/ (pow eps 3) (pow x 2))) (* 1/4 (/ (pow eps 2) x))))) (/ eps (pow x 2))))","(*.f64 (-.f64 (+.f64 (fma.f64 (/.f64 #s(literal 1/6 binary64) x) (/.f64 (pow.f64 eps #s(literal 3 binary64)) x) (*.f64 #s(literal -1/6 binary64) (neg.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps)))) (*.f64 (/.f64 (*.f64 eps eps) x) (+.f64 #s(literal 1/4 binary64) (/.f64 #s(literal -1/2 binary64) (*.f64 x x))))) (/.f64 eps (*.f64 x x))) (pow.f64 x #s(literal 3 binary64)))","(* (sin x) (- (* 1/6 (pow eps 2)) 1))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))","(* -1/120 (pow x 2))","(*.f64 #s(literal -1/120 binary64) (*.f64 x x))","(* (pow x 2) (- (* 1/6 (/ 1 (pow x 2))) 1/120))","(*.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) (*.f64 x x)) #s(literal 1/120 binary64)) x) x)","(* -1/2 (* eps (cos x)))","(*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)","(* -1/6 (* eps (* x (- (* 1/6 (pow eps 2)) 1))))","(*.f64 (*.f64 #s(literal 1/6 binary64) x) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps))","(* x (+ (* -1/6 (* eps (- (* 1/6 (pow eps 2)) 1))) (* 1/4 (/ (pow eps 2) x))))","(*.f64 (fma.f64 (/.f64 (*.f64 eps eps) x) #s(literal 1/4 binary64) (*.f64 #s(literal -1/6 binary64) (neg.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps)))) x)","(- (cos (- eps (* -1 x))) (cos x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(* -1 (* (pow x 5) (- 1/120 (* 1/6 (/ 1 (pow x 2))))))","(*.f64 (neg.f64 (-.f64 #s(literal 1/120 binary64) (/.f64 #s(literal 1/6 binary64) (*.f64 x x)))) (pow.f64 x #s(literal 5 binary64)))","(* -1 (* (pow x 5) (- (+ 1/120 (/ 1 (pow x 4))) (* 1/6 (/ 1 (pow x 2))))))","(*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (+.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal 1/120 binary64) (/.f64 #s(literal 1/6 binary64) (*.f64 x x)))))","(* (pow x 2) (+ (* -1 (/ (+ (* -1 (/ (- (* 1/6 (pow eps 3)) eps) x)) (* -1/4 (pow eps 2))) x)) (* -1/6 (* eps (- (* 1/6 (pow eps 2)) 1)))))","(*.f64 (*.f64 (fma.f64 #s(literal -1/6 binary64) (neg.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps)) (/.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) eps) eps (/.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps) x)) (neg.f64 x))) x) x)","(* -1 (* x (+ (* -1/4 (/ eps x)) (* 1/6 (- (* 1/6 (pow eps 2)) 1)))))","(*.f64 (fma.f64 (/.f64 eps x) #s(literal 1/4 binary64) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) x)","(* -1 (* (pow x 3) (+ (* -1/4 (/ (pow eps 2) x)) (* 1/6 (* eps (- (* 1/6 (pow eps 2)) 1))))))","(*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (/.f64 (*.f64 eps eps) x) #s(literal 1/4 binary64) (*.f64 #s(literal -1/6 binary64) (neg.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (- (+ (* 1/6 (/ (pow eps 3) x)) (* 1/4 (pow eps 2))) (/ eps x)) x)) (* 1/6 (* eps (- (* 1/6 (pow eps 2)) 1))))))","(*.f64 (neg.f64 (fma.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps)) #s(literal 1/6 binary64) (/.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) eps) eps (/.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps)) x)) (neg.f64 x)))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (- (* 1/6 (pow eps 3)) eps)) (* 1/2 (/ (pow eps 2) x))) x)) (* 1/4 (pow eps 2))) x)) (* 1/6 (* eps (- (* 1/6 (pow eps 2)) 1))))))","(*.f64 (neg.f64 (fma.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps)) #s(literal 1/6 binary64) (/.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) eps) eps (/.f64 (fma.f64 (/.f64 (*.f64 eps eps) x) #s(literal 1/2 binary64) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps)) (neg.f64 x))) (neg.f64 x)))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* x (+ (* -1/4 (/ (pow eps 2) x)) (* 1/6 (* eps (- (* 1/6 (pow eps 2)) 1))))))","(*.f64 (fma.f64 (/.f64 (*.f64 eps eps) x) #s(literal 1/4 binary64) (*.f64 #s(literal -1/6 binary64) (neg.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps)))) x)","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps (neg.f64 (sin.f64 x))) eps)","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(*.f64 (fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (*.f64 (*.f64 (cos.f64 x) eps) #s(literal 1/24 binary64))) eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(* eps (+ (* -1 (sin x)) (* -1/2 (* eps (cos x)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps (neg.f64 (sin.f64 x))) eps)","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(+ (* -1 (sin x)) (* -1/2 (* eps (cos x))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps (neg.f64 (sin.f64 x)))","(+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))))","(fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x)))","(* eps (- (* 1/6 (pow x 2)) 1))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)","(* eps (- (+ (* 1/6 (pow x 2)) (* 1/4 (* eps x))) 1))","(*.f64 (fma.f64 x (fma.f64 #s(literal 1/4 binary64) eps (*.f64 #s(literal 1/6 binary64) x)) #s(literal -1 binary64)) eps)","(* eps (- (+ (* 1/6 (pow x 2)) (* eps (+ (* 1/4 x) (* eps (+ 1/6 (* -1/36 (pow x 2))))))) 1))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 x x) #s(literal 1/6 binary64)) eps (*.f64 #s(literal 1/4 binary64) x)) eps (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64))) eps)","(* 1/6 x)","(*.f64 #s(literal 1/6 binary64) x)","(+ (* 1/6 x) (* 1/4 eps))","(fma.f64 #s(literal 1/4 binary64) eps (*.f64 #s(literal 1/6 binary64) x))","(+ (* 1/6 x) (* eps (+ 1/4 (* -1/36 (* eps x)))))","(fma.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps x) #s(literal 1/4 binary64)) eps (*.f64 #s(literal 1/6 binary64) x))","(* eps (* x (- (* 1/6 (pow x 2)) 1)))","(*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) eps)","(* eps (+ (* eps (- (* 1/4 (pow x 2)) 1/2)) (* x (- (* 1/6 (pow x 2)) 1))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) x) x #s(literal -1/2 binary64)) eps (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps)","(* eps (+ (* eps (- (+ (* 1/4 (pow x 2)) (* eps (* x (+ 1/6 (* -1/36 (pow x 2)))))) 1/2)) (* x (- (* 1/6 (pow x 2)) 1))))","(*.f64 (fma.f64 (fma.f64 x (fma.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 x x) #s(literal 1/6 binary64)) eps (*.f64 #s(literal 1/4 binary64) x)) #s(literal -1/2 binary64)) eps (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps)","(+ (* -1 (sin x)) (* 1/6 (* (pow eps 2) (sin x))))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))","(* 1/6 (* eps x))","(*.f64 (*.f64 #s(literal 1/6 binary64) x) eps)","(* eps (+ (* 1/6 x) (* 1/4 eps)))","(*.f64 (fma.f64 #s(literal 1/4 binary64) eps (*.f64 #s(literal 1/6 binary64) x)) eps)","(* eps (+ (* 1/6 x) (* eps (+ 1/4 (* -1/36 (* eps x))))))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps x) #s(literal 1/4 binary64)) eps (*.f64 #s(literal 1/6 binary64) x)) eps)","(* 1/6 (* (pow eps 3) (sin x)))","(*.f64 (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))))","(*.f64 (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (*.f64 #s(literal 1/6 binary64) (sin.f64 x))) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ (* -1 (/ (sin x) (pow eps 2))) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x)))))","(*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (/.f64 (fma.f64 #s(literal -1/2 binary64) (cos.f64 x) (/.f64 (neg.f64 (sin.f64 x)) eps)) eps)) (pow.f64 eps #s(literal 3 binary64)))","(* 1/6 (* (pow eps 2) (sin x)))","(*.f64 (*.f64 (*.f64 (sin.f64 x) eps) eps) #s(literal 1/6 binary64))","(* (pow eps 2) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))))","(*.f64 (*.f64 (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (*.f64 #s(literal 1/6 binary64) (sin.f64 x))) eps) eps)","(* (pow eps 2) (+ (* -1 (/ (sin x) (pow eps 2))) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x)))))","(*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (/.f64 (fma.f64 #s(literal -1/2 binary64) (cos.f64 x) (/.f64 (neg.f64 (sin.f64 x)) eps)) eps)) (*.f64 eps eps))","(* (pow eps 3) (+ 1/6 (* -1/36 (pow x 2))))","(*.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ 1/6 (+ (* -1/36 (pow x 2)) (* 1/4 (/ x eps)))))","(*.f64 (fma.f64 x (fma.f64 #s(literal -1/36 binary64) x (/.f64 #s(literal 1/4 binary64) eps)) #s(literal 1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (- (+ 1/6 (+ (* -1/36 (pow x 2)) (+ (* 1/6 (/ (pow x 2) (pow eps 2))) (* 1/4 (/ x eps))))) (/ 1 (pow eps 2))))","(*.f64 (-.f64 (fma.f64 (*.f64 x x) (+.f64 (/.f64 #s(literal 1/6 binary64) (*.f64 eps eps)) #s(literal -1/36 binary64)) (fma.f64 (/.f64 x eps) #s(literal 1/4 binary64) #s(literal 1/6 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 eps eps))) (pow.f64 eps #s(literal 3 binary64)))","(* -1/36 (* (pow eps 2) x))","(*.f64 (*.f64 #s(literal -1/36 binary64) (*.f64 eps x)) eps)","(* (pow eps 2) (+ (* -1/36 x) (* 1/4 (/ 1 eps))))","(*.f64 (*.f64 (fma.f64 #s(literal -1/36 binary64) x (/.f64 #s(literal 1/4 binary64) eps)) eps) eps)","(* (pow eps 2) (+ (* -1/36 x) (+ (* 1/6 (/ x (pow eps 2))) (* 1/4 (/ 1 eps)))))","(*.f64 (fma.f64 x (+.f64 (/.f64 #s(literal 1/6 binary64) (*.f64 eps eps)) #s(literal -1/36 binary64)) (/.f64 #s(literal 1/4 binary64) eps)) (*.f64 eps eps))","(* (pow eps 3) (* x (+ 1/6 (* -1/36 (pow x 2)))))","(*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) x) (fma.f64 #s(literal -1/36 binary64) (*.f64 x x) #s(literal 1/6 binary64)))","(* (pow eps 3) (- (+ (* 1/4 (/ (pow x 2) eps)) (* x (+ 1/6 (* -1/36 (pow x 2))))) (* 1/2 (/ 1 eps))))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 x x) #s(literal 1/6 binary64)) x (/.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) x) x #s(literal -1/2 binary64)) eps)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (- (+ (* 1/4 (/ (pow x 2) eps)) (+ (* x (+ 1/6 (* -1/36 (pow x 2)))) (/ (* x (- (* 1/6 (pow x 2)) 1)) (pow eps 2)))) (* 1/2 (/ 1 eps))))","(*.f64 (fma.f64 x (+.f64 (/.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps) eps) (fma.f64 #s(literal -1/36 binary64) (*.f64 x x) #s(literal 1/6 binary64))) (/.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) x) x #s(literal -1/2 binary64)) eps)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 2) (+ (* -1 (/ (sin x) (pow eps 2))) (* 1/6 (sin x))))","(*.f64 (*.f64 (sin.f64 x) (+.f64 (/.f64 #s(literal -1 binary64) (*.f64 eps eps)) #s(literal 1/6 binary64))) (*.f64 eps eps))","(* -1/36 (* (pow eps 3) x))","(*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) x) #s(literal -1/36 binary64))","(* (pow eps 3) (+ (* -1/36 x) (* 1/4 (/ 1 eps))))","(*.f64 (fma.f64 #s(literal -1/36 binary64) x (/.f64 #s(literal 1/4 binary64) eps)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ (* -1/36 x) (+ (* 1/6 (/ x (pow eps 2))) (* 1/4 (/ 1 eps)))))","(*.f64 (fma.f64 x (+.f64 (/.f64 #s(literal 1/6 binary64) (*.f64 eps eps)) #s(literal -1/36 binary64)) (/.f64 #s(literal 1/4 binary64) eps)) (pow.f64 eps #s(literal 3 binary64)))","(- (cos (- x (* -1 eps))) (cos x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(* -1 (* (pow eps 3) (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps)))))","(*.f64 (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (*.f64 #s(literal 1/6 binary64) (sin.f64 x))) (pow.f64 eps #s(literal 3 binary64)))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))) eps)) (* -1/6 (sin x)))))","(*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (/.f64 (fma.f64 #s(literal -1/2 binary64) (cos.f64 x) (/.f64 (neg.f64 (sin.f64 x)) eps)) eps)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 2) (+ (* -1 (/ (+ (* 1/2 (cos x)) (/ (sin x) eps)) eps)) (* 1/6 (sin x))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (/.f64 (fma.f64 #s(literal 1/2 binary64) (cos.f64 x) (/.f64 (sin.f64 x) eps)) (neg.f64 eps))) eps) eps)","(* -1 (* (pow eps 3) (- (* 1/36 (pow x 2)) 1/6)))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/6 binary64))) (pow.f64 eps #s(literal 3 binary64)))","(* -1 (* (pow eps 3) (- (+ (* -1/4 (/ x eps)) (* 1/36 (pow x 2))) 1/6)))","(*.f64 (neg.f64 (fma.f64 (/.f64 x eps) #s(literal -1/4 binary64) (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/6 binary64)))) (pow.f64 eps #s(literal 3 binary64)))","(* -1 (* (pow eps 3) (- (+ (* -1 (/ (+ (* -1 (/ (+ 1 (* -1/6 (pow x 2))) eps)) (* 1/4 x)) eps)) (* 1/36 (pow x 2))) 1/6)))","(*.f64 (neg.f64 (-.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/6 binary64)) (/.f64 (fma.f64 #s(literal 1/4 binary64) x (/.f64 (fma.f64 (*.f64 x x) #s(literal -1/6 binary64) #s(literal 1 binary64)) (neg.f64 eps))) eps))) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 2) (+ (* -1 (/ (- (* -1/6 (/ x eps)) 1/4) eps)) (* -1/36 x)))","(*.f64 (*.f64 (fma.f64 #s(literal -1/36 binary64) x (/.f64 (fma.f64 (/.f64 x eps) #s(literal -1/6 binary64) #s(literal -1/4 binary64)) (neg.f64 eps))) eps) eps)","(* -1 (* (pow eps 3) (* x (- (* 1/36 (pow x 2)) 1/6))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/6 binary64)) (pow.f64 eps #s(literal 3 binary64))) (neg.f64 x))","(* -1 (* (pow eps 3) (+ (* -1 (/ (- (* 1/4 (pow x 2)) 1/2) eps)) (* x (- (* 1/36 (pow x 2)) 1/6)))))","(*.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/6 binary64)) x (/.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) x) x #s(literal -1/2 binary64)) (neg.f64 eps)))) (pow.f64 eps #s(literal 3 binary64)))","(* -1 (* (pow eps 3) (+ (* -1 (/ (- (+ (* -1 (/ (* x (+ 1 (* -1/6 (pow x 2)))) eps)) (* 1/4 (pow x 2))) 1/2) eps)) (* x (- (* 1/36 (pow x 2)) 1/6)))))","(*.f64 (neg.f64 (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/6 binary64)) x (/.f64 (-.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/6 binary64) x) eps) (fma.f64 (*.f64 #s(literal 1/4 binary64) x) x #s(literal -1/2 binary64))) eps)))","(* -1 (* (pow eps 3) (- (* 1/36 x) (* 1/4 (/ 1 eps)))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/36 binary64) x (/.f64 #s(literal -1/4 binary64) eps))) (pow.f64 eps #s(literal 3 binary64)))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ 1/4 (* 1/6 (/ x eps))) eps)) (* 1/36 x))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/36 binary64) x (/.f64 (fma.f64 (/.f64 x eps) #s(literal 1/6 binary64) #s(literal 1/4 binary64)) (neg.f64 eps)))) (pow.f64 eps #s(literal 3 binary64)))"]],"stop":[["iter limit",1],["node limit",1]],"time":314.0,"type":"simplify"},{"count":[[25,412]],"egraph":[[0,10002,474,0.117622825],[2,2715,474,0.041152879],[1,394,474,0.010312476],[0,105,474,0.003769816],[0,62,476,0.000616616]],"inputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))) eps))","(*.f64 (fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))) eps)","(fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x)))","(*.f64 eps (cos.f64 x))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","(*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps)","#s(approx (neg (sin x)) (neg.f64 x))","(neg.f64 x)","(*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","(*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps)","#s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 eps (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64))))) eps))","(*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 eps (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64))))) eps)","(fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 eps (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)))))","(sin.f64 x)","(fma.f64 (*.f64 eps (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)))","(fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps))","(fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","(*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))","(fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64))","#s(approx (* (* (cos x) -1/2) eps) (*.f64 eps (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64))))","#s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))))","(*.f64 eps (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps)))"]],"memory":[[-448320,79313744]],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)) eps))","(*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)) eps)","(*.f64 eps (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) eps) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) eps) (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) eps)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) eps) (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) eps) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) eps)) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) eps) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) #s(literal 3 binary64))) (fma.f64 (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)) (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)) (-.f64 (*.f64 (*.f64 eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) (*.f64 eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)))) (*.f64 (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)) (*.f64 eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)))))))","(/.f64 (+.f64 (pow.f64 (*.f64 eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) #s(literal 3 binary64)) (pow.f64 (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)) #s(literal 3 binary64))) (fma.f64 (*.f64 eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) (*.f64 eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) (-.f64 (*.f64 (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)) (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps))) (*.f64 (*.f64 eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64))) eps)) (neg.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64))) eps)) (neg.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) (*.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 x) eps)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64))) eps)) (neg.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) (*.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 x) eps))) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64))) eps)) (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 eps (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64))))) (neg.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)))))","(/.f64 (neg.f64 (*.f64 eps (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64))))) (neg.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) (*.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 x) eps)))))","(/.f64 (neg.f64 (*.f64 eps (fma.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) (*.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 x) eps))) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 eps (fma.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64))) eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64))) eps) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) (*.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 x) eps))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64))) eps) (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) (*.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 x) eps))) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64))) eps) (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64))))","(/.f64 (*.f64 eps (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)))) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))))","(/.f64 (*.f64 eps (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64)))) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) (*.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 x) eps))))","(/.f64 (*.f64 eps (fma.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64)))) (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) (*.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 x) eps))) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64))))","(/.f64 (*.f64 eps (fma.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64)))) (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64))))","(fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) eps (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) eps))","(fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) eps (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) eps))","(fma.f64 eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)))","(fma.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))))","(+.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) eps))","(+.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) eps) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) eps))","(+.f64 (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)) (*.f64 eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))))","(+.f64 (*.f64 eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)))","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64))) (pow.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64))) (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) (*.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 x) eps))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) (*.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 x) eps))) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) (*.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 x) eps))) (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) (*.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 x) eps))) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64))) (fma.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps))) #s(literal 3 binary64)) (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64))) (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps))) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps))) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps))) (neg.f64 (sin.f64 x))))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (fma.f64 (sin.f64 x) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps)) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 (sin.f64 x) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)) (fma.f64 (sin.f64 x) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps))) (*.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps)) (fma.f64 (sin.f64 x) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) (*.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 x) eps))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) (*.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 x) eps))) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)))) (*.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)))) (*.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) (*.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 x) eps)))) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) (*.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 x) eps))) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64)))) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) (*.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 x) eps))) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) (*.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 x) eps)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) (*.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 x) eps)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) (*.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 x) eps))) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64))) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) (*.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 x) eps))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64))) (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) (*.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 x) eps))) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) (*.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 x) eps))) (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) (*.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 x) eps))) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64))) (fma.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) (*.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 x) eps))) (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) (*.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 x) eps))) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64))) (fma.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64))))))","(fma.f64 (*.f64 (sin.f64 x) (*.f64 #s(literal 1/6 binary64) eps)) eps (fma.f64 (sin.f64 x) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)))","(fma.f64 (*.f64 (sin.f64 x) (*.f64 eps eps)) #s(literal 1/6 binary64) (fma.f64 (sin.f64 x) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)))","(fma.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps) (fma.f64 (sin.f64 x) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)))","(fma.f64 (*.f64 (sin.f64 x) eps) (*.f64 #s(literal 1/6 binary64) eps) (fma.f64 (sin.f64 x) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)))","(fma.f64 (*.f64 #s(literal 1/6 binary64) eps) (*.f64 eps (sin.f64 x)) (fma.f64 (sin.f64 x) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)))","(fma.f64 (*.f64 (*.f64 eps eps) #s(literal 1/6 binary64)) (sin.f64 x) (fma.f64 (sin.f64 x) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)))","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps))","(fma.f64 (sin.f64 x) (*.f64 (*.f64 eps eps) #s(literal 1/6 binary64)) (fma.f64 (sin.f64 x) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)))","(fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps))","(fma.f64 (*.f64 eps eps) (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) (fma.f64 (sin.f64 x) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)))","(fma.f64 #s(literal 1/6 binary64) (*.f64 (*.f64 eps eps) (sin.f64 x)) (fma.f64 (sin.f64 x) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)))","(fma.f64 #s(literal -1/2 binary64) (*.f64 (cos.f64 x) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)))","(fma.f64 (*.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)))","(fma.f64 (cos.f64 x) (*.f64 #s(literal -1/2 binary64) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)))","(fma.f64 eps (*.f64 (*.f64 #s(literal 1/6 binary64) eps) (sin.f64 x)) (fma.f64 (sin.f64 x) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)))","(fma.f64 eps (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)))) (/.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) (*.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 x) eps)))) (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) #s(literal 2 binary64)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) (*.f64 #s(literal 1/2 binary64) (*.f64 (cos.f64 x) eps)))))","(+.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps))) (neg.f64 (sin.f64 x)))","(+.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps)) (fma.f64 (sin.f64 x) #s(literal -1 binary64) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps)))","(+.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps))","(+.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)))","(*.f64 (cos.f64 x) eps)","(*.f64 eps (cos.f64 x))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","(*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps)","(*.f64 eps #s(approx (neg (sin x)) (neg.f64 x)))","#s(approx (neg (sin x)) (neg.f64 x))","(*.f64 #s(literal -1 binary64) x)","(*.f64 x #s(literal -1 binary64))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 #s(literal 0 binary64) (neg.f64 x)))))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (*.f64 x x))) (neg.f64 (+.f64 #s(literal 0 binary64) x)))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (fma.f64 x x (*.f64 #s(literal 0 binary64) x)))))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 x x)) (+.f64 #s(literal 0 binary64) x))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 x x (*.f64 #s(literal 0 binary64) x))))","(neg.f64 x)","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) x)) (/.f64 (*.f64 x x) (+.f64 #s(literal 0 binary64) x)))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 x x (*.f64 #s(literal 0 binary64) x)))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (fma.f64 x x (*.f64 #s(literal 0 binary64) x)))))","(-.f64 #s(literal 0 binary64) x)","(+.f64 #s(literal 0 binary64) (neg.f64 x))","(*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)","(*.f64 x (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x) x) #s(literal 3 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x) x) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x) x) (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x) x) (neg.f64 x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x)) #s(literal 3 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (fma.f64 (*.f64 x (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x)) (*.f64 x (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x)) (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 (*.f64 x (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x)) (neg.f64 x)))))","(/.f64 (+.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x) x) #s(literal 3 binary64))) (fma.f64 (neg.f64 x) (neg.f64 x) (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x) x) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x) x)) (*.f64 (neg.f64 x) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x) x)))))","(/.f64 (+.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) (pow.f64 (*.f64 x (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x)) #s(literal 3 binary64))) (fma.f64 (neg.f64 x) (neg.f64 x) (-.f64 (*.f64 (*.f64 x (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x)) (*.f64 x (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x))) (*.f64 (neg.f64 x) (*.f64 x (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64)) x)) (neg.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)) x)) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) (neg.f64 x)))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64)))) (neg.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) (neg.f64 x)))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64)) x) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)) x) (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) (neg.f64 x))))","(/.f64 (*.f64 x (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64))) (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(/.f64 (*.f64 x (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64))) (-.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) (neg.f64 x))))","(fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x) x (neg.f64 x))","(fma.f64 #s(literal -1 binary64) x (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x) x))","(fma.f64 #s(literal -1 binary64) x (*.f64 x (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x)))","(fma.f64 x (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x) (neg.f64 x))","(fma.f64 x #s(literal -1 binary64) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x) x))","(fma.f64 x #s(literal -1 binary64) (*.f64 x (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x)))","(+.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x) x) (neg.f64 x))","(+.f64 (*.f64 x (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x)) (neg.f64 x))","(+.f64 (neg.f64 x) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x) x))","(+.f64 (neg.f64 x) (*.f64 x (*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) x) x)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","(*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps)","(*.f64 eps #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)))","#s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))) eps))","(*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))) eps)","(*.f64 eps (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) eps) (-.f64 (*.f64 (*.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) eps) (*.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) eps)) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) eps) (*.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) eps) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) eps) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) eps) (*.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) eps) (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) eps)) (*.f64 (*.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) eps)))))","(/.f64 (+.f64 (pow.f64 (*.f64 eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) #s(literal 3 binary64)) (pow.f64 (*.f64 eps #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))) #s(literal 3 binary64))) (fma.f64 (*.f64 eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) (*.f64 eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) (-.f64 (*.f64 (*.f64 eps #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))) (*.f64 eps #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)))) (*.f64 (*.f64 eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) (*.f64 eps #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)))))))","(/.f64 (+.f64 (pow.f64 (*.f64 eps #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))) #s(literal 3 binary64)) (pow.f64 (*.f64 eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) #s(literal 3 binary64))) (fma.f64 (*.f64 eps #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))) (*.f64 eps #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))) (-.f64 (*.f64 (*.f64 eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) (*.f64 eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)))) (*.f64 (*.f64 eps #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))) (*.f64 eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) #s(literal 2 binary64))) eps)) (neg.f64 (-.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64))) eps)) (neg.f64 (fma.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) (-.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 eps (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) #s(literal 2 binary64))))) (neg.f64 (-.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)))))","(/.f64 (neg.f64 (*.f64 eps (+.f64 (pow.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64))))) (neg.f64 (fma.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) (-.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) #s(literal 2 binary64))) eps) (-.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))))","(/.f64 (*.f64 (+.f64 (pow.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64))) eps) (fma.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) (-.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64))))","(/.f64 (*.f64 eps (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) #s(literal 2 binary64)))) (-.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))))","(/.f64 (*.f64 eps (+.f64 (pow.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64)))) (fma.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) (-.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64))))","(fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) eps (*.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) eps))","(fma.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) eps (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) eps))","(fma.f64 eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) (*.f64 eps #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))))","(fma.f64 eps #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) (*.f64 eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))))","(+.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) eps) (*.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) eps))","(+.f64 (*.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) eps))","(+.f64 (*.f64 eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) (*.f64 eps #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))))","(+.f64 (*.f64 eps #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))) (*.f64 eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) #s(literal 2 binary64))) (pow.f64 (-.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64))) (pow.f64 (fma.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) (-.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))) (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) (-.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64))) (+.f64 (pow.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (+.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps))) #s(literal 3 binary64)) (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64))) (fma.f64 (+.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps))) (+.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps))) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (+.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps))) (neg.f64 (sin.f64 x))))))","(/.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/216 binary64)) (pow.f64 (fma.f64 (sin.f64 x) #s(literal -1 binary64) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps)) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 (sin.f64 x) #s(literal -1 binary64) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))) (fma.f64 (sin.f64 x) #s(literal -1 binary64) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)))) (*.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps)) (fma.f64 (sin.f64 x) #s(literal -1 binary64) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) (-.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)))) (*.f64 (-.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))) (pow.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) #s(literal 2 binary64)))) (*.f64 (-.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))) (-.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)))))","(/.f64 (-.f64 (pow.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64))) (-.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) (-.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) #s(literal 2 binary64))) (-.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))))","(/.f64 (+.f64 (pow.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))))))","(/.f64 (+.f64 (pow.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64))) (fma.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) (-.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))) (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) (-.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64))) (+.f64 (pow.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))) (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (pow.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) (-.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64))) (+.f64 (pow.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 3 binary64))))))","(fma.f64 (*.f64 (sin.f64 x) (*.f64 #s(literal 1/6 binary64) eps)) eps (fma.f64 (sin.f64 x) #s(literal -1 binary64) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))))","(fma.f64 (*.f64 (sin.f64 x) (*.f64 eps eps)) #s(literal 1/6 binary64) (fma.f64 (sin.f64 x) #s(literal -1 binary64) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))))","(fma.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps) (fma.f64 (sin.f64 x) #s(literal -1 binary64) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))))","(fma.f64 (*.f64 (sin.f64 x) eps) (*.f64 #s(literal 1/6 binary64) eps) (fma.f64 (sin.f64 x) #s(literal -1 binary64) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))))","(fma.f64 (*.f64 #s(literal 1/6 binary64) eps) (*.f64 eps (sin.f64 x)) (fma.f64 (sin.f64 x) #s(literal -1 binary64) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))))","(fma.f64 (*.f64 (*.f64 eps eps) #s(literal 1/6 binary64)) (sin.f64 x) (fma.f64 (sin.f64 x) #s(literal -1 binary64) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))))","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)))","(fma.f64 (sin.f64 x) (*.f64 (*.f64 eps eps) #s(literal 1/6 binary64)) (fma.f64 (sin.f64 x) #s(literal -1 binary64) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))))","(fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)))","(fma.f64 (*.f64 eps eps) (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) (fma.f64 (sin.f64 x) #s(literal -1 binary64) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))))","(fma.f64 #s(literal 1/6 binary64) (*.f64 (*.f64 eps eps) (sin.f64 x)) (fma.f64 (sin.f64 x) #s(literal -1 binary64) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))))","(fma.f64 eps (*.f64 (*.f64 #s(literal 1/6 binary64) eps) (sin.f64 x)) (fma.f64 (sin.f64 x) #s(literal -1 binary64) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))))","(-.f64 (/.f64 (pow.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) #s(literal 2 binary64)) (-.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)))) (/.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (-.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)))) (/.f64 (pow.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)))))","(+.f64 (+.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps))) (neg.f64 (sin.f64 x)))","(+.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps)) (fma.f64 (sin.f64 x) #s(literal -1 binary64) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))))","(+.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)))","(+.f64 #s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x)))","(sin.f64 x)","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) #s(literal 2 binary64))) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) (-.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) (-.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 2 binary64))) (+.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) x) eps (neg.f64 eps)) #s(literal 3 binary64)) (*.f64 (pow.f64 eps #s(literal 9 binary64)) #s(literal 1/216 binary64))) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) x) eps (neg.f64 eps)) (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) x) eps (neg.f64 eps)) (-.f64 (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/36 binary64)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) x) eps (neg.f64 eps)) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64))))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 9 binary64)) #s(literal 1/216 binary64) (pow.f64 (fma.f64 #s(literal -1 binary64) eps (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)) #s(literal 3 binary64))) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/36 binary64) (-.f64 (*.f64 (fma.f64 #s(literal -1 binary64) eps (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)) (fma.f64 #s(literal -1 binary64) eps (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x))) (*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64)) (fma.f64 #s(literal -1 binary64) eps (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x))))))","(/.f64 (+.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)) #s(literal 3 binary64))) (fma.f64 eps eps (-.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)) #s(literal 2 binary64)) (*.f64 (neg.f64 eps) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)) #s(literal 2 binary64)) (*.f64 eps eps))) (neg.f64 (-.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)) (neg.f64 eps))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)) #s(literal 2 binary64)) (-.f64 (*.f64 eps eps) (*.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)) (neg.f64 eps))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) (-.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)))) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) (pow.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) #s(literal 2 binary64)))) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) (-.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 2 binary64)) (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/36 binary64))) (+.f64 #s(literal 0 binary64) eps) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64))) (-.f64 #s(literal 0 binary64) (*.f64 eps eps)))) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64))) (+.f64 #s(literal 0 binary64) eps)))","(/.f64 (fma.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 2 binary64)) (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/36 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64))) (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps)))))","(/.f64 (fma.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 3 binary64)) (*.f64 (pow.f64 eps #s(literal 9 binary64)) #s(literal 1/216 binary64))) (+.f64 #s(literal 0 binary64) eps) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/36 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64))))) (-.f64 #s(literal 0 binary64) (*.f64 eps eps)))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/36 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64))))) (+.f64 #s(literal 0 binary64) eps)))","(/.f64 (fma.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 3 binary64)) (*.f64 (pow.f64 eps #s(literal 9 binary64)) #s(literal 1/216 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/36 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64))))) (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 3 binary64))))) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/36 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64))))) (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps)))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (*.f64 eps eps)) (-.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) eps) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 2 binary64)) (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/36 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) eps) (-.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64)))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (*.f64 eps eps)) (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/36 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) eps) (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 3 binary64)) (*.f64 (pow.f64 eps #s(literal 9 binary64)) #s(literal 1/216 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) eps) (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/36 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64)))))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 3 binary64))) (-.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 2 binary64)) (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/36 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) (-.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64)))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/36 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 3 binary64)) (*.f64 (pow.f64 eps #s(literal 9 binary64)) #s(literal 1/216 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (fma.f64 eps eps (*.f64 #s(literal 0 binary64) eps))) (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/36 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64)))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)) (neg.f64 eps)))","(/.f64 (-.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 2 binary64))) (-.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)))","(/.f64 (+.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)) #s(literal 2 binary64)) (-.f64 (*.f64 eps eps) (*.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)) (neg.f64 eps)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) (-.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))))","(/.f64 (+.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))))))","(/.f64 (+.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 3 binary64))) (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) (-.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) (-.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 2 binary64))) (+.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) (-.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 2 binary64))) (+.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 3 binary64))))))","(fma.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 eps #s(literal 3/2 binary64))) (pow.f64 eps #s(literal 3/2 binary64)) (fma.f64 #s(literal -1 binary64) eps (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)))","(fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) x) eps (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)))","(fma.f64 (*.f64 #s(literal 1/6 binary64) eps) (*.f64 eps eps) (fma.f64 #s(literal -1 binary64) eps (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)))","(fma.f64 (pow.f64 eps #s(literal 3/2 binary64)) (*.f64 (pow.f64 eps #s(literal 3/2 binary64)) #s(literal 1/6 binary64)) (fma.f64 #s(literal -1 binary64) eps (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)))","(fma.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/36 binary64) (*.f64 eps (neg.f64 eps))) (pow.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (*.f64 #s(literal 1 binary64) eps)) #s(literal -1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x))","(fma.f64 (*.f64 eps x) (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)))","(fma.f64 (fma.f64 (pow.f64 eps #s(literal 9 binary64)) #s(literal 1/216 binary64) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/36 binary64) (*.f64 (neg.f64 eps) (-.f64 (neg.f64 eps) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64))))) #s(literal -1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x))","(fma.f64 (*.f64 (*.f64 eps eps) #s(literal 1/6 binary64)) eps (fma.f64 #s(literal -1 binary64) eps (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (fma.f64 #s(literal -1 binary64) eps (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)))","(fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)))","(fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) (*.f64 eps x) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)))","(fma.f64 #s(literal -1 binary64) eps (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)))","(fma.f64 (*.f64 eps eps) (*.f64 #s(literal 1/6 binary64) eps) (fma.f64 #s(literal -1 binary64) eps (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)))","(fma.f64 #s(literal 1/6 binary64) (pow.f64 eps #s(literal 3 binary64)) (fma.f64 #s(literal -1 binary64) eps (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)))","(fma.f64 eps (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) x) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)))","(fma.f64 eps (*.f64 (*.f64 eps eps) #s(literal 1/6 binary64)) (fma.f64 #s(literal -1 binary64) eps (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)))","(fma.f64 eps #s(literal -1 binary64) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)))","(fma.f64 x (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)) #s(literal 2 binary64)) (-.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)) (neg.f64 eps))) (/.f64 (*.f64 eps eps) (-.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)) (neg.f64 eps))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) #s(literal 2 binary64)) (-.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x))) (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 2 binary64)) (-.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x))))","(-.f64 (+.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)) #s(literal 0 binary64)) eps)","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)))) (/.f64 (pow.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)))))","(-.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)) eps)","(-.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64)) (-.f64 eps (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)))","(+.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) x) eps (neg.f64 eps)) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64)))","(+.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)) (neg.f64 eps))","(+.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)))","(+.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64)) (fma.f64 #s(literal -1 binary64) eps (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)))","(+.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x))","(+.f64 (neg.f64 eps) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x)))","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal 1/16 binary64) (*.f64 eps eps))) (pow.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 #s(literal -1/4 binary64) eps)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1/36 binary64) (*.f64 (*.f64 #s(literal 1/4 binary64) eps) (-.f64 (*.f64 #s(literal 1/4 binary64) eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64))))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 #s(literal -1/4 binary64) eps)) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal 1/16 binary64) (*.f64 eps eps)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1/36 binary64) (*.f64 (*.f64 #s(literal 1/4 binary64) eps) (-.f64 (*.f64 #s(literal 1/4 binary64) eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64))))) (fma.f64 #s(literal 1/64 binary64) (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 eps eps)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal 1/16 binary64) (*.f64 eps eps))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 #s(literal -1/4 binary64) eps)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1/36 binary64) (*.f64 (*.f64 #s(literal 1/4 binary64) eps) (-.f64 (*.f64 #s(literal 1/4 binary64) eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64))))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 #s(literal -1/6 binary64) x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 #s(literal -1/4 binary64) eps))) (*.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 #s(literal -1/4 binary64) eps)) (*.f64 #s(literal 1/16 binary64) (*.f64 eps eps)))) (*.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 #s(literal -1/4 binary64) eps)) (fma.f64 (*.f64 #s(literal -1/6 binary64) x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 #s(literal -1/4 binary64) eps))))","(/.f64 (-.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 eps eps)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) #s(literal 2 binary64))) (-.f64 (*.f64 #s(literal 1/4 binary64) eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal 1/16 binary64) (*.f64 eps eps)))) (neg.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 #s(literal -1/4 binary64) eps))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(literal 1/16 binary64) (*.f64 eps eps) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) #s(literal 1/4 binary64)) eps)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1/36 binary64) (*.f64 (*.f64 #s(literal 1/4 binary64) eps) (-.f64 (*.f64 #s(literal 1/4 binary64) eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal 1/16 binary64) (*.f64 eps eps))) (fma.f64 (*.f64 #s(literal -1/6 binary64) x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 #s(literal -1/4 binary64) eps)))","(/.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) #s(literal 3 binary64))) (fma.f64 #s(literal 1/16 binary64) (*.f64 eps eps) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) #s(literal 1/4 binary64)) eps))))","(/.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) #s(literal 3 binary64))) (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1/36 binary64) (*.f64 (*.f64 #s(literal 1/4 binary64) eps) (-.f64 (*.f64 #s(literal 1/4 binary64) eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 #s(literal -1/4 binary64) eps)) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal 1/16 binary64) (*.f64 eps eps)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1/36 binary64) (*.f64 (*.f64 #s(literal 1/4 binary64) eps) (-.f64 (*.f64 #s(literal 1/4 binary64) eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64))))) (fma.f64 #s(literal 1/64 binary64) (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 #s(literal -1/4 binary64) eps)) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal 1/16 binary64) (*.f64 eps eps))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1/36 binary64) (*.f64 (*.f64 #s(literal 1/4 binary64) eps) (-.f64 (*.f64 #s(literal 1/4 binary64) eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64))))) (fma.f64 #s(literal 1/64 binary64) (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) #s(literal 3 binary64))))))","(fma.f64 (*.f64 #s(literal -1/6 binary64) x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 #s(literal 1/4 binary64) eps))","(fma.f64 (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x (*.f64 #s(literal 1/4 binary64) eps))","(fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps))","(fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps))","(fma.f64 #s(literal 1/4 binary64) eps (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)))","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 x #s(literal -1/6 binary64)) (*.f64 #s(literal 1/4 binary64) eps))","(fma.f64 eps #s(literal 1/4 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)))","(fma.f64 x (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) (*.f64 #s(literal 1/4 binary64) eps))","(-.f64 (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 eps eps)) (-.f64 (*.f64 #s(literal 1/4 binary64) eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 #s(literal -1/6 binary64) x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 #s(literal -1/4 binary64) eps))) (/.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 eps eps)) (fma.f64 (*.f64 #s(literal -1/6 binary64) x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 #s(literal -1/4 binary64) eps))))","(+.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) (*.f64 #s(literal 1/4 binary64) eps))","(+.f64 (*.f64 #s(literal 1/4 binary64) eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x) #s(literal 2 binary64)) (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64))) (pow.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 #s(literal 1/2 binary64) (*.f64 eps eps))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) (-.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x)) (pow.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 #s(literal 1/2 binary64) (*.f64 eps eps))) (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x) #s(literal 2 binary64)) (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) (-.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x)) (pow.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x) #s(literal 2 binary64))) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x) #s(literal 2 binary64)) (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64))))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 #s(literal 1/2 binary64) (*.f64 eps eps))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) (-.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x)) (pow.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 #s(literal 1/2 binary64) (*.f64 eps eps)))) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 #s(literal 1/2 binary64) (*.f64 eps eps))) (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)))) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 #s(literal 1/2 binary64) (*.f64 eps eps))) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 #s(literal 1/2 binary64) (*.f64 eps eps)))))","(/.f64 (-.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x) #s(literal 2 binary64)) (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)))) (neg.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 #s(literal 1/2 binary64) (*.f64 eps eps)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x) #s(literal -1/2 binary64)) (*.f64 eps eps))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) (-.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x)) (pow.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x) #s(literal 2 binary64)) (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64))) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 #s(literal 1/2 binary64) (*.f64 eps eps))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x) #s(literal 3 binary64))) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x) #s(literal -1/2 binary64)) (*.f64 eps eps)))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) (-.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x)) (pow.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 #s(literal 1/2 binary64) (*.f64 eps eps))) (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x) #s(literal 2 binary64)) (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) (-.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x)) (pow.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x) #s(literal 2 binary64))) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x) #s(literal 3 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 #s(literal 1/2 binary64) (*.f64 eps eps))) (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x) #s(literal 2 binary64)) (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) (-.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x)) (pow.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x) #s(literal 2 binary64))) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x) #s(literal 3 binary64))))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x))","(fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))","(fma.f64 (*.f64 eps eps) #s(literal -1/2 binary64) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x))","(fma.f64 #s(literal -1/2 binary64) (*.f64 eps eps) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x))","(fma.f64 eps (*.f64 #s(literal -1/2 binary64) eps) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x))","(fma.f64 x (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))","(-.f64 (/.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (-.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 #s(literal 1/2 binary64) (*.f64 eps eps)))) (/.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 #s(literal 1/2 binary64) (*.f64 eps eps)))))","(+.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))","(+.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))","(*.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))","(/.f64 (fma.f64 (pow.f64 (sin.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64) (*.f64 (pow.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)))) (fma.f64 (sin.f64 x) (sin.f64 x) (-.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps)) #s(literal 2 binary64)) (*.f64 (neg.f64 (sin.f64 x)) (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/36 binary64) #s(literal -1 binary64)) (sin.f64 x))) (neg.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/216 binary64) #s(literal -1 binary64)) (sin.f64 x))) (neg.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64))))))","(/.f64 (neg.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/36 binary64) #s(literal -1 binary64)))) (neg.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/216 binary64) #s(literal -1 binary64)))) (neg.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps)) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps)) (neg.f64 (sin.f64 x)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps)) (neg.f64 (sin.f64 x)))))))","(/.f64 (*.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/36 binary64) #s(literal -1 binary64)) (sin.f64 x)) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal 1 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/216 binary64) #s(literal -1 binary64)) (sin.f64 x)) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)))))","(/.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/36 binary64) #s(literal -1 binary64))) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal 1 binary64)))","(/.f64 (*.f64 (sin.f64 x) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/216 binary64) #s(literal -1 binary64))) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps)) #s(literal 2 binary64)) (pow.f64 (sin.f64 x) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps)) (neg.f64 (sin.f64 x))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (neg.f64 (sin.f64 x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps)) #s(literal 2 binary64)) (-.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps)) (neg.f64 (sin.f64 x))))))","(fma.f64 (*.f64 (sin.f64 x) (*.f64 #s(literal 1/6 binary64) eps)) eps (neg.f64 (sin.f64 x)))","(fma.f64 (*.f64 (sin.f64 x) (*.f64 eps eps)) #s(literal 1/6 binary64) (neg.f64 (sin.f64 x)))","(fma.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps) (neg.f64 (sin.f64 x)))","(fma.f64 (*.f64 (sin.f64 x) eps) (*.f64 #s(literal 1/6 binary64) eps) (neg.f64 (sin.f64 x)))","(fma.f64 (*.f64 #s(literal 1/6 binary64) eps) (*.f64 eps (sin.f64 x)) (neg.f64 (sin.f64 x)))","(fma.f64 (*.f64 (*.f64 eps eps) #s(literal 1/6 binary64)) (sin.f64 x) (neg.f64 (sin.f64 x)))","(fma.f64 (sin.f64 x) (*.f64 (*.f64 eps eps) #s(literal 1/6 binary64)) (neg.f64 (sin.f64 x)))","(fma.f64 (sin.f64 x) #s(literal -1 binary64) (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps)))","(fma.f64 #s(literal -1 binary64) (sin.f64 x) (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps)))","(fma.f64 (*.f64 eps eps) (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) (neg.f64 (sin.f64 x)))","(fma.f64 #s(literal 1/6 binary64) (*.f64 (*.f64 eps eps) (sin.f64 x)) (neg.f64 (sin.f64 x)))","(fma.f64 eps (*.f64 (*.f64 #s(literal 1/6 binary64) eps) (sin.f64 x)) (neg.f64 (sin.f64 x)))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps)) (neg.f64 (sin.f64 x)))) (/.f64 (pow.f64 (sin.f64 x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps)) (neg.f64 (sin.f64 x)))))","(-.f64 (fma.f64 (*.f64 (*.f64 eps eps) #s(literal 1/6 binary64)) (sin.f64 x) #s(literal 0 binary64)) (sin.f64 x))","(-.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps)) (sin.f64 x))","(+.f64 (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps)) (neg.f64 (sin.f64 x)))","(+.f64 (neg.f64 (sin.f64 x)) (*.f64 (*.f64 (sin.f64 x) #s(literal 1/6 binary64)) (*.f64 eps eps)))","(*.f64 (fma.f64 #s(literal 1/14400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/36 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal -1/6 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -1/1728000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/216 binary64)) (pow.f64 (fma.f64 #s(literal 1/14400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/36 binary64) (*.f64 (*.f64 x x) #s(literal -1/720 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal -1/6 binary64)) (fma.f64 #s(literal 1/14400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/36 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/14400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/36 binary64) (*.f64 (*.f64 x x) #s(literal -1/720 binary64)))) (fma.f64 #s(literal -1/1728000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/216 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 1/36 binary64) (*.f64 #s(literal 1/14400 binary64) (pow.f64 x #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal 1/6 binary64) (*.f64 (*.f64 x x) #s(literal -1/120 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/14400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/36 binary64)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal -1/6 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -1/1728000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/216 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/14400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/36 binary64) (*.f64 (*.f64 x x) #s(literal -1/720 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/14400 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal -1/6 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal -1/6 binary64)) #s(literal 1/36 binary64))) (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal -1/6 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal -1/6 binary64))))","(/.f64 (-.f64 #s(literal 1/36 binary64) (*.f64 #s(literal 1/14400 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 #s(literal 1/6 binary64) (*.f64 (*.f64 x x) #s(literal -1/120 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/14400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/36 binary64))) (neg.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal -1/6 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/1728000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/216 binary64))) (neg.f64 (+.f64 #s(literal 1/36 binary64) (-.f64 (*.f64 #s(literal 1/14400 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal -1/720 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/1728000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/216 binary64))) (neg.f64 (fma.f64 #s(literal 1/14400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/36 binary64) (*.f64 (*.f64 x x) #s(literal -1/720 binary64))))))","(/.f64 (fma.f64 #s(literal 1/14400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/36 binary64)) (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal -1/6 binary64)))","(/.f64 (fma.f64 #s(literal -1/1728000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/216 binary64)) (+.f64 #s(literal 1/36 binary64) (-.f64 (*.f64 #s(literal 1/14400 binary64) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 x x) #s(literal -1/720 binary64)))))","(/.f64 (fma.f64 #s(literal -1/1728000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/216 binary64)) (fma.f64 #s(literal 1/14400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/36 binary64) (*.f64 (*.f64 x x) #s(literal -1/720 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal -1/6 binary64)) (fma.f64 #s(literal 1/14400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/36 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/14400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/36 binary64) (*.f64 (*.f64 x x) #s(literal -1/720 binary64)))) (fma.f64 #s(literal -1/1728000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/216 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal -1/6 binary64)) (fma.f64 #s(literal 1/14400 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/36 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/14400 binary64) (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/36 binary64) (*.f64 (*.f64 x x) #s(literal -1/720 binary64)))) (fma.f64 #s(literal -1/1728000 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/216 binary64)))))","(fma.f64 (*.f64 #s(literal -1/120 binary64) x) x #s(literal 1/6 binary64))","(fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal 1/6 binary64))","(fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64))","(fma.f64 x (*.f64 #s(literal -1/120 binary64) x) #s(literal 1/6 binary64))","(-.f64 (/.f64 #s(literal 1/36 binary64) (-.f64 #s(literal 1/6 binary64) (*.f64 (*.f64 x x) #s(literal -1/120 binary64)))) (/.f64 (*.f64 #s(literal 1/14400 binary64) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal 1/6 binary64) (*.f64 (*.f64 x x) #s(literal -1/120 binary64)))))","(-.f64 (/.f64 (*.f64 #s(literal 1/14400 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 (*.f64 x x) #s(literal -1/120 binary64) #s(literal -1/6 binary64))))","(+.f64 (*.f64 (*.f64 x x) #s(literal -1/120 binary64)) #s(literal 1/6 binary64))","(+.f64 #s(literal 1/6 binary64) (*.f64 (*.f64 x x) #s(literal -1/120 binary64)))","#s(approx (* (* (cos x) -1/2) eps) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64)) eps))","#s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))))","(*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)) eps)","(*.f64 eps (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64) (*.f64 #s(literal 1/4 binary64) eps)))","(/.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) eps) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) eps) eps) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) eps) eps) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) eps)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal 1/16 binary64) (*.f64 eps eps))) eps)) (neg.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 #s(literal -1/4 binary64) eps))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) #s(literal 3 binary64))) eps)) (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1/36 binary64) (*.f64 (*.f64 #s(literal 1/4 binary64) eps) (-.f64 (*.f64 #s(literal 1/4 binary64) eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)))))))","(/.f64 (neg.f64 (*.f64 eps (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal 1/16 binary64) (*.f64 eps eps))))) (neg.f64 (fma.f64 (*.f64 #s(literal -1/6 binary64) x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 #s(literal -1/4 binary64) eps))))","(/.f64 (neg.f64 (*.f64 eps (fma.f64 #s(literal 1/64 binary64) (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1/36 binary64) (*.f64 (*.f64 #s(literal 1/4 binary64) eps) (-.f64 (*.f64 #s(literal 1/4 binary64) eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) eps) eps) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) eps) (*.f64 (*.f64 #s(literal 1/4 binary64) eps) eps))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) #s(literal 3 binary64)) #s(literal -1/216 binary64) (*.f64 #s(literal 1/64 binary64) (pow.f64 eps #s(literal 6 binary64))))) (neg.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) eps) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) eps) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) eps) (*.f64 (*.f64 #s(literal 1/4 binary64) eps) eps))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal 1/16 binary64) (*.f64 eps eps))) eps) (fma.f64 (*.f64 #s(literal -1/6 binary64) x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 #s(literal -1/4 binary64) eps)))","(/.f64 (*.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) #s(literal 3 binary64))) eps) (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1/36 binary64) (*.f64 (*.f64 #s(literal 1/4 binary64) eps) (-.f64 (*.f64 #s(literal 1/4 binary64) eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64))))))","(/.f64 (*.f64 eps (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal 1/16 binary64) (*.f64 eps eps)))) (fma.f64 (*.f64 #s(literal -1/6 binary64) x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 #s(literal -1/4 binary64) eps)))","(/.f64 (*.f64 eps (fma.f64 #s(literal 1/64 binary64) (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) #s(literal 3 binary64)))) (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal 2 binary64)) #s(literal 1/36 binary64) (*.f64 (*.f64 #s(literal 1/4 binary64) eps) (-.f64 (*.f64 #s(literal 1/4 binary64) eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) eps) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) eps) eps) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) eps) (*.f64 (*.f64 #s(literal 1/4 binary64) eps) eps)))","(/.f64 (fma.f64 (pow.f64 (*.f64 eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) #s(literal 3 binary64)) #s(literal -1/216 binary64) (*.f64 #s(literal 1/64 binary64) (pow.f64 eps #s(literal 6 binary64)))) (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) eps) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) eps) eps) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) eps) (*.f64 (*.f64 #s(literal 1/4 binary64) eps) eps)))))","(fma.f64 (*.f64 eps (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) x (*.f64 (*.f64 #s(literal 1/4 binary64) eps) eps))","(fma.f64 (*.f64 eps (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) #s(literal -1/6 binary64) (*.f64 (*.f64 #s(literal 1/4 binary64) eps) eps))","(fma.f64 (*.f64 eps #s(literal -1/6 binary64)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 (*.f64 #s(literal 1/4 binary64) eps) eps))","(fma.f64 (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) (*.f64 eps x) (*.f64 (*.f64 #s(literal 1/4 binary64) eps) eps))","(fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) eps (*.f64 (*.f64 #s(literal 1/4 binary64) eps) eps))","(fma.f64 (*.f64 #s(literal 1/4 binary64) eps) eps (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) eps))","(fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal -1/6 binary64) eps) (*.f64 (*.f64 #s(literal 1/4 binary64) eps) eps))","(fma.f64 #s(literal -1/6 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) eps) (*.f64 (*.f64 #s(literal 1/4 binary64) eps) eps))","(fma.f64 #s(literal 1/4 binary64) (*.f64 eps eps) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) eps))","(fma.f64 (*.f64 eps eps) #s(literal 1/4 binary64) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) eps))","(fma.f64 eps (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) (*.f64 (*.f64 #s(literal 1/4 binary64) eps) eps))","(fma.f64 eps (*.f64 #s(literal 1/4 binary64) eps) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) eps))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) eps) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) eps) (*.f64 (*.f64 #s(literal 1/4 binary64) eps) eps))) (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) eps) eps) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) eps) (*.f64 (*.f64 #s(literal 1/4 binary64) eps) eps))))","(+.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) eps) eps) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) eps))","(+.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) #s(literal -1/6 binary64)) eps) (*.f64 (*.f64 #s(literal 1/4 binary64) eps) eps))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":369.378173828125,"type":"rewrite"},{"compiler":[[33099,2910]],"memory":[[8470368,55035008]],"time":89.02392578125,"type":"eval"},{"alts":[["(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))) #s(literal -2 binary64))","next",0.11328125,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))) eps))","done",0.1015625,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))) eps))","next",0.22051327194304,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps (neg.f64 (sin.f64 x))) eps))","fresh",0.1709950106471134,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) #s(approx (* (* (cos x) -1/2) eps) (fma.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal -1/48 binary64) #s(literal 1/4 binary64))) (*.f64 x x) (*.f64 #s(literal -1/2 binary64) eps)))) eps))","fresh",0.17746595855159467,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 eps (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64))))) eps))","done",0.25259259945407553,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","done",12.347635529453676,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (* eps (cos x)) -1/2) (* (+ (* 1/6 (* eps eps)) -1) (sin x))) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","fresh",0.7173887707296801,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","next",12.35166589929007,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","done",12.363138070512848,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","next",12.403022376800878,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","done",12.628445556850021,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","next",0.34418076291443955,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 x (fma.f64 #s(literal 1/4 binary64) eps (*.f64 #s(literal 1/6 binary64) x)) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","fresh",0.34343145315796847,"binary64"]],"compiler":[[16,14],[25,18],[64,34],[19,14],[41,26],[34,23],[13,10],[39,27],[32,20],[27,18],[22,16],[16,12],[72,44],[75,46],[16,14],[64,34],[19,14],[41,26],[39,27],[32,20],[22,16],[72,44],[75,46]],"count":[[551,14]],"kept":[{"done":[1,1],"fresh":[8,5],"new":[537,4],"picked":[5,4]}],"memory":[[-11558496,26512640]],"min-error":[[0.0,"binary64"]],"time":85.50390625,"type":"prune"},{"egraph":[[0,8245,746,0.082525064],[6,7254,774,0.023878879],[5,4745,774,0.036727985],[4,3129,774,0.017001792],[3,2260,806,0.013537886],[2,717,818,0.010348953],[1,266,822,0.003530756],[0,131,869,0.001816544],[0,85,887,0.000714516]],"inputs":[["(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))) #s(literal -2 binary64))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))))","(sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps)))","(*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))","#s(literal 1/2 binary64)","(fma.f64 #s(literal 2 binary64) x eps)","#s(literal 2 binary64)","x","eps","(sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))","(*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))","(+.f64 #s(literal 0 binary64) eps)","#s(literal 0 binary64)","#s(literal -2 binary64)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","(*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps)","#s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)","(fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64))","(*.f64 x x)","x","#s(literal 1/6 binary64)","#s(literal -1 binary64)","eps","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))))","(fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))","#s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)","(fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64))","(*.f64 x x)","x","#s(literal 1/6 binary64)","#s(literal -1 binary64)","eps","(*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))","(*.f64 eps eps)","#s(literal -1/2 binary64)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","(*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps)","#s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64))","(fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64))","#s(literal 1/5040 binary64)","(*.f64 x x)","x","#s(literal -1/120 binary64)","#s(literal 1/6 binary64)","#s(literal -1 binary64)","eps","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))) eps))","(*.f64 (fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))) eps)","(fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x)))","(*.f64 eps (cos.f64 x))","eps","(cos.f64 x)","x","#s(literal -1/2 binary64)","#s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))","(*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x)","(fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))","(fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)))","(fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))","(*.f64 eps eps)","#s(literal 1/6 binary64)","#s(literal -1 binary64)","(fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))","#s(literal -1/5040 binary64)","(*.f64 x x)","#s(literal 1/120 binary64)","(*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))","#s(literal -1/6 binary64)"]],"locations":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))) eps))","cost-diff",0],["(*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))","cost-diff",2],["(fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))))","cost-diff",5],["(fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))","cost-diff",5],["#s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))","cost-diff",0],["(*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps)","cost-diff",0],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","cost-diff",0],["(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)","cost-diff",1],["#s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps))","cost-diff",0],["(fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))","cost-diff",0],["#s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))))","cost-diff",0],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","cost-diff",0],["#s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x))","cost-diff",0],["(*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps)","cost-diff",0],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","cost-diff",0],["(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)","cost-diff",1],["(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))))","cost-diff",0],["(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))) #s(literal -2 binary64))","cost-diff",0],["(+.f64 #s(literal 0 binary64) eps)","cost-diff",2],["(*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))","cost-diff",2]],"memory":[[-3033072,37471552]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))) #s(literal -2 binary64))","(*.f64 (*.f64 #s(literal -2 binary64) (sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x))) (sin.f64 (*.f64 eps #s(literal 1/2 binary64))))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))))","(*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x)))","(sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps)))","(sin.f64 (fma.f64 eps #s(literal 1/2 binary64) x))","(*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))","(fma.f64 eps #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","(fma.f64 #s(literal 2 binary64) x eps)","(fma.f64 x #s(literal 2 binary64) eps)","#s(literal 2 binary64)","x","eps","(sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))","(sin.f64 (*.f64 eps #s(literal 1/2 binary64)))","(*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))","(*.f64 eps #s(literal 1/2 binary64))","(+.f64 #s(literal 0 binary64) eps)","eps","#s(literal 0 binary64)","#s(literal -2 binary64)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 x))) eps))","(*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps)","(*.f64 #s(approx (neg (sin x)) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 x))) eps)","#s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x))","#s(approx (neg (sin x)) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 x)))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 x))","(fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64))","(*.f64 x x)","x","#s(literal 1/6 binary64)","#s(literal -1 binary64)","eps","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))))","#s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))))","(fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))","(fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))","#s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps))","#s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)","(*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)","(fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64))","(*.f64 x x)","x","#s(literal 1/6 binary64)","#s(literal -1 binary64)","eps","(*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))","(*.f64 eps eps)","#s(literal -1/2 binary64)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/5040 binary64) x) x #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (neg.f64 x))) eps))","(*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps)","(*.f64 #s(approx (neg (sin x)) (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/5040 binary64) x) x #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (neg.f64 x))) eps)","#s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))","#s(approx (neg (sin x)) (fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/5040 binary64) x) x #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (neg.f64 x)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 (*.f64 #s(literal 1/5040 binary64) x) x #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (neg.f64 x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/5040 binary64) x) x #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64))","(fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/5040 binary64) x) x #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64))","(fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64))","(fma.f64 (*.f64 #s(literal 1/5040 binary64) x) x #s(literal -1/120 binary64))","#s(literal 1/5040 binary64)","(*.f64 x x)","x","#s(literal -1/120 binary64)","#s(literal 1/6 binary64)","#s(literal -1 binary64)","eps","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) (*.f64 x x) #s(literal 1 binary64)) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))) eps))","(*.f64 (fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))) eps)","(*.f64 (fma.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) (*.f64 x x) #s(literal 1 binary64)) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))) eps)","(fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x)))","(fma.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) (*.f64 x x) #s(literal 1 binary64)) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x)))","(*.f64 eps (cos.f64 x))","(*.f64 (cos.f64 x) eps)","eps","(cos.f64 x)","x","#s(literal -1/2 binary64)","#s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))","#s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) (*.f64 x x) #s(literal 1 binary64)) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))","(*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x)","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) (*.f64 x x) #s(literal 1 binary64)) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x)","(fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) (*.f64 x x) #s(literal 1 binary64)) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))","(fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)))","(*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))","(fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))","(*.f64 eps eps)","#s(literal 1/6 binary64)","#s(literal -1 binary64)","(fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))","#s(literal -1/5040 binary64)","(*.f64 x x)","#s(literal 1/120 binary64)","(*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))","(fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64))","#s(literal -1/6 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":313.9541015625,"type":"simplify"},{"compiler":[[542,84]],"locations":[["(fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))))","accuracy",0.01171875],["(*.f64 eps (cos.f64 x))","accuracy",0.01171875],["(*.f64 (fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))) eps)","accuracy",0.109375],["#s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))","accuracy",0.1193629307033233],["(*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps)","accuracy",0.0078125],["(fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64))","accuracy",0.01171875],["#s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))","accuracy",0.11936293045715217],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","accuracy",12.35154177945362],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","accuracy",0.00390625],["(fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))","accuracy",0.0078125],["#s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps))","accuracy",0.21490959670199256],["#s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))))","accuracy",0.3395252231019761],["(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)","accuracy",0.00390625],["(*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps)","accuracy",0.0078125],["#s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x))","accuracy",0.33687881975491735],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","accuracy",12.35154177945362],["(sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))","accuracy",0.0],["(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))) #s(literal -2 binary64))","accuracy",0.00390625],["(sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps)))","accuracy",0.01171875],["(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))))","accuracy",0.109375]],"memory":[[4194480,133041200]],"mixsample":[[44.04296875,"adjust",800],[52.09521484375,"ival-cos",1600],[0.036865234375,"ival-mult",2000],[0.05810546875,"const",400],[0.187255859375,"ival-assert",0],[4.4912109375,"ival-sub",0],[3.587646484375,"ival-cos",0],[34.640380859375,"const",0],[9.1142578125,"ival-cos",400],[28.72314453125,"adjust",2000],[4.946533203125,"ival-pow",0],[46.735595703125,"ival-add",0],[0.09326171875,"ival-mult",800],[0.037841796875,"ival-cos",800],[0.109130859375,"ival-sin",400],[0.091064453125,"ival-mult",400],[118.30029296875,"ival-mult",0],[7.971923828125,"ival-sin",0],[0.572021484375,"ival-cos",2000],[0.019287109375,"ival-add",2000],[0.18505859375,"ival-add",400],[0.31005859375,"adjust",2800],[2.73291015625,"ival-sin",2000],[0.361328125,"ival-true",0],[0.178955078125,"ival-sin",800],[1.103271484375,"exact",0],[0.144775390625,"ival-add",800],[3.737060546875,"ival-neg",0]],"outcomes":[[104.6591796875,1,"valid",79],[336.66259765625,2,"valid",173],[10.14697265625,3,"valid",2],[1.1298828125,0,"valid",2]],"time":552.923095703125,"type":"localize"},{"count":[[26,162]],"inputs":[["(*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))","(+.f64 #s(literal 0 binary64) eps)","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))) #s(literal -2 binary64))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","(*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps)","#s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))))","(fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))","#s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","(*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps)","#s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))","(fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))","(fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))))","(*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))) eps))","(sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps)))","(sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))","(fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64))","#s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))","(*.f64 (fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))) eps)","(*.f64 eps (cos.f64 x))"]],"memory":[[1152672,16936304]],"outputs":[["(* 1/2 eps)","(+ x (* 1/2 eps))","(* -2 (pow (sin (* 1/2 eps)) 2))","(+ (* -2 (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (* -2 (pow (sin (* 1/2 eps)) 2)))","(+ (* -2 (pow (sin (* 1/2 eps)) 2)) (* x (+ (* -2 (* (cos (* 1/2 eps)) (sin (* 1/2 eps)))) (* x (pow (sin (* 1/2 eps)) 2)))))","(+ (* -2 (pow (sin (* 1/2 eps)) 2)) (* x (+ (* -2 (* (cos (* 1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* 1/3 (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (pow (sin (* 1/2 eps)) 2))))))","(pow (sin (* 1/2 eps)) 2)","(+ (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps)))) (pow (sin (* 1/2 eps)) 2))","(+ (* x (+ (* -1/2 (* x (pow (sin (* 1/2 eps)) 2))) (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (pow (sin (* 1/2 eps)) 2))","(+ (* x (+ (* x (+ (* -1/2 (pow (sin (* 1/2 eps)) 2)) (* -1/6 (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))))) (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (pow (sin (* 1/2 eps)) 2))","(* -1 x)","(* x (- (* 1/6 (pow x 2)) 1))","(- (cos eps) 1)","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(* -1 (* eps x))","(* x (+ (* -1 eps) (* 1/6 (* eps (pow x 2)))))","(* x (+ (* -1 eps) (* (pow x 2) (+ (* -1/120 (* eps (pow x 2))) (* 1/6 eps)))))","(* x (+ (* -1 eps) (* (pow x 2) (+ (* 1/6 eps) (* (pow x 2) (+ (* -1/120 eps) (* 1/5040 (* eps (pow x 2)))))))))","(* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1))","(* x (- (* (pow x 2) (+ 1/6 (* (pow x 2) (- (* 1/5040 (pow x 2)) 1/120)))) 1))","(* -1/2 (pow eps 2))","(+ (* -1/2 (pow eps 2)) (* eps (* x (- (* 1/6 (pow eps 2)) 1))))","(+ (* -1/2 (pow eps 2)) (* x (+ (* 1/4 (* (pow eps 2) x)) (* eps (- (* 1/6 (pow eps 2)) 1)))))","(+ (* -1/2 (pow eps 2)) (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* x (+ (* -1/6 (* eps (* x (- (* 1/6 (pow eps 2)) 1)))) (* 1/4 (pow eps 2)))))))","(+ (* -1/2 (pow eps 2)) (* x (- (* 1/6 (pow eps 3)) eps)))","(+ (* -1/2 (pow eps 2)) (* x (- (+ (* 1/6 (pow eps 3)) (* 1/4 (* (pow eps 2) x))) eps)))","(+ (* -1/2 (pow eps 2)) (* x (- (+ (* 1/6 (pow eps 3)) (* x (+ (* -1/6 (* eps (* x (- (* 1/6 (pow eps 2)) 1)))) (* 1/4 (pow eps 2))))) eps)))","(- (* 1/6 (pow eps 3)) eps)","(- (+ (* 1/6 (pow eps 3)) (* 1/4 (* (pow eps 2) x))) eps)","(- (+ (* 1/6 (pow eps 3)) (* x (+ (* -1/6 (* eps (* x (- (* 1/6 (pow eps 2)) 1)))) (* 1/4 (pow eps 2))))) eps)","(- (* 1/6 (pow eps 2)) 1)","(- (+ (* -1/6 (* (pow x 2) (- (* 1/6 (pow eps 2)) 1))) (* 1/6 (pow eps 2))) 1)","(- (+ (* 1/6 (pow eps 2)) (* (pow x 2) (+ (* -1/6 (- (* 1/6 (pow eps 2)) 1)) (* 1/120 (* (pow x 2) (- (* 1/6 (pow eps 2)) 1)))))) 1)","(- (+ (* 1/6 (pow eps 2)) (* (pow x 2) (+ (* -1/6 (- (* 1/6 (pow eps 2)) 1)) (* (pow x 2) (+ (* -1/5040 (* (pow x 2) (- (* 1/6 (pow eps 2)) 1))) (* 1/120 (- (* 1/6 (pow eps 2)) 1))))))) 1)","(* -1/6 (- (* 1/6 (pow eps 2)) 1))","(+ (* -1/6 (- (* 1/6 (pow eps 2)) 1)) (* 1/120 (* (pow x 2) (- (* 1/6 (pow eps 2)) 1))))","(+ (* -1/6 (- (* 1/6 (pow eps 2)) 1)) (* (pow x 2) (+ (* -1/5040 (* (pow x 2) (- (* 1/6 (pow eps 2)) 1))) (* 1/120 (- (* 1/6 (pow eps 2)) 1)))))","(sin (* 1/2 eps))","(+ (sin (* 1/2 eps)) (* x (cos (* 1/2 eps))))","(+ (sin (* 1/2 eps)) (* x (+ (cos (* 1/2 eps)) (* -1/2 (* x (sin (* 1/2 eps)))))))","(+ (sin (* 1/2 eps)) (* x (+ (cos (* 1/2 eps)) (* x (+ (* -1/2 (sin (* 1/2 eps))) (* -1/6 (* x (cos (* 1/2 eps)))))))))","1/6","(+ 1/6 (* -1/120 (pow x 2)))","(+ 1/6 (* (pow x 2) (- (* 1/5040 (pow x 2)) 1/120)))","(* x (- (* 1/6 (pow eps 2)) 1))","(* x (- (+ (* -1/6 (* (pow x 2) (- (* 1/6 (pow eps 2)) 1))) (* 1/6 (pow eps 2))) 1))","(* x (- (+ (* 1/6 (pow eps 2)) (* (pow x 2) (+ (* -1/6 (- (* 1/6 (pow eps 2)) 1)) (* 1/120 (* (pow x 2) (- (* 1/6 (pow eps 2)) 1)))))) 1))","(* x (- (+ (* 1/6 (pow eps 2)) (* (pow x 2) (+ (* -1/6 (- (* 1/6 (pow eps 2)) 1)) (* (pow x 2) (+ (* -1/5040 (* (pow x 2) (- (* 1/6 (pow eps 2)) 1))) (* 1/120 (- (* 1/6 (pow eps 2)) 1))))))) 1))","eps","(+ eps (* -1/2 (* eps (pow x 2))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* 1/24 (* eps (pow x 2))))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* (pow x 2) (+ (* -1/720 (* eps (pow x 2))) (* 1/24 eps))))))","x","(* x (+ 1 (* 1/2 (/ eps x))))","(* -2 (* (sin (* 1/2 eps)) (sin (* 1/2 (+ eps (* 2 x))))))","(* (sin (* 1/2 eps)) (sin (* 1/2 (+ eps (* 2 x)))))","(* 1/6 (pow x 3))","(* (pow x 3) (- 1/6 (/ 1 (pow x 2))))","(- (cos (+ eps x)) (cos x))","(* -1 (* eps (sin x)))","(* -1 (sin x))","(* eps (+ (* -1/2 (* eps (cos x))) (* (sin x) (- (* 1/6 (pow eps 2)) 1))))","(* -1/6 (* eps (* (pow x 3) (- (* 1/6 (pow eps 2)) 1))))","(* (pow x 3) (+ (* -1/6 (* eps (- (* 1/6 (pow eps 2)) 1))) (* 1/4 (/ (pow eps 2) x))))","(* (pow x 3) (- (+ (* -1/6 (* eps (- (* 1/6 (pow eps 2)) 1))) (+ (* 1/6 (/ (pow eps 3) (pow x 2))) (* 1/4 (/ (pow eps 2) x)))) (/ eps (pow x 2))))","(* (pow x 3) (- (+ (* -1/2 (/ (pow eps 2) (pow x 3))) (+ (* -1/6 (* eps (- (* 1/6 (pow eps 2)) 1))) (+ (* 1/6 (/ (pow eps 3) (pow x 2))) (* 1/4 (/ (pow eps 2) x))))) (/ eps (pow x 2))))","(* -1/6 (* eps (* (pow x 2) (- (* 1/6 (pow eps 2)) 1))))","(* (pow x 2) (+ (* -1/6 (* eps (- (* 1/6 (pow eps 2)) 1))) (* 1/4 (/ (pow eps 2) x))))","(* (pow x 2) (- (+ (* -1/6 (* eps (- (* 1/6 (pow eps 2)) 1))) (+ (* 1/6 (/ (pow eps 3) (pow x 2))) (* 1/4 (/ (pow eps 2) x)))) (/ eps (pow x 2))))","(* 1/5040 (pow x 7))","(* (pow x 7) (- 1/5040 (* 1/120 (/ 1 (pow x 2)))))","(* (pow x 7) (- (+ 1/5040 (/ 1/6 (pow x 4))) (* 1/120 (/ 1 (pow x 2)))))","(* (pow x 7) (- (+ 1/5040 (/ 1/6 (pow x 4))) (+ (* 1/120 (/ 1 (pow x 2))) (/ 1 (pow x 6)))))","(* -1/5040 (* (pow x 6) (- (* 1/6 (pow eps 2)) 1)))","(* (pow x 6) (+ (* -1/5040 (- (* 1/6 (pow eps 2)) 1)) (* 1/120 (/ (- (* 1/6 (pow eps 2)) 1) (pow x 2)))))","(* (pow x 6) (+ (* -1/6 (/ (- (* 1/6 (pow eps 2)) 1) (pow x 4))) (+ (* -1/5040 (- (* 1/6 (pow eps 2)) 1)) (* 1/120 (/ (- (* 1/6 (pow eps 2)) 1) (pow x 2))))))","(* (pow x 6) (- (+ (* -1/6 (/ (- (* 1/6 (pow eps 2)) 1) (pow x 4))) (+ (* -1/5040 (- (* 1/6 (pow eps 2)) 1)) (+ (* 1/120 (/ (- (* 1/6 (pow eps 2)) 1) (pow x 2))) (* 1/6 (/ (pow eps 2) (pow x 6)))))) (/ 1 (pow x 6))))","(* -1/5040 (* (pow x 4) (- (* 1/6 (pow eps 2)) 1)))","(* (pow x 4) (+ (* -1/5040 (- (* 1/6 (pow eps 2)) 1)) (* 1/120 (/ (- (* 1/6 (pow eps 2)) 1) (pow x 2)))))","(* (pow x 4) (+ (* -1/6 (/ (- (* 1/6 (pow eps 2)) 1) (pow x 4))) (+ (* -1/5040 (- (* 1/6 (pow eps 2)) 1)) (* 1/120 (/ (- (* 1/6 (pow eps 2)) 1) (pow x 2))))))","(sin (* 1/2 (+ eps (* 2 x))))","(* 1/5040 (pow x 4))","(* (pow x 4) (- 1/5040 (* 1/120 (/ 1 (pow x 2)))))","(* (pow x 4) (- (+ 1/5040 (/ 1/6 (pow x 4))) (* 1/120 (/ 1 (pow x 2)))))","(* (sin x) (- (* 1/6 (pow eps 2)) 1))","(* eps (cos x))","(* -1 (* x (- (* -1/2 (/ eps x)) 1)))","(* -2 (* (sin (* 1/2 eps)) (sin (* 1/2 (- eps (* -2 x))))))","(* (sin (* 1/2 eps)) (sin (* 1/2 (- eps (* -2 x)))))","(* -1 (* (pow x 3) (- (/ 1 (pow x 2)) 1/6)))","(- (cos (- eps (* -1 x))) (cos x))","(* -1 (* (pow x 3) (+ (* -1/4 (/ (pow eps 2) x)) (* 1/6 (* eps (- (* 1/6 (pow eps 2)) 1))))))","(* -1 (* (pow x 3) (+ (* -1 (/ (- (+ (* 1/6 (/ (pow eps 3) x)) (* 1/4 (pow eps 2))) (/ eps x)) x)) (* 1/6 (* eps (- (* 1/6 (pow eps 2)) 1))))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (- (* 1/6 (pow eps 3)) eps)) (* 1/2 (/ (pow eps 2) x))) x)) (* 1/4 (pow eps 2))) x)) (* 1/6 (* eps (- (* 1/6 (pow eps 2)) 1))))))","(* (pow x 2) (+ (* -1 (/ (+ (* -1 (/ (- (* 1/6 (pow eps 3)) eps) x)) (* -1/4 (pow eps 2))) x)) (* -1/6 (* eps (- (* 1/6 (pow eps 2)) 1)))))","(* -1 (* (pow x 7) (- (* 1/120 (/ 1 (pow x 2))) 1/5040)))","(* -1 (* (pow x 7) (- (* 1/120 (/ 1 (pow x 2))) (+ 1/5040 (/ 1/6 (pow x 4))))))","(* -1 (* (pow x 7) (- (+ (* 1/120 (/ 1 (pow x 2))) (/ 1 (pow x 6))) (+ 1/5040 (/ 1/6 (pow x 4))))))","(sin (* 1/2 (- eps (* -2 x))))","(* eps (+ (* -1 (sin x)) (* -1/2 (* eps (cos x)))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -2 (* eps (+ (* -1/16 (sin x)) (* -1/48 (sin x))))) (* -1/2 (cos x))))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* eps (+ (* -2 (+ (* -1/16 (sin x)) (* -1/48 (sin x)))) (* 1/24 (* eps (cos x)))))))))","(* 1/2 (* eps (sin x)))","(* eps (+ (* 1/4 (* eps (cos x))) (* 1/2 (sin x))))","(* eps (+ (* 1/2 (sin x)) (* eps (+ (* 1/4 (cos x)) (* eps (+ (* -1/16 (sin x)) (* -1/48 (sin x))))))))","(* eps (+ (* 1/2 (sin x)) (* eps (+ (* 1/4 (cos x)) (* eps (+ (* -1/16 (sin x)) (+ (* -1/48 (sin x)) (* -1/48 (* eps (cos x))))))))))","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x)))))))","(* eps (* x (- (* 1/6 (pow x 2)) 1)))","(* eps (+ (* eps (- (* 1/4 (pow x 2)) 1/2)) (* x (- (* 1/6 (pow x 2)) 1))))","(* eps (+ (* eps (- (+ (* 1/4 (pow x 2)) (* eps (* x (+ 1/6 (* -1/36 (pow x 2)))))) 1/2)) (* x (- (* 1/6 (pow x 2)) 1))))","(* eps (- (* 1/6 (pow x 2)) 1))","(* eps (- (+ (* 1/6 (pow x 2)) (* 1/4 (* eps x))) 1))","(* eps (- (+ (* 1/6 (pow x 2)) (* eps (+ (* 1/4 x) (* eps (+ 1/6 (* -1/36 (pow x 2))))))) 1))","(- (* (pow x 2) (+ 1/6 (* -1 (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2))))))) 1)","(- (+ (* (pow eps 2) (+ 1/6 (* (pow x 2) (- (* 1/6 (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2))))) 1/36)))) (* (pow x 2) (+ 1/6 (* -1 (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))))))) 1)","(+ 1/6 (* -1 (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2))))))","(+ 1/6 (+ (* -1 (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2))))) (* (pow eps 2) (- (* 1/6 (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2))))) 1/36))))","(+ 1/6 (* -1/36 (pow eps 2)))","(sin x)","(+ (sin x) (* 1/2 (* eps (cos x))))","(+ (sin x) (* eps (+ (* -1/8 (* eps (sin x))) (* 1/2 (cos x)))))","(+ (sin x) (* eps (+ (* 1/2 (cos x)) (* eps (+ (* -1/8 (sin x)) (* -1/48 (* eps (cos x))))))))","(* eps (+ 1/2 (* -1/48 (pow eps 2))))","(* eps (+ 1/2 (* (pow eps 2) (- (* 1/3840 (pow eps 2)) 1/48))))","(* eps (+ 1/2 (* (pow eps 2) (- (* (pow eps 2) (+ 1/3840 (* -1/645120 (pow eps 2)))) 1/48))))","(+ (* -1 (sin x)) (* 1/6 (* (pow eps 2) (sin x))))","(* eps (+ 1/2 (/ x eps)))","(* 1/6 (* (pow eps 3) (sin x)))","(* (pow eps 3) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))))","(* (pow eps 3) (+ (* -1 (/ (sin x) (pow eps 2))) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x)))))","(* (pow eps 3) (* x (+ 1/6 (* -1/36 (pow x 2)))))","(* (pow eps 3) (- (+ (* 1/4 (/ (pow x 2) eps)) (* x (+ 1/6 (* -1/36 (pow x 2))))) (* 1/2 (/ 1 eps))))","(* (pow eps 3) (- (+ (* 1/4 (/ (pow x 2) eps)) (+ (* x (+ 1/6 (* -1/36 (pow x 2)))) (/ (* x (- (* 1/6 (pow x 2)) 1)) (pow eps 2)))) (* 1/2 (/ 1 eps))))","(* (pow eps 3) (+ 1/6 (* -1/36 (pow x 2))))","(* (pow eps 3) (+ 1/6 (+ (* -1/36 (pow x 2)) (* 1/4 (/ x eps)))))","(* (pow eps 3) (- (+ 1/6 (+ (* -1/36 (pow x 2)) (+ (* 1/6 (/ (pow x 2) (pow eps 2))) (* 1/4 (/ x eps))))) (/ 1 (pow eps 2))))","(* (pow eps 2) (+ 1/6 (* (pow x 2) (- (* 1/6 (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2))))) 1/36))))","(* (pow eps 2) (- (+ 1/6 (+ (* (pow x 2) (- (* 1/6 (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2))))) 1/36)) (/ (* (pow x 2) (+ 1/6 (* -1 (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2))))))) (pow eps 2)))) (/ 1 (pow eps 2))))","(* (pow eps 2) (- (* 1/6 (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2))))) 1/36))","(* (pow eps 2) (- (+ (* -1 (/ (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) (pow eps 2))) (+ (* 1/6 (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2))))) (* 1/6 (/ 1 (pow eps 2))))) 1/36))","(* -1/36 (pow eps 2))","(* (pow eps 2) (- (* 1/6 (/ 1 (pow eps 2))) 1/36))","(* 1/6 (* (pow eps 2) (sin x)))","(* (pow eps 2) (+ (* -1 (/ (sin x) (pow eps 2))) (* 1/6 (sin x))))","(* -1 (* eps (- (* -1 (/ x eps)) 1/2)))","(* -2 (* (sin (* 1/2 eps)) (sin (* 1/2 (- (* 2 x) (* -1 eps))))))","(* (sin (* 1/2 eps)) (sin (* 1/2 (- (* 2 x) (* -1 eps)))))","(- (cos (- x (* -1 eps))) (cos x))","(* -1 (* (pow eps 3) (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))) eps)) (* -1/6 (sin x)))))","(* -1 (* (pow eps 3) (* x (- (* 1/36 (pow x 2)) 1/6))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (- (* 1/4 (pow x 2)) 1/2) eps)) (* x (- (* 1/36 (pow x 2)) 1/6)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (- (+ (* -1 (/ (* x (+ 1 (* -1/6 (pow x 2)))) eps)) (* 1/4 (pow x 2))) 1/2) eps)) (* x (- (* 1/36 (pow x 2)) 1/6)))))","(* -1 (* (pow eps 3) (- (* 1/36 (pow x 2)) 1/6)))","(* -1 (* (pow eps 3) (- (+ (* -1/4 (/ x eps)) (* 1/36 (pow x 2))) 1/6)))","(* -1 (* (pow eps 3) (- (+ (* -1 (/ (+ (* -1 (/ (+ 1 (* -1/6 (pow x 2))) eps)) (* 1/4 x)) eps)) (* 1/36 (pow x 2))) 1/6)))","(sin (* 1/2 (- (* 2 x) (* -1 eps))))"]],"series":[[5.240966796875,"((* 1/2 (+ (* 2 x) eps)) (+ 0 eps) (* (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) -2) (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (* (+ (* (* x x) 1/6) -1) x) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) x) (* (* eps eps) -1/2)) (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (* (+ (* (+ (* (+ (* 1/5040 (* x x)) -1/120) (* x x)) 1/6) (* x x)) -1) x) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (+ (* (+ (* (* (+ (* (* eps eps) 1/6) -1) (+ (* -1/5040 (* x x)) 1/120)) (* x x)) (* -1/6 (+ (* (* eps eps) 1/6) -1))) (* x x)) (+ (* (* eps eps) 1/6) -1)) (+ (* (* (+ (* (* eps eps) 1/6) -1) (+ (* -1/5040 (* x x)) 1/120)) (* x x)) (* -1/6 (+ (* (* eps eps) 1/6) -1))) (* -1/6 (+ (* (* eps eps) 1/6) -1)) (- (cos (+ x eps)) (cos x)) (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps))) (+ (* (+ (* 1/5040 (* x x)) -1/120) (* x x)) 1/6) (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (* (+ (* (* eps (cos x)) -1/2) (* (+ (* 1/6 (* eps eps)) -1) (sin x))) eps) (* eps (cos x)))","eps","-inf"],[5.602783203125,"((* 1/2 (+ (* 2 x) eps)) (+ 0 eps) (* (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) -2) (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (* (+ (* (* x x) 1/6) -1) x) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) x) (* (* eps eps) -1/2)) (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (* (+ (* (+ (* (+ (* 1/5040 (* x x)) -1/120) (* x x)) 1/6) (* x x)) -1) x) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (+ (* (+ (* (* (+ (* (* eps eps) 1/6) -1) (+ (* -1/5040 (* x x)) 1/120)) (* x x)) (* -1/6 (+ (* (* eps eps) 1/6) -1))) (* x x)) (+ (* (* eps eps) 1/6) -1)) (+ (* (* (+ (* (* eps eps) 1/6) -1) (+ (* -1/5040 (* x x)) 1/120)) (* x x)) (* -1/6 (+ (* (* eps eps) 1/6) -1))) (* -1/6 (+ (* (* eps eps) 1/6) -1)) (- (cos (+ x eps)) (cos x)) (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps))) (+ (* (+ (* 1/5040 (* x x)) -1/120) (* x x)) 1/6) (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (* (+ (* (* eps (cos x)) -1/2) (* (+ (* 1/6 (* eps eps)) -1) (sin x))) eps) (* eps (cos x)))","eps","inf"],[9.95703125,"((* 1/2 (+ (* 2 x) eps)) (+ 0 eps) (* (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) -2) (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (* (+ (* (* x x) 1/6) -1) x) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) x) (* (* eps eps) -1/2)) (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (* (+ (* (+ (* (+ (* 1/5040 (* x x)) -1/120) (* x x)) 1/6) (* x x)) -1) x) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (+ (* (+ (* (* (+ (* (* eps eps) 1/6) -1) (+ (* -1/5040 (* x x)) 1/120)) (* x x)) (* -1/6 (+ (* (* eps eps) 1/6) -1))) (* x x)) (+ (* (* eps eps) 1/6) -1)) (+ (* (* (+ (* (* eps eps) 1/6) -1) (+ (* -1/5040 (* x x)) 1/120)) (* x x)) (* -1/6 (+ (* (* eps eps) 1/6) -1))) (* -1/6 (+ (* (* eps eps) 1/6) -1)) (- (cos (+ x eps)) (cos x)) (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps))) (+ (* (+ (* 1/5040 (* x x)) -1/120) (* x x)) 1/6) (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (* (+ (* (* eps (cos x)) -1/2) (* (+ (* 1/6 (* eps eps)) -1) (sin x))) eps) (* eps (cos x)))","eps","0"],[7.4130859375,"((* 1/2 (+ (* 2 x) eps)) (+ 0 eps) (* (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) -2) (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (* (+ (* (* x x) 1/6) -1) x) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) x) (* (* eps eps) -1/2)) (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (* (+ (* (+ (* (+ (* 1/5040 (* x x)) -1/120) (* x x)) 1/6) (* x x)) -1) x) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (+ (* (+ (* (* (+ (* (* eps eps) 1/6) -1) (+ (* -1/5040 (* x x)) 1/120)) (* x x)) (* -1/6 (+ (* (* eps eps) 1/6) -1))) (* x x)) (+ (* (* eps eps) 1/6) -1)) (+ (* (* (+ (* (* eps eps) 1/6) -1) (+ (* -1/5040 (* x x)) 1/120)) (* x x)) (* -1/6 (+ (* (* eps eps) 1/6) -1))) (* -1/6 (+ (* (* eps eps) 1/6) -1)) (- (cos (+ x eps)) (cos x)) (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps))) (+ (* (+ (* 1/5040 (* x x)) -1/120) (* x x)) 1/6) (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (* (+ (* (* eps (cos x)) -1/2) (* (+ (* 1/6 (* eps eps)) -1) (sin x))) eps) (* eps (cos x)))","x","-inf"],[6.733154296875,"((* 1/2 (+ (* 2 x) eps)) (+ 0 eps) (* (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) -2) (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (* (+ (* (* x x) 1/6) -1) x) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) x) (* (* eps eps) -1/2)) (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (* (+ (* (+ (* (+ (* 1/5040 (* x x)) -1/120) (* x x)) 1/6) (* x x)) -1) x) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (+ (* (+ (* (* (+ (* (* eps eps) 1/6) -1) (+ (* -1/5040 (* x x)) 1/120)) (* x x)) (* -1/6 (+ (* (* eps eps) 1/6) -1))) (* x x)) (+ (* (* eps eps) 1/6) -1)) (+ (* (* (+ (* (* eps eps) 1/6) -1) (+ (* -1/5040 (* x x)) 1/120)) (* x x)) (* -1/6 (+ (* (* eps eps) 1/6) -1))) (* -1/6 (+ (* (* eps eps) 1/6) -1)) (- (cos (+ x eps)) (cos x)) (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps))) (+ (* (+ (* 1/5040 (* x x)) -1/120) (* x x)) 1/6) (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (* (+ (* (* eps (cos x)) -1/2) (* (+ (* 1/6 (* eps eps)) -1) (sin x))) eps) (* eps (cos x)))","x","inf"],[5.47998046875,"((* 1/2 (+ (* 2 x) eps)) (+ 0 eps) (* (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) -2) (* (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps)))) (* (+ (* (* x x) 1/6) -1) x) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (- (cos (+ x eps)) (cos x)) (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (+ (* (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) x) (* (* eps eps) -1/2)) (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (* (+ (* (+ (* (+ (* 1/5040 (* x x)) -1/120) (* x x)) 1/6) (* x x)) -1) x) (- (cos (+ x eps)) (cos x)) (* (neg (sin x)) eps) (neg (sin x)) (+ (* (+ (* (* (+ (* (* eps eps) 1/6) -1) (+ (* -1/5040 (* x x)) 1/120)) (* x x)) (* -1/6 (+ (* (* eps eps) 1/6) -1))) (* x x)) (+ (* (* eps eps) 1/6) -1)) (+ (* (* (+ (* (* eps eps) 1/6) -1) (+ (* -1/5040 (* x x)) 1/120)) (* x x)) (* -1/6 (+ (* (* eps eps) 1/6) -1))) (* -1/6 (+ (* (* eps eps) 1/6) -1)) (- (cos (+ x eps)) (cos x)) (sin (* 1/2 (+ (* 2 x) eps))) (sin (* 1/2 (+ 0 eps))) (+ (* (+ (* 1/5040 (* x x)) -1/120) (* x x)) 1/6) (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (* (+ (* (* eps (cos x)) -1/2) (* (+ (* 1/6 (* eps eps)) -1) (sin x))) eps) (* eps (cos x)))","x","0"]],"time":45.15087890625,"type":"series"},{"count":[[162,160]],"egraph":[[0,8817,2522,0.136892136],[2,6151,2748,0.032994591],[1,1885,2872,0.023341471],[0,605,3052,0.008181567]],"inputs":[["(* 1/2 eps)","(+ x (* 1/2 eps))","(* -2 (pow (sin (* 1/2 eps)) 2))","(+ (* -2 (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (* -2 (pow (sin (* 1/2 eps)) 2)))","(+ (* -2 (pow (sin (* 1/2 eps)) 2)) (* x (+ (* -2 (* (cos (* 1/2 eps)) (sin (* 1/2 eps)))) (* x (pow (sin (* 1/2 eps)) 2)))))","(+ (* -2 (pow (sin (* 1/2 eps)) 2)) (* x (+ (* -2 (* (cos (* 1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* 1/3 (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (pow (sin (* 1/2 eps)) 2))))))","(pow (sin (* 1/2 eps)) 2)","(+ (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps)))) (pow (sin (* 1/2 eps)) 2))","(+ (* x (+ (* -1/2 (* x (pow (sin (* 1/2 eps)) 2))) (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (pow (sin (* 1/2 eps)) 2))","(+ (* x (+ (* x (+ (* -1/2 (pow (sin (* 1/2 eps)) 2)) (* -1/6 (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))))) (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (pow (sin (* 1/2 eps)) 2))","(* -1 x)","(* x (- (* 1/6 (pow x 2)) 1))","(- (cos eps) 1)","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(* -1 (* eps x))","(* x (+ (* -1 eps) (* 1/6 (* eps (pow x 2)))))","(* x (+ (* -1 eps) (* (pow x 2) (+ (* -1/120 (* eps (pow x 2))) (* 1/6 eps)))))","(* x (+ (* -1 eps) (* (pow x 2) (+ (* 1/6 eps) (* (pow x 2) (+ (* -1/120 eps) (* 1/5040 (* eps (pow x 2)))))))))","(* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1))","(* x (- (* (pow x 2) (+ 1/6 (* (pow x 2) (- (* 1/5040 (pow x 2)) 1/120)))) 1))","(* -1/2 (pow eps 2))","(+ (* -1/2 (pow eps 2)) (* eps (* x (- (* 1/6 (pow eps 2)) 1))))","(+ (* -1/2 (pow eps 2)) (* x (+ (* 1/4 (* (pow eps 2) x)) (* eps (- (* 1/6 (pow eps 2)) 1)))))","(+ (* -1/2 (pow eps 2)) (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* x (+ (* -1/6 (* eps (* x (- (* 1/6 (pow eps 2)) 1)))) (* 1/4 (pow eps 2)))))))","(+ (* -1/2 (pow eps 2)) (* x (- (* 1/6 (pow eps 3)) eps)))","(+ (* -1/2 (pow eps 2)) (* x (- (+ (* 1/6 (pow eps 3)) (* 1/4 (* (pow eps 2) x))) eps)))","(+ (* -1/2 (pow eps 2)) (* x (- (+ (* 1/6 (pow eps 3)) (* x (+ (* -1/6 (* eps (* x (- (* 1/6 (pow eps 2)) 1)))) (* 1/4 (pow eps 2))))) eps)))","(- (* 1/6 (pow eps 3)) eps)","(- (+ (* 1/6 (pow eps 3)) (* 1/4 (* (pow eps 2) x))) eps)","(- (+ (* 1/6 (pow eps 3)) (* x (+ (* -1/6 (* eps (* x (- (* 1/6 (pow eps 2)) 1)))) (* 1/4 (pow eps 2))))) eps)","(- (* 1/6 (pow eps 2)) 1)","(- (+ (* -1/6 (* (pow x 2) (- (* 1/6 (pow eps 2)) 1))) (* 1/6 (pow eps 2))) 1)","(- (+ (* 1/6 (pow eps 2)) (* (pow x 2) (+ (* -1/6 (- (* 1/6 (pow eps 2)) 1)) (* 1/120 (* (pow x 2) (- (* 1/6 (pow eps 2)) 1)))))) 1)","(- (+ (* 1/6 (pow eps 2)) (* (pow x 2) (+ (* -1/6 (- (* 1/6 (pow eps 2)) 1)) (* (pow x 2) (+ (* -1/5040 (* (pow x 2) (- (* 1/6 (pow eps 2)) 1))) (* 1/120 (- (* 1/6 (pow eps 2)) 1))))))) 1)","(* -1/6 (- (* 1/6 (pow eps 2)) 1))","(+ (* -1/6 (- (* 1/6 (pow eps 2)) 1)) (* 1/120 (* (pow x 2) (- (* 1/6 (pow eps 2)) 1))))","(+ (* -1/6 (- (* 1/6 (pow eps 2)) 1)) (* (pow x 2) (+ (* -1/5040 (* (pow x 2) (- (* 1/6 (pow eps 2)) 1))) (* 1/120 (- (* 1/6 (pow eps 2)) 1)))))","(sin (* 1/2 eps))","(+ (sin (* 1/2 eps)) (* x (cos (* 1/2 eps))))","(+ (sin (* 1/2 eps)) (* x (+ (cos (* 1/2 eps)) (* -1/2 (* x (sin (* 1/2 eps)))))))","(+ (sin (* 1/2 eps)) (* x (+ (cos (* 1/2 eps)) (* x (+ (* -1/2 (sin (* 1/2 eps))) (* -1/6 (* x (cos (* 1/2 eps)))))))))","1/6","(+ 1/6 (* -1/120 (pow x 2)))","(+ 1/6 (* (pow x 2) (- (* 1/5040 (pow x 2)) 1/120)))","(* x (- (* 1/6 (pow eps 2)) 1))","(* x (- (+ (* -1/6 (* (pow x 2) (- (* 1/6 (pow eps 2)) 1))) (* 1/6 (pow eps 2))) 1))","(* x (- (+ (* 1/6 (pow eps 2)) (* (pow x 2) (+ (* -1/6 (- (* 1/6 (pow eps 2)) 1)) (* 1/120 (* (pow x 2) (- (* 1/6 (pow eps 2)) 1)))))) 1))","(* x (- (+ (* 1/6 (pow eps 2)) (* (pow x 2) (+ (* -1/6 (- (* 1/6 (pow eps 2)) 1)) (* (pow x 2) (+ (* -1/5040 (* (pow x 2) (- (* 1/6 (pow eps 2)) 1))) (* 1/120 (- (* 1/6 (pow eps 2)) 1))))))) 1))","eps","(+ eps (* -1/2 (* eps (pow x 2))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* 1/24 (* eps (pow x 2))))))","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* (pow x 2) (+ (* -1/720 (* eps (pow x 2))) (* 1/24 eps))))))","x","(* x (+ 1 (* 1/2 (/ eps x))))","(* -2 (* (sin (* 1/2 eps)) (sin (* 1/2 (+ eps (* 2 x))))))","(* (sin (* 1/2 eps)) (sin (* 1/2 (+ eps (* 2 x)))))","(* 1/6 (pow x 3))","(* (pow x 3) (- 1/6 (/ 1 (pow x 2))))","(- (cos (+ eps x)) (cos x))","(* -1 (* eps (sin x)))","(* -1 (sin x))","(* eps (+ (* -1/2 (* eps (cos x))) (* (sin x) (- (* 1/6 (pow eps 2)) 1))))","(* -1/6 (* eps (* (pow x 3) (- (* 1/6 (pow eps 2)) 1))))","(* (pow x 3) (+ (* -1/6 (* eps (- (* 1/6 (pow eps 2)) 1))) (* 1/4 (/ (pow eps 2) x))))","(* (pow x 3) (- (+ (* -1/6 (* eps (- (* 1/6 (pow eps 2)) 1))) (+ (* 1/6 (/ (pow eps 3) (pow x 2))) (* 1/4 (/ (pow eps 2) x)))) (/ eps (pow x 2))))","(* (pow x 3) (- (+ (* -1/2 (/ (pow eps 2) (pow x 3))) (+ (* -1/6 (* eps (- (* 1/6 (pow eps 2)) 1))) (+ (* 1/6 (/ (pow eps 3) (pow x 2))) (* 1/4 (/ (pow eps 2) x))))) (/ eps (pow x 2))))","(* -1/6 (* eps (* (pow x 2) (- (* 1/6 (pow eps 2)) 1))))","(* (pow x 2) (+ (* -1/6 (* eps (- (* 1/6 (pow eps 2)) 1))) (* 1/4 (/ (pow eps 2) x))))","(* (pow x 2) (- (+ (* -1/6 (* eps (- (* 1/6 (pow eps 2)) 1))) (+ (* 1/6 (/ (pow eps 3) (pow x 2))) (* 1/4 (/ (pow eps 2) x)))) (/ eps (pow x 2))))","(* 1/5040 (pow x 7))","(* (pow x 7) (- 1/5040 (* 1/120 (/ 1 (pow x 2)))))","(* (pow x 7) (- (+ 1/5040 (/ 1/6 (pow x 4))) (* 1/120 (/ 1 (pow x 2)))))","(* (pow x 7) (- (+ 1/5040 (/ 1/6 (pow x 4))) (+ (* 1/120 (/ 1 (pow x 2))) (/ 1 (pow x 6)))))","(* -1/5040 (* (pow x 6) (- (* 1/6 (pow eps 2)) 1)))","(* (pow x 6) (+ (* -1/5040 (- (* 1/6 (pow eps 2)) 1)) (* 1/120 (/ (- (* 1/6 (pow eps 2)) 1) (pow x 2)))))","(* (pow x 6) (+ (* -1/6 (/ (- (* 1/6 (pow eps 2)) 1) (pow x 4))) (+ (* -1/5040 (- (* 1/6 (pow eps 2)) 1)) (* 1/120 (/ (- (* 1/6 (pow eps 2)) 1) (pow x 2))))))","(* (pow x 6) (- (+ (* -1/6 (/ (- (* 1/6 (pow eps 2)) 1) (pow x 4))) (+ (* -1/5040 (- (* 1/6 (pow eps 2)) 1)) (+ (* 1/120 (/ (- (* 1/6 (pow eps 2)) 1) (pow x 2))) (* 1/6 (/ (pow eps 2) (pow x 6)))))) (/ 1 (pow x 6))))","(* -1/5040 (* (pow x 4) (- (* 1/6 (pow eps 2)) 1)))","(* (pow x 4) (+ (* -1/5040 (- (* 1/6 (pow eps 2)) 1)) (* 1/120 (/ (- (* 1/6 (pow eps 2)) 1) (pow x 2)))))","(* (pow x 4) (+ (* -1/6 (/ (- (* 1/6 (pow eps 2)) 1) (pow x 4))) (+ (* -1/5040 (- (* 1/6 (pow eps 2)) 1)) (* 1/120 (/ (- (* 1/6 (pow eps 2)) 1) (pow x 2))))))","(sin (* 1/2 (+ eps (* 2 x))))","(* 1/5040 (pow x 4))","(* (pow x 4) (- 1/5040 (* 1/120 (/ 1 (pow x 2)))))","(* (pow x 4) (- (+ 1/5040 (/ 1/6 (pow x 4))) (* 1/120 (/ 1 (pow x 2)))))","(* (sin x) (- (* 1/6 (pow eps 2)) 1))","(* eps (cos x))","(* -1 (* x (- (* -1/2 (/ eps x)) 1)))","(* -2 (* (sin (* 1/2 eps)) (sin (* 1/2 (- eps (* -2 x))))))","(* (sin (* 1/2 eps)) (sin (* 1/2 (- eps (* -2 x)))))","(* -1 (* (pow x 3) (- (/ 1 (pow x 2)) 1/6)))","(- (cos (- eps (* -1 x))) (cos x))","(* -1 (* (pow x 3) (+ (* -1/4 (/ (pow eps 2) x)) (* 1/6 (* eps (- (* 1/6 (pow eps 2)) 1))))))","(* -1 (* (pow x 3) (+ (* -1 (/ (- (+ (* 1/6 (/ (pow eps 3) x)) (* 1/4 (pow eps 2))) (/ eps x)) x)) (* 1/6 (* eps (- (* 1/6 (pow eps 2)) 1))))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (- (* 1/6 (pow eps 3)) eps)) (* 1/2 (/ (pow eps 2) x))) x)) (* 1/4 (pow eps 2))) x)) (* 1/6 (* eps (- (* 1/6 (pow eps 2)) 1))))))","(* (pow x 2) (+ (* -1 (/ (+ (* -1 (/ (- (* 1/6 (pow eps 3)) eps) x)) (* -1/4 (pow eps 2))) x)) (* -1/6 (* eps (- (* 1/6 (pow eps 2)) 1)))))","(* -1 (* (pow x 7) (- (* 1/120 (/ 1 (pow x 2))) 1/5040)))","(* -1 (* (pow x 7) (- (* 1/120 (/ 1 (pow x 2))) (+ 1/5040 (/ 1/6 (pow x 4))))))","(* -1 (* (pow x 7) (- (+ (* 1/120 (/ 1 (pow x 2))) (/ 1 (pow x 6))) (+ 1/5040 (/ 1/6 (pow x 4))))))","(sin (* 1/2 (- eps (* -2 x))))","(* eps (+ (* -1 (sin x)) (* -1/2 (* eps (cos x)))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -2 (* eps (+ (* -1/16 (sin x)) (* -1/48 (sin x))))) (* -1/2 (cos x))))))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* eps (+ (* -2 (+ (* -1/16 (sin x)) (* -1/48 (sin x)))) (* 1/24 (* eps (cos x)))))))))","(* 1/2 (* eps (sin x)))","(* eps (+ (* 1/4 (* eps (cos x))) (* 1/2 (sin x))))","(* eps (+ (* 1/2 (sin x)) (* eps (+ (* 1/4 (cos x)) (* eps (+ (* -1/16 (sin x)) (* -1/48 (sin x))))))))","(* eps (+ (* 1/2 (sin x)) (* eps (+ (* 1/4 (cos x)) (* eps (+ (* -1/16 (sin x)) (+ (* -1/48 (sin x)) (* -1/48 (* eps (cos x))))))))))","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x)))))))","(* eps (* x (- (* 1/6 (pow x 2)) 1)))","(* eps (+ (* eps (- (* 1/4 (pow x 2)) 1/2)) (* x (- (* 1/6 (pow x 2)) 1))))","(* eps (+ (* eps (- (+ (* 1/4 (pow x 2)) (* eps (* x (+ 1/6 (* -1/36 (pow x 2)))))) 1/2)) (* x (- (* 1/6 (pow x 2)) 1))))","(* eps (- (* 1/6 (pow x 2)) 1))","(* eps (- (+ (* 1/6 (pow x 2)) (* 1/4 (* eps x))) 1))","(* eps (- (+ (* 1/6 (pow x 2)) (* eps (+ (* 1/4 x) (* eps (+ 1/6 (* -1/36 (pow x 2))))))) 1))","(- (* (pow x 2) (+ 1/6 (* -1 (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2))))))) 1)","(- (+ (* (pow eps 2) (+ 1/6 (* (pow x 2) (- (* 1/6 (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2))))) 1/36)))) (* (pow x 2) (+ 1/6 (* -1 (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))))))) 1)","(+ 1/6 (* -1 (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2))))))","(+ 1/6 (+ (* -1 (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2))))) (* (pow eps 2) (- (* 1/6 (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2))))) 1/36))))","(+ 1/6 (* -1/36 (pow eps 2)))","(sin x)","(+ (sin x) (* 1/2 (* eps (cos x))))","(+ (sin x) (* eps (+ (* -1/8 (* eps (sin x))) (* 1/2 (cos x)))))","(+ (sin x) (* eps (+ (* 1/2 (cos x)) (* eps (+ (* -1/8 (sin x)) (* -1/48 (* eps (cos x))))))))","(* eps (+ 1/2 (* -1/48 (pow eps 2))))","(* eps (+ 1/2 (* (pow eps 2) (- (* 1/3840 (pow eps 2)) 1/48))))","(* eps (+ 1/2 (* (pow eps 2) (- (* (pow eps 2) (+ 1/3840 (* -1/645120 (pow eps 2)))) 1/48))))","(+ (* -1 (sin x)) (* 1/6 (* (pow eps 2) (sin x))))","(* eps (+ 1/2 (/ x eps)))","(* 1/6 (* (pow eps 3) (sin x)))","(* (pow eps 3) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))))","(* (pow eps 3) (+ (* -1 (/ (sin x) (pow eps 2))) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x)))))","(* (pow eps 3) (* x (+ 1/6 (* -1/36 (pow x 2)))))","(* (pow eps 3) (- (+ (* 1/4 (/ (pow x 2) eps)) (* x (+ 1/6 (* -1/36 (pow x 2))))) (* 1/2 (/ 1 eps))))","(* (pow eps 3) (- (+ (* 1/4 (/ (pow x 2) eps)) (+ (* x (+ 1/6 (* -1/36 (pow x 2)))) (/ (* x (- (* 1/6 (pow x 2)) 1)) (pow eps 2)))) (* 1/2 (/ 1 eps))))","(* (pow eps 3) (+ 1/6 (* -1/36 (pow x 2))))","(* (pow eps 3) (+ 1/6 (+ (* -1/36 (pow x 2)) (* 1/4 (/ x eps)))))","(* (pow eps 3) (- (+ 1/6 (+ (* -1/36 (pow x 2)) (+ (* 1/6 (/ (pow x 2) (pow eps 2))) (* 1/4 (/ x eps))))) (/ 1 (pow eps 2))))","(* (pow eps 2) (+ 1/6 (* (pow x 2) (- (* 1/6 (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2))))) 1/36))))","(* (pow eps 2) (- (+ 1/6 (+ (* (pow x 2) (- (* 1/6 (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2))))) 1/36)) (/ (* (pow x 2) (+ 1/6 (* -1 (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2))))))) (pow eps 2)))) (/ 1 (pow eps 2))))","(* (pow eps 2) (- (* 1/6 (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2))))) 1/36))","(* (pow eps 2) (- (+ (* -1 (/ (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) (pow eps 2))) (+ (* 1/6 (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2))))) (* 1/6 (/ 1 (pow eps 2))))) 1/36))","(* -1/36 (pow eps 2))","(* (pow eps 2) (- (* 1/6 (/ 1 (pow eps 2))) 1/36))","(* 1/6 (* (pow eps 2) (sin x)))","(* (pow eps 2) (+ (* -1 (/ (sin x) (pow eps 2))) (* 1/6 (sin x))))","(* -1 (* eps (- (* -1 (/ x eps)) 1/2)))","(* -2 (* (sin (* 1/2 eps)) (sin (* 1/2 (- (* 2 x) (* -1 eps))))))","(* (sin (* 1/2 eps)) (sin (* 1/2 (- (* 2 x) (* -1 eps)))))","(- (cos (- x (* -1 eps))) (cos x))","(* -1 (* (pow eps 3) (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))) eps)) (* -1/6 (sin x)))))","(* -1 (* (pow eps 3) (* x (- (* 1/36 (pow x 2)) 1/6))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (- (* 1/4 (pow x 2)) 1/2) eps)) (* x (- (* 1/36 (pow x 2)) 1/6)))))","(* -1 (* (pow eps 3) (+ (* -1 (/ (- (+ (* -1 (/ (* x (+ 1 (* -1/6 (pow x 2)))) eps)) (* 1/4 (pow x 2))) 1/2) eps)) (* x (- (* 1/36 (pow x 2)) 1/6)))))","(* -1 (* (pow eps 3) (- (* 1/36 (pow x 2)) 1/6)))","(* -1 (* (pow eps 3) (- (+ (* -1/4 (/ x eps)) (* 1/36 (pow x 2))) 1/6)))","(* -1 (* (pow eps 3) (- (+ (* -1 (/ (+ (* -1 (/ (+ 1 (* -1/6 (pow x 2))) eps)) (* 1/4 x)) eps)) (* 1/36 (pow x 2))) 1/6)))","(sin (* 1/2 (- (* 2 x) (* -1 eps))))"]],"memory":[[2629840,51921936]],"method":["egg-herbie"],"outputs":[["(* 1/2 eps)","(*.f64 #s(literal 1/2 binary64) eps)","(+ x (* 1/2 eps))","(fma.f64 #s(literal 1/2 binary64) eps x)","(* -2 (pow (sin (* 1/2 eps)) 2))","(*.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) #s(literal -2 binary64))","(+ (* -2 (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (* -2 (pow (sin (* 1/2 eps)) 2)))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal -2 binary64)) (fma.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) x (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))))","(+ (* -2 (pow (sin (* 1/2 eps)) 2)) (* x (+ (* -2 (* (cos (* 1/2 eps)) (sin (* 1/2 eps)))) (* x (pow (sin (* 1/2 eps)) 2)))))","(fma.f64 (*.f64 x (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal -2 binary64))) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) (*.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) (fma.f64 x x #s(literal -2 binary64))))","(+ (* -2 (pow (sin (* 1/2 eps)) 2)) (* x (+ (* -2 (* (cos (* 1/2 eps)) (sin (* 1/2 eps)))) (* x (+ (* 1/3 (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (pow (sin (* 1/2 eps)) 2))))))","(fma.f64 (fma.f64 (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))) (+.f64 #s(literal -2 binary64) (*.f64 x (*.f64 #s(literal 1/3 binary64) x))) (*.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) x)) x (*.f64 (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) #s(literal -2 binary64)))","(pow (sin (* 1/2 eps)) 2)","(pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64))","(+ (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps)))) (pow (sin (* 1/2 eps)) 2))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) (fma.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) x (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))))","(+ (* x (+ (* -1/2 (* x (pow (sin (* 1/2 eps)) 2))) (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (pow (sin (* 1/2 eps)) 2))","(fma.f64 (fma.f64 x (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) (*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) x) (cos.f64 (*.f64 #s(literal 1/2 binary64) eps))))","(+ (* x (+ (* x (+ (* -1/2 (pow (sin (* 1/2 eps)) 2)) (* -1/6 (* x (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))))) (* (cos (* 1/2 eps)) (sin (* 1/2 eps))))) (pow (sin (* 1/2 eps)) 2))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)) (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/6 binary64) #s(literal 1 binary64)) (*.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))))) x (pow.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) #s(literal 2 binary64)))","(* -1 x)","(neg.f64 x)","(* x (- (* 1/6 (pow x 2)) 1))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 x))","(- (cos eps) 1)","(-.f64 (cos.f64 eps) #s(literal 1 binary64))","(- (+ (cos eps) (* -1 (* x (sin eps)))) 1)","(fma.f64 (fma.f64 (sin.f64 eps) x #s(literal 1 binary64)) #s(literal -1 binary64) (cos.f64 eps))","(- (+ (cos eps) (* x (- (* x (+ 1/2 (* -1/2 (cos eps)))) (sin eps)))) 1)","(fma.f64 (-.f64 (*.f64 (fma.f64 (cos.f64 eps) #s(literal -1/2 binary64) #s(literal 1/2 binary64)) x) (sin.f64 eps)) x (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(- (+ (cos eps) (* x (- (* x (+ 1/2 (+ (* -1/2 (cos eps)) (* 1/6 (* x (sin eps)))))) (sin eps)))) 1)","(fma.f64 (-.f64 (*.f64 (fma.f64 (*.f64 (sin.f64 eps) x) #s(literal 1/6 binary64) (fma.f64 (cos.f64 eps) #s(literal -1/2 binary64) #s(literal 1/2 binary64))) x) (sin.f64 eps)) x (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(* -1 (* eps x))","(*.f64 (neg.f64 eps) x)","(* x (+ (* -1 eps) (* 1/6 (* eps (pow x 2)))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 x)) eps)","(* x (+ (* -1 eps) (* (pow x 2) (+ (* -1/120 (* eps (pow x 2))) (* 1/6 eps)))))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 eps (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64))) (*.f64 (neg.f64 eps) x))","(* x (+ (* -1 eps) (* (pow x 2) (+ (* 1/6 eps) (* (pow x 2) (+ (* -1/120 eps) (* 1/5040 (* eps (pow x 2)))))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps (*.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 eps (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64))))) x)","(* x (- (* (pow x 2) (+ 1/6 (* -1/120 (pow x 2)))) 1))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)","(* x (- (* (pow x 2) (+ 1/6 (* (pow x 2) (- (* 1/5040 (pow x 2)) 1/120)))) 1))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)","(* -1/2 (pow eps 2))","(*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))","(+ (* -1/2 (pow eps 2)) (* eps (* x (- (* 1/6 (pow eps 2)) 1))))","(*.f64 eps (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)))","(+ (* -1/2 (pow eps 2)) (* x (+ (* 1/4 (* (pow eps 2) x)) (* eps (- (* 1/6 (pow eps 2)) 1)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps (*.f64 (fma.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/6 binary64) eps (*.f64 #s(literal 1/4 binary64) x)) (neg.f64 eps)) x))","(+ (* -1/2 (pow eps 2)) (* x (+ (* eps (- (* 1/6 (pow eps 2)) 1)) (* x (+ (* -1/6 (* eps (* x (- (* 1/6 (pow eps 2)) 1)))) (* 1/4 (pow eps 2)))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/6 binary64) #s(literal 1 binary64)) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) (*.f64 (*.f64 (*.f64 eps eps) x) #s(literal 1/4 binary64))) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))","(+ (* -1/2 (pow eps 2)) (* x (- (* 1/6 (pow eps 3)) eps)))","(*.f64 eps (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps)))","(+ (* -1/2 (pow eps 2)) (* x (- (+ (* 1/6 (pow eps 3)) (* 1/4 (* (pow eps 2) x))) eps)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps (*.f64 (fma.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/6 binary64) eps (*.f64 #s(literal 1/4 binary64) x)) (neg.f64 eps)) x))","(+ (* -1/2 (pow eps 2)) (* x (- (+ (* 1/6 (pow eps 3)) (* x (+ (* -1/6 (* eps (* x (- (* 1/6 (pow eps 2)) 1)))) (* 1/4 (pow eps 2))))) eps)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/6 binary64) #s(literal 1 binary64)) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) (*.f64 (*.f64 (*.f64 eps eps) x) #s(literal 1/4 binary64))) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))","(- (* 1/6 (pow eps 3)) eps)","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))","(- (+ (* 1/6 (pow eps 3)) (* 1/4 (* (pow eps 2) x))) eps)","(fma.f64 (*.f64 eps eps) (fma.f64 #s(literal 1/6 binary64) eps (*.f64 #s(literal 1/4 binary64) x)) (neg.f64 eps))","(- (+ (* 1/6 (pow eps 3)) (* x (+ (* -1/6 (* eps (* x (- (* 1/6 (pow eps 2)) 1)))) (* 1/4 (pow eps 2))))) eps)","(fma.f64 (fma.f64 (*.f64 x x) #s(literal -1/6 binary64) #s(literal 1 binary64)) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) (*.f64 (*.f64 (*.f64 eps eps) x) #s(literal 1/4 binary64)))","(- (* 1/6 (pow eps 2)) 1)","(fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))","(- (+ (* -1/6 (* (pow x 2) (- (* 1/6 (pow eps 2)) 1))) (* 1/6 (pow eps 2))) 1)","(*.f64 (fma.f64 (*.f64 x x) #s(literal -1/6 binary64) #s(literal 1 binary64)) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))","(- (+ (* 1/6 (pow eps 2)) (* (pow x 2) (+ (* -1/6 (- (* 1/6 (pow eps 2)) 1)) (* 1/120 (* (pow x 2) (- (* 1/6 (pow eps 2)) 1)))))) 1)","(fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))","(- (+ (* 1/6 (pow eps 2)) (* (pow x 2) (+ (* -1/6 (- (* 1/6 (pow eps 2)) 1)) (* (pow x 2) (+ (* -1/5040 (* (pow x 2) (- (* 1/6 (pow eps 2)) 1))) (* 1/120 (- (* 1/6 (pow eps 2)) 1))))))) 1)","(fma.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/5040 binary64)) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))","(* -1/6 (- (* 1/6 (pow eps 2)) 1))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) #s(literal -1/6 binary64))","(+ (* -1/6 (- (* 1/6 (pow eps 2)) 1)) (* 1/120 (* (pow x 2) (- (* 1/6 (pow eps 2)) 1))))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64)))","(+ (* -1/6 (- (* 1/6 (pow eps 2)) 1)) (* (pow x 2) (+ (* -1/5040 (* (pow x 2) (- (* 1/6 (pow eps 2)) 1))) (* 1/120 (- (* 1/6 (pow eps 2)) 1)))))","(fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/5040 binary64)) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64))))","(sin (* 1/2 eps))","(sin.f64 (*.f64 #s(literal 1/2 binary64) eps))","(+ (sin (* 1/2 eps)) (* x (cos (* 1/2 eps))))","(fma.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) x (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(+ (sin (* 1/2 eps)) (* x (+ (cos (* 1/2 eps)) (* -1/2 (* x (sin (* 1/2 eps)))))))","(fma.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)) x (*.f64 (fma.f64 x (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps))))","(+ (sin (* 1/2 eps)) (* x (+ (cos (* 1/2 eps)) (* x (+ (* -1/2 (sin (* 1/2 eps))) (* -1/6 (* x (cos (* 1/2 eps)))))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)) (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/6 binary64) #s(literal 1 binary64)) (cos.f64 (*.f64 #s(literal 1/2 binary64) eps)))) x (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","1/6","#s(literal 1/6 binary64)","(+ 1/6 (* -1/120 (pow x 2)))","(fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64))","(+ 1/6 (* (pow x 2) (- (* 1/5040 (pow x 2)) 1/120)))","(fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64))","(* x (- (* 1/6 (pow eps 2)) 1))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)","(* x (- (+ (* -1/6 (* (pow x 2) (- (* 1/6 (pow eps 2)) 1))) (* 1/6 (pow eps 2))) 1))","(*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal -1/6 binary64) #s(literal 1 binary64)) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x)","(* x (- (+ (* 1/6 (pow eps 2)) (* (pow x 2) (+ (* -1/6 (- (* 1/6 (pow eps 2)) 1)) (* 1/120 (* (pow x 2) (- (* 1/6 (pow eps 2)) 1)))))) 1))","(*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x)","(* x (- (+ (* 1/6 (pow eps 2)) (* (pow x 2) (+ (* -1/6 (- (* 1/6 (pow eps 2)) 1)) (* (pow x 2) (+ (* -1/5040 (* (pow x 2) (- (* 1/6 (pow eps 2)) 1))) (* 1/120 (- (* 1/6 (pow eps 2)) 1))))))) 1))","(*.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/5040 binary64)) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal 1/120 binary64) (*.f64 x x) #s(literal -1/6 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x)","eps","(+ eps (* -1/2 (* eps (pow x 2))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 x x) eps)","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* 1/24 (* eps (pow x 2))))))","(fma.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) (*.f64 x x) eps)","(+ eps (* (pow x 2) (+ (* -1/2 eps) (* (pow x 2) (+ (* -1/720 (* eps (pow x 2))) (* 1/24 eps))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/720 binary64) eps) (pow.f64 x #s(literal 4 binary64)) (*.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64)))) (*.f64 x x) eps)","x","(* x (+ 1 (* 1/2 (/ eps x))))","(*.f64 (fma.f64 (/.f64 eps x) #s(literal 1/2 binary64) #s(literal 1 binary64)) x)","(* -2 (* (sin (* 1/2 eps)) (sin (* 1/2 (+ eps (* 2 x))))))","(*.f64 (*.f64 #s(literal -2 binary64) (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x))) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(* (sin (* 1/2 eps)) (sin (* 1/2 (+ eps (* 2 x)))))","(*.f64 (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(* 1/6 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64))","(* (pow x 3) (- 1/6 (/ 1 (pow x 2))))","(*.f64 (-.f64 #s(literal 1/6 binary64) (/.f64 #s(literal 1 binary64) (*.f64 x x))) (pow.f64 x #s(literal 3 binary64)))","(- (cos (+ eps x)) (cos x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(* -1 (* eps (sin x)))","(*.f64 (neg.f64 (sin.f64 x)) eps)","(* -1 (sin x))","(neg.f64 (sin.f64 x))","(* eps (+ (* -1/2 (* eps (cos x))) (* (sin x) (- (* 1/6 (pow eps 2)) 1))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(* -1/6 (* eps (* (pow x 3) (- (* 1/6 (pow eps 2)) 1))))","(*.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64)))","(* (pow x 3) (+ (* -1/6 (* eps (- (* 1/6 (pow eps 2)) 1))) (* 1/4 (/ (pow eps 2) x))))","(*.f64 (fma.f64 (*.f64 eps (/.f64 eps x)) #s(literal 1/4 binary64) (*.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) #s(literal -1/6 binary64))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (- (+ (* -1/6 (* eps (- (* 1/6 (pow eps 2)) 1))) (+ (* 1/6 (/ (pow eps 3) (pow x 2))) (* 1/4 (/ (pow eps 2) x)))) (/ eps (pow x 2))))","(*.f64 (-.f64 (fma.f64 (/.f64 #s(literal 1/6 binary64) x) (/.f64 (pow.f64 eps #s(literal 3 binary64)) x) (fma.f64 (*.f64 eps (/.f64 eps x)) #s(literal 1/4 binary64) (*.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) #s(literal -1/6 binary64)))) (/.f64 (/.f64 eps x) x)) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (- (+ (* -1/2 (/ (pow eps 2) (pow x 3))) (+ (* -1/6 (* eps (- (* 1/6 (pow eps 2)) 1))) (+ (* 1/6 (/ (pow eps 3) (pow x 2))) (* 1/4 (/ (pow eps 2) x))))) (/ eps (pow x 2))))","(*.f64 (-.f64 (+.f64 (fma.f64 (/.f64 #s(literal 1/6 binary64) x) (/.f64 (pow.f64 eps #s(literal 3 binary64)) x) (*.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) #s(literal -1/6 binary64))) (*.f64 (*.f64 eps (/.f64 eps x)) (+.f64 #s(literal 1/4 binary64) (/.f64 #s(literal -1/2 binary64) (*.f64 x x))))) (/.f64 (/.f64 eps x) x)) (pow.f64 x #s(literal 3 binary64)))","(* -1/6 (* eps (* (pow x 2) (- (* 1/6 (pow eps 2)) 1))))","(*.f64 (*.f64 x (*.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) x)) #s(literal -1/6 binary64))","(* (pow x 2) (+ (* -1/6 (* eps (- (* 1/6 (pow eps 2)) 1))) (* 1/4 (/ (pow eps 2) x))))","(*.f64 (*.f64 (fma.f64 (*.f64 eps (/.f64 eps x)) #s(literal 1/4 binary64) (*.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) #s(literal -1/6 binary64))) x) x)","(* (pow x 2) (- (+ (* -1/6 (* eps (- (* 1/6 (pow eps 2)) 1))) (+ (* 1/6 (/ (pow eps 3) (pow x 2))) (* 1/4 (/ (pow eps 2) x)))) (/ eps (pow x 2))))","(*.f64 (-.f64 (fma.f64 (/.f64 #s(literal 1/6 binary64) x) (/.f64 (pow.f64 eps #s(literal 3 binary64)) x) (fma.f64 (*.f64 eps (/.f64 eps x)) #s(literal 1/4 binary64) (*.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) #s(literal -1/6 binary64)))) (/.f64 (/.f64 eps x) x)) (*.f64 x x))","(* 1/5040 (pow x 7))","(*.f64 (pow.f64 x #s(literal 7 binary64)) #s(literal 1/5040 binary64))","(* (pow x 7) (- 1/5040 (* 1/120 (/ 1 (pow x 2)))))","(*.f64 (-.f64 #s(literal 1/5040 binary64) (/.f64 #s(literal 1/120 binary64) (*.f64 x x))) (pow.f64 x #s(literal 7 binary64)))","(* (pow x 7) (- (+ 1/5040 (/ 1/6 (pow x 4))) (* 1/120 (/ 1 (pow x 2)))))","(*.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1/5040 binary64)) (/.f64 #s(literal 1/120 binary64) (*.f64 x x))) (pow.f64 x #s(literal 7 binary64)))","(* (pow x 7) (- (+ 1/5040 (/ 1/6 (pow x 4))) (+ (* 1/120 (/ 1 (pow x 2))) (/ 1 (pow x 6)))))","(*.f64 (-.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1/5040 binary64)) (/.f64 #s(literal 1/120 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64)))) (pow.f64 x #s(literal 7 binary64)))","(* -1/5040 (* (pow x 6) (- (* 1/6 (pow eps 2)) 1)))","(*.f64 (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1/5040 binary64)) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))","(* (pow x 6) (+ (* -1/5040 (- (* 1/6 (pow eps 2)) 1)) (* 1/120 (/ (- (* 1/6 (pow eps 2)) 1) (pow x 2)))))","(*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 1/120 binary64) (*.f64 x x)) #s(literal 1/5040 binary64))) (pow.f64 x #s(literal 6 binary64)))","(* (pow x 6) (+ (* -1/6 (/ (- (* 1/6 (pow eps 2)) 1) (pow x 4))) (+ (* -1/5040 (- (* 1/6 (pow eps 2)) 1)) (* 1/120 (/ (- (* 1/6 (pow eps 2)) 1) (pow x 2))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal -1/6 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -1/5040 binary64)) (*.f64 (/.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (/.f64 #s(literal 1/120 binary64) x))) (pow.f64 x #s(literal 6 binary64)))","(* (pow x 6) (- (+ (* -1/6 (/ (- (* 1/6 (pow eps 2)) 1) (pow x 4))) (+ (* -1/5040 (- (* 1/6 (pow eps 2)) 1)) (+ (* 1/120 (/ (- (* 1/6 (pow eps 2)) 1) (pow x 2))) (* 1/6 (/ (pow eps 2) (pow x 6)))))) (/ 1 (pow x 6))))","(*.f64 (fma.f64 (/.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1/6 binary64) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 1/120 binary64) (*.f64 x x)) #s(literal 1/5040 binary64)) (fma.f64 (*.f64 eps (/.f64 eps (pow.f64 x #s(literal 6 binary64)))) #s(literal 1/6 binary64) (/.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 6 binary64)))))) (pow.f64 x #s(literal 6 binary64)))","(* -1/5040 (* (pow x 4) (- (* 1/6 (pow eps 2)) 1)))","(*.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal -1/5040 binary64)) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))","(* (pow x 4) (+ (* -1/5040 (- (* 1/6 (pow eps 2)) 1)) (* 1/120 (/ (- (* 1/6 (pow eps 2)) 1) (pow x 2)))))","(*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 1/120 binary64) (*.f64 x x)) #s(literal 1/5040 binary64))) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ (* -1/6 (/ (- (* 1/6 (pow eps 2)) 1) (pow x 4))) (+ (* -1/5040 (- (* 1/6 (pow eps 2)) 1)) (* 1/120 (/ (- (* 1/6 (pow eps 2)) 1) (pow x 2))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal -1/6 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -1/5040 binary64)) (*.f64 (/.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (/.f64 #s(literal 1/120 binary64) x))) (pow.f64 x #s(literal 4 binary64)))","(sin (* 1/2 (+ eps (* 2 x))))","(sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x))","(* 1/5040 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/5040 binary64))","(* (pow x 4) (- 1/5040 (* 1/120 (/ 1 (pow x 2)))))","(*.f64 (pow.f64 x #s(literal 4 binary64)) (-.f64 #s(literal 1/5040 binary64) (/.f64 #s(literal 1/120 binary64) (*.f64 x x))))","(* (pow x 4) (- (+ 1/5040 (/ 1/6 (pow x 4))) (* 1/120 (/ 1 (pow x 2)))))","(*.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1/5040 binary64)) (/.f64 #s(literal 1/120 binary64) (*.f64 x x))) (pow.f64 x #s(literal 4 binary64)))","(* (sin x) (- (* 1/6 (pow eps 2)) 1))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))","(* eps (cos x))","(*.f64 (cos.f64 x) eps)","(* -1 (* x (- (* -1/2 (/ eps x)) 1)))","(fma.f64 (*.f64 (/.f64 eps x) #s(literal -1/2 binary64)) (neg.f64 x) x)","(* -2 (* (sin (* 1/2 eps)) (sin (* 1/2 (- eps (* -2 x))))))","(*.f64 (*.f64 #s(literal -2 binary64) (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x))) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(* (sin (* 1/2 eps)) (sin (* 1/2 (- eps (* -2 x)))))","(*.f64 (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(* -1 (* (pow x 3) (- (/ 1 (pow x 2)) 1/6)))","(*.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1/6 binary64))) (pow.f64 x #s(literal 3 binary64)))","(- (cos (- eps (* -1 x))) (cos x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(* -1 (* (pow x 3) (+ (* -1/4 (/ (pow eps 2) x)) (* 1/6 (* eps (- (* 1/6 (pow eps 2)) 1))))))","(*.f64 (fma.f64 (*.f64 eps (/.f64 eps x)) #s(literal 1/4 binary64) (*.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) #s(literal -1/6 binary64))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1 (/ (- (+ (* 1/6 (/ (pow eps 3) x)) (* 1/4 (pow eps 2))) (/ eps x)) x)) (* 1/6 (* eps (- (* 1/6 (pow eps 2)) 1))))))","(*.f64 (neg.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) #s(literal 1/6 binary64) (/.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) eps) eps (/.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) x)) (neg.f64 x)))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (- (* 1/6 (pow eps 3)) eps)) (* 1/2 (/ (pow eps 2) x))) x)) (* 1/4 (pow eps 2))) x)) (* 1/6 (* eps (- (* 1/6 (pow eps 2)) 1))))))","(*.f64 (neg.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) #s(literal 1/6 binary64) (/.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) eps) eps (/.f64 (fma.f64 (*.f64 eps (/.f64 eps x)) #s(literal 1/2 binary64) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps)) (neg.f64 x))) (neg.f64 x)))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 2) (+ (* -1 (/ (+ (* -1 (/ (- (* 1/6 (pow eps 3)) eps) x)) (* -1/4 (pow eps 2))) x)) (* -1/6 (* eps (- (* 1/6 (pow eps 2)) 1)))))","(*.f64 (*.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps)) #s(literal -1/6 binary64) (/.f64 (fma.f64 #s(literal -1/4 binary64) (*.f64 eps eps) (/.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/6 binary64) eps) x)) (neg.f64 x))) x) x)","(* -1 (* (pow x 7) (- (* 1/120 (/ 1 (pow x 2))) 1/5040)))","(*.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/120 binary64) (*.f64 x x)) #s(literal 1/5040 binary64))) (pow.f64 x #s(literal 7 binary64)))","(* -1 (* (pow x 7) (- (* 1/120 (/ 1 (pow x 2))) (+ 1/5040 (/ 1/6 (pow x 4))))))","(*.f64 (neg.f64 (-.f64 (-.f64 (/.f64 #s(literal 1/120 binary64) (*.f64 x x)) #s(literal 1/5040 binary64)) (/.f64 #s(literal 1/6 binary64) (pow.f64 x #s(literal 4 binary64))))) (pow.f64 x #s(literal 7 binary64)))","(* -1 (* (pow x 7) (- (+ (* 1/120 (/ 1 (pow x 2))) (/ 1 (pow x 6))) (+ 1/5040 (/ 1/6 (pow x 4))))))","(*.f64 (neg.f64 (-.f64 (+.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 6 binary64))) (/.f64 #s(literal 1/120 binary64) (*.f64 x x))) (+.f64 (/.f64 #s(literal 1/6 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 1/5040 binary64)))) (pow.f64 x #s(literal 7 binary64)))","(sin (* 1/2 (- eps (* -2 x))))","(sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x))","(* eps (+ (* -1 (sin x)) (* -1/2 (* eps (cos x)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps (neg.f64 (sin.f64 x))) eps)","(* eps (+ (* -1 (sin x)) (* eps (+ (* -2 (* eps (+ (* -1/16 (sin x)) (* -1/48 (sin x))))) (* -1/2 (cos x))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* eps (+ (* -2 (+ (* -1/16 (sin x)) (* -1/48 (sin x)))) (* 1/24 (* eps (cos x)))))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) eps (*.f64 (cos.f64 x) (fma.f64 eps (*.f64 #s(literal 1/24 binary64) eps) #s(literal -1/2 binary64)))) eps (neg.f64 (sin.f64 x))) eps)","(* 1/2 (* eps (sin x)))","(*.f64 (*.f64 #s(literal 1/2 binary64) (sin.f64 x)) eps)","(* eps (+ (* 1/4 (* eps (cos x))) (* 1/2 (sin x))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) (cos.f64 x)) eps (*.f64 #s(literal 1/2 binary64) (sin.f64 x))) eps)","(* eps (+ (* 1/2 (sin x)) (* eps (+ (* 1/4 (cos x)) (* eps (+ (* -1/16 (sin x)) (* -1/48 (sin x))))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/12 binary64) (sin.f64 x)) eps (*.f64 #s(literal 1/4 binary64) (cos.f64 x))) eps (*.f64 #s(literal 1/2 binary64) (sin.f64 x))) eps)","(* eps (+ (* 1/2 (sin x)) (* eps (+ (* 1/4 (cos x)) (* eps (+ (* -1/16 (sin x)) (+ (* -1/48 (sin x)) (* -1/48 (* eps (cos x))))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/12 binary64) (sin.f64 x) (*.f64 #s(literal -1/48 binary64) (*.f64 (cos.f64 x) eps))) eps (*.f64 #s(literal 1/4 binary64) (cos.f64 x))) eps (*.f64 #s(literal 1/2 binary64) (sin.f64 x))) eps)","(* eps (- (* -1/2 (* eps (cos x))) (sin x)))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps (neg.f64 (sin.f64 x))) eps)","(* eps (- (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x))))) (sin x)))","(*.f64 (fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(* eps (- (* eps (+ (* -1/2 (cos x)) (* eps (- (* 1/24 (* eps (cos x))) (* -1/6 (sin x)))))) (sin x)))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) eps (*.f64 (cos.f64 x) (fma.f64 eps (*.f64 #s(literal 1/24 binary64) eps) #s(literal -1/2 binary64)))) eps (neg.f64 (sin.f64 x))) eps)","(* eps (+ (* -1 (sin x)) (* eps (+ (* -1/2 (cos x)) (* 1/6 (* eps (sin x)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (sin.f64 x) eps) #s(literal 1/6 binary64) (*.f64 #s(literal -1/2 binary64) (cos.f64 x))) eps (neg.f64 (sin.f64 x))) eps)","(* eps (* x (- (* 1/6 (pow x 2)) 1)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 x)) eps)","(* eps (+ (* eps (- (* 1/4 (pow x 2)) 1/2)) (* x (- (* 1/6 (pow x 2)) 1))))","(*.f64 (fma.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1/2 binary64)) eps (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 x))) eps)","(* eps (+ (* eps (- (+ (* 1/4 (pow x 2)) (* eps (* x (+ 1/6 (* -1/36 (pow x 2)))))) 1/2)) (* x (- (* 1/6 (pow x 2)) 1))))","(*.f64 (fma.f64 (fma.f64 x (fma.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 x x) #s(literal 1/6 binary64)) eps (*.f64 #s(literal 1/4 binary64) x)) #s(literal -1/2 binary64)) eps (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 x))) eps)","(* eps (- (* 1/6 (pow x 2)) 1))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)","(* eps (- (+ (* 1/6 (pow x 2)) (* 1/4 (* eps x))) 1))","(*.f64 (fma.f64 x (fma.f64 #s(literal 1/4 binary64) eps (*.f64 #s(literal 1/6 binary64) x)) #s(literal -1 binary64)) eps)","(* eps (- (+ (* 1/6 (pow x 2)) (* eps (+ (* 1/4 x) (* eps (+ 1/6 (* -1/36 (pow x 2))))))) 1))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 x x) #s(literal 1/6 binary64)) eps (*.f64 #s(literal 1/4 binary64) x)) eps (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64))) eps)","(- (* (pow x 2) (+ 1/6 (* -1 (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2))))))) 1)","(fma.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/5040 binary64) (*.f64 #s(literal -1/120 binary64) (*.f64 x x))) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64))","(- (+ (* (pow eps 2) (+ 1/6 (* (pow x 2) (- (* 1/6 (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2))))) 1/36)))) (* (pow x 2) (+ 1/6 (* -1 (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))))))) 1)","(fma.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) #s(literal -1/36 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) eps) eps (fma.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/5040 binary64) (*.f64 #s(literal -1/120 binary64) (*.f64 x x))) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)))","(+ 1/6 (* -1 (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2))))))","(+.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/5040 binary64) (*.f64 #s(literal -1/120 binary64) (*.f64 x x))) #s(literal 1/6 binary64))","(+ 1/6 (+ (* -1 (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2))))) (* (pow eps 2) (- (* 1/6 (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2))))) 1/36))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) #s(literal -1/36 binary64)) eps) eps (+.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/5040 binary64) (*.f64 #s(literal -1/120 binary64) (*.f64 x x))) #s(literal 1/6 binary64)))","(+ 1/6 (* -1/36 (pow eps 2)))","(fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64))","(sin x)","(sin.f64 x)","(+ (sin x) (* 1/2 (* eps (cos x))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (cos.f64 x)) eps (sin.f64 x))","(+ (sin x) (* eps (+ (* -1/8 (* eps (sin x))) (* 1/2 (cos x)))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (sin.f64 x)) eps (*.f64 #s(literal 1/2 binary64) (cos.f64 x))) eps (sin.f64 x))","(+ (sin x) (* eps (+ (* 1/2 (cos x)) (* eps (+ (* -1/8 (sin x)) (* -1/48 (* eps (cos x))))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) eps) (sin.f64 x) (*.f64 (cos.f64 x) (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)))) eps (sin.f64 x))","(* eps (+ 1/2 (* -1/48 (pow eps 2))))","(*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(* eps (+ 1/2 (* (pow eps 2) (- (* 1/3840 (pow eps 2)) 1/48))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3840 binary64) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(* eps (+ 1/2 (* (pow eps 2) (- (* (pow eps 2) (+ 1/3840 (* -1/645120 (pow eps 2)))) 1/48))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/645120 binary64) (*.f64 eps eps) #s(literal 1/3840 binary64)) (*.f64 eps eps) #s(literal -1/48 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) eps)","(+ (* -1 (sin x)) (* 1/6 (* (pow eps 2) (sin x))))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (sin.f64 x))","(* eps (+ 1/2 (/ x eps)))","(*.f64 (+.f64 (/.f64 x eps) #s(literal 1/2 binary64)) eps)","(* 1/6 (* (pow eps 3) (sin x)))","(*.f64 (*.f64 #s(literal 1/6 binary64) (sin.f64 x)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x))))","(*.f64 (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (*.f64 #s(literal 1/6 binary64) (sin.f64 x))) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ (* -1 (/ (sin x) (pow eps 2))) (+ (* -1/2 (/ (cos x) eps)) (* 1/6 (sin x)))))","(*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (/.f64 (fma.f64 #s(literal -1/2 binary64) (cos.f64 x) (/.f64 (neg.f64 (sin.f64 x)) eps)) eps)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (* x (+ 1/6 (* -1/36 (pow x 2)))))","(*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) x) (fma.f64 #s(literal -1/36 binary64) (*.f64 x x) #s(literal 1/6 binary64)))","(* (pow eps 3) (- (+ (* 1/4 (/ (pow x 2) eps)) (* x (+ 1/6 (* -1/36 (pow x 2))))) (* 1/2 (/ 1 eps))))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 x x) #s(literal 1/6 binary64)) x (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1/2 binary64)) eps)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (- (+ (* 1/4 (/ (pow x 2) eps)) (+ (* x (+ 1/6 (* -1/36 (pow x 2)))) (/ (* x (- (* 1/6 (pow x 2)) 1)) (pow eps 2)))) (* 1/2 (/ 1 eps))))","(*.f64 (fma.f64 x (+.f64 (/.f64 (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps) eps) (fma.f64 #s(literal -1/36 binary64) (*.f64 x x) #s(literal 1/6 binary64))) (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1/2 binary64)) eps)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ 1/6 (* -1/36 (pow x 2))))","(*.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ 1/6 (+ (* -1/36 (pow x 2)) (* 1/4 (/ x eps)))))","(*.f64 (fma.f64 x (fma.f64 x #s(literal -1/36 binary64) (/.f64 #s(literal 1/4 binary64) eps)) #s(literal 1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (- (+ 1/6 (+ (* -1/36 (pow x 2)) (+ (* 1/6 (/ (pow x 2) (pow eps 2))) (* 1/4 (/ x eps))))) (/ 1 (pow eps 2))))","(*.f64 (-.f64 (fma.f64 (*.f64 x x) (-.f64 (/.f64 #s(literal 1/6 binary64) (*.f64 eps eps)) #s(literal 1/36 binary64)) (fma.f64 (/.f64 x eps) #s(literal 1/4 binary64) #s(literal 1/6 binary64))) (/.f64 (/.f64 #s(literal 1 binary64) eps) eps)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 2) (+ 1/6 (* (pow x 2) (- (* 1/6 (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2))))) 1/36))))","(*.f64 (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) #s(literal -1/36 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) eps) eps)","(* (pow eps 2) (- (+ 1/6 (+ (* (pow x 2) (- (* 1/6 (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2))))) 1/36)) (/ (* (pow x 2) (+ 1/6 (* -1 (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2))))))) (pow eps 2)))) (/ 1 (pow eps 2))))","(*.f64 (fma.f64 (*.f64 x x) (+.f64 (/.f64 (/.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/5040 binary64) (*.f64 #s(literal -1/120 binary64) (*.f64 x x))) #s(literal 1/6 binary64)) eps) eps) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) #s(literal -1/36 binary64))) (-.f64 #s(literal 1/6 binary64) (/.f64 (/.f64 #s(literal 1 binary64) eps) eps))) (*.f64 eps eps))","(* (pow eps 2) (- (* 1/6 (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2))))) 1/36))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 (*.f64 x x) #s(literal 1/6 binary64)) #s(literal -1/36 binary64)) eps) eps)","(* (pow eps 2) (- (+ (* -1 (/ (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2)))) (pow eps 2))) (+ (* 1/6 (* (pow x 2) (+ 1/120 (* -1/5040 (pow x 2))))) (* 1/6 (/ 1 (pow eps 2))))) 1/36))","(*.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) x) x) (+.f64 (/.f64 #s(literal -1 binary64) (*.f64 eps eps)) #s(literal 1/6 binary64)) (-.f64 (/.f64 #s(literal 1/6 binary64) (*.f64 eps eps)) #s(literal 1/36 binary64))) (*.f64 eps eps))","(* -1/36 (pow eps 2))","(*.f64 #s(literal -1/36 binary64) (*.f64 eps eps))","(* (pow eps 2) (- (* 1/6 (/ 1 (pow eps 2))) 1/36))","(*.f64 (*.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) (*.f64 eps eps)) #s(literal 1/36 binary64)) eps) eps)","(* 1/6 (* (pow eps 2) (sin x)))","(*.f64 (*.f64 (*.f64 (sin.f64 x) eps) eps) #s(literal 1/6 binary64))","(* (pow eps 2) (+ (* -1 (/ (sin x) (pow eps 2))) (* 1/6 (sin x))))","(*.f64 (*.f64 (sin.f64 x) (+.f64 (/.f64 #s(literal -1 binary64) (*.f64 eps eps)) #s(literal 1/6 binary64))) (*.f64 eps eps))","(* -1 (* eps (- (* -1 (/ x eps)) 1/2)))","(*.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 x eps)) (neg.f64 eps))","(* -2 (* (sin (* 1/2 eps)) (sin (* 1/2 (- (* 2 x) (* -1 eps))))))","(*.f64 (*.f64 #s(literal -2 binary64) (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x))) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(* (sin (* 1/2 eps)) (sin (* 1/2 (- (* 2 x) (* -1 eps)))))","(*.f64 (sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x)) (sin.f64 (*.f64 #s(literal 1/2 binary64) eps)))","(- (cos (- x (* -1 eps))) (cos x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(* -1 (* (pow eps 3) (+ (* -1/6 (sin x)) (* 1/2 (/ (cos x) eps)))))","(*.f64 (fma.f64 (/.f64 (cos.f64 x) eps) #s(literal -1/2 binary64) (*.f64 #s(literal 1/6 binary64) (sin.f64 x))) (pow.f64 eps #s(literal 3 binary64)))","(* -1 (* (pow eps 3) (+ (* -1 (/ (+ (* -1 (/ (sin x) eps)) (* -1/2 (cos x))) eps)) (* -1/6 (sin x)))))","(*.f64 (fma.f64 #s(literal 1/6 binary64) (sin.f64 x) (/.f64 (fma.f64 #s(literal -1/2 binary64) (cos.f64 x) (/.f64 (neg.f64 (sin.f64 x)) eps)) eps)) (pow.f64 eps #s(literal 3 binary64)))","(* -1 (* (pow eps 3) (* x (- (* 1/36 (pow x 2)) 1/6))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 (pow.f64 eps #s(literal 3 binary64)) x))","(* -1 (* (pow eps 3) (+ (* -1 (/ (- (* 1/4 (pow x 2)) 1/2) eps)) (* x (- (* 1/36 (pow x 2)) 1/6)))))","(*.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/6 binary64)) x (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1/2 binary64)) (neg.f64 eps)))) (pow.f64 eps #s(literal 3 binary64)))","(* -1 (* (pow eps 3) (+ (* -1 (/ (- (+ (* -1 (/ (* x (+ 1 (* -1/6 (pow x 2)))) eps)) (* 1/4 (pow x 2))) 1/2) eps)) (* x (- (* 1/36 (pow x 2)) 1/6)))))","(*.f64 (neg.f64 (pow.f64 eps #s(literal 3 binary64))) (fma.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/6 binary64)) x (/.f64 (-.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/6 binary64) x) eps) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1/2 binary64))) eps)))","(* -1 (* (pow eps 3) (- (* 1/36 (pow x 2)) 1/6)))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/6 binary64))) (pow.f64 eps #s(literal 3 binary64)))","(* -1 (* (pow eps 3) (- (+ (* -1/4 (/ x eps)) (* 1/36 (pow x 2))) 1/6)))","(*.f64 (neg.f64 (fma.f64 (/.f64 x eps) #s(literal -1/4 binary64) (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/6 binary64)))) (pow.f64 eps #s(literal 3 binary64)))","(* -1 (* (pow eps 3) (- (+ (* -1 (/ (+ (* -1 (/ (+ 1 (* -1/6 (pow x 2))) eps)) (* 1/4 x)) eps)) (* 1/36 (pow x 2))) 1/6)))","(*.f64 (neg.f64 (-.f64 (fma.f64 #s(literal 1/36 binary64) (*.f64 x x) #s(literal -1/6 binary64)) (/.f64 (fma.f64 #s(literal 1/4 binary64) x (/.f64 (fma.f64 (*.f64 x x) #s(literal -1/6 binary64) #s(literal 1 binary64)) (neg.f64 eps))) eps))) (pow.f64 eps #s(literal 3 binary64)))","(sin (* 1/2 (- (* 2 x) (* -1 eps))))","(sin.f64 (fma.f64 #s(literal 1/2 binary64) eps x))"]],"stop":[["iter limit",1],["node limit",1]],"time":465.416015625,"type":"simplify"},{"count":[[26,342]],"egraph":[[0,8677,592,0.127314422],[2,4500,616,0.066037027],[1,524,616,0.01814123],[0,131,651,0.003940008],[0,85,666,0.001326425]],"inputs":[["(*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))","(+.f64 #s(literal 0 binary64) eps)","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))) #s(literal -2 binary64))","(*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","(*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps)","#s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))))","(fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))","#s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","(*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps)","#s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))","(fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))","(fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))))","(*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))) eps))","(sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps)))","(sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))","(fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64))","#s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))","(*.f64 (fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))) eps)","(*.f64 eps (cos.f64 x))"]],"memory":[[-3896624,57046736]],"outputs":[["(*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64))","(*.f64 #s(literal 1/2 binary64) (fma.f64 x #s(literal 2 binary64) eps))","(/.f64 (*.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps eps)) #s(literal 1/2 binary64)) (fma.f64 x #s(literal 2 binary64) eps))","(/.f64 (*.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64))) #s(literal 1/2 binary64)) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 x #s(literal 2 binary64))))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps eps))) (fma.f64 x #s(literal 2 binary64) eps))","(/.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (*.f64 eps (-.f64 eps (*.f64 x #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (pow.f64 (*.f64 eps #s(literal 1/2 binary64)) #s(literal 2 binary64))) (-.f64 (*.f64 #s(literal 1 binary64) x) (*.f64 eps #s(literal 1/2 binary64))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64) (*.f64 #s(literal 1/8 binary64) (pow.f64 eps #s(literal 3 binary64)))) (+.f64 (pow.f64 (*.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 eps #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 1 binary64) x) (*.f64 eps #s(literal 1/2 binary64))))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64) (*.f64 eps #s(literal 1/2 binary64)))","(fma.f64 #s(literal 1 binary64) x (*.f64 eps #s(literal 1/2 binary64)))","(fma.f64 (*.f64 x #s(literal 2 binary64)) #s(literal 1/2 binary64) (*.f64 eps #s(literal 1/2 binary64)))","(fma.f64 eps #s(literal 1/2 binary64) (*.f64 #s(literal 1 binary64) x))","(fma.f64 x #s(literal 1 binary64) (*.f64 eps #s(literal 1/2 binary64)))","(fma.f64 #s(literal 2 binary64) (*.f64 x #s(literal 1/2 binary64)) (*.f64 eps #s(literal 1/2 binary64)))","(fma.f64 #s(literal 1/2 binary64) (*.f64 x #s(literal 2 binary64)) (*.f64 eps #s(literal 1/2 binary64)))","(fma.f64 #s(literal 1/2 binary64) eps (*.f64 #s(literal 1 binary64) x))","(+.f64 (fma.f64 #s(literal 1 binary64) x #s(literal 0 binary64)) (*.f64 eps #s(literal 1/2 binary64)))","(+.f64 (*.f64 #s(literal 1 binary64) x) (*.f64 eps #s(literal 1/2 binary64)))","(+.f64 (*.f64 eps #s(literal 1/2 binary64)) (*.f64 #s(literal 1 binary64) x))","(*.f64 (pow.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 eps eps) (pow.f64 (pow.f64 eps #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 eps eps) (pow.f64 eps #s(literal -1 binary64)))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 eps #s(literal -2 binary64)))","(*.f64 #s(literal -1 binary64) eps)","(*.f64 eps #s(literal -1 binary64))","(pow.f64 (pow.f64 eps #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 eps (*.f64 eps eps)) #s(literal -1 binary64))","(pow.f64 eps #s(literal 1 binary64))","(/.f64 (/.f64 (*.f64 eps eps) #s(literal -1 binary64)) eps)","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(/.f64 #s(literal 1 binary64) (pow.f64 eps #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 eps (*.f64 eps eps)))","(/.f64 (*.f64 eps eps) eps)","(/.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 eps eps))","(neg.f64 eps)","(fma.f64 (pow.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 eps #s(literal -2 binary64)) #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 eps eps) (pow.f64 (pow.f64 eps #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 eps eps) (pow.f64 eps #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 eps #s(literal -2 binary64)) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) eps #s(literal 0 binary64))","(fma.f64 eps #s(literal -1 binary64) #s(literal 0 binary64))","(-.f64 (/.f64 #s(literal 0 binary64) eps) eps)","(-.f64 #s(literal 0 binary64) eps)","(-.f64 eps #s(literal 0 binary64))","(exp.f64 (*.f64 (log.f64 eps) #s(literal 1 binary64)))","(exp.f64 (log.f64 eps))","(+.f64 #s(literal 0 binary64) eps)","(+.f64 eps #s(literal 0 binary64))","eps","(*.f64 (*.f64 #s(literal -2 binary64) (sin.f64 (*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64)))) (sin.f64 (*.f64 eps #s(literal 1/2 binary64))))","(*.f64 (*.f64 #s(literal -2 binary64) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))) (sin.f64 (*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64))))","(*.f64 #s(literal -2 binary64) (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 (*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64)))))","(*.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 (*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64)))) #s(literal -2 binary64))","(*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (*.f64 (sin.f64 (*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64))) #s(literal -2 binary64)))","(*.f64 (sin.f64 (*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64))) (*.f64 #s(literal -2 binary64) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))))","(/.f64 (*.f64 (-.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 x #s(literal 2 binary64) eps) eps))) (cos.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 x #s(literal 2 binary64) eps) eps)))) #s(literal -2 binary64)) #s(literal 2 binary64))","(/.f64 (*.f64 #s(literal -2 binary64) (-.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 x #s(literal 2 binary64) eps) eps))) (cos.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 x #s(literal 2 binary64) eps) eps))))) #s(literal 2 binary64))","(*.f64 (-.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 x #s(literal 2 binary64) eps) eps))) (cos.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 x #s(literal 2 binary64) eps) eps)))) #s(literal 1/2 binary64))","(*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 (*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64))))","(*.f64 (sin.f64 (*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64))) (sin.f64 (*.f64 eps #s(literal 1/2 binary64))))","(pow.f64 (/.f64 #s(literal 2 binary64) (-.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 x #s(literal 2 binary64) eps) eps))) (cos.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 x #s(literal 2 binary64) eps) eps))))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 x #s(literal 2 binary64) eps) eps))) (cos.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 x #s(literal 2 binary64) eps) eps))))) #s(literal -2 binary64))","(/.f64 (-.f64 (cos.f64 (-.f64 (*.f64 eps #s(literal 1/2 binary64)) (*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64)))) (cos.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 x #s(literal 2 binary64) eps) eps)))) #s(literal 2 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (-.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 x #s(literal 2 binary64) eps) eps))) (cos.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 x #s(literal 2 binary64) eps) eps))))))","(/.f64 (-.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 x #s(literal 2 binary64) eps) eps))) (cos.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 x #s(literal 2 binary64) eps) eps)))) #s(literal 2 binary64))","(-.f64 (/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 x #s(literal 2 binary64) eps) eps))) #s(literal 2 binary64)) (/.f64 (cos.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 x #s(literal 2 binary64) eps) eps))) #s(literal 2 binary64)))","(*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) x)","(*.f64 x (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/36 binary64) #s(literal -1 binary64)) x) (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal 1 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/216 binary64) #s(literal -1 binary64)) x) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) #s(literal -1/6 binary64)))))","(/.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/36 binary64) #s(literal -1 binary64))) (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal 1 binary64)))","(/.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/216 binary64) #s(literal -1 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) #s(literal -1/6 binary64)))))","(fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 x x)) x (*.f64 #s(literal -1 binary64) x))","(fma.f64 #s(literal -1 binary64) x (*.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 x x)) x))","(fma.f64 x (*.f64 #s(literal 1/6 binary64) (*.f64 x x)) (*.f64 x #s(literal -1 binary64)))","(fma.f64 x #s(literal -1 binary64) (*.f64 x (*.f64 #s(literal 1/6 binary64) (*.f64 x x))))","(+.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 x x)) x) (*.f64 #s(literal -1 binary64) x))","(+.f64 (*.f64 #s(literal -1 binary64) x) (*.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 x x)) x))","(+.f64 (*.f64 x (*.f64 #s(literal 1/6 binary64) (*.f64 x x))) (*.f64 x #s(literal -1 binary64)))","(+.f64 (*.f64 x #s(literal -1 binary64)) (*.f64 x (*.f64 #s(literal 1/6 binary64) (*.f64 x x))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","(*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) x)) eps)","(*.f64 eps #s(approx (neg (sin x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) x)))","(/.f64 (*.f64 (*.f64 eps eps) #s(approx (neg (sin x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) x))) eps)","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(approx (neg (sin x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) x))) (*.f64 eps eps))","(/.f64 (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) x)) (*.f64 eps eps)) eps)","(/.f64 (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) x)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(fma.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) x)) #s(literal 0 binary64) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","(fma.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) x)) eps (*.f64 #s(literal 0 binary64) #s(approx (neg (sin x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) x))))","(fma.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) x)) eps (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) x)) #s(literal 0 binary64)))","(fma.f64 #s(literal 0 binary64) #s(approx (neg (sin x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","(fma.f64 eps #s(approx (neg (sin x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) x)) (*.f64 #s(literal 0 binary64) #s(approx (neg (sin x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) x))))","(fma.f64 eps #s(approx (neg (sin x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) x)) #s(literal 0 binary64)))","(+.f64 (*.f64 #s(literal 0 binary64) #s(approx (neg (sin x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) x))) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","(+.f64 (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) x)) #s(literal 0 binary64)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","(+.f64 (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) x)) eps) (*.f64 #s(literal 0 binary64) #s(approx (neg (sin x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) x))))","(+.f64 (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) x)) eps) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) x)) #s(literal 0 binary64)))","#s(approx (neg (sin x)) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) x))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x (*.f64 #s(literal 1/2 binary64) (*.f64 eps eps)))))","#s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x (*.f64 #s(literal 1/2 binary64) (*.f64 eps eps))))","(*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x) #s(literal 2 binary64)) (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64))) (pow.f64 (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x (*.f64 #s(literal 1/2 binary64) (*.f64 eps eps))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (*.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) (-.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x)) (pow.f64 (*.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x (*.f64 #s(literal 1/2 binary64) (*.f64 eps eps))) (-.f64 (pow.f64 (*.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x) #s(literal 2 binary64)) (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) (-.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x)) (pow.f64 (*.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x) #s(literal 2 binary64))) (fma.f64 #s(literal -1/8 binary64) (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (*.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (pow.f64 (*.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x)))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x) #s(literal 3 binary64)) (*.f64 #s(literal -1/8 binary64) (pow.f64 eps #s(literal 6 binary64)))) (+.f64 (pow.f64 (*.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x) #s(literal 2 binary64)) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64) (*.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) (*.f64 x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x) #s(literal 2 binary64)) (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)))) (neg.f64 (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x (*.f64 #s(literal 1/2 binary64) (*.f64 eps eps)))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (*.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) (-.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x)) (pow.f64 (*.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x) #s(literal 2 binary64)) (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64))) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x (*.f64 #s(literal 1/2 binary64) (*.f64 eps eps))))","(/.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (*.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x) #s(literal 3 binary64))) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x) #s(literal 2 binary64)) (*.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) (*.f64 x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))))","(/.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (*.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) (-.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x)) (pow.f64 (*.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x (*.f64 #s(literal 1/2 binary64) (*.f64 eps eps))) (-.f64 (pow.f64 (*.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x) #s(literal 2 binary64)) (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) (-.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x)) (pow.f64 (*.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x) #s(literal 2 binary64))) (fma.f64 #s(literal -1/8 binary64) (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (*.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x) #s(literal 3 binary64)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps (*.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x))","(fma.f64 (*.f64 eps eps) #s(literal -1/2 binary64) (*.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x))","(fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x (*.f64 #s(literal 1/2 binary64) (*.f64 eps eps)))","(fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x (neg.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))))","(fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))","(fma.f64 #s(literal -1/2 binary64) (*.f64 eps eps) (*.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x))","(fma.f64 eps (*.f64 #s(literal -1/2 binary64) eps) (*.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x))","(fma.f64 x #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) (*.f64 #s(literal 1/2 binary64) (*.f64 eps eps)))","(fma.f64 x #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) (neg.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))))","(fma.f64 x #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x) #s(literal 2 binary64)) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x (*.f64 #s(literal 1/2 binary64) (*.f64 eps eps)))) (/.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x (*.f64 #s(literal 1/2 binary64) (*.f64 eps eps)))))","(-.f64 (*.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))","(+.f64 (*.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x) (*.f64 #s(literal 1/2 binary64) (*.f64 eps eps)))","(+.f64 (*.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x) (neg.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64))))","(+.f64 (*.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x) (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))","(+.f64 (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)) (*.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps)) x))","#s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 x x) #s(literal -1 binary64)) eps))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)","(*.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64)) x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)) x) (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) x) (*.f64 x #s(literal -1 binary64)))))","(/.f64 (*.f64 x (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal 1 binary64)))","(/.f64 (*.f64 x (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64))) (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) x) (*.f64 x #s(literal -1 binary64)))))","(fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) x) x) x (*.f64 #s(literal -1 binary64) x))","(fma.f64 #s(literal -1 binary64) x (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) x) x) x))","(fma.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) x) x) (*.f64 x #s(literal -1 binary64)))","(fma.f64 x #s(literal -1 binary64) (*.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) x) x)))","(+.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) x) x) x) (*.f64 #s(literal -1 binary64) x))","(+.f64 (*.f64 #s(literal -1 binary64) x) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) x) x) x))","(+.f64 (*.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) x) x)) (*.f64 x #s(literal -1 binary64)))","(+.f64 (*.f64 x #s(literal -1 binary64)) (*.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) x) x)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","(*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps)","(*.f64 eps #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)))","(/.f64 (*.f64 (*.f64 eps eps) #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))) eps)","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))) (*.f64 eps eps))","(/.f64 (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) (*.f64 eps eps)) eps)","(/.f64 (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(fma.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) #s(literal 0 binary64) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","(fma.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps (*.f64 #s(literal 0 binary64) #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))))","(fma.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) #s(literal 0 binary64)))","(fma.f64 #s(literal 0 binary64) #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","(fma.f64 eps #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) (*.f64 #s(literal 0 binary64) #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))))","(fma.f64 eps #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) #s(literal 0 binary64)))","(+.f64 (*.f64 #s(literal 0 binary64) #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","(+.f64 (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) #s(literal 0 binary64)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","(+.f64 (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps) (*.f64 #s(literal 0 binary64) #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))))","(+.f64 (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) #s(literal 0 binary64)))","#s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))","(*.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (neg.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) #s(literal 2 binary64)))) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (-.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x))) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (neg.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) #s(literal 2 binary64))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (-.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x))) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x))) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x))) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x)) #s(literal 2 binary64))) (-.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x))))","(/.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x))) #s(literal 3 binary64)) #s(literal -1 binary64)) (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x))) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (neg.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) #s(literal 2 binary64))))) (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (-.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x))) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x)) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (neg.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) #s(literal 2 binary64)))) (-.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (-.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x))) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (neg.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (-.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x))) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) #s(literal 3 binary64)))))","(fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps (+.f64 #s(literal -1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x))))","(fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) x) x (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)))","(fma.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/36 binary64) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x)))","(fma.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/216 binary64) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)))) #s(literal -1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x)))","(fma.f64 (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) #s(literal -1 binary64) (+.f64 #s(literal -1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x))))","(fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)))","(fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) (+.f64 #s(literal -1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x))))","(fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) (+.f64 #s(literal -1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x))))","(fma.f64 #s(literal -1 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) (+.f64 #s(literal -1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x))))","(fma.f64 #s(literal 1/6 binary64) (*.f64 (*.f64 eps eps) #s(literal -1 binary64)) (+.f64 #s(literal -1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x))))","(fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) (+.f64 #s(literal -1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x))))","(fma.f64 (*.f64 x x) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)))","(fma.f64 eps (*.f64 (*.f64 #s(literal 1/6 binary64) eps) #s(literal -1 binary64)) (+.f64 #s(literal -1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x))))","(fma.f64 eps (*.f64 #s(literal 1/6 binary64) eps) (+.f64 #s(literal -1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x))))","(fma.f64 x (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)))) (/.f64 (pow.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)))))","(+.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) #s(literal -1 binary64)) (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)))","(+.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x))) #s(literal -1 binary64))","(+.f64 (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)))","(+.f64 (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) (+.f64 #s(literal -1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x))))","(+.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x)))","(+.f64 #s(literal -1 binary64) (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) eps (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x))))","(*.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (neg.f64 (pow.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) #s(literal 2 binary64)))) (pow.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) x) x) #s(literal -1/6 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) (-.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) (*.f64 x x))) (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) (*.f64 x x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (+.f64 #s(literal -1/6 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) x) x)))","(pow.f64 (/.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) x) x) #s(literal -1/6 binary64))) (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (neg.f64 (pow.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) #s(literal 2 binary64))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) (-.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) (*.f64 x x))) (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) (*.f64 x x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) (*.f64 x x)) #s(literal 2 binary64))) (-.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) (*.f64 x x))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (neg.f64 (pow.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) #s(literal 2 binary64))))) (neg.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) x) x) #s(literal -1/6 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) (-.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) (*.f64 x x))) (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) (*.f64 x x)) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (neg.f64 (pow.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) #s(literal 2 binary64)))) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) x) x) #s(literal -1/6 binary64))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) (*.f64 x x)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) (*.f64 x x)) (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64))))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) #s(literal 3 binary64))) (fma.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) (-.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) (*.f64 x x))) (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) (*.f64 x x)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) x) x) #s(literal -1/6 binary64))) (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (neg.f64 (pow.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) (-.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) (*.f64 x x))) (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) (*.f64 x x)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) #s(literal 3 binary64)))))","(fma.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)))","(fma.f64 (*.f64 #s(literal -1/6 binary64) (*.f64 #s(literal 1/6 binary64) eps)) eps (+.f64 #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) (*.f64 x x))))","(fma.f64 (*.f64 #s(literal -1/6 binary64) (*.f64 eps eps)) #s(literal 1/6 binary64) (+.f64 #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) (*.f64 x x))))","(fma.f64 (*.f64 #s(literal -1/6 binary64) eps) (*.f64 #s(literal 1/6 binary64) eps) (+.f64 #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) (*.f64 x x))))","(fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) (+.f64 #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) (*.f64 x x))))","(fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) x) x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)))","(fma.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) x)) x (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)))","(fma.f64 (*.f64 #s(literal 1/6 binary64) eps) (*.f64 eps #s(literal -1/6 binary64)) (+.f64 #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) (*.f64 x x))))","(fma.f64 (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) #s(literal -1/6 binary64) (+.f64 #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) (*.f64 x x))))","(fma.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) (*.f64 x x) (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)))","(fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (*.f64 x x)) (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)))","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) x) x) (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)))","(fma.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) #s(literal -1/6 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) (*.f64 x x)))","(fma.f64 (*.f64 eps eps) #s(literal -1/36 binary64) (+.f64 #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) (*.f64 x x))))","(fma.f64 #s(literal -1/6 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) (+.f64 #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) (*.f64 x x))))","(fma.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) (*.f64 x x)))","(fma.f64 #s(literal 1/6 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) (+.f64 #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) (*.f64 x x))))","(fma.f64 (*.f64 x x) (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)))","(fma.f64 eps (*.f64 (*.f64 #s(literal 1/6 binary64) eps) #s(literal -1/6 binary64)) (+.f64 #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) (*.f64 x x))))","(fma.f64 x (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) x)) (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) (*.f64 x x)) #s(literal 2 binary64)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) x) x) #s(literal -1/6 binary64)))) (/.f64 (pow.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) #s(literal 2 binary64)) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) x) x) #s(literal -1/6 binary64)))))","(+.f64 (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) x) x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (*.f64 #s(literal -1/36 binary64) (*.f64 eps eps))) #s(literal 1/6 binary64))","(+.f64 (*.f64 #s(literal -1/36 binary64) (*.f64 eps eps)) (+.f64 #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) (*.f64 x x))))","(+.f64 (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) (*.f64 x x)) (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)))","(+.f64 (fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) (*.f64 x x)))","(*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) #s(literal -1/6 binary64))","(*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/36 binary64) #s(literal -1 binary64)) #s(literal -1/6 binary64)) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/216 binary64) #s(literal -1 binary64)) #s(literal -1/6 binary64)) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)))))","(/.f64 (*.f64 #s(literal -1/6 binary64) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/36 binary64) #s(literal -1 binary64))) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal -1/6 binary64) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/216 binary64) #s(literal -1 binary64))) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/36 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal -1/36 binary64) (*.f64 eps eps)) #s(literal 2 binary64)) #s(literal 1/36 binary64)) (-.f64 (*.f64 #s(literal -1/36 binary64) (*.f64 eps eps)) #s(literal 1/6 binary64)))","(/.f64 (fma.f64 #s(literal -1/46656 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal 1/216 binary64)) (+.f64 (pow.f64 (*.f64 #s(literal -1/36 binary64) (*.f64 eps eps)) #s(literal 2 binary64)) (-.f64 #s(literal 1/36 binary64) (*.f64 (*.f64 #s(literal -1/36 binary64) (*.f64 eps eps)) #s(literal 1/6 binary64)))))","(fma.f64 (*.f64 #s(literal -1/6 binary64) (*.f64 #s(literal 1/6 binary64) eps)) eps #s(literal 1/6 binary64))","(fma.f64 (*.f64 #s(literal -1/6 binary64) (*.f64 eps eps)) #s(literal 1/6 binary64) #s(literal 1/6 binary64))","(fma.f64 (*.f64 #s(literal -1/6 binary64) eps) (*.f64 #s(literal 1/6 binary64) eps) #s(literal 1/6 binary64))","(fma.f64 #s(literal -1/36 binary64) (*.f64 eps eps) #s(literal 1/6 binary64))","(fma.f64 (*.f64 #s(literal 1/6 binary64) eps) (*.f64 eps #s(literal -1/6 binary64)) #s(literal 1/6 binary64))","(fma.f64 (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) #s(literal -1/6 binary64) #s(literal 1/6 binary64))","(fma.f64 (*.f64 eps eps) #s(literal -1/36 binary64) #s(literal 1/6 binary64))","(fma.f64 #s(literal -1/6 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) #s(literal 1/6 binary64))","(fma.f64 #s(literal 1/6 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/6 binary64)) #s(literal 1/6 binary64))","(fma.f64 eps (*.f64 (*.f64 #s(literal 1/6 binary64) eps) #s(literal -1/6 binary64)) #s(literal 1/6 binary64))","(+.f64 (*.f64 #s(literal -1/36 binary64) (*.f64 eps eps)) #s(literal 1/6 binary64))","(+.f64 #s(literal 1/6 binary64) (*.f64 #s(literal -1/36 binary64) (*.f64 eps eps)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x))) eps))","(fma.f64 (sin.f64 (fma.f64 #s(literal 1 binary64) x #s(literal 0 binary64))) (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (*.f64 (cos.f64 (fma.f64 #s(literal 1 binary64) x #s(literal 0 binary64))) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))))","(fma.f64 (sin.f64 (*.f64 #s(literal 1 binary64) x)) (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (*.f64 (cos.f64 (*.f64 #s(literal 1 binary64) x)) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))))","(fma.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (cos.f64 (*.f64 #s(literal 1 binary64) x)) (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 (*.f64 #s(literal 1 binary64) x))))","(sin.f64 (*.f64 (fma.f64 x #s(literal 2 binary64) eps) #s(literal 1/2 binary64)))","(+.f64 (*.f64 (sin.f64 (fma.f64 #s(literal 1 binary64) x #s(literal 0 binary64))) (cos.f64 (*.f64 eps #s(literal 1/2 binary64)))) (*.f64 (cos.f64 (fma.f64 #s(literal 1 binary64) x #s(literal 0 binary64))) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))))","(+.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) (cos.f64 (*.f64 #s(literal 1 binary64) x))) (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (sin.f64 (*.f64 #s(literal 1 binary64) x))))","(+.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1 binary64) x)) (cos.f64 (*.f64 eps #s(literal 1/2 binary64)))) (*.f64 (cos.f64 (*.f64 #s(literal 1 binary64) x)) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))))","(fma.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) #s(literal 1 binary64) (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) #s(literal 0 binary64)))","(fma.f64 #s(literal 0 binary64) (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))))","(sin.f64 (*.f64 eps #s(literal 1/2 binary64)))","(+.f64 (*.f64 (sin.f64 (*.f64 eps #s(literal 1/2 binary64))) #s(literal 1 binary64)) (*.f64 (cos.f64 (*.f64 eps #s(literal 1/2 binary64))) #s(literal 0 binary64)))","(+.f64 (*.f64 #s(literal 0 binary64) (cos.f64 (*.f64 eps #s(literal 1/2 binary64)))) (*.f64 #s(literal 1 binary64) (sin.f64 (*.f64 eps #s(literal 1/2 binary64)))))","(*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/36 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/216 binary64)) (pow.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/36 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) x) (*.f64 #s(literal 1/6 binary64) x))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/36 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/36 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) x) (*.f64 #s(literal 1/6 binary64) x))) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/216 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 1/36 binary64) (*.f64 (pow.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)))) (-.f64 #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) x) x)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/36 binary64))) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/216 binary64))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/36 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) x) (*.f64 #s(literal 1/6 binary64) x)))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/36 binary64)) (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)))","(/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/216 binary64)) (+.f64 #s(literal 1/36 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) x) (*.f64 #s(literal 1/6 binary64) x)))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/216 binary64)) (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/36 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) x) (*.f64 #s(literal 1/6 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64)) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/36 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) #s(literal 1/36 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) x) (*.f64 #s(literal 1/6 binary64) x))) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)) #s(literal 1/216 binary64))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) x) x #s(literal 1/6 binary64))","(fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64))","(fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) #s(literal 1/6 binary64))","(fma.f64 x (*.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) x) #s(literal 1/6 binary64))","(-.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))))","(+.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) x) x) #s(literal 1/6 binary64))","(+.f64 #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) x) x))","#s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x))","(*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x))) eps)","(*.f64 eps (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x))))","(/.f64 (*.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x)) #s(literal 2 binary64))) eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x)) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x)) #s(literal 3 binary64))) eps) (fma.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x)) (-.f64 #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x))))))","(/.f64 (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x)))) eps)","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x)))) (*.f64 eps eps))","(/.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x))) (*.f64 eps eps)) eps)","(/.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x))) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(/.f64 (*.f64 eps (-.f64 (*.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x)) #s(literal 2 binary64)))) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x)) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x))))","(/.f64 (*.f64 eps (fma.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x)) #s(literal 3 binary64)))) (fma.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x)) (-.f64 #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x))))))","(/.f64 (*.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x)) #s(literal 2 binary64))) (*.f64 eps eps)) (*.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x)) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x))) eps))","(/.f64 (*.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x)) #s(literal 2 binary64))) (pow.f64 eps #s(literal 3 binary64))) (*.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x)) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x))) (*.f64 eps eps)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x)) #s(literal 3 binary64))) (*.f64 eps eps)) (*.f64 (fma.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x)) (-.f64 #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x))))) eps))","(/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x)) #s(literal 3 binary64))) (pow.f64 eps #s(literal 3 binary64))) (*.f64 (fma.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x)) (-.f64 #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x))))) (*.f64 eps eps)))","(/.f64 (*.f64 (*.f64 eps eps) (-.f64 (*.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x)) #s(literal 2 binary64)))) (*.f64 eps (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x)) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x)))))","(/.f64 (*.f64 (*.f64 eps eps) (fma.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x)) #s(literal 3 binary64)))) (*.f64 eps (fma.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x)) (-.f64 #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x)))))))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (*.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x)) #s(literal 2 binary64)))) (*.f64 (*.f64 eps eps) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x)) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x)))))","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x)) #s(literal 3 binary64)))) (*.f64 (*.f64 eps eps) (fma.f64 (pow.f64 (*.f64 (cos.f64 x) eps) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x)) (-.f64 #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x)))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x))) #s(literal 0 binary64) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x))) eps))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x))) eps (*.f64 #s(literal 0 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x)))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x))) eps (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x))) #s(literal 0 binary64)))","(fma.f64 #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x)) eps (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x)) eps))","(fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x)) eps (*.f64 #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x)) eps))","(fma.f64 #s(literal 0 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x))) eps))","(fma.f64 eps (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x))) (*.f64 #s(literal 0 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x)))))","(fma.f64 eps (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x))) #s(literal 0 binary64)))","(fma.f64 eps #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x)) (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x))))","(fma.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x)) (*.f64 eps #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x))))","(+.f64 (*.f64 #s(literal 0 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x)))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x))) eps))","(+.f64 (*.f64 #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x)) eps) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x)) eps))","(+.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x)) eps) (*.f64 #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x)) eps))","(+.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x))) #s(literal 0 binary64)) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x))) eps))","(+.f64 (*.f64 eps #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x))) (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x))))","(+.f64 (*.f64 eps (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x))) (*.f64 eps #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x))))","(+.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x))) eps) (*.f64 #s(literal 0 binary64) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x)))))","(+.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x))) eps) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (cos.f64 x) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64)) (*.f64 x x) #s(literal -1/6 binary64))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal -1/6 binary64) #s(literal -1 binary64))) x))) #s(literal 0 binary64)))","(*.f64 (cos.f64 x) eps)","(*.f64 eps (cos.f64 x))","(/.f64 (*.f64 (*.f64 eps eps) (cos.f64 x)) eps)","(/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (cos.f64 x)) (*.f64 eps eps))","(/.f64 (*.f64 (cos.f64 x) (*.f64 eps eps)) eps)","(/.f64 (*.f64 (cos.f64 x) (pow.f64 eps #s(literal 3 binary64))) (*.f64 eps eps))","(fma.f64 (cos.f64 x) #s(literal 0 binary64) (*.f64 (cos.f64 x) eps))","(fma.f64 (cos.f64 x) eps (*.f64 #s(literal 0 binary64) (cos.f64 x)))","(fma.f64 (cos.f64 x) eps (*.f64 (cos.f64 x) #s(literal 0 binary64)))","(fma.f64 #s(literal 0 binary64) (cos.f64 x) (*.f64 (cos.f64 x) eps))","(fma.f64 eps (cos.f64 x) (*.f64 #s(literal 0 binary64) (cos.f64 x)))","(fma.f64 eps (cos.f64 x) (*.f64 (cos.f64 x) #s(literal 0 binary64)))","(+.f64 (*.f64 #s(literal 0 binary64) (cos.f64 x)) (*.f64 (cos.f64 x) eps))","(+.f64 (*.f64 (cos.f64 x) #s(literal 0 binary64)) (*.f64 (cos.f64 x) eps))","(+.f64 (*.f64 (cos.f64 x) eps) (*.f64 #s(literal 0 binary64) (cos.f64 x)))","(+.f64 (*.f64 (cos.f64 x) eps) (*.f64 (cos.f64 x) #s(literal 0 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":405.4609375,"type":"rewrite"},{"compiler":[[28540,2788]],"memory":[[5134528,51162560]],"time":85.239990234375,"type":"eval"},{"alts":[["(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","fresh",0.11328125,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (/.f64 (*.f64 (*.f64 eps eps) #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))) eps))","fresh",18.41428079333528,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))) eps))","done",0.1015625,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (* eps (cos x)) (fma.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) (*.f64 x x) eps)) #s(literal -1/2 binary64) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))) eps))","fresh",0.22486119423229645,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (* eps (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 x x) eps)) #s(literal -1/2 binary64) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))) eps))","fresh",0.268170221021861,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","done",12.347635529453676,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (* eps (cos x)) -1/2) (* (+ (* 1/6 (* eps eps)) -1) (sin x))) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","fresh",0.7173887707296801,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 x x)) x (*.f64 #s(literal -1 binary64) x))) eps))","fresh",12.399116126800878,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","done",12.35166589929007,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","done",12.363138070512848,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","done",12.403022376800878,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","done",12.628445556850021,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","done",0.34418076291443955,"binary64"],["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 x (fma.f64 #s(literal 1/4 binary64) eps (*.f64 #s(literal 1/6 binary64) x)) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","fresh",0.34343145315796847,"binary64"]],"compiler":[[1028,224],[25,20],[36,22],[25,18],[78,38],[73,36],[13,10],[39,27],[24,17],[32,20],[27,18],[22,16],[16,12],[72,44],[75,46]],"count":[[502,14]],"kept":[{"done":[5,4],"fresh":[4,2],"new":[488,5],"picked":[5,3]}],"memory":[[-372992,27146448]],"min-error":[[0.0,"binary64"]],"time":21.857177734375,"type":"prune"},{"accuracy":[0.1015625],"baseline":[0.1015625],"branch":[["x",0.1015625,1,"binary64"],["eps",0.1015625,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",0.1015625,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[29,1]],"inputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 x x)) x (*.f64 #s(literal -1 binary64) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (* eps (cos x)) -1/2) (* (+ (* 1/6 (* eps eps)) -1) (sin x))) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 x (fma.f64 #s(literal 1/4 binary64) eps (*.f64 #s(literal 1/6 binary64) x)) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (/.f64 (*.f64 (*.f64 eps eps) #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (* eps (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 x x) eps)) #s(literal -1/2 binary64) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (* eps (cos x)) (fma.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) (*.f64 x x) eps)) #s(literal -1/2 binary64) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))) eps))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 eps (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64))))) eps))","(-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps (*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 eps eps) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) #s(approx (* (* (cos x) -1/2) eps) (fma.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal -1/48 binary64) #s(literal 1/4 binary64))) (*.f64 x x) (*.f64 #s(literal -1/2 binary64) eps)))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))) eps))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps (neg.f64 (sin.f64 x))) eps))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))) #s(literal -2 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))) eps))"]],"memory":[[4687232,12429904]],"oracle":[31.59368074146697],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))) eps))"]],"repr":["binary64"],"time":19.60498046875,"times":[[6.218994140625,"x"],[6.60498046875,"eps"],[5.027099609375,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"type":"regimes"},{"accuracy":[0.10546875],"baseline":[0.10546875],"branch":[["x",0.10546875,1,"binary64"],["eps",0.10546875,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",0.10546875,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[28,1]],"inputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 x x)) x (*.f64 #s(literal -1 binary64) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (* eps (cos x)) -1/2) (* (+ (* 1/6 (* eps eps)) -1) (sin x))) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 x (fma.f64 #s(literal 1/4 binary64) eps (*.f64 #s(literal 1/6 binary64) x)) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (/.f64 (*.f64 (*.f64 eps eps) #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (* eps (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 x x) eps)) #s(literal -1/2 binary64) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (* eps (cos x)) (fma.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) (*.f64 x x) eps)) #s(literal -1/2 binary64) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))) eps))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 eps (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64))))) eps))","(-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps (*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 eps eps) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) #s(approx (* (* (cos x) -1/2) eps) (fma.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal -1/48 binary64) #s(literal 1/4 binary64))) (*.f64 x x) (*.f64 #s(literal -1/2 binary64) eps)))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))) eps))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps (neg.f64 (sin.f64 x))) eps))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))) #s(literal -2 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps))"]],"memory":[[-8632960,12084624]],"oracle":[31.59368074146697],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps))"]],"repr":["binary64"],"time":47.518798828125,"times":[[33.943115234375,"x"],[6.68408203125,"eps"],[5.1201171875,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"type":"regimes"},{"accuracy":[0.11328125],"baseline":[0.11328125],"branch":[["x",0.11328125,1,"binary64"],["eps",0.11328125,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",0.11328125,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[27,1]],"inputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 x x)) x (*.f64 #s(literal -1 binary64) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (* eps (cos x)) -1/2) (* (+ (* 1/6 (* eps eps)) -1) (sin x))) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 x (fma.f64 #s(literal 1/4 binary64) eps (*.f64 #s(literal 1/6 binary64) x)) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (/.f64 (*.f64 (*.f64 eps eps) #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (* eps (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 x x) eps)) #s(literal -1/2 binary64) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (* eps (cos x)) (fma.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) (*.f64 x x) eps)) #s(literal -1/2 binary64) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))) eps))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) #s(approx (* (* (cos x) -1/2) eps) (*.f64 eps (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1/2 binary64))))) eps))","(-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/720 binary64) (*.f64 x x) #s(literal 1/24 binary64)) (*.f64 x x) #s(literal -1/2 binary64)) (*.f64 x x) #s(literal 1 binary64))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) eps (*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 eps eps) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) #s(approx (* (* (cos x) -1/2) eps) (fma.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal -1/48 binary64) #s(literal 1/4 binary64))) (*.f64 x x) (*.f64 #s(literal -1/2 binary64) eps)))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 (fma.f64 (*.f64 eps (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps))) x (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64) (neg.f64 eps))) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))) eps))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (-.f64 (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps) (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (cos.f64 x)) eps (neg.f64 (sin.f64 x))) eps))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) (sin.f64 (*.f64 #s(literal 1/2 binary64) (+.f64 #s(literal 0 binary64) eps)))) #s(literal -2 binary64))"]],"memory":[[3750000,11755088]],"oracle":[31.59368074146697],"outputs":[["(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))"]],"repr":["binary64"],"time":18.52001953125,"times":[[5.85595703125,"x"],[6.235107421875,"eps"],[4.702880859375,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"type":"regimes"},{"accuracy":[0.22486119423229642],"baseline":[0.22486119423229645],"branch":[["x",0.22486119423229645,1,"binary64"],["eps",0.22486119423229642,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",0.22486119423229642,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[16,1]],"inputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 x x)) x (*.f64 #s(literal -1 binary64) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (* eps (cos x)) -1/2) (* (+ (* 1/6 (* eps eps)) -1) (sin x))) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 x (fma.f64 #s(literal 1/4 binary64) eps (*.f64 #s(literal 1/6 binary64) x)) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (/.f64 (*.f64 (*.f64 eps eps) #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (* eps (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 x x) eps)) #s(literal -1/2 binary64) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (* eps (cos x)) (fma.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) (*.f64 x x) eps)) #s(literal -1/2 binary64) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))) eps))"]],"memory":[[580800,8800352]],"oracle":[31.59368074146697],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (* eps (cos x)) (fma.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) (*.f64 x x) eps)) #s(literal -1/2 binary64) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))) eps))"]],"repr":["binary64"],"time":12.296142578125,"times":[[3.89306640625,"x"],[3.8330078125,"eps"],[3.326171875,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"type":"regimes"},{"accuracy":[0.268170221021861],"baseline":[0.268170221021861],"branch":[["x",0.268170221021861,1,"binary64"],["eps",0.268170221021861,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",0.268170221021861,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[15,1]],"inputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 x x)) x (*.f64 #s(literal -1 binary64) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (* eps (cos x)) -1/2) (* (+ (* 1/6 (* eps eps)) -1) (sin x))) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 x (fma.f64 #s(literal 1/4 binary64) eps (*.f64 #s(literal 1/6 binary64) x)) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (/.f64 (*.f64 (*.f64 eps eps) #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (* eps (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 x x) eps)) #s(literal -1/2 binary64) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))) eps))"]],"memory":[[295760,8446848]],"oracle":[31.59368074146697],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (* eps (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 x x) eps)) #s(literal -1/2 binary64) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))) eps))"]],"repr":["binary64"],"time":11.93701171875,"times":[[3.821044921875,"x"],[3.68212890625,"eps"],[3.261962890625,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"type":"regimes"},{"accuracy":[0.34343145315796847],"baseline":[0.34343145315796847],"branch":[["x",0.34343145315796847,1,"binary64"],["eps",0.34343145315796847,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",0.34343145315796847,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[14,1]],"inputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 x x)) x (*.f64 #s(literal -1 binary64) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (* eps (cos x)) -1/2) (* (+ (* 1/6 (* eps eps)) -1) (sin x))) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 x (fma.f64 #s(literal 1/4 binary64) eps (*.f64 #s(literal 1/6 binary64) x)) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (/.f64 (*.f64 (*.f64 eps eps) #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 x x) #s(literal -1/120 binary64)) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x) (*.f64 #s(literal 1/4 binary64) eps)) x (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (-.f64 (cos.f64 eps) #s(literal 1 binary64)))","(-.f64 (cos.f64 (+.f64 x eps)) #s(approx (cos x) #s(literal 1 binary64)))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (neg.f64 (sin.f64 x)) eps))"]],"memory":[[-862688,8214720]],"oracle":[31.59368074146697],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 x (fma.f64 #s(literal 1/4 binary64) eps (*.f64 #s(literal 1/6 binary64) x)) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))"]],"repr":["binary64"],"time":11.43603515625,"times":[[3.43798828125,"x"],[3.531982421875,"eps"],[3.233154296875,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"type":"regimes"},{"accuracy":[0.34418076291443955],"baseline":[0.34418076291443955],"branch":[["x",0.34418076291443955,1,"binary64"],["eps",0.34418076291443955,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",0.34418076291443955,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[7,1]],"inputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 x x)) x (*.f64 #s(literal -1 binary64) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (* eps (cos x)) -1/2) (* (+ (* 1/6 (* eps eps)) -1) (sin x))) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 x x) #s(literal 1/6 binary64)) (*.f64 x x) #s(literal -1 binary64)) x)) eps))"]],"memory":[[-2207472,6020880]],"oracle":[12.628445703858498],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))"]],"repr":["binary64"],"time":7.29296875,"times":[[2.291015625,"x"],[2.44384765625,"eps"],[1.81298828125,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"type":"regimes"},{"accuracy":[0.71738877072968],"baseline":[0.7173887707296801],"branch":[["x",0.71738877072968,1,"binary64"],["eps",0.71738877072968,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",0.7173887707296801,1,"binary64"]],"compiler":[[1,2],[1,2],[7,6]],"count":[[5,1]],"inputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 x x)) x (*.f64 #s(literal -1 binary64) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (* eps (cos x)) -1/2) (* (+ (* 1/6 (* eps eps)) -1) (sin x))) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))"]],"memory":[[-2879856,5419376]],"oracle":[12.628445703858498],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))"]],"repr":["binary64"],"time":5.885986328125,"times":[[1.951904296875,"x"],[1.711181640625,"eps"],[1.474853515625,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"type":"regimes"},{"accuracy":[12.399116126800877],"baseline":[12.399116126800878],"branch":[["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",12.399116126800878,1,"binary64"],["x",12.399116126800877,1,"binary64"],["eps",12.399116126800882,1,"binary64"]],"compiler":[[7,6],[1,2],[1,2]],"count":[[3,1]],"inputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 x x)) x (*.f64 #s(literal -1 binary64) x))) eps))"]],"memory":[[4879424,4879424]],"oracle":[12.62844567473384],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 x x)) x (*.f64 #s(literal -1 binary64) x))) eps))"]],"repr":["binary64"],"time":4.720947265625,"times":[[1.26513671875,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"],[1.51513671875,"x"],[1.467041015625,"eps"]],"type":"regimes"},{"accuracy":[12.403022376800877],"baseline":[12.403022376800878],"branch":[["eps",12.403022376800882,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",12.403022376800878,1,"binary64"],["x",12.403022376800877,1,"binary64"]],"compiler":[[1,2],[7,6],[1,2]],"count":[[2,1]],"inputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))"]],"memory":[[-3822800,4499456]],"oracle":[12.62844567473384],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))"]],"repr":["binary64"],"time":3.93603515625,"times":[[1.18505859375,"eps"],[1.107177734375,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"],[1.236083984375,"x"]],"type":"regimes"},{"accuracy":[12.628445556850018],"baseline":[12.628445556850021],"branch":[["eps",12.628445556850025,1,"binary64"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",12.628445556850021,1,"binary64"],["x",12.628445556850018,1,"binary64"]],"compiler":[[1,2],[7,6],[1,2]],"count":[[1,1]],"inputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))"]],"link":["."],"memory":[[4236864,4236864]],"name":["2cos (problem 3.3.5)"],"oracle":[12.628445556850021],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))"]],"repr":["binary64"],"time":3.94384765625,"times":[[1.06005859375,"eps"],[1.115966796875,"(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"],[1.326904296875,"x"]],"type":"regimes"},{"egraph":[[5,5278,458,0.03174328],[4,3179,458,0.01804173],[3,1213,466,0.014143784],[2,435,466,0.005337065],[1,188,469,0.002673136],[0,125,469,0.002149653]],"inputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (* eps (cos x)) (fma.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) (*.f64 x x) eps)) #s(literal -1/2 binary64) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (* eps (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 x x) eps)) #s(literal -1/2 binary64) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 x (fma.f64 #s(literal 1/4 binary64) eps (*.f64 #s(literal 1/6 binary64) x)) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 x x)) x (*.f64 #s(literal -1 binary64) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))"]],"memory":[[-4621264,12007136]],"method":["egg-herbie"],"outputs":[["#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (*.f64 eps (cos.f64 x)) #s(literal -1/2 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) (*.f64 eps eps) #s(literal -1 binary64)) (sin.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 (sin.f64 x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (*.f64 (*.f64 (cos.f64 x) #s(literal -1/2 binary64)) eps)) eps))","(*.f64 (*.f64 (sin.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 #s(literal 2 binary64) x eps))) #s(approx (sin (* 1/2 (+ 0 eps))) (*.f64 (fma.f64 #s(literal -1/48 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) eps))) #s(literal -2 binary64))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (* eps (cos x)) (fma.f64 (*.f64 eps (fma.f64 (*.f64 x x) #s(literal 1/24 binary64) #s(literal -1/2 binary64))) (*.f64 x x) eps)) #s(literal -1/2 binary64) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 (fma.f64 #s(approx (* eps (cos x)) (fma.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 x x) eps)) #s(literal -1/2 binary64) #s(approx (* (+ (* 1/6 (* eps eps)) -1) (sin x)) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal -1/5040 binary64) (*.f64 x x) #s(literal 1/120 binary64))) (*.f64 x x) (*.f64 #s(literal -1/6 binary64) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)))) (*.f64 x x) (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64))) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 x (fma.f64 #s(literal 1/4 binary64) eps (*.f64 #s(literal 1/6 binary64) x)) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) #s(approx (* (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) eps) (fma.f64 #s(approx (+ (* (* eps (+ (* -1/6 (* (+ (* (* eps eps) 1/6) -1) x)) (* 1/4 eps))) x) (+ (* (pow eps 3) 1/6) (neg eps))) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) eps)) x (*.f64 (*.f64 eps eps) #s(literal -1/2 binary64)))))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (+ (* (sin x) (+ (* (* eps eps) 1/6) -1)) (* (* (cos x) -1/2) eps)) (fma.f64 (fma.f64 (*.f64 eps eps) #s(literal 1/6 binary64) #s(literal -1 binary64)) x (*.f64 #s(literal -1/2 binary64) eps))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 x x)) x (*.f64 #s(literal -1 binary64) x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 x x)) x (neg.f64 x))) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/6 binary64) #s(literal -1 binary64)) x)) eps))","#s(approx (- (cos (+ x eps)) (cos x)) (*.f64 #s(approx (neg (sin x)) (neg.f64 x)) eps))"]],"stop":[["node limit",1]],"time":98.467041015625,"type":"simplify"},{"compiler":[[473,130]],"memory":[[2372688,2372688]],"stop":[["fuel",1]],"time":3.35498046875,"type":"soundness"},{"compiler":[[473,130],[473,130],[17,15],[17,15],[7,6],[7,6]],"memory":[[2380352,42648800]],"remove-preprocessing":[[],[],[],[],[],[],[],[],[],[],[],[]],"time":80.47119140625,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.018798828125,"type":"end"}]