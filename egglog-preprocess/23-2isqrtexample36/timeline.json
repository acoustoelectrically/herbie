[{"memory":[[18832,18832]],"time":0.034912109375,"type":"start"},{"compiler":[[19,13]],"memory":[[644912,644912]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.00012196451865783376,"valid":0.24966136969258573}],[11,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.00024392903731566753,"valid":0.2495394051739279}],[10,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.00048785807463133505,"valid":0.2492954761366122}],[9,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.0009757161492626701,"valid":0.24880761806198087}],[8,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.0019514322985253402,"valid":0.24783190191271823}],[7,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.0039028645970506804,"valid":0.24588046961419288}],[6,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.007805729194101361,"valid":0.2419776050171422}],[5,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.015611458388202722,"valid":0.23417187582304083}],[4,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.031222916776405443,"valid":0.21856041743483812}],[3,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.06244583355281089,"valid":0.18733750065843266}],[2,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.12489166710562177,"valid":0.12489166710562177}],[1,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.24978333421124355,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.7502166657887565,"unknown":0.24978333421124355,"valid":0.0}]],"time":2.323974609375,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.7502166657887565,"valid":0.24978333421124357}],"memory":[[18502736,475213312]],"mixsample":[[147.488525390625,"ival-div",0],[204.6630859375,"adjust",800],[145.958984375,"ival-div",400],[4.664794921875,"ival-assert",0],[15.987548828125,"ival-div",1600],[105.485107421875,"ival-sub",0],[17.10302734375,"ival-and",0],[0.04541015625,"ival-sub",400],[155.80419921875,"ival-sqrt",0],[175.446044921875,"const",0],[25.076171875,"adjust",2000],[59.158203125,"ival-add",0],[0.061279296875,"ival-sub",800],[5.103759765625,"ival-add",1600],[16.48193359375,"ival-sqrt",1600],[49.846923828125,"ival-add",400],[29.774169921875,"ival->",0],[10.103759765625,"exact",0],[168.232421875,"ival-sqrt",400],[28.234130859375,"ival-<",0]],"outcomes":[[1330.754638671875,1,"valid",6868],[327.063720703125,2,"valid",1141],[24.41943359375,0,"valid",247]],"time":2189.443115234375,"type":"sample"},{"compiler":[[11,8],[34,10],[34,10]],"confusion":[[183,1,3,69]],"explanations":[["-.f64","(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","cancellation",186,1,[],[[]]]],"fperrors":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))",183,3,[3.2274229391686685e+215],0,false],["(+.f64 x #s(literal 1 binary64))",0,0,false,0,false],["(sqrt.f64 x)",0,0,false,0,false],["(/.f64 #s(literal 1 binary64) (sqrt.f64 x))",0,0,false,0,false],["(/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(sqrt.f64 (+.f64 x #s(literal 1 binary64)))",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,186],[0,70]],"maybe-confusion":[[183,1,0,3,0,69]],"memory":[[-1611232,65772208]],"mixsample":[[10.704833984375,"adjust",800],[7.51416015625,"ival-div",0],[3.33642578125,"ival-add",0],[0.18896484375,"ival-add",1600],[0.8310546875,"ival-sqrt",1600],[6.790771484375,"ival-div",400],[0.7431640625,"ival-div",1600],[0.23095703125,"ival-assert",0],[5.839599609375,"ival-sub",0],[2.481201171875,"ival-add",400],[0.48388671875,"ival-true",0],[7.789794921875,"ival-sqrt",0],[0.351806640625,"exact",0],[0.99609375,"adjust",2000],[7.469482421875,"ival-sqrt",400]],"outcomes":[[63.9501953125,1,"valid",440],[13.80615234375,2,"valid",64],[0.517822265625,0,"valid",8]],"time":147.40283203125,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[11,8]],"egraph":[[0,258,11,0.000974479],[11,258,11,0.001355303],[10,255,11,0.001473545],[9,234,11,0.001427158],[8,203,11,0.001407116],[7,142,11,0.001185456],[6,107,11,0.001207681],[5,68,11,0.000545983],[4,48,11,0.00032421],[3,36,11,0.000270279],[2,27,11,0.00020229],[1,19,11,0.000157782],[0,14,11,0.000178095],[0,8,11,0.000121474]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))"]],"memory":[[-1435776,14596480]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[[]],"time":163.482177734375,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[41072,41072]],"time":0.06689453125,"type":"eval"},{"alts":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","next",41.62696195065793,"binary64"]],"compiler":[[11,8]],"memory":[[321152,321152]],"time":2.19189453125,"type":"prune"},{"egraph":[[0,258,32,0.001407891],[11,258,32,0.001270985],[10,255,32,0.001423232],[9,234,32,0.00143837],[8,203,32,0.001267284],[7,142,32,0.000995802],[6,107,32,0.000879828],[5,68,32,0.000523394],[4,48,32,0.000308587],[3,36,32,0.000264653],[2,27,32,0.000199479],[1,19,32,0.000166198],[0,14,32,0.000166725],[0,8,32,0.000110593]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","#s(literal 1 binary64)","(sqrt.f64 x)","x","(/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))"]],"locations":[["(/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","cost-diff",0],["(sqrt.f64 x)","cost-diff",0],["(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","cost-diff",0],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","cost-diff",0]],"memory":[[1078944,1078944]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","#s(literal 1 binary64)","(sqrt.f64 x)","x","(/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":17.01513671875,"type":"simplify"},{"compiler":[[34,10]],"locations":[["(sqrt.f64 x)","accuracy",0.0],["(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","accuracy",0.2890625],["(/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","accuracy",0.296875],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","accuracy",41.617699565789]],"memory":[[-1944352,15374064]],"mixsample":[[5.02490234375,"adjust",800],[3.913818359375,"ival-div",0],[1.381591796875,"ival-add",0],[0.0869140625,"ival-add",1600],[0.358642578125,"ival-sqrt",1600],[3.627685546875,"ival-div",400],[0.359130859375,"ival-div",1600],[0.098388671875,"ival-assert",0],[4.4248046875,"ival-sub",0],[1.111328125,"ival-add",400],[0.222412109375,"ival-true",0],[4.31640625,"ival-sqrt",0],[0.169921875,"exact",0],[0.537841796875,"adjust",2000],[3.996826171875,"ival-sqrt",400]],"outcomes":[[34.312744140625,1,"valid",220],[6.732666015625,2,"valid",32],[0.287109375,0,"valid",4]],"time":54.56396484375,"type":"localize"},{"count":[[4,25]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","(sqrt.f64 x)","(/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))"]],"memory":[[2185200,2185200]],"outputs":[["(sqrt (/ 1 x))","(/ (+ (sqrt x) (* -1 x)) x)","(/ (+ (sqrt x) (* x (- (* 1/2 x) 1))) x)","(/ (+ (sqrt x) (* x (- (* x (+ 1/2 (* -3/8 x))) 1))) x)","(sqrt x)","1","(+ 1 (* -1/2 x))","(+ 1 (* x (- (* 3/8 x) 1/2)))","(+ 1 (* x (- (* x (+ 3/8 (* -5/16 x))) 1/2)))","(* 1/2 (sqrt (/ 1 (pow x 3))))","(/ (- (* -1/2 (sqrt (/ 1 x))) (* -1/2 (sqrt x))) (pow x 2))","(/ (- (* 1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (/ 1 x))))) (pow x 2))","(/ (- (* -1/2 (* (sqrt (/ 1 (pow x 5))) (+ 1 (* 1/2 x)))) (+ (* -1/2 (sqrt x)) (+ (* -1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 x)))))) (pow x 2))","(+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 3)))))","(+ (sqrt (/ 1 x)) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 (pow x 5))))))","(+ (sqrt (/ 1 x)) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (+ (* -1/2 (* (sqrt (/ 1 (pow x 7))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 (pow x 5)))))))","(- (sqrt (/ 1 x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 5))))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(- (+ (sqrt (/ 1 x)) (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* -1/2 (sqrt x))) (pow x 3)))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (+ (* 1/2 (sqrt (/ 1 (pow x 5)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(+ (* -1 (/ (+ (* -1/2 (sqrt x)) (* 1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2))))))) (pow x 3))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))"]],"series":[[3.001953125,"((- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ 1 (sqrt x)) (sqrt x) (/ 1 (sqrt (+ x 1))))","x","-inf"],[1.57421875,"((- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ 1 (sqrt x)) (sqrt x) (/ 1 (sqrt (+ x 1))))","x","inf"],[1.1689453125,"((- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ 1 (sqrt x)) (sqrt x) (/ 1 (sqrt (+ x 1))))","x","0"]],"time":6.214111328125,"type":"series"},{"count":[[25,25]],"egraph":[[0,8247,344,0.125319976],[3,3341,373,0.03155517],[2,930,383,0.010113056],[1,303,408,0.002448674],[0,114,457,0.000978944]],"inputs":[["(sqrt (/ 1 x))","(/ (+ (sqrt x) (* -1 x)) x)","(/ (+ (sqrt x) (* x (- (* 1/2 x) 1))) x)","(/ (+ (sqrt x) (* x (- (* x (+ 1/2 (* -3/8 x))) 1))) x)","(sqrt x)","1","(+ 1 (* -1/2 x))","(+ 1 (* x (- (* 3/8 x) 1/2)))","(+ 1 (* x (- (* x (+ 3/8 (* -5/16 x))) 1/2)))","(* 1/2 (sqrt (/ 1 (pow x 3))))","(/ (- (* -1/2 (sqrt (/ 1 x))) (* -1/2 (sqrt x))) (pow x 2))","(/ (- (* 1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (/ 1 x))))) (pow x 2))","(/ (- (* -1/2 (* (sqrt (/ 1 (pow x 5))) (+ 1 (* 1/2 x)))) (+ (* -1/2 (sqrt x)) (+ (* -1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 x)))))) (pow x 2))","(+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 3)))))","(+ (sqrt (/ 1 x)) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 (pow x 5))))))","(+ (sqrt (/ 1 x)) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (+ (* -1/2 (* (sqrt (/ 1 (pow x 7))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 (pow x 5)))))))","(- (sqrt (/ 1 x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 5))))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(- (+ (sqrt (/ 1 x)) (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* -1/2 (sqrt x))) (pow x 3)))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (+ (* 1/2 (sqrt (/ 1 (pow x 5)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(+ (* -1 (/ (+ (* -1/2 (sqrt x)) (* 1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2))))))) (pow x 3))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))"]],"memory":[[-9860816,55735904]],"method":["egg-herbie"],"outputs":[["(sqrt (/ 1 x))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/ (+ (sqrt x) (* -1 x)) x)","(/.f64 (-.f64 (sqrt.f64 x) x) x)","(/ (+ (sqrt x) (* x (- (* 1/2 x) 1))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x (sqrt.f64 x)) x)","(/ (+ (sqrt x) (* x (- (* x (+ 1/2 (* -3/8 x))) 1))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -3/8 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x (sqrt.f64 x)) x)","(sqrt x)","(sqrt.f64 x)","1","#s(literal 1 binary64)","(+ 1 (* -1/2 x))","(fma.f64 #s(literal -1/2 binary64) x #s(literal 1 binary64))","(+ 1 (* x (- (* 3/8 x) 1/2)))","(fma.f64 (fma.f64 #s(literal 3/8 binary64) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (- (* x (+ 3/8 (* -5/16 x))) 1/2)))","(fma.f64 (fma.f64 (fma.f64 #s(literal -5/16 binary64) x #s(literal 3/8 binary64)) x #s(literal -1/2 binary64)) x #s(literal 1 binary64))","(* 1/2 (sqrt (/ 1 (pow x 3))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))","(/ (- (* -1/2 (sqrt (/ 1 x))) (* -1/2 (sqrt x))) (pow x 2))","(*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(/ (- (* 1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (/ 1 x))))) (pow x 2))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x)))) (*.f64 x x))","(/ (- (* -1/2 (* (sqrt (/ 1 (pow x 5))) (+ 1 (* 1/2 x)))) (+ (* -1/2 (sqrt x)) (+ (* -1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 x)))))) (pow x 2))","(/.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 (-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 x x))","(+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 3)))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(+ (sqrt (/ 1 x)) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 (pow x 5))))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(+ (sqrt (/ 1 x)) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (+ (* -1/2 (* (sqrt (/ 1 (pow x 7))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 (pow x 5)))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(- (sqrt (/ 1 x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(- (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(fma.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64)))","(- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 5))))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))))","(- (+ (sqrt (/ 1 x)) (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* -1/2 (sqrt x))) (pow x 3)))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/2 binary64) (-.f64 (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal -1 binary64) (*.f64 #s(literal 1/4 binary64) x)) (sqrt.f64 x)) (pow.f64 x #s(literal 3 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(sqrt.f64 x)","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (+ (* 1/2 (sqrt (/ 1 (pow x 5)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/2 binary64) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))","(+ (* -1 (/ (+ (* -1/2 (sqrt x)) (* 1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2))))))) (pow x 3))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(neg.f64 (fma.f64 #s(literal -1/2 binary64) (-.f64 (/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal -1 binary64) (*.f64 #s(literal 1/4 binary64) x)) (sqrt.f64 x)) (pow.f64 x #s(literal 3 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))"]],"stop":[["iter limit",1],["node limit",1]],"time":305.7578125,"type":"simplify"},{"count":[[4,229]],"egraph":[[0,8443,19,0.061493042],[3,6723,19,0.039903347],[2,565,19,0.030338804],[1,66,19,0.002390382],[0,14,23,0.001000025],[0,8,23,0.00011079]],"inputs":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","(sqrt.f64 x)","(/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))"]],"memory":[[-8577664,43172544]],"outputs":[["(*.f64 (/.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x)) (sqrt.f64 (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x)) (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (hypot.f64 (sqrt.f64 x) x))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (pow.f64 x #s(literal -3/2 binary64)))) (+.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))) (neg.f64 (hypot.f64 (sqrt.f64 x) x)))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -1 binary64) (hypot.f64 (sqrt.f64 x) x))) #s(literal 2 binary64)))) (-.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))) (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -1 binary64) (hypot.f64 (sqrt.f64 x) x))) #s(literal 3 binary64)) (pow.f64 x #s(literal -3 binary64)))) (fma.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -1 binary64) (hypot.f64 (sqrt.f64 x) x))) (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -1 binary64) (hypot.f64 (sqrt.f64 x) x))) (pow.f64 x #s(literal -1 binary64))) (pow.f64 x #s(literal -2 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(*.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/4 binary64))) (-.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/4 binary64))))","(*.f64 (/.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))) #s(literal 1 binary64)) (/.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))))","(*.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))))","(*.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))))","(*.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(*.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (/.f64 #s(literal -1 binary64) (hypot.f64 (sqrt.f64 x) x)))","(*.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))) (*.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (pow.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64))))","(*.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))) (/.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))))","(*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (/.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))))","(*.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(*.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(*.f64 #s(literal -1 binary64) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))))","(*.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(*.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) #s(literal -1 binary64))","(/.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (neg.f64 (sqrt.f64 x))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (/.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)))","(/.f64 (/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x))","(/.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 1 binary64)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (pow.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64))) (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (pow.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (hypot.f64 (sqrt.f64 x) x) #s(literal -2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (pow.f64 x #s(literal -2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (pow.f64 x #s(literal -3/2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (sqrt.f64 x) #s(literal -9 binary64)) (pow.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -9 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (hypot.f64 (sqrt.f64 x) x) #s(literal -3 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (pow.f64 x #s(literal -3 binary64))))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) (neg.f64 (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x))) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))) (neg.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))))) (neg.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (neg.f64 (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (sqrt.f64 x))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal 1 binary64)) (hypot.f64 (sqrt.f64 x) x))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))) (*.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))))) (+.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))) (*.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))))) (+.f64 (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x)) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x))) (*.f64 (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x)) (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x)))) (+.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x)) (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 x #s(literal -1 binary64))) (-.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))) (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))) (fma.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))) (*.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (fma.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (*.f64 (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x)) #s(literal 3 binary64)) (pow.f64 (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x)) #s(literal 3 binary64))) (fma.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x)) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x)) (fma.f64 (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x)) (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x)) (*.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x)) (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x))))))","(/.f64 (neg.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (hypot.f64 (sqrt.f64 x) x))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 1 binary64)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 x #s(literal -1 binary64))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (hypot.f64 (sqrt.f64 x) x) #s(literal -2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (pow.f64 x #s(literal -2 binary64))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (pow.f64 x #s(literal -3/2 binary64))) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (sqrt.f64 x) #s(literal -9 binary64)) (pow.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (hypot.f64 (sqrt.f64 x) x) #s(literal -3 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (pow.f64 x #s(literal -3 binary64))) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal -1 binary64)) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 x #s(literal -1/2 binary64))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (*.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (neg.f64 (sqrt.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (neg.f64 (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (*.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (sqrt.f64 x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 x #s(literal -1/2 binary64))) (*.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))) (*.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (*.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (*.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))) (*.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x)) (*.f64 (hypot.f64 (sqrt.f64 x) x) (sqrt.f64 x))) (*.f64 (hypot.f64 (sqrt.f64 x) x) (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (+.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (hypot.f64 (sqrt.f64 x) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))) (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (*.f64 (hypot.f64 (sqrt.f64 x) x) (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (*.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))) (+.f64 (+.f64 (pow.f64 (hypot.f64 (sqrt.f64 x) x) #s(literal -2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (pow.f64 x #s(literal -2 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (pow.f64 x #s(literal -3/2 binary64)))))","(/.f64 (-.f64 (pow.f64 (sqrt.f64 x) #s(literal -9 binary64)) (pow.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -9 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (+.f64 (+.f64 (pow.f64 (hypot.f64 (sqrt.f64 x) x) #s(literal -3 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (pow.f64 x #s(literal -3 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) (neg.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (neg.f64 (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))) (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (hypot.f64 (sqrt.f64 x) x)))))","(/.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (hypot.f64 (sqrt.f64 x) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))))","(/.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))))","(neg.f64 (/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (hypot.f64 (sqrt.f64 x) x)))","(neg.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (neg.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))))","(neg.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))) (neg.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(neg.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (neg.f64 (hypot.f64 (sqrt.f64 x) x))))","(neg.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))))","(neg.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -1 binary64) (hypot.f64 (sqrt.f64 x) x))) #s(literal 2 binary64)))) (-.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) (neg.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -1 binary64) (hypot.f64 (sqrt.f64 x) x))) #s(literal 3 binary64)) (pow.f64 x #s(literal -3 binary64)))) (fma.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -1 binary64) (hypot.f64 (sqrt.f64 x) x))) (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -1 binary64) (hypot.f64 (sqrt.f64 x) x))) (pow.f64 x #s(literal -1 binary64))) (pow.f64 x #s(literal -2 binary64))) (neg.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (hypot.f64 (sqrt.f64 x) x) (neg.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (pow.f64 x #s(literal -3/2 binary64)))) (+.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) (neg.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))) (neg.f64 (hypot.f64 (sqrt.f64 x) x)) (neg.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))))","(fma.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (neg.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))))","(fma.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/4 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/4 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/4 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/4 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) (sqrt.f64 x)) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x))))","(fma.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) (sqrt.f64 x)) (neg.f64 (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x))))","(fma.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x))))","(fma.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (neg.f64 (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x))))","(fma.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 x #s(literal -3/4 binary64)) (/.f64 (pow.f64 x #s(literal -3/4 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (neg.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/4 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/4 binary64)) (neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/4 binary64))) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) (hypot.f64 (sqrt.f64 x) x)) (neg.f64 (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x))))","(fma.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 x #s(literal -1/4 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (neg.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))))","(fma.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (neg.f64 (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x))))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (neg.f64 (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x))))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (neg.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x))))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (pow.f64 x #s(literal -1/2 binary64)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))) (neg.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))) (neg.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))))","(fma.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (neg.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(fma.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x)) (neg.f64 (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x))))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(-.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 0 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(-.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))))","(-.f64 (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))))","(-.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x)) (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x)))","(-.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(-.f64 #s(literal 0 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))","(-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))) #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))) (neg.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))))","(+.f64 (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))) (neg.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(+.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x)) (neg.f64 (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x))))","(+.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (pow.f64 x #s(literal -1/2 binary64)))","(+.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) #s(literal -1 binary64))","(*.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 x #s(literal -1/4 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(pow.f64 (pow.f64 x #s(literal -1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (sqrt.f64 x) #s(literal -1 binary64))","(pow.f64 x #s(literal -1/2 binary64))","(/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 1/4 binary64))) (pow.f64 x #s(literal 1/4 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)))","(/.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","(neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(exp.f64 (*.f64 (*.f64 #s(literal -1/4 binary64) (log.f64 x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 #s(literal -1/2 binary64) (log.f64 x)))","(*.f64 (pow.f64 x #s(literal 1/4 binary64)) (/.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 x) #s(literal 1 binary64))","(*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)))","(*.f64 #s(literal 1 binary64) (sqrt.f64 x))","(pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (sqrt.f64 x) #s(literal 1 binary64))","(pow.f64 (*.f64 x x) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64))","(pow.f64 x #s(literal 1/2 binary64))","(/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/4 binary64))) (pow.f64 x #s(literal -1/4 binary64)))","(/.f64 (sqrt.f64 x) #s(literal 1 binary64))","(/.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(neg.f64 (neg.f64 (sqrt.f64 x)))","(sqrt.f64 x)","(-.f64 #s(literal 0 binary64) (neg.f64 (sqrt.f64 x)))","(exp.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) (log.f64 x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 x)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal 2 binary64) (log.f64 x)) #s(literal 1/4 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (log.f64 x)) #s(literal -1 binary64)))","(exp.f64 (log.f64 (sqrt.f64 x)))","(*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (pow.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/4 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/4 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(pow.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))","(pow.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(exp.f64 (*.f64 (*.f64 #s(literal -1/4 binary64) (log1p.f64 x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log1p.f64 x) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 #s(literal -1/2 binary64) (log1p.f64 x)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":282.260009765625,"type":"rewrite"},{"compiler":[[5943,730]],"memory":[[8677536,23898160]],"time":43.26416015625,"type":"eval"},{"alts":[["(/.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x))","fresh",41.59996859244574,"binary64"],["(/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (hypot.f64 (sqrt.f64 x) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","fresh",40.34358120685138,"binary64"],["(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","next",40.34748745685138,"binary64"],["(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","next",40.35920620685138,"binary64"],["(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","fresh",40.35986997638827,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x))))","next",41.59996859199547,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","done",41.62696195065793,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x)))) (*.f64 x x)))","fresh",11.65530070745321,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","next",11.16868038358054,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64)))","fresh",22.401581183419346,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","next",60.41744178309373,"binary64"]],"compiler":[[15,8],[18,10],[20,12],[24,13],[24,13],[17,9],[11,8],[36,25],[25,18],[20,16],[16,12],[15,8],[18,10],[20,12],[24,13],[24,13],[17,9],[36,25],[25,18],[20,16],[16,12]],"count":[[254,11]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[253,10],"picked":[1,1]}],"memory":[[-3508288,13984208]],"min-error":[[10.34200747169604,"binary64"]],"time":17.5,"type":"prune"},{"egraph":[[0,8142,251,0.050843556],[5,7160,253,0.018392572],[4,3397,253,0.031099263],[3,886,253,0.013538064],[2,247,261,0.003516504],[1,103,273,0.000899838],[0,61,276,0.000544173],[0,36,296,0.000376104]],"inputs":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(/.f64 (/.f64 #s(literal -1/2 binary64) x) x)","(/.f64 #s(literal -1/2 binary64) x)","#s(literal -1/2 binary64)","x","(-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","(sqrt.f64 x)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x))))","#s(literal 1 binary64)","(/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x)))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","x","(/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x))","(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(sqrt.f64 x)","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(-.f64 (+.f64 x #s(literal 1 binary64)) x)","(+.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","#s(literal -1 binary64)","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x)))","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(sqrt.f64 x)","(neg.f64 (sqrt.f64 x))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))","(-.f64 (+.f64 x #s(literal 1 binary64)) x)","(+.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))","(fma.f64 x x x)","#s(literal -1/2 binary64)","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(sqrt.f64 x)","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))"]],"locations":[["(+.f64 x #s(literal 1 binary64))","cost-diff",0],["(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","cost-diff",0],["(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))","cost-diff",2],["(-.f64 (+.f64 x #s(literal 1 binary64)) x)","cost-diff",4],["(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","cost-diff",1],["(*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x)))","cost-diff",2],["(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","cost-diff",2],["(-.f64 (+.f64 x #s(literal 1 binary64)) x)","cost-diff",4],["(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","cost-diff",0],["(/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x)))","cost-diff",0],["(/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x))","cost-diff",1],["(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x))))","cost-diff",5],["(/.f64 #s(literal 1 binary64) x)","cost-diff",0],["(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","cost-diff",0],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","cost-diff",0],["(/.f64 #s(literal -1/2 binary64) x)","cost-diff",0],["(/.f64 (/.f64 #s(literal -1/2 binary64) x) x)","cost-diff",0],["(*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","cost-diff",0],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","cost-diff",0]],"memory":[[-5155344,25750560]],"method":["egg-herbie"],"outputs":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x)))","(*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(*.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x))","(/.f64 (/.f64 #s(literal -1/2 binary64) x) x)","(/.f64 #s(literal -1/2 binary64) x)","#s(literal -1/2 binary64)","x","(-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","(sqrt.f64 x)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x))))","(-.f64 (/.f64 (sqrt.f64 x) x) (/.f64 #s(literal 1 binary64) (sqrt.f64 (-.f64 x #s(literal -1 binary64)))))","#s(literal 1 binary64)","(/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x)))","(/.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (-.f64 (/.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x)) #s(literal 1 binary64)))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(sqrt.f64 (-.f64 x #s(literal -1 binary64)))","(+.f64 x #s(literal 1 binary64))","(-.f64 x #s(literal -1 binary64))","x","(/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x))","(-.f64 (/.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x)) #s(literal 1 binary64))","(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(-.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x))","(sqrt.f64 x)","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","(/.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (-.f64 x #s(literal -1 binary64)))) (fma.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x) x))","(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (sqrt.f64 (-.f64 x #s(literal -1 binary64))))","(-.f64 (+.f64 x #s(literal 1 binary64)) x)","#s(literal 1 binary64)","(+.f64 x #s(literal 1 binary64))","(-.f64 x #s(literal -1 binary64))","x","#s(literal 1 binary64)","(/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (sqrt.f64 (-.f64 x #s(literal -1 binary64))))","#s(literal -1 binary64)","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(sqrt.f64 (-.f64 x #s(literal -1 binary64)))","(*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x)))","(neg.f64 (fma.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x) x))","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(+.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x))","(sqrt.f64 x)","(neg.f64 (sqrt.f64 x))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (+.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x)))","(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))","(pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))","(-.f64 (+.f64 x #s(literal 1 binary64)) x)","#s(literal 1 binary64)","(+.f64 x #s(literal 1 binary64))","(-.f64 x #s(literal -1 binary64))","x","#s(literal 1 binary64)","(pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))","(fma.f64 x x x)","#s(literal -1/2 binary64)","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(+.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x))","(sqrt.f64 x)","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(sqrt.f64 (-.f64 x #s(literal -1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":282.615966796875,"type":"simplify"},{"compiler":[[283,34]],"locations":[["(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","accuracy",0.0078125],["(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","accuracy",0.2265625],["(pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))","accuracy",29.049822894645608],["(-.f64 (+.f64 x #s(literal 1 binary64)) x)","accuracy",59.57677049108313],["(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","accuracy",0.21484375],["(/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","accuracy",0.296875],["(*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x)))","accuracy",0.53515625],["(-.f64 (+.f64 x #s(literal 1 binary64)) x)","accuracy",59.57677049108313],["(/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x)))","accuracy",0.27181625976844204],["(/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x))","accuracy",0.3203125],["(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x))))","accuracy",0.5764511927940352],["(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","accuracy",60.42296674669221],["(/.f64 #s(literal 1 binary64) x)","accuracy",0.0],["(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","accuracy",0.12890625],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","accuracy",60.41744178309373],["(/.f64 (/.f64 #s(literal -1/2 binary64) x) x)","accuracy",0.125],["(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","accuracy",0.12890625],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","accuracy",0.6914593636971367],["(*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","accuracy",10.46700747169604]],"memory":[[2327056,59231136]],"mixsample":[[0.560302734375,"ival-add",1200],[26.75537109375,"ival-div",0],[15.264892578125,"adjust",800],[3.5654296875,"ival-div",400],[3.288330078125,"ival-sqrt",800],[0.411865234375,"ival-div",1600],[0.11767578125,"ival-assert",0],[9.48388671875,"ival-sub",0],[0.004150390625,"ival-sub",400],[5.9130859375,"ival-sqrt",0],[1.78515625,"adjust",2000],[27.063720703125,"ival-pow",0],[6.271728515625,"ival-add",0],[0.446044921875,"ival-sqrt",1600],[14.99365234375,"ival-mult",0],[0.015869140625,"ival-add",1600],[0.0693359375,"ival-add",400],[0.259033203125,"ival-true",0],[0.485595703125,"exact",0],[0.51416015625,"ival-add",800],[1.29248046875,"ival-sqrt",400],[2.515869140625,"ival-neg",0]],"outcomes":[[135.575439453125,1,"valid",220],[26.343505859375,2,"valid",32],[1.06982421875,0,"valid",4]],"time":202.884033203125,"type":"localize"},{"count":[[22,132]],"inputs":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(/.f64 (/.f64 #s(literal -1/2 binary64) x) x)","(/.f64 #s(literal -1/2 binary64) x)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x))))","(/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x))","(/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x)))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(-.f64 (+.f64 x #s(literal 1 binary64)) x)","(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(+.f64 x #s(literal 1 binary64))","(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))"]],"memory":[[183936,9415936]],"outputs":[["(sqrt (/ 1 x))","(/ (+ (sqrt x) (* -1 x)) x)","(/ (+ (sqrt x) (* x (- (* 1/2 x) 1))) x)","(/ (+ (sqrt x) (* x (- (* x (+ 1/2 (* -3/8 x))) 1))) x)","(* -1/2 (sqrt (/ 1 (pow x 5))))","(/ (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 3))","(/ -1/2 (pow x 2))","(/ -1/2 x)","(/ 1 x)","(* (sqrt (/ 1 x)) (- 1 (sqrt x)))","(/ (+ (* 1/2 (sqrt (pow x 3))) (* (sqrt x) (- 1 (sqrt x)))) x)","(/ (+ (* x (+ (* 1/2 (sqrt x)) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (- 1 (sqrt x)))) (* -1/8 (sqrt x)))))) (* (sqrt x) (- 1 (sqrt x)))) x)","(/ (+ (* x (+ (* 1/2 (sqrt x)) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (- 1 (sqrt x)))) (+ (* -1/8 (sqrt x)) (* x (+ (* -1/4 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt x)) (* 1/2 (* (sqrt (/ 1 x)) (- 1 (sqrt x)))))))))))) (* (sqrt x) (- 1 (sqrt x)))) x)","(/ (+ (* x (+ (* -1/8 (sqrt (pow x 3))) (* 1/2 (sqrt x)))) (* (sqrt x) (- 1 (sqrt x)))) x)","(/ (+ (* x (+ (* 1/2 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/16 (sqrt (pow x 3))))))) (* (sqrt x) (- 1 (sqrt x)))) x)","(* (sqrt x) (/ 1 (- 1 (sqrt x))))","(+ (* -1/2 (* (sqrt (pow x 3)) (/ 1 (pow (- 1 (sqrt x)) 2)))) (* (sqrt x) (/ 1 (- 1 (sqrt x)))))","(+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (- 1 (sqrt x)) 2)))) (* x (+ (* 1/2 (* (sqrt (/ 1 x)) (/ 1 (- 1 (sqrt x))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (- 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (- 1 (sqrt x)) 3))))))))) (* (sqrt x) (/ 1 (- 1 (sqrt x)))))","(+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (- 1 (sqrt x)) 2)))) (* x (+ (* 1/2 (* (sqrt (/ 1 x)) (/ 1 (- 1 (sqrt x))))) (+ (* x (+ (* -1 (* (sqrt x) (+ (* 1/16 (/ 1 (pow (- 1 (sqrt x)) 2))) (+ (* 1/2 (/ (+ (* 1/8 (/ 1 (pow (- 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (- 1 (sqrt x)) 3)))) (- 1 (sqrt x)))) (* 1/16 (/ 1 (pow (- 1 (sqrt x)) 3))))))) (* -1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (- 1 (sqrt x)) 2)))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (- 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (- 1 (sqrt x)) 3)))))))))) (* (sqrt x) (/ 1 (- 1 (sqrt x)))))","1","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* -1/8 x))))","(+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8)))))","-1","(- (* 1/2 x) 1)","(- (* x (+ 1/2 (* -3/8 x))) 1)","(- (* x (+ 1/2 (* x (- (* 5/16 x) 3/8)))) 1)","(* -1 (* (sqrt x) (+ 1 (sqrt x))))","(+ (* -1 (* (sqrt x) (+ 1 (sqrt x)))) (* -1/2 (sqrt (pow x 3))))","(+ (* -1 (* (sqrt x) (+ 1 (sqrt x)))) (* x (+ (* -1/2 (sqrt x)) (* 1/8 (sqrt (pow x 3))))))","(+ (* -1 (* (sqrt x) (+ 1 (sqrt x)))) (* x (+ (* -1/2 (sqrt x)) (* x (+ (* -1/16 (sqrt (pow x 3))) (* 1/8 (sqrt x)))))))","(* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))","(/ (+ (* -1/2 (* (sqrt (pow x 3)) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/ (+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3))))))))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/ (+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))) (+ (* x (+ (* -1 (* (sqrt x) (+ (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 2))) (+ (* 1/2 (/ (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))) (+ 1 (sqrt x)))) (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 3))))))) (+ (* 1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* 1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x)))))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))))))))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/ (+ (sqrt x) (* -1/2 (sqrt (pow x 3)))) x)","(/ (+ (sqrt x) (* (pow x 2) (+ (* -1/2 (sqrt (/ 1 x))) (* 1/2 (sqrt x))))) x)","(/ (+ (sqrt x) (* (pow x 2) (+ (* -1/2 (sqrt (/ 1 x))) (* x (+ (* -1/2 (* (sqrt x) (+ 1 (* 1/4 (/ 1 x))))) (* 1/2 (sqrt (/ 1 x)))))))) x)","(+ 1 x)","(- 1 (sqrt x))","(- (+ 1 (* 1/2 x)) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","(+ 1 (sqrt x))","(+ 1 (+ (sqrt x) (* 1/2 x)))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* -1/8 x)))))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))))","(* 1/2 (sqrt (/ 1 (pow x 3))))","(/ (- (* -1/2 (sqrt (/ 1 x))) (* -1/2 (sqrt x))) (pow x 2))","(/ (- (* 1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (/ 1 x))))) (pow x 2))","(/ (- (* -1/2 (* (sqrt (/ 1 (pow x 5))) (+ 1 (* 1/2 x)))) (+ (* -1/2 (sqrt x)) (+ (* -1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 x)))))) (pow x 2))","(/ (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))) x)","(/ (+ (* -1/4 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 3/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) (pow x 2))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (+ (* -5/32 (sqrt (/ 1 (pow x 5)))) (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (+ (* 3/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))))) (pow x 2))","(/ 1/2 x)","(/ (- 1/2 (* 1/8 (/ 1 x))) x)","(/ (- (+ 1/2 (* 1/16 (/ 1 (pow x 2)))) (/ 1/8 x)) x)","(/ (- (+ 1/2 (* 1/16 (/ 1 (pow x 2)))) (+ (/ 1/8 x) (* 5/128 (/ 1 (pow x 3))))) x)","(* 2 (sqrt (pow x 3)))","(* (pow x 2) (+ (sqrt (/ 1 (pow x 3))) (* 2 (sqrt (/ 1 x)))))","(* (pow x 2) (+ (sqrt (/ 1 (pow x 3))) (+ (* -1/4 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))))","(* (pow x 2) (+ (sqrt (/ 1 (pow x 3))) (+ (* -1/4 (sqrt (/ 1 (pow x 5)))) (+ (* 1/8 (sqrt (/ 1 (pow x 7)))) (+ (* 1/4 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))))))","(sqrt x)","(* x (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3)))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))))","(* -1 (sqrt (/ 1 x)))","(+ (* -1 (sqrt (/ 1 x))) (* 1/2 (sqrt (/ 1 (pow x 3)))))","(+ (* -1 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(+ (* -1 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (* (sqrt (/ 1 (pow x 7))) (+ 1 (* 1/4 x)))))))","(* -2 x)","(* -1 (* (pow x 2) (+ (* 2 (/ 1 x)) (* 1/2 (/ 1 (pow x 2))))))","(* (pow x 2) (- (/ 1/8 (pow x 3)) (+ (* 2 (/ 1 x)) (* 1/2 (/ 1 (pow x 2))))))","(* (pow x 2) (- (* 1/8 (/ 1 (pow x 3))) (+ (/ 1/16 (pow x 4)) (+ (* 2 (/ 1 x)) (* 1/2 (/ 1 (pow x 2)))))))","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 3/8 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 3/8 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 5/16 (/ 1 (pow x 3))))) x)","x","(* x (+ 1 (/ 1 x)))","(* 1/2 (sqrt (/ 1 x)))","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(* 2 (sqrt x))","(* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x))))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))))","(- (sqrt (/ 1 x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 5))))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(- (+ (sqrt (/ 1 x)) (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* -1/2 (sqrt x))) (pow x 3)))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(/ (+ (* 1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2))))) x)) (* -1/4 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/2 (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* 1/16 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 4))))) x)) (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))))) x)) (* -1/4 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/ -1/2 (* x (pow (sqrt -1) 2)))","(* -1 (/ (+ (* 1/8 (/ 1 (* x (pow (sqrt -1) 4)))) (* 1/2 (/ 1 (pow (sqrt -1) 2)))) x))","(* -1 (/ (- (+ (/ 1/16 (* (pow x 2) (pow (sqrt -1) 6))) (* 1/2 (/ 1 (pow (sqrt -1) 2)))) (/ -1/8 (* x (pow (sqrt -1) 4)))) x))","(* -1 (/ (- (+ (* 1/16 (/ 1 (* (pow x 2) (pow (sqrt -1) 6)))) (+ (* 5/128 (/ 1 (* (pow x 3) (pow (sqrt -1) 8)))) (* 1/2 (/ 1 (pow (sqrt -1) 2))))) (/ -1/8 (* x (pow (sqrt -1) 4)))) x))","(* 2 (* (sqrt (pow x 3)) (pow (sqrt -1) 4)))","(* (pow x 2) (+ (* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 4)))))","(* (pow x 2) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (sqrt (/ 1 x))) (* 1/2 (* (sqrt x) (pow (sqrt -1) 2)))) x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x)) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 4)))))","(* (pow x 2) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/4 (sqrt x))) x)) (+ (* -1/4 (sqrt (/ 1 x))) (* 1/2 (* (sqrt x) (pow (sqrt -1) 2))))) x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x)) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 4)))))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (sqrt (/ 1 (pow x 3)))))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* 1/2 (sqrt x))) (pow x 3))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(* 2 (* x (pow (sqrt -1) 2)))","(* (pow x 2) (- (* 2 (/ (pow (sqrt -1) 2) x)) (* 1/2 (/ 1 (pow x 2)))))","(* (pow x 2) (+ (* -1 (/ (+ 1/2 (* 1/8 (/ 1 (* x (pow (sqrt -1) 2))))) (pow x 2))) (* 2 (/ (pow (sqrt -1) 2) x))))","(* (pow x 2) (- (* 2 (/ (pow (sqrt -1) 2) x)) (+ (* 1/8 (/ 1 (* (pow x 3) (pow (sqrt -1) 2)))) (+ (* 1/16 (/ 1 (* (pow x 4) (pow (sqrt -1) 4)))) (* 1/2 (/ 1 (pow x 2)))))))","(/ -1 x)","(* -1 (/ (- 1 (* 1/2 (/ 1 x))) x))","(* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 3/8 (/ 1 x))) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 3/8 (* 5/16 (/ 1 x))) x))) x))) x))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 3/16 (sqrt x))) x)) (* 1/4 (sqrt x))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/16 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 5/32 (sqrt x))) x)) (+ (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 3/16 (sqrt x)))) x)) (* 1/4 (sqrt x))) x)) (* 1/2 (sqrt x))) (pow x 2))","(* -1/2 (sqrt (/ 1 x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(* -2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))))"]],"series":[[11.528076171875,"((- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (* (/ (/ -1/2 x) x) (- (sqrt (/ 1 x)) (sqrt x))) (/ (/ -1/2 x) x) (/ -1/2 x) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt (/ 1 x)) (/ 1 x) (/ 1 (/ (sqrt (+ x 1)) (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt x)))) (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt x)) (/ (sqrt (+ x 1)) (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt x))) (sqrt (+ x 1)) (- (+ x 1) x) (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (/ (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x)))) (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/ (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (+ (sqrt x) (sqrt (+ x 1)))) (+ x 1) (- (sqrt (+ x 1)) (sqrt x)) (/ -1 (sqrt (+ x 1))) (pow (+ (* x x) x) -1/2) (+ (sqrt x) (sqrt (+ x 1))))","x","-inf"],[6.260009765625,"((- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (* (/ (/ -1/2 x) x) (- (sqrt (/ 1 x)) (sqrt x))) (/ (/ -1/2 x) x) (/ -1/2 x) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt (/ 1 x)) (/ 1 x) (/ 1 (/ (sqrt (+ x 1)) (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt x)))) (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt x)) (/ (sqrt (+ x 1)) (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt x))) (sqrt (+ x 1)) (- (+ x 1) x) (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (/ (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x)))) (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/ (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (+ (sqrt x) (sqrt (+ x 1)))) (+ x 1) (- (sqrt (+ x 1)) (sqrt x)) (/ -1 (sqrt (+ x 1))) (pow (+ (* x x) x) -1/2) (+ (sqrt x) (sqrt (+ x 1))))","x","inf"],[8.10986328125,"((- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (* (/ (/ -1/2 x) x) (- (sqrt (/ 1 x)) (sqrt x))) (/ (/ -1/2 x) x) (/ -1/2 x) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt (/ 1 x)) (/ 1 x) (/ 1 (/ (sqrt (+ x 1)) (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt x)))) (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt x)) (/ (sqrt (+ x 1)) (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt x))) (sqrt (+ x 1)) (- (+ x 1) x) (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (/ (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x)))) (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/ (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (+ (sqrt x) (sqrt (+ x 1)))) (+ x 1) (- (sqrt (+ x 1)) (sqrt x)) (/ -1 (sqrt (+ x 1))) (pow (+ (* x x) x) -1/2) (+ (sqrt x) (sqrt (+ x 1))))","x","0"]],"time":30.421875,"type":"series"},{"count":[[132,131]],"egraph":[[0,8264,2401,0.102414529],[2,6065,2553,0.02662748],[1,1858,2603,0.020465425],[0,617,3042,0.006356785]],"inputs":[["(sqrt (/ 1 x))","(/ (+ (sqrt x) (* -1 x)) x)","(/ (+ (sqrt x) (* x (- (* 1/2 x) 1))) x)","(/ (+ (sqrt x) (* x (- (* x (+ 1/2 (* -3/8 x))) 1))) x)","(* -1/2 (sqrt (/ 1 (pow x 5))))","(/ (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 3))","(/ -1/2 (pow x 2))","(/ -1/2 x)","(/ 1 x)","(* (sqrt (/ 1 x)) (- 1 (sqrt x)))","(/ (+ (* 1/2 (sqrt (pow x 3))) (* (sqrt x) (- 1 (sqrt x)))) x)","(/ (+ (* x (+ (* 1/2 (sqrt x)) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (- 1 (sqrt x)))) (* -1/8 (sqrt x)))))) (* (sqrt x) (- 1 (sqrt x)))) x)","(/ (+ (* x (+ (* 1/2 (sqrt x)) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (- 1 (sqrt x)))) (+ (* -1/8 (sqrt x)) (* x (+ (* -1/4 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt x)) (* 1/2 (* (sqrt (/ 1 x)) (- 1 (sqrt x)))))))))))) (* (sqrt x) (- 1 (sqrt x)))) x)","(/ (+ (* x (+ (* -1/8 (sqrt (pow x 3))) (* 1/2 (sqrt x)))) (* (sqrt x) (- 1 (sqrt x)))) x)","(/ (+ (* x (+ (* 1/2 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/16 (sqrt (pow x 3))))))) (* (sqrt x) (- 1 (sqrt x)))) x)","(* (sqrt x) (/ 1 (- 1 (sqrt x))))","(+ (* -1/2 (* (sqrt (pow x 3)) (/ 1 (pow (- 1 (sqrt x)) 2)))) (* (sqrt x) (/ 1 (- 1 (sqrt x)))))","(+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (- 1 (sqrt x)) 2)))) (* x (+ (* 1/2 (* (sqrt (/ 1 x)) (/ 1 (- 1 (sqrt x))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (- 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (- 1 (sqrt x)) 3))))))))) (* (sqrt x) (/ 1 (- 1 (sqrt x)))))","(+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (- 1 (sqrt x)) 2)))) (* x (+ (* 1/2 (* (sqrt (/ 1 x)) (/ 1 (- 1 (sqrt x))))) (+ (* x (+ (* -1 (* (sqrt x) (+ (* 1/16 (/ 1 (pow (- 1 (sqrt x)) 2))) (+ (* 1/2 (/ (+ (* 1/8 (/ 1 (pow (- 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (- 1 (sqrt x)) 3)))) (- 1 (sqrt x)))) (* 1/16 (/ 1 (pow (- 1 (sqrt x)) 3))))))) (* -1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (- 1 (sqrt x)) 2)))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (- 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (- 1 (sqrt x)) 3)))))))))) (* (sqrt x) (/ 1 (- 1 (sqrt x)))))","1","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* -1/8 x))))","(+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8)))))","-1","(- (* 1/2 x) 1)","(- (* x (+ 1/2 (* -3/8 x))) 1)","(- (* x (+ 1/2 (* x (- (* 5/16 x) 3/8)))) 1)","(* -1 (* (sqrt x) (+ 1 (sqrt x))))","(+ (* -1 (* (sqrt x) (+ 1 (sqrt x)))) (* -1/2 (sqrt (pow x 3))))","(+ (* -1 (* (sqrt x) (+ 1 (sqrt x)))) (* x (+ (* -1/2 (sqrt x)) (* 1/8 (sqrt (pow x 3))))))","(+ (* -1 (* (sqrt x) (+ 1 (sqrt x)))) (* x (+ (* -1/2 (sqrt x)) (* x (+ (* -1/16 (sqrt (pow x 3))) (* 1/8 (sqrt x)))))))","(* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))","(/ (+ (* -1/2 (* (sqrt (pow x 3)) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/ (+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3))))))))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/ (+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))) (+ (* x (+ (* -1 (* (sqrt x) (+ (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 2))) (+ (* 1/2 (/ (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))) (+ 1 (sqrt x)))) (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 3))))))) (+ (* 1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* 1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x)))))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))))))))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/ (+ (sqrt x) (* -1/2 (sqrt (pow x 3)))) x)","(/ (+ (sqrt x) (* (pow x 2) (+ (* -1/2 (sqrt (/ 1 x))) (* 1/2 (sqrt x))))) x)","(/ (+ (sqrt x) (* (pow x 2) (+ (* -1/2 (sqrt (/ 1 x))) (* x (+ (* -1/2 (* (sqrt x) (+ 1 (* 1/4 (/ 1 x))))) (* 1/2 (sqrt (/ 1 x)))))))) x)","(+ 1 x)","(- 1 (sqrt x))","(- (+ 1 (* 1/2 x)) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","(+ 1 (sqrt x))","(+ 1 (+ (sqrt x) (* 1/2 x)))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* -1/8 x)))))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))))","(* 1/2 (sqrt (/ 1 (pow x 3))))","(/ (- (* -1/2 (sqrt (/ 1 x))) (* -1/2 (sqrt x))) (pow x 2))","(/ (- (* 1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (/ 1 x))))) (pow x 2))","(/ (- (* -1/2 (* (sqrt (/ 1 (pow x 5))) (+ 1 (* 1/2 x)))) (+ (* -1/2 (sqrt x)) (+ (* -1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 x)))))) (pow x 2))","(/ (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))) x)","(/ (+ (* -1/4 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 3/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) (pow x 2))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (+ (* -5/32 (sqrt (/ 1 (pow x 5)))) (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (+ (* 3/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))))) (pow x 2))","(/ 1/2 x)","(/ (- 1/2 (* 1/8 (/ 1 x))) x)","(/ (- (+ 1/2 (* 1/16 (/ 1 (pow x 2)))) (/ 1/8 x)) x)","(/ (- (+ 1/2 (* 1/16 (/ 1 (pow x 2)))) (+ (/ 1/8 x) (* 5/128 (/ 1 (pow x 3))))) x)","(* 2 (sqrt (pow x 3)))","(* (pow x 2) (+ (sqrt (/ 1 (pow x 3))) (* 2 (sqrt (/ 1 x)))))","(* (pow x 2) (+ (sqrt (/ 1 (pow x 3))) (+ (* -1/4 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))))","(* (pow x 2) (+ (sqrt (/ 1 (pow x 3))) (+ (* -1/4 (sqrt (/ 1 (pow x 5)))) (+ (* 1/8 (sqrt (/ 1 (pow x 7)))) (+ (* 1/4 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))))))","(sqrt x)","(* x (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3)))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))))","(* -1 (sqrt (/ 1 x)))","(+ (* -1 (sqrt (/ 1 x))) (* 1/2 (sqrt (/ 1 (pow x 3)))))","(+ (* -1 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(+ (* -1 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (* (sqrt (/ 1 (pow x 7))) (+ 1 (* 1/4 x)))))))","(* -2 x)","(* -1 (* (pow x 2) (+ (* 2 (/ 1 x)) (* 1/2 (/ 1 (pow x 2))))))","(* (pow x 2) (- (/ 1/8 (pow x 3)) (+ (* 2 (/ 1 x)) (* 1/2 (/ 1 (pow x 2))))))","(* (pow x 2) (- (* 1/8 (/ 1 (pow x 3))) (+ (/ 1/16 (pow x 4)) (+ (* 2 (/ 1 x)) (* 1/2 (/ 1 (pow x 2)))))))","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 3/8 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 3/8 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 5/16 (/ 1 (pow x 3))))) x)","x","(* x (+ 1 (/ 1 x)))","(* 1/2 (sqrt (/ 1 x)))","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(* 2 (sqrt x))","(* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x))))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))))","(- (sqrt (/ 1 x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 5))))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(- (+ (sqrt (/ 1 x)) (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* -1/2 (sqrt x))) (pow x 3)))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(/ (+ (* 1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2))))) x)) (* -1/4 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/2 (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* 1/16 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 4))))) x)) (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))))) x)) (* -1/4 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/ -1/2 (* x (pow (sqrt -1) 2)))","(* -1 (/ (+ (* 1/8 (/ 1 (* x (pow (sqrt -1) 4)))) (* 1/2 (/ 1 (pow (sqrt -1) 2)))) x))","(* -1 (/ (- (+ (/ 1/16 (* (pow x 2) (pow (sqrt -1) 6))) (* 1/2 (/ 1 (pow (sqrt -1) 2)))) (/ -1/8 (* x (pow (sqrt -1) 4)))) x))","(* -1 (/ (- (+ (* 1/16 (/ 1 (* (pow x 2) (pow (sqrt -1) 6)))) (+ (* 5/128 (/ 1 (* (pow x 3) (pow (sqrt -1) 8)))) (* 1/2 (/ 1 (pow (sqrt -1) 2))))) (/ -1/8 (* x (pow (sqrt -1) 4)))) x))","(* 2 (* (sqrt (pow x 3)) (pow (sqrt -1) 4)))","(* (pow x 2) (+ (* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 4)))))","(* (pow x 2) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (sqrt (/ 1 x))) (* 1/2 (* (sqrt x) (pow (sqrt -1) 2)))) x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x)) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 4)))))","(* (pow x 2) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/4 (sqrt x))) x)) (+ (* -1/4 (sqrt (/ 1 x))) (* 1/2 (* (sqrt x) (pow (sqrt -1) 2))))) x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x)) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 4)))))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (sqrt (/ 1 (pow x 3)))))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* 1/2 (sqrt x))) (pow x 3))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(* 2 (* x (pow (sqrt -1) 2)))","(* (pow x 2) (- (* 2 (/ (pow (sqrt -1) 2) x)) (* 1/2 (/ 1 (pow x 2)))))","(* (pow x 2) (+ (* -1 (/ (+ 1/2 (* 1/8 (/ 1 (* x (pow (sqrt -1) 2))))) (pow x 2))) (* 2 (/ (pow (sqrt -1) 2) x))))","(* (pow x 2) (- (* 2 (/ (pow (sqrt -1) 2) x)) (+ (* 1/8 (/ 1 (* (pow x 3) (pow (sqrt -1) 2)))) (+ (* 1/16 (/ 1 (* (pow x 4) (pow (sqrt -1) 4)))) (* 1/2 (/ 1 (pow x 2)))))))","(/ -1 x)","(* -1 (/ (- 1 (* 1/2 (/ 1 x))) x))","(* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 3/8 (/ 1 x))) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 3/8 (* 5/16 (/ 1 x))) x))) x))) x))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 3/16 (sqrt x))) x)) (* 1/4 (sqrt x))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/16 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 5/32 (sqrt x))) x)) (+ (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 3/16 (sqrt x)))) x)) (* 1/4 (sqrt x))) x)) (* 1/2 (sqrt x))) (pow x 2))","(* -1/2 (sqrt (/ 1 x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(* -2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))))"]],"memory":[[6025136,50705568]],"method":["egg-herbie"],"outputs":[["(sqrt (/ 1 x))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/ (+ (sqrt x) (* -1 x)) x)","(/.f64 (-.f64 (sqrt.f64 x) x) x)","(/ (+ (sqrt x) (* x (- (* 1/2 x) 1))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x (sqrt.f64 x)) x)","(/ (+ (sqrt x) (* x (- (* x (+ 1/2 (* -3/8 x))) 1))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -3/8 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x (sqrt.f64 x)) x)","(* -1/2 (sqrt (/ 1 (pow x 5))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/2 binary64))","(/ (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 3))","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64)))","(/ -1/2 (pow x 2))","(/.f64 (/.f64 #s(literal -1/2 binary64) x) x)","(/ -1/2 x)","(/.f64 #s(literal -1/2 binary64) x)","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(* (sqrt (/ 1 x)) (- 1 (sqrt x)))","(*.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(/ (+ (* 1/2 (sqrt (pow x 3))) (* (sqrt x) (- 1 (sqrt x)))) x)","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (-.f64 (sqrt.f64 x) x)) x)","(/ (+ (* x (+ (* 1/2 (sqrt x)) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (- 1 (sqrt x)))) (* -1/8 (sqrt x)))))) (* (sqrt x) (- 1 (sqrt x)))) x)","(/.f64 (fma.f64 (fma.f64 (*.f64 x #s(literal -1/2 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/2 binary64)))) x (-.f64 (sqrt.f64 x) x)) x)","(/ (+ (* x (+ (* 1/2 (sqrt x)) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (- 1 (sqrt x)))) (+ (* -1/8 (sqrt x)) (* x (+ (* -1/4 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt x)) (* 1/2 (* (sqrt (/ 1 x)) (- 1 (sqrt x)))))))))))) (* (sqrt x) (- 1 (sqrt x)))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 #s(literal 1 binary64) (sqrt.f64 x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 (fma.f64 #s(literal 1/16 binary64) (sqrt.f64 x) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64) #s(literal -1/4 binary64)))) x (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) x (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x (-.f64 (sqrt.f64 x) x)) x)","(/ (+ (* x (+ (* -1/8 (sqrt (pow x 3))) (* 1/2 (sqrt x)))) (* (sqrt x) (- 1 (sqrt x)))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x (-.f64 (sqrt.f64 x) x)) x)","(/ (+ (* x (+ (* 1/2 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/16 (sqrt (pow x 3))))))) (* (sqrt x) (- 1 (sqrt x)))) x)","(/.f64 (fma.f64 (fma.f64 (sqrt.f64 x) (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/2 binary64)) (*.f64 (*.f64 #s(literal 1/16 binary64) x) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))))) x (-.f64 (sqrt.f64 x) x)) x)","(* (sqrt x) (/ 1 (- 1 (sqrt x))))","(/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(+ (* -1/2 (* (sqrt (pow x 3)) (/ 1 (pow (- 1 (sqrt x)) 2)))) (* (sqrt x) (/ 1 (- 1 (sqrt x)))))","(fma.f64 (/.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) (sqrt.f64 x))))","(+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (- 1 (sqrt x)) 2)))) (* x (+ (* 1/2 (* (sqrt (/ 1 x)) (/ 1 (- 1 (sqrt x))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (- 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (- 1 (sqrt x)) 3))))))))) (* (sqrt x) (/ 1 (- 1 (sqrt x)))))","(fma.f64 (fma.f64 (fma.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) #s(literal 3 binary64))) (/.f64 #s(literal 1/8 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) #s(literal 2 binary64)))) (sqrt.f64 x) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) (sqrt.f64 x))) #s(literal 1/2 binary64))) x (/.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) #s(literal 2 binary64)))) x (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) (sqrt.f64 x))))","(+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (- 1 (sqrt x)) 2)))) (* x (+ (* 1/2 (* (sqrt (/ 1 x)) (/ 1 (- 1 (sqrt x))))) (+ (* x (+ (* -1 (* (sqrt x) (+ (* 1/16 (/ 1 (pow (- 1 (sqrt x)) 2))) (+ (* 1/2 (/ (+ (* 1/8 (/ 1 (pow (- 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (- 1 (sqrt x)) 3)))) (- 1 (sqrt x)))) (* 1/16 (/ 1 (pow (- 1 (sqrt x)) 3))))))) (* -1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (- 1 (sqrt x)) 2)))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (- 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (- 1 (sqrt x)) 3)))))))))) (* (sqrt x) (/ 1 (- 1 (sqrt x)))))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (fma.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) #s(literal 3 binary64))) (/.f64 #s(literal 1/8 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (sqrt.f64 x))) #s(literal 1/2 binary64) (/.f64 #s(literal 1/16 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) #s(literal 3 binary64)))) (/.f64 #s(literal 1/16 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) #s(literal 2 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) #s(literal 2 binary64))) #s(literal -1/4 binary64))) x (fma.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) #s(literal 3 binary64))) (/.f64 #s(literal 1/8 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) #s(literal 2 binary64)))) (sqrt.f64 x) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) (sqrt.f64 x))) #s(literal 1/2 binary64)))) x (/.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) #s(literal 2 binary64)))) x (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) (sqrt.f64 x))))","1","#s(literal 1 binary64)","(+ 1 (* 1/2 x))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/2 (* -1/8 x))))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/16 binary64) x #s(literal -1/8 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","-1","#s(literal -1 binary64)","(- (* 1/2 x) 1)","(fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))","(- (* x (+ 1/2 (* -3/8 x))) 1)","(fma.f64 (fma.f64 #s(literal -3/8 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(- (* x (+ 1/2 (* x (- (* 5/16 x) 3/8)))) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal 5/16 binary64) x #s(literal -3/8 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(* -1 (* (sqrt x) (+ 1 (sqrt x))))","(neg.f64 (+.f64 (sqrt.f64 x) x))","(+ (* -1 (* (sqrt x) (+ 1 (sqrt x)))) (* -1/2 (sqrt (pow x 3))))","(fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal -1/2 binary64) (neg.f64 (+.f64 (sqrt.f64 x) x)))","(+ (* -1 (* (sqrt x) (+ 1 (sqrt x)))) (* x (+ (* -1/2 (sqrt x)) (* 1/8 (sqrt (pow x 3))))))","(fma.f64 (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) x (neg.f64 (+.f64 (sqrt.f64 x) x)))","(+ (* -1 (* (sqrt x) (+ 1 (sqrt x)))) (* x (+ (* -1/2 (sqrt x)) (* x (+ (* -1/16 (sqrt (pow x 3))) (* 1/8 (sqrt x)))))))","(fma.f64 (fma.f64 (*.f64 x #s(literal -1/16 binary64)) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/8 binary64) x #s(literal -1/2 binary64)))) x (neg.f64 (+.f64 (sqrt.f64 x) x)))","(* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))","(/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(/ (+ (* -1/2 (* (sqrt (pow x 3)) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/.f64 (fma.f64 (/.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 (sqrt.f64 x) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))) x)","(/ (+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3))))))))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) (/.f64 #s(literal 1/8 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (sqrt.f64 x) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) #s(literal -1/2 binary64))) x (/.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) x (/.f64 (sqrt.f64 x) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))) x)","(/ (+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))) (+ (* x (+ (* -1 (* (sqrt x) (+ (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 2))) (+ (* 1/2 (/ (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))) (+ 1 (sqrt x)))) (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 3))))))) (+ (* 1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* 1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x)))))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))))))))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (fma.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) (/.f64 #s(literal 1/8 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) #s(literal 1/2 binary64) (/.f64 #s(literal 1/16 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64)))) (/.f64 #s(literal 1/16 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 (/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal 1/4 binary64))))) x (fma.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) (/.f64 #s(literal 1/8 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (sqrt.f64 x) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) #s(literal -1/2 binary64)))) x (/.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) x (/.f64 (sqrt.f64 x) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))) x)","(/ (+ (sqrt x) (* -1/2 (sqrt (pow x 3)))) x)","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal -1/2 binary64) (sqrt.f64 x)) x)","(/ (+ (sqrt x) (* (pow x 2) (+ (* -1/2 (sqrt (/ 1 x))) (* 1/2 (sqrt x))))) x)","(/.f64 (fma.f64 (*.f64 (*.f64 x x) #s(literal -1/2 binary64)) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (sqrt.f64 x)) x)","(/ (+ (sqrt x) (* (pow x 2) (+ (* -1/2 (sqrt (/ 1 x))) (* x (+ (* -1/2 (* (sqrt x) (+ 1 (* 1/4 (/ 1 x))))) (* 1/2 (sqrt (/ 1 x)))))))) x)","(/.f64 (fma.f64 (fma.f64 (*.f64 x #s(literal -1/2 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1 binary64)) (sqrt.f64 x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1/2 binary64)))) (*.f64 x x) (sqrt.f64 x)) x)","(+ 1 x)","(+.f64 x #s(literal 1 binary64))","(- 1 (sqrt x))","(-.f64 #s(literal 1 binary64) (sqrt.f64 x))","(- (+ 1 (* 1/2 x)) (sqrt x))","(fma.f64 #s(literal 1/2 binary64) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(- (+ 1 (* x (+ 1/2 (* -1/8 x)))) (sqrt x))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/2 binary64)) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(- (+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))) (sqrt x))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/16 binary64) x #s(literal -1/8 binary64)) x #s(literal 1/2 binary64)) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(+ 1 (sqrt x))","(+.f64 (sqrt.f64 x) #s(literal 1 binary64))","(+ 1 (+ (sqrt x) (* 1/2 x)))","(fma.f64 #s(literal 1/2 binary64) x (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* -1/8 x)))))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/2 binary64)) x (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/16 binary64) x #s(literal -1/8 binary64)) x #s(literal 1/2 binary64)) x (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(* 1/2 (sqrt (/ 1 (pow x 3))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))","(/ (- (* -1/2 (sqrt (/ 1 x))) (* -1/2 (sqrt x))) (pow x 2))","(*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 x x)))","(/ (- (* 1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (/ 1 x))))) (pow x 2))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 x x))","(/ (- (* -1/2 (* (sqrt (/ 1 (pow x 5))) (+ 1 (* 1/2 x)))) (+ (* -1/2 (sqrt x)) (+ (* -1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 x)))))) (pow x 2))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (fma.f64 #s(literal -1/2 binary64) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))) (*.f64 x x))","(/ (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))) x)","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/2 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)","(/ (+ (* -1/4 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) (pow x 2))","(/.f64 (fma.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 3/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) (pow x 2))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -3/8 binary64) (fma.f64 #s(literal 3/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) (*.f64 x x))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (+ (* -5/32 (sqrt (/ 1 (pow x 5)))) (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (+ (* 3/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))))) (pow x 2))","(/.f64 (fma.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal -5/32 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/4 binary64) (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))))) (*.f64 x x))","(/ 1/2 x)","(/.f64 #s(literal 1/2 binary64) x)","(/ (- 1/2 (* 1/8 (/ 1 x))) x)","(/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/8 binary64) x)) x)","(/ (- (+ 1/2 (* 1/16 (/ 1 (pow x 2)))) (/ 1/8 x)) x)","(/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/16 binary64) (*.f64 x x)) #s(literal 1/2 binary64)) (/.f64 #s(literal 1/8 binary64) x)) x)","(/ (- (+ 1/2 (* 1/16 (/ 1 (pow x 2)))) (+ (/ 1/8 x) (* 5/128 (/ 1 (pow x 3))))) x)","(/.f64 (-.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/16 binary64) (*.f64 x x)) #s(literal 1/2 binary64)) (/.f64 #s(literal 1/8 binary64) x)) (/.f64 #s(literal 5/128 binary64) (pow.f64 x #s(literal 3 binary64)))) x)","(* 2 (sqrt (pow x 3)))","(*.f64 #s(literal 2 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))))","(* (pow x 2) (+ (sqrt (/ 1 (pow x 3))) (* 2 (sqrt (/ 1 x)))))","(*.f64 (fma.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (*.f64 x x))","(* (pow x 2) (+ (sqrt (/ 1 (pow x 3))) (+ (* -1/4 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))))","(*.f64 (+.f64 (fma.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (*.f64 x x))","(* (pow x 2) (+ (sqrt (/ 1 (pow x 3))) (+ (* -1/4 (sqrt (/ 1 (pow x 5)))) (+ (* 1/8 (sqrt (/ 1 (pow x 7)))) (+ (* 1/4 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))))))","(*.f64 (+.f64 (fma.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) #s(literal 1/8 binary64) (fma.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (*.f64 x x))","(sqrt x)","(sqrt.f64 x)","(* x (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3)))))))","(*.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))))","(*.f64 (+.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* -1 (sqrt (/ 1 x)))","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(+ (* -1 (sqrt (/ 1 x))) (* 1/2 (sqrt (/ 1 (pow x 3)))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(+ (* -1 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(-.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/2 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(+ (* -1 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (* (sqrt (/ 1 (pow x 7))) (+ 1 (* 1/4 x)))))))","(-.f64 (fma.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/2 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(* -2 x)","(*.f64 #s(literal -2 binary64) x)","(* -1 (* (pow x 2) (+ (* 2 (/ 1 x)) (* 1/2 (/ 1 (pow x 2))))))","(neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x) #s(literal 1/2 binary64)))","(* (pow x 2) (- (/ 1/8 (pow x 3)) (+ (* 2 (/ 1 x)) (* 1/2 (/ 1 (pow x 2))))))","(fma.f64 (/.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 x x) (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x) #s(literal 1/2 binary64))))","(* (pow x 2) (- (* 1/8 (/ 1 (pow x 3))) (+ (/ 1/16 (pow x 4)) (+ (* 2 (/ 1 x)) (* 1/2 (/ 1 (pow x 2)))))))","(*.f64 (-.f64 (/.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (/.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal 4 binary64))))) (*.f64 x x))","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)","(/ (- (+ 1 (/ 3/8 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) x)","(/ (- (+ 1 (/ 3/8 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 5/16 (/ 1 (pow x 3))))) x)","(/.f64 (-.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 5/16 binary64) (pow.f64 x #s(literal 3 binary64)))) x)","x","(* x (+ 1 (/ 1 x)))","(+.f64 x #s(literal 1 binary64))","(* 1/2 (sqrt (/ 1 x)))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x)","(/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x)))) x)","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) x)","(/ (+ (* -1/8 (sqrt (/ 1 x))) (+ (* -5/128 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) x)","(/.f64 (fma.f64 #s(literal -5/128 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/16 binary64) (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) x)","(* 2 (sqrt x))","(*.f64 #s(literal 2 binary64) (sqrt.f64 x))","(* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x))))))","(*.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))) x)","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) #s(literal 1/16 binary64) (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) x)","(- (sqrt (/ 1 x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(- (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 5))))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))","(- (+ (sqrt (/ 1 x)) (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* -1/2 (sqrt x))) (pow x 3)))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(+.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 (fma.f64 (/.f64 x #s(literal -1 binary64)) #s(literal -1/4 binary64) #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x)))) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))","(* -1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))","(* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x))","(/.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (neg.f64 x))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(/ (+ (* 1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) (pow x 2))","(/.f64 (fma.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2))))) x)) (* -1/4 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/4 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal 3/16 binary64) (sqrt.f64 x))) (neg.f64 x))) (neg.f64 x))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/2 (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* 1/16 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 4))))) x)) (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))))) x)) (* -1/4 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/4 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (fma.f64 #s(literal 3/16 binary64) (sqrt.f64 x) (/.f64 (fma.f64 (/.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) #s(literal 1/16 binary64) (*.f64 #s(literal 5/32 binary64) (sqrt.f64 x))) (neg.f64 x)))) (neg.f64 x))) (neg.f64 x))) (*.f64 x x))","(/ -1/2 (* x (pow (sqrt -1) 2)))","(/.f64 #s(literal 1/2 binary64) x)","(* -1 (/ (+ (* 1/8 (/ 1 (* x (pow (sqrt -1) 4)))) (* 1/2 (/ 1 (pow (sqrt -1) 2)))) x))","(/.f64 (fma.f64 (/.f64 #s(literal 1/8 binary64) (*.f64 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64)) x)) #s(literal -1 binary64) #s(literal 1/2 binary64)) x)","(* -1 (/ (- (+ (/ 1/16 (* (pow x 2) (pow (sqrt -1) 6))) (* 1/2 (/ 1 (pow (sqrt -1) 2)))) (/ -1/8 (* x (pow (sqrt -1) 4)))) x))","(/.f64 (-.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 6 binary64))) (*.f64 x x)) #s(literal -1/2 binary64)) (/.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64)) x))) (neg.f64 x))","(* -1 (/ (- (+ (* 1/16 (/ 1 (* (pow x 2) (pow (sqrt -1) 6)))) (+ (* 5/128 (/ 1 (* (pow x 3) (pow (sqrt -1) 8)))) (* 1/2 (/ 1 (pow (sqrt -1) 2))))) (/ -1/8 (* x (pow (sqrt -1) 4)))) x))","(/.f64 (+.f64 (+.f64 (/.f64 (/.f64 #s(literal 5/128 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal -1/2 binary64) (/.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64)) x)))) (/.f64 (/.f64 #s(literal 1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 6 binary64))) (*.f64 x x))) (neg.f64 x))","(* 2 (* (sqrt (pow x 3)) (pow (sqrt -1) 4)))","(*.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))))","(* (pow x 2) (+ (* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 4)))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (*.f64 x x))","(* (pow x 2) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (sqrt (/ 1 x))) (* 1/2 (* (sqrt x) (pow (sqrt -1) 2)))) x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x)) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 4)))))","(*.f64 (fma.f64 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64)) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) (/.f64 (fma.f64 (/.f64 (fma.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (neg.f64 x)) #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) (*.f64 x x))","(* (pow x 2) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/4 (sqrt x))) x)) (+ (* -1/4 (sqrt (/ 1 x))) (* 1/2 (* (sqrt x) (pow (sqrt -1) 2))))) x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x)) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 4)))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (-.f64 (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) (/.f64 (fma.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal -1/2 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/4 binary64) (sqrt.f64 x))) (neg.f64 x)))) x)) (neg.f64 x))) (*.f64 x x))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(sqrt.f64 x)","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (neg.f64 x))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(*.f64 (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))) (neg.f64 x))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(*.f64 (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) #s(literal 1/16 binary64) (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) (neg.f64 x))","(* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (sqrt (/ 1 (pow x 3)))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* 1/2 (sqrt x))) (pow x 3))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/2 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 x #s(literal -1 binary64)) #s(literal -1/4 binary64) #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64))))))","(* 2 (* x (pow (sqrt -1) 2)))","(*.f64 #s(literal -2 binary64) x)","(* (pow x 2) (- (* 2 (/ (pow (sqrt -1) 2) x)) (* 1/2 (/ 1 (pow x 2)))))","(*.f64 (-.f64 (/.f64 #s(literal -2 binary64) x) (/.f64 #s(literal 1/2 binary64) (*.f64 x x))) (*.f64 x x))","(* (pow x 2) (+ (* -1 (/ (+ 1/2 (* 1/8 (/ 1 (* x (pow (sqrt -1) 2))))) (pow x 2))) (* 2 (/ (pow (sqrt -1) 2) x))))","(*.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/8 binary64) x)) x) #s(literal 2 binary64))) (*.f64 x x))","(* (pow x 2) (- (* 2 (/ (pow (sqrt -1) 2) x)) (+ (* 1/8 (/ 1 (* (pow x 3) (pow (sqrt -1) 2)))) (+ (* 1/16 (/ 1 (* (pow x 4) (pow (sqrt -1) 4)))) (* 1/2 (/ 1 (pow x 2)))))))","(*.f64 (-.f64 (/.f64 #s(literal -2 binary64) x) (+.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (pow.f64 x #s(literal 4 binary64))) (/.f64 #s(literal 1/2 binary64) (*.f64 x x))) (/.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64))))) (*.f64 x x))","(/ -1 x)","(/.f64 #s(literal -1 binary64) x)","(* -1 (/ (- 1 (* 1/2 (/ 1 x))) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) (neg.f64 x))","(* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 3/8 (/ 1 x))) x))) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (neg.f64 x))","(* -1 (/ (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 3/8 (* 5/16 (/ 1 x))) x))) x))) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 3/8 binary64) (/.f64 #s(literal 5/16 binary64) x)) x)) x)) (neg.f64 x))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 3/16 (sqrt x))) x)) (* 1/4 (sqrt x))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/4 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal 3/16 binary64) (sqrt.f64 x))) (neg.f64 x))) (neg.f64 x))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/16 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 5/32 (sqrt x))) x)) (+ (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 3/16 (sqrt x)))) x)) (* 1/4 (sqrt x))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/4 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (fma.f64 #s(literal 3/16 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/16 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal 5/32 binary64) (sqrt.f64 x))) (neg.f64 x)))) (neg.f64 x))) (neg.f64 x))) (*.f64 x x))","(* -1/2 (sqrt (/ 1 x)))","(*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x))","(/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) x)","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x)))) x))","(/.f64 (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) #s(literal 1/16 binary64) (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) (neg.f64 x))","(* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (+ (* -5/128 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 6)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 3))) (/ 1 (pow (sqrt -1) 4)))) (* 1/2 (sqrt x))))) x))","(/.f64 (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 6 binary64))) #s(literal -5/128 binary64) (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) #s(literal 1/16 binary64) (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))))) (neg.f64 x))","(* -2 (* (sqrt x) (pow (sqrt -1) 2)))","(*.f64 #s(literal 2 binary64) (sqrt.f64 x))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(*.f64 (fma.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))) (neg.f64 x))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(*.f64 (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64)))) (neg.f64 x))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))))","(*.f64 (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) #s(literal 1/16 binary64) (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))))) (neg.f64 x))"]],"stop":[["iter limit",1],["node limit",1]],"time":269.5859375,"type":"simplify"},{"count":[[22,1512]],"egraph":[[0,8941,175,0.081728074],[2,2157,176,0.029849825],[1,257,176,0.009319514],[0,61,218,0.002043625],[0,36,228,0.000554695]],"inputs":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(/.f64 (/.f64 #s(literal -1/2 binary64) x) x)","(/.f64 #s(literal -1/2 binary64) x)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x))))","(/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x))","(/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x)))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(-.f64 (+.f64 x #s(literal 1 binary64)) x)","(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(+.f64 x #s(literal 1 binary64))","(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))"]],"memory":[[-5120016,86081296]],"outputs":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x)))","(*.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x))","(*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)))","(*.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) x))","(*.f64 (/.f64 #s(literal -1/2 binary64) x) (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))))","(pow.f64 (/.f64 x (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) x))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) x) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x))) (neg.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x))) (neg.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)))) (neg.f64 (*.f64 x x)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)))) (neg.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 #s(literal 1/2 binary64) x))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal -1/2 binary64))) (neg.f64 (*.f64 x x)))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal 1 binary64))) (neg.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x))))","(/.f64 (neg.f64 (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (pow.f64 x #s(literal -1 binary64)) x))) (neg.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))))) (neg.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) x)))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) x) (/.f64 #s(literal 1/2 binary64) x))) (neg.f64 (*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) x) (/.f64 #s(literal -1/2 binary64) x))) (neg.f64 (*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)) (*.f64 x x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64))) (neg.f64 (*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (/.f64 #s(literal 1/2 binary64) x))) (neg.f64 (*.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (/.f64 #s(literal -1/2 binary64) x))) (neg.f64 (*.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)) (*.f64 x x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) x) (-.f64 (pow.f64 x #s(literal -1 binary64)) x))) (neg.f64 (*.f64 (neg.f64 x) (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) x) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))))) (neg.f64 (*.f64 (neg.f64 x) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) x) (-.f64 (pow.f64 x #s(literal -1 binary64)) x))) (neg.f64 (*.f64 x (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) x) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))))) (neg.f64 (*.f64 x (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 x #s(literal -1 binary64)) x))) (neg.f64 (*.f64 (*.f64 x x) (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))))) (neg.f64 (*.f64 (*.f64 x x) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal -1 binary64)) x))) (neg.f64 (*.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x)) (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))))) (neg.f64 (*.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))) (neg.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) x) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x)) (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))) (neg.f64 x))","(/.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))) (*.f64 x x))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))) (/.f64 x (/.f64 #s(literal -1/2 binary64) x)))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 #s(literal 1/2 binary64) x)) (neg.f64 x))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal -1/2 binary64)) (*.f64 x x))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal 1 binary64)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x)))","(/.f64 (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (pow.f64 x #s(literal -1 binary64)) x)) (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)))","(/.f64 (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) x))) (neg.f64 x))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) x) (/.f64 #s(literal 1/2 binary64) x)) (*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)) (neg.f64 x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) x) (/.f64 #s(literal -1/2 binary64) x)) (*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)) x))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal -1/2 binary64)) (*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)) (*.f64 x x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)) (*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (/.f64 #s(literal 1/2 binary64) x)) (*.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)) (neg.f64 x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (/.f64 #s(literal -1/2 binary64) x)) (*.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)) x))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) #s(literal -1/2 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x))))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) x) (-.f64 (pow.f64 x #s(literal -1 binary64)) x)) (*.f64 (neg.f64 x) (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x))))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) x) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (*.f64 (neg.f64 x) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64))))","(/.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) x) (-.f64 (pow.f64 x #s(literal -1 binary64)) x)) (*.f64 x (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x))))","(/.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) x) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (*.f64 x (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 x #s(literal -1 binary64)) x)) (*.f64 (*.f64 x x) (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x))))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (*.f64 (*.f64 x x) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal -1 binary64)) x)) (*.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x)) (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (*.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64))))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) x)) x)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) x)))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 x (/.f64 #s(literal -1/2 binary64) x)))","(/.f64 #s(literal 1 binary64) (/.f64 x (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) x))))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (*.f64 (neg.f64 (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x)))","(fma.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (neg.f64 (sqrt.f64 x))))","(+.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x)) (*.f64 (neg.f64 (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x)))","(+.f64 (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (pow.f64 x #s(literal -1/2 binary64))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (neg.f64 (sqrt.f64 x))))","(*.f64 (pow.f64 (/.f64 x #s(literal 1/2 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) x))","(*.f64 (/.f64 #s(literal -1/2 binary64) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal -1/2 binary64) (pow.f64 x #s(literal -2 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal -1/2 binary64) x) x))","(pow.f64 (/.f64 (*.f64 x x) #s(literal -1/2 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal -1 binary64))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)) x)","(/.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) (neg.f64 (*.f64 x #s(literal -2 binary64))))","(/.f64 (/.f64 #s(literal 1/2 binary64) x) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (/.f64 #s(literal 1/2 binary64) x) (neg.f64 x))","(/.f64 #s(literal 1/2 binary64) (neg.f64 (*.f64 x x)))","(/.f64 #s(literal 1/2 binary64) (*.f64 (neg.f64 x) x))","(/.f64 #s(literal 1/2 binary64) (*.f64 x (neg.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 x x) #s(literal -1/2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x))))","(/.f64 #s(literal -1 binary64) (*.f64 (*.f64 x #s(literal -2 binary64)) (neg.f64 x)))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x #s(literal -2 binary64)))","(/.f64 (/.f64 #s(literal -1/2 binary64) x) (neg.f64 (neg.f64 x)))","(/.f64 (/.f64 #s(literal -1/2 binary64) x) x)","(/.f64 #s(literal -1/2 binary64) (neg.f64 (neg.f64 (*.f64 x x))))","(/.f64 #s(literal -1/2 binary64) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 #s(literal -1/2 binary64) (neg.f64 (*.f64 x (neg.f64 x))))","(/.f64 #s(literal -1/2 binary64) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (*.f64 x #s(literal -2 binary64)) (neg.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) #s(literal -1/2 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 x (/.f64 #s(literal -1/2 binary64) x)))","(neg.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) x) x))","(exp.f64 (*.f64 (log.f64 (/.f64 x (/.f64 #s(literal -1/2 binary64) x))) #s(literal -1 binary64)))","(*.f64 #s(literal 1/2 binary64) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64))","(*.f64 #s(literal -1/2 binary64) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1/2 binary64) x))","(pow.f64 (/.f64 (*.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 x #s(literal -2 binary64)) #s(literal -1 binary64))","(/.f64 #s(literal 1/2 binary64) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 #s(literal 1/2 binary64) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 x #s(literal -2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 x #s(literal -2 binary64))))","(/.f64 #s(literal -1/2 binary64) (neg.f64 (neg.f64 x)))","(/.f64 #s(literal -1/2 binary64) x)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 x #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 x #s(literal -2 binary64)))","(neg.f64 (/.f64 #s(literal 1/2 binary64) x))","(exp.f64 (*.f64 (log.f64 (*.f64 x #s(literal -2 binary64))) #s(literal -1 binary64)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 x #s(literal -1/4 binary64)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal -1 binary64) x)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1/2 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(pow.f64 (pow.f64 x #s(literal -1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))","(pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/4 binary64))","(pow.f64 (sqrt.f64 x) #s(literal -1 binary64))","(pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64))","(pow.f64 x #s(literal -1/2 binary64))","(/.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (neg.f64 (sqrt.f64 (neg.f64 x))))","(/.f64 (sqrt.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64)))) (sqrt.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (sqrt.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64))) (sqrt.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (sqrt.f64 (sqrt.f64 x)))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x)))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (neg.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 (neg.f64 x))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","(neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(sqrt.f64 (pow.f64 x #s(literal -1 binary64)))","(fabs.f64 (pow.f64 x #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 #s(literal -1/2 binary64) (log.f64 x)))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -2 binary64)) (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) #s(literal 2 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)))","(pow.f64 (neg.f64 (neg.f64 x)) #s(literal -1 binary64))","(pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/2 binary64))","(pow.f64 (sqrt.f64 x) #s(literal -2 binary64))","(pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))","(pow.f64 x #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64)))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64))) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (pow.f64 x #s(literal -1/2 binary64))) (neg.f64 (sqrt.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 #s(literal -1 binary64) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(/.f64 #s(literal -1 binary64) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 x))","(/.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 x)))","(/.f64 #s(literal 1 binary64) x)","(neg.f64 (/.f64 #s(literal -1 binary64) x))","(sqrt.f64 (pow.f64 x #s(literal -2 binary64)))","(fabs.f64 (pow.f64 x #s(literal -1 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (log.f64 x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (neg.f64 (log.f64 x)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 x #s(literal -2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 x)) #s(literal -2 binary64)))","(exp.f64 (neg.f64 (log.f64 x)))","(*.f64 (pow.f64 (/.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)))) #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (pow.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal -1 binary64)) (pow.f64 (/.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (-.f64 x (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))) (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))","(*.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal 1/2 binary64)) (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal 1/2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 x))))","(*.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 x))) (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(*.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)) (-.f64 (+.f64 x #s(literal 1 binary64)) x))","(*.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) (pow.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)))","(*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)) (pow.f64 (pow.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(*.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal 1 binary64))","(*.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(*.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (pow.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(*.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (/.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (pow.f64 (/.f64 #s(literal -1 binary64) (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (/.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x)))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(*.f64 (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x))","(*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(pow.f64 (exp.f64 (neg.f64 (log.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))))) #s(literal -1 binary64))","(pow.f64 (*.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) #s(literal -1 binary64))","(pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal 1 binary64))","(pow.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (/.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x)))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))) (neg.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))) (neg.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (/.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64))) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))","(/.f64 (neg.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (neg.f64 (*.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))))) (neg.f64 (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))) (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (neg.f64 (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))) (neg.f64 (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))) (neg.f64 (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64)))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (-.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x)))) (neg.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) (*.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (*.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))) (*.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x)) (*.f64 (hypot.f64 (sqrt.f64 x) x) (sqrt.f64 x))) (fma.f64 x x x))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (neg.f64 x)) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (sqrt.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (+.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (sqrt.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (neg.f64 x)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (sqrt.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (+.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (sqrt.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (neg.f64 x)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 x)) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (sqrt.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 x)) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (+.f64 (sqrt.f64 x) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (sqrt.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 x)) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (sqrt.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 x)) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (+.f64 (sqrt.f64 x) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (sqrt.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 x)) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 x)) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (+.f64 (sqrt.f64 x) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64)) (sqrt.f64 x))","(/.f64 (/.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))) (+.f64 (+.f64 x #s(literal 1 binary64)) x))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (*.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (/.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64)) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64)) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(/.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (sqrt.f64 x))","(/.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (neg.f64 (neg.f64 (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x))) (neg.f64 (*.f64 (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))) (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (neg.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (hypot.f64 (sqrt.f64 x) x))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (*.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64)) (sqrt.f64 x))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (*.f64 (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(/.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))) (+.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))))","(/.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))) (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (*.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (neg.f64 (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (neg.f64 (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))","(/.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (pow.f64 (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x) #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))))","(/.f64 (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (hypot.f64 (sqrt.f64 x) x))","(/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(neg.f64 (/.f64 (*.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(neg.f64 (/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (sqrt.f64 x)))","(neg.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(neg.f64 (/.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(neg.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) #s(literal -1 binary64)))","(fma.f64 (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 x #s(literal -1/4 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))))","(-.f64 (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64)))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64)))))","(-.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x)) (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x)))","(-.f64 (sqrt.f64 (/.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x) (+.f64 x #s(literal 1 binary64)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (neg.f64 (log.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))) #s(literal -1 binary64)))","(+.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (pow.f64 x #s(literal -1/2 binary64)))","(+.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (pow.f64 (pow.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (pow.f64 (/.f64 (sqrt.f64 x) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal -1 binary64)) (pow.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (sqrt.f64 x) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x))","(pow.f64 (/.f64 (pow.f64 (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x) #s(literal 1 binary64))","(/.f64 (neg.f64 (/.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 x #s(literal -1/2 binary64)))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 x #s(literal -1/2 binary64)))) (neg.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (-.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (neg.f64 (+.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 3/2 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x) (+.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (sqrt.f64 x))))","(/.f64 (neg.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x)) (neg.f64 x))","(/.f64 (/.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64)) (sqrt.f64 x))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 x #s(literal -1/2 binary64))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 x #s(literal -1/2 binary64))) (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal 1 binary64)) (sqrt.f64 x))","(/.f64 (-.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)) (+.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 3/2 binary64)) #s(literal 1 binary64)) (+.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x) (+.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x))) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (*.f64 (sqrt.f64 x) (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))))","(/.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (neg.f64 (sqrt.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (sqrt.f64 x)))","(/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x)","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (*.f64 (sqrt.f64 x) (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (neg.f64 (sqrt.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x) #s(literal -1 binary64))))","(/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))","(/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x)))","(fma.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64))","(expm1.f64 (-.f64 (*.f64 (log1p.f64 x) #s(literal 1/2 binary64)) (log.f64 (sqrt.f64 x))))","(expm1.f64 (fma.f64 (log1p.f64 x) #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (log.f64 x))))","(-.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64))","(exp.f64 (*.f64 (log.f64 (pow.f64 (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal -1 binary64))","(*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (-.f64 x (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64)) (sqrt.f64 x))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64)) (pow.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64)) (pow.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64)) #s(literal -1 binary64)) (sqrt.f64 x))","(*.f64 (pow.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)) #s(literal -1 binary64)) (pow.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)))) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (neg.f64 (sqrt.f64 x)))","(*.f64 (pow.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (/.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (/.f64 (neg.f64 (sqrt.f64 x)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)))","(*.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (/.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (/.f64 (neg.f64 (sqrt.f64 x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(*.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (sqrt.f64 x))","(*.f64 (pow.f64 (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x) #s(literal -1 binary64)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)) #s(literal -1 binary64)))","(*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))) #s(literal -1 binary64)))","(*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x)))","(*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (/.f64 #s(literal -1 binary64) (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x)))","(*.f64 (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)) (pow.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (sqrt.f64 x)) (/.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(*.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (/.f64 (neg.f64 (sqrt.f64 x)) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(*.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (pow.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 (pow.f64 (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (pow.f64 (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 x) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(*.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))","(/.f64 (neg.f64 (/.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(/.f64 (neg.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (-.f64 (+.f64 x #s(literal 1 binary64)) x))) (neg.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x)))","(/.f64 (neg.f64 (/.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))) (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (/.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (neg.f64 (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 (/.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (-.f64 (+.f64 x #s(literal 1 binary64)) x))","(/.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (-.f64 (+.f64 x #s(literal 1 binary64)) x))","(/.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))","(/.f64 (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (neg.f64 (*.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (hypot.f64 (sqrt.f64 x) x)) (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x)))))","(/.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x))","(/.f64 (neg.f64 (-.f64 x (+.f64 x #s(literal 1 binary64)))) (neg.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))) (neg.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))))","(/.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (pow.f64 x #s(literal -1/2 binary64)))","(/.f64 (-.f64 x (+.f64 x #s(literal 1 binary64))) (*.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) (*.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (*.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))))","(/.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(/.f64 (/.f64 #s(literal -1 binary64) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x))))","(/.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x)))","(/.f64 (hypot.f64 (sqrt.f64 x) x) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)) (neg.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))))","(/.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))","(/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(neg.f64 (/.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(neg.f64 (/.f64 #s(literal -1 binary64) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))))","(exp.f64 (neg.f64 (*.f64 (neg.f64 (log.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))) #s(literal -1 binary64))))","(exp.f64 (*.f64 (*.f64 (neg.f64 (log.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x))))","(*.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(pow.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))","(pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (sqrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (sqrt.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (neg.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64))","(/.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x (neg.f64 x)))))","(/.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(fabs.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(exp.f64 (*.f64 (log1p.f64 x) #s(literal 1/2 binary64)))","(*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(pow.f64 (/.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 x x (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 x (-.f64 #s(literal 1 binary64) x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)))) (neg.f64 (neg.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 (+.f64 x #s(literal 1 binary64)) x)) (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 x x))) (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (+.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))) (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 x))) (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) x) x)) (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 x #s(literal -1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (-.f64 x #s(literal 1 binary64))) (neg.f64 x))) (*.f64 (neg.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64)) (*.f64 (neg.f64 (-.f64 x #s(literal 1 binary64))) x)) (*.f64 (neg.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64))) (*.f64 (neg.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (neg.f64 x))) (*.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) x)) (*.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 x #s(literal -1 binary64))) (*.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 x))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) x)) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x (neg.f64 x))) (neg.f64 x))) (*.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x (neg.f64 x))) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x (neg.f64 x))) x)) (*.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x (neg.f64 x))) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x (neg.f64 x))) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x (neg.f64 x))) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (neg.f64 x))) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) x)) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal -1 binary64) (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (neg.f64 x))) (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) x)) (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal -1 binary64) (*.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 x))) (*.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) x)) (*.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))) (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64) (fma.f64 x x x)) (+.f64 x #s(literal 1 binary64)))","(/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 x #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64))) (*.f64 (+.f64 x #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64) (*.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x x)) (neg.f64 x))) (*.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal -1 binary64)))","(/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64) (*.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x x)) x)) (*.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal 1 binary64)))","(/.f64 (fma.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 x #s(literal -1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x x)) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x x)) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (fma.f64 (neg.f64 x) (+.f64 x #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (*.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (neg.f64 x) (+.f64 #s(literal 1 binary64) (fma.f64 x x x)) (*.f64 #s(literal -1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (*.f64 #s(literal -1 binary64) (+.f64 #s(literal 1 binary64) (fma.f64 x x x))))","(/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) x (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (+.f64 x #s(literal 1 binary64)))","(/.f64 (fma.f64 x (+.f64 #s(literal 1 binary64) (fma.f64 x x x)) (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (*.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (fma.f64 x x x))))","(/.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (*.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (fma.f64 x x x)) (*.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (*.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (fma.f64 x x x))))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (-.f64 x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x))) (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x))) (neg.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 x x) (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (-.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x)))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (+.f64 (+.f64 x #s(literal 1 binary64)) x))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 x x) (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x)))))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 x))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 x))","(fma.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 x))","(fma.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (neg.f64 x))","(fma.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 x))","(fma.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 x)) (-.f64 #s(literal 1 binary64) x))","(fma.f64 #s(literal -1 binary64) x (+.f64 x #s(literal 1 binary64)))","(fma.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 x))","(fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64) (neg.f64 x))","(fma.f64 (sqrt.f64 x) (pow.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 (sqrt.f64 x) (pow.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)) #s(literal 1 binary64)) (neg.f64 x))","(fma.f64 (sqrt.f64 x) (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 (sqrt.f64 x) (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)) (neg.f64 x))","(fma.f64 (sqrt.f64 x) (sqrt.f64 x) (-.f64 #s(literal 1 binary64) x))","(fma.f64 x #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x))","(fma.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)) (neg.f64 x))","(fma.f64 #s(literal 1 binary64) x (-.f64 #s(literal 1 binary64) x))","(-.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 (+.f64 x #s(literal 1 binary64)) x)) (/.f64 (*.f64 x x) (+.f64 (+.f64 x #s(literal 1 binary64)) x)))","(-.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(-.f64 (+.f64 x #s(literal 1 binary64)) x)","(+.f64 (-.f64 #s(literal 1 binary64) x) x)","(+.f64 (neg.f64 x) (+.f64 x #s(literal 1 binary64)))","(+.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(+.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))","(+.f64 x (-.f64 #s(literal 1 binary64) x))","(+.f64 #s(literal 1 binary64) (-.f64 x x))","(+.f64 #s(literal 1 binary64) (+.f64 x (neg.f64 x)))","(*.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (+.f64 x #s(literal 1 binary64)) x))","(*.f64 #s(literal -1 binary64) (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(pow.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)))) (neg.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (+.f64 (+.f64 x #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (+.f64 (+.f64 x #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 (+.f64 x #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x))) (+.f64 (+.f64 x #s(literal 1 binary64)) x))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (+.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x))) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (+.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (+.f64 (+.f64 x #s(literal 1 binary64)) x))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)))))","(/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x))))","(fma.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) x (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(fma.f64 x (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(+.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(+.f64 (*.f64 x (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 x)))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) x) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) (sqrt.f64 x))","(*.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (sqrt.f64 x))","(*.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(*.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (neg.f64 (sqrt.f64 x)))","(*.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))","(/.f64 (neg.f64 (*.f64 (-.f64 x (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))) (neg.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) (neg.f64 (sqrt.f64 x)))) (neg.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (-.f64 x (+.f64 x #s(literal 1 binary64))))) (neg.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))))) (neg.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (*.f64 (-.f64 x (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) (neg.f64 (sqrt.f64 x))) (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (-.f64 x (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))) (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))","(neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x))","(fma.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))))","(fma.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))","(-.f64 #s(literal 0 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))","(+.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(+.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))","(+.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))))","(+.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(*.f64 (pow.f64 (/.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)))) #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (pow.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal -1 binary64)) (pow.f64 (/.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (-.f64 x (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))) (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))","(*.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal 1/2 binary64)) (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal 1/2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 x))))","(*.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 x))) (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(*.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)) (-.f64 (+.f64 x #s(literal 1 binary64)) x))","(*.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) (pow.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)))","(*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)) (pow.f64 (pow.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(*.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal 1 binary64))","(*.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(*.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (pow.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(*.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (/.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (pow.f64 (/.f64 #s(literal -1 binary64) (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (/.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x)))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(*.f64 (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x))","(*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(pow.f64 (exp.f64 (neg.f64 (log.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))))) #s(literal -1 binary64))","(pow.f64 (*.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) #s(literal -1 binary64))","(pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal 1 binary64))","(pow.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (/.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x)))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))) (neg.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))) (neg.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (/.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64))) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))","(/.f64 (neg.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (neg.f64 (*.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))))) (neg.f64 (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))) (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (neg.f64 (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))) (neg.f64 (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))) (neg.f64 (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64)))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (-.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x)))) (neg.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) (*.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (*.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))) (*.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x)) (*.f64 (hypot.f64 (sqrt.f64 x) x) (sqrt.f64 x))) (fma.f64 x x x))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (neg.f64 x)) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (sqrt.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (+.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (sqrt.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (neg.f64 x)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (sqrt.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (+.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (sqrt.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (neg.f64 x)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 x)) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (sqrt.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 x)) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (+.f64 (sqrt.f64 x) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (sqrt.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 x)) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (sqrt.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 x)) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (+.f64 (sqrt.f64 x) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (sqrt.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 x)) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 x)) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (+.f64 (sqrt.f64 x) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64)) (sqrt.f64 x))","(/.f64 (/.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))) (+.f64 (+.f64 x #s(literal 1 binary64)) x))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (*.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (/.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64)) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64)) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(/.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (sqrt.f64 x))","(/.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (neg.f64 (neg.f64 (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x))) (neg.f64 (*.f64 (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))) (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (neg.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (hypot.f64 (sqrt.f64 x) x))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (*.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64)) (sqrt.f64 x))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (*.f64 (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(/.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))) (+.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))))","(/.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))) (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (*.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (neg.f64 (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (neg.f64 (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))","(/.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (pow.f64 (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x) #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))))","(/.f64 (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (hypot.f64 (sqrt.f64 x) x))","(/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(neg.f64 (/.f64 (*.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(neg.f64 (/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (sqrt.f64 x)))","(neg.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(neg.f64 (/.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(neg.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) #s(literal -1 binary64)))","(fma.f64 (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 x #s(literal -1/4 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))))","(-.f64 (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64)))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64)))))","(-.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x)) (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x)))","(-.f64 (sqrt.f64 (/.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x) (+.f64 x #s(literal 1 binary64)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (neg.f64 (log.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))) #s(literal -1 binary64)))","(+.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (pow.f64 x #s(literal -1/2 binary64)))","(+.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (fma.f64 x x x) #s(literal -1/4 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1/4 binary64)))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/4 binary64)) (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/4 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x))","(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))","(/.f64 (neg.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)))) (neg.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))) (neg.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))) (neg.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x))) (+.f64 (+.f64 x #s(literal 1 binary64)) x))","(/.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (+.f64 (+.f64 x #s(literal 1 binary64)) x))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(fma.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (+.f64 x #s(literal 1 binary64)) (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (neg.f64 x)))","(fma.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) x (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (+.f64 x #s(literal 1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (*.f64 (neg.f64 x) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))))","(fma.f64 x (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))))","(+.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (*.f64 (neg.f64 x) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))))","(+.f64 (*.f64 x (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))))","(+.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (+.f64 x #s(literal 1 binary64))) (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (neg.f64 x)))","(+.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) x) (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 #s(literal 1 binary64) x)))","(*.f64 (pow.f64 (/.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)))) #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (pow.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal -1 binary64)) (pow.f64 (/.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (-.f64 x (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))) (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))","(*.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal 1/2 binary64)) (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal 1/2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 x))))","(*.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 x))) (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(*.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)) (-.f64 (+.f64 x #s(literal 1 binary64)) x))","(*.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) (pow.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)))","(*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)) (pow.f64 (pow.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(*.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal 1 binary64))","(*.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(*.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (pow.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x) #s(literal -1 binary64)))","(*.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(*.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (/.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (pow.f64 (/.f64 #s(literal -1 binary64) (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (/.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x)))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(*.f64 (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x))","(*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(pow.f64 (exp.f64 (neg.f64 (log.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))))) #s(literal -1 binary64))","(pow.f64 (*.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) #s(literal -1 binary64))","(pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal 1 binary64))","(pow.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (/.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x)))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))) (neg.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))) (neg.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (/.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64))) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))","(/.f64 (neg.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (neg.f64 (*.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))))) (neg.f64 (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))) (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (neg.f64 (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))) (neg.f64 (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))) (neg.f64 (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64)))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (-.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x)))) (neg.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) (*.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (*.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64)))) (*.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))) (*.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x)) (*.f64 (hypot.f64 (sqrt.f64 x) x) (sqrt.f64 x))) (fma.f64 x x x))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (neg.f64 x)) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (sqrt.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (+.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (sqrt.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (neg.f64 x)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (sqrt.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (+.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (sqrt.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (neg.f64 x)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 x)) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (sqrt.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 x)) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (+.f64 (sqrt.f64 x) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (sqrt.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 x)) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (sqrt.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 x)) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (+.f64 (sqrt.f64 x) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (sqrt.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 x)) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 x)) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (+.f64 (sqrt.f64 x) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal -1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64)) (sqrt.f64 x))","(/.f64 (/.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))) (+.f64 (+.f64 x #s(literal 1 binary64)) x))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (*.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (/.f64 #s(literal -1 binary64) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64)) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64)) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(/.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (sqrt.f64 x))","(/.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (neg.f64 (neg.f64 (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x))) (neg.f64 (*.f64 (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))) (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (neg.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (hypot.f64 (sqrt.f64 x) x))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (*.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64)) (sqrt.f64 x))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (*.f64 (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(/.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))) (+.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))))","(/.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))) (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (*.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (neg.f64 (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (+.f64 (hypot.f64 (sqrt.f64 x) x) x))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (neg.f64 (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))","(/.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (pow.f64 (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x) #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))))","(/.f64 (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (hypot.f64 (sqrt.f64 x) x))","(/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (-.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64))) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(neg.f64 (/.f64 (*.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(neg.f64 (/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (sqrt.f64 x)))","(neg.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(neg.f64 (/.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (+.f64 (hypot.f64 (sqrt.f64 x) x) x)))","(neg.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) #s(literal -1 binary64)))","(fma.f64 (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 x #s(literal -1/4 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))))","(-.f64 (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64)))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64)))))","(-.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x)) (/.f64 (sqrt.f64 x) (hypot.f64 (sqrt.f64 x) x)))","(-.f64 (sqrt.f64 (/.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x) (+.f64 x #s(literal 1 binary64)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (neg.f64 (log.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))) #s(literal -1 binary64)))","(+.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (pow.f64 x #s(literal -1/2 binary64)))","(+.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (sqrt.f64 x) (pow.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)) #s(literal 1 binary64)))","(*.f64 (sqrt.f64 x) (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)))","(*.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(pow.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal 2 binary64))","(pow.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))","(pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 (neg.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (neg.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (sqrt.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 2 binary64))) (sqrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (sqrt.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64))) (sqrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x (neg.f64 x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (fma.f64 x x (neg.f64 x))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(fma.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))","(fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))","(fma.f64 x #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) x #s(literal 1 binary64))","(sqrt.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fabs.f64 (+.f64 x #s(literal 1 binary64)))","(hypot.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (hypot.f64 (sqrt.f64 x) x))","(hypot.f64 (hypot.f64 (sqrt.f64 x) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(hypot.f64 (hypot.f64 (sqrt.f64 x) x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(hypot.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal 1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)))","(exp.f64 (log1p.f64 x))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) x)","(*.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))) (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))","(*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x))) (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))) (*.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (pow.f64 x #s(literal 3/2 binary64)))) (*.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (-.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (*.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) x)) (*.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64)) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 x #s(literal -1/2 binary64))) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (neg.f64 (sqrt.f64 x)))) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (sqrt.f64 x))) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 x #s(literal -1/2 binary64))) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)) (*.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)))) #s(literal 1 binary64))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (pow.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 x)))) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 x)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (sqrt.f64 x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3/2 binary64))) (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x)))) (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x)))) (sqrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3/2 binary64))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x)))) (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x)))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3/2 binary64))) #s(literal -1 binary64) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x)))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x)))) #s(literal -1 binary64)))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3/2 binary64))) #s(literal 1 binary64) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x)))) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x)))) #s(literal 1 binary64)))","(/.f64 (fma.f64 (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x)))) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (neg.f64 x) (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 x)) (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 x)) (sqrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (neg.f64 x) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (*.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 x)) (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 x)) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (fma.f64 (neg.f64 x) #s(literal -1 binary64) (*.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (*.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 x)) #s(literal -1 binary64)))","(/.f64 (fma.f64 (neg.f64 x) #s(literal 1 binary64) (*.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 x)) #s(literal 1 binary64)))","(/.f64 (fma.f64 (neg.f64 x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (*.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 0 binary64) (sqrt.f64 x)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x)))) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3/2 binary64))))) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x))))))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (+.f64 #s(literal 0 binary64) (sqrt.f64 x)) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (neg.f64 x))) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (+.f64 #s(literal 0 binary64) (sqrt.f64 x))))","(/.f64 (fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x)))) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3/2 binary64))))) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x))))))","(/.f64 (fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 #s(literal 0 binary64) (sqrt.f64 x)) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (neg.f64 x))) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (+.f64 #s(literal 0 binary64) (sqrt.f64 x))))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x)))) (*.f64 #s(literal -1 binary64) (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3/2 binary64))))) (*.f64 #s(literal -1 binary64) (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x))))))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 #s(literal 0 binary64) (sqrt.f64 x)) (*.f64 #s(literal -1 binary64) (neg.f64 x))) (*.f64 #s(literal -1 binary64) (+.f64 #s(literal 0 binary64) (sqrt.f64 x))))","(/.f64 (fma.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x)))) (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3/2 binary64))))) (*.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x))))))","(/.f64 (fma.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (+.f64 #s(literal 0 binary64) (sqrt.f64 x)) (*.f64 #s(literal 1 binary64) (neg.f64 x))) (*.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (sqrt.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x)))) (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3/2 binary64))))) (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (sqrt.f64 x)) (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (neg.f64 x))) (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 #s(literal 0 binary64) (sqrt.f64 x))))","(/.f64 (-.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (+.f64 (+.f64 x #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (*.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (+.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (+.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (*.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (-.f64 (+.f64 x #s(literal 1 binary64)) x))))","(/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))","(/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 (/.f64 (-.f64 (hypot.f64 (sqrt.f64 x) x) x) x) (pow.f64 x #s(literal -1/2 binary64)))","(/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (-.f64 (+.f64 x #s(literal 1 binary64)) x)))","(fma.f64 (sqrt.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64)))","(fma.f64 (sqrt.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64)))","(fma.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)) #s(literal 1/2 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)) #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64)))","(fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64)))","(fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64)))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64)))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(fma.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64)))","(fma.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 x) #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(fma.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))","(-.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal 0 binary64)) (sqrt.f64 x))","(-.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))))","(-.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (/.f64 x (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(+.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64)))","(+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))","(*.f64 #s(literal -1 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(pow.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (neg.f64 x)) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/4 binary64)) (pow.f64 (fma.f64 x x x) #s(literal -1/4 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))","(pow.f64 (exp.f64 #s(literal -1/2 binary64)) (+.f64 (log.f64 x) (log1p.f64 x)))","(pow.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64))","(pow.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) #s(literal -1/4 binary64))","(pow.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (hypot.f64 (sqrt.f64 x) x) #s(literal -1 binary64))","(pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))","(/.f64 (neg.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (sqrt.f64 x))","(/.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (pow.f64 x #s(literal -1/2 binary64))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (hypot.f64 (sqrt.f64 x) x)))","(/.f64 #s(literal -1 binary64) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (sqrt.f64 x))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (sqrt.f64 x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 #s(literal 1 binary64) (hypot.f64 (sqrt.f64 x) x))","(neg.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)))","(sqrt.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64))))","(exp.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (log.f64 x)) (*.f64 (log1p.f64 x) #s(literal 1/2 binary64))))","(exp.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (log1p.f64 x)) (log.f64 (sqrt.f64 x))))","(exp.f64 (fma.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1/4 binary64) (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1/4 binary64))))","(exp.f64 (fma.f64 #s(literal -1/2 binary64) (log.f64 x) (*.f64 #s(literal -1/2 binary64) (log1p.f64 x))))","(exp.f64 (fma.f64 #s(literal -1/2 binary64) (log1p.f64 x) (*.f64 #s(literal -1/2 binary64) (log.f64 x))))","(exp.f64 (*.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1/4 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal -1/4 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/4 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (hypot.f64 (sqrt.f64 x) x)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (+.f64 (log.f64 x) (log1p.f64 x)) #s(literal -1/2 binary64)))","(*.f64 (-.f64 x (+.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) (pow.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 x (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 x (+.f64 x #s(literal 1 binary64))))) (neg.f64 (neg.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))))","(/.f64 (-.f64 (*.f64 x (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64)))) (*.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (neg.f64 (sqrt.f64 x)))) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)))","(/.f64 (fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (sqrt.f64 x))) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal 1 binary64)))","(/.f64 (fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64) (*.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)))) #s(literal 1 binary64))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal 1 binary64) (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64) (*.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 x)))) #s(literal -1 binary64))","(/.f64 (+.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 x)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (+.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (sqrt.f64 x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (*.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))))) (*.f64 #s(literal -1 binary64) (sqrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (*.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))) (*.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64) (*.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) #s(literal 1 binary64))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 x)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))))) (*.f64 #s(literal 1 binary64) (sqrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (*.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))) (*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (sqrt.f64 x) (*.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) #s(literal -1 binary64))","(/.f64 (fma.f64 (sqrt.f64 x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 (-.f64 x #s(literal 1 binary64))) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))))) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (+.f64 #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(/.f64 (+.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (pow.f64 x #s(literal -1/2 binary64)))","(/.f64 (+.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(/.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (neg.f64 (-.f64 x (+.f64 x #s(literal 1 binary64)))) (neg.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))) (neg.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 x (hypot.f64 (sqrt.f64 x) x)))))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))) (neg.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))","(/.f64 (-.f64 x (+.f64 x #s(literal 1 binary64))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) (+.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 x (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64))","(/.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 x (+.f64 x #s(literal 1 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))))))","(/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 x (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))))","(fma.f64 (sqrt.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x))) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(fma.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x))","(fma.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 1/4 binary64)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64) (sqrt.f64 x))","(fma.f64 (sqrt.f64 x) #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(fma.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(fma.f64 #s(literal 1 binary64) (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(-.f64 (/.f64 x (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":349.252197265625,"type":"rewrite"},{"compiler":[[56794,6374]],"memory":[[17452592,179850736]],"time":273.222900390625,"type":"eval"},{"alts":[["(/.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","fresh",40.35920620685138,"binary64"],["(/.f64 (-.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64)))","fresh",41.60961753637098,"binary64"],["(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x) #s(literal 1/2 binary64)))))","next",40.57397643023724,"binary64"],["(/.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))","fresh",41.59960488338494,"binary64"],["(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","next",0.3952199522072183,"binary64"],["(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","fresh",0.48673009905357767,"binary64"],["(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","fresh",1.1195898407373523,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)) (sqrt.f64 x))))","next",0.9628621589138984,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (-.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64))))","fresh",41.59339137092963,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt x)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/16 binary64) (*.f64 x x)) #s(literal 1/2 binary64)) (/.f64 #s(literal 1/8 binary64) x)) x))))","fresh",0.831684352608334,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt x)) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/8 binary64) x)) x))))","fresh",0.9137021491454562,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt x)) (/.f64 #s(literal 1/2 binary64) x))))","fresh",1.3634950152255245,"binary64"],["(/.f64 #s(literal 1 binary64) #s(approx (/ (sqrt (+ x 1)) (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt x))) (*.f64 (fma.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (*.f64 x x))))","fresh",12.106702605835174,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","done",41.62696195065793,"binary64"],["(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 x))))","fresh",40.35529995685138,"binary64"],["#s(approx (/ 1 (/ (sqrt (+ x 1)) (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt x)))) (/.f64 (fma.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x)))","fresh",12.081671891176448,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64))))","fresh",30.05718926477639,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) x)) x))","fresh",1.0037382175347405,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal -1/2 binary64)) (*.f64 x x)))","fresh",12.128712791431951,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) x) (-.f64 (pow.f64 x #s(literal -1 binary64)) x)) (*.f64 x (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)))))","fresh",1.4224344218632152,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 x)))","next",60.41744178309373,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))))","fresh",11.164859588098503,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","done",11.16868038358054,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) x)))","fresh",1.0428725086648765,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (pow.f64 x #s(literal -2 binary64))) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","fresh",11.156337138247483,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 x x))))","next",12.079480064571376,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","done",60.41744178309373,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (* (/ (/ -1/2 x) x) (- (sqrt (/ 1 x)) (sqrt x))) (/.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (neg.f64 x))))","fresh",0.9913892613810615,"binary64"]],"compiler":[[23,12],[20,9],[34,23],[17,10],[34,23],[29,20],[30,20],[30,21],[15,9],[31,22],[25,18],[21,15],[34,21],[11,8],[24,13],[32,20],[33,24],[24,17],[24,17],[30,21],[16,12],[24,17],[25,18],[24,17],[25,19],[25,18],[16,12],[42,29],[23,12],[20,9],[34,23],[17,10],[34,23],[29,20],[30,20],[30,21],[15,9],[31,22],[25,18],[21,15],[34,21],[24,13],[32,20],[33,24],[24,17],[24,17],[30,21],[16,12],[24,17],[24,17],[25,19],[25,18],[42,29]],"count":[[1974,28]],"kept":[{"done":[1,1],"fresh":[5,0],"new":[1963,25],"picked":[5,2]}],"memory":[[-5745744,87345760]],"min-error":[[0.00390625,"binary64"]],"time":65.923095703125,"type":"prune"},{"egraph":[[0,8217,409,0.079090923],[5,5241,417,0.028853802],[4,2044,417,0.018420522],[3,770,417,0.009475882],[2,331,438,0.002951914],[1,156,454,0.001347698],[0,95,458,0.00078798],[0,57,468,0.000587418]],"inputs":[["(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","#s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) x))","(/.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) x)","(fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal -1/2 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal -1/2 binary64))","(/.f64 #s(literal 3/8 binary64) x)","#s(literal 3/8 binary64)","#s(literal -1/2 binary64)","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(sqrt.f64 x)","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","#s(literal 1 binary64)","(sqrt.f64 x)","x","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 x x))))","(*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 x x)))","#s(literal -1/2 binary64)","(/.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 x x))","(-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(sqrt.f64 x)","(*.f64 x x)","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x) #s(literal 1/2 binary64)))))","(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(-.f64 (+.f64 x #s(literal 1 binary64)) x)","(+.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","#s(literal -1 binary64)","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","#s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x) #s(literal 1/2 binary64))))","(neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x) #s(literal 1/2 binary64)))","(fma.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x) #s(literal 1/2 binary64))","(/.f64 #s(literal 2 binary64) x)","#s(literal 2 binary64)","(*.f64 x x)","#s(literal 1/2 binary64)","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)) (sqrt.f64 x))))","#s(literal 1 binary64)","(/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)) (sqrt.f64 x)))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","x","(/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)) (sqrt.f64 x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","(/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","(fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","#s(literal -1/8 binary64)","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","#s(literal 1/2 binary64)","(sqrt.f64 x)"]],"locations":[["(+.f64 x #s(literal 1 binary64))","cost-diff",0],["(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","cost-diff",0],["(/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)) (sqrt.f64 x)))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)) (sqrt.f64 x))))","cost-diff",2],["(neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x) #s(literal 1/2 binary64)))","cost-diff",1],["(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","cost-diff",2],["(fma.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x) #s(literal 1/2 binary64))","cost-diff",4],["(-.f64 (+.f64 x #s(literal 1 binary64)) x)","cost-diff",4],["(-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))","cost-diff",0],["(/.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 x x))","cost-diff",0],["(*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 x x)))","cost-diff",0],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 x x))))","cost-diff",0],["(sqrt.f64 x)","cost-diff",0],["(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","cost-diff",0],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 x)))","cost-diff",0],["(/.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) x)","cost-diff",0],["#s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) x))","cost-diff",0],["(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","cost-diff",0],["(fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal -1/2 binary64)) #s(literal 1 binary64))","cost-diff",1]],"memory":[[-4202640,36422736]],"method":["egg-herbie"],"outputs":[["(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal -1/2 binary64)) x) #s(literal 1 binary64)) x)) (+.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x)))","#s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) x))","#s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal -1/2 binary64)) x) #s(literal 1 binary64)) x))","(/.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) x)","(/.f64 (+.f64 (/.f64 (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal -1/2 binary64)) x) #s(literal 1 binary64)) x)","(fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal -1/2 binary64)) #s(literal 1 binary64))","(+.f64 (/.f64 (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal -1/2 binary64)) x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal -1/2 binary64))","(/.f64 #s(literal 3/8 binary64) x)","#s(literal 3/8 binary64)","#s(literal -1/2 binary64)","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(+.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x))","(sqrt.f64 x)","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(sqrt.f64 (-.f64 x #s(literal -1 binary64)))","(+.f64 x #s(literal 1 binary64))","(-.f64 x #s(literal -1 binary64))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (sqrt.f64 x) x))","(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","(/.f64 (sqrt.f64 x) x)","#s(literal 1 binary64)","(sqrt.f64 x)","x","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 x x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 x x)))","(*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","#s(literal -1/2 binary64)","(/.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 x x))","(-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(sqrt.f64 x)","(*.f64 x x)","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x) #s(literal 1/2 binary64)))))","(/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (-.f64 x #s(literal -1 binary64)))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))))","(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (sqrt.f64 (-.f64 x #s(literal -1 binary64))))","(-.f64 (+.f64 x #s(literal 1 binary64)) x)","#s(literal 1 binary64)","(+.f64 x #s(literal 1 binary64))","(-.f64 x #s(literal -1 binary64))","x","#s(literal 1 binary64)","(/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (sqrt.f64 (-.f64 x #s(literal -1 binary64))))","#s(literal -1 binary64)","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(sqrt.f64 (-.f64 x #s(literal -1 binary64)))","#s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x) #s(literal 1/2 binary64))))","#s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))","(neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x) #s(literal 1/2 binary64)))","(fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))","(fma.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x) #s(literal 1/2 binary64))","(fma.f64 #s(literal 2 binary64) x #s(literal 1/2 binary64))","(/.f64 #s(literal 2 binary64) x)","#s(literal 2 binary64)","(*.f64 x x)","#s(literal 1/2 binary64)","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)) (sqrt.f64 x))))","(/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)) (*.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x)))","#s(literal 1 binary64)","(/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)) (sqrt.f64 x)))","(/.f64 (*.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x)) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(sqrt.f64 (-.f64 x #s(literal -1 binary64)))","(+.f64 x #s(literal 1 binary64))","(-.f64 x #s(literal -1 binary64))","x","(/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)) (sqrt.f64 x))","#s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x))","(/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","(fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))","#s(literal -1/8 binary64)","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))","#s(literal 1/2 binary64)","(sqrt.f64 x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":228.875,"type":"simplify"},{"compiler":[[359,50]],"locations":[["(/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)","accuracy",0.25],["(/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)) (sqrt.f64 x)))","accuracy",0.27181625976844204],["(/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)) (sqrt.f64 x))","accuracy",0.3203125],["(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)) (sqrt.f64 x))))","accuracy",0.5764511927940352],["(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x) #s(literal 1/2 binary64)))))","accuracy",0.21484375],["(/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","accuracy",0.296875],["(fma.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x) #s(literal 1/2 binary64))","accuracy",29.159574068557554],["(-.f64 (+.f64 x #s(literal 1 binary64)) x)","accuracy",59.57677049108313],["(-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))","accuracy",0.015625],["(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","accuracy",0.12890625],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 x x))))","accuracy",0.6914593636971367],["(/.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 x x))","accuracy",11.443505421276557],["(sqrt.f64 x)","accuracy",0.0],["(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","accuracy",0.2890625],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 x)))","accuracy",60.41744178309373],["(/.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) x)","accuracy",0.0078125],["(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","accuracy",0.0078125],["#s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) x))","accuracy",0.15704480237126073],["(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","accuracy",0.2265625]],"memory":[[2659360,78948944]],"mixsample":[[0.856201171875,"ival-add",1200],[38.2451171875,"ival-div",0],[23.945068359375,"adjust",800],[3.7470703125,"ival-div",400],[2.8974609375,"ival-sqrt",800],[0.376220703125,"ival-div",1600],[0.143798828125,"ival-assert",0],[10.218505859375,"ival-sub",0],[0.0048828125,"ival-sub",400],[6.2724609375,"ival-sqrt",0],[3.0849609375,"adjust",2000],[30.38232421875,"ival-pow",0],[14.522216796875,"ival-add",0],[0.494140625,"ival-sqrt",1600],[28.575927734375,"ival-mult",0],[0.017822265625,"ival-add",1600],[0.147705078125,"ival-add",400],[0.366455078125,"ival-true",0],[1.044921875,"exact",0],[0.9619140625,"ival-add",800],[1.27392578125,"ival-sqrt",400],[4.77734375,"ival-neg",0]],"outcomes":[[232.226318359375,1,"valid",220],[38.1630859375,2,"valid",32],[1.423828125,0,"valid",4]],"time":330.620849609375,"type":"localize"},{"count":[[25,142]],"inputs":[["(fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal -1/2 binary64)) #s(literal 1 binary64))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","#s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) x))","(/.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) x)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","(sqrt.f64 x)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 x x))))","(*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 x x)))","(/.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 x x))","(-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))","(-.f64 (+.f64 x #s(literal 1 binary64)) x)","(fma.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x) #s(literal 1/2 binary64))","(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x) #s(literal 1/2 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)) (sqrt.f64 x))))","(/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)) (sqrt.f64 x)))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x) #s(literal 1/2 binary64)))))","(/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)) (sqrt.f64 x))","(/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)"]],"memory":[[-1571040,6068480]],"outputs":[["(/ 3/8 (pow x 2))","(/ (+ 3/8 (* -1/2 x)) (pow x 2))","(/ (+ 3/8 (* x (- x 1/2))) (pow x 2))","(* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))","(/ (+ (* -1/2 (* (sqrt (pow x 3)) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/ (+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3))))))))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/ (+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))) (+ (* x (+ (* -1 (* (sqrt x) (+ (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 2))) (+ (* 1/2 (/ (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))) (+ 1 (sqrt x)))) (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 3))))))) (+ (* 1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* 1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x)))))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))))))))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(sqrt (/ 1 x))","(/ (+ (sqrt x) (* -1/2 (sqrt (pow x 3)))) x)","(/ (+ (sqrt x) (* (pow x 2) (+ (* -1/2 (sqrt (/ 1 x))) (* 1/2 (sqrt x))))) x)","(/ (+ (sqrt x) (* (pow x 2) (+ (* -1/2 (sqrt (/ 1 x))) (* x (+ (* -1/2 (* (sqrt x) (+ 1 (* 1/4 (/ 1 x))))) (* 1/2 (sqrt (/ 1 x)))))))) x)","(/ 3/8 (pow x 3))","(/ (+ 3/8 (* -1/2 x)) (pow x 3))","(/ (+ 3/8 (* x (- x 1/2))) (pow x 3))","(/ (+ (sqrt x) (* -1 x)) x)","(/ (+ (sqrt x) (* x (- (* 1/2 x) 1))) x)","(/ (+ (sqrt x) (* x (- (* x (+ 1/2 (* -3/8 x))) 1))) x)","(sqrt x)","(* -1/2 (sqrt (/ 1 (pow x 5))))","(/ (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 3))","(sqrt (/ 1 (pow x 5)))","(/ (+ (sqrt x) (* -1 (sqrt (pow x 3)))) (pow x 3))","(/ (+ (sqrt x) (* -1 (sqrt (pow x 3)))) x)","1","1/2","(+ 1/2 (* 2 x))","-1","(- (* 1/2 x) 1)","(- (* x (+ 1/2 (* -3/8 x))) 1)","(- (* x (+ 1/2 (* x (- (* 5/16 x) 3/8)))) 1)","-1/2","(- (* -2 x) 1/2)","(* (sqrt (/ 1 x)) (- 1 (sqrt x)))","(/ (+ (* 1/2 (sqrt (pow x 3))) (* (sqrt x) (- 1 (sqrt x)))) x)","(/ (+ (* x (+ (* 1/2 (sqrt x)) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (- 1 (sqrt x)))) (* -1/8 (sqrt x)))))) (* (sqrt x) (- 1 (sqrt x)))) x)","(/ (+ (* x (+ (* 1/2 (sqrt x)) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (- 1 (sqrt x)))) (+ (* -1/8 (sqrt x)) (* x (+ (* -1/4 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt x)) (* 1/2 (* (sqrt (/ 1 x)) (- 1 (sqrt x)))))))))))) (* (sqrt x) (- 1 (sqrt x)))) x)","(* (sqrt x) (/ 1 (- 1 (sqrt x))))","(+ (* -1/2 (* (sqrt (pow x 3)) (/ 1 (pow (- 1 (sqrt x)) 2)))) (* (sqrt x) (/ 1 (- 1 (sqrt x)))))","(+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (- 1 (sqrt x)) 2)))) (* x (+ (* 1/2 (* (sqrt (/ 1 x)) (/ 1 (- 1 (sqrt x))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (- 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (- 1 (sqrt x)) 3))))))))) (* (sqrt x) (/ 1 (- 1 (sqrt x)))))","(+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (- 1 (sqrt x)) 2)))) (* x (+ (* 1/2 (* (sqrt (/ 1 x)) (/ 1 (- 1 (sqrt x))))) (+ (* x (+ (* -1 (* (sqrt x) (+ (* 1/16 (/ 1 (pow (- 1 (sqrt x)) 2))) (+ (* 1/2 (/ (+ (* 1/8 (/ 1 (pow (- 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (- 1 (sqrt x)) 3)))) (- 1 (sqrt x)))) (* 1/16 (/ 1 (pow (- 1 (sqrt x)) 3))))))) (* -1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (- 1 (sqrt x)) 2)))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (- 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (- 1 (sqrt x)) 3)))))))))) (* (sqrt x) (/ 1 (- 1 (sqrt x)))))","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* -1/8 x))))","(+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8)))))","(+ 1 x)","(+ 1 (sqrt x))","(+ 1 (+ (sqrt x) (* 1/2 x)))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* -1/8 x)))))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))))","(/ (+ (* x (+ (* -1/8 (sqrt (pow x 3))) (* 1/2 (sqrt x)))) (* (sqrt x) (- 1 (sqrt x)))) x)","(/ (+ (* x (+ (* 1/2 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/16 (sqrt (pow x 3))))))) (* (sqrt x) (- 1 (sqrt x)))) x)","(* -1/8 (sqrt (/ 1 (pow x 3))))","(/ (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 2))","(- 1 (* 1/2 (/ 1 x)))","(- (+ 1 (/ 3/8 (pow x 2))) (* 1/2 (/ 1 x)))","(* 1/2 (sqrt (/ 1 (pow x 3))))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 3/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) (pow x 2))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (+ (* -5/32 (sqrt (/ 1 (pow x 5)))) (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (+ (* 3/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))))) (pow x 2))","(/ 1 x)","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 3/8 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 3/8 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 5/16 (/ 1 (pow x 3))))) x)","(/ (- (* -1/2 (sqrt (/ 1 x))) (* -1/2 (sqrt x))) (pow x 2))","(/ (- (* 1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (/ 1 x))))) (pow x 2))","(/ (- (* -1/2 (* (sqrt (/ 1 (pow x 5))) (+ 1 (* 1/2 x)))) (+ (* -1/2 (sqrt x)) (+ (* -1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 x)))))) (pow x 2))","(/ (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))) x)","(* -1 (sqrt (/ 1 (pow x 3))))","(/ (+ (sqrt (/ 1 (pow x 3))) (* -1 (sqrt (/ 1 x)))) x)","(* -1 (sqrt x))","(* x (- (sqrt (/ 1 (pow x 3))) (sqrt (/ 1 x))))","(* 2 x)","(* x (+ 2 (* 1/2 (/ 1 x))))","(* -1 (sqrt (/ 1 x)))","(+ (* -1 (sqrt (/ 1 x))) (* 1/2 (sqrt (/ 1 (pow x 3)))))","(+ (* -1 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(+ (* -1 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (* (sqrt (/ 1 (pow x 7))) (+ 1 (* 1/4 x)))))))","(* -2 x)","(* -1 (* x (+ 2 (* 1/2 (/ 1 x)))))","(* 2 (sqrt (pow x 3)))","(* (pow x 2) (+ (sqrt (/ 1 (pow x 3))) (* 2 (sqrt (/ 1 x)))))","(* (pow x 2) (+ (sqrt (/ 1 (pow x 3))) (+ (* -1/4 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))))","(* (pow x 2) (+ (sqrt (/ 1 (pow x 3))) (+ (* -1/4 (sqrt (/ 1 (pow x 5)))) (+ (* 1/8 (sqrt (/ 1 (pow x 7)))) (+ (* 1/4 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))))))","(* x (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3)))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))))","x","(* x (+ 1 (/ 1 x)))","(* 2 (sqrt x))","(* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x))))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))))","(/ 1/2 x)","(/ (- 1/2 (* 1/8 (/ 1 x))) x)","(/ (- (+ 1/2 (* 1/16 (/ 1 (pow x 2)))) (/ 1/8 x)) x)","(/ (- (+ 1/2 (* 1/16 (/ 1 (pow x 2)))) (+ (/ 1/8 x) (* 5/128 (/ 1 (pow x 3))))) x)","(* 1/2 (sqrt (/ 1 x)))","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x))))","(+ 1 (* -1 (/ (- 1/2 (* 3/8 (/ 1 x))) x)))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 3/16 (sqrt x))) x)) (* 1/4 (sqrt x))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/16 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 5/32 (sqrt x))) x)) (+ (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 3/16 (sqrt x)))) x)) (* 1/4 (sqrt x))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/ -1 x)","(* -1 (/ (- 1 (* 1/2 (/ 1 x))) x))","(* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 3/8 (/ 1 x))) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 3/8 (* 5/16 (/ 1 x))) x))) x))) x))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* 3/8 (/ 1 x)) 1/2) x)) 1) x))","(- (sqrt (/ 1 x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 5))))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(- (+ (sqrt (/ 1 x)) (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* -1/2 (sqrt x))) (pow x 3)))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x))","(* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))","(* -1 (/ (+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x))","(* (sqrt x) (pow (sqrt -1) 2))","(* -1 (* x (- (* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (sqrt (/ 1 (pow x 3)))))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* 1/2 (sqrt x))) (pow x 3))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(/ (+ (* 1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2))))) x)) (* -1/4 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/2 (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* 1/16 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 4))))) x)) (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))))) x)) (* -1/4 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)) (* 1/2 (sqrt x))) (pow x 2))","(* 2 (* (sqrt (pow x 3)) (pow (sqrt -1) 4)))","(* (pow x 2) (+ (* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 4)))))","(* (pow x 2) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (sqrt (/ 1 x))) (* 1/2 (* (sqrt x) (pow (sqrt -1) 2)))) x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x)) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 4)))))","(* (pow x 2) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/4 (sqrt x))) x)) (+ (* -1/4 (sqrt (/ 1 x))) (* 1/2 (* (sqrt x) (pow (sqrt -1) 2))))) x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x)) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 4)))))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(* -2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(/ -1/2 (* x (pow (sqrt -1) 2)))","(* -1 (/ (+ (* 1/8 (/ 1 (* x (pow (sqrt -1) 4)))) (* 1/2 (/ 1 (pow (sqrt -1) 2)))) x))","(* -1 (/ (- (+ (/ 1/16 (* (pow x 2) (pow (sqrt -1) 6))) (* 1/2 (/ 1 (pow (sqrt -1) 2)))) (/ -1/8 (* x (pow (sqrt -1) 4)))) x))","(* -1 (/ (- (+ (* 1/16 (/ 1 (* (pow x 2) (pow (sqrt -1) 6)))) (+ (* 5/128 (/ 1 (* (pow x 3) (pow (sqrt -1) 8)))) (* 1/2 (/ 1 (pow (sqrt -1) 2))))) (/ -1/8 (* x (pow (sqrt -1) 4)))) x))","(* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))))"]],"series":[[6.1689453125,"((+ (* (/ 1 x) (+ (/ 3/8 x) -1/2)) 1) (/ (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (+ (sqrt x) (sqrt (+ x 1)))) (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/ (+ (* (/ 1 x) (+ (/ 3/8 x) -1/2)) 1) x) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ 1 (sqrt x)) (sqrt x) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (* -1/2 (/ (- (sqrt (/ 1 x)) (sqrt x)) (* x x))) (/ (- (sqrt (/ 1 x)) (sqrt x)) (* x x)) (- (sqrt (/ 1 x)) (sqrt x)) (- (+ x 1) x) (+ (* (/ 2 x) (* x x)) 1/2) (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg (+ (* (/ 2 x) (* x x)) 1/2)) (/ 1 (/ (sqrt (+ x 1)) (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt x)))) (/ (sqrt (+ x 1)) (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt x))) (sqrt (+ x 1)) (+ x 1) (+ (sqrt x) (sqrt (+ x 1))) (sqrt (/ 1 x)) (/ -1 (sqrt (+ x 1))) (/ (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x)))) (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt x)) (/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x))","x","-inf"],[2.68798828125,"((+ (* (/ 1 x) (+ (/ 3/8 x) -1/2)) 1) (/ (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (+ (sqrt x) (sqrt (+ x 1)))) (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/ (+ (* (/ 1 x) (+ (/ 3/8 x) -1/2)) 1) x) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ 1 (sqrt x)) (sqrt x) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (* -1/2 (/ (- (sqrt (/ 1 x)) (sqrt x)) (* x x))) (/ (- (sqrt (/ 1 x)) (sqrt x)) (* x x)) (- (sqrt (/ 1 x)) (sqrt x)) (- (+ x 1) x) (+ (* (/ 2 x) (* x x)) 1/2) (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg (+ (* (/ 2 x) (* x x)) 1/2)) (/ 1 (/ (sqrt (+ x 1)) (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt x)))) (/ (sqrt (+ x 1)) (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt x))) (sqrt (+ x 1)) (+ x 1) (+ (sqrt x) (sqrt (+ x 1))) (sqrt (/ 1 x)) (/ -1 (sqrt (+ x 1))) (/ (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x)))) (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt x)) (/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x))","x","inf"],[3.0869140625,"((+ (* (/ 1 x) (+ (/ 3/8 x) -1/2)) 1) (/ (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (+ (sqrt x) (sqrt (+ x 1)))) (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/ (+ (* (/ 1 x) (+ (/ 3/8 x) -1/2)) 1) x) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ 1 (sqrt x)) (sqrt x) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (* -1/2 (/ (- (sqrt (/ 1 x)) (sqrt x)) (* x x))) (/ (- (sqrt (/ 1 x)) (sqrt x)) (* x x)) (- (sqrt (/ 1 x)) (sqrt x)) (- (+ x 1) x) (+ (* (/ 2 x) (* x x)) 1/2) (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg (+ (* (/ 2 x) (* x x)) 1/2)) (/ 1 (/ (sqrt (+ x 1)) (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt x)))) (/ (sqrt (+ x 1)) (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt x))) (sqrt (+ x 1)) (+ x 1) (+ (sqrt x) (sqrt (+ x 1))) (sqrt (/ 1 x)) (/ -1 (sqrt (+ x 1))) (/ (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x)))) (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt x)) (/ (+ (* -1/8 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) x))","x","0"]],"time":14.525146484375,"type":"series"},{"count":[[142,141]],"egraph":[[0,8175,2312,0.091361589],[2,5583,2449,0.03046054],[1,1728,2490,0.019914332],[0,583,2863,0.006059668]],"inputs":[["(/ 3/8 (pow x 2))","(/ (+ 3/8 (* -1/2 x)) (pow x 2))","(/ (+ 3/8 (* x (- x 1/2))) (pow x 2))","(* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))","(/ (+ (* -1/2 (* (sqrt (pow x 3)) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/ (+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3))))))))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/ (+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))) (+ (* x (+ (* -1 (* (sqrt x) (+ (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 2))) (+ (* 1/2 (/ (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))) (+ 1 (sqrt x)))) (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 3))))))) (+ (* 1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* 1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x)))))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))))))))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(sqrt (/ 1 x))","(/ (+ (sqrt x) (* -1/2 (sqrt (pow x 3)))) x)","(/ (+ (sqrt x) (* (pow x 2) (+ (* -1/2 (sqrt (/ 1 x))) (* 1/2 (sqrt x))))) x)","(/ (+ (sqrt x) (* (pow x 2) (+ (* -1/2 (sqrt (/ 1 x))) (* x (+ (* -1/2 (* (sqrt x) (+ 1 (* 1/4 (/ 1 x))))) (* 1/2 (sqrt (/ 1 x)))))))) x)","(/ 3/8 (pow x 3))","(/ (+ 3/8 (* -1/2 x)) (pow x 3))","(/ (+ 3/8 (* x (- x 1/2))) (pow x 3))","(/ (+ (sqrt x) (* -1 x)) x)","(/ (+ (sqrt x) (* x (- (* 1/2 x) 1))) x)","(/ (+ (sqrt x) (* x (- (* x (+ 1/2 (* -3/8 x))) 1))) x)","(sqrt x)","(* -1/2 (sqrt (/ 1 (pow x 5))))","(/ (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 3))","(sqrt (/ 1 (pow x 5)))","(/ (+ (sqrt x) (* -1 (sqrt (pow x 3)))) (pow x 3))","(/ (+ (sqrt x) (* -1 (sqrt (pow x 3)))) x)","1","1/2","(+ 1/2 (* 2 x))","-1","(- (* 1/2 x) 1)","(- (* x (+ 1/2 (* -3/8 x))) 1)","(- (* x (+ 1/2 (* x (- (* 5/16 x) 3/8)))) 1)","-1/2","(- (* -2 x) 1/2)","(* (sqrt (/ 1 x)) (- 1 (sqrt x)))","(/ (+ (* 1/2 (sqrt (pow x 3))) (* (sqrt x) (- 1 (sqrt x)))) x)","(/ (+ (* x (+ (* 1/2 (sqrt x)) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (- 1 (sqrt x)))) (* -1/8 (sqrt x)))))) (* (sqrt x) (- 1 (sqrt x)))) x)","(/ (+ (* x (+ (* 1/2 (sqrt x)) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (- 1 (sqrt x)))) (+ (* -1/8 (sqrt x)) (* x (+ (* -1/4 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt x)) (* 1/2 (* (sqrt (/ 1 x)) (- 1 (sqrt x)))))))))))) (* (sqrt x) (- 1 (sqrt x)))) x)","(* (sqrt x) (/ 1 (- 1 (sqrt x))))","(+ (* -1/2 (* (sqrt (pow x 3)) (/ 1 (pow (- 1 (sqrt x)) 2)))) (* (sqrt x) (/ 1 (- 1 (sqrt x)))))","(+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (- 1 (sqrt x)) 2)))) (* x (+ (* 1/2 (* (sqrt (/ 1 x)) (/ 1 (- 1 (sqrt x))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (- 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (- 1 (sqrt x)) 3))))))))) (* (sqrt x) (/ 1 (- 1 (sqrt x)))))","(+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (- 1 (sqrt x)) 2)))) (* x (+ (* 1/2 (* (sqrt (/ 1 x)) (/ 1 (- 1 (sqrt x))))) (+ (* x (+ (* -1 (* (sqrt x) (+ (* 1/16 (/ 1 (pow (- 1 (sqrt x)) 2))) (+ (* 1/2 (/ (+ (* 1/8 (/ 1 (pow (- 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (- 1 (sqrt x)) 3)))) (- 1 (sqrt x)))) (* 1/16 (/ 1 (pow (- 1 (sqrt x)) 3))))))) (* -1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (- 1 (sqrt x)) 2)))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (- 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (- 1 (sqrt x)) 3)))))))))) (* (sqrt x) (/ 1 (- 1 (sqrt x)))))","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* -1/8 x))))","(+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8)))))","(+ 1 x)","(+ 1 (sqrt x))","(+ 1 (+ (sqrt x) (* 1/2 x)))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* -1/8 x)))))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))))","(/ (+ (* x (+ (* -1/8 (sqrt (pow x 3))) (* 1/2 (sqrt x)))) (* (sqrt x) (- 1 (sqrt x)))) x)","(/ (+ (* x (+ (* 1/2 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/16 (sqrt (pow x 3))))))) (* (sqrt x) (- 1 (sqrt x)))) x)","(* -1/8 (sqrt (/ 1 (pow x 3))))","(/ (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 2))","(- 1 (* 1/2 (/ 1 x)))","(- (+ 1 (/ 3/8 (pow x 2))) (* 1/2 (/ 1 x)))","(* 1/2 (sqrt (/ 1 (pow x 3))))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 3/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) (pow x 2))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (+ (* -5/32 (sqrt (/ 1 (pow x 5)))) (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (+ (* 3/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))))) (pow x 2))","(/ 1 x)","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 3/8 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 3/8 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 5/16 (/ 1 (pow x 3))))) x)","(/ (- (* -1/2 (sqrt (/ 1 x))) (* -1/2 (sqrt x))) (pow x 2))","(/ (- (* 1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (/ 1 x))))) (pow x 2))","(/ (- (* -1/2 (* (sqrt (/ 1 (pow x 5))) (+ 1 (* 1/2 x)))) (+ (* -1/2 (sqrt x)) (+ (* -1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 x)))))) (pow x 2))","(/ (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))) x)","(* -1 (sqrt (/ 1 (pow x 3))))","(/ (+ (sqrt (/ 1 (pow x 3))) (* -1 (sqrt (/ 1 x)))) x)","(* -1 (sqrt x))","(* x (- (sqrt (/ 1 (pow x 3))) (sqrt (/ 1 x))))","(* 2 x)","(* x (+ 2 (* 1/2 (/ 1 x))))","(* -1 (sqrt (/ 1 x)))","(+ (* -1 (sqrt (/ 1 x))) (* 1/2 (sqrt (/ 1 (pow x 3)))))","(+ (* -1 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(+ (* -1 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (* (sqrt (/ 1 (pow x 7))) (+ 1 (* 1/4 x)))))))","(* -2 x)","(* -1 (* x (+ 2 (* 1/2 (/ 1 x)))))","(* 2 (sqrt (pow x 3)))","(* (pow x 2) (+ (sqrt (/ 1 (pow x 3))) (* 2 (sqrt (/ 1 x)))))","(* (pow x 2) (+ (sqrt (/ 1 (pow x 3))) (+ (* -1/4 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))))","(* (pow x 2) (+ (sqrt (/ 1 (pow x 3))) (+ (* -1/4 (sqrt (/ 1 (pow x 5)))) (+ (* 1/8 (sqrt (/ 1 (pow x 7)))) (+ (* 1/4 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))))))","(* x (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3)))))))","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))))","x","(* x (+ 1 (/ 1 x)))","(* 2 (sqrt x))","(* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x))))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))))","(/ 1/2 x)","(/ (- 1/2 (* 1/8 (/ 1 x))) x)","(/ (- (+ 1/2 (* 1/16 (/ 1 (pow x 2)))) (/ 1/8 x)) x)","(/ (- (+ 1/2 (* 1/16 (/ 1 (pow x 2)))) (+ (/ 1/8 x) (* 5/128 (/ 1 (pow x 3))))) x)","(* 1/2 (sqrt (/ 1 x)))","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x))))","(+ 1 (* -1 (/ (- 1/2 (* 3/8 (/ 1 x))) x)))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 3/16 (sqrt x))) x)) (* 1/4 (sqrt x))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/16 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 5/32 (sqrt x))) x)) (+ (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 3/16 (sqrt x)))) x)) (* 1/4 (sqrt x))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/ -1 x)","(* -1 (/ (- 1 (* 1/2 (/ 1 x))) x))","(* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 3/8 (/ 1 x))) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 3/8 (* 5/16 (/ 1 x))) x))) x))) x))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* 3/8 (/ 1 x)) 1/2) x)) 1) x))","(- (sqrt (/ 1 x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 5))))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(- (+ (sqrt (/ 1 x)) (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* -1/2 (sqrt x))) (pow x 3)))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x))","(* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))","(* -1 (/ (+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x))","(* (sqrt x) (pow (sqrt -1) 2))","(* -1 (* x (- (* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (sqrt (/ 1 (pow x 3)))))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* 1/2 (sqrt x))) (pow x 3))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(/ (+ (* 1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2))))) x)) (* -1/4 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/2 (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* 1/16 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 4))))) x)) (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))))) x)) (* -1/4 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)) (* 1/2 (sqrt x))) (pow x 2))","(* 2 (* (sqrt (pow x 3)) (pow (sqrt -1) 4)))","(* (pow x 2) (+ (* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 4)))))","(* (pow x 2) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (sqrt (/ 1 x))) (* 1/2 (* (sqrt x) (pow (sqrt -1) 2)))) x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x)) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 4)))))","(* (pow x 2) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/4 (sqrt x))) x)) (+ (* -1/4 (sqrt (/ 1 x))) (* 1/2 (* (sqrt x) (pow (sqrt -1) 2))))) x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x)) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 4)))))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(* -2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(/ -1/2 (* x (pow (sqrt -1) 2)))","(* -1 (/ (+ (* 1/8 (/ 1 (* x (pow (sqrt -1) 4)))) (* 1/2 (/ 1 (pow (sqrt -1) 2)))) x))","(* -1 (/ (- (+ (/ 1/16 (* (pow x 2) (pow (sqrt -1) 6))) (* 1/2 (/ 1 (pow (sqrt -1) 2)))) (/ -1/8 (* x (pow (sqrt -1) 4)))) x))","(* -1 (/ (- (+ (* 1/16 (/ 1 (* (pow x 2) (pow (sqrt -1) 6)))) (+ (* 5/128 (/ 1 (* (pow x 3) (pow (sqrt -1) 8)))) (* 1/2 (/ 1 (pow (sqrt -1) 2))))) (/ -1/8 (* x (pow (sqrt -1) 4)))) x))","(* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))))"]],"memory":[[-1661152,48125360]],"method":["egg-herbie"],"outputs":[["(/ 3/8 (pow x 2))","(/.f64 #s(literal 3/8 binary64) (*.f64 x x))","(/ (+ 3/8 (* -1/2 x)) (pow x 2))","(/.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 3/8 binary64)) x) x)","(/ (+ 3/8 (* x (- x 1/2))) (pow x 2))","(/.f64 (/.f64 (fma.f64 (-.f64 x #s(literal 1/2 binary64)) x #s(literal 3/8 binary64)) x) x)","(* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))","(/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(/ (+ (* -1/2 (* (sqrt (pow x 3)) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/.f64 (fma.f64 (/.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 (sqrt.f64 x) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))) x)","(/ (+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3))))))))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) (/.f64 #s(literal 1/8 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (sqrt.f64 x) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) #s(literal -1/2 binary64))) x (/.f64 (*.f64 (sqrt.f64 x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) x (/.f64 (sqrt.f64 x) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))) x)","(/ (+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))) (+ (* x (+ (* -1 (* (sqrt x) (+ (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 2))) (+ (* 1/2 (/ (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))) (+ 1 (sqrt x)))) (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 3))))))) (+ (* 1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* 1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x)))))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))))))))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (fma.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) (/.f64 #s(literal 1/8 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) #s(literal 1/2 binary64) (/.f64 #s(literal 1/16 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64)))) (/.f64 #s(literal 1/16 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1 binary64) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) (*.f64 #s(literal 1/4 binary64) (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64))))))) x (fma.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) (/.f64 #s(literal 1/8 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (sqrt.f64 x) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) #s(literal -1/2 binary64)))) x (/.f64 (*.f64 (sqrt.f64 x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) x (/.f64 (sqrt.f64 x) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))) x)","(sqrt (/ 1 x))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/ (+ (sqrt x) (* -1/2 (sqrt (pow x 3)))) x)","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal -1/2 binary64) (sqrt.f64 x)) x)","(/ (+ (sqrt x) (* (pow x 2) (+ (* -1/2 (sqrt (/ 1 x))) (* 1/2 (sqrt x))))) x)","(/.f64 (fma.f64 (*.f64 (*.f64 x x) #s(literal -1/2 binary64)) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (sqrt.f64 x)) x)","(/ (+ (sqrt x) (* (pow x 2) (+ (* -1/2 (sqrt (/ 1 x))) (* x (+ (* -1/2 (* (sqrt x) (+ 1 (* 1/4 (/ 1 x))))) (* 1/2 (sqrt (/ 1 x)))))))) x)","(/.f64 (fma.f64 (fma.f64 (*.f64 x (*.f64 (sqrt.f64 x) #s(literal -1/2 binary64))) (+.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1 binary64)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1/2 binary64)))) (*.f64 x x) (sqrt.f64 x)) x)","(/ 3/8 (pow x 3))","(/.f64 #s(literal 3/8 binary64) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 3/8 (* -1/2 x)) (pow x 3))","(/.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 3/8 binary64)) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 3/8 (* x (- x 1/2))) (pow x 3))","(/.f64 (fma.f64 (-.f64 x #s(literal 1/2 binary64)) x #s(literal 3/8 binary64)) (pow.f64 x #s(literal 3 binary64)))","(/ (+ (sqrt x) (* -1 x)) x)","(/.f64 (-.f64 (sqrt.f64 x) x) x)","(/ (+ (sqrt x) (* x (- (* 1/2 x) 1))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x (sqrt.f64 x)) x)","(/ (+ (sqrt x) (* x (- (* x (+ 1/2 (* -3/8 x))) 1))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -3/8 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x (sqrt.f64 x)) x)","(sqrt x)","(sqrt.f64 x)","(* -1/2 (sqrt (/ 1 (pow x 5))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/2 binary64))","(/ (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 3))","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 x) #s(literal -1/2 binary64))) (pow.f64 x #s(literal 3 binary64)))","(sqrt (/ 1 (pow x 5)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))","(/ (+ (sqrt x) (* -1 (sqrt (pow x 3)))) (pow x 3))","(/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ (sqrt x) (* -1 (sqrt (pow x 3)))) x)","(/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))) x)","1","#s(literal 1 binary64)","1/2","#s(literal 1/2 binary64)","(+ 1/2 (* 2 x))","(fma.f64 #s(literal 2 binary64) x #s(literal 1/2 binary64))","-1","#s(literal -1 binary64)","(- (* 1/2 x) 1)","(fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))","(- (* x (+ 1/2 (* -3/8 x))) 1)","(fma.f64 (fma.f64 #s(literal -3/8 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(- (* x (+ 1/2 (* x (- (* 5/16 x) 3/8)))) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal 5/16 binary64) x #s(literal -3/8 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","-1/2","#s(literal -1/2 binary64)","(- (* -2 x) 1/2)","(fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))","(* (sqrt (/ 1 x)) (- 1 (sqrt x)))","(*.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(/ (+ (* 1/2 (sqrt (pow x 3))) (* (sqrt x) (- 1 (sqrt x)))) x)","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) (sqrt.f64 x))) x)","(/ (+ (* x (+ (* 1/2 (sqrt x)) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (- 1 (sqrt x)))) (* -1/8 (sqrt x)))))) (* (sqrt x) (- 1 (sqrt x)))) x)","(/.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 #s(literal 1 binary64) (sqrt.f64 x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x (*.f64 (sqrt.f64 x) (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/2 binary64)))) x (*.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) (sqrt.f64 x))) x)","(/ (+ (* x (+ (* 1/2 (sqrt x)) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (- 1 (sqrt x)))) (+ (* -1/8 (sqrt x)) (* x (+ (* -1/4 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt x)) (* 1/2 (* (sqrt (/ 1 x)) (- 1 (sqrt x)))))))))))) (* (sqrt x) (- 1 (sqrt x)))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 #s(literal 1 binary64) (sqrt.f64 x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 (fma.f64 #s(literal 1/16 binary64) (sqrt.f64 x) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64) #s(literal -1/4 binary64)))) x (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) x (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x (*.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) (sqrt.f64 x))) x)","(* (sqrt x) (/ 1 (- 1 (sqrt x))))","(/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(+ (* -1/2 (* (sqrt (pow x 3)) (/ 1 (pow (- 1 (sqrt x)) 2)))) (* (sqrt x) (/ 1 (- 1 (sqrt x)))))","(fma.f64 (/.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) (sqrt.f64 x))))","(+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (- 1 (sqrt x)) 2)))) (* x (+ (* 1/2 (* (sqrt (/ 1 x)) (/ 1 (- 1 (sqrt x))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (- 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (- 1 (sqrt x)) 3))))))))) (* (sqrt x) (/ 1 (- 1 (sqrt x)))))","(fma.f64 (fma.f64 (fma.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) #s(literal 3 binary64))) (/.f64 #s(literal 1/8 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) #s(literal 2 binary64)))) (sqrt.f64 x) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) (sqrt.f64 x))) #s(literal 1/2 binary64))) x (/.f64 (*.f64 (sqrt.f64 x) #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) #s(literal 2 binary64)))) x (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) (sqrt.f64 x))))","(+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (- 1 (sqrt x)) 2)))) (* x (+ (* 1/2 (* (sqrt (/ 1 x)) (/ 1 (- 1 (sqrt x))))) (+ (* x (+ (* -1 (* (sqrt x) (+ (* 1/16 (/ 1 (pow (- 1 (sqrt x)) 2))) (+ (* 1/2 (/ (+ (* 1/8 (/ 1 (pow (- 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (- 1 (sqrt x)) 3)))) (- 1 (sqrt x)))) (* 1/16 (/ 1 (pow (- 1 (sqrt x)) 3))))))) (* -1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (- 1 (sqrt x)) 2)))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (- 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (- 1 (sqrt x)) 3)))))))))) (* (sqrt x) (/ 1 (- 1 (sqrt x)))))","(fma.f64 (fma.f64 (fma.f64 (fma.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (fma.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) #s(literal 3 binary64))) (/.f64 #s(literal 1/8 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (sqrt.f64 x))) #s(literal 1/2 binary64) (/.f64 #s(literal 1/16 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) #s(literal 3 binary64)))) (/.f64 #s(literal 1/16 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) #s(literal 2 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) #s(literal 2 binary64))) #s(literal -1/4 binary64))) x (fma.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) #s(literal 3 binary64))) (/.f64 #s(literal 1/8 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) #s(literal 2 binary64)))) (sqrt.f64 x) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 1 binary64) (sqrt.f64 x))) #s(literal 1/2 binary64)))) x (/.f64 (*.f64 (sqrt.f64 x) #s(literal -1/2 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) #s(literal 2 binary64)))) x (/.f64 (sqrt.f64 x) (-.f64 #s(literal 1 binary64) (sqrt.f64 x))))","(+ 1 (* 1/2 x))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/2 (* -1/8 x))))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/2 (* x (- (* 1/16 x) 1/8)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/16 binary64) x #s(literal -1/8 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(+ 1 (sqrt x))","(+.f64 (sqrt.f64 x) #s(literal 1 binary64))","(+ 1 (+ (sqrt x) (* 1/2 x)))","(fma.f64 #s(literal 1/2 binary64) x (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* -1/8 x)))))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/2 binary64)) x (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/16 binary64) x #s(literal -1/8 binary64)) x #s(literal 1/2 binary64)) x (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(/ (+ (* x (+ (* -1/8 (sqrt (pow x 3))) (* 1/2 (sqrt x)))) (* (sqrt x) (- 1 (sqrt x)))) x)","(/.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64)))) x (*.f64 (sqrt.f64 x) (fma.f64 #s(literal 1/2 binary64) x (-.f64 #s(literal 1 binary64) (sqrt.f64 x))))) x)","(/ (+ (* x (+ (* 1/2 (sqrt x)) (* x (+ (* -1/8 (sqrt x)) (* 1/16 (sqrt (pow x 3))))))) (* (sqrt x) (- 1 (sqrt x)))) x)","(/.f64 (fma.f64 (fma.f64 (sqrt.f64 x) (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/2 binary64)) (*.f64 (*.f64 #s(literal 1/16 binary64) x) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))))) x (*.f64 (-.f64 #s(literal 1 binary64) (sqrt.f64 x)) (sqrt.f64 x))) x)","(* -1/8 (sqrt (/ 1 (pow x 3))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64))","(/ (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (pow x 3)))) (pow x 2))","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 x x))","(- 1 (* 1/2 (/ 1 x)))","(-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x))","(- (+ 1 (/ 3/8 (pow x 2))) (* 1/2 (/ 1 x)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))","(* 1/2 (sqrt (/ 1 (pow x 3))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) (pow x 2))","(/.f64 (fma.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 3/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) (pow x 2))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -3/8 binary64) (fma.f64 #s(literal 3/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) (*.f64 x x))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (+ (* -5/32 (sqrt (/ 1 (pow x 5)))) (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (+ (* 3/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))))) (pow x 2))","(/.f64 (fma.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal -5/32 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/4 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))))) (*.f64 x x))","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)","(/ (- (+ 1 (/ 3/8 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x)","(/ (- (+ 1 (/ 3/8 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 5/16 (/ 1 (pow x 3))))) x)","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (/.f64 #s(literal 5/16 binary64) (pow.f64 x #s(literal 3 binary64)))) x)","(/ (- (* -1/2 (sqrt (/ 1 x))) (* -1/2 (sqrt x))) (pow x 2))","(*.f64 (/.f64 #s(literal -1/2 binary64) (*.f64 x x)) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(/ (- (* 1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (/ 1 x))))) (pow x 2))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/2 binary64))) (*.f64 x x))","(/ (- (* -1/2 (* (sqrt (/ 1 (pow x 5))) (+ 1 (* 1/2 x)))) (+ (* -1/2 (sqrt x)) (+ (* -1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 x)))))) (pow x 2))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (-.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (+.f64 (sqrt.f64 x) (*.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/2 binary64))) (*.f64 x x))","(/ (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))) x)","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)","(* -1 (sqrt (/ 1 (pow x 3))))","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/ (+ (sqrt (/ 1 (pow x 3))) (* -1 (sqrt (/ 1 x)))) x)","(/.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* -1 (sqrt x))","(neg.f64 (sqrt.f64 x))","(* x (- (sqrt (/ 1 (pow x 3))) (sqrt (/ 1 x))))","(*.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* 2 x)","(*.f64 #s(literal 2 binary64) x)","(* x (+ 2 (* 1/2 (/ 1 x))))","(fma.f64 #s(literal 2 binary64) x #s(literal 1/2 binary64))","(* -1 (sqrt (/ 1 x)))","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(+ (* -1 (sqrt (/ 1 x))) (* 1/2 (sqrt (/ 1 (pow x 3)))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(+ (* -1 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(fma.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(+ (* -1 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (* (sqrt (/ 1 (pow x 7))) (+ 1 (* 1/4 x)))))))","(-.f64 (fma.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/2 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(* -2 x)","(*.f64 #s(literal -2 binary64) x)","(* -1 (* x (+ 2 (* 1/2 (/ 1 x)))))","(fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))","(* 2 (sqrt (pow x 3)))","(*.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal 2 binary64))","(* (pow x 2) (+ (sqrt (/ 1 (pow x 3))) (* 2 (sqrt (/ 1 x)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (*.f64 x x))","(* (pow x 2) (+ (sqrt (/ 1 (pow x 3))) (+ (* -1/4 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))))","(*.f64 (+.f64 (fma.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (*.f64 x x))","(* (pow x 2) (+ (sqrt (/ 1 (pow x 3))) (+ (* -1/4 (sqrt (/ 1 (pow x 5)))) (+ (* 1/8 (sqrt (/ 1 (pow x 7)))) (+ (* 1/4 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))))))","(*.f64 (+.f64 (fma.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) #s(literal 1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/4 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (*.f64 x x))","(* x (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3)))))))","(*.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)","(* x (+ (sqrt (/ 1 x)) (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))))","(*.f64 (+.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","x","(* x (+ 1 (/ 1 x)))","(+.f64 #s(literal 1 binary64) x)","(* 2 (sqrt x))","(*.f64 #s(literal 2 binary64) (sqrt.f64 x))","(* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))) x)","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x))))))","(*.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))) x)","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) #s(literal 1/16 binary64) (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))))) x)","(/ 1/2 x)","(/.f64 #s(literal 1/2 binary64) x)","(/ (- 1/2 (* 1/8 (/ 1 x))) x)","(/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/8 binary64) x)) x)","(/ (- (+ 1/2 (* 1/16 (/ 1 (pow x 2)))) (/ 1/8 x)) x)","(/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/16 binary64) (*.f64 x x)) #s(literal 1/2 binary64)) (/.f64 #s(literal 1/8 binary64) x)) x)","(/ (- (+ 1/2 (* 1/16 (/ 1 (pow x 2)))) (+ (/ 1/8 x) (* 5/128 (/ 1 (pow x 3))))) x)","(/.f64 (-.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/16 binary64) (*.f64 x x)) #s(literal 1/2 binary64)) (/.f64 #s(literal 1/8 binary64) x)) (/.f64 #s(literal 5/128 binary64) (pow.f64 x #s(literal 3 binary64)))) x)","(* 1/2 (sqrt (/ 1 x)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))","(+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","(+ 1 (* -1 (/ (- 1/2 (* 3/8 (/ 1 x))) x)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 3/16 (sqrt x))) x)) (* 1/4 (sqrt x))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/4 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal 3/16 binary64) (sqrt.f64 x))) (neg.f64 x))) (neg.f64 x))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/16 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 5/32 (sqrt x))) x)) (+ (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 3/16 (sqrt x)))) x)) (* 1/4 (sqrt x))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/4 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (fma.f64 #s(literal 3/16 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/16 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal 5/32 binary64) (sqrt.f64 x))) (neg.f64 x)))) (neg.f64 x))) (neg.f64 x))) (*.f64 x x))","(/ -1 x)","(/.f64 #s(literal -1 binary64) x)","(* -1 (/ (- 1 (* 1/2 (/ 1 x))) x))","(/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x)","(* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 3/8 (/ 1 x))) x))) x))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) x)","(* -1 (/ (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 3/8 (* 5/16 (/ 1 x))) x))) x))) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 3/8 binary64) (/.f64 #s(literal 5/16 binary64) x)) x)) x)) (neg.f64 x))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)","(* -1 (/ (- (* -1 (/ (- (* 3/8 (/ 1 x)) 1/2) x)) 1) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x)","(- (sqrt (/ 1 x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))","(- (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))","(- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 5))))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))))","(- (+ (sqrt (/ 1 x)) (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* -1/2 (sqrt x))) (pow x 3)))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 x #s(literal -1 binary64)) #s(literal -1/4 binary64) #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(sqrt.f64 x)","(* -1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))","(* -1 (/ (+ (* 1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x))","(*.f64 #s(literal 1/2 binary64) (/.f64 (+.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x))","(* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(* -1 (/ (+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) x))","(/.f64 (-.f64 (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* (sqrt x) (pow (sqrt -1) 2))","(neg.f64 (sqrt.f64 x))","(* -1 (* x (- (* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(*.f64 (-.f64 (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (sqrt (/ 1 (pow x 3)))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(fma.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* 1/2 (sqrt x))) (pow x 3))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (fma.f64 #s(literal 1/2 binary64) (/.f64 (fma.f64 (fma.f64 (/.f64 x #s(literal -1 binary64)) #s(literal -1/4 binary64) #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(/ (+ (* 1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) (pow x 2))","(/.f64 (fma.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2))))) x)) (* -1/4 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/4 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal 3/16 binary64) (sqrt.f64 x))) (neg.f64 x))) (neg.f64 x))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/2 (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* 1/16 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 4))))) x)) (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))))) x)) (* -1/4 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/4 binary64) (sqrt.f64 x) (/.f64 (-.f64 (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal 3/16 binary64) (sqrt.f64 x))) (/.f64 (fma.f64 (/.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) #s(literal 1/16 binary64) (*.f64 #s(literal 5/32 binary64) (sqrt.f64 x))) x)) (neg.f64 x))) (neg.f64 x))) (*.f64 x x))","(* 2 (* (sqrt (pow x 3)) (pow (sqrt -1) 4)))","(*.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))))","(* (pow x 2) (+ (* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 4)))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (*.f64 x x))","(* (pow x 2) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (sqrt (/ 1 x))) (* 1/2 (* (sqrt x) (pow (sqrt -1) 2)))) x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x)) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 4)))))","(*.f64 (fma.f64 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (/.f64 (fma.f64 (/.f64 (fma.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x) #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) (*.f64 x x))","(* (pow x 2) (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/4 (sqrt x))) x)) (+ (* -1/4 (sqrt (/ 1 x))) (* 1/2 (* (sqrt x) (pow (sqrt -1) 2))))) x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x)) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 4)))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (/.f64 (-.f64 (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) (/.f64 (fma.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 (sqrt.f64 x) #s(literal -1/2 binary64) (/.f64 (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/4 binary64) (sqrt.f64 x))) x))) x)) (neg.f64 x))) (*.f64 x x))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (neg.f64 x))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))) (neg.f64 x))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(*.f64 (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) (neg.f64 x))","(* -2 (* (sqrt x) (pow (sqrt -1) 2)))","(*.f64 #s(literal 2 binary64) (sqrt.f64 x))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (neg.f64 x))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))) (neg.f64 x))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))))","(*.f64 (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) (neg.f64 x))","(* (sqrt (/ 1 x)) (pow (sqrt -1) 2))","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(/ -1/2 (* x (pow (sqrt -1) 2)))","(/.f64 #s(literal 1/2 binary64) x)","(* -1 (/ (+ (* 1/8 (/ 1 (* x (pow (sqrt -1) 4)))) (* 1/2 (/ 1 (pow (sqrt -1) 2)))) x))","(/.f64 (fma.f64 (/.f64 #s(literal 1/8 binary64) (*.f64 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64)) x)) #s(literal -1 binary64) #s(literal 1/2 binary64)) x)","(* -1 (/ (- (+ (/ 1/16 (* (pow x 2) (pow (sqrt -1) 6))) (* 1/2 (/ 1 (pow (sqrt -1) 2)))) (/ -1/8 (* x (pow (sqrt -1) 4)))) x))","(/.f64 (-.f64 (+.f64 (/.f64 (/.f64 #s(literal 1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 6 binary64))) (*.f64 x x)) #s(literal -1/2 binary64)) (/.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64)) x))) (neg.f64 x))","(* -1 (/ (- (+ (* 1/16 (/ 1 (* (pow x 2) (pow (sqrt -1) 6)))) (+ (* 5/128 (/ 1 (* (pow x 3) (pow (sqrt -1) 8)))) (* 1/2 (/ 1 (pow (sqrt -1) 2))))) (/ -1/8 (* x (pow (sqrt -1) 4)))) x))","(/.f64 (+.f64 (+.f64 (/.f64 (/.f64 #s(literal 5/128 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 8 binary64))) (pow.f64 x #s(literal 3 binary64))) (-.f64 #s(literal -1/2 binary64) (/.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64)) x)))) (/.f64 (/.f64 #s(literal 1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 6 binary64))) (*.f64 x x))) (neg.f64 x))","(* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64))","(+ (* -1/2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1/8 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))"]],"stop":[["iter limit",1],["node limit",1]],"time":293.48095703125,"type":"simplify"},{"count":[[25,895]],"egraph":[[0,9429,283,0.075690249],[2,2984,298,0.039399128],[1,376,318,0.012437195],[0,95,345,0.002555931],[0,57,345,0.000474755]],"inputs":[["(fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal -1/2 binary64)) #s(literal 1 binary64))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","#s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) x))","(/.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) x)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 x)))","(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","(sqrt.f64 x)","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 x x))))","(*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 x x)))","(/.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 x x))","(-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))","(-.f64 (+.f64 x #s(literal 1 binary64)) x)","(fma.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x) #s(literal 1/2 binary64))","(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x) #s(literal 1/2 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)) (sqrt.f64 x))))","(/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)) (sqrt.f64 x)))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x) #s(literal 1/2 binary64)))))","(/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)) (sqrt.f64 x))","(/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)"]],"memory":[[568304,69420768]],"outputs":[["(*.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (-.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64))) (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64)) (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64))) (*.f64 (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64)) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64)) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))))","(/.f64 (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (-.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64))) (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64))) (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(fma.f64 (*.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)))","(fma.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (/.f64 #s(literal 3/8 binary64) x) (pow.f64 x #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)))","(fma.f64 #s(literal 3/8 binary64) (pow.f64 x #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) #s(literal 1 binary64))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal 3/8 binary64) x) (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 3/8 binary64) x) x) (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64))","(-.f64 (/.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64)) (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64))) (pow.f64 (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(+.f64 (+.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 3/8 binary64) x) x)) (/.f64 #s(literal -1/2 binary64) x))","(+.f64 (/.f64 (/.f64 #s(literal 3/8 binary64) x) x) (+.f64 (/.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64)))","(+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))","(*.f64 (/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) x)) (-.f64 x (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) x)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))) (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))","(*.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)) #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) x)))","(*.f64 (neg.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) x))) (pow.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) #s(literal -1 binary64)))","(*.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) x)) (pow.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) x)) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(pow.f64 (/.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) x))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) x))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) x)) #s(literal 1 binary64))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) x))))) (neg.f64 (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))))","(/.f64 (*.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) x)) #s(literal 1 binary64)) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 (neg.f64 (neg.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) x)))) (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(/.f64 (neg.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) x))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) x))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) x)))))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) x)) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) x))))","(neg.f64 (/.f64 (neg.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) x))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(neg.f64 (/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) x)) (neg.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))))","(exp.f64 (*.f64 (log.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) x)))) #s(literal -1 binary64)))","#s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) x))","(*.f64 (pow.f64 (/.f64 x (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (neg.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64))) (/.f64 #s(literal -1 binary64) x))","(*.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) x))","(pow.f64 (/.f64 (/.f64 x (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 x (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64))))) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (*.f64 (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (*.f64 (+.f64 (-.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64))) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (-.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64))) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (+.f64 (-.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64))))","(/.f64 (*.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (*.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) #s(literal 1 binary64)) x)","(/.f64 (neg.f64 (neg.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 x (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 x (+.f64 (-.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) (neg.f64 x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) x))","(/.f64 (*.f64 (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (+.f64 (-.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64))) (neg.f64 x)))","(/.f64 (*.f64 (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (-.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64))) x))","(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 x (-.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64))))","(/.f64 (+.f64 (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 x (+.f64 (-.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (pow.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 x (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)))))","(/.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) x)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 x (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 x (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64))))","(neg.f64 (/.f64 (neg.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64))) x))","(neg.f64 (/.f64 (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) (neg.f64 x)))","(exp.f64 (*.f64 (log.f64 (/.f64 x (+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)))) #s(literal -1 binary64)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 x #s(literal -1/4 binary64)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal -1 binary64) x)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1/2 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(pow.f64 (pow.f64 x #s(literal -1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))","(pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/4 binary64))","(pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64))","(pow.f64 (sqrt.f64 x) #s(literal -1 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64))","(pow.f64 x #s(literal -1/2 binary64))","(/.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (neg.f64 (sqrt.f64 (neg.f64 x))))","(/.f64 (sqrt.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64)))) (sqrt.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (sqrt.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64))) (sqrt.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (sqrt.f64 (sqrt.f64 x)))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x)))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (neg.f64 x)))","(/.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)))","(/.f64 (sqrt.f64 x) x)","(/.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 (neg.f64 x))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","(neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(sqrt.f64 (/.f64 x (*.f64 x x)))","(sqrt.f64 (pow.f64 x #s(literal -1 binary64)))","(fabs.f64 (pow.f64 x #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 #s(literal -1/2 binary64) (log.f64 x)))","(*.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 x)))","(*.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (sqrt.f64 x))","(pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64))","(pow.f64 (sqrt.f64 x) #s(literal 1 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1/2 binary64))","(pow.f64 x #s(literal 1/2 binary64))","(/.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))","(/.f64 (sqrt.f64 (neg.f64 x)) (sqrt.f64 #s(literal -1 binary64)))","(/.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 (sqrt.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(sqrt.f64 x)","(fabs.f64 (sqrt.f64 x))","(exp.f64 (log.f64 (sqrt.f64 x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (-.f64 (pow.f64 x #s(literal -5/2 binary64)) (pow.f64 x #s(literal -3/2 binary64))) #s(literal -1/2 binary64)))","(*.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 #s(literal -1/2 binary64) x) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))","(*.f64 (-.f64 (pow.f64 x #s(literal -5/2 binary64)) (pow.f64 x #s(literal -3/2 binary64))) #s(literal -1/2 binary64))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -1/2 binary64)))","(*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 x #s(literal -5/2 binary64)) (pow.f64 x #s(literal -3/2 binary64))))","(pow.f64 (/.f64 (*.f64 x x) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal -1/2 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal -1/2 binary64)) x)) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))) #s(literal -1/2 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))))) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (neg.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal -1/2 binary64)))) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal -1/2 binary64)) x) x)","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))) #s(literal -1/2 binary64)) x)","(/.f64 (*.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))) #s(literal -1/2 binary64)) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))) x)","(/.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal -1/2 binary64))) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal -1/2 binary64)) (*.f64 x x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 x x) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1/2 binary64) (neg.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -5/2 binary64)) (pow.f64 x #s(literal -3/2 binary64))) #s(literal -1 binary64))))","(/.f64 #s(literal -1/2 binary64) (pow.f64 (-.f64 (pow.f64 x #s(literal -5/2 binary64)) (pow.f64 x #s(literal -3/2 binary64))) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x x) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal -1/2 binary64))))","(*.f64 (pow.f64 (/.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal -1 binary64)) x)) #s(literal -1 binary64)) (pow.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 x x) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)))","(*.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))","(*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal -5/2 binary64)) (pow.f64 x #s(literal -3/2 binary64))))","(pow.f64 (/.f64 x (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -5/2 binary64)) (pow.f64 x #s(literal -3/2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -5/2 binary64)) (pow.f64 x #s(literal -3/2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) x) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (-.f64 (pow.f64 (pow.f64 x #s(literal -5/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -5/2 binary64)) (pow.f64 x #s(literal -3/2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (pow.f64 x #s(literal -5/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal -9/2 binary64)))) (neg.f64 (+.f64 (pow.f64 (pow.f64 x #s(literal -5/2 binary64)) #s(literal 2 binary64)) (+.f64 (pow.f64 x #s(literal -3 binary64)) (*.f64 (pow.f64 x #s(literal -5/2 binary64)) (pow.f64 x #s(literal -3/2 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))))) (neg.f64 (neg.f64 (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x)) (*.f64 x x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)) (*.f64 x x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3/2 binary64)) (pow.f64 x #s(literal 5/2 binary64)))) (neg.f64 (pow.f64 x #s(literal 4 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -3/2 binary64)) x) (*.f64 x (pow.f64 x #s(literal -1/2 binary64)))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (neg.f64 x) x)) (neg.f64 (pow.f64 x #s(literal 3/2 binary64)))) (*.f64 x (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -3/2 binary64)) (*.f64 x x)) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 x #s(literal -1/2 binary64))) x) (*.f64 (*.f64 (neg.f64 x) x) (pow.f64 x #s(literal -1/2 binary64)))) (*.f64 (*.f64 (neg.f64 x) x) x))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 x #s(literal -1/2 binary64))) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 (neg.f64 x) x) (neg.f64 (sqrt.f64 x)))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 x #s(literal -1/2 binary64))) (*.f64 x x)) (*.f64 (*.f64 (neg.f64 x) x) (sqrt.f64 x))) (*.f64 (*.f64 (neg.f64 x) x) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 x #s(literal -1/2 binary64))) (pow.f64 x #s(literal 3/2 binary64))) (*.f64 (*.f64 (neg.f64 x) x) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 x) x) (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (*.f64 x x) (neg.f64 (sqrt.f64 x))) (pow.f64 x #s(literal -1/2 binary64)))) (*.f64 (*.f64 (*.f64 x x) (neg.f64 (sqrt.f64 x))) x))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 (*.f64 x x) (neg.f64 (sqrt.f64 x))) (neg.f64 (sqrt.f64 x)))) (*.f64 (*.f64 (*.f64 x x) (neg.f64 (sqrt.f64 x))) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (neg.f64 x) x) (*.f64 (*.f64 (*.f64 x x) (neg.f64 (sqrt.f64 x))) (sqrt.f64 x))) (*.f64 (*.f64 (*.f64 x x) (neg.f64 (sqrt.f64 x))) (*.f64 x x)))","(/.f64 (-.f64 (neg.f64 (pow.f64 x #s(literal 3/2 binary64))) (*.f64 (*.f64 (*.f64 x x) (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (*.f64 (*.f64 x x) (neg.f64 (sqrt.f64 x))) (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (*.f64 (*.f64 x x) (pow.f64 x #s(literal -1/2 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 (*.f64 x x) (neg.f64 (sqrt.f64 x)))) (*.f64 (*.f64 x x) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (*.f64 x x)) (*.f64 (*.f64 x x) (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (-.f64 x (*.f64 (pow.f64 x #s(literal 5/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))) (*.f64 (pow.f64 x #s(literal 5/2 binary64)) x))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (pow.f64 x #s(literal 5/2 binary64)) (neg.f64 (sqrt.f64 x)))) (*.f64 (pow.f64 x #s(literal 5/2 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 5/2 binary64)) (sqrt.f64 x))) (*.f64 (pow.f64 x #s(literal 5/2 binary64)) (*.f64 x x)))","(/.f64 (-.f64 (pow.f64 x #s(literal 3/2 binary64)) (*.f64 (pow.f64 x #s(literal 5/2 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 x #s(literal 5/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (-.f64 (neg.f64 (pow.f64 x #s(literal -1/2 binary64))) (neg.f64 (sqrt.f64 x))) (*.f64 (neg.f64 x) x))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) x) (pow.f64 x #s(literal -2 binary64))) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 x #s(literal -2 binary64))) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal 1 binary64)) (*.f64 x x))","(/.f64 (-.f64 (pow.f64 (pow.f64 x #s(literal -5/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal -3 binary64))) (+.f64 (pow.f64 x #s(literal -5/2 binary64)) (pow.f64 x #s(literal -3/2 binary64))))","(/.f64 (-.f64 (pow.f64 (pow.f64 x #s(literal -5/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal -9/2 binary64))) (+.f64 (pow.f64 (pow.f64 x #s(literal -5/2 binary64)) #s(literal 2 binary64)) (+.f64 (pow.f64 x #s(literal -3 binary64)) (*.f64 (pow.f64 x #s(literal -5/2 binary64)) (pow.f64 x #s(literal -3/2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) x)) (neg.f64 (*.f64 (*.f64 x x) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (*.f64 (*.f64 x x) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))) (neg.f64 x))","(/.f64 (neg.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)))) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x)) (*.f64 x x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)) (*.f64 x x)))","(/.f64 (-.f64 (pow.f64 x #s(literal 3/2 binary64)) (pow.f64 x #s(literal 5/2 binary64))) (pow.f64 x #s(literal 4 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))) x)","(/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) x) (*.f64 (*.f64 x x) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x))))","(/.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (*.f64 (*.f64 x x) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))) (*.f64 (neg.f64 x) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal -1/2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -5/2 binary64)) (pow.f64 x #s(literal -3/2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -5/2 binary64)) (pow.f64 x #s(literal -3/2 binary64))) #s(literal -1 binary64))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -5/2 binary64)) (pow.f64 x #s(literal -3/2 binary64))) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 x (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -5/2 binary64)) (pow.f64 x #s(literal -3/2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (pow.f64 x #s(literal -5/2 binary64)) (pow.f64 x #s(literal -3/2 binary64))) #s(literal -1 binary64)))","(neg.f64 (/.f64 (neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))) (*.f64 x x)))","(neg.f64 (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (*.f64 (neg.f64 x) x)))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -2 binary64)) (neg.f64 (pow.f64 x #s(literal -3/2 binary64))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 x #s(literal -3/2 binary64)) (neg.f64 (pow.f64 x #s(literal -3/2 binary64))))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -5/2 binary64)) (neg.f64 (pow.f64 x #s(literal -3/2 binary64))))","(-.f64 (pow.f64 x #s(literal -5/2 binary64)) (pow.f64 x #s(literal -3/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal -5/2 binary64)) (pow.f64 x #s(literal -3/2 binary64))) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (pow.f64 x #s(literal -5/2 binary64)) (neg.f64 (pow.f64 x #s(literal -3/2 binary64))))","(*.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) x) (pow.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x)) (-.f64 (pow.f64 x #s(literal -1 binary64)) x)) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) x))) (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x))) (*.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x)) x)) (*.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x)) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (*.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (sqrt.f64 (neg.f64 x)) (neg.f64 (sqrt.f64 x)))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (sqrt.f64 (neg.f64 x)) (sqrt.f64 x))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 x #s(literal -1/2 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (neg.f64 x)) (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 (-.f64 #s(literal -1 binary64) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 (-.f64 #s(literal -1 binary64) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (neg.f64 (sqrt.f64 x)))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (sqrt.f64 x))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 (-.f64 #s(literal -1 binary64) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x)))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) x)) (neg.f64 (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) x)) (neg.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 x (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))","(/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) x) (-.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 x))))","(/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) x) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x)))","(/.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (+.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 x (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 x))))))","(/.f64 (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x)) (-.f64 (pow.f64 x #s(literal -1 binary64)) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64))))))","(/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x)) (-.f64 (pow.f64 x #s(literal -1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))))","(fma.f64 (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (neg.f64 (sqrt.f64 x)))","(fma.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 x #s(literal -1/4 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal -1 binary64) x)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (neg.f64 (sqrt.f64 x)))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 x) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 x)))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64) (neg.f64 (sqrt.f64 x)))","(fma.f64 (sqrt.f64 x) #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 x)))","(-.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 0 binary64)) (sqrt.f64 x))","(-.f64 (/.f64 (pow.f64 x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x))) (/.f64 x (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x))))","(-.f64 (/.f64 (pow.f64 x #s(literal -3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64))) (/.f64 (pow.f64 x #s(literal 3/2 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64))))","(-.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x))","(+.f64 (neg.f64 (sqrt.f64 x)) (pow.f64 x #s(literal -1/2 binary64)))","(+.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 x)))","(*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(pow.f64 (/.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 x x (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 x (-.f64 #s(literal 1 binary64) x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)))) (neg.f64 (neg.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 (+.f64 x #s(literal 1 binary64)) x)) (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 x x))) (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (+.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))) (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 x))) (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) x) x)) (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 x #s(literal -1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (-.f64 x #s(literal 1 binary64))) (neg.f64 x))) (*.f64 (neg.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64)) (*.f64 (neg.f64 (-.f64 x #s(literal 1 binary64))) x)) (*.f64 (neg.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64))) (*.f64 (neg.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (neg.f64 x))) (*.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) x)) (*.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 x #s(literal -1 binary64))) (*.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 x))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) x)) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x (neg.f64 x))) (neg.f64 x))) (*.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x (neg.f64 x))) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x (neg.f64 x))) x)) (*.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x (neg.f64 x))) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x (neg.f64 x))) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x (neg.f64 x))) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (neg.f64 x))) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) x)) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal -1 binary64) (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (neg.f64 x))) (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) x)) (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal -1 binary64) (*.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 x))) (*.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) x)) (*.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (-.f64 x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x))) (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x))) (neg.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 x x) (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (-.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x)))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (+.f64 (+.f64 x #s(literal 1 binary64)) x))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 x x) (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x)))))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 x))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 x))","(fma.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 x))","(fma.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (neg.f64 x))","(fma.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 x))","(fma.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 x)) (-.f64 #s(literal 1 binary64) x))","(fma.f64 #s(literal -1 binary64) x (+.f64 x #s(literal 1 binary64)))","(fma.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 x))","(fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64) (neg.f64 x))","(fma.f64 (sqrt.f64 x) (pow.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x)) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 (sqrt.f64 x) (pow.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x)) #s(literal 1 binary64)) (neg.f64 x))","(fma.f64 (sqrt.f64 x) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 (sqrt.f64 x) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x)) (neg.f64 x))","(fma.f64 (sqrt.f64 x) (sqrt.f64 x) (-.f64 #s(literal 1 binary64) x))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x x) (-.f64 #s(literal 1 binary64) x))","(fma.f64 x #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x))","(fma.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)) (neg.f64 x))","(fma.f64 #s(literal 1 binary64) x (-.f64 #s(literal 1 binary64) x))","(-.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 (+.f64 x #s(literal 1 binary64)) x)) (/.f64 (*.f64 x x) (+.f64 (+.f64 x #s(literal 1 binary64)) x)))","(-.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(-.f64 (+.f64 x #s(literal 1 binary64)) x)","(+.f64 (-.f64 #s(literal 1 binary64) x) x)","(+.f64 (neg.f64 x) (+.f64 x #s(literal 1 binary64)))","(+.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(+.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))","(+.f64 x (-.f64 #s(literal 1 binary64) x))","(+.f64 #s(literal 1 binary64) (-.f64 x x))","(+.f64 #s(literal 1 binary64) (+.f64 x (neg.f64 x)))","(*.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) #s(literal -1/4 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)) (pow.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) x) #s(literal 1/2 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x #s(literal -1/2 binary64)) (fma.f64 #s(literal 4 binary64) (*.f64 x x) #s(literal -1/4 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) x) #s(literal 1/2 binary64)))) (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 4 binary64) (*.f64 x x)))) (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) #s(literal -1/4 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 2 binary64) x #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) x) #s(literal 1/2 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 4 binary64) (*.f64 x x)) (fma.f64 #s(literal 2 binary64) x #s(literal -1/2 binary64))) (*.f64 (fma.f64 #s(literal 2 binary64) x #s(literal -1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 #s(literal 2 binary64) x #s(literal -1/2 binary64)) (fma.f64 #s(literal 2 binary64) x #s(literal -1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 #s(literal 4 binary64) (*.f64 x x))) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) #s(literal -1/4 binary64))) (neg.f64 (fma.f64 #s(literal 2 binary64) x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))) (neg.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 #s(literal 4 binary64) (*.f64 x x)) (*.f64 (*.f64 #s(literal 2 binary64) x) #s(literal 1/2 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))) (neg.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) x) #s(literal 1/2 binary64))))))","(/.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) #s(literal -1/4 binary64)) (fma.f64 #s(literal 2 binary64) x #s(literal -1/2 binary64)))","(/.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)) (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 #s(literal 4 binary64) (*.f64 x x)) (*.f64 (*.f64 #s(literal 2 binary64) x) #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) x) #s(literal 1/2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x #s(literal -1/2 binary64)) (fma.f64 #s(literal 4 binary64) (*.f64 x x) #s(literal -1/4 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) x) #s(literal 1/2 binary64)))) (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 2 binary64) x #s(literal -1/2 binary64)) (fma.f64 #s(literal 4 binary64) (*.f64 x x) #s(literal -1/4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) x) #s(literal 1/2 binary64)))) (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))))","(fma.f64 (*.f64 (*.f64 #s(literal 2 binary64) x) x) (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64))","(fma.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x) #s(literal 1/2 binary64))","(fma.f64 #s(literal 2 binary64) x #s(literal 1/2 binary64))","(fma.f64 (*.f64 x x) (/.f64 #s(literal 2 binary64) x) #s(literal 1/2 binary64))","(fma.f64 x #s(literal 2 binary64) #s(literal 1/2 binary64))","(-.f64 (/.f64 (*.f64 #s(literal 4 binary64) (*.f64 x x)) (fma.f64 #s(literal 2 binary64) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 2 binary64) x #s(literal -1/2 binary64))))","(+.f64 (*.f64 #s(literal 2 binary64) x) #s(literal 1/2 binary64))","(+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) x))","(*.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (+.f64 x #s(literal 1 binary64)) x))","(*.f64 #s(literal -1 binary64) (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))","(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(pow.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)))) (neg.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (+.f64 (+.f64 x #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (+.f64 (+.f64 x #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 (+.f64 x #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)))) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x))) (+.f64 (+.f64 x #s(literal 1 binary64)) x))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (+.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x))) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (+.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) #s(literal -1 binary64)) (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (+.f64 (+.f64 x #s(literal 1 binary64)) x))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)))))","(/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x))))","(fma.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) x (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 #s(literal 1 binary64) x)))","(fma.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(fma.f64 x (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(+.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(+.f64 (*.f64 x (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 x)))","(+.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) x) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 #s(literal 1 binary64) x)))","(*.f64 #s(literal -1 binary64) (fma.f64 #s(literal 2 binary64) x #s(literal 1/2 binary64)))","(*.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 1/2 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (fma.f64 #s(literal 4 binary64) (*.f64 x x) #s(literal -1/4 binary64)))) (neg.f64 (fma.f64 #s(literal 2 binary64) x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) x) #s(literal 1/2 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (fma.f64 #s(literal 2 binary64) x #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (fma.f64 #s(literal 2 binary64) x #s(literal 1/2 binary64)))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64))) (neg.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal -2 binary64) x) #s(literal -1/2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) #s(literal -1/4 binary64)))) (neg.f64 (fma.f64 #s(literal 2 binary64) x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) x) #s(literal 1/2 binary64))))))","(/.f64 (*.f64 #s(literal -1 binary64) (fma.f64 #s(literal 4 binary64) (*.f64 x x) #s(literal -1/4 binary64))) (fma.f64 #s(literal 2 binary64) x #s(literal -1/2 binary64)))","(/.f64 (*.f64 #s(literal -1 binary64) (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) x) #s(literal 1/2 binary64)))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 #s(literal 2 binary64) x #s(literal 1/2 binary64))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 1/2 binary64)) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (fma.f64 #s(literal 2 binary64) x #s(literal 1/2 binary64))))))","(/.f64 (fma.f64 #s(literal -8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/8 binary64)) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal -2 binary64) x) #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) #s(literal -1/4 binary64))) (neg.f64 (-.f64 (*.f64 #s(literal -2 binary64) x) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) #s(literal -1/4 binary64))) (neg.f64 (neg.f64 (fma.f64 #s(literal 2 binary64) x #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) #s(literal -1/4 binary64))) (fma.f64 #s(literal 2 binary64) x #s(literal -1/2 binary64)))","(/.f64 (neg.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))) (neg.f64 (neg.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) x) #s(literal 1/2 binary64)))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))) (fma.f64 #s(literal 4 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) x) #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) #s(literal -1/4 binary64)) (-.f64 (*.f64 #s(literal -2 binary64) x) #s(literal -1/2 binary64)))","(/.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) #s(literal -1/4 binary64)) (neg.f64 (fma.f64 #s(literal 2 binary64) x #s(literal -1/2 binary64))))","(/.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64)) (neg.f64 (fma.f64 #s(literal 4 binary64) (*.f64 x x) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) x) #s(literal 1/2 binary64))))))","(neg.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 1/2 binary64)))","(fma.f64 (neg.f64 (/.f64 #s(literal 2 binary64) x)) (*.f64 x x) #s(literal -1/2 binary64))","(fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))","(fma.f64 (*.f64 (neg.f64 x) x) (/.f64 #s(literal 2 binary64) x) #s(literal -1/2 binary64))","(fma.f64 (*.f64 #s(literal 2 binary64) x) #s(literal -1 binary64) #s(literal -1/2 binary64))","(fma.f64 #s(literal -1 binary64) (*.f64 #s(literal 2 binary64) x) #s(literal -1/2 binary64))","(fma.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 (neg.f64 x) x) #s(literal -1/2 binary64))","(fma.f64 #s(literal 2 binary64) (neg.f64 x) #s(literal -1/2 binary64))","(fma.f64 (*.f64 x x) (neg.f64 (/.f64 #s(literal 2 binary64) x)) #s(literal -1/2 binary64))","(-.f64 (*.f64 #s(literal -2 binary64) x) #s(literal 1/2 binary64))","(-.f64 #s(literal 0 binary64) (fma.f64 #s(literal 2 binary64) x #s(literal 1/2 binary64)))","(-.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 2 binary64) x))","(+.f64 (*.f64 (*.f64 #s(literal 2 binary64) x) #s(literal -1 binary64)) #s(literal -1/2 binary64))","(+.f64 (*.f64 #s(literal -2 binary64) x) #s(literal -1/2 binary64))","(+.f64 #s(literal 0 binary64) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))","(+.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 #s(literal 2 binary64) x) #s(literal -1 binary64)))","(+.f64 #s(literal -1/2 binary64) (*.f64 #s(literal -2 binary64) x))","(*.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (hypot.f64 (sqrt.f64 x) x)) #s(literal 1/2 binary64)) (pow.f64 (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (hypot.f64 (sqrt.f64 x) x)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))) #s(literal -1 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (hypot.f64 (sqrt.f64 x) x)) #s(literal 1 binary64))","(*.f64 (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (sqrt.f64 x)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (pow.f64 (/.f64 #s(literal -1 binary64) (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (sqrt.f64 x))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (neg.f64 (sqrt.f64 x))))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (/.f64 (hypot.f64 (sqrt.f64 x) x) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)))))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (sqrt.f64 x)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (hypot.f64 (sqrt.f64 x) x)))","(pow.f64 (exp.f64 (log.f64 (/.f64 (hypot.f64 (sqrt.f64 x) x) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))))) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 (hypot.f64 (sqrt.f64 x) x) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))) (/.f64 (hypot.f64 (sqrt.f64 x) x) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (hypot.f64 (sqrt.f64 x) x)) #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (hypot.f64 (sqrt.f64 x) x)) #s(literal 1 binary64))","(pow.f64 (/.f64 (hypot.f64 (sqrt.f64 x) x) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))) #s(literal -1 binary64))","(/.f64 (neg.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (neg.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (neg.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (neg.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)))) (neg.f64 (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (neg.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)))) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))) (sqrt.f64 x))","(/.f64 (neg.f64 (neg.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x))))","(/.f64 (neg.f64 (neg.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))","(/.f64 (*.f64 #s(literal 1 binary64) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))) (hypot.f64 (sqrt.f64 x) x))","(/.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))) #s(literal -1 binary64)) (sqrt.f64 x))","(/.f64 (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (neg.f64 (sqrt.f64 x))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))) (neg.f64 (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (neg.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))) (*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x)))","(/.f64 (neg.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))","(/.f64 (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (sqrt.f64 x)) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (hypot.f64 (sqrt.f64 x) x))","(/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (/.f64 (sqrt.f64 x) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (hypot.f64 (sqrt.f64 x) x) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)))))","(/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (/.f64 (sqrt.f64 x) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (hypot.f64 (sqrt.f64 x) x) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (hypot.f64 (sqrt.f64 x) x) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)))))","(exp.f64 (*.f64 (log.f64 (/.f64 (hypot.f64 (sqrt.f64 x) x) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))) #s(literal -1 binary64)) (sqrt.f64 x))","(*.f64 (pow.f64 (pow.f64 (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (hypot.f64 (sqrt.f64 x) x)) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (hypot.f64 (sqrt.f64 x) x)) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))) #s(literal -1 binary64)) #s(literal -1 binary64)) (sqrt.f64 x))","(*.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)))) (neg.f64 (sqrt.f64 x)))","(*.f64 (pow.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))) (sqrt.f64 x))","(*.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (sqrt.f64 x))))","(*.f64 (/.f64 (sqrt.f64 x) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (/.f64 #s(literal -1 binary64) (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (sqrt.f64 x))))","(*.f64 (/.f64 (hypot.f64 (sqrt.f64 x) x) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) (/.f64 (hypot.f64 (sqrt.f64 x) x) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)))) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 (/.f64 (sqrt.f64 x) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))) #s(literal 1 binary64)))","(*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 (sqrt.f64 x) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))))","(*.f64 (sqrt.f64 x) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))))","(*.f64 #s(literal 1 binary64) (/.f64 (hypot.f64 (sqrt.f64 x) x) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))))","(pow.f64 (/.f64 (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (hypot.f64 (sqrt.f64 x) x)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (hypot.f64 (sqrt.f64 x) x)) #s(literal -1 binary64))","(pow.f64 (/.f64 (hypot.f64 (sqrt.f64 x) x) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))) #s(literal 1 binary64))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)))) (neg.f64 (pow.f64 x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (hypot.f64 (sqrt.f64 x) x)) (neg.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))))","(/.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 (*.f64 #s(literal 1 binary64) (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (neg.f64 (sqrt.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (sqrt.f64 x)))","(/.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))) (pow.f64 x #s(literal -1/2 binary64)))","(/.f64 (neg.f64 (/.f64 (hypot.f64 (sqrt.f64 x) x) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 #s(literal 1 binary64) (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (neg.f64 (sqrt.f64 x)))))","(/.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (neg.f64 (sqrt.f64 x))))","(/.f64 (hypot.f64 (sqrt.f64 x) x) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)))","(/.f64 (/.f64 (hypot.f64 (sqrt.f64 x) x) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (hypot.f64 (sqrt.f64 x) x)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (sqrt.f64 x)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (hypot.f64 (sqrt.f64 x) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (hypot.f64 (sqrt.f64 x) x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (hypot.f64 (sqrt.f64 x) x)))","(neg.f64 (neg.f64 (/.f64 (hypot.f64 (sqrt.f64 x) x) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)))))","(exp.f64 (neg.f64 (*.f64 (log.f64 (/.f64 (hypot.f64 (sqrt.f64 x) x) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)))) #s(literal -1 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 (hypot.f64 (sqrt.f64 x) x) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (hypot.f64 (sqrt.f64 x) x))) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x))))","(*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)))","(*.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(pow.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64))","(pow.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))","(pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/2 binary64))","(/.f64 (neg.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (sqrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (sqrt.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (sqrt.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (neg.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64))","(/.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x (neg.f64 x)))))","(/.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(fabs.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(exp.f64 (*.f64 (log1p.f64 x) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (sqrt.f64 x) (pow.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x)) #s(literal 1 binary64)))","(*.f64 (sqrt.f64 x) (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x)))","(*.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(pow.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal 2 binary64))","(pow.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))","(pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 (neg.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (neg.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (sqrt.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 2 binary64))) (sqrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (sqrt.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64))) (sqrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x (neg.f64 x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (fma.f64 x x (neg.f64 x))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(fma.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))","(fma.f64 (sqrt.f64 x) (sqrt.f64 x) #s(literal 1 binary64))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 x x) #s(literal 1 binary64))","(fma.f64 x #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) x #s(literal 1 binary64))","(sqrt.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fabs.f64 (+.f64 x #s(literal 1 binary64)))","(hypot.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (hypot.f64 (sqrt.f64 x) x))","(hypot.f64 (hypot.f64 (sqrt.f64 x) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(hypot.f64 (hypot.f64 (sqrt.f64 x) x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(hypot.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (hypot.f64 (sqrt.f64 x) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (*.f64 (log1p.f64 x) #s(literal 1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log1p.f64 x) #s(literal 1 binary64)))","(exp.f64 (log1p.f64 x))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) x)","(*.f64 (-.f64 x (+.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) (pow.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 x (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 x (+.f64 x #s(literal 1 binary64))))) (neg.f64 (neg.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))))","(/.f64 (-.f64 (*.f64 x (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64)))) (*.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))))","(/.f64 (neg.f64 (-.f64 x (+.f64 x #s(literal 1 binary64)))) (neg.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))) (neg.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 x (hypot.f64 (sqrt.f64 x) x)))))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))) (neg.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (-.f64 x (+.f64 x #s(literal 1 binary64))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) (+.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 x (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))) (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 x (+.f64 x #s(literal 1 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64))))))","(/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (-.f64 x (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) (hypot.f64 (sqrt.f64 x) x)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3/2 binary64)))))","(fma.f64 (sqrt.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x))) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1/4 binary64)) (sqrt.f64 x))","(fma.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 (+.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x))","(fma.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 1/4 binary64)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64) (sqrt.f64 x))","(fma.f64 (sqrt.f64 x) #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(fma.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(fma.f64 #s(literal 1 binary64) (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(-.f64 (/.f64 x (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(*.f64 (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 x #s(literal -1/4 binary64)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal -1 binary64) x)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1/2 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(pow.f64 (pow.f64 x #s(literal -1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64))","(pow.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/4 binary64))","(pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64))","(pow.f64 (sqrt.f64 x) #s(literal -1 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64))","(pow.f64 x #s(literal -1/2 binary64))","(/.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (neg.f64 (sqrt.f64 (neg.f64 x))))","(/.f64 (sqrt.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1/2 binary64)))) (sqrt.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (sqrt.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64))) (sqrt.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (sqrt.f64 (sqrt.f64 x)))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x)))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (neg.f64 x)))","(/.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)))","(/.f64 (sqrt.f64 x) x)","(/.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 (neg.f64 x))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","(neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(sqrt.f64 (/.f64 x (*.f64 x x)))","(sqrt.f64 (pow.f64 x #s(literal -1 binary64)))","(fabs.f64 (pow.f64 x #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 #s(literal -1/2 binary64) (log.f64 x)))","(*.f64 #s(literal -1 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(pow.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(neg.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))) (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x))) #s(literal -1 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))) (-.f64 (+.f64 x #s(literal 1 binary64)) x))","(*.f64 (pow.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))) #s(literal -1 binary64)) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(*.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (pow.f64 (neg.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (pow.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))) #s(literal -1 binary64))))","(*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))))","(pow.f64 (/.f64 (/.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))) #s(literal -1 binary64)))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))))) (neg.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))))) (neg.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64))) (neg.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))))) (neg.f64 (neg.f64 (neg.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (*.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64))) (neg.f64 (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))))))","(/.f64 (*.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (pow.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))) #s(literal -1 binary64))) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))))) (+.f64 (+.f64 x #s(literal 1 binary64)) x))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))))) (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))))","(/.f64 (*.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(literal 1 binary64)) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x))) (neg.f64 (*.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))) (neg.f64 (neg.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))))))","(/.f64 (*.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64)) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (+.f64 x #s(literal 1 binary64)) x) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (fma.f64 x (+.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (*.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) (neg.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))))","(/.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))))","(neg.f64 (/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64)))))","(neg.f64 (/.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (neg.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))))))","(exp.f64 (*.f64 (log.f64 (/.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (neg.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (pow.f64 (pow.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (*.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (neg.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 (pow.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (sqrt.f64 x)))","(pow.f64 (/.f64 (/.f64 (sqrt.f64 x) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (sqrt.f64 x) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))) #s(literal -1 binary64))","(pow.f64 (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (sqrt.f64 x)) #s(literal 1 binary64))","(/.f64 (neg.f64 (/.f64 (neg.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (*.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) #s(literal -1 binary64))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 (*.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))))) (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 x)))))","(/.f64 (/.f64 (neg.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))) #s(literal -1 binary64)) (sqrt.f64 x))","(/.f64 (*.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) #s(literal 1 binary64)) (sqrt.f64 x))","(/.f64 (neg.f64 (neg.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)))) (neg.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))) (neg.f64 (sqrt.f64 x)))","(/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (sqrt.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (sqrt.f64 x) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (sqrt.f64 x) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (sqrt.f64 x) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (sqrt.f64 x) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 x) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))))","(neg.f64 (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (neg.f64 (sqrt.f64 x))))","(exp.f64 (*.f64 (log.f64 (/.f64 (sqrt.f64 x) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/4 binary64) x))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x)))) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (/.f64 #s(literal -1 binary64) x))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))","(*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))","(pow.f64 (/.f64 (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/4 binary64) x)) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/4 binary64) x)) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/4 binary64) x)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) x)))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x)))) (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x)))) x)))","(/.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/4 binary64) x)) (pow.f64 x #s(literal -1 binary64))) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))","(/.f64 (*.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (pow.f64 x #s(literal -1 binary64))) (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x)))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) #s(literal 1 binary64)) x)","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/4 binary64) x))) (neg.f64 (*.f64 x (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (*.f64 x (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x)))))))","(/.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/4 binary64) x)) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) (neg.f64 x)))","(/.f64 (*.f64 (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/4 binary64) x)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x))) x))","(/.f64 (*.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x)))) (neg.f64 x)))","(/.f64 (*.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x)))) x))","(/.f64 (-.f64 (*.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64))) (*.f64 #s(literal 1/4 binary64) x)) (*.f64 x (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 x)))))","(/.f64 (fma.f64 #s(literal -1/512 binary64) (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 1/8 binary64))) (*.f64 x (fma.f64 #s(literal 1/64 binary64) (pow.f64 x #s(literal -1 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) x) (*.f64 (*.f64 (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)) #s(literal 1/2 binary64)) (sqrt.f64 x))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) (neg.f64 x))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x)))) x))","(neg.f64 (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (neg.f64 x)))","(exp.f64 (*.f64 (log.f64 (/.f64 x (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))))) #s(literal -1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":300.016845703125,"type":"rewrite"},{"compiler":[[50036,5023]],"memory":[[9462160,125241616]],"time":217.882080078125,"type":"eval"},{"alts":[["(/.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","fresh",40.35920620685138,"binary64"],["(/.f64 (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","fresh",0.5162745123643053,"binary64"],["(/.f64 (-.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64)))","next",41.60961753637098,"binary64"],["(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (*.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","fresh",40.556066420468795,"binary64"],["(/.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))","fresh",41.59960488338494,"binary64"],["(/.f64 (neg.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))","fresh",0.5352121747307671,"binary64"],["(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","next",0.3952199522072183,"binary64"],["(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","fresh",0.48673009905357767,"binary64"],["(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(approx (+ (* (/ 1 x) (+ (/ 3/8 x) -1/2)) 1) (/.f64 (/.f64 (fma.f64 (-.f64 x #s(literal 1/2 binary64)) x #s(literal 3/8 binary64)) x) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","fresh",30.849474162873467,"binary64"],["(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","next",0.9493193495157831,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)) (*.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 x))))))","fresh",1.1513834393021207,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (-.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64))))","fresh",41.59339137092963,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt x)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/16 binary64) (*.f64 x x)) #s(literal 1/2 binary64)) (/.f64 #s(literal 1/8 binary64) x)) x))))","fresh",0.831684352608334,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt x)) (/.f64 #s(literal 1/2 binary64) x))))","fresh",1.3634950152255245,"binary64"],["(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))) (sqrt.f64 x)))","fresh",0.87653584768909,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","done",41.62696195065793,"binary64"],["(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 x))))","next",40.35529995685138,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal -1/2 binary64)) x) x))","fresh",1.0131720090172363,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) x)) x))","fresh",1.0037382175347405,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal -1/2 binary64)) (*.f64 x x)))","fresh",12.128712791431951,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) x) (-.f64 (pow.f64 x #s(literal -1 binary64)) x)) (*.f64 x (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)))))","fresh",1.4224344218632152,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (sqrt.f64 x) x))","next",60.41744178309373,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 x)))","done",60.41744178309373,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","done",11.16868038358054,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -1/2 binary64))))","fresh",11.154788616873093,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (sqrt (/ 1 x)) (sqrt x)) (neg.f64 (sqrt.f64 x))) (*.f64 x x))))","fresh",12.140709676597666,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(literal -1/2 binary64) #s(approx (/ (- (sqrt (/ 1 x)) (sqrt x)) (* x x)) (/.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x))))","fresh",0.9008482297119104,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 x (*.f64 x x))))","fresh",41.950404582803976,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","done",60.41744178309373,"binary64"]],"compiler":[[23,12],[26,18],[20,9],[29,20],[17,10],[28,20],[33,23],[29,20],[46,30],[25,17],[35,23],[15,9],[31,22],[21,15],[28,19],[11,8],[24,13],[24,17],[24,17],[24,17],[30,21],[16,11],[16,12],[25,18],[24,18],[29,19],[39,26],[18,12],[16,12],[23,12],[26,18],[20,9],[29,20],[17,10],[28,20],[33,23],[29,20],[46,30],[25,17],[35,23],[15,9],[31,22],[21,15],[28,19],[24,13],[24,17],[24,17],[24,17],[30,21],[16,11],[24,18],[29,19],[39,26],[18,12]],"count":[[1355,29]],"kept":[{"done":[3,3],"fresh":[20,11],"new":[1327,14],"picked":[5,1]}],"memory":[[5170336,63298128]],"min-error":[[0.0,"binary64"]],"time":39.991943359375,"type":"prune"},{"egraph":[[0,8050,292,0.050854154],[5,7197,298,0.015835562],[4,3176,298,0.029273426],[3,783,298,0.011315367],[2,238,308,0.002614596],[1,116,342,0.00102821],[0,71,342,0.000582374],[0,45,346,0.000421836]],"inputs":[["(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","#s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x)","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))","#s(literal 1 binary64)","(/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)","(-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x))","#s(literal 1/2 binary64)","(/.f64 #s(literal 3/8 binary64) x)","#s(literal 3/8 binary64)","x","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(sqrt.f64 x)","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (sqrt.f64 x) x))","(/.f64 (sqrt.f64 x) x)","(sqrt.f64 x)","x","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","#s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(sqrt.f64 x)","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64)))","(-.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(*.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x))","(/.f64 (+.f64 x #s(literal 1 binary64)) x)","(+.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 x))))","(/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","#s(literal -1 binary64)","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(sqrt.f64 x)","(/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 x)))","(-.f64 (+.f64 x #s(literal 1 binary64)) x)","(neg.f64 (sqrt.f64 x))"]],"locations":[["(/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 x)))","cost-diff",1],["(/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","cost-diff",2],["(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 x))))","cost-diff",2],["(-.f64 (+.f64 x #s(literal 1 binary64)) x)","cost-diff",4],["(sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x))","cost-diff",0],["(*.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","cost-diff",0],["(/.f64 (-.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64)))","cost-diff",0],["(-.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","cost-diff",3],["(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","cost-diff",0],["(/.f64 #s(literal 1 binary64) x)","cost-diff",0],["#s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(literal 1 binary64) x))","cost-diff",0],["(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","cost-diff",0],["(sqrt.f64 x)","cost-diff",0],["(/.f64 (sqrt.f64 x) x)","cost-diff",0],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (sqrt.f64 x) x))","cost-diff",0],["(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))","cost-diff",0],["(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x)","cost-diff",0],["#s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x))","cost-diff",0],["(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","cost-diff",0]],"memory":[[3387728,25663552]],"method":["egg-herbie"],"outputs":[["(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x)) (+.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x)))","#s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x)","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))","#s(literal 1 binary64)","(/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)","(-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x))","#s(literal 1/2 binary64)","(/.f64 #s(literal 3/8 binary64) x)","#s(literal 3/8 binary64)","x","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(+.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x))","(sqrt.f64 x)","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(sqrt.f64 (-.f64 x #s(literal -1 binary64)))","(+.f64 x #s(literal 1 binary64))","(-.f64 x #s(literal -1 binary64))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (sqrt.f64 x) x))","(/.f64 (sqrt.f64 x) x)","(sqrt.f64 x)","x","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x)))","#s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(+.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x))","(sqrt.f64 x)","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(sqrt.f64 (-.f64 x #s(literal -1 binary64)))","(+.f64 x #s(literal 1 binary64))","(-.f64 x #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64)))","(*.f64 (+.f64 #s(literal -1 binary64) (sqrt.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) x))) (/.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (-.f64 x #s(literal -1 binary64))))","(-.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(*.f64 (+.f64 #s(literal -1 binary64) (sqrt.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) x))) (sqrt.f64 (-.f64 x #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(*.f64 (sqrt.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) x)) (sqrt.f64 (-.f64 x #s(literal -1 binary64))))","(sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x))","(sqrt.f64 (/.f64 (-.f64 x #s(literal -1 binary64)) x))","(/.f64 (+.f64 x #s(literal 1 binary64)) x)","(/.f64 (-.f64 x #s(literal -1 binary64)) x)","(+.f64 x #s(literal 1 binary64))","(-.f64 x #s(literal -1 binary64))","x","#s(literal 1 binary64)","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(sqrt.f64 (-.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 x))))","(/.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (fma.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x) (-.f64 x #s(literal -1 binary64))))","(/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 #s(literal -1 binary64) (fma.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x) (-.f64 x #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (sqrt.f64 (-.f64 x #s(literal -1 binary64))))","#s(literal -1 binary64)","(sqrt.f64 (+.f64 x #s(literal 1 binary64)))","(sqrt.f64 (-.f64 x #s(literal -1 binary64)))","(+.f64 x #s(literal 1 binary64))","(-.f64 x #s(literal -1 binary64))","x","#s(literal 1 binary64)","(+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))","(+.f64 (sqrt.f64 (-.f64 x #s(literal -1 binary64))) (sqrt.f64 x))","(sqrt.f64 x)","(/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 x)))","(/.f64 #s(literal -1 binary64) (sqrt.f64 x))","(-.f64 (+.f64 x #s(literal 1 binary64)) x)","#s(literal 1 binary64)","(neg.f64 (sqrt.f64 x))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":182.196044921875,"type":"simplify"},{"compiler":[[311,39]],"locations":[["(/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 x)))","accuracy",0.2890625],["(/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","accuracy",0.296875],["(/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","accuracy",0.3203125],["(-.f64 (+.f64 x #s(literal 1 binary64)) x)","accuracy",59.57677049108313],["(sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x))","accuracy",0.00390625],["(*.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","accuracy",0.015625],["(/.f64 (-.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64)))","accuracy",0.1953125],["(-.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","accuracy",60.425324946514756],["(sqrt.f64 x)","accuracy",0.0],["(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","accuracy",0.0078125],["(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","accuracy",0.2265625],["#s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(literal 1 binary64) x))","accuracy",0.7318963624940208],["(sqrt.f64 x)","accuracy",0.0],["(/.f64 (sqrt.f64 x) x)","accuracy",0.25],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (sqrt.f64 x) x))","accuracy",60.41744178309373],["(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","accuracy",0.0078125],["(/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)","accuracy",0.01171875],["#s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x))","accuracy",0.15704480237126073],["(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","accuracy",0.2265625]],"memory":[[-21646336,63679920]],"mixsample":[[0.674072265625,"ival-add",1200],[31.633544921875,"ival-div",0],[41.7626953125,"adjust",800],[3.45703125,"ival-div",400],[2.507080078125,"ival-sqrt",800],[0.350830078125,"ival-div",1600],[0.1064453125,"ival-assert",0],[9.679931640625,"ival-sub",0],[0.00390625,"ival-sub",400],[5.467041015625,"ival-sqrt",0],[2.15771484375,"adjust",2000],[27.37890625,"ival-pow",0],[8.940673828125,"ival-add",0],[1.140380859375,"ival-mult",800],[0.419189453125,"ival-sqrt",1600],[0.01806640625,"ival-add",1600],[0.450439453125,"ival-mult",400],[9.840087890625,"ival-mult",0],[1.031982421875,"ival-div",800],[0.10009765625,"ival-add",400],[0.240966796875,"ival-true",0],[0.771484375,"ival-add",800],[0.6298828125,"exact",0],[7.333740234375,"ival-sqrt",400],[2.4990234375,"ival-neg",0]],"outcomes":[[166.723388671875,1,"valid",220],[32.379638671875,2,"valid",32],[1.130859375,0,"valid",4]],"time":241.305908203125,"type":"localize"},{"count":[[21,121]],"inputs":[["(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","#s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x)","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (sqrt.f64 x) x))","(/.f64 (sqrt.f64 x) x)","(sqrt.f64 x)","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","#s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(-.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64)))","(*.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x))","(-.f64 (+.f64 x #s(literal 1 binary64)) x)","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 x))))","(/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 x)))","(/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)","(/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))"]],"memory":[[-1143856,6545184]],"outputs":[["(* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))","(/ (+ (* -1/2 (* (sqrt (pow x 3)) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/ (+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3))))))))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/ (+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))) (+ (* x (+ (* -1 (* (sqrt x) (+ (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 2))) (+ (* 1/2 (/ (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))) (+ 1 (sqrt x)))) (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 3))))))) (+ (* 1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* 1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x)))))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))))))))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(sqrt (/ 1 x))","(/ (+ (sqrt x) (* -1/2 (sqrt (pow x 3)))) x)","(/ (+ (sqrt x) (* (pow x 2) (+ (* -1/2 (sqrt (/ 1 x))) (* 1/2 (sqrt x))))) x)","(/ (+ (sqrt x) (* (pow x 2) (+ (* -1/2 (sqrt (/ 1 x))) (* x (+ (* -1/2 (* (sqrt x) (+ 1 (* 1/4 (/ 1 x))))) (* 1/2 (sqrt (/ 1 x)))))))) x)","(/ 3/8 (pow x 3))","(/ (+ 3/8 (* -1/2 x)) (pow x 3))","(/ (+ 3/8 (* x (- x 1/2))) (pow x 3))","(/ 3/8 (pow x 2))","(/ (+ 3/8 (* -1/2 x)) (pow x 2))","(/ (+ 3/8 (* x (- x 1/2))) (pow x 2))","(/ (+ (sqrt x) (* -1 x)) x)","(/ (+ (sqrt x) (* x (- (* 1/2 x) 1))) x)","(/ (+ (sqrt x) (* x (- (* x (+ 1/2 (* -3/8 x))) 1))) x)","(sqrt x)","(/ 1 x)","(+ 1 (sqrt x))","(+ 1 (+ (sqrt x) (* 1/2 x)))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* -1/8 x)))))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))))","(/ (+ (sqrt x) (* x (- (sqrt x) 1))) x)","(/ (+ (sqrt x) (* x (- (+ (sqrt x) (* -1/2 x)) 1))) x)","(/ (+ (sqrt x) (* x (- (+ (sqrt x) (* x (- (* 1/8 x) 1/2))) 1))) x)","(/ (+ (sqrt x) (sqrt (pow x 3))) x)","(/ (+ (sqrt x) (* 1/2 (sqrt (pow x 3)))) x)","(/ (+ (sqrt x) (* (pow x 2) (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (/ 1 x)))))) x)","(/ (+ (sqrt x) (* (pow x 2) (+ (* 1/2 (sqrt (/ 1 x))) (* (pow x 2) (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/16 (sqrt (/ 1 x)))))))) x)","1","(/ -1 (+ 1 (sqrt x)))","(- (* x (+ (* 1/2 (/ 1 (+ 1 (sqrt x)))) (* 1/2 (/ 1 (pow (+ 1 (sqrt x)) 2))))) (/ 1 (+ 1 (sqrt x))))","(- (* x (+ (* -1 (* x (+ (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 2))) (+ (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3))) (+ (* 3/8 (/ 1 (+ 1 (sqrt x)))) (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2)))))))) (+ (* 1/2 (/ 1 (+ 1 (sqrt x)))) (* 1/2 (/ 1 (pow (+ 1 (sqrt x)) 2)))))) (/ 1 (+ 1 (sqrt x))))","(- (* x (+ (* 1/2 (/ 1 (+ 1 (sqrt x)))) (+ (* 1/2 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* x (+ (* -1 (* x (- (+ (* -1 (+ (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 3))) (+ (* 1/2 (/ (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))) (+ 1 (sqrt x)))) (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 2)))))) (* -1/2 (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))))) (+ (* 3/16 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 5/16 (/ 1 (+ 1 (sqrt x)))))))) (* -1 (+ (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 2))) (+ (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3))) (+ (* 3/8 (/ 1 (+ 1 (sqrt x)))) (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2)))))))))))) (/ 1 (+ 1 (sqrt x))))","(* -1 (sqrt (/ 1 x)))","(/ -3/8 (pow x 2))","(/ (- (* 1/2 x) 3/8) (pow x 2))","-1","(- (* 1/2 x) 1)","(- (* x (+ 1/2 (* -3/8 x))) 1)","(- (* x (+ 1/2 (* x (- (* 5/16 x) 3/8)))) 1)","(* 1/2 (sqrt (/ 1 (pow x 3))))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 3/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) (pow x 2))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (+ (* -5/32 (sqrt (/ 1 (pow x 5)))) (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (+ (* 3/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))))) (pow x 2))","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 3/8 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 3/8 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 5/16 (/ 1 (pow x 3))))) x)","(- 1 (* 1/2 (/ 1 x)))","(- (+ 1 (/ 3/8 (pow x 2))) (* 1/2 (/ 1 x)))","(/ (- (* -1/2 (sqrt (/ 1 x))) (* -1/2 (sqrt x))) (pow x 2))","(/ (- (* 1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (/ 1 x))))) (pow x 2))","(/ (- (* -1/2 (* (sqrt (/ 1 (pow x 5))) (+ 1 (* 1/2 x)))) (+ (* -1/2 (sqrt x)) (+ (* -1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 x)))))) (pow x 2))","(* 2 (sqrt x))","(* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x))))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))))","(+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 x))))","(- (+ (sqrt (/ 1 x)) (* 1/8 (sqrt (/ 1 (pow x 3))))) (* 1/2 (sqrt (/ 1 x))))","(- (+ (sqrt (/ 1 x)) (* -1/16 (sqrt (/ 1 (pow x 5))))) (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))))","(sqrt (/ 1 (pow x 3)))","(/ (- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 x)))) (sqrt (/ 1 (pow x 3)))) x)","(/ (- (+ (sqrt (/ 1 x)) (+ (sqrt (/ 1 (pow x 5))) (* -1/2 (sqrt (/ 1 x))))) (+ (sqrt (/ 1 (pow x 3))) (* -1/2 (sqrt (/ 1 (pow x 3)))))) x)","(/ (- (+ (sqrt (/ 1 x)) (+ (sqrt (/ 1 (pow x 5))) (+ (* -1/2 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 1/8 (sqrt (/ 1 (pow x 3)))))))) (+ (sqrt (/ 1 (pow x 3))) (+ (sqrt (/ 1 (pow x 7))) (* -1/2 (sqrt (/ 1 (pow x 3))))))) x)","(* x (+ (sqrt (/ 1 x)) (sqrt (/ 1 (pow x 3)))))","(+ 1 (* 1/2 (/ 1 x)))","(- (+ 1 (* 1/2 (/ 1 x))) (/ 1/8 (pow x 2)))","(- (+ 1 (+ (* 1/2 (/ 1 x)) (* 1/16 (/ 1 (pow x 3))))) (/ 1/8 (pow x 2)))","(/ -1/2 x)","(/ (- (* 3/8 (/ 1 x)) 1/2) x)","(/ (- (/ 3/8 x) (+ 1/2 (* 1/4 (/ 1 (pow x 2))))) x)","(/ (- (+ (* -1 (/ (+ (* -1/4 (* x (+ 1 (* 1/4 x)))) (* 1/8 (pow x 2))) (pow x 4))) (/ 3/8 x)) (+ 1/2 (* 1/4 (/ 1 (pow x 2))))) x)","(/ 1/2 x)","(/ (- 1/2 (* 3/8 (/ 1 x))) x)","(+ (* -1 (sqrt (/ 1 x))) (* 1/2 (sqrt (/ 1 (pow x 3)))))","(+ (* -1 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(+ (* -1 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (* (sqrt (/ 1 (pow x 7))) (+ 1 (* 1/4 x)))))))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 3/16 (sqrt x))) x)) (* 1/4 (sqrt x))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/16 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 5/32 (sqrt x))) x)) (+ (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 3/16 (sqrt x)))) x)) (* 1/4 (sqrt x))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/ -1 x)","(* -1 (/ (- 1 (* 1/2 (/ 1 x))) x))","(* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 3/8 (/ 1 x))) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 3/8 (* 5/16 (/ 1 x))) x))) x))) x))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* 3/8 (/ 1 x)) 1/2) x)) 1) x))","(+ 1 (* -1 (/ (- 1/2 (* 3/8 (/ 1 x))) x)))","(- (sqrt (/ 1 x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 5))))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(- (+ (sqrt (/ 1 x)) (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* -1/2 (sqrt x))) (pow x 3)))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* -2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))))","(* -1 (* x (- (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* x (- (+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* x (- (+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1 (/ (+ (* 1/2 (sqrt (/ 1 x))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* x (- (+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1 (/ (+ (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (- (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(+ (* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* -1 (- (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(+ (* -1 (- (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) (* -1 (/ (+ (* -1 (/ (- (* 1/2 (sqrt x)) (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x)))","(+ (* -1 (- (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) (* -1 (/ (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (sqrt x)) (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* 1/2 (sqrt x))) (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x)))","(* (sqrt x) (pow (sqrt -1) 2))","(* -1 (* x (+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))))))","(pow (sqrt -1) 2)","(- (pow (sqrt -1) 2) (* 1/2 (/ 1 x)))","(+ (* -1 (/ (+ 1/2 (* 1/8 (/ 1 (* x (pow (sqrt -1) 2))))) x)) (pow (sqrt -1) 2))","(+ (* -1 (/ (+ 1/2 (+ (/ 1/16 (* (pow x 2) (pow (sqrt -1) 4))) (/ 1/8 (* x (pow (sqrt -1) 2))))) x)) (pow (sqrt -1) 2))","(/ (+ (* 1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2))))) x)) (* -1/4 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/2 (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* 1/16 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 4))))) x)) (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))))) x)) (* -1/4 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ 1/2 (* 3/8 (/ 1 (* x (pow (sqrt -1) 2))))) x)","(* -1 (/ (- (+ (/ -3/8 (* x (pow (sqrt -1) 2))) (/ 1/4 (* (pow x 2) (pow (sqrt -1) 2)))) 1/2) x))","(* -1 (/ (- (+ (* -1 (/ (+ (* -1/4 (/ x (pow (sqrt -1) 2))) (+ (* 1/8 (/ x (pow (sqrt -1) 4))) (* 1/4 (/ (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))) (pow (sqrt -1) 2))))) (pow x 3))) (/ -3/8 (* x (pow (sqrt -1) 2)))) 1/2) x))","(* -1 (/ (- (* 3/8 (/ 1 x)) 1/2) x))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (sqrt (/ 1 (pow x 3)))))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* 1/2 (sqrt x))) (pow x 3))) (* 1/2 (sqrt (/ 1 (pow x 3))))))"]],"series":[[7.5361328125,"((/ (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (+ (sqrt x) (sqrt (+ x 1)))) (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/ (- 1 (/ (- 1/2 (/ 3/8 x)) x)) x) (- 1 (/ (- 1/2 (/ 3/8 x)) x)) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ (sqrt x) x) (sqrt x) (/ (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (+ (sqrt x) (sqrt (+ x 1)))) (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/ 1 x) (+ (sqrt x) (sqrt (+ x 1))) (- (* (sqrt (/ (+ x 1) x)) (sqrt (+ x 1))) (sqrt (+ x 1))) (/ (- (* (sqrt (/ (+ x 1) x)) (sqrt (+ x 1))) (sqrt (+ x 1))) (+ x 1)) (* (sqrt (/ (+ x 1) x)) (sqrt (+ x 1))) (sqrt (/ (+ x 1) x)) (- (+ x 1) x) (* (/ (/ -1 (sqrt (+ x 1))) (+ (sqrt (+ x 1)) (sqrt x))) (/ (- (+ x 1) x) (neg (sqrt x)))) (/ (/ -1 (sqrt (+ x 1))) (+ (sqrt (+ x 1)) (sqrt x))) (/ (- (+ x 1) x) (neg (sqrt x))) (/ (- 1/2 (/ 3/8 x)) x) (/ -1 (sqrt (+ x 1))))","x","-inf"],[3.47607421875,"((/ (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (+ (sqrt x) (sqrt (+ x 1)))) (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/ (- 1 (/ (- 1/2 (/ 3/8 x)) x)) x) (- 1 (/ (- 1/2 (/ 3/8 x)) x)) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ (sqrt x) x) (sqrt x) (/ (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (+ (sqrt x) (sqrt (+ x 1)))) (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/ 1 x) (+ (sqrt x) (sqrt (+ x 1))) (- (* (sqrt (/ (+ x 1) x)) (sqrt (+ x 1))) (sqrt (+ x 1))) (/ (- (* (sqrt (/ (+ x 1) x)) (sqrt (+ x 1))) (sqrt (+ x 1))) (+ x 1)) (* (sqrt (/ (+ x 1) x)) (sqrt (+ x 1))) (sqrt (/ (+ x 1) x)) (- (+ x 1) x) (* (/ (/ -1 (sqrt (+ x 1))) (+ (sqrt (+ x 1)) (sqrt x))) (/ (- (+ x 1) x) (neg (sqrt x)))) (/ (/ -1 (sqrt (+ x 1))) (+ (sqrt (+ x 1)) (sqrt x))) (/ (- (+ x 1) x) (neg (sqrt x))) (/ (- 1/2 (/ 3/8 x)) x) (/ -1 (sqrt (+ x 1))))","x","inf"],[4.05810546875,"((/ (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (+ (sqrt x) (sqrt (+ x 1)))) (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/ (- 1 (/ (- 1/2 (/ 3/8 x)) x)) x) (- 1 (/ (- 1/2 (/ 3/8 x)) x)) (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/ (sqrt x) x) (sqrt x) (/ (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (+ (sqrt x) (sqrt (+ x 1)))) (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/ 1 x) (+ (sqrt x) (sqrt (+ x 1))) (- (* (sqrt (/ (+ x 1) x)) (sqrt (+ x 1))) (sqrt (+ x 1))) (/ (- (* (sqrt (/ (+ x 1) x)) (sqrt (+ x 1))) (sqrt (+ x 1))) (+ x 1)) (* (sqrt (/ (+ x 1) x)) (sqrt (+ x 1))) (sqrt (/ (+ x 1) x)) (- (+ x 1) x) (* (/ (/ -1 (sqrt (+ x 1))) (+ (sqrt (+ x 1)) (sqrt x))) (/ (- (+ x 1) x) (neg (sqrt x)))) (/ (/ -1 (sqrt (+ x 1))) (+ (sqrt (+ x 1)) (sqrt x))) (/ (- (+ x 1) x) (neg (sqrt x))) (/ (- 1/2 (/ 3/8 x)) x) (/ -1 (sqrt (+ x 1))))","x","0"]],"time":17.486083984375,"type":"series"},{"count":[[121,121]],"egraph":[[0,8264,2044,0.131587068],[2,5829,2163,0.027350867],[1,1702,2211,0.019933959],[0,560,2718,0.005691382]],"inputs":[["(* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))","(/ (+ (* -1/2 (* (sqrt (pow x 3)) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/ (+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3))))))))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/ (+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))) (+ (* x (+ (* -1 (* (sqrt x) (+ (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 2))) (+ (* 1/2 (/ (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))) (+ 1 (sqrt x)))) (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 3))))))) (+ (* 1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* 1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x)))))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))))))))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(sqrt (/ 1 x))","(/ (+ (sqrt x) (* -1/2 (sqrt (pow x 3)))) x)","(/ (+ (sqrt x) (* (pow x 2) (+ (* -1/2 (sqrt (/ 1 x))) (* 1/2 (sqrt x))))) x)","(/ (+ (sqrt x) (* (pow x 2) (+ (* -1/2 (sqrt (/ 1 x))) (* x (+ (* -1/2 (* (sqrt x) (+ 1 (* 1/4 (/ 1 x))))) (* 1/2 (sqrt (/ 1 x)))))))) x)","(/ 3/8 (pow x 3))","(/ (+ 3/8 (* -1/2 x)) (pow x 3))","(/ (+ 3/8 (* x (- x 1/2))) (pow x 3))","(/ 3/8 (pow x 2))","(/ (+ 3/8 (* -1/2 x)) (pow x 2))","(/ (+ 3/8 (* x (- x 1/2))) (pow x 2))","(/ (+ (sqrt x) (* -1 x)) x)","(/ (+ (sqrt x) (* x (- (* 1/2 x) 1))) x)","(/ (+ (sqrt x) (* x (- (* x (+ 1/2 (* -3/8 x))) 1))) x)","(sqrt x)","(/ 1 x)","(+ 1 (sqrt x))","(+ 1 (+ (sqrt x) (* 1/2 x)))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* -1/8 x)))))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))))","(/ (+ (sqrt x) (* x (- (sqrt x) 1))) x)","(/ (+ (sqrt x) (* x (- (+ (sqrt x) (* -1/2 x)) 1))) x)","(/ (+ (sqrt x) (* x (- (+ (sqrt x) (* x (- (* 1/8 x) 1/2))) 1))) x)","(/ (+ (sqrt x) (sqrt (pow x 3))) x)","(/ (+ (sqrt x) (* 1/2 (sqrt (pow x 3)))) x)","(/ (+ (sqrt x) (* (pow x 2) (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (/ 1 x)))))) x)","(/ (+ (sqrt x) (* (pow x 2) (+ (* 1/2 (sqrt (/ 1 x))) (* (pow x 2) (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/16 (sqrt (/ 1 x)))))))) x)","1","(/ -1 (+ 1 (sqrt x)))","(- (* x (+ (* 1/2 (/ 1 (+ 1 (sqrt x)))) (* 1/2 (/ 1 (pow (+ 1 (sqrt x)) 2))))) (/ 1 (+ 1 (sqrt x))))","(- (* x (+ (* -1 (* x (+ (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 2))) (+ (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3))) (+ (* 3/8 (/ 1 (+ 1 (sqrt x)))) (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2)))))))) (+ (* 1/2 (/ 1 (+ 1 (sqrt x)))) (* 1/2 (/ 1 (pow (+ 1 (sqrt x)) 2)))))) (/ 1 (+ 1 (sqrt x))))","(- (* x (+ (* 1/2 (/ 1 (+ 1 (sqrt x)))) (+ (* 1/2 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* x (+ (* -1 (* x (- (+ (* -1 (+ (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 3))) (+ (* 1/2 (/ (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))) (+ 1 (sqrt x)))) (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 2)))))) (* -1/2 (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))))) (+ (* 3/16 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 5/16 (/ 1 (+ 1 (sqrt x)))))))) (* -1 (+ (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 2))) (+ (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3))) (+ (* 3/8 (/ 1 (+ 1 (sqrt x)))) (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2)))))))))))) (/ 1 (+ 1 (sqrt x))))","(* -1 (sqrt (/ 1 x)))","(/ -3/8 (pow x 2))","(/ (- (* 1/2 x) 3/8) (pow x 2))","-1","(- (* 1/2 x) 1)","(- (* x (+ 1/2 (* -3/8 x))) 1)","(- (* x (+ 1/2 (* x (- (* 5/16 x) 3/8)))) 1)","(* 1/2 (sqrt (/ 1 (pow x 3))))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 3/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) (pow x 2))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (+ (* -5/32 (sqrt (/ 1 (pow x 5)))) (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (+ (* 3/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))))) (pow x 2))","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 3/8 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/ (- (+ 1 (/ 3/8 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 5/16 (/ 1 (pow x 3))))) x)","(- 1 (* 1/2 (/ 1 x)))","(- (+ 1 (/ 3/8 (pow x 2))) (* 1/2 (/ 1 x)))","(/ (- (* -1/2 (sqrt (/ 1 x))) (* -1/2 (sqrt x))) (pow x 2))","(/ (- (* 1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (/ 1 x))))) (pow x 2))","(/ (- (* -1/2 (* (sqrt (/ 1 (pow x 5))) (+ 1 (* 1/2 x)))) (+ (* -1/2 (sqrt x)) (+ (* -1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 x)))))) (pow x 2))","(* 2 (sqrt x))","(* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x))))))","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))))","(+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 x))))","(- (+ (sqrt (/ 1 x)) (* 1/8 (sqrt (/ 1 (pow x 3))))) (* 1/2 (sqrt (/ 1 x))))","(- (+ (sqrt (/ 1 x)) (* -1/16 (sqrt (/ 1 (pow x 5))))) (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))))","(sqrt (/ 1 (pow x 3)))","(/ (- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 x)))) (sqrt (/ 1 (pow x 3)))) x)","(/ (- (+ (sqrt (/ 1 x)) (+ (sqrt (/ 1 (pow x 5))) (* -1/2 (sqrt (/ 1 x))))) (+ (sqrt (/ 1 (pow x 3))) (* -1/2 (sqrt (/ 1 (pow x 3)))))) x)","(/ (- (+ (sqrt (/ 1 x)) (+ (sqrt (/ 1 (pow x 5))) (+ (* -1/2 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 1/8 (sqrt (/ 1 (pow x 3)))))))) (+ (sqrt (/ 1 (pow x 3))) (+ (sqrt (/ 1 (pow x 7))) (* -1/2 (sqrt (/ 1 (pow x 3))))))) x)","(* x (+ (sqrt (/ 1 x)) (sqrt (/ 1 (pow x 3)))))","(+ 1 (* 1/2 (/ 1 x)))","(- (+ 1 (* 1/2 (/ 1 x))) (/ 1/8 (pow x 2)))","(- (+ 1 (+ (* 1/2 (/ 1 x)) (* 1/16 (/ 1 (pow x 3))))) (/ 1/8 (pow x 2)))","(/ -1/2 x)","(/ (- (* 3/8 (/ 1 x)) 1/2) x)","(/ (- (/ 3/8 x) (+ 1/2 (* 1/4 (/ 1 (pow x 2))))) x)","(/ (- (+ (* -1 (/ (+ (* -1/4 (* x (+ 1 (* 1/4 x)))) (* 1/8 (pow x 2))) (pow x 4))) (/ 3/8 x)) (+ 1/2 (* 1/4 (/ 1 (pow x 2))))) x)","(/ 1/2 x)","(/ (- 1/2 (* 3/8 (/ 1 x))) x)","(+ (* -1 (sqrt (/ 1 x))) (* 1/2 (sqrt (/ 1 (pow x 3)))))","(+ (* -1 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(+ (* -1 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (* (sqrt (/ 1 (pow x 7))) (+ 1 (* 1/4 x)))))))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 3/16 (sqrt x))) x)) (* 1/4 (sqrt x))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/16 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 5/32 (sqrt x))) x)) (+ (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 3/16 (sqrt x)))) x)) (* 1/4 (sqrt x))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/ -1 x)","(* -1 (/ (- 1 (* 1/2 (/ 1 x))) x))","(* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 3/8 (/ 1 x))) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 3/8 (* 5/16 (/ 1 x))) x))) x))) x))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* 3/8 (/ 1 x)) 1/2) x)) 1) x))","(+ 1 (* -1 (/ (- 1/2 (* 3/8 (/ 1 x))) x)))","(- (sqrt (/ 1 x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 5))))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(- (+ (sqrt (/ 1 x)) (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* -1/2 (sqrt x))) (pow x 3)))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(* -2 (* (sqrt x) (pow (sqrt -1) 2)))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))))","(* -1 (* x (- (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* x (- (+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* x (- (+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1 (/ (+ (* 1/2 (sqrt (/ 1 x))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (* x (- (+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1 (/ (+ (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(* -1 (- (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(+ (* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* -1 (- (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(+ (* -1 (- (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) (* -1 (/ (+ (* -1 (/ (- (* 1/2 (sqrt x)) (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x)))","(+ (* -1 (- (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) (* -1 (/ (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (sqrt x)) (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* 1/2 (sqrt x))) (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x)))","(* (sqrt x) (pow (sqrt -1) 2))","(* -1 (* x (+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))))))","(pow (sqrt -1) 2)","(- (pow (sqrt -1) 2) (* 1/2 (/ 1 x)))","(+ (* -1 (/ (+ 1/2 (* 1/8 (/ 1 (* x (pow (sqrt -1) 2))))) x)) (pow (sqrt -1) 2))","(+ (* -1 (/ (+ 1/2 (+ (/ 1/16 (* (pow x 2) (pow (sqrt -1) 4))) (/ 1/8 (* x (pow (sqrt -1) 2))))) x)) (pow (sqrt -1) 2))","(/ (+ (* 1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2))))) x)) (* -1/4 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/2 (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* 1/16 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 4))))) x)) (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))))) x)) (* -1/4 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/ (+ 1/2 (* 3/8 (/ 1 (* x (pow (sqrt -1) 2))))) x)","(* -1 (/ (- (+ (/ -3/8 (* x (pow (sqrt -1) 2))) (/ 1/4 (* (pow x 2) (pow (sqrt -1) 2)))) 1/2) x))","(* -1 (/ (- (+ (* -1 (/ (+ (* -1/4 (/ x (pow (sqrt -1) 2))) (+ (* 1/8 (/ x (pow (sqrt -1) 4))) (* 1/4 (/ (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))) (pow (sqrt -1) 2))))) (pow x 3))) (/ -3/8 (* x (pow (sqrt -1) 2)))) 1/2) x))","(* -1 (/ (- (* 3/8 (/ 1 x)) 1/2) x))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (sqrt (/ 1 (pow x 3)))))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* 1/2 (sqrt x))) (pow x 3))) (* 1/2 (sqrt (/ 1 (pow x 3))))))"]],"memory":[[6850640,48581728]],"method":["egg-herbie"],"outputs":[["(* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))","(/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(/ (+ (* -1/2 (* (sqrt (pow x 3)) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/.f64 (fma.f64 (/.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal -1/2 binary64) (/.f64 (sqrt.f64 x) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))) x)","(/ (+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3))))))))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) (/.f64 #s(literal 1/8 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (sqrt.f64 x) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) #s(literal -1/2 binary64))) x (/.f64 (*.f64 (sqrt.f64 x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) x (/.f64 (sqrt.f64 x) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))) x)","(/ (+ (* x (+ (* -1/2 (* (sqrt x) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* x (+ (* -1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x))))) (+ (* x (+ (* -1 (* (sqrt x) (+ (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 2))) (+ (* 1/2 (/ (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))) (+ 1 (sqrt x)))) (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 3))))))) (+ (* 1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (+ 1 (sqrt x)) 2)))) (* 1/2 (* (sqrt (/ 1 x)) (/ 1 (+ 1 (sqrt x)))))))) (* (sqrt x) (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))))))))) (* (sqrt x) (/ 1 (+ 1 (sqrt x))))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (-.f64 (/.f64 #s(literal -1/16 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) (/.f64 #s(literal 1/8 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) #s(literal 1/2 binary64) (/.f64 #s(literal 1/16 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64))))) (sqrt.f64 x) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (+.f64 (/.f64 #s(literal 1/2 binary64) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) (/.f64 #s(literal 1/4 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))))) x (fma.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) (/.f64 #s(literal 1/8 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (sqrt.f64 x) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) #s(literal -1/2 binary64)))) x (/.f64 (*.f64 (sqrt.f64 x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) x (/.f64 (sqrt.f64 x) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))) x)","(sqrt (/ 1 x))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(/ (+ (sqrt x) (* -1/2 (sqrt (pow x 3)))) x)","(/.f64 (fma.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) #s(literal -1/2 binary64) (sqrt.f64 x)) x)","(/ (+ (sqrt x) (* (pow x 2) (+ (* -1/2 (sqrt (/ 1 x))) (* 1/2 (sqrt x))))) x)","(/.f64 (fma.f64 (*.f64 (*.f64 x x) #s(literal -1/2 binary64)) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (sqrt.f64 x)) x)","(/ (+ (sqrt x) (* (pow x 2) (+ (* -1/2 (sqrt (/ 1 x))) (* x (+ (* -1/2 (* (sqrt x) (+ 1 (* 1/4 (/ 1 x))))) (* 1/2 (sqrt (/ 1 x)))))))) x)","(/.f64 (fma.f64 (fma.f64 (*.f64 x (*.f64 (sqrt.f64 x) #s(literal -1/2 binary64))) (+.f64 (/.f64 #s(literal 1/4 binary64) x) #s(literal 1 binary64)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1/2 binary64)))) (*.f64 x x) (sqrt.f64 x)) x)","(/ 3/8 (pow x 3))","(/.f64 #s(literal 3/8 binary64) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 3/8 (* -1/2 x)) (pow x 3))","(/.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 3/8 binary64)) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 3/8 (* x (- x 1/2))) (pow x 3))","(/.f64 (fma.f64 (-.f64 x #s(literal 1/2 binary64)) x #s(literal 3/8 binary64)) (pow.f64 x #s(literal 3 binary64)))","(/ 3/8 (pow x 2))","(/.f64 #s(literal 3/8 binary64) (*.f64 x x))","(/ (+ 3/8 (* -1/2 x)) (pow x 2))","(/.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) x #s(literal 3/8 binary64)) x) x)","(/ (+ 3/8 (* x (- x 1/2))) (pow x 2))","(/.f64 (/.f64 (fma.f64 (-.f64 x #s(literal 1/2 binary64)) x #s(literal 3/8 binary64)) x) x)","(/ (+ (sqrt x) (* -1 x)) x)","(/.f64 (-.f64 (sqrt.f64 x) x) x)","(/ (+ (sqrt x) (* x (- (* 1/2 x) 1))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) x (sqrt.f64 x)) x)","(/ (+ (sqrt x) (* x (- (* x (+ 1/2 (* -3/8 x))) 1))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -3/8 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) x (sqrt.f64 x)) x)","(sqrt x)","(sqrt.f64 x)","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(+ 1 (sqrt x))","(+.f64 (sqrt.f64 x) #s(literal 1 binary64))","(+ 1 (+ (sqrt x) (* 1/2 x)))","(fma.f64 #s(literal 1/2 binary64) x (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* -1/8 x)))))","(fma.f64 (fma.f64 #s(literal -1/8 binary64) x #s(literal 1/2 binary64)) x (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(+ 1 (+ (sqrt x) (* x (+ 1/2 (* x (- (* 1/16 x) 1/8))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/16 binary64) x #s(literal -1/8 binary64)) x #s(literal 1/2 binary64)) x (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(/ (+ (sqrt x) (* x (- (sqrt x) 1))) x)","(/.f64 (fma.f64 (-.f64 (sqrt.f64 x) #s(literal 1 binary64)) x (sqrt.f64 x)) x)","(/ (+ (sqrt x) (* x (- (+ (sqrt x) (* -1/2 x)) 1))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) x (-.f64 (sqrt.f64 x) #s(literal 1 binary64))) x (sqrt.f64 x)) x)","(/ (+ (sqrt x) (* x (- (+ (sqrt x) (* x (- (* 1/8 x) 1/2))) 1))) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/8 binary64) x #s(literal -1/2 binary64)) x (-.f64 (sqrt.f64 x) #s(literal 1 binary64))) x (sqrt.f64 x)) x)","(/ (+ (sqrt x) (sqrt (pow x 3))) x)","(/.f64 (+.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (sqrt.f64 x)) x)","(/ (+ (sqrt x) (* 1/2 (sqrt (pow x 3)))) x)","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (sqrt.f64 x)) x)","(/ (+ (sqrt x) (* (pow x 2) (+ (* -1/8 (sqrt x)) (* 1/2 (sqrt (/ 1 x)))))) x)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) (*.f64 x x) (sqrt.f64 x)) x)","(/ (+ (sqrt x) (* (pow x 2) (+ (* 1/2 (sqrt (/ 1 x))) (* (pow x 2) (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/16 (sqrt (/ 1 x)))))))) x)","(/.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 x x) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) #s(literal -1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 #s(literal 1/16 binary64) (*.f64 x x) #s(literal 1/2 binary64)))) (*.f64 x x) (sqrt.f64 x)) x)","1","#s(literal 1 binary64)","(/ -1 (+ 1 (sqrt x)))","(/.f64 #s(literal -1 binary64) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))","(- (* x (+ (* 1/2 (/ 1 (+ 1 (sqrt x)))) (* 1/2 (/ 1 (pow (+ 1 (sqrt x)) 2))))) (/ 1 (+ 1 (sqrt x))))","(fma.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64))) (/.f64 #s(literal 1/2 binary64) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))) x (/.f64 #s(literal -1 binary64) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))))","(- (* x (+ (* -1 (* x (+ (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 2))) (+ (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3))) (+ (* 3/8 (/ 1 (+ 1 (sqrt x)))) (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2)))))))) (+ (* 1/2 (/ 1 (+ 1 (sqrt x)))) (* 1/2 (/ 1 (pow (+ 1 (sqrt x)) 2)))))) (/ 1 (+ 1 (sqrt x))))","(fma.f64 (fma.f64 (+.f64 (+.f64 (/.f64 #s(literal 3/8 binary64) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) (/.f64 #s(literal 1/4 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64)))) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal 3/8 binary64))) (neg.f64 x) (+.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64))) (/.f64 #s(literal 1/2 binary64) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))))) x (/.f64 #s(literal -1 binary64) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))))","(- (* x (+ (* 1/2 (/ 1 (+ 1 (sqrt x)))) (+ (* 1/2 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* x (+ (* -1 (* x (- (+ (* -1 (+ (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 3))) (+ (* 1/2 (/ (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))) (+ 1 (sqrt x)))) (* 1/16 (/ 1 (pow (+ 1 (sqrt x)) 2)))))) (* -1/2 (+ (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3)))))) (+ (* 3/16 (/ 1 (pow (+ 1 (sqrt x)) 2))) (* 5/16 (/ 1 (+ 1 (sqrt x)))))))) (* -1 (+ (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 2))) (+ (* 1/4 (/ 1 (pow (+ 1 (sqrt x)) 3))) (+ (* 3/8 (/ 1 (+ 1 (sqrt x)))) (* 1/8 (/ 1 (pow (+ 1 (sqrt x)) 2)))))))))))) (/ 1 (+ 1 (sqrt x))))","(fma.f64 (fma.f64 (neg.f64 (fma.f64 (-.f64 (-.f64 (+.f64 (/.f64 #s(literal -1/8 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) (/.f64 #s(literal -1/16 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (+.f64 (fma.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/4 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64))) (/.f64 #s(literal 1/8 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) #s(literal 1/2 binary64) (/.f64 #s(literal 1/16 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64)))) (/.f64 #s(literal 1/16 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64))))) (+.f64 (/.f64 #s(literal 5/16 binary64) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) (/.f64 #s(literal 3/16 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64))))) x (+.f64 (+.f64 (/.f64 #s(literal 3/8 binary64) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))) (/.f64 #s(literal 1/4 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 3 binary64)))) (*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64))) #s(literal 3/8 binary64))))) x (+.f64 (/.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 (sqrt.f64 x) #s(literal 1 binary64)) #s(literal 2 binary64))) (/.f64 #s(literal 1/2 binary64) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))))) x (/.f64 #s(literal -1 binary64) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))))","(* -1 (sqrt (/ 1 x)))","(neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(/ -3/8 (pow x 2))","(/.f64 (/.f64 #s(literal -3/8 binary64) x) x)","(/ (- (* 1/2 x) 3/8) (pow x 2))","(/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)","-1","#s(literal -1 binary64)","(- (* 1/2 x) 1)","(fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))","(- (* x (+ 1/2 (* -3/8 x))) 1)","(fma.f64 (fma.f64 #s(literal -3/8 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(- (* x (+ 1/2 (* x (- (* 5/16 x) 3/8)))) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal 5/16 binary64) x #s(literal -3/8 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))","(* 1/2 (sqrt (/ 1 (pow x 3))))","(*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (* 1/2 (sqrt x))) (pow x 2))","(/.f64 (fma.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 3/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))) (pow x 2))","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -3/8 binary64) (fma.f64 #s(literal 3/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))) (*.f64 x x))","(/ (+ (* -1/4 (sqrt (/ 1 x))) (+ (* -5/32 (sqrt (/ 1 (pow x 5)))) (+ (* -1/8 (sqrt (/ 1 x))) (+ (* 1/16 (sqrt (/ 1 (pow x 3)))) (+ (* 3/16 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt x))))))) (pow x 2))","(/.f64 (fma.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -5/32 binary64) (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/4 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x)))))) (*.f64 x x))","(/ (- 1 (* 1/2 (/ 1 x))) x)","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)","(/ (- (+ 1 (/ 3/8 (pow x 2))) (* 1/2 (/ 1 x))) x)","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x)","(/ (- (+ 1 (/ 3/8 (pow x 2))) (+ (* 1/2 (/ 1 x)) (* 5/16 (/ 1 (pow x 3))))) x)","(/.f64 (-.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (/.f64 #s(literal 5/16 binary64) (pow.f64 x #s(literal 3 binary64)))) x)","(- 1 (* 1/2 (/ 1 x)))","(-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x))","(- (+ 1 (/ 3/8 (pow x 2))) (* 1/2 (/ 1 x)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))","(/ (- (* -1/2 (sqrt (/ 1 x))) (* -1/2 (sqrt x))) (pow x 2))","(*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 x x)))","(/ (- (* 1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (+ (* -1/2 (sqrt x)) (* 1/2 (sqrt (/ 1 x))))) (pow x 2))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) #s(literal -1/2 binary64))) (*.f64 x x))","(/ (- (* -1/2 (* (sqrt (/ 1 (pow x 5))) (+ 1 (* 1/2 x)))) (+ (* -1/2 (sqrt x)) (+ (* -1/2 (* (sqrt (/ 1 (pow x 3))) (+ 1 (* 1/4 x)))) (* 1/2 (sqrt (/ 1 x)))))) (pow x 2))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (fma.f64 #s(literal -1/2 binary64) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))) (*.f64 x x))","(* 2 (sqrt x))","(*.f64 #s(literal 2 binary64) (sqrt.f64 x))","(* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))) x)","(* x (+ (* -1/8 (sqrt (/ 1 (pow x 5)))) (+ (* 1/16 (sqrt (/ 1 (pow x 7)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (sqrt (/ 1 x)))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/8 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))) x)","(+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 x))))","(*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(- (+ (sqrt (/ 1 x)) (* 1/8 (sqrt (/ 1 (pow x 3))))) (* 1/2 (sqrt (/ 1 x))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(- (+ (sqrt (/ 1 x)) (* -1/16 (sqrt (/ 1 (pow x 5))))) (+ (* -1/8 (sqrt (/ 1 (pow x 3)))) (* 1/2 (sqrt (/ 1 x)))))","(fma.f64 #s(literal -1/16 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/8 binary64) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))))","(sqrt (/ 1 (pow x 3)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))","(/ (- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 x)))) (sqrt (/ 1 (pow x 3)))) x)","(/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) x)","(/ (- (+ (sqrt (/ 1 x)) (+ (sqrt (/ 1 (pow x 5))) (* -1/2 (sqrt (/ 1 x))))) (+ (sqrt (/ 1 (pow x 3))) (* -1/2 (sqrt (/ 1 (pow x 3)))))) x)","(/.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/2 binary64) (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))))) x)","(/ (- (+ (sqrt (/ 1 x)) (+ (sqrt (/ 1 (pow x 5))) (+ (* -1/2 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 1/8 (sqrt (/ 1 (pow x 3)))))))) (+ (sqrt (/ 1 (pow x 3))) (+ (sqrt (/ 1 (pow x 7))) (* -1/2 (sqrt (/ 1 (pow x 3))))))) x)","(/.f64 (-.f64 (+.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64))))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/8 binary64)))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))))) x)","(* x (+ (sqrt (/ 1 x)) (sqrt (/ 1 (pow x 3)))))","(*.f64 (+.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(+ 1 (* 1/2 (/ 1 x)))","(+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64))","(- (+ 1 (* 1/2 (/ 1 x))) (/ 1/8 (pow x 2)))","(-.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) (/.f64 #s(literal 1/8 binary64) (*.f64 x x)))","(- (+ 1 (+ (* 1/2 (/ 1 x)) (* 1/16 (/ 1 (pow x 3))))) (/ 1/8 (pow x 2)))","(-.f64 (+.f64 (+.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/16 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1/2 binary64) x)) (/.f64 #s(literal 1/8 binary64) (*.f64 x x)))","(/ -1/2 x)","(/.f64 #s(literal -1/2 binary64) x)","(/ (- (* 3/8 (/ 1 x)) 1/2) x)","(/.f64 (-.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) x)","(/ (- (/ 3/8 x) (+ 1/2 (* 1/4 (/ 1 (pow x 2))))) x)","(/.f64 (-.f64 (/.f64 #s(literal 3/8 binary64) x) (+.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) x) x) #s(literal 1/2 binary64))) x)","(/ (- (+ (* -1 (/ (+ (* -1/4 (* x (+ 1 (* 1/4 x)))) (* 1/8 (pow x 2))) (pow x 4))) (/ 3/8 x)) (+ 1/2 (* 1/4 (/ 1 (pow x 2))))) x)","(/.f64 (-.f64 (-.f64 (/.f64 #s(literal 3/8 binary64) x) (/.f64 (*.f64 x (fma.f64 #s(literal 1/8 binary64) x (*.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) #s(literal -1/4 binary64)))) (pow.f64 x #s(literal 4 binary64)))) (+.f64 (/.f64 (/.f64 #s(literal 1/4 binary64) x) x) #s(literal 1/2 binary64))) x)","(/ 1/2 x)","(/.f64 #s(literal 1/2 binary64) x)","(/ (- 1/2 (* 3/8 (/ 1 x))) x)","(/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)","(+ (* -1 (sqrt (/ 1 x))) (* 1/2 (sqrt (/ 1 (pow x 3)))))","(-.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(+ (* -1 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/2 binary64) (-.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(+ (* -1 (sqrt (/ 1 x))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 1/2 (* (sqrt (/ 1 (pow x 7))) (+ 1 (* 1/4 x)))))))","(-.f64 (fma.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/2 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 3/16 (sqrt x))) x)) (* 1/4 (sqrt x))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/4 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal 3/16 binary64) (sqrt.f64 x))) (neg.f64 x))) (neg.f64 x))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/16 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 5/32 (sqrt x))) x)) (+ (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))) (* 3/16 (sqrt x)))) x)) (* 1/4 (sqrt x))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/4 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (fma.f64 #s(literal 3/16 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/16 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal 5/32 binary64) (sqrt.f64 x))) (neg.f64 x)))) (neg.f64 x))) (neg.f64 x))) (*.f64 x x))","(/ -1 x)","(/.f64 #s(literal -1 binary64) x)","(* -1 (/ (- 1 (* 1/2 (/ 1 x))) x))","(/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64)) x)","(* -1 (/ (+ 1 (* -1 (/ (- 1/2 (* 3/8 (/ 1 x))) x))) x))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) x)","(* -1 (/ (+ 1 (* -1 (/ (+ 1/2 (* -1 (/ (- 3/8 (* 5/16 (/ 1 x))) x))) x))) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 #s(literal 3/8 binary64) (/.f64 #s(literal 5/16 binary64) x)) x)) x)) (neg.f64 x))","(* -1 (/ (- (* 1/2 (/ 1 x)) 1) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)","(* -1 (/ (- (* -1 (/ (- (* 3/8 (/ 1 x)) 1/2) x)) 1) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x)","(+ 1 (* -1 (/ (- 1/2 (* 3/8 (/ 1 x))) x)))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))","(- (sqrt (/ 1 x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(- (+ (sqrt (/ 1 x)) (* 1/2 (sqrt (/ 1 (pow x 3))))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(- (+ (sqrt (/ 1 x)) (* -1/2 (sqrt (/ 1 (pow x 5))))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))","(- (+ (sqrt (/ 1 x)) (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* -1/2 (sqrt x))) (pow x 3)))) (+ (* -1/2 (sqrt (/ 1 (pow x 3)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(+.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (*.f64 (fma.f64 (/.f64 x #s(literal -1 binary64)) #s(literal -1/4 binary64) #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) (sqrt.f64 x))) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))))","(* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))","(sqrt.f64 (/.f64 #s(literal 1 binary64) x))","(* -1 (* (sqrt x) (pow (sqrt -1) 2)))","(sqrt.f64 x)","(* -2 (* (sqrt x) (pow (sqrt -1) 2)))","(*.f64 #s(literal 2 binary64) (sqrt.f64 x))","(* -1 (* x (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1/2 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) x)","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/8 binary64) (fma.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64)))) (neg.f64 x))","(* -1 (* x (+ (* -1/8 (* (sqrt (/ 1 (pow x 5))) (/ 1 (pow (sqrt -1) 2)))) (+ (* 1/16 (* (sqrt (/ 1 (pow x 7))) (/ 1 (pow (sqrt -1) 4)))) (+ (* 1/2 (sqrt (/ 1 (pow x 3)))) (* 2 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))))))","(*.f64 (fma.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 7 binary64)))) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) #s(literal 1/16 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 1/8 binary64) (fma.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64))))) (neg.f64 x))","(* -1 (* x (- (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(* -1 (* x (- (+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2)))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(*.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (neg.f64 x))","(* -1 (* x (- (+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1 (/ (+ (* 1/2 (sqrt (/ 1 x))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (+.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64))) (neg.f64 x))","(* -1 (* x (- (+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1 (/ (+ (* -1 (/ (- (* 1/8 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(*.f64 (fma.f64 (/.f64 (-.f64 (/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 (sqrt.f64 x) #s(literal -1/2 binary64))) (neg.f64 x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x) #s(literal -1 binary64) (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (neg.f64 x))","(* -1 (- (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))))","(*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(+ (* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))) (* -1 (- (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))))","(fma.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))))","(+ (* -1 (- (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) (* -1 (/ (+ (* -1 (/ (- (* 1/2 (sqrt x)) (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x)))","(-.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) (/.f64 (-.f64 (/.f64 (fma.f64 (sqrt.f64 x) #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x))","(+ (* -1 (- (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) (* -1 (/ (+ (* -1 (/ (- (+ (* -1 (/ (- (* 1/2 (sqrt x)) (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* 1/2 (sqrt x))) (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2)))) x)) (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) x)))","(-.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) (/.f64 (-.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 (fma.f64 (sqrt.f64 x) #s(literal -1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)) #s(literal -1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x))","(* (sqrt x) (pow (sqrt -1) 2))","(neg.f64 (sqrt.f64 x))","(* -1 (* x (+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* -1 (* (sqrt (/ 1 (pow x 3))) (pow (sqrt -1) 2))))))","(*.f64 (-.f64 (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x)","(pow (sqrt -1) 2)","#s(literal -1 binary64)","(- (pow (sqrt -1) 2) (* 1/2 (/ 1 x)))","(-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1/2 binary64) x))","(+ (* -1 (/ (+ 1/2 (* 1/8 (/ 1 (* x (pow (sqrt -1) 2))))) x)) (pow (sqrt -1) 2))","(-.f64 #s(literal -1 binary64) (/.f64 (+.f64 (/.f64 #s(literal -1/8 binary64) x) #s(literal 1/2 binary64)) x))","(+ (* -1 (/ (+ 1/2 (+ (/ 1/16 (* (pow x 2) (pow (sqrt -1) 4))) (/ 1/8 (* x (pow (sqrt -1) 2))))) x)) (pow (sqrt -1) 2))","(-.f64 #s(literal -1 binary64) (/.f64 (+.f64 (+.f64 (/.f64 #s(literal -1/8 binary64) x) (/.f64 (/.f64 #s(literal 1/16 binary64) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) (*.f64 x x))) #s(literal 1/2 binary64)) x))","(/ (+ (* 1/4 (* (sqrt (/ 1 x)) (/ 1 (pow (sqrt -1) 2)))) (* 1/2 (sqrt x))) (pow x 2))","(/.f64 (fma.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2))))) x)) (* -1/4 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/4 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal 3/16 binary64) (sqrt.f64 x))) (neg.f64 x))) (neg.f64 x))) (*.f64 x x))","(/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/2 (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* 1/16 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 4))))) x)) (+ (* -1/4 (* (sqrt x) (/ (+ 1 (* 1/4 (/ 1 (pow (sqrt -1) 2)))) (pow (sqrt -1) 2)))) (* -1/8 (* (sqrt (pow x 3)) (/ 1 (pow (sqrt -1) 2)))))) x)) (* -1/4 (* (sqrt x) (/ 1 (pow (sqrt -1) 2))))) x)) (* 1/2 (sqrt x))) (pow x 2))","(/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 (fma.f64 #s(literal 1/4 binary64) (sqrt.f64 x) (/.f64 (-.f64 (fma.f64 #s(literal 1/8 binary64) (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (*.f64 #s(literal 3/16 binary64) (sqrt.f64 x))) (/.f64 (fma.f64 (/.f64 (sqrt.f64 (pow.f64 x #s(literal 3 binary64))) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) #s(literal 1/16 binary64) (*.f64 #s(literal 5/32 binary64) (sqrt.f64 x))) x)) (neg.f64 x))) (neg.f64 x))) (*.f64 x x))","(/ (+ 1/2 (* 3/8 (/ 1 (* x (pow (sqrt -1) 2))))) x)","(/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)","(* -1 (/ (- (+ (/ -3/8 (* x (pow (sqrt -1) 2))) (/ 1/4 (* (pow x 2) (pow (sqrt -1) 2)))) 1/2) x))","(/.f64 (-.f64 (+.f64 (/.f64 #s(literal -1/4 binary64) (*.f64 x x)) (/.f64 #s(literal 3/8 binary64) x)) #s(literal 1/2 binary64)) (neg.f64 x))","(* -1 (/ (- (+ (* -1 (/ (+ (* -1/4 (/ x (pow (sqrt -1) 2))) (+ (* 1/8 (/ x (pow (sqrt -1) 4))) (* 1/4 (/ (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))) (pow (sqrt -1) 2))))) (pow x 3))) (/ -3/8 (* x (pow (sqrt -1) 2)))) 1/2) x))","(/.f64 (-.f64 (-.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 x #s(literal -1 binary64)) #s(literal -1/4 binary64) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/4 binary64) (fma.f64 (/.f64 x (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 4 binary64))) #s(literal 1/8 binary64) (*.f64 (/.f64 x #s(literal -1 binary64)) #s(literal -1/4 binary64)))) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 x))","(* -1 (/ (- (* 3/8 (/ 1 x)) 1/2) x))","(/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (* 1/2 (sqrt (/ 1 (pow x 3)))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (+ (* -1/2 (sqrt (/ 1 (pow x 5)))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal -1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))))","(+ (* -1 (* (sqrt (/ 1 x)) (pow (sqrt -1) 2))) (+ (* -1 (/ (+ (* -1/2 (* (sqrt (/ 1 x)) (+ 1 (* -1/4 (/ x (pow (sqrt -1) 2)))))) (* 1/2 (sqrt x))) (pow x 3))) (* 1/2 (sqrt (/ 1 (pow x 3))))))","(fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (*.f64 (fma.f64 (/.f64 x #s(literal -1 binary64)) #s(literal -1/4 binary64) #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) (sqrt.f64 x)) (pow.f64 x #s(literal 3 binary64))))))"]],"stop":[["iter limit",1],["node limit",1]],"time":432.64013671875,"type":"simplify"},{"count":[[21,762]],"egraph":[[0,9291,244,0.101181438],[2,2825,250,0.052004537],[1,318,250,0.015001216],[0,71,267,0.00344568],[0,45,270,0.00066236]],"inputs":[["(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","#s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x)","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (sqrt.f64 x) x))","(/.f64 (sqrt.f64 x) x)","(sqrt.f64 x)","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","#s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) x)","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(-.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64)))","(*.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x))","(-.f64 (+.f64 x #s(literal 1 binary64)) x)","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 x))))","(/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 x)))","(/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)","(/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))"]],"memory":[[-2494832,65852544]],"outputs":[["(*.f64 (/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x)) (-.f64 x (+.f64 #s(literal 1 binary64) x))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x)) (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(*.f64 (/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (hypot.f64 (sqrt.f64 x) x)))","(*.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal -1 binary64)) #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x)))","(*.f64 (neg.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x))) (pow.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal -1 binary64)))","(*.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x)) (pow.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(pow.f64 (/.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x))) #s(literal -1 binary64))","(/.f64 (*.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x)) #s(literal 1 binary64)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(/.f64 (neg.f64 (neg.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x)))) (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(/.f64 (neg.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x)))))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x))))","(neg.f64 (/.f64 (neg.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x))) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(neg.f64 (/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x)) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(exp.f64 (*.f64 (log.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x)))) #s(literal -1 binary64)))","#s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x))","(*.f64 (pow.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (pow.f64 (neg.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x))","(pow.f64 (/.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (neg.f64 x)) (*.f64 (neg.f64 (sqrt.f64 x)) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (*.f64 x (neg.f64 x))) (*.f64 (neg.f64 (sqrt.f64 x)) (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)))) (*.f64 (neg.f64 (sqrt.f64 x)) (*.f64 x (neg.f64 x))))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) x) (*.f64 (neg.f64 (sqrt.f64 x)) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))) (neg.f64 (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (*.f64 x x)) (*.f64 (neg.f64 (sqrt.f64 x)) (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)))) (*.f64 (neg.f64 (sqrt.f64 x)) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 x (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (/.f64 x (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (*.f64 x (/.f64 x (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x))))) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (*.f64 x (/.f64 x (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x))))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x (neg.f64 x))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)) (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)) (*.f64 x (neg.f64 x))))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)) x))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x x)) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)) (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 x (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)) (/.f64 x (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x (/.f64 x (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x))))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)) (*.f64 x (/.f64 x (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x))))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (*.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))) (*.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x (neg.f64 x))) (*.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))) (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)))) (*.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))) (*.f64 x (neg.f64 x))))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))) (*.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))) x))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x x)) (*.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))) (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)))) (*.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 x (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))) (*.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))) (/.f64 x (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x (/.f64 x (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x))))) (*.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))) (*.f64 x (/.f64 x (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x))))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (*.f64 (neg.f64 x) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x (neg.f64 x))) (*.f64 (neg.f64 x) (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)))) (*.f64 (neg.f64 x) (*.f64 x (neg.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x x)) (*.f64 (neg.f64 x) (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 x (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) (/.f64 x (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x (/.f64 x (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x))))) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) (*.f64 x (/.f64 x (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x))))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 x)) (*.f64 (sqrt.f64 x) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))) (*.f64 (sqrt.f64 x) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (*.f64 x (neg.f64 x))) (*.f64 (sqrt.f64 x) (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)))) (*.f64 (sqrt.f64 x) (*.f64 x (neg.f64 x))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) x) (*.f64 (sqrt.f64 x) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))) (pow.f64 x #s(literal 3/2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (*.f64 x x)) (*.f64 (sqrt.f64 x) (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)))) (*.f64 (sqrt.f64 x) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (/.f64 x (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (/.f64 x (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -1/2 binary64)) (*.f64 x (/.f64 x (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x))))) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (*.f64 x (/.f64 x (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (neg.f64 (neg.f64 x)) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))) (*.f64 (neg.f64 (neg.f64 x)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x (neg.f64 x))) (*.f64 (neg.f64 (neg.f64 x)) (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)))) (*.f64 (neg.f64 (neg.f64 x)) (*.f64 x (neg.f64 x))))","(/.f64 (-.f64 x (*.f64 (neg.f64 (neg.f64 x)) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))) (*.f64 (neg.f64 (neg.f64 x)) x))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (neg.f64 (neg.f64 x)) (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)))) (*.f64 (neg.f64 (neg.f64 x)) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 x (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))) (*.f64 (neg.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 x)) (/.f64 x (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x (/.f64 x (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x))))) (*.f64 (neg.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 x)) (*.f64 x (/.f64 x (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 x (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))) (*.f64 x (neg.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x (neg.f64 x))) (*.f64 x (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)))) (*.f64 x (*.f64 x (neg.f64 x))))","(/.f64 (-.f64 (*.f64 x x) (*.f64 x (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 x (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))) x) (*.f64 x (/.f64 x (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x (/.f64 x (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x))))) x) (*.f64 x (*.f64 x (/.f64 x (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x))))))","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (neg.f64 x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -1 binary64))) (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 3 binary64))) (pow.f64 x #s(literal -1 binary64))) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) #s(literal 1 binary64)) x)","(/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) x) #s(literal 2 binary64))) (+.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) x)))","(/.f64 (-.f64 (pow.f64 x #s(literal -3 binary64)) (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) x) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal -2 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) x) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) x)))))","(/.f64 (neg.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))) (neg.f64 (neg.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) (neg.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) x))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) #s(literal 1 binary64)) x))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (neg.f64 x) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 x (*.f64 x (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))) (*.f64 x x))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64))) (*.f64 x (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 3 binary64))) (*.f64 x (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)))))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x)","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 x (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))))","(neg.f64 (/.f64 (+.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x))","(neg.f64 (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) (neg.f64 x)))","(fma.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -2 binary64)) (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -2 binary64)) (neg.f64 (/.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) x)))","(fma.f64 (/.f64 (neg.f64 (sqrt.f64 x)) x) (/.f64 (neg.f64 (sqrt.f64 x)) x) (neg.f64 (/.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) x)))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) x (neg.f64 (/.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) x)))","(fma.f64 (/.f64 (sqrt.f64 x) (neg.f64 x)) (/.f64 (sqrt.f64 x) (neg.f64 x)) (neg.f64 (/.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) x)))","(fma.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (neg.f64 (/.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) x)))","(fma.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 x) #s(literal -1 binary64)) (neg.f64 (/.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) x)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64) (neg.f64 (/.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) x)))","(fma.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)) (neg.f64 (/.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (sqrt.f64 x) (neg.f64 x)) #s(literal 2 binary64)) (neg.f64 (/.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) #s(literal 2 binary64)) (neg.f64 (/.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 (sqrt.f64 x)) #s(literal -2 binary64)) (neg.f64 (/.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)) (neg.f64 (/.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) x)))","(fma.f64 x (pow.f64 (pow.f64 (neg.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)) (neg.f64 (/.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) x)))","(fma.f64 x (pow.f64 x #s(literal -2 binary64)) (neg.f64 (/.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) x)))","(-.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) x))","(exp.f64 (*.f64 (log.f64 (/.f64 x (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)))) #s(literal -1 binary64)))","(+.f64 (pow.f64 x #s(literal -1 binary64)) (neg.f64 (/.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) x)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64))) (pow.f64 (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64))) (*.f64 (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64)))) (*.f64 (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 3 binary64)))) (*.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64))) (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 3 binary64))) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 3 binary64)))))","(fma.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 #s(literal -1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64))","(fma.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) (neg.f64 (pow.f64 x #s(literal -1 binary64))) #s(literal 1 binary64))","(-.f64 (pow.f64 (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 2 binary64)) (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64))))","(-.f64 (pow.f64 (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (pow.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 3 binary64)) (fma.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) (+.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))","(+.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) (/.f64 (/.f64 #s(literal 3/8 binary64) x) x))","(+.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (pow.f64 (neg.f64 x) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 #s(literal -1 binary64) #s(literal 1/2 binary64)) (pow.f64 (pow.f64 (neg.f64 x) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1/2 binary64)) (pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal 1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/4 binary64)) (pow.f64 x #s(literal -1/4 binary64)))","(*.f64 (neg.f64 (sqrt.f64 x)) (pow.f64 (neg.f64 x) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 (sqrt.f64 x) (neg.f64 x)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (sqrt.f64 x))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64))","(*.f64 (sqrt.f64 x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(pow.f64 (pow.f64 x #s(literal -1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64))","(pow.f64 (sqrt.f64 x) #s(literal -1 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/4 binary64))","(pow.f64 x #s(literal -1/2 binary64))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 x)) (*.f64 (neg.f64 x) (sqrt.f64 x))) (*.f64 x x))","(/.f64 (sqrt.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (sqrt.f64 (neg.f64 (sqrt.f64 x))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x)))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (neg.f64 x)))","(/.f64 (sqrt.f64 (pow.f64 x #s(literal -1/2 binary64))) (sqrt.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)))","(/.f64 (sqrt.f64 x) (neg.f64 (neg.f64 x)))","(/.f64 (sqrt.f64 x) x)","(/.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 (neg.f64 x))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 x))","(neg.f64 (/.f64 (neg.f64 (sqrt.f64 x)) x))","(neg.f64 (/.f64 (sqrt.f64 x) (neg.f64 x)))","(neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(sqrt.f64 (/.f64 x (*.f64 x x)))","(sqrt.f64 (pow.f64 x #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (/.f64 (sqrt.f64 x) (neg.f64 x)))","(fabs.f64 (pow.f64 x #s(literal -1/2 binary64)))","(exp.f64 (fma.f64 (log.f64 x) #s(literal -1 binary64) (log.f64 (sqrt.f64 x))))","(exp.f64 (fma.f64 (log.f64 x) #s(literal 1/2 binary64) (*.f64 (log.f64 x) #s(literal -1 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 x #s(literal -1 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 #s(literal -1/2 binary64) (log.f64 x)))","(*.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 x)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal 1/2 binary64)) (sqrt.f64 x))","(*.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 1/4 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)))","(*.f64 (sqrt.f64 x) (pow.f64 #s(literal 1 binary64) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (sqrt.f64 x))","(*.f64 x (pow.f64 x #s(literal -1/2 binary64)))","(pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64))","(pow.f64 (sqrt.f64 x) #s(literal 1 binary64))","(pow.f64 (*.f64 x x) #s(literal 1/4 binary64))","(pow.f64 x #s(literal 1/2 binary64))","(/.f64 (sqrt.f64 (neg.f64 x)) (sqrt.f64 #s(literal -1 binary64)))","(/.f64 (neg.f64 x) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (sqrt.f64 x)) #s(literal -1 binary64))","(/.f64 (sqrt.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1/2 binary64)))","(/.f64 x (sqrt.f64 x))","(neg.f64 (neg.f64 (sqrt.f64 x)))","(sqrt.f64 (/.f64 (*.f64 x x) x))","(sqrt.f64 x)","(-.f64 #s(literal 0 binary64) (neg.f64 (sqrt.f64 x)))","(fabs.f64 (sqrt.f64 x))","(exp.f64 (log.f64 (sqrt.f64 x)))","(*.f64 (/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (pow.f64 x #s(literal -1 binary64))) (-.f64 x (+.f64 #s(literal 1 binary64) x))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (pow.f64 x #s(literal -1 binary64))) (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(*.f64 (/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (pow.f64 x #s(literal -1 binary64))) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (hypot.f64 (sqrt.f64 x) x)))","(*.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal -1 binary64)) #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (pow.f64 x #s(literal -1 binary64))))","(*.f64 (neg.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (pow.f64 x #s(literal -1 binary64)))) (pow.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal -1 binary64)))","(*.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (pow.f64 x #s(literal -1 binary64))) (pow.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (pow.f64 x #s(literal -1 binary64))) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(pow.f64 (/.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (pow.f64 x #s(literal -1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (pow.f64 x #s(literal -1 binary64)))) #s(literal -1 binary64))","(/.f64 (*.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (pow.f64 x #s(literal -1 binary64))) #s(literal 1 binary64)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(/.f64 (neg.f64 (neg.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (pow.f64 x #s(literal -1 binary64))))) (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(/.f64 (neg.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (pow.f64 x #s(literal -1 binary64))) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (pow.f64 x #s(literal -1 binary64)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (pow.f64 x #s(literal -1 binary64)))))","(neg.f64 (/.f64 (neg.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (pow.f64 x #s(literal -1 binary64)))) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(neg.f64 (/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (pow.f64 x #s(literal -1 binary64))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(exp.f64 (*.f64 (log.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (pow.f64 x #s(literal -1 binary64))))) #s(literal -1 binary64)))","#s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -2 binary64)) (pow.f64 (pow.f64 x #s(literal 1/4 binary64)) #s(literal -2 binary64)))","(*.f64 (/.f64 (neg.f64 (sqrt.f64 x)) x) (/.f64 (neg.f64 (sqrt.f64 x)) x))","(*.f64 (pow.f64 x #s(literal -2 binary64)) x)","(*.f64 (/.f64 (sqrt.f64 x) (neg.f64 x)) (/.f64 (sqrt.f64 x) (neg.f64 x)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (sqrt.f64 x) (neg.f64 x)) #s(literal 2 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) #s(literal 2 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 (sqrt.f64 x)) #s(literal -2 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal -1 binary64)))","(*.f64 x (pow.f64 (pow.f64 (neg.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 x (pow.f64 x #s(literal -2 binary64)))","(pow.f64 (neg.f64 (neg.f64 x)) #s(literal -1 binary64))","(pow.f64 (pow.f64 x #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (sqrt.f64 x) #s(literal -2 binary64))","(pow.f64 (*.f64 x x) #s(literal -1/2 binary64))","(pow.f64 x #s(literal -1 binary64))","(/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (neg.f64 (sqrt.f64 x)))","(/.f64 #s(literal -1 binary64) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(/.f64 #s(literal -1 binary64) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))))","(/.f64 #s(literal -1 binary64) (neg.f64 x))","(/.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 x)))","(/.f64 #s(literal 1 binary64) x)","(neg.f64 (/.f64 #s(literal -1 binary64) x))","(exp.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (log.f64 x)) (log.f64 (sqrt.f64 x))))","(exp.f64 (fma.f64 #s(literal -1/2 binary64) (log.f64 x) (*.f64 #s(literal -1/2 binary64) (log.f64 x))))","(exp.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (log.f64 x)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 x)) #s(literal -2 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal -1 binary64)))","(*.f64 (-.f64 x (+.f64 #s(literal 1 binary64) x)) (pow.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (pow.f64 (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (hypot.f64 (sqrt.f64 x) x)) #s(literal -1 binary64)))","(*.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (-.f64 x (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (-.f64 (+.f64 #s(literal 1 binary64) x) x)) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (hypot.f64 (sqrt.f64 x) x)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 x (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (*.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (+.f64 #s(literal 1 binary64) x))) (*.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (*.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) x)) (*.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 (neg.f64 (-.f64 x (+.f64 #s(literal 1 binary64) x))) (neg.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) (neg.f64 (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (hypot.f64 (sqrt.f64 x) x))))","(/.f64 (-.f64 x (+.f64 #s(literal 1 binary64) x)) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (hypot.f64 (sqrt.f64 x) x)))","(/.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (neg.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (-.f64 x (+.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (-.f64 (+.f64 #s(literal 1 binary64) x) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (hypot.f64 (sqrt.f64 x) x)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))))","(fma.f64 (sqrt.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(fma.f64 (pow.f64 #s(literal 1 binary64) #s(literal 1/2 binary64)) (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)) (sqrt.f64 x))","(fma.f64 (pow.f64 x #s(literal 1/4 binary64)) (pow.f64 x #s(literal 1/4 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (sqrt.f64 x))","(fma.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 x))","(fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(fma.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64) (sqrt.f64 x))","(fma.f64 (sqrt.f64 x) (pow.f64 #s(literal 1 binary64) #s(literal 1/2 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(fma.f64 (sqrt.f64 x) #s(literal 1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(fma.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))","(fma.f64 #s(literal 1 binary64) (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(fma.f64 x (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(-.f64 (/.f64 x (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (/.f64 x (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))","(+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(*.f64 (-.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) x) (+.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (pow.f64 (+.f64 (fma.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) (+.f64 #s(literal 1 binary64) x) (+.f64 #s(literal 1 binary64) x)) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (-.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) x) (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (fma.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) (+.f64 #s(literal 1 binary64) x) (+.f64 #s(literal 1 binary64) x)) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) x)) (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) x) (+.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (*.f64 (+.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (+.f64 #s(literal 1 binary64) x))) (*.f64 (+.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (+.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal 3 binary64)) (+.f64 (fma.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) (+.f64 #s(literal 1 binary64) x) (+.f64 #s(literal 1 binary64) x)) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) x))) (*.f64 (+.f64 (fma.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) (+.f64 #s(literal 1 binary64) x) (+.f64 #s(literal 1 binary64) x)) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) (*.f64 (+.f64 (fma.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) (+.f64 #s(literal 1 binary64) x) (+.f64 #s(literal 1 binary64) x)) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) x)) (+.f64 (fma.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) (+.f64 #s(literal 1 binary64) x) (+.f64 #s(literal 1 binary64) x)) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) x))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 (-.f64 x #s(literal 1 binary64)))) (*.f64 (sqrt.f64 x) (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))))) (*.f64 (sqrt.f64 x) (sqrt.f64 (-.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))) (*.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))) (*.f64 (sqrt.f64 x) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))) (neg.f64 (sqrt.f64 x)))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64))) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (-.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) x) (+.f64 #s(literal 1 binary64) x))) (neg.f64 (+.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) (neg.f64 (+.f64 (fma.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) (+.f64 #s(literal 1 binary64) x) (+.f64 #s(literal 1 binary64) x)) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) x))))","(/.f64 (-.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) x) (+.f64 #s(literal 1 binary64) x)) (-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (-.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) x) (+.f64 #s(literal 1 binary64) x)) (+.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (+.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) x) (-.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (+.f64 (fma.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) (+.f64 #s(literal 1 binary64) x) (+.f64 #s(literal 1 binary64) x)) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) x)))","(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) (hypot.f64 (sqrt.f64 x) x)) (sqrt.f64 x))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (-.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) x) (+.f64 #s(literal 1 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (fma.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) (+.f64 #s(literal 1 binary64) x) (+.f64 #s(literal 1 binary64) x)) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) x)) (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))))","(fma.f64 (sqrt.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)))) (sqrt.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(fma.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x))) (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x))) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(fma.f64 (sqrt.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x))) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(fma.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x))) (sqrt.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) (+.f64 #s(literal 1 binary64) x))) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(fma.f64 (sqrt.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)))) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(fma.f64 (pow.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x))) #s(literal 1/2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(fma.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal 1/2 binary64)) (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(fma.f64 (pow.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) (+.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)) (pow.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(fma.f64 (pow.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) #s(literal 1/2 binary64)) (pow.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) (+.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)) (pow.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x))) #s(literal 1/2 binary64)) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(fma.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(-.f64 (/.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) x) (+.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (/.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(-.f64 (/.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal 3 binary64)) (+.f64 (fma.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) (+.f64 #s(literal 1 binary64) x) (+.f64 #s(literal 1 binary64) x)) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) x))) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)) (+.f64 (fma.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) (+.f64 #s(literal 1 binary64) x) (+.f64 #s(literal 1 binary64) x)) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) x))))","(-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(+.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)))","(+.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(*.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) x) (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)) (pow.f64 (+.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (fma.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) (+.f64 #s(literal 1 binary64) x) (+.f64 #s(literal 1 binary64) x)) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(*.f64 (neg.f64 (-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (pow.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (+.f64 #s(literal 1 binary64) x)))","(pow.f64 (/.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (sqrt.f64 x)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (sqrt.f64 x)) (+.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (/.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (neg.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) (+.f64 #s(literal 1 binary64) x)) (+.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x))) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x))) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x))) (+.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x))) #s(literal 1 binary64))) (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x))) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (/.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (*.f64 (-.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) x) (+.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))) (+.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))) (+.f64 (fma.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) (+.f64 #s(literal 1 binary64) x) (+.f64 #s(literal 1 binary64) x)) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) x)))","(/.f64 (*.f64 (-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x))","(/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))) (+.f64 (/.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (+.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3/2 binary64))) (+.f64 (pow.f64 (/.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (*.f64 (/.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (+.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (+.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) (+.f64 #s(literal 1 binary64) x) (+.f64 #s(literal 1 binary64) x)) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) x)) (+.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (+.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))","(/.f64 (-.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) x) (+.f64 #s(literal 1 binary64) x)) (*.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal 3 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64))) (*.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (fma.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) (+.f64 #s(literal 1 binary64) x) (+.f64 #s(literal 1 binary64) x)) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) x))))","(/.f64 (neg.f64 (-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(/.f64 (-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (+.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (+.f64 #s(literal 1 binary64) x)))","(neg.f64 (/.f64 (-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(fma.f64 (/.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(fma.f64 (/.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(fma.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(fma.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(fma.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (/.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) (+.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(-.f64 (/.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (+.f64 #s(literal 1 binary64) x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))) #s(literal -1 binary64)))","(+.f64 (/.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (+.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(*.f64 (sqrt.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)))) (sqrt.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(*.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x))) (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x))))","(*.f64 (sqrt.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x))))","(*.f64 (sqrt.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x))) (sqrt.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) (+.f64 #s(literal 1 binary64) x))))","(*.f64 (sqrt.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)))))","(*.f64 (pow.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x))) #s(literal 1/2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)))","(*.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal 1/2 binary64)) (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) (+.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)) (pow.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) #s(literal 1/2 binary64)) (pow.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) (+.f64 #s(literal 1 binary64) x)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1/4 binary64)) (pow.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x))) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)))","(pow.f64 (pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal 4 binary64)) #s(literal 1/4 binary64))","(pow.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) x) #s(literal 1/2 binary64))","(pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal 1 binary64))","(/.f64 (sqrt.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 (neg.f64 x)))","(/.f64 (sqrt.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x) (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (*.f64 (neg.f64 x) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (*.f64 (neg.f64 x) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (*.f64 x (-.f64 x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (*.f64 x (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64)))) (sqrt.f64 (*.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (sqrt.f64 (*.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x))","(sqrt.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) x))","(fabs.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)))","(exp.f64 (fma.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1/2 binary64) (*.f64 (log1p.f64 x) #s(literal 1/2 binary64))))","(exp.f64 (fma.f64 (log1p.f64 x) #s(literal 1/2 binary64) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1/2 binary64))))","(exp.f64 (*.f64 (log.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) x)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal 1/2 binary64)) (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)))","(*.f64 (pow.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)) #s(literal -1/4 binary64)) (pow.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)) #s(literal -1/4 binary64)))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (sqrt.f64 (pow.f64 (neg.f64 x) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (pow.f64 (pow.f64 (neg.f64 x) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 x #s(literal -1/2 binary64)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x)))","(pow.f64 (exp.f64 (-.f64 (log1p.f64 x) (log.f64 x))) #s(literal 1/2 binary64))","(pow.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x) (/.f64 (+.f64 #s(literal 1 binary64) x) x)) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)) #s(literal -1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (sqrt.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64))","(pow.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)) #s(literal -1/2 binary64))","(pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal 1/2 binary64))","(/.f64 (sqrt.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (sqrt.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (sqrt.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64))) (sqrt.f64 (neg.f64 x)))","(/.f64 (sqrt.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))) (sqrt.f64 (neg.f64 (neg.f64 x))))","(/.f64 (sqrt.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64))) (sqrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 x))))","(/.f64 (sqrt.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64))) (sqrt.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(/.f64 (sqrt.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))) (sqrt.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (neg.f64 x))))","(/.f64 (sqrt.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (sqrt.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) x)))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (neg.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (fma.f64 x x #s(literal -1 binary64))) (sqrt.f64 (*.f64 x (-.f64 x #s(literal 1 binary64)))))","(/.f64 (sqrt.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (sqrt.f64 (*.f64 x (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (sqrt.f64 (neg.f64 x)))","(/.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (neg.f64 (sqrt.f64 x)))","(/.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 x (+.f64 #s(literal 1 binary64) x))))","(sqrt.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) x))","(exp.f64 (-.f64 (*.f64 (log1p.f64 x) #s(literal 1/2 binary64)) (log.f64 (sqrt.f64 x))))","(exp.f64 (fma.f64 (log1p.f64 x) #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (log.f64 x))))","(exp.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) #s(literal 1/2 binary64)))","(*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(pow.f64 (/.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 x x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (+.f64 (+.f64 #s(literal 1 binary64) x) x)) (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (*.f64 x x))) (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (+.f64 (+.f64 #s(literal 1 binary64) x) x)))","(/.f64 (-.f64 (*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))) (*.f64 (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) x) (neg.f64 x))) (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 x #s(literal -1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))) (*.f64 (-.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) x) x)) (*.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (-.f64 x #s(literal 1 binary64))) (neg.f64 x))) (*.f64 (neg.f64 (-.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64))) (*.f64 (neg.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (-.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64)) (*.f64 (neg.f64 (-.f64 x #s(literal 1 binary64))) x)) (*.f64 (neg.f64 (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (neg.f64 x))) (*.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 x #s(literal -1 binary64))) (*.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) x)) (*.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 x))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 x #s(literal -1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) x)) (*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x (neg.f64 x))) (neg.f64 x))) (*.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x (neg.f64 x))) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (*.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x (neg.f64 x))) #s(literal 1 binary64))) (*.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x (neg.f64 x))) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x (neg.f64 x))) x)) (*.f64 (+.f64 #s(literal 1 binary64) (fma.f64 x x (neg.f64 x))) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (neg.f64 x))) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) x)) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal -1 binary64) (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (neg.f64 x))) (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) x)) (*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal -1 binary64) (*.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 x))) (*.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) x)) (*.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (-.f64 x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 x x))) (neg.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 x x)) (-.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 x)))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 x x)) (+.f64 (+.f64 #s(literal 1 binary64) x) x))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (-.f64 (*.f64 x x) (*.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 x)))))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 x))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)) (neg.f64 x))","(fma.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 x))","(fma.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (neg.f64 x))","(fma.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (neg.f64 x))","(fma.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 x)) (-.f64 #s(literal 1 binary64) x))","(fma.f64 #s(literal -1 binary64) x (+.f64 #s(literal 1 binary64) x))","(fma.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (neg.f64 x))","(fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64) (neg.f64 x))","(fma.f64 (sqrt.f64 x) (sqrt.f64 x) (-.f64 #s(literal 1 binary64) x))","(fma.f64 (*.f64 x x) (pow.f64 x #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) x))","(fma.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(fma.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x) (neg.f64 x))","(fma.f64 #s(literal 1 binary64) x (-.f64 #s(literal 1 binary64) x))","(fma.f64 x #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x))","(-.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (+.f64 (+.f64 #s(literal 1 binary64) x) x)) (/.f64 (*.f64 x x) (+.f64 (+.f64 #s(literal 1 binary64) x) x)))","(-.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))))","(-.f64 (+.f64 #s(literal 1 binary64) x) x)","(+.f64 (-.f64 #s(literal 1 binary64) x) x)","(+.f64 (neg.f64 x) (+.f64 #s(literal 1 binary64) x))","(+.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(+.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 x))","(+.f64 #s(literal 1 binary64) (-.f64 x x))","(+.f64 #s(literal 1 binary64) (+.f64 x (neg.f64 x)))","(+.f64 x (-.f64 #s(literal 1 binary64) x))","(*.f64 (/.f64 (/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x))) (hypot.f64 (sqrt.f64 x) x)) (-.f64 x (+.f64 #s(literal 1 binary64) x))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x))) (hypot.f64 (sqrt.f64 x) x)) (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(*.f64 (/.f64 (/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x))) (hypot.f64 (sqrt.f64 x) x)) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (hypot.f64 (sqrt.f64 x) x)))","(*.f64 (/.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal -1 binary64)) (/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 x)))","(*.f64 (/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x))) (hypot.f64 (sqrt.f64 x) x)) (pow.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 (/.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (pow.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (neg.f64 (sqrt.f64 x))) (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (neg.f64 (sqrt.f64 x))))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (/.f64 (/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (neg.f64 (sqrt.f64 x))) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (*.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (*.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal -1 binary64)) (/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (neg.f64 (sqrt.f64 x)))))","(*.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(pow.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x))) (hypot.f64 (sqrt.f64 x) x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (/.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (/.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))) #s(literal -1 binary64))","(pow.f64 (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (/.f64 (neg.f64 (sqrt.f64 x)) (-.f64 (+.f64 #s(literal 1 binary64) x) x))) #s(literal -1 binary64))","(/.f64 (/.f64 (/.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) #s(literal -1 binary64)) (sqrt.f64 x))","(/.f64 (*.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))) (sqrt.f64 x))","(/.f64 (*.f64 #s(literal -1 binary64) (/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (neg.f64 (sqrt.f64 x)))) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (neg.f64 (sqrt.f64 x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 (*.f64 (/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (neg.f64 (sqrt.f64 x))) #s(literal -1 binary64)) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (neg.f64 (sqrt.f64 x))) #s(literal 1 binary64)) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(/.f64 (*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x))) (sqrt.f64 x))","(/.f64 (*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal 1 binary64)) (/.f64 (neg.f64 (sqrt.f64 x)) (-.f64 (+.f64 #s(literal 1 binary64) x) x)))","(/.f64 (*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (*.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (neg.f64 (sqrt.f64 x))))","(/.f64 (*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (neg.f64 (sqrt.f64 x)))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 (neg.f64 (/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x))) (hypot.f64 (sqrt.f64 x) x))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 (neg.f64 (/.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))) (sqrt.f64 x))","(/.f64 (neg.f64 (/.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (neg.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(/.f64 (*.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64))) (*.f64 (sqrt.f64 x) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(/.f64 (*.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (*.f64 (sqrt.f64 x) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 (*.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) #s(literal -1 binary64)) (*.f64 (sqrt.f64 x) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (*.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) #s(literal 1 binary64)) (*.f64 (sqrt.f64 x) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))))","(/.f64 (*.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(/.f64 (*.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal -1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (*.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64)) (*.f64 (neg.f64 (sqrt.f64 x)) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))))","(/.f64 (*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x))) (*.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (sqrt.f64 x)))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x))) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (sqrt.f64 x)))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal 1 binary64)) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (/.f64 (neg.f64 (sqrt.f64 x)) (-.f64 (+.f64 #s(literal 1 binary64) x) x))))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x))) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (sqrt.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x))) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (sqrt.f64 x)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (neg.f64 (sqrt.f64 x))))","(/.f64 (/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x))) (hypot.f64 (sqrt.f64 x) x)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(/.f64 (/.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (neg.f64 (sqrt.f64 x)))","(/.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (neg.f64 (sqrt.f64 x))))","(/.f64 (/.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (*.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 (/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (neg.f64 (sqrt.f64 x))) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(/.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (/.f64 (neg.f64 (sqrt.f64 x)) (-.f64 (+.f64 #s(literal 1 binary64) x) x)))","(/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (*.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 #s(literal -1 binary64) (*.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 #s(literal -1 binary64) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (/.f64 (neg.f64 (sqrt.f64 x)) (-.f64 (+.f64 #s(literal 1 binary64) x) x))))","(/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (*.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (*.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (/.f64 (neg.f64 (sqrt.f64 x)) (-.f64 (+.f64 #s(literal 1 binary64) x) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x))) (hypot.f64 (sqrt.f64 x) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (sqrt.f64 x)) (/.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (/.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (/.f64 (neg.f64 (sqrt.f64 x)) (-.f64 (+.f64 #s(literal 1 binary64) x) x))))","(neg.f64 (/.f64 (/.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) (sqrt.f64 x)))","(neg.f64 (*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 x))))","(neg.f64 (*.f64 (/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 x)) (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(*.f64 (pow.f64 (/.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (-.f64 x (+.f64 #s(literal 1 binary64) x))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (-.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (fma.f64 (sqrt.f64 x) x (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3/2 binary64)))) (-.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (hypot.f64 (sqrt.f64 x) x)))","(*.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (pow.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (pow.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(pow.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (neg.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) #s(literal -1 binary64))","(pow.f64 (*.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal -1 binary64))","(pow.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) #s(literal -1 binary64))","(pow.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (/.f64 #s(literal -1 binary64) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 #s(literal -1 binary64) (pow.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal -1 binary64))) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal 1 binary64)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(/.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal -1 binary64)) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(/.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (neg.f64 (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 #s(literal 1 binary64) (*.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(neg.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(neg.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))))","(exp.f64 (*.f64 (log.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 x x))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (pow.f64 (pow.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (-.f64 (+.f64 #s(literal 1 binary64) x) x))","(*.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (pow.f64 x #s(literal -1/2 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 x)))","(*.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (neg.f64 (sqrt.f64 x))))","(pow.f64 (/.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (-.f64 (+.f64 #s(literal 1 binary64) x) x)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (-.f64 (+.f64 #s(literal 1 binary64) x) x)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (/.f64 x #s(literal -1 binary64)))) x)","(/.f64 (-.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x))))) (*.f64 (sqrt.f64 x) (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3/2 binary64))))) (*.f64 (sqrt.f64 x) (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x))))))","(/.f64 (-.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (+.f64 #s(literal 0 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (neg.f64 x))) (*.f64 (sqrt.f64 x) (+.f64 #s(literal 0 binary64) (sqrt.f64 x))))","(/.f64 (-.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (neg.f64 x))) x)","(/.f64 (-.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 (neg.f64 (sqrt.f64 x)) x)) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (/.f64 (neg.f64 (sqrt.f64 x)) x)))","(/.f64 (-.f64 (*.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 x))) (pow.f64 x #s(literal 3/2 binary64))) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (sqrt.f64 x)) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (-.f64 x #s(literal 1 binary64))) (/.f64 x #s(literal -1 binary64)))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (-.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x))))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (-.f64 x #s(literal 1 binary64))) (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3/2 binary64))))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (-.f64 x #s(literal 1 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x))))))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 #s(literal 0 binary64) (sqrt.f64 x))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (-.f64 x #s(literal 1 binary64))) (neg.f64 x))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (-.f64 x #s(literal 1 binary64))) (+.f64 #s(literal 0 binary64) (sqrt.f64 x))))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (sqrt.f64 x)) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (-.f64 x #s(literal 1 binary64))) (neg.f64 x))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (-.f64 x #s(literal 1 binary64))) (sqrt.f64 x)))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (neg.f64 (sqrt.f64 x)) x)) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (-.f64 x #s(literal 1 binary64))) (/.f64 (neg.f64 (sqrt.f64 x)) x)))","(/.f64 (-.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 (sqrt.f64 x))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (-.f64 x #s(literal 1 binary64))) x)) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (-.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (sqrt.f64 x)) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (/.f64 x #s(literal -1 binary64)))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (sqrt.f64 x)))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x))))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3/2 binary64))))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x))))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 0 binary64) (sqrt.f64 x))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (neg.f64 x))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (+.f64 #s(literal 0 binary64) (sqrt.f64 x))))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (sqrt.f64 x)) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (neg.f64 x))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (sqrt.f64 x)))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 (neg.f64 (sqrt.f64 x)) x)) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) #s(literal 1 binary64))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (/.f64 (neg.f64 (sqrt.f64 x)) x)))","(/.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 x))) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) x)) (*.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (neg.f64 (sqrt.f64 x))))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (/.f64 x #s(literal -1 binary64)))) x)","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x))))) (*.f64 (sqrt.f64 x) (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3/2 binary64))))) (*.f64 (sqrt.f64 x) (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x))))))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (+.f64 #s(literal 0 binary64) (sqrt.f64 x))) (*.f64 (sqrt.f64 x) (neg.f64 x))) (*.f64 (sqrt.f64 x) (+.f64 #s(literal 0 binary64) (sqrt.f64 x))))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (neg.f64 x))) x)","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (/.f64 (neg.f64 (sqrt.f64 x)) x)) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (/.f64 (neg.f64 (sqrt.f64 x)) x)))","(/.f64 (-.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 (sqrt.f64 x))) (pow.f64 x #s(literal 3/2 binary64))) (*.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (*.f64 (neg.f64 (sqrt.f64 x)) (/.f64 x #s(literal -1 binary64)))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x))))) (*.f64 (neg.f64 (sqrt.f64 x)) (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3/2 binary64))))) (*.f64 (neg.f64 (sqrt.f64 x)) (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x))))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 #s(literal 0 binary64) (sqrt.f64 x))) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 x))) (*.f64 (neg.f64 (sqrt.f64 x)) (+.f64 #s(literal 0 binary64) (sqrt.f64 x))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 x))) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (neg.f64 (sqrt.f64 x)) x)) (*.f64 (neg.f64 (sqrt.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (/.f64 (neg.f64 (sqrt.f64 x)) x)))","(/.f64 (-.f64 (sqrt.f64 x) (*.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (+.f64 #s(literal 1 binary64) x)) (/.f64 x #s(literal -1 binary64)))) (*.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x))))) (*.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (+.f64 #s(literal 1 binary64) x)) (-.f64 #s(literal 0 binary64) (pow.f64 x #s(literal 3/2 binary64))))) (*.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (+.f64 #s(literal 1 binary64) x)) (+.f64 #s(literal 0 binary64) (+.f64 x (*.f64 #s(literal 0 binary64) (sqrt.f64 x))))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal 0 binary64) (sqrt.f64 x))) (*.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (+.f64 #s(literal 1 binary64) x)) (neg.f64 x))) (*.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (+.f64 #s(literal 1 binary64) x)) (+.f64 #s(literal 0 binary64) (sqrt.f64 x))))","(/.f64 (-.f64 (sqrt.f64 x) (*.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (+.f64 #s(literal 1 binary64) x)) (neg.f64 x))) (*.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (sqrt.f64 x)) x)) (*.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))) (*.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (+.f64 #s(literal 1 binary64) x)) (/.f64 (neg.f64 (sqrt.f64 x)) x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 x))) (*.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (+.f64 #s(literal 1 binary64) x)) x)) (*.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (+.f64 #s(literal 1 binary64) x)) (neg.f64 (sqrt.f64 x))))","(/.f64 (-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 x #s(literal -1 binary64))) (sqrt.f64 x))","(/.f64 (-.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (/.f64 x #s(literal -1 binary64))) (sqrt.f64 x))","(/.f64 (-.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (neg.f64 x)) (sqrt.f64 x))","(/.f64 (-.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x)) (sqrt.f64 x))","(/.f64 (/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal -1 binary64)) (sqrt.f64 x))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 x x)) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (+.f64 (+.f64 #s(literal 1 binary64) x) x))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))))","(/.f64 (-.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) x) x) (fma.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (neg.f64 (sqrt.f64 x))))","(/.f64 (-.f64 (pow.f64 (/.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (sqrt.f64 x)) #s(literal 3 binary64)) (neg.f64 (pow.f64 x #s(literal 3/2 binary64)))) (+.f64 (/.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) x) (+.f64 x (*.f64 (/.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (sqrt.f64 x)) (neg.f64 (sqrt.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x))) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 x x)) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 #s(literal 1 binary64) x) x) (neg.f64 (sqrt.f64 x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64))) (neg.f64 (sqrt.f64 x))))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 (sqrt.f64 x))) (neg.f64 (pow.f64 x #s(literal 3/2 binary64)))) x)","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)) (*.f64 x x)) (*.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (+.f64 #s(literal 1 binary64) x) x)))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (*.f64 (neg.f64 (sqrt.f64 x)) (fma.f64 x (+.f64 (+.f64 #s(literal 1 binary64) x) x) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (sqrt.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (-.f64 (+.f64 #s(literal 1 binary64) x) x))))","(/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (neg.f64 (sqrt.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (-.f64 (+.f64 #s(literal 1 binary64) x) x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 (sqrt.f64 x)) (-.f64 (+.f64 #s(literal 1 binary64) x) x)))","(neg.f64 (/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 x)))","(fma.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 x)) (sqrt.f64 x))","(-.f64 (/.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (sqrt.f64 x)) (neg.f64 (sqrt.f64 x)))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x) (sqrt.f64 x)))","(exp.f64 (*.f64 (log.f64 (/.f64 (neg.f64 (sqrt.f64 x)) (-.f64 (+.f64 #s(literal 1 binary64) x) x))) #s(literal -1 binary64)))","(+.f64 (/.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (sqrt.f64 x)) (sqrt.f64 x))","(*.f64 (pow.f64 (/.f64 x (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (-.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (/.f64 #s(literal 3/8 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/4 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) (pow.f64 (neg.f64 x) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)))","(*.f64 (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x) #s(literal 1 binary64))","(*.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))","(pow.f64 (/.f64 (/.f64 x (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 x (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 x)) (*.f64 x (/.f64 #s(literal -3/8 binary64) x))) (*.f64 x (neg.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 x (neg.f64 x))) (*.f64 x #s(literal -3/8 binary64))) (*.f64 x (*.f64 x (neg.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 x x)) (*.f64 x #s(literal 3/8 binary64))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 x (/.f64 #s(literal 3/8 binary64) x))) x) (*.f64 x (/.f64 x (/.f64 #s(literal 3/8 binary64) x))))","(/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 x (*.f64 x #s(literal 8/3 binary64)))) x) (*.f64 x (*.f64 x (*.f64 x #s(literal 8/3 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 x)) (*.f64 (neg.f64 x) (/.f64 #s(literal -3/8 binary64) x))) (*.f64 x x))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 x (neg.f64 x))) (*.f64 (neg.f64 x) #s(literal -3/8 binary64))) (*.f64 (neg.f64 x) (*.f64 x (neg.f64 x))))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) x) (*.f64 (neg.f64 x) (/.f64 #s(literal 3/8 binary64) x))) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 x x)) (*.f64 (neg.f64 x) #s(literal 3/8 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 x (/.f64 #s(literal 3/8 binary64) x))) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) (/.f64 x (/.f64 #s(literal 3/8 binary64) x))))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 x (*.f64 x #s(literal 8/3 binary64)))) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) (*.f64 x (*.f64 x #s(literal 8/3 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (/.f64 x #s(literal 1/2 binary64)) (/.f64 #s(literal -3/8 binary64) x))) (*.f64 (/.f64 x #s(literal 1/2 binary64)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x (neg.f64 x))) (*.f64 (/.f64 x #s(literal 1/2 binary64)) #s(literal -3/8 binary64))) (*.f64 (/.f64 x #s(literal 1/2 binary64)) (*.f64 x (neg.f64 x))))","(/.f64 (-.f64 x (*.f64 (/.f64 x #s(literal 1/2 binary64)) (/.f64 #s(literal 3/8 binary64) x))) (*.f64 (/.f64 x #s(literal 1/2 binary64)) x))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (/.f64 x #s(literal 1/2 binary64)) #s(literal 3/8 binary64))) (*.f64 (/.f64 x #s(literal 1/2 binary64)) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 x (/.f64 #s(literal 3/8 binary64) x))) (*.f64 (/.f64 x #s(literal 1/2 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 x #s(literal 1/2 binary64)) (/.f64 x (/.f64 #s(literal 3/8 binary64) x))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x (*.f64 x #s(literal 8/3 binary64)))) (*.f64 (/.f64 x #s(literal 1/2 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 x #s(literal 1/2 binary64)) (*.f64 x (*.f64 x #s(literal 8/3 binary64)))))","(/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 #s(literal -3/8 binary64) x)) (neg.f64 x))","(/.f64 (*.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 2 binary64))) (pow.f64 x #s(literal -1 binary64))) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 3 binary64))) (pow.f64 x #s(literal -1 binary64))) (fma.f64 (/.f64 #s(literal 3/8 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/4 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (pow.f64 (/.f64 (/.f64 #s(literal 3/8 binary64) x) x) #s(literal 2 binary64))) (+.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 (/.f64 #s(literal 3/8 binary64) x) x)))","(/.f64 (-.f64 (*.f64 #s(literal 1/8 binary64) (pow.f64 x #s(literal -3 binary64))) (/.f64 #s(literal 27/512 binary64) (pow.f64 x #s(literal 6 binary64)))) (+.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (/.f64 #s(literal 3/8 binary64) x) x) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 (/.f64 #s(literal 3/8 binary64) x) x)))))","(/.f64 (neg.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x))) (neg.f64 (neg.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) #s(literal 1 binary64)) x)","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x))) (neg.f64 x))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x))) x)","(/.f64 (*.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) (neg.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) x))","(/.f64 (*.f64 (-.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (/.f64 #s(literal 3/8 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/4 binary64)) (neg.f64 x)))","(/.f64 (*.f64 (-.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (/.f64 #s(literal 3/8 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/4 binary64)) x))","(/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 x (/.f64 #s(literal 3/8 binary64) x))) (*.f64 x x))","(/.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 2 binary64))) (*.f64 x (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/8 binary64) (pow.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 3 binary64))) (*.f64 x (fma.f64 (/.f64 #s(literal 3/8 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) #s(literal 1/4 binary64))))","(/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)))))","(/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 x (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x))))","(neg.f64 (/.f64 (+.f64 #s(literal -1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x))","(fma.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal -1 binary64)) (neg.f64 (/.f64 (/.f64 #s(literal 3/8 binary64) x) x)))","(-.f64 (/.f64 #s(literal 1/2 binary64) x) (/.f64 (/.f64 #s(literal 3/8 binary64) x) x))","(exp.f64 (*.f64 (log.f64 (/.f64 x (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)))) #s(literal -1 binary64)))","(+.f64 (/.f64 #s(literal 1/2 binary64) x) (neg.f64 (/.f64 (/.f64 #s(literal 3/8 binary64) x) x)))","(*.f64 #s(literal -1 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(pow.f64 (/.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))))","(/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x))))","(neg.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))","(-.f64 #s(literal 0 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)))) #s(literal -1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":362.553955078125,"type":"rewrite"},{"compiler":[[34423,3878]],"memory":[[2142496,98250048]],"time":178.308837890625,"type":"eval"},{"alts":[["(/.f64 (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","fresh",0.5162745123643053,"binary64"],["(/.f64 (-.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64)))","done",41.60961753637098,"binary64"],["(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (*.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","fresh",40.556066420468795,"binary64"],["(/.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (neg.f64 (sqrt.f64 x))))","fresh",40.349772466619825,"binary64"],["(/.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))","fresh",41.59960488338494,"binary64"],["(/.f64 #s(approx (- (* (sqrt (/ (+ x 1) x)) (sqrt (+ x 1))) (sqrt (+ x 1))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (+.f64 x #s(literal 1 binary64)))","fresh",0.8855606855697435,"binary64"],["(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","done",0.3952199522072183,"binary64"],["(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(approx (- 1 (/ (- 1/2 (/ 3/8 x)) x)) (/.f64 (/.f64 (fma.f64 (-.f64 x #s(literal 1/2 binary64)) x #s(literal 3/8 binary64)) x) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","fresh",30.849474162873467,"binary64"],["(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(literal 1 binary64) x)) (+.f64 (/.f64 x (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","fresh",0.9890456190526672,"binary64"],["(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(literal 1 binary64) x)) #s(approx (+ (sqrt x) (sqrt (+ x 1))) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))))","fresh",36.74537204435044,"binary64"],["(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(literal 1 binary64) x)) #s(approx (+ (sqrt x) (sqrt (+ x 1))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x))))","fresh",0.9707781548540274,"binary64"],["(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (*.f64 (/.f64 (sqrt.f64 x) (neg.f64 x)) (/.f64 (sqrt.f64 x) (neg.f64 x)))) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","fresh",1.0994544313663712,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (-.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64))))","fresh",41.59339137092963,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt x)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/16 binary64) (*.f64 x x)) #s(literal 1/2 binary64)) (/.f64 #s(literal 1/8 binary64) x)) x))))","fresh",0.831684352608334,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt x)) (/.f64 #s(literal 1/2 binary64) x))))","fresh",1.3634950152255245,"binary64"],["(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))) (sqrt.f64 x)))","fresh",0.87653584768909,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","done",41.62696195065793,"binary64"],["(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (/.f64 #s(approx (- (+ x 1) x) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 x))))","fresh",0.5652378051370305,"binary64"],["(*.f64 #s(approx (/ (/ -1 (sqrt (+ x 1))) (+ (sqrt (+ x 1)) (sqrt x))) (/.f64 (-.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) x)) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 x))))","fresh",40.59882744122052,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal -1/2 binary64)) x) x))","fresh",1.0131720090172363,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (/.f64 x (sqrt.f64 x)) x))","fresh",60.41744178309373,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal -1/2 binary64)) (*.f64 x x)))","fresh",12.128712791431951,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (sqrt.f64 x) x))","done",60.41744178309373,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 x)))","done",60.41744178309373,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","done",11.16868038358054,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -1/2 binary64))))","fresh",11.154788616873093,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (sqrt (/ 1 x)) (sqrt x)) (neg.f64 (sqrt.f64 x))) (*.f64 x x))))","fresh",12.140709676597666,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 x (*.f64 x x))))","fresh",41.950404582803976,"binary64"],["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","done",60.41744178309373,"binary64"]],"compiler":[[1582,314],[26,18],[20,9],[29,20],[23,12],[17,10],[27,16],[33,23],[44,30],[27,18],[30,19],[30,20],[33,19],[15,9],[31,22],[21,15],[28,19],[11,8],[26,16],[32,22],[24,17],[18,12],[24,17],[16,11],[16,12],[25,18],[24,18],[29,19],[18,12],[16,12]],"count":[[1058,29]],"kept":[{"done":[4,4],"fresh":[20,12],"new":[1029,10],"picked":[5,3]}],"memory":[[-1974928,55973264]],"min-error":[[0.0,"binary64"]],"time":50.07421875,"type":"prune"},{"accuracy":[0.3952199522072183],"baseline":[0.3952199522072183],"branch":[["x",0.3952199522072183,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))",0.3952199522072183,1,"binary64"]],"compiler":[[1,1],[11,8]],"count":[[60,1]],"inputs":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (sqrt.f64 x) x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 x (*.f64 x x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (/.f64 x (sqrt.f64 x)) x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (sqrt (/ 1 x)) (sqrt x)) (neg.f64 (sqrt.f64 x))) (*.f64 x x))))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(literal 1 binary64) x)) #s(approx (+ (sqrt x) (sqrt (+ x 1))) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(literal 1 binary64) x)) #s(approx (+ (sqrt x) (sqrt (+ x 1))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x))))","(/.f64 #s(approx (- (* (sqrt (/ (+ x 1) x)) (sqrt (+ x 1))) (sqrt (+ x 1))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (+.f64 x #s(literal 1 binary64)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal -1/2 binary64)) (*.f64 x x)))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt x)) (/.f64 #s(literal 1/2 binary64) x))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (*.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) x)) x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal -1/2 binary64)) x) x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 x x))))","#s(approx (/ 1 (/ (sqrt (+ x 1)) (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt x)))) (/.f64 (fma.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x)))","(*.f64 #s(approx (/ (/ -1 (sqrt (+ x 1))) (+ (sqrt (+ x 1)) (sqrt x))) (/.f64 (-.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) x)) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 x))))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(literal 1 binary64) x)) (+.f64 (/.f64 x (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt x)) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/8 binary64) x)) x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (-.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64))))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x) #s(literal 1/2 binary64)))))","(/.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64)))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(approx (* (- (+ x 1) x) (/ -1 (sqrt (+ x 1)))) (neg.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt x)) (/.f64 (-.f64 (+.f64 (/.f64 #s(literal 1/16 binary64) (*.f64 x x)) #s(literal 1/2 binary64)) (/.f64 #s(literal 1/8 binary64) x)) x))))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(approx (+ (* (/ 1 x) (+ (/ 3/8 x) -1/2)) 1) (/.f64 (/.f64 (fma.f64 (-.f64 x #s(literal 1/2 binary64)) x #s(literal 3/8 binary64)) x) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(approx (- 1 (/ (- 1/2 (/ 3/8 x)) x)) (/.f64 (/.f64 (fma.f64 (-.f64 x #s(literal 1/2 binary64)) x #s(literal 3/8 binary64)) x) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (fma.f64 (/.f64 #s(literal 1 binary64) x) (+.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) x) x)) (*.f64 (*.f64 (+.f64 (sqrt.f64 (+.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (sqrt.f64 (+.f64 #s(literal 1 binary64) x))) (neg.f64 (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 x))))","(/.f64 (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (*.f64 (/.f64 (sqrt.f64 x) (neg.f64 x)) (/.f64 (sqrt.f64 x) (neg.f64 x)))) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (/.f64 #s(approx (- (+ x 1) x) #s(literal 1 binary64)) (neg.f64 (sqrt.f64 x))))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 x))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) (*.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (neg.f64 (sqrt.f64 x))))","(/.f64 (neg.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))","(/.f64 (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x)) (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal 1/2 binary64) (sqrt.f64 x) (/.f64 #s(literal -1/8 binary64) (sqrt.f64 x))) x))) (sqrt.f64 x)))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)) (sqrt.f64 x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal 1/2 binary64)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (/.f64 #s(approx (- (sqrt (+ x 1)) (sqrt x)) (/.f64 (fma.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) x)) (*.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 x))))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (pow.f64 x #s(literal -2 binary64))) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (pow.f64 (fma.f64 x x x) #s(literal -1/2 binary64))) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (hypot.f64 (sqrt.f64 x) x) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) x) (-.f64 (pow.f64 x #s(literal -1 binary64)) x)) (*.f64 x (/.f64 (+.f64 x #s(literal 1 binary64)) (sqrt.f64 x)))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(literal -1/2 binary64) #s(approx (/ (- (sqrt (/ 1 x)) (sqrt x)) (* x x)) (/.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x))) x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) #s(approx (* (/ (/ -1/2 x) x) (- (sqrt (/ 1 x)) (sqrt x))) (/.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (neg.f64 x))))","(/.f64 #s(literal 1 binary64) #s(approx (/ (sqrt (+ x 1)) (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt x))) (*.f64 (fma.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64))))) (*.f64 x x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (fma.f64 (fma.f64 #s(literal 1/4 binary64) x #s(literal 1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))) (sqrt.f64 x)))) (*.f64 x x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))) (+.f64 (+.f64 (pow.f64 x #s(literal -1 binary64)) x) #s(literal 1 binary64))))"]],"memory":[[-255616,16109600]],"oracle":[62.21735344107992],"outputs":[["(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))"]],"repr":["binary64"],"time":28.873779296875,"times":[[13.322021484375,"x"],[11.299072265625,"(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))"]],"type":"regimes"},{"accuracy":[0.48673009905357767],"baseline":[0.48673009905357767],"branch":[["x",0.48673009905357767,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))",0.48673009905357767,1,"binary64"]],"compiler":[[1,1],[11,8]],"count":[[30,1]],"inputs":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (sqrt.f64 x) x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 x (*.f64 x x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (/.f64 x (sqrt.f64 x)) x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (sqrt (/ 1 x)) (sqrt x)) (neg.f64 (sqrt.f64 x))) (*.f64 x x))))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(literal 1 binary64) x)) #s(approx (+ (sqrt x) (sqrt (+ x 1))) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(literal 1 binary64) x)) #s(approx (+ (sqrt x) (sqrt (+ x 1))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x))))","(/.f64 #s(approx (- (* (sqrt (/ (+ x 1) x)) (sqrt (+ x 1))) (sqrt (+ x 1))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (+.f64 x #s(literal 1 binary64)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal -1/2 binary64)) (*.f64 x x)))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt x)) (/.f64 #s(literal 1/2 binary64) x))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (*.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) x)) x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal -1/2 binary64)) x) x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 x x))))","#s(approx (/ 1 (/ (sqrt (+ x 1)) (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt x)))) (/.f64 (fma.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x)))","(*.f64 #s(approx (/ (/ -1 (sqrt (+ x 1))) (+ (sqrt (+ x 1)) (sqrt x))) (/.f64 (-.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) x)) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 x))))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(literal 1 binary64) x)) (+.f64 (/.f64 x (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt x)) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/8 binary64) x)) x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (-.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64))))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x))) (*.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (neg.f64 (sqrt.f64 x))))","(/.f64 (*.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal -1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64))))) #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x) #s(literal 1/2 binary64)))))","(/.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 x))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64)))"]],"memory":[[1371760,9379280]],"oracle":[61.07486024669125],"outputs":[["(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))"]],"repr":["binary64"],"time":17.230224609375,"times":[[7.75390625,"x"],[7.55810546875,"(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))"]],"type":"regimes"},{"accuracy":[0.8855606855697435],"baseline":[0.8855606855697435],"branch":[["x",0.8855606855697435,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))",0.8855606855697435,1,"binary64"]],"compiler":[[1,1],[11,8]],"count":[[25,1]],"inputs":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (sqrt.f64 x) x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 x (*.f64 x x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (/.f64 x (sqrt.f64 x)) x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (sqrt (/ 1 x)) (sqrt x)) (neg.f64 (sqrt.f64 x))) (*.f64 x x))))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(literal 1 binary64) x)) #s(approx (+ (sqrt x) (sqrt (+ x 1))) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(literal 1 binary64) x)) #s(approx (+ (sqrt x) (sqrt (+ x 1))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x))))","(/.f64 #s(approx (- (* (sqrt (/ (+ x 1) x)) (sqrt (+ x 1))) (sqrt (+ x 1))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (+.f64 x #s(literal 1 binary64)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal -1/2 binary64)) (*.f64 x x)))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt x)) (/.f64 #s(literal 1/2 binary64) x))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (+.f64 x #s(literal 1 binary64)) x)) (*.f64 #s(approx (* (+ (sqrt x) (sqrt (+ x 1))) (neg (sqrt x))) (fma.f64 #s(literal -2 binary64) x #s(literal -1/2 binary64))) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(literal 1 binary64) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 #s(literal -1/2 binary64) x) (/.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) (/.f64 #s(literal -1/2 binary64) x)) x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (/.f64 (*.f64 (/.f64 (-.f64 #s(literal 1 binary64) x) (sqrt.f64 x)) #s(literal -1/2 binary64)) x) x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x)) (*.f64 x x))))","#s(approx (/ 1 (/ (sqrt (+ x 1)) (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt x)))) (/.f64 (fma.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 x))) (*.f64 x x)))","(*.f64 #s(approx (/ (/ -1 (sqrt (+ x 1))) (+ (sqrt (+ x 1)) (sqrt x))) (/.f64 (-.f64 (/.f64 #s(literal 3/8 binary64) x) #s(literal 1/2 binary64)) x)) (/.f64 (-.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (sqrt.f64 x))))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(literal 1 binary64) x)) (+.f64 (/.f64 x (sqrt.f64 x)) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) #s(approx (/ (- (sqrt (+ x 1)) (sqrt x)) (sqrt x)) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 1/8 binary64) x)) x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 (/.f64 (/.f64 #s(literal -1/2 binary64) x) x) (-.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) x)) (sqrt.f64 x))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (+.f64 x #s(literal 1 binary64))) (-.f64 (sqrt.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64))))"]],"memory":[[38000,8111696]],"oracle":[61.07486024669125],"outputs":[["(/.f64 #s(approx (- (* (sqrt (/ (+ x 1) x)) (sqrt (+ x 1))) (sqrt (+ x 1))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (+.f64 x #s(literal 1 binary64)))"]],"repr":["binary64"],"time":13.576904296875,"times":[[6.601806640625,"x"],[5.41796875,"(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))"]],"type":"regimes"},{"accuracy":[0.9707781548540272],"baseline":[0.9707781548540274],"branch":[["x",0.9707781548540274,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))",0.9707781548540272,1,"binary64"]],"compiler":[[1,1],[11,8]],"count":[[8,1]],"inputs":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (sqrt.f64 x) x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 x (*.f64 x x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (/.f64 x (sqrt.f64 x)) x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (sqrt (/ 1 x)) (sqrt x)) (neg.f64 (sqrt.f64 x))) (*.f64 x x))))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(literal 1 binary64) x)) #s(approx (+ (sqrt x) (sqrt (+ x 1))) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(literal 1 binary64) x)) #s(approx (+ (sqrt x) (sqrt (+ x 1))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x))))"]],"memory":[[4316800,4316800]],"oracle":[60.41744178309373],"outputs":[["(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(literal 1 binary64) x)) #s(approx (+ (sqrt x) (sqrt (+ x 1))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x))))"]],"repr":["binary64"],"time":5.39208984375,"times":[[2.484130859375,"x"],[2.087890625,"(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))"]],"type":"regimes"},{"accuracy":[10.88764731394686],"baseline":[12.140709676597666],"branch":[["x",10.88764731394686,2,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))",12.140709676597664,1,"binary64"]],"compiler":[[1,1],[11,8]],"count":[[7,2]],"inputs":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (sqrt.f64 x) x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 x (*.f64 x x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (/.f64 x (sqrt.f64 x)) x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (sqrt (/ 1 x)) (sqrt x)) (neg.f64 (sqrt.f64 x))) (*.f64 x x))))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(literal 1 binary64) x)) #s(approx (+ (sqrt x) (sqrt (+ x 1))) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))))"]],"memory":[[-5512496,4229040]],"oracle":[60.41744178309373],"outputs":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (sqrt (/ 1 x)) (sqrt x)) (neg.f64 (sqrt.f64 x))) (*.f64 x x))))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(literal 1 binary64) x)) #s(approx (+ (sqrt x) (sqrt (+ x 1))) (+.f64 (sqrt.f64 x) #s(literal 1 binary64))))"]],"repr":["binary64"],"time":5.61376953125,"times":[[2.6240234375,"x"],[2.1640625,"(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))"]],"type":"regimes"},{"accuracy":[12.140709676597659],"baseline":[12.140709676597666],"branch":[["x",12.140709676597659,1,"binary64"]],"compiler":[[1,1]],"count":[[6,1]],"inputs":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (sqrt.f64 x) x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 x (*.f64 x x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (/.f64 x (sqrt.f64 x)) x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (sqrt (/ 1 x)) (sqrt x)) (neg.f64 (sqrt.f64 x))) (*.f64 x x))))"]],"memory":[[2404000,2404000]],"oracle":[60.41744178309373],"outputs":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (sqrt (/ 1 x)) (sqrt x)) (neg.f64 (sqrt.f64 x))) (*.f64 x x))))"]],"repr":["binary64"],"time":2.60302734375,"times":[[2.098876953125,"x"]],"type":"regimes"},{"accuracy":[41.95040458280397],"baseline":[41.950404582803976],"branch":[["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))",41.95040458280397,1,"binary64"],["x",41.95040458280398,1,"binary64"]],"compiler":[[11,8],[1,1]],"count":[[5,1]],"inputs":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (sqrt.f64 x) x))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 x (*.f64 x x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (/.f64 x (sqrt.f64 x)) x))"]],"memory":[[3654352,3654352]],"oracle":[60.41744178309373],"outputs":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 x (*.f64 x x))))"]],"repr":["binary64"],"time":6.34716796875,"times":[[2.89697265625,"(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))"],[2.506103515625,"x"]],"type":"regimes"},{"accuracy":[60.4174417830937],"baseline":[60.41744178309373],"branch":[["x",60.4174417830937,1,"binary64"],["(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))",60.41744178309373,1,"binary64"]],"compiler":[[1,1],[11,8]],"count":[[3,1]],"inputs":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (/.f64 (sqrt.f64 x) x))"]],"link":["."],"memory":[[-4988208,3260256]],"name":["2isqrt (example 3.6)"],"oracle":[60.41744178309373],"outputs":[["#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))"]],"repr":["binary64"],"time":5.98583984375,"times":[[2.35302734375,"x"],[2.651123046875,"(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 x)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))"]],"type":"regimes"},{"bstep":[[20.14599609375,3.3053843741921246e+153,1.5786088067184206e+155]],"compiler":[[30,20],[29,20],[30,20],[29,20],[30,20],[29,20],[30,20],[29,20],[30,20],[29,20],[30,20],[29,20],[30,20],[29,20],[13,11],[1,1]],"memory":[[-1837120,6147680]],"method":["binary-search"],"mixsample":[[2.2900390625,"adjust",800],[1.88134765625,"ival-div",0],[0.666748046875,"ival-add",0],[1.6201171875,"ival-div",400],[0.041748046875,"ival-assert",0],[1.144775390625,"ival-sub",0],[0.556396484375,"ival-add",400],[0.093017578125,"ival-true",0],[1.756103515625,"ival-sqrt",0],[0.07666015625,"exact",0],[1.829345703125,"ival-sqrt",400]],"outcomes":[[15.39990234375,1,"valid",112]],"stop":[["narrow-enough",1]],"time":23.59912109375,"type":"bsearch"},{"egraph":[[6,5695,218,0.028316008],[5,2195,218,0.022007225],[4,457,218,0.014501047],[3,237,218,0.004177563],[2,145,234,0.001736199],[1,94,245,0.001589513],[0,66,245,0.000963302]],"inputs":[["(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(approx (- (* (sqrt (/ (+ x 1) x)) (sqrt (+ x 1))) (sqrt (+ x 1))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (+.f64 x #s(literal 1 binary64)))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(literal 1 binary64) x)) #s(approx (+ (sqrt x) (sqrt (+ x 1))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x))))","(if (<=.f64 x #s(literal 13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) #s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (sqrt (/ 1 x)) (sqrt x)) (neg.f64 (sqrt.f64 x))) (*.f64 x x)))) (/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(literal 1 binary64) x)) #s(approx (+ (sqrt x) (sqrt (+ x 1))) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (sqrt (/ 1 x)) (sqrt x)) (neg.f64 (sqrt.f64 x))) (*.f64 x x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 x (*.f64 x x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))"]],"memory":[[3883792,11567152]],"method":["egg-herbie"],"outputs":[["(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (/.f64 #s(literal 3/8 binary64) x)) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) x)) x)) (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(approx (- (* (sqrt (/ (+ x 1) x)) (sqrt (+ x 1))) (sqrt (+ x 1))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))) (+.f64 x #s(literal 1 binary64)))","(/.f64 #s(approx (- (* (sqrt (/ (+ x 1) x)) (sqrt (+ x 1))) (sqrt (+ x 1))) (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (pow.f64 x #s(literal -1 binary64))))) (+.f64 x #s(literal 1 binary64)))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(literal 1 binary64) x)) #s(approx (+ (sqrt x) (sqrt (+ x 1))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x))))","(/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (pow.f64 x #s(literal -1 binary64))) #s(approx (+ (sqrt x) (sqrt (+ x 1))) (*.f64 #s(literal 2 binary64) (sqrt.f64 x))))","(if (<=.f64 x #s(literal 13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) #s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (sqrt (/ 1 x)) (sqrt x)) (neg.f64 (sqrt.f64 x))) (*.f64 x x)))) (/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (/.f64 #s(literal 1 binary64) x)) #s(approx (+ (sqrt x) (sqrt (+ x 1))) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))))","(if (<=.f64 x #s(literal 13500000000000000275507010685175621526490118987092636456657125042259125821644957267949903389666459196246900088209596760608108317076954234449082739494748160 binary64)) #s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (sqrt (/ 1 x)) (sqrt x)) (neg.f64 (sqrt.f64 x))) (*.f64 x x)))) (/.f64 #s(approx (* (- (+ x 1) x) (pow (+ (* x x) x) -1/2)) (pow.f64 x #s(literal -1 binary64))) #s(approx (+ (sqrt x) (sqrt (+ x 1))) (+.f64 (sqrt.f64 x) #s(literal 1 binary64)))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (*.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (- (sqrt (/ 1 x)) (sqrt x)) (neg.f64 (sqrt.f64 x))) (*.f64 x x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 x (*.f64 x x))))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) x)))","#s(approx (- (/ 1 (sqrt x)) (/ 1 (sqrt (+ x 1)))) (sqrt.f64 (pow.f64 x #s(literal -1 binary64))))"]],"stop":[["node limit",1]],"time":94.9130859375,"type":"simplify"},{"compiler":[[245,69]],"memory":[[1834704,1834704]],"stop":[["fuel",1]],"time":2.7109375,"type":"soundness"},{"compiler":[[245,69],[245,69],[9,7],[9,7],[11,8],[11,8]],"memory":[[-5305712,32333632]],"remove-preprocessing":[[],[],[],[],[],[],[],[],[]],"time":58.912841796875,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.02099609375,"type":"end"}]