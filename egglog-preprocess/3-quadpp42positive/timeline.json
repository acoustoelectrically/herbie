[{"memory":[[20128,20128]],"time":0.0390625,"type":"start"},{"compiler":[[19,16]],"memory":[[-5082464,44202992]],"method":["search"],"sampling":[[12,{"invalid":0.16382229139981064,"precondition":0.0014641286106780171,"unknown":0.2467085697866196,"valid":0.5880050102028918}],[11,{"invalid":0.1404191069141234,"precondition":0.0014641286106780171,"unknown":0.29058954069728316,"valid":0.5675272237779154}],[10,{"invalid":0.13261804541889433,"precondition":0.0014641286106780171,"unknown":0.3627493595281521,"valid":0.5031684664422755}],[9,{"invalid":0.08581167644751986,"precondition":0.0014641286106780171,"unknown":0.4290583822375993,"valid":0.48366581270420284}],[8,{"invalid":0.062408491961832624,"precondition":0.0014641286106780171,"unknown":0.48366581270420284,"valid":0.4524615667232865}],[7,{"invalid":0.062408491961832624,"precondition":0.0014641286106780171,"unknown":0.5616764276564936,"valid":0.37445095177099574}],[6,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.6240849196183262,"valid":0.37445095177099574}],[5,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.6240849196183262,"valid":0.37445095177099574}],[4,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.7489019035419915,"valid":0.2496339678473305}],[3,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[2,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}]],"time":155.509033203125,"type":"analyze"},{"bogosity":[{"infinite":0.061085445484574445,"invalid":0.2502844798156623,"precondition":0.0014641286106780171,"valid":0.6871659460890852}],"memory":[[23405888,448152448]],"mixsample":[[8.2705078125,"ival-sub",1200],[0.27001953125,"ival-sub",4800],[143.712890625,"ival-div",0],[105.26513671875,"adjust",800],[5.41064453125,"ival-mult",1200],[0.0478515625,"ival-div",400],[3.163818359375,"ival-sub",1600],[4.8134765625,"ival-assert",0],[0.057373046875,"ival-sub",3600],[0.678955078125,"ival-sqrt",4800],[14.9814453125,"ival-sqrt",1200],[72.9521484375,"ival-sub",0],[98.01416015625,"ival-sqrt",0],[6.56494140625,"ival-sub",400],[6.786865234375,"ival-mult",800],[99.69189453125,"ival-add",0],[0.70703125,"ival-sub",4400],[0.011962890625,"ival-sqrt",2800],[6.721923828125,"ival-sub",800],[0.955322265625,"ival-mult",1600],[0.037109375,"ival-add",400],[4.77099609375,"adjust",2800],[0.139892578125,"ival-sqrt",3600],[0.53369140625,"ival-sub",4000],[8.711181640625,"ival-sqrt",400],[6.1494140625,"ival-sqrt",2000],[0.149658203125,"ival-mult",2000],[3.232666015625,"ival-sub",2000],[11.796630859375,"ival-sqrt",800],[0.790283203125,"ival-sqrt",4000],[1.602783203125,"ival-sqrt",4400],[33.333251953125,"adjust",2000],[4.335693359375,"ival-sub",2400],[5.91943359375,"ival-sqrt",1600],[334.943115234375,"ival-mult",0],[7.234619140625,"ival-mult",400],[0.013916015625,"ival-div",800],[10.45556640625,"ival-true",0],[7.734375,"ival-sqrt",2400],[0.006103515625,"ival-sub",2800],[0.010009765625,"ival-add",800],[14.15478515625,"exact",0],[88.70361328125,"ival-neg",0]],"outcomes":[[304.981689453125,1,"valid",1339],[118.99951171875,0,"invalid",954],[356.919921875,2,"valid",1159],[73.57958984375,3,"valid",186],[686.447265625,0,"valid",5572]],"time":2109.64501953125,"type":"sample"},{"compiler":[[17,14],[72,16],[72,16]],"confusion":[[124,1,15,116]],"explanations":[["/.f64","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","n/o",1,0,[["(*.f64 #s(literal 2 binary64) a)","overflow",1]],[[]]],["-.f64","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","nan-rescue",2,0,[["(*.f64 b b)","overflow",81],["(*.f64 #s(literal 4 binary64) (*.f64 a c))","overflow",24],["(*.f64 a c)","overflow",24]],[[1,2,1]]],["sqrt.f64","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","uflow-rescue",5,0,[["(*.f64 b b)","underflow",48],["(*.f64 #s(literal 4 binary64) (*.f64 a c))","underflow",42],["(*.f64 a c)","underflow",42],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","underflow",5]],[[1,2]]],["/.f64","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","u/n",15,0,[["(*.f64 b b)","underflow",48],["(*.f64 #s(literal 4 binary64) (*.f64 a c))","underflow",42],["(+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","underflow",27],["(*.f64 a c)","underflow",42],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","underflow",5]],[[]]],["+.f64","(+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","cancellation",55,0,[],[[1]]],["sqrt.f64","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","oflow-rescue",97,0,[["(*.f64 b b)","overflow",81],["(*.f64 #s(literal 4 binary64) (*.f64 a c))","overflow",24],["(*.f64 a c)","overflow",24],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","overflow",97]],[[1,2]]]],"fperrors":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",16,0,false,0,false],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))",2,0,false,0,false],["(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))",103,0,false,1,[1.5250316439499783e-290,-2.5613947582151125e-158,-1.9032505304527158e-230]],["(+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))",55,0,false,0,false],["a",0,0,false,0,false],["(*.f64 #s(literal 4 binary64) (*.f64 a c))",0,0,false,0,false],["(*.f64 a c)",0,0,false,0,false],["#s(literal 4 binary64)",0,0,false,0,false],["(*.f64 b b)",0,0,false,0,false],["(*.f64 #s(literal 2 binary64) a)",0,0,false,0,false],["c",0,0,false,0,false],["#s(literal 2 binary64)",0,0,false,0,false],["(neg.f64 b)",0,0,false,0,false],["b",0,0,false,0,false]],"freqs":[[3,1],[2,34],[1,104],[0,117]],"maybe-confusion":[[124,0,1,15,0,116]],"memory":[[-7056,88589216]],"mixsample":[[0.462646484375,"ival-sub",1200],[4.80419921875,"adjust",800],[6.708251953125,"ival-div",0],[0.035888671875,"ival-sub",4800],[0.294189453125,"ival-mult",1200],[0.17236328125,"ival-sub",1600],[0.27001953125,"ival-assert",0],[0.009765625,"ival-sub",3600],[0.75048828125,"ival-sqrt",1200],[3.123779296875,"ival-sub",0],[0.072265625,"ival-sqrt",4800],[4.528564453125,"ival-sqrt",0],[0.28857421875,"ival-sub",400],[0.017578125,"ival-sqrt",2800],[0.6552734375,"ival-mult",800],[4.90869140625,"ival-add",0],[0.097412109375,"ival-sub",4400],[0.332763671875,"ival-sub",800],[0.0869140625,"ival-mult",1600],[0.467529296875,"adjust",2800],[0.02294921875,"ival-sqrt",3600],[0.400634765625,"ival-sqrt",400],[0.276123046875,"ival-sqrt",2000],[0.01220703125,"ival-mult",2000],[0.688232421875,"ival-sqrt",800],[0.13916015625,"ival-sub",2000],[0.224853515625,"ival-sqrt",4400],[1.6904296875,"adjust",2000],[0.33349609375,"ival-sub",2400],[15.2998046875,"ival-mult",0],[0.25439453125,"ival-sqrt",1600],[0.32373046875,"ival-mult",400],[0.623779296875,"ival-sqrt",2400],[0.609619140625,"ival-true",0],[0.010009765625,"ival-sub",2800],[0.661376953125,"exact",0],[2.760498046875,"ival-neg",0]],"outcomes":[[15.85888671875,1,"valid",72],[20.039794921875,2,"valid",68],[8.382568359375,3,"valid",24],[40.17626953125,0,"valid",348]],"time":199.39697265625,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[17,14]],"egraph":[[0,2793,15,0.007726163],[14,2793,16,0.016780117],[13,2787,16,0.017257405],[12,2787,16,0.013183673],[11,2786,16,0.013791836],[10,2731,16,0.015334494],[9,2611,16,0.016020938],[8,2291,16,0.01777935],[7,1131,16,0.01398094],[6,657,16,0.006628797],[5,370,16,0.003141986],[4,232,16,0.001705446],[3,156,16,0.001136107],[2,74,16,0.000719805],[1,41,16,0.000349393],[0,23,17,0.000303423],[0,14,17,0.00016704]],"inputs":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[-4791664,20387456]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[[]],"time":390.23583984375,"type":"preprocess"},{"compiler":[[0,3]],"memory":[[50624,50624]],"time":0.078125,"type":"eval"},{"alts":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","next",29.86701901748841,"binary64"]],"compiler":[[17,14]],"memory":[[353616,353616]],"time":0.991943359375,"type":"prune"},{"egraph":[[0,2793,64,0.00793875],[14,2793,68,0.014809414],[13,2787,68,0.018160734],[12,2787,68,0.013450213],[11,2786,68,0.013326613],[10,2731,68,0.015083355],[9,2611,68,0.016800581],[8,2291,68,0.016180233],[7,1131,68,0.013367395],[6,657,68,0.006522562],[5,370,68,0.00357992],[4,232,68,0.001519284],[3,156,68,0.001079915],[2,74,68,0.000587855],[1,41,68,0.000335791],[0,23,70,0.000292715],[0,14,70,0.000176165]],"inputs":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(neg.f64 b)","b","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(*.f64 b b)","(*.f64 #s(literal 4 binary64) (*.f64 a c))","#s(literal 4 binary64)","(*.f64 a c)","a","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"locations":[["(neg.f64 b)","cost-diff",0],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","cost-diff",1],["(+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","cost-diff",1]],"memory":[[4674288,4674288]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)","(neg.f64 b)","b","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(*.f64 b b)","(*.f64 #s(literal 4 binary64) (*.f64 a c))","(*.f64 (*.f64 c a) #s(literal 4 binary64))","#s(literal 4 binary64)","(*.f64 a c)","(*.f64 c a)","a","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":166.0869140625,"type":"simplify"},{"compiler":[[72,16]],"locations":[["(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","accuracy",0.40234375000000006],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","accuracy",3.4438901850410826],["(+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","accuracy",12.992468175560182],["(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))","accuracy",23.929958470936878]],"memory":[[763296,16832208]],"mixsample":[[0.2216796875,"ival-sub",1200],[2.22802734375,"adjust",800],[3.413330078125,"ival-div",0],[0.013916015625,"ival-sub",4800],[0.14892578125,"ival-mult",1200],[0.075439453125,"ival-sub",1600],[0.1142578125,"ival-assert",0],[0.0048828125,"ival-sub",3600],[0.387451171875,"ival-sqrt",1200],[1.646728515625,"ival-sub",0],[0.03515625,"ival-sqrt",4800],[2.336181640625,"ival-sqrt",0],[0.130859375,"ival-sub",400],[0.010009765625,"ival-sqrt",2800],[0.203857421875,"ival-mult",800],[2.451171875,"ival-add",0],[0.0498046875,"ival-sub",4400],[0.17626953125,"ival-sub",800],[0.052001953125,"ival-mult",1600],[0.218017578125,"adjust",2800],[0.01318359375,"ival-sqrt",3600],[0.20361328125,"ival-sqrt",400],[0.157958984375,"ival-sqrt",2000],[0.009033203125,"ival-mult",2000],[0.327392578125,"ival-sqrt",800],[0.0859375,"ival-sub",2000],[0.11865234375,"ival-sqrt",4400],[0.85400390625,"adjust",2000],[0.1494140625,"ival-sub",2400],[21.388427734375,"ival-mult",0],[0.1240234375,"ival-sqrt",1600],[0.133056640625,"ival-mult",400],[0.336181640625,"ival-sqrt",2400],[0.2685546875,"ival-true",0],[0.005126953125,"ival-sub",2800],[0.3310546875,"exact",0],[1.642822265625,"ival-neg",0]],"outcomes":[[7.986083984375,1,"valid",36],[10.0546875,2,"valid",34],[5.8154296875,3,"valid",12],[34.403076171875,0,"valid",174]],"time":72.302001953125,"type":"localize"},{"count":[[5,98]],"inputs":[["(+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(neg.f64 b)","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))"]],"memory":[[-933696,8262928]],"outputs":[["(* -2 (/ (* a c) b))","(* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b))))))))","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* -1 (/ c b))","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","(+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3))))))","(+ (* -1 (/ c b)) (* a (+ (* -1 (/ (pow c 2) (pow b 3))) (* a (+ (* -2 (/ (pow c 3) (pow b 5))) (* -1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a)))","(* -4 (* a c))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (pow b 2) (* 4 (* a c)))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(* -1 b)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b)","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -2 b)","(* -1 (* b (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (/ b a))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -2 (/ (pow a 2) (pow b 3))) (* c (+ (* -4 (/ (pow a 3) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b))))))))","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b)))","(* c (- (* c (+ (* -1 (/ a (pow b 3))) (* c (+ (* -2 (/ (pow a 2) (pow b 5))) (* -1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (/ 1 b)))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))) (/ b c)))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))"]],"series":[[4.511962890625,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","c","-inf"],[3.9140625,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","c","inf"],[2.024169921875,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","c","0"],[1.281005859375,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","b","-inf"],[3.715087890625,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","b","inf"],[2.712890625,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","b","0"],[2.735107421875,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","a","-inf"],[9.745849609375,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","a","inf"],[4.01318359375,"((+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (- (* b b) (* 4 (* a c))) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (neg b) (sqrt (- (* b b) (* 4 (* a c)))))","a","0"]],"time":36.924072265625,"type":"series"},{"count":[[98,97]],"egraph":[[0,8386,2654,0.105301629],[2,6121,2789,0.028027249],[1,1738,2817,0.021213116],[0,545,2858,0.005162289]],"inputs":[["(* -2 (/ (* a c) b))","(* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b))))))))","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* -1 (/ c b))","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","(+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3))))))","(+ (* -1 (/ c b)) (* a (+ (* -1 (/ (pow c 2) (pow b 3))) (* a (+ (* -2 (/ (pow c 3) (pow b 5))) (* -1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a)))","(* -4 (* a c))","(* a (- (/ (pow b 2) a) (* 4 c)))","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(- (pow b 2) (* 4 (* a c)))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(* -1 b)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b)","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -2 b)","(* -1 (* b (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (/ b a))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -2 (/ (pow a 2) (pow b 3))) (* c (+ (* -4 (/ (pow a 3) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b))))))))","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b)))","(* c (- (* c (+ (* -1 (/ a (pow b 3))) (* c (+ (* -2 (/ (pow a 2) (pow b 5))) (* -1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (/ 1 b)))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))) (/ b c)))","(* c (- (/ (pow b 2) c) (* 4 a)))","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))"]],"memory":[[258640,51449616]],"method":["egg-herbie"],"outputs":[["(* -2 (/ (* a c) b))","(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","(* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))","(*.f64 (*.f64 #s(literal -2 binary64) a) (fma.f64 (*.f64 c (/.f64 c (pow.f64 b #s(literal 3 binary64)))) a (/.f64 c b)))","(* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))","(*.f64 (fma.f64 (*.f64 a (*.f64 (pow.f64 c #s(literal 3 binary64)) (/.f64 a (pow.f64 b #s(literal 5 binary64))))) #s(literal -4 binary64) (*.f64 (fma.f64 (*.f64 c (/.f64 c (pow.f64 b #s(literal 3 binary64)))) a (/.f64 c b)) #s(literal -2 binary64))) a)","(* a (+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) (/.f64 #s(literal 20 binary64) b)) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -4 binary64)) (pow.f64 b #s(literal 5 binary64)))) a (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) c) c) (pow.f64 b #s(literal 3 binary64)))) a (*.f64 (/.f64 c b) #s(literal -2 binary64))) a)","(pow b 2)","(*.f64 b b)","(+ (* -4 (* a c)) (pow b 2))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(* -1 (/ c b))","(/.f64 (neg.f64 c) b)","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","(neg.f64 (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) b))","(+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (neg.f64 c) c) (pow.f64 b #s(literal 3 binary64)))) a (/.f64 (neg.f64 c) b))","(+ (* -1 (/ c b)) (* a (+ (* -1 (/ (pow c 2) (pow b 3))) (* a (+ (* -2 (/ (pow c 3) (pow b 5))) (* -1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) a) (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) (/.f64 #s(literal 20 binary64) b)) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -2 binary64)) (pow.f64 b #s(literal 5 binary64)))) a (*.f64 (neg.f64 c) (/.f64 c (pow.f64 b #s(literal 3 binary64))))) a (/.f64 (neg.f64 c) b))","b","(+ b (* -2 (/ (* a c) b)))","(fma.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b) b)","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(fma.f64 (*.f64 #s(literal -2 binary64) a) (fma.f64 (*.f64 c (/.f64 c (pow.f64 b #s(literal 3 binary64)))) a (/.f64 c b)) b)","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(fma.f64 (fma.f64 (*.f64 a (*.f64 (pow.f64 c #s(literal 3 binary64)) (/.f64 a (pow.f64 b #s(literal 5 binary64))))) #s(literal -4 binary64) (*.f64 (fma.f64 (*.f64 c (/.f64 c (pow.f64 b #s(literal 3 binary64)))) a (/.f64 c b)) #s(literal -2 binary64))) a b)","(* (sqrt (* a c)) (sqrt -4))","(*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a)))","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (neg.f64 b) a)) a)","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(*.f64 (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (neg.f64 b) a))) a)","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a)))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (neg.f64 b) a)))) a)","(* -4 (* a c))","(*.f64 #s(literal -4 binary64) (*.f64 c a))","(* a (- (/ (pow b 2) a) (* 4 c)))","(*.f64 (fma.f64 #s(literal -4 binary64) c (*.f64 b (/.f64 b a))) a)","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(fma.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(fma.f64 #s(literal 1/64 binary64) (/.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64)))))) a)","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a)))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))","(* -1 (* a (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (sqrt.f64 (/.f64 c a)) #s(literal 2 binary64)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/4 binary64)) (neg.f64 b)) (neg.f64 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/64 binary64)))) a) b) a)))","(* -1 (* a (- (* -1 (/ (pow b 2) a)) (* -4 c))))","(*.f64 (fma.f64 #s(literal -4 binary64) c (*.f64 b (/.f64 b a))) a)","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(-.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 #s(literal 1/2 binary64) b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 #s(literal 1/2 binary64) b (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/128 binary64)))) (neg.f64 a))) a)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))))","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a)) (neg.f64 b))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) #s(literal -1 binary64)) b (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/32 binary64) (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) b #s(literal -1 binary64)) b (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a))))","(- (pow b 2) (* 4 (* a c)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -1/2 binary64) a)) b))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/64 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 b b)) (sqrt.f64 #s(literal -4 binary64))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/4 binary64))) b (/.f64 #s(literal -1/2 binary64) a)) b (*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a))))","(* -1 b)","(neg.f64 b)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/32 binary64) (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) b) b (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (sqrt.f64 #s(literal -4 binary64))) (*.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 b (/.f64 b (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))))) (*.f64 b b) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (*.f64 c a))))","(/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/.f64 (*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) c) b) (/.f64 c b) (*.f64 c a)) #s(literal -2 binary64)) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -4 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) c) b) (/.f64 c b) (*.f64 c a)) #s(literal -2 binary64))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b)","(/.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -4 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) c) b) (/.f64 c b) (*.f64 c a)) #s(literal -2 binary64) (*.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (/.f64 #s(literal 20 binary64) (pow.f64 b #s(literal 6 binary64)))) #s(literal -1/2 binary64)))) b)","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(*.f64 (*.f64 (fma.f64 (/.f64 (/.f64 (*.f64 c a) b) b) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(neg.f64 (/.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c) b))","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b)","(/.f64 (-.f64 (/.f64 (*.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) #s(literal -2 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c)) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal -1/4 binary64) a) (*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (/.f64 #s(literal 20 binary64) (pow.f64 b #s(literal 6 binary64)))) (neg.f64 (fma.f64 (/.f64 c b) (/.f64 (*.f64 c a) b) c)))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(*.f64 (fma.f64 (/.f64 (/.f64 (*.f64 c a) b) b) #s(literal -2 binary64) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(*.f64 (fma.f64 (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -2 binary64) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -4 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -2 binary64) #s(literal 1 binary64))) b)","(* -2 b)","(*.f64 #s(literal -2 binary64) b)","(* -1 (* b (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (neg.f64 b) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b) b) #s(literal -2 binary64) #s(literal 2 binary64)))","(* -1 (* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (neg.f64 b) (fma.f64 (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -2 binary64) #s(literal 2 binary64)))","(* -1 (* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -4 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -2 binary64) #s(literal 2 binary64))))","(* -1 (/ b a))","(/.f64 (neg.f64 b) a)","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(*.f64 (neg.f64 b) (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) a) (*.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64))))) (/.f64 (/.f64 c b) b)))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(neg.f64 (fma.f64 b (fma.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (-.f64 (/.f64 (neg.f64 c) (*.f64 b b)) (*.f64 (*.f64 c c) (/.f64 a (pow.f64 b #s(literal 4 binary64)))))) (/.f64 b a)))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (neg.f64 b) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b) b) #s(literal -2 binary64) #s(literal 1 binary64)))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (neg.f64 b) (fma.f64 (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -2 binary64) #s(literal 1 binary64)))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -4 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (fma.f64 (/.f64 a b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b #s(literal 4 binary64)))) #s(literal -2 binary64) #s(literal 1 binary64))))","(* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))","(*.f64 (*.f64 (fma.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) (*.f64 a a) (/.f64 a b)) #s(literal -2 binary64)) c)","(* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -4 binary64)) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c)","(* c (+ (* -2 (/ a b)) (* c (+ (* -2 (/ (pow a 2) (pow b 3))) (* c (+ (* -4 (/ (pow a 3) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) (/.f64 #s(literal 20 binary64) b)) (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -4 binary64)) (pow.f64 b #s(literal 5 binary64)))) c (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c)","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(*.f64 (neg.f64 (fma.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) a (/.f64 #s(literal 1 binary64) b))) c)","(* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b)))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -2 binary64) c) (*.f64 a (/.f64 a (pow.f64 b #s(literal 5 binary64)))) (/.f64 (neg.f64 a) (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal -1 binary64) b)) c)","(* c (- (* c (+ (* -1 (/ a (pow b 3))) (* c (+ (* -2 (/ (pow a 2) (pow b 5))) (* -1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (/ 1 b)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 #s(literal -1/4 binary64) a) (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 20 binary64)) (pow.f64 b #s(literal 6 binary64))) (/.f64 c b)) (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (pow.f64 b #s(literal 5 binary64)))) c (/.f64 (neg.f64 a) (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal -1 binary64) b)) c)","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(fma.f64 (*.f64 (fma.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) (*.f64 a a) (/.f64 a b)) #s(literal -2 binary64)) c b)","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -4 binary64)) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c b)","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (neg.f64 b) c)) c)","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (neg.f64 b) c))) c)","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))) (/ b c)))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (neg.f64 b) c)))) c)","(* c (- (/ (pow b 2) c) (* 4 a)))","(*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c)","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (/.f64 (/.f64 b c) a) #s(literal -1/2 binary64))) c)","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/4 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (/.f64 (/.f64 b c) a) #s(literal -1/2 binary64)))) c)","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(*.f64 (fma.f64 #s(literal 1/64 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/4 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 (/.f64 (/.f64 b c) a) #s(literal -1/2 binary64))))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(*.f64 (fma.f64 #s(literal 1/32 binary64) (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 #s(literal -4 binary64))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))))) c)","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (/.f64 b c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) #s(literal 2 binary64)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/4 binary64)) (neg.f64 b)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (/.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/64 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))) c) b) c)) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (pow b 2) c)) (* -4 a))))","(*.f64 (fma.f64 #s(literal -4 binary64) a (*.f64 b (/.f64 b c))) c)","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) c) (/.f64 b a) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/128 binary64)))) (neg.f64 c))) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))) (neg.f64 c))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))) (neg.f64 c))"]],"stop":[["iter limit",1],["node limit",1]],"time":285.487060546875,"type":"simplify"},{"count":[[5,437]],"egraph":[[0,8189,44,0.069669496],[3,6896,48,0.040857312],[2,534,48,0.018217776],[1,77,49,0.002270737],[0,23,51,0.000867625],[0,14,51,0.000179742]],"inputs":[["(+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))))","(-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c)))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(neg.f64 b)","(sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))"]],"memory":[[-199264,50755776]],"outputs":[["(*.f64 (/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (pow.f64 b #s(literal 4 binary64))))","(*.f64 (/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(*.f64 (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))","(*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) #s(literal -1 binary64)) (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))","(*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))))))","(*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) #s(literal -1 binary64))))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))))","(*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) #s(literal -1 binary64)))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64))))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal 1 binary64))","(pow.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64))) (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64))) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3 binary64))) (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64))) (fma.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) #s(literal -1 binary64))) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 9/2 binary64)) (pow.f64 b #s(literal 9 binary64))) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64))))","(/.f64 (-.f64 #s(literal 0 binary64) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (/.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (*.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))) (fma.f64 b (/.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (/.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (fma.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (*.f64 (/.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (*.f64 #s(literal 0 binary64) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))))","(/.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 9/2 binary64)) (pow.f64 b #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1 binary64)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 1 binary64)) (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) b) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 b b))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) b))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 b b)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) b) (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a))) (*.f64 b b))) (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a))) b))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (*.f64 b b)) (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a))) (*.f64 b b)))","(/.f64 (-.f64 (*.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) b (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 b b))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) b))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 b b) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 b b)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) b (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a))) (*.f64 b b))) (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a))) b))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (*.f64 b b) (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a))) (*.f64 b b)))","(/.f64 (fma.f64 (*.f64 b b) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 b (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))))) (*.f64 b (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (fma.f64 (*.f64 b b) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a))) (*.f64 b (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 b (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a)))))","(/.f64 (fma.f64 (pow.f64 b #s(literal 3 binary64)) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (*.f64 b b) (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))))) (*.f64 (*.f64 b b) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (fma.f64 (pow.f64 b #s(literal 3 binary64)) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a))) (*.f64 (*.f64 b b) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 (*.f64 b b) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3 binary64))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (fma.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3 binary64))) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))))","(/.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 9/2 binary64)) (pow.f64 b #s(literal 9 binary64))) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (fma.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64)))))","(/.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))))","(/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (neg.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))))","(neg.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(fma.f64 (/.f64 (*.f64 b b) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (neg.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))))","(fma.f64 (/.f64 (*.f64 b b) (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (neg.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))))","(fma.f64 (pow.f64 b #s(literal 1/2 binary64)) (pow.f64 b #s(literal 1/2 binary64)) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 (pow.f64 b #s(literal 1/2 binary64)) (pow.f64 b #s(literal 1/2 binary64)) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(fma.f64 (sqrt.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (sqrt.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) b)","(fma.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64)) b)","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) b)","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))) b)","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) b)","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a)))) b)","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))) b)","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) b)","(fma.f64 #s(literal -1 binary64) (/.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (neg.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))))","(fma.f64 #s(literal -1 binary64) b (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(fma.f64 #s(literal 1 binary64) (/.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (neg.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))))","(fma.f64 #s(literal 1 binary64) b (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 #s(literal 1 binary64) b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(fma.f64 (pow.f64 b #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 b b)) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 (pow.f64 b #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 b b)) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(fma.f64 (*.f64 b b) (/.f64 #s(literal 1 binary64) b) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 (*.f64 b b) (/.f64 #s(literal 1 binary64) b) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(fma.f64 (*.f64 b b) (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) (neg.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))))","(fma.f64 b (/.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (neg.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))))","(fma.f64 b #s(literal -1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 b #s(literal -1 binary64) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(fma.f64 b #s(literal 1 binary64) (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(fma.f64 b #s(literal 1 binary64) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(-.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 0 binary64)) b)","(-.f64 (/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (/.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(-.f64 (/.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(-.f64 #s(literal 0 binary64) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)","(+.f64 (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) b)","(+.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 0 binary64)) b)","(+.f64 (/.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (neg.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))))","(+.f64 #s(literal 0 binary64) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(+.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)","(+.f64 b (neg.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(+.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(*.f64 (/.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (-.f64 (pow.f64 b #s(literal 8 binary64)) (pow.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) #s(literal 2 binary64)))) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(*.f64 (/.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) #s(literal 3 binary64)) (pow.f64 b #s(literal 12 binary64)))) (fma.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (-.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (pow.f64 b #s(literal 4 binary64))) (pow.f64 b #s(literal 8 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(*.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64))) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64)) (*.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64)) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(*.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))","(*.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))","(*.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(*.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))))","(*.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))","(*.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (*.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))))","(*.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(*.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) (/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))))","(*.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 2 binary64))","(pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 8 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 4 binary64))) (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 12 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 6 binary64))) (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) #s(literal 2 binary64)) (pow.f64 b #s(literal 8 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 12 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 6 binary64))) (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 18 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 9 binary64))) (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))) (fma.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64))) (pow.f64 b #s(literal 12 binary64))))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a))))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (*.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))) (+.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))))) (+.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) #s(literal 3 binary64)) (pow.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (fma.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))))))","(/.f64 (neg.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64))) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64)))) (neg.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 1 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 8 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 12 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) #s(literal 2 binary64)) (pow.f64 b #s(literal 8 binary64))) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 12 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 18 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64))) (pow.f64 b #s(literal 12 binary64))) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a)))))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a))) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a))) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a)))))","(/.f64 (*.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal 1 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 2 binary64)))) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)))) (*.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 8 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 4 binary64))) (*.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 b #s(literal 12 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 6 binary64))) (*.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (+.f64 (pow.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) #s(literal 2 binary64)) (pow.f64 b #s(literal 8 binary64)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 12 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 6 binary64))) (*.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 18 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 9 binary64))) (*.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64))) (pow.f64 b #s(literal 12 binary64)))))","(/.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64)) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(/.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64))) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(/.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(/.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 #s(literal 4 binary64) (*.f64 b b)) c) a))))","(/.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))","(neg.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))","(fma.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (-.f64 (pow.f64 b #s(literal 8 binary64)) (pow.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) #s(literal 2 binary64)))) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))))","(fma.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (+.f64 (pow.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) #s(literal 3 binary64)) (pow.f64 b #s(literal 12 binary64)))) (fma.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (-.f64 (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (pow.f64 b #s(literal 4 binary64))) (pow.f64 b #s(literal 8 binary64))) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))))","(fma.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) (neg.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(fma.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (neg.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(fma.f64 (*.f64 #s(literal -1 binary64) (*.f64 c #s(literal 4 binary64))) a (*.f64 b b))","(fma.f64 (neg.f64 (*.f64 c #s(literal 4 binary64))) a (*.f64 b b))","(fma.f64 (exp.f64 (log.f64 b)) (exp.f64 (log.f64 b)) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b b))","(fma.f64 (*.f64 c #s(literal 4 binary64)) (neg.f64 a) (*.f64 b b))","(fma.f64 (neg.f64 c) (*.f64 a #s(literal 4 binary64)) (*.f64 b b))","(fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))","(fma.f64 (*.f64 (neg.f64 a) c) #s(literal 4 binary64) (*.f64 b b))","(fma.f64 (neg.f64 a) (*.f64 c #s(literal 4 binary64)) (*.f64 b b))","(fma.f64 (*.f64 a #s(literal 4 binary64)) (neg.f64 c) (*.f64 b b))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(fma.f64 #s(literal -1 binary64) (*.f64 (*.f64 c a) #s(literal 4 binary64)) (*.f64 b b))","(fma.f64 #s(literal -1 binary64) (*.f64 b b) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(fma.f64 #s(literal 1 binary64) (*.f64 b b) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(fma.f64 (pow.f64 b #s(literal 4 binary64)) (/.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))))","(fma.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) (neg.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(fma.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))))","(fma.f64 (pow.f64 b #s(literal 3 binary64)) (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))))","(fma.f64 (pow.f64 b #s(literal 3 binary64)) (/.f64 b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (neg.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(fma.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal -1 binary64) (*.f64 b b))","(fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b))","(fma.f64 c (*.f64 #s(literal -4 binary64) a) (*.f64 b b))","(fma.f64 a (*.f64 #s(literal 4 binary64) (neg.f64 c)) (*.f64 b b))","(fma.f64 a (neg.f64 (*.f64 c #s(literal 4 binary64))) (*.f64 b b))","(fma.f64 a (*.f64 #s(literal -4 binary64) c) (*.f64 b b))","(fma.f64 #s(literal 4 binary64) (*.f64 (neg.f64 a) c) (*.f64 b b))","(fma.f64 (*.f64 b b) (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))))","(fma.f64 (*.f64 b b) (/.f64 (*.f64 b b) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (neg.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(fma.f64 (*.f64 b b) #s(literal -1 binary64) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(fma.f64 (*.f64 b b) #s(literal 1 binary64) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(fma.f64 b (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (neg.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(fma.f64 b b (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(sqrt.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64)))","(-.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(-.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))))","(-.f64 #s(literal 0 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))","(-.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 b b))","(-.f64 (*.f64 b b) (*.f64 (*.f64 c a) #s(literal 4 binary64)))","(fabs.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(hypot.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 b b))","(hypot.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 b b))","(hypot.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) (*.f64 b b))","(hypot.f64 (*.f64 b b) (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 1 binary64)))","(hypot.f64 (*.f64 b b) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(hypot.f64 (*.f64 b b) (*.f64 (*.f64 c a) #s(literal 4 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(+.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (neg.f64 (*.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (/.f64 #s(literal 16 binary64) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))))","(+.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal 4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))))))","(+.f64 (*.f64 #s(literal -4 binary64) (*.f64 c a)) (*.f64 b b))","(+.f64 (*.f64 b b) (*.f64 #s(literal -4 binary64) (*.f64 c a)))","(*.f64 (/.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))))","(*.f64 (/.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(*.f64 (/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))))","(*.f64 (/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (pow.f64 b #s(literal 4 binary64))))","(*.f64 (*.f64 #s(literal 1 binary64) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) #s(literal -1/2 binary64)) (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))))","(*.f64 (/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) a) (/.f64 (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) a) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) a) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 1/2 binary64)))","(*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (neg.f64 a)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) a) #s(literal 1/2 binary64))","(*.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(*.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) (neg.f64 a)))","(*.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) (/.f64 #s(literal 1/2 binary64) a)))","(*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) a)))","(*.f64 #s(literal -1 binary64) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))))","(*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) #s(literal -1 binary64)) (/.f64 #s(literal 1/2 binary64) a)))","(*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) a)))","(*.f64 #s(literal 1/2 binary64) (pow.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) #s(literal -1 binary64)))","(*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) a))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) #s(literal 1 binary64))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a))","(pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) #s(literal -1 binary64))","(/.f64 (/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -2 binary64) a) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))))) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))))","(/.f64 (/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) a) #s(literal -2 binary64))","(/.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (pow.f64 a #s(literal -1 binary64))) #s(literal -2 binary64))","(/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) #s(literal 2 binary64))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (/.f64 #s(literal -1/2 binary64) a)) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal -1/2 binary64) a)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal -1/2 binary64) a)) (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))))","(/.f64 (*.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1/2 binary64)) #s(literal 1 binary64)) a)","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) a)) #s(literal 2 binary64))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 1/2 binary64))) (neg.f64 a))","(/.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 1 binary64)) (*.f64 #s(literal -2 binary64) a))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) a)) #s(literal -2 binary64))","(/.f64 (neg.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))))","(/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))) (*.f64 #s(literal 2 binary64) (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))))))","(/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 2 binary64)))","(/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -2 binary64) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) #s(literal 2 binary64)))","(/.f64 (*.f64 #s(literal -1 binary64) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))))))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))) (*.f64 a (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) (*.f64 a (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 a (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (pow.f64 a #s(literal -1 binary64))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal 2 binary64)))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal -1 binary64)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1 binary64)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1 binary64)) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1/2 binary64)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) a))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (pow.f64 a #s(literal -1 binary64))) (*.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) #s(literal 1/2 binary64)) (*.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))) a))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 a #s(literal -1 binary64))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 2 binary64)))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) #s(literal -1 binary64)) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) #s(literal 1/2 binary64)) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) a))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 a #s(literal -1 binary64))) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64)) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) a))","(/.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 #s(literal -2 binary64) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) a) #s(literal 2 binary64))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))))","(/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64))) (*.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3 binary64))) (*.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (fma.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3 binary64))) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)))))","(/.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 9/2 binary64)) (pow.f64 b #s(literal 9 binary64))) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (*.f64 #s(literal 2 binary64) a)) (fma.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64)))))","(/.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (neg.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (*.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 (fma.f64 b b (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (neg.f64 (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))))","(/.f64 (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))))))","(/.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 1/2 binary64)) (neg.f64 a))","(/.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1/2 binary64)) (neg.f64 (neg.f64 a)))","(/.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal -1/2 binary64)) a)","(/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) c) a (fma.f64 b b (*.f64 b (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 #s(literal 1/2 binary64) (*.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) #s(literal -1 binary64)) a))","(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))))","(neg.f64 (*.f64 #s(literal 1 binary64) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a))))","(neg.f64 (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) b))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) b (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 b (/.f64 #s(literal 1/2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))","(-.f64 (/.f64 (*.f64 b b) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))) (/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a)))","(-.f64 (/.f64 (/.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 b (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a)))","(-.f64 #s(literal 0 binary64) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (/.f64 #s(literal 1/2 binary64) a)))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))) #s(literal -1 binary64)))","(+.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))","(+.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))","(+.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) b))","(+.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) b) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(*.f64 (pow.f64 b #s(literal 1/2 binary64)) (pow.f64 b #s(literal 1/2 binary64)))","(*.f64 #s(literal -1 binary64) b)","(*.f64 #s(literal 1 binary64) b)","(*.f64 (pow.f64 b #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 b b)))","(*.f64 (*.f64 b b) (/.f64 #s(literal 1 binary64) b))","(*.f64 b #s(literal -1 binary64))","(*.f64 b #s(literal 1 binary64))","(pow.f64 b #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 b (*.f64 b b)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64))))","(/.f64 (pow.f64 b #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (-.f64 (*.f64 b b) #s(literal 0 binary64))))","(/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 b b))","(/.f64 (*.f64 b b) b)","(neg.f64 b)","(fma.f64 (pow.f64 b #s(literal 1/2 binary64)) (pow.f64 b #s(literal 1/2 binary64)) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) b #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) b #s(literal 0 binary64))","(fma.f64 (pow.f64 b #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 b b)) #s(literal 0 binary64))","(fma.f64 (*.f64 b b) (/.f64 #s(literal 1 binary64) b) #s(literal 0 binary64))","(fma.f64 b #s(literal -1 binary64) #s(literal 0 binary64))","(fma.f64 b #s(literal 1 binary64) #s(literal 0 binary64))","(-.f64 (/.f64 #s(literal 0 binary64) b) b)","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 b b)) b)","(-.f64 #s(literal 0 binary64) b)","(exp.f64 (*.f64 (log.f64 b) #s(literal 1 binary64)))","(+.f64 #s(literal 0 binary64) b)","(+.f64 b #s(literal 0 binary64))","b","(*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (sqrt.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(*.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a)))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(pow.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 1 binary64))","(pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/2 binary64))","(/.f64 (-.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 0 binary64)) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 0 binary64)))","(/.f64 (+.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 3/2 binary64)) #s(literal 0 binary64)) (+.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (-.f64 #s(literal 0 binary64) (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 0 binary64)))))","(/.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (neg.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a)))))","(/.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) #s(literal 64 binary64) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a))) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(fma.f64 (sqrt.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) (sqrt.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))) #s(literal 0 binary64))","(fma.f64 (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -16 binary64) (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -4 binary64) (*.f64 c a)))) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal 4 binary64)) (*.f64 a (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) #s(literal 0 binary64))","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(fabs.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(exp.f64 (log.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(+.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(+.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) #s(literal 0 binary64))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":271.18701171875,"type":"rewrite"},{"compiler":[[18889,2134]],"memory":[[11255280,48817488]],"time":66.9140625,"type":"eval"},{"alts":[["(/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","fresh",48.77517957682069,"binary64"],["(/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))","next",29.86701901748841,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) a))","next",30.047045957208134,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","fresh",46.94359412302719,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","fresh",41.23424108651143,"binary64"],["(/.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","fresh",46.71282843149144,"binary64"],["(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","next",46.34233072136904,"binary64"],["(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","fresh",29.938458793665273,"binary64"],["(-.f64 (/.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 b (*.f64 #s(literal 2 binary64) a)))","fresh",29.965567649688495,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","next",29.938458793665273,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a)))","fresh",42.927083200500476,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))","fresh",42.03137654896942,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","next",42.84245937978134,"binary64"]],"compiler":[[27,16],[15,12],[20,16],[21,16],[23,18],[27,16],[25,19],[15,12],[19,13],[15,12],[29,20],[22,17],[22,17],[27,16],[15,12],[20,16],[21,16],[23,18],[27,16],[25,19],[15,12],[19,13],[15,12],[29,20],[22,17],[22,17]],"count":[[531,13]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[530,13],"picked":[1,0]}],"memory":[[-8150016,25490496]],"min-error":[[5.460137623637281,"binary64"]],"time":61.701904296875,"type":"prune"},{"egraph":[[0,6204,299,0.027947903],[22,6204,300,0.047768812],[21,6198,300,0.059859306],[20,6198,300,0.047781808],[19,6174,300,0.046535494],[18,6039,300,0.041651382],[17,5967,300,0.040300002],[16,5967,300,0.02603335],[15,5967,300,0.026032685],[14,5901,300,0.027696678],[13,5731,300,0.029854421],[12,5686,300,0.034970738],[11,5665,300,0.019046718],[10,5579,300,0.018466867],[9,5275,300,0.022394409],[8,4573,300,0.025064929],[7,2828,300,0.027915237],[6,1664,300,0.017238978],[5,908,300,0.008353745],[4,560,300,0.004764872],[3,363,300,0.002512924],[2,202,300,0.001925187],[1,108,300,0.001006302],[0,61,302,0.000594509],[0,40,308,0.000351487]],"inputs":[["(/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))","(-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","#s(literal -4 binary64)","(*.f64 c a)","c","a","(*.f64 b b)","b","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","(/.f64 (neg.f64 b) a)","(neg.f64 b)","b","a","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","#s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))","(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","(*.f64 (/.f64 a b) #s(literal -2 binary64))","(/.f64 a b)","a","b","#s(literal -2 binary64)","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(/.f64 #s(literal 1/2 binary64) a)","#s(literal 1/2 binary64)","a","(-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","#s(literal -4 binary64)","(*.f64 c a)","c","(*.f64 b b)","b","(/.f64 (+.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) a))","(+.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(neg.f64 b)","b","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","#s(literal 1 binary64)","(sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","#s(literal -4 binary64)","(*.f64 c a)","c","a","(*.f64 b b)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"locations":[["(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","cost-diff",0],["(neg.f64 b)","cost-diff",0],["(+.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","cost-diff",1],["(/.f64 (+.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) a))","cost-diff",1],["(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","cost-diff",0],["(-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)","cost-diff",0],["(/.f64 #s(literal 1/2 binary64) a)","cost-diff",0],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","cost-diff",0],["(*.f64 (/.f64 a b) #s(literal -2 binary64))","cost-diff",0],["(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","cost-diff",0],["#s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))","cost-diff",0],["(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["(neg.f64 b)","cost-diff",0],["(/.f64 (neg.f64 b) a)","cost-diff",0],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","cost-diff",0],["(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","cost-diff",0],["(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","cost-diff",0],["(-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)","cost-diff",0],["(/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))","cost-diff",0]],"memory":[[-5471808,10885776]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)","(-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))","#s(literal -4 binary64)","(*.f64 c a)","(*.f64 a c)","c","a","(*.f64 b b)","b","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","(/.f64 (neg.f64 b) a)","(neg.f64 b)","b","a","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)))","#s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))","#s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c))","(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","(*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)","(*.f64 (/.f64 a b) #s(literal -2 binary64))","(*.f64 #s(literal -2 binary64) (/.f64 a b))","(/.f64 a b)","a","b","#s(literal -2 binary64)","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 #s(literal 1/2 binary64) a)","#s(literal 1/2 binary64)","a","(-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)","(-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))","#s(literal -4 binary64)","(*.f64 c a)","(*.f64 a c)","c","(*.f64 b b)","b","(/.f64 (+.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 #s(literal -1/2 binary64) b (/.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))) a)","(+.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) b)","(neg.f64 b)","b","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","#s(literal 1 binary64)","(sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","(/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))","#s(literal -4 binary64)","(*.f64 c a)","(*.f64 a c)","c","a","(*.f64 b b)","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":673.425048828125,"type":"simplify"},{"compiler":[[303,37]],"locations":[["(/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","accuracy",0.5910771034462343],["(/.f64 (+.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) a))","accuracy",3.4438901850410826],["(+.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","accuracy",12.992468175560182],["(sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","accuracy",23.425756201516517],["(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","accuracy",0.40234375000000006],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","accuracy",3.3164016309035493],["(-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)","accuracy",12.992468175560182],["(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","accuracy",23.929958470936878],["(*.f64 (/.f64 a b) #s(literal -2 binary64))","accuracy",0.01171875],["(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","accuracy",3.4438901850410826],["(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","accuracy",4.046513519691978],["#s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))","accuracy",42.0281229523754],["(/.f64 (neg.f64 b) a)","accuracy",0.0],["(neg.f64 b)","accuracy",0.0],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","accuracy",42.84245937978134],["(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","accuracy",0.40234375000000006],["(/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))","accuracy",3.4438901850410826],["(-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)","accuracy",12.992468175560182],["(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","accuracy",23.929958470936878]],"memory":[[5250032,46004064]],"mixsample":[[0.165771484375,"ival-sub",1200],[0.009033203125,"ival-sub",4800],[4.394287109375,"adjust",800],[18.88330078125,"ival-div",0],[0.02197265625,"ival-add",4800],[0.01904296875,"ival-mult",1200],[0.056884765625,"ival-sub",1600],[0.299560546875,"ival-div",400],[0.11474609375,"ival-assert",0],[0.228759765625,"ival-div",1600],[0.0048828125,"ival-sub",3600],[0.078125,"ival-sqrt",4800],[1.560546875,"ival-sqrt",1200],[4.9013671875,"ival-sub",0],[6.85888671875,"ival-sqrt",0],[0.107421875,"ival-sub",400],[0.061767578125,"ival-div",4800],[0.033935546875,"ival-sqrt",2800],[0.043212890625,"ival-sub",4400],[6.028076171875,"ival-add",0],[0.0703125,"ival-mult",800],[0.11669921875,"ival-sub",800],[0.005859375,"ival-mult",1600],[0.178466796875,"ival-add",400],[0.693603515625,"adjust",2800],[0.031982421875,"ival-sqrt",3600],[0.237060546875,"ival-div",2000],[0.18408203125,"ival-add",2400],[0.503662109375,"ival-div",2400],[0.5361328125,"ival-sqrt",400],[0.298583984375,"ival-add",1200],[0.35107421875,"ival-sqrt",2000],[0.006103515625,"ival-mult",2000],[0.054443359375,"ival-sub",2000],[0.692626953125,"ival-sqrt",800],[0.26123046875,"ival-div",4400],[0.334228515625,"ival-sqrt",4400],[0.006103515625,"ival-add",3600],[0.02099609375,"ival-div",2800],[2.037353515625,"adjust",2000],[0.11962890625,"ival-sub",2400],[0.578857421875,"ival-div",1200],[0.03857421875,"ival-mult",400],[16.76904296875,"ival-mult",0],[0.3291015625,"ival-sqrt",1600],[0.09814453125,"ival-add",1600],[0.008056640625,"ival-add",2800],[0.100341796875,"ival-add",2000],[0.39794921875,"ival-div",800],[0.025146484375,"ival-div",3600],[0.30419921875,"ival-true",0],[0.843505859375,"ival-sqrt",2400],[0.0048828125,"ival-sub",2800],[0.8115234375,"exact",0],[0.203125,"ival-add",800],[0.0791015625,"ival-add",4400],[1.39892578125,"ival-neg",0]],"outcomes":[[18.651123046875,1,"valid",36],[27.59716796875,2,"valid",34],[41.976806640625,3,"valid",12],[52.947509765625,0,"valid",174]],"time":178.614013671875,"type":"localize"},{"count":[[18,149]],"inputs":[["(/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))","(-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","(/.f64 (neg.f64 b) a)","(neg.f64 b)","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","#s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))","(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","(*.f64 (/.f64 a b) #s(literal -2 binary64))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(/.f64 #s(literal 1/2 binary64) a)","(/.f64 (+.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) a))","(+.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))"]],"memory":[[325968,15422000]],"outputs":[["(* -1 (/ c b))","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","(+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3))))))","(+ (* -1 (/ c b)) (* a (+ (* -1 (/ (pow c 2) (pow b 3))) (* a (+ (* -2 (/ (pow c 3) (pow b 5))) (* -1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","(* -2 (/ (* a c) b))","(* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b))))))))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* -1 (/ b a))","(* -2 (/ a b))","(/ 1/2 a)","(/ 1 b)","(+ (* 2 (/ (* a c) (pow b 3))) (/ 1 b))","(+ (* a (+ (* -1/2 (* a (* b (+ (* -16 (/ (pow c 2) (pow b 6))) (* 4 (/ (pow c 2) (pow b 6))))))) (* 2 (/ c (pow b 3))))) (/ 1 b))","(+ (* a (+ (* 2 (/ c (pow b 3))) (* a (+ (* -1/2 (* a (* b (+ (* -64 (/ (pow c 3) (pow b 8))) (* -2 (/ (* c (+ (* -16 (/ (pow c 2) (pow b 6))) (* 4 (/ (pow c 2) (pow b 6))))) (pow b 2))))))) (* -1/2 (* b (+ (* -16 (/ (pow c 2) (pow b 6))) (* 4 (/ (pow c 2) (pow b 6)))))))))) (/ 1 b))","(/ 1 (pow b 2))","(+ (* 4 (/ (* a c) (pow b 4))) (/ 1 (pow b 2)))","(+ (* a (- (* 16 (/ (* a (pow c 2)) (pow b 6))) (* -4 (/ c (pow b 4))))) (/ 1 (pow b 2)))","(+ (* a (- (* a (- (* 64 (/ (* a (pow c 3)) (pow b 8))) (* -16 (/ (pow c 2) (pow b 6))))) (* -4 (/ c (pow b 4))))) (/ 1 (pow b 2)))","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -4 (* a c))","(* a (+ (* -4 c) (/ (pow b 2) a)))","(* (sqrt (/ 1 (* a c))) (sqrt -1/4))","(+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4)))","(+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4))))","(+ (* -1/2 (* (sqrt (/ c (pow a 7))) (/ (+ (* 1/1024 (/ (* a (pow b 4)) (* (pow c 3) (pow (sqrt -1/4) 2)))) (* 1/256 (/ (pow b 6) (pow c 4)))) (sqrt -1/4)))) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4)))))","(/ -1/4 (* a c))","(/ (- (* -1/16 (/ (pow b 2) (* a (pow c 2)))) (* 1/4 (/ 1 c))) a)","(/ (- (* -1/64 (/ (pow b 4) (* (pow a 2) (pow c 3)))) (+ (* 1/16 (/ (pow b 2) (* a (pow c 2)))) (* 1/4 (/ 1 c)))) a)","(/ (- (* -1/256 (/ (pow b 6) (* (pow a 3) (pow c 4)))) (+ (* 1/64 (/ (pow b 4) (* (pow a 2) (pow c 3)))) (+ (* 1/16 (/ (pow b 2) (* a (pow c 2)))) (* 1/4 (/ 1 c))))) a)","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(* -1 (* a (+ (* -1 (/ (pow b 2) a)) (* 4 c))))","(* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))","(+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(+ (* -1 (/ (+ (* 1/64 (* (sqrt (/ a (pow c 5))) (* (pow b 4) (sqrt -1)))) (* (sqrt (/ c a)) (* (sqrt -1) (+ (* -1/256 (/ (* a (pow b 4)) (pow c 3))) (* 1/256 (/ (pow b 6) (pow c 4))))))) (pow a 3))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (/ (+ (* 1/16 (/ (pow b 2) (* a (pow c 2)))) (* 1/4 (/ 1 c))) a))","(* -1 (/ (+ (* -1 (/ (- (* -1/64 (/ (pow b 4) (* a (pow c 3)))) (* 1/16 (/ (pow b 2) (pow c 2)))) a)) (* 1/4 (/ 1 c))) a))","(* -1 (/ (+ (* -1 (/ (- (* -1 (/ (- (* 1/256 (/ (pow b 6) (* a (pow c 4)))) (* -1/64 (/ (pow b 4) (pow c 3)))) a)) (* 1/16 (/ (pow b 2) (pow c 2)))) a)) (* 1/4 (/ 1 c))) a))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(* -1 b)","(+ (* (sqrt (/ 1 (* a c))) (sqrt -1/4)) (* (pow b 2) (+ (* -1/2 (* (sqrt (* a c)) (/ (* (pow b 2) (+ (* 1/1024 (/ 1 (* (pow a 3) (* (pow c 3) (pow (sqrt -1/4) 2))))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3)))))) (sqrt -1/4)))) (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (sqrt -1/4)))))))","(+ (* (sqrt (/ 1 (* a c))) (sqrt -1/4)) (* (pow b 2) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (sqrt -1/4)))) (* (pow b 2) (+ (* -1/2 (* (sqrt (* a c)) (/ (* (pow b 2) (+ (* 1/32 (/ (+ (* 1/1024 (/ 1 (* (pow a 3) (* (pow c 3) (pow (sqrt -1/4) 2))))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3))))) (* a (* c (pow (sqrt -1/4) 2))))) (* 1/256 (/ 1 (* (pow a 4) (pow c 4)))))) (sqrt -1/4)))) (* -1/2 (* (sqrt (* a c)) (/ (+ (* 1/1024 (/ 1 (* (pow a 3) (* (pow c 3) (pow (sqrt -1/4) 2))))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3))))) (sqrt -1/4)))))))))","(- (* -1/16 (/ (pow b 2) (* (pow a 2) (pow c 2)))) (* 1/4 (/ 1 (* a c))))","(- (* (pow b 2) (- (* -1/64 (/ (pow b 2) (* (pow a 3) (pow c 3)))) (* 1/16 (/ 1 (* (pow a 2) (pow c 2)))))) (* 1/4 (/ 1 (* a c))))","(- (* (pow b 2) (- (* (pow b 2) (- (* -1/256 (/ (pow b 2) (* (pow a 4) (pow c 4)))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3)))))) (* 1/16 (/ 1 (* (pow a 2) (pow c 2)))))) (* 1/4 (/ 1 (* a c))))","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(/ (+ 1 (* 2 (/ (* a c) (pow b 2)))) b)","(/ (+ 1 (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2))))) b)","(/ (+ 1 (+ (* -1/2 (/ (+ (* -64 (* (pow a 3) (pow c 3))) (* -2 (* a (* c (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))))))) (pow b 6))) (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2)))))) b)","(/ (+ 1 (* 4 (/ (* a c) (pow b 2)))) (pow b 2))","(/ (- (+ 1 (* 16 (/ (* (pow a 2) (pow c 2)) (pow b 4)))) (* -4 (/ (* a c) (pow b 2)))) (pow b 2))","(/ (- (+ 1 (* 64 (/ (* (pow a 3) (pow c 3)) (pow b 6)))) (+ (* -16 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* -4 (/ (* a c) (pow b 2))))) (pow b 2))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(* -2 b)","(* -1 (* b (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(/ -1 b)","(* -1 (/ (+ 1 (* 2 (/ (* a c) (pow b 2)))) b))","(* -1 (/ (+ 1 (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2))))) b))","(* -1 (/ (+ 1 (+ (* -1/2 (/ (+ (* -64 (* (pow a 3) (pow c 3))) (* -2 (* a (* c (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))))))) (pow b 6))) (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2)))))) b))","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b)))","(* c (- (* c (+ (* -1 (/ a (pow b 3))) (* c (+ (* -2 (/ (pow a 2) (pow b 5))) (* -1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (/ 1 b)))","(* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -2 (/ (pow a 2) (pow b 3))) (* c (+ (* -4 (/ (pow a 3) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b))))))))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(+ (* c (+ (* -1/2 (* b (* c (+ (* -16 (/ (pow a 2) (pow b 6))) (* 4 (/ (pow a 2) (pow b 6))))))) (* 2 (/ a (pow b 3))))) (/ 1 b))","(+ (* c (+ (* 2 (/ a (pow b 3))) (* c (+ (* -1/2 (* b (* c (+ (* -64 (/ (pow a 3) (pow b 8))) (* -2 (/ (* a (+ (* -16 (/ (pow a 2) (pow b 6))) (* 4 (/ (pow a 2) (pow b 6))))) (pow b 2))))))) (* -1/2 (* b (+ (* -16 (/ (pow a 2) (pow b 6))) (* 4 (/ (pow a 2) (pow b 6)))))))))) (/ 1 b))","(+ (* c (- (* 16 (/ (* (pow a 2) c) (pow b 6))) (* -4 (/ a (pow b 4))))) (/ 1 (pow b 2)))","(+ (* c (- (* c (- (* 64 (/ (* (pow a 3) c) (pow b 8))) (* -16 (/ (pow a 2) (pow b 6))))) (* -4 (/ a (pow b 4))))) (/ 1 (pow b 2)))","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))) (/ b c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* c (+ (* -4 a) (/ (pow b 2) c)))","(+ (* -1/2 (* (sqrt (/ a (pow c 7))) (/ (+ (* 1/1024 (/ (* (pow b 4) c) (* (pow a 3) (pow (sqrt -1/4) 2)))) (* 1/256 (/ (pow b 6) (pow a 4)))) (sqrt -1/4)))) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4)))))","(/ (- (* -1/16 (/ (pow b 2) (* (pow a 2) c))) (* 1/4 (/ 1 a))) c)","(/ (- (* -1/64 (/ (pow b 4) (* (pow a 3) (pow c 2)))) (+ (* 1/16 (/ (pow b 2) (* (pow a 2) c))) (* 1/4 (/ 1 a)))) c)","(/ (- (* -1/256 (/ (pow b 6) (* (pow a 4) (pow c 3)))) (+ (* 1/64 (/ (pow b 4) (* (pow a 3) (pow c 2)))) (+ (* 1/16 (/ (pow b 2) (* (pow a 2) c))) (* 1/4 (/ 1 a))))) c)","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* -1 (* c (+ (* -1 (/ (pow b 2) c)) (* 4 a))))","(+ (* -1 (/ (+ (* 1/64 (* (sqrt (/ c (pow a 5))) (* (pow b 4) (sqrt -1)))) (* (sqrt (/ a c)) (* (sqrt -1) (+ (* -1/256 (/ (* (pow b 4) c) (pow a 3))) (* 1/256 (/ (pow b 6) (pow a 4))))))) (pow c 3))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (/ (+ (* 1/16 (/ (pow b 2) (* (pow a 2) c))) (* 1/4 (/ 1 a))) c))","(* -1 (/ (+ (* -1 (/ (- (* -1/64 (/ (pow b 4) (* (pow a 3) c))) (* 1/16 (/ (pow b 2) (pow a 2)))) c)) (* 1/4 (/ 1 a))) c))","(* -1 (/ (+ (* -1 (/ (- (* -1 (/ (- (* 1/256 (/ (pow b 6) (* (pow a 4) c))) (* -1/64 (/ (pow b 4) (pow a 3)))) c)) (* 1/16 (/ (pow b 2) (pow a 2)))) c)) (* 1/4 (/ 1 a))) c))"]],"series":[[3.76708984375,"((/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (sqrt (+ (* -4 (* c a)) (* b b))) (+ (* -4 (* c a)) (* b b)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (neg b) a) (neg b) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* (/ a b) -2) c) (* (/ a b) -2) (* (/ 1/2 a) (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (/ 1/2 a) (/ (+ (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (* 2 a)) (+ (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b))))) (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))) (/ 1 (+ (* -4 (* c a)) (* b b))))","c","-inf"],[4.866943359375,"((/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (sqrt (+ (* -4 (* c a)) (* b b))) (+ (* -4 (* c a)) (* b b)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (neg b) a) (neg b) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* (/ a b) -2) c) (* (/ a b) -2) (* (/ 1/2 a) (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (/ 1/2 a) (/ (+ (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (* 2 a)) (+ (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b))))) (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))) (/ 1 (+ (* -4 (* c a)) (* b b))))","c","inf"],[5.4169921875,"((/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (sqrt (+ (* -4 (* c a)) (* b b))) (+ (* -4 (* c a)) (* b b)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (neg b) a) (neg b) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* (/ a b) -2) c) (* (/ a b) -2) (* (/ 1/2 a) (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (/ 1/2 a) (/ (+ (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (* 2 a)) (+ (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b))))) (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))) (/ 1 (+ (* -4 (* c a)) (* b b))))","c","0"],[3.01416015625,"((/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (sqrt (+ (* -4 (* c a)) (* b b))) (+ (* -4 (* c a)) (* b b)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (neg b) a) (neg b) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* (/ a b) -2) c) (* (/ a b) -2) (* (/ 1/2 a) (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (/ 1/2 a) (/ (+ (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (* 2 a)) (+ (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b))))) (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))) (/ 1 (+ (* -4 (* c a)) (* b b))))","b","-inf"],[5.945068359375,"((/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (sqrt (+ (* -4 (* c a)) (* b b))) (+ (* -4 (* c a)) (* b b)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (neg b) a) (neg b) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* (/ a b) -2) c) (* (/ a b) -2) (* (/ 1/2 a) (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (/ 1/2 a) (/ (+ (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (* 2 a)) (+ (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b))))) (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))) (/ 1 (+ (* -4 (* c a)) (* b b))))","b","inf"],[4.90283203125,"((/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (sqrt (+ (* -4 (* c a)) (* b b))) (+ (* -4 (* c a)) (* b b)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (neg b) a) (neg b) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* (/ a b) -2) c) (* (/ a b) -2) (* (/ 1/2 a) (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (/ 1/2 a) (/ (+ (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (* 2 a)) (+ (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b))))) (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))) (/ 1 (+ (* -4 (* c a)) (* b b))))","b","0"],[3.98681640625,"((/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (sqrt (+ (* -4 (* c a)) (* b b))) (+ (* -4 (* c a)) (* b b)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (neg b) a) (neg b) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* (/ a b) -2) c) (* (/ a b) -2) (* (/ 1/2 a) (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (/ 1/2 a) (/ (+ (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (* 2 a)) (+ (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b))))) (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))) (/ 1 (+ (* -4 (* c a)) (* b b))))","a","-inf"],[10.115966796875,"((/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (sqrt (+ (* -4 (* c a)) (* b b))) (+ (* -4 (* c a)) (* b b)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (neg b) a) (neg b) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* (/ a b) -2) c) (* (/ a b) -2) (* (/ 1/2 a) (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (/ 1/2 a) (/ (+ (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (* 2 a)) (+ (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b))))) (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))) (/ 1 (+ (* -4 (* c a)) (* b b))))","a","inf"],[5.23583984375,"((/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (sqrt (+ (* -4 (* c a)) (* b b))) (+ (* -4 (* c a)) (* b b)) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (neg b) a) (neg b) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* (* (/ a b) -2) c) (* (/ a b) -2) (* (/ 1/2 a) (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (/ 1/2 a) (/ (+ (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (* 2 a)) (+ (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b))))) (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))) (/ 1 (+ (* -4 (* c a)) (* b b))))","a","0"]],"time":52.866943359375,"type":"series"},{"count":[[149,148]],"egraph":[[0,8546,4394,0.121427856],[1,2878,4612,0.035289616],[0,896,4702,0.012471316]],"inputs":[["(* -1 (/ c b))","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","(+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3))))))","(+ (* -1 (/ c b)) (* a (+ (* -1 (/ (pow c 2) (pow b 3))) (* a (+ (* -2 (/ (pow c 3) (pow b 5))) (* -1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","(* -2 (/ (* a c) b))","(* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b))))))))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* -1 (/ b a))","(* -2 (/ a b))","(/ 1/2 a)","(/ 1 b)","(+ (* 2 (/ (* a c) (pow b 3))) (/ 1 b))","(+ (* a (+ (* -1/2 (* a (* b (+ (* -16 (/ (pow c 2) (pow b 6))) (* 4 (/ (pow c 2) (pow b 6))))))) (* 2 (/ c (pow b 3))))) (/ 1 b))","(+ (* a (+ (* 2 (/ c (pow b 3))) (* a (+ (* -1/2 (* a (* b (+ (* -64 (/ (pow c 3) (pow b 8))) (* -2 (/ (* c (+ (* -16 (/ (pow c 2) (pow b 6))) (* 4 (/ (pow c 2) (pow b 6))))) (pow b 2))))))) (* -1/2 (* b (+ (* -16 (/ (pow c 2) (pow b 6))) (* 4 (/ (pow c 2) (pow b 6)))))))))) (/ 1 b))","(/ 1 (pow b 2))","(+ (* 4 (/ (* a c) (pow b 4))) (/ 1 (pow b 2)))","(+ (* a (- (* 16 (/ (* a (pow c 2)) (pow b 6))) (* -4 (/ c (pow b 4))))) (/ 1 (pow b 2)))","(+ (* a (- (* a (- (* 64 (/ (* a (pow c 3)) (pow b 8))) (* -16 (/ (pow c 2) (pow b 6))))) (* -4 (/ c (pow b 4))))) (/ 1 (pow b 2)))","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -4 (* a c))","(* a (+ (* -4 c) (/ (pow b 2) a)))","(* (sqrt (/ 1 (* a c))) (sqrt -1/4))","(+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4)))","(+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4))))","(+ (* -1/2 (* (sqrt (/ c (pow a 7))) (/ (+ (* 1/1024 (/ (* a (pow b 4)) (* (pow c 3) (pow (sqrt -1/4) 2)))) (* 1/256 (/ (pow b 6) (pow c 4)))) (sqrt -1/4)))) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4)))))","(/ -1/4 (* a c))","(/ (- (* -1/16 (/ (pow b 2) (* a (pow c 2)))) (* 1/4 (/ 1 c))) a)","(/ (- (* -1/64 (/ (pow b 4) (* (pow a 2) (pow c 3)))) (+ (* 1/16 (/ (pow b 2) (* a (pow c 2)))) (* 1/4 (/ 1 c)))) a)","(/ (- (* -1/256 (/ (pow b 6) (* (pow a 3) (pow c 4)))) (+ (* 1/64 (/ (pow b 4) (* (pow a 2) (pow c 3)))) (+ (* 1/16 (/ (pow b 2) (* a (pow c 2)))) (* 1/4 (/ 1 c))))) a)","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(* -1 (* a (+ (* -1 (/ (pow b 2) a)) (* 4 c))))","(* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))","(+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(+ (* -1 (/ (+ (* 1/64 (* (sqrt (/ a (pow c 5))) (* (pow b 4) (sqrt -1)))) (* (sqrt (/ c a)) (* (sqrt -1) (+ (* -1/256 (/ (* a (pow b 4)) (pow c 3))) (* 1/256 (/ (pow b 6) (pow c 4))))))) (pow a 3))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (/ (+ (* 1/16 (/ (pow b 2) (* a (pow c 2)))) (* 1/4 (/ 1 c))) a))","(* -1 (/ (+ (* -1 (/ (- (* -1/64 (/ (pow b 4) (* a (pow c 3)))) (* 1/16 (/ (pow b 2) (pow c 2)))) a)) (* 1/4 (/ 1 c))) a))","(* -1 (/ (+ (* -1 (/ (- (* -1 (/ (- (* 1/256 (/ (pow b 6) (* a (pow c 4)))) (* -1/64 (/ (pow b 4) (pow c 3)))) a)) (* 1/16 (/ (pow b 2) (pow c 2)))) a)) (* 1/4 (/ 1 c))) a))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(* -1 b)","(+ (* (sqrt (/ 1 (* a c))) (sqrt -1/4)) (* (pow b 2) (+ (* -1/2 (* (sqrt (* a c)) (/ (* (pow b 2) (+ (* 1/1024 (/ 1 (* (pow a 3) (* (pow c 3) (pow (sqrt -1/4) 2))))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3)))))) (sqrt -1/4)))) (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (sqrt -1/4)))))))","(+ (* (sqrt (/ 1 (* a c))) (sqrt -1/4)) (* (pow b 2) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (sqrt -1/4)))) (* (pow b 2) (+ (* -1/2 (* (sqrt (* a c)) (/ (* (pow b 2) (+ (* 1/32 (/ (+ (* 1/1024 (/ 1 (* (pow a 3) (* (pow c 3) (pow (sqrt -1/4) 2))))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3))))) (* a (* c (pow (sqrt -1/4) 2))))) (* 1/256 (/ 1 (* (pow a 4) (pow c 4)))))) (sqrt -1/4)))) (* -1/2 (* (sqrt (* a c)) (/ (+ (* 1/1024 (/ 1 (* (pow a 3) (* (pow c 3) (pow (sqrt -1/4) 2))))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3))))) (sqrt -1/4)))))))))","(- (* -1/16 (/ (pow b 2) (* (pow a 2) (pow c 2)))) (* 1/4 (/ 1 (* a c))))","(- (* (pow b 2) (- (* -1/64 (/ (pow b 2) (* (pow a 3) (pow c 3)))) (* 1/16 (/ 1 (* (pow a 2) (pow c 2)))))) (* 1/4 (/ 1 (* a c))))","(- (* (pow b 2) (- (* (pow b 2) (- (* -1/256 (/ (pow b 2) (* (pow a 4) (pow c 4)))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3)))))) (* 1/16 (/ 1 (* (pow a 2) (pow c 2)))))) (* 1/4 (/ 1 (* a c))))","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(/ (+ 1 (* 2 (/ (* a c) (pow b 2)))) b)","(/ (+ 1 (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2))))) b)","(/ (+ 1 (+ (* -1/2 (/ (+ (* -64 (* (pow a 3) (pow c 3))) (* -2 (* a (* c (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))))))) (pow b 6))) (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2)))))) b)","(/ (+ 1 (* 4 (/ (* a c) (pow b 2)))) (pow b 2))","(/ (- (+ 1 (* 16 (/ (* (pow a 2) (pow c 2)) (pow b 4)))) (* -4 (/ (* a c) (pow b 2)))) (pow b 2))","(/ (- (+ 1 (* 64 (/ (* (pow a 3) (pow c 3)) (pow b 6)))) (+ (* -16 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* -4 (/ (* a c) (pow b 2))))) (pow b 2))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(* -2 b)","(* -1 (* b (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(/ -1 b)","(* -1 (/ (+ 1 (* 2 (/ (* a c) (pow b 2)))) b))","(* -1 (/ (+ 1 (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2))))) b))","(* -1 (/ (+ 1 (+ (* -1/2 (/ (+ (* -64 (* (pow a 3) (pow c 3))) (* -2 (* a (* c (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))))))) (pow b 6))) (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2)))))) b))","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b)))","(* c (- (* c (+ (* -1 (/ a (pow b 3))) (* c (+ (* -2 (/ (pow a 2) (pow b 5))) (* -1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (/ 1 b)))","(* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -2 (/ (pow a 2) (pow b 3))) (* c (+ (* -4 (/ (pow a 3) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b))))))))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(+ (* c (+ (* -1/2 (* b (* c (+ (* -16 (/ (pow a 2) (pow b 6))) (* 4 (/ (pow a 2) (pow b 6))))))) (* 2 (/ a (pow b 3))))) (/ 1 b))","(+ (* c (+ (* 2 (/ a (pow b 3))) (* c (+ (* -1/2 (* b (* c (+ (* -64 (/ (pow a 3) (pow b 8))) (* -2 (/ (* a (+ (* -16 (/ (pow a 2) (pow b 6))) (* 4 (/ (pow a 2) (pow b 6))))) (pow b 2))))))) (* -1/2 (* b (+ (* -16 (/ (pow a 2) (pow b 6))) (* 4 (/ (pow a 2) (pow b 6)))))))))) (/ 1 b))","(+ (* c (- (* 16 (/ (* (pow a 2) c) (pow b 6))) (* -4 (/ a (pow b 4))))) (/ 1 (pow b 2)))","(+ (* c (- (* c (- (* 64 (/ (* (pow a 3) c) (pow b 8))) (* -16 (/ (pow a 2) (pow b 6))))) (* -4 (/ a (pow b 4))))) (/ 1 (pow b 2)))","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))) (/ b c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* c (+ (* -4 a) (/ (pow b 2) c)))","(+ (* -1/2 (* (sqrt (/ a (pow c 7))) (/ (+ (* 1/1024 (/ (* (pow b 4) c) (* (pow a 3) (pow (sqrt -1/4) 2)))) (* 1/256 (/ (pow b 6) (pow a 4)))) (sqrt -1/4)))) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4)))))","(/ (- (* -1/16 (/ (pow b 2) (* (pow a 2) c))) (* 1/4 (/ 1 a))) c)","(/ (- (* -1/64 (/ (pow b 4) (* (pow a 3) (pow c 2)))) (+ (* 1/16 (/ (pow b 2) (* (pow a 2) c))) (* 1/4 (/ 1 a)))) c)","(/ (- (* -1/256 (/ (pow b 6) (* (pow a 4) (pow c 3)))) (+ (* 1/64 (/ (pow b 4) (* (pow a 3) (pow c 2)))) (+ (* 1/16 (/ (pow b 2) (* (pow a 2) c))) (* 1/4 (/ 1 a))))) c)","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* -1 (* c (+ (* -1 (/ (pow b 2) c)) (* 4 a))))","(+ (* -1 (/ (+ (* 1/64 (* (sqrt (/ c (pow a 5))) (* (pow b 4) (sqrt -1)))) (* (sqrt (/ a c)) (* (sqrt -1) (+ (* -1/256 (/ (* (pow b 4) c) (pow a 3))) (* 1/256 (/ (pow b 6) (pow a 4))))))) (pow c 3))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (/ (+ (* 1/16 (/ (pow b 2) (* (pow a 2) c))) (* 1/4 (/ 1 a))) c))","(* -1 (/ (+ (* -1 (/ (- (* -1/64 (/ (pow b 4) (* (pow a 3) c))) (* 1/16 (/ (pow b 2) (pow a 2)))) c)) (* 1/4 (/ 1 a))) c))","(* -1 (/ (+ (* -1 (/ (- (* -1 (/ (- (* 1/256 (/ (pow b 6) (* (pow a 4) c))) (* -1/64 (/ (pow b 4) (pow a 3)))) c)) (* 1/16 (/ (pow b 2) (pow a 2)))) c)) (* 1/4 (/ 1 a))) c))"]],"memory":[[-8565536,58312016]],"method":["egg-herbie"],"outputs":[["(* -1 (/ c b))","(/.f64 (neg.f64 c) b)","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","(neg.f64 (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)))","(+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3))))))","(fma.f64 (fma.f64 (*.f64 a #s(literal -2 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (neg.f64 c) c) (pow.f64 b #s(literal 3 binary64)))) a (/.f64 (neg.f64 c) b))","(+ (* -1 (/ c b)) (* a (+ (* -1 (/ (pow c 2) (pow b 3))) (* a (+ (* -2 (/ (pow c 3) (pow b 5))) (* -1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) (*.f64 #s(literal 20 binary64) a)) b) #s(literal -1/4 binary64) (/.f64 (*.f64 #s(literal -2 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 5 binary64)))) a (/.f64 (*.f64 (neg.f64 c) c) (pow.f64 b #s(literal 3 binary64)))) a (/.f64 (neg.f64 c) b))","(* -2 (/ (* a c) b))","(*.f64 (*.f64 a (/.f64 c b)) #s(literal -2 binary64))","(* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))","(*.f64 (*.f64 #s(literal -2 binary64) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b))) a)","(* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal -2 binary64) (*.f64 c c)) (pow.f64 b #s(literal 3 binary64)))) a (*.f64 #s(literal -2 binary64) (/.f64 c b))) a)","(* a (+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) (*.f64 #s(literal 20 binary64) a)) b) (/.f64 (*.f64 #s(literal -4 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 5 binary64)))) a (/.f64 (*.f64 #s(literal -2 binary64) (*.f64 c c)) (pow.f64 b #s(literal 3 binary64)))) a (*.f64 #s(literal -2 binary64) (/.f64 c b))) a)","b","(+ b (* -2 (/ (* a c) b)))","(fma.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 c b) b)","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(fma.f64 (*.f64 #s(literal -2 binary64) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b))) a b)","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 #s(literal -2 binary64) (*.f64 c c)) (pow.f64 b #s(literal 3 binary64)))) a (*.f64 #s(literal -2 binary64) (/.f64 c b))) a b)","(pow b 2)","(*.f64 b b)","(+ (* -4 (* a c)) (pow b 2))","(fma.f64 #s(literal -4 binary64) (*.f64 a c) (*.f64 b b))","(* -1 (/ b a))","(/.f64 (neg.f64 b) a)","(* -2 (/ a b))","(*.f64 (/.f64 a b) #s(literal -2 binary64))","(/ 1/2 a)","(/.f64 #s(literal 1/2 binary64) a)","(/ 1 b)","(/.f64 #s(literal 1 binary64) b)","(+ (* 2 (/ (* a c) (pow b 3))) (/ 1 b))","(fma.f64 a (*.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64)) (/.f64 #s(literal 1 binary64) b))","(+ (* a (+ (* -1/2 (* a (* b (+ (* -16 (/ (pow c 2) (pow b 6))) (* 4 (/ (pow c 2) (pow b 6))))))) (* 2 (/ c (pow b 3))))) (/ 1 b))","(fma.f64 (fma.f64 (*.f64 a #s(literal -1/2 binary64)) (*.f64 (/.f64 (*.f64 c c) (pow.f64 b #s(literal 6 binary64))) (*.f64 #s(literal -12 binary64) b)) (*.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64))) a (/.f64 #s(literal 1 binary64) b))","(+ (* a (+ (* 2 (/ c (pow b 3))) (* a (+ (* -1/2 (* a (* b (+ (* -64 (/ (pow c 3) (pow b 8))) (* -2 (/ (* c (+ (* -16 (/ (pow c 2) (pow b 6))) (* 4 (/ (pow c 2) (pow b 6))))) (pow b 2))))))) (* -1/2 (* b (+ (* -16 (/ (pow c 2) (pow b 6))) (* 4 (/ (pow c 2) (pow b 6)))))))))) (/ 1 b))","(fma.f64 (fma.f64 (*.f64 a #s(literal -1/2 binary64)) (fma.f64 (*.f64 b a) (fma.f64 (/.f64 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b #s(literal 6 binary64))) (*.f64 #s(literal -12 binary64) c)) (*.f64 b b)) #s(literal -2 binary64) (/.f64 (*.f64 #s(literal -64 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 8 binary64)))) (*.f64 (/.f64 (*.f64 c c) (pow.f64 b #s(literal 6 binary64))) (*.f64 #s(literal -12 binary64) b))) (*.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64))) a (/.f64 #s(literal 1 binary64) b))","(/ 1 (pow b 2))","(/.f64 #s(literal 1 binary64) (*.f64 b b))","(+ (* 4 (/ (* a c) (pow b 4))) (/ 1 (pow b 2)))","(fma.f64 (*.f64 #s(literal 4 binary64) a) (/.f64 c (pow.f64 b #s(literal 4 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 b b)))","(+ (* a (- (* 16 (/ (* a (pow c 2)) (pow b 6))) (* -4 (/ c (pow b 4))))) (/ 1 (pow b 2)))","(fma.f64 (fma.f64 (*.f64 #s(literal 16 binary64) a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 6 binary64))) (*.f64 (/.f64 c (pow.f64 b #s(literal 4 binary64))) #s(literal 4 binary64))) a (/.f64 #s(literal 1 binary64) (*.f64 b b)))","(+ (* a (- (* a (- (* 64 (/ (* a (pow c 3)) (pow b 8))) (* -16 (/ (pow c 2) (pow b 6))))) (* -4 (/ c (pow b 4))))) (/ 1 (pow b 2)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 64 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 8 binary64))) (*.f64 (/.f64 (*.f64 c c) (pow.f64 b #s(literal 6 binary64))) #s(literal 16 binary64))) a (*.f64 (/.f64 c (pow.f64 b #s(literal 4 binary64))) #s(literal 4 binary64))) a (/.f64 #s(literal 1 binary64) (*.f64 b b)))","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/4 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(fma.f64 (*.f64 #s(literal -1/16 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/4 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))))","(* (sqrt (* a c)) (sqrt -4))","(*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b) a)) a)","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b) a))) a)","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a)))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b) a)))) a)","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))))) a)","(* -4 (* a c))","(*.f64 #s(literal -4 binary64) (*.f64 a c))","(* a (+ (* -4 c) (/ (pow b 2) a)))","(*.f64 (fma.f64 #s(literal -4 binary64) c (/.f64 (*.f64 b b) a)) a)","(* (sqrt (/ 1 (* a c))) (sqrt -1/4))","(*.f64 (sqrt.f64 #s(literal -1/4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))))","(+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4)))","(fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -1/4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/32 binary64) (*.f64 (sqrt.f64 #s(literal -1/4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c)))))","(+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4))))","(fma.f64 (*.f64 #s(literal -1/128 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 #s(literal -1/4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -1/4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/32 binary64) (*.f64 (sqrt.f64 #s(literal -1/4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))))))","(+ (* -1/2 (* (sqrt (/ c (pow a 7))) (/ (+ (* 1/1024 (/ (* a (pow b 4)) (* (pow c 3) (pow (sqrt -1/4) 2)))) (* 1/256 (/ (pow b 6) (pow c 4)))) (sqrt -1/4)))) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 7 binary64))))) (/.f64 (fma.f64 (*.f64 #s(literal -1/256 binary64) a) (/.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 c #s(literal 3 binary64))) (/.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 b #s(literal 6 binary64))) (pow.f64 c #s(literal 4 binary64)))) (sqrt.f64 #s(literal -1/4 binary64))) (fma.f64 (*.f64 #s(literal -1/128 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 #s(literal -1/4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -1/4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/32 binary64) (*.f64 (sqrt.f64 #s(literal -1/4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c)))))))","(/ -1/4 (* a c))","(/.f64 (/.f64 #s(literal -1/4 binary64) a) c)","(/ (- (* -1/16 (/ (pow b 2) (* a (pow c 2)))) (* 1/4 (/ 1 c))) a)","(/.f64 (fma.f64 (/.f64 #s(literal -1/16 binary64) (*.f64 c c)) (/.f64 (*.f64 b b) a) (/.f64 #s(literal -1/4 binary64) c)) a)","(/ (- (* -1/64 (/ (pow b 4) (* (pow a 2) (pow c 3)))) (+ (* 1/16 (/ (pow b 2) (* a (pow c 2)))) (* 1/4 (/ 1 c)))) a)","(/.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/64 binary64) (*.f64 a a)) (/.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 c #s(literal 3 binary64))) (*.f64 (/.f64 #s(literal -1/16 binary64) (*.f64 c c)) (/.f64 (*.f64 b b) a))) (/.f64 #s(literal 1/4 binary64) c)) a)","(/ (- (* -1/256 (/ (pow b 6) (* (pow a 3) (pow c 4)))) (+ (* 1/64 (/ (pow b 4) (* (pow a 2) (pow c 3)))) (+ (* 1/16 (/ (pow b 2) (* a (pow c 2)))) (* 1/4 (/ 1 c))))) a)","(/.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/256 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 c #s(literal 4 binary64))) (/.f64 (*.f64 #s(literal -1/64 binary64) (pow.f64 b #s(literal 4 binary64))) (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a))) (fma.f64 (/.f64 #s(literal 1/16 binary64) (*.f64 c c)) (/.f64 (*.f64 b b) a) (/.f64 #s(literal 1/4 binary64) c))) a)","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(-.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 #s(literal 1/2 binary64) b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 #s(literal 1/2 binary64) b (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/128 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)))) (neg.f64 a))) a)))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 a c)))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))","(* -1 (* a (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/4 binary64)) (neg.f64 b)) (neg.f64 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/64 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))) (neg.f64 a)) b) (neg.f64 a))))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))))","(* -1 (* a (+ (* -1 (/ (pow b 2) a)) (* 4 c))))","(*.f64 (neg.f64 a) (fma.f64 #s(literal 4 binary64) c (/.f64 (*.f64 (neg.f64 b) b) a)))","(* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))","(*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))))","(+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(fma.f64 (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b) b) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/16 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c)))))","(+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(fma.f64 (*.f64 #s(literal -1/16 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b) b)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal -1/64 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))))))","(+ (* -1 (/ (+ (* 1/64 (* (sqrt (/ a (pow c 5))) (* (pow b 4) (sqrt -1)))) (* (sqrt (/ c a)) (* (sqrt -1) (+ (* -1/256 (/ (* a (pow b 4)) (pow c 3))) (* 1/256 (/ (pow b 6) (pow c 4))))))) (pow a 3))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(fma.f64 (*.f64 #s(literal -1/16 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b) b)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a (pow.f64 c #s(literal 5 binary64)))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/64 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/256 binary64) a) (/.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 c #s(literal 3 binary64))) (/.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 b #s(literal 6 binary64))) (pow.f64 c #s(literal 4 binary64)))) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))) (neg.f64 (pow.f64 a #s(literal 3 binary64))))))","(* -1 (/ (+ (* 1/16 (/ (pow b 2) (* a (pow c 2)))) (* 1/4 (/ 1 c))) a))","(/.f64 (fma.f64 (/.f64 #s(literal 1/16 binary64) (*.f64 c c)) (/.f64 (*.f64 b b) a) (/.f64 #s(literal 1/4 binary64) c)) (neg.f64 a))","(* -1 (/ (+ (* -1 (/ (- (* -1/64 (/ (pow b 4) (* a (pow c 3)))) (* 1/16 (/ (pow b 2) (pow c 2)))) a)) (* 1/4 (/ 1 c))) a))","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) c) (/.f64 (fma.f64 (/.f64 #s(literal -1/64 binary64) (pow.f64 c #s(literal 3 binary64))) (/.f64 (pow.f64 b #s(literal 4 binary64)) a) (*.f64 (*.f64 (/.f64 b c) (/.f64 b c)) #s(literal -1/16 binary64))) a)) (neg.f64 a))","(* -1 (/ (+ (* -1 (/ (- (* -1 (/ (- (* 1/256 (/ (pow b 6) (* a (pow c 4)))) (* -1/64 (/ (pow b 4) (pow c 3)))) a)) (* 1/16 (/ (pow b 2) (pow c 2)))) a)) (* 1/4 (/ 1 c))) a))","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) c) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 #s(literal 1/256 binary64) (pow.f64 c #s(literal 4 binary64))) (/.f64 (pow.f64 b #s(literal 6 binary64)) a) (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 c #s(literal 3 binary64))) #s(literal 1/64 binary64))) a) #s(literal -1 binary64) (*.f64 (*.f64 (/.f64 b c) (/.f64 b c)) #s(literal -1/16 binary64))) a)) (neg.f64 a))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -1/2 binary64) a)) b))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/16 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/4 binary64))) b (/.f64 #s(literal -1/2 binary64) a)) b))","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (neg.f64 b))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) #s(literal -1 binary64)) b (*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) b #s(literal -1 binary64)) b (*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (*.f64 b b) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) #s(literal -1/8 binary64))) (*.f64 b b) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))","(* -1 b)","(neg.f64 b)","(+ (* (sqrt (/ 1 (* a c))) (sqrt -1/4)) (* (pow b 2) (+ (* -1/2 (* (sqrt (* a c)) (/ (* (pow b 2) (+ (* 1/1024 (/ 1 (* (pow a 3) (* (pow c 3) (pow (sqrt -1/4) 2))))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3)))))) (sqrt -1/4)))) (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (sqrt -1/4)))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 b b) (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (*.f64 a c)))) (/.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64)))) (/.f64 #s(literal 1/1024 binary64) (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/4 binary64)) (pow.f64 c #s(literal 3 binary64))))) (sqrt.f64 #s(literal -1/4 binary64))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (sqrt.f64 #s(literal -1/4 binary64))) #s(literal -1/32 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 #s(literal -1/4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c)))))","(+ (* (sqrt (/ 1 (* a c))) (sqrt -1/4)) (* (pow b 2) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (sqrt -1/4)))) (* (pow b 2) (+ (* -1/2 (* (sqrt (* a c)) (/ (* (pow b 2) (+ (* 1/32 (/ (+ (* 1/1024 (/ 1 (* (pow a 3) (* (pow c 3) (pow (sqrt -1/4) 2))))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3))))) (* a (* c (pow (sqrt -1/4) 2))))) (* 1/256 (/ 1 (* (pow a 4) (pow c 4)))))) (sqrt -1/4)))) (* -1/2 (* (sqrt (* a c)) (/ (+ (* 1/1024 (/ 1 (* (pow a 3) (* (pow c 3) (pow (sqrt -1/4) 2))))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3))))) (sqrt -1/4)))))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (*.f64 a c))) (fma.f64 (*.f64 b b) (/.f64 (fma.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64)))) (/.f64 #s(literal 1/1024 binary64) (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/4 binary64)) (pow.f64 c #s(literal 3 binary64))))) (*.f64 #s(literal -1/4 binary64) (*.f64 a c))) #s(literal 1/32 binary64) (/.f64 #s(literal 1/256 binary64) (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))))) (sqrt.f64 #s(literal -1/4 binary64))) (/.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64)))) (/.f64 #s(literal 1/1024 binary64) (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/4 binary64)) (pow.f64 c #s(literal 3 binary64))))) (sqrt.f64 #s(literal -1/4 binary64))))) (*.f64 b b) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (sqrt.f64 #s(literal -1/4 binary64))) #s(literal -1/32 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 #s(literal -1/4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c)))))","(- (* -1/16 (/ (pow b 2) (* (pow a 2) (pow c 2)))) (* 1/4 (/ 1 (* a c))))","(fma.f64 (/.f64 #s(literal -1/16 binary64) (*.f64 a a)) (*.f64 (/.f64 b c) (/.f64 b c)) (/.f64 (/.f64 #s(literal -1/4 binary64) a) c))","(- (* (pow b 2) (- (* -1/64 (/ (pow b 2) (* (pow a 3) (pow c 3)))) (* 1/16 (/ 1 (* (pow a 2) (pow c 2)))))) (* 1/4 (/ 1 (* a c))))","(fma.f64 (fma.f64 (*.f64 (/.f64 b (pow.f64 a #s(literal 3 binary64))) (/.f64 b (pow.f64 c #s(literal 3 binary64)))) #s(literal -1/64 binary64) (/.f64 #s(literal -1/16 binary64) (*.f64 (*.f64 (*.f64 c c) a) a))) (*.f64 b b) (/.f64 (/.f64 #s(literal -1/4 binary64) a) c))","(- (* (pow b 2) (- (* (pow b 2) (- (* -1/256 (/ (pow b 2) (* (pow a 4) (pow c 4)))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3)))))) (* 1/16 (/ 1 (* (pow a 2) (pow c 2)))))) (* 1/4 (/ 1 (* a c))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 #s(literal -1/256 binary64) (pow.f64 a #s(literal 4 binary64))) (/.f64 (*.f64 b b) (pow.f64 c #s(literal 4 binary64))) (/.f64 #s(literal -1/64 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))))) (*.f64 b b) (/.f64 #s(literal -1/16 binary64) (*.f64 (*.f64 (*.f64 c c) a) a))) (*.f64 b b) (/.f64 (/.f64 #s(literal -1/4 binary64) a) c))","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(/.f64 (neg.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c)) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b)","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (neg.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal -1/4 binary64) a) (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (*.f64 (pow.f64 c #s(literal 4 binary64)) #s(literal 20 binary64))) (pow.f64 b #s(literal 6 binary64))) (neg.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c)))) b)","(/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/.f64 (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b) (*.f64 a c))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b) (*.f64 a c)))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b)","(/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (*.f64 (pow.f64 c #s(literal 4 binary64)) #s(literal 20 binary64))) (pow.f64 b #s(literal 6 binary64))) #s(literal -1/2 binary64) (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b) (*.f64 a c))))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(*.f64 (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (/.f64 c b) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(*.f64 (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 a b) (/.f64 c b))) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 a b) (/.f64 c b))) #s(literal 1 binary64))) b)","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(*.f64 (fma.f64 (/.f64 (*.f64 #s(literal -4 binary64) a) b) (/.f64 c b) #s(literal 1 binary64)) (*.f64 b b))","(/ (+ 1 (* 2 (/ (* a c) (pow b 2)))) b)","(/.f64 (fma.f64 (/.f64 #s(literal 2 binary64) b) (*.f64 a (/.f64 c b)) #s(literal 1 binary64)) b)","(/ (+ 1 (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2))))) b)","(/.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) a) a) #s(literal -12 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1/2 binary64) (fma.f64 (/.f64 #s(literal 2 binary64) b) (*.f64 a (/.f64 c b)) #s(literal 1 binary64))) b)","(/ (+ 1 (+ (* -1/2 (/ (+ (* -64 (* (pow a 3) (pow c 3))) (* -2 (* a (* c (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))))))) (pow b 6))) (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2)))))) b)","(/.f64 (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (*.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) #s(literal -12 binary64))) a (*.f64 (*.f64 #s(literal -64 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b #s(literal 6 binary64))) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) a) a) #s(literal -12 binary64)) (pow.f64 b #s(literal 4 binary64)))) (fma.f64 (/.f64 #s(literal 2 binary64) b) (*.f64 a (/.f64 c b)) #s(literal 1 binary64))) b)","(/ (+ 1 (* 4 (/ (* a c) (pow b 2)))) (pow b 2))","(/.f64 (fma.f64 (/.f64 #s(literal 4 binary64) b) (*.f64 a (/.f64 c b)) #s(literal 1 binary64)) (*.f64 b b))","(/ (- (+ 1 (* 16 (/ (* (pow a 2) (pow c 2)) (pow b 4)))) (* -4 (/ (* a c) (pow b 2)))) (pow b 2))","(/.f64 (fma.f64 (*.f64 #s(literal 16 binary64) (*.f64 a a)) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal 4 binary64) b) (*.f64 a (/.f64 c b)) #s(literal 1 binary64))) (*.f64 b b))","(/ (- (+ 1 (* 64 (/ (* (pow a 3) (pow c 3)) (pow b 6)))) (+ (* -16 (/ (* (pow a 2) (pow c 2)) (pow b 4))) (* -4 (/ (* a c) (pow b 2))))) (pow b 2))","(/.f64 (-.f64 (fma.f64 (*.f64 #s(literal 64 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 1 binary64)) (fma.f64 (/.f64 (*.f64 #s(literal -4 binary64) a) b) (/.f64 c b) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) a) a) #s(literal -16 binary64)) (pow.f64 b #s(literal 4 binary64))))) (*.f64 b b))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(*.f64 (neg.f64 b) (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b #s(literal 4 binary64)))) (/.f64 c (*.f64 b b))))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b #s(literal 4 binary64)))) (/.f64 c (*.f64 b b)))))","(* -2 b)","(*.f64 #s(literal -2 binary64) b)","(* -1 (* b (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (/.f64 c b) #s(literal 2 binary64)))","(* -1 (* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (neg.f64 b) (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 a b) (/.f64 c b))) #s(literal 2 binary64)))","(* -1 (* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 a b) (/.f64 c b))) #s(literal 2 binary64))))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (/.f64 c b) #s(literal 1 binary64)))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (neg.f64 b) (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 a b) (/.f64 c b))) #s(literal 1 binary64)))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(*.f64 (neg.f64 b) (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 a b) (/.f64 c b))) #s(literal 1 binary64))))","(/ -1 b)","(/.f64 #s(literal -1 binary64) b)","(* -1 (/ (+ 1 (* 2 (/ (* a c) (pow b 2)))) b))","(/.f64 (fma.f64 (/.f64 #s(literal 2 binary64) b) (*.f64 a (/.f64 c b)) #s(literal 1 binary64)) (neg.f64 b))","(* -1 (/ (+ 1 (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2))))) b))","(/.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) a) a) #s(literal -12 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1/2 binary64) (fma.f64 (/.f64 #s(literal 2 binary64) b) (*.f64 a (/.f64 c b)) #s(literal 1 binary64))) (neg.f64 b))","(* -1 (/ (+ 1 (+ (* -1/2 (/ (+ (* -64 (* (pow a 3) (pow c 3))) (* -2 (* a (* c (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))))))) (pow b 6))) (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2)))))) b))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (*.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) #s(literal -12 binary64))) a (*.f64 (*.f64 #s(literal -64 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b #s(literal 6 binary64))) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) a) a) #s(literal -12 binary64)) (pow.f64 b #s(literal 4 binary64)))) (fma.f64 (/.f64 #s(literal 2 binary64) b) (*.f64 a (/.f64 c b)) #s(literal 1 binary64))) (neg.f64 b))","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(*.f64 (neg.f64 (fma.f64 a (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) b))) c)","(* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b)))","(*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 (neg.f64 a) (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal -1 binary64) b)) c)","(* c (- (* c (+ (* -1 (/ a (pow b 3))) (* c (+ (* -2 (/ (pow a 2) (pow b 5))) (* -1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (/ 1 b)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) (*.f64 #s(literal 20 binary64) c)) (*.f64 b a)) #s(literal -1/4 binary64) (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (pow.f64 b #s(literal 5 binary64)))) c (/.f64 (neg.f64 a) (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal -1 binary64) b)) c)","(* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))","(*.f64 (*.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 a b))) c)","(* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c)","(* c (+ (* -2 (/ a b)) (* c (+ (* -2 (/ (pow a 2) (pow b 3))) (* c (+ (* -4 (/ (pow a 3) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) (*.f64 #s(literal 20 binary64) c)) b) #s(literal -1/2 binary64) (/.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 b #s(literal 5 binary64)))) c (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c)","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(fma.f64 (*.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 a b))) c b)","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c b)","(+ (* c (+ (* -1/2 (* b (* c (+ (* -16 (/ (pow a 2) (pow b 6))) (* 4 (/ (pow a 2) (pow b 6))))))) (* 2 (/ a (pow b 3))))) (/ 1 b))","(fma.f64 (fma.f64 (*.f64 c #s(literal -1/2 binary64)) (*.f64 (/.f64 (*.f64 a a) (pow.f64 b #s(literal 6 binary64))) (*.f64 #s(literal -12 binary64) b)) (*.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64))) c (/.f64 #s(literal 1 binary64) b))","(+ (* c (+ (* 2 (/ a (pow b 3))) (* c (+ (* -1/2 (* b (* c (+ (* -64 (/ (pow a 3) (pow b 8))) (* -2 (/ (* a (+ (* -16 (/ (pow a 2) (pow b 6))) (* 4 (/ (pow a 2) (pow b 6))))) (pow b 2))))))) (* -1/2 (* b (+ (* -16 (/ (pow a 2) (pow b 6))) (* 4 (/ (pow a 2) (pow b 6)))))))))) (/ 1 b))","(fma.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) b) (fma.f64 (/.f64 (*.f64 a a) (pow.f64 b #s(literal 6 binary64))) #s(literal -12 binary64) (*.f64 (fma.f64 (/.f64 (*.f64 (/.f64 (*.f64 a a) (pow.f64 b #s(literal 6 binary64))) (*.f64 #s(literal -12 binary64) a)) (*.f64 b b)) #s(literal -2 binary64) (/.f64 (*.f64 #s(literal -64 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 b #s(literal 8 binary64)))) c))) c (*.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64))) c (/.f64 #s(literal 1 binary64) b))","(+ (* c (- (* 16 (/ (* (pow a 2) c) (pow b 6))) (* -4 (/ a (pow b 4))))) (/ 1 (pow b 2)))","(fma.f64 (fma.f64 (*.f64 #s(literal 16 binary64) (*.f64 a a)) (/.f64 c (pow.f64 b #s(literal 6 binary64))) (*.f64 (/.f64 a (pow.f64 b #s(literal 4 binary64))) #s(literal 4 binary64))) c (/.f64 #s(literal 1 binary64) (*.f64 b b)))","(+ (* c (- (* c (- (* 64 (/ (* (pow a 3) c) (pow b 8))) (* -16 (/ (pow a 2) (pow b 6))))) (* -4 (/ a (pow b 4))))) (/ 1 (pow b 2)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 64 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 8 binary64))) (*.f64 (/.f64 (*.f64 a a) (pow.f64 b #s(literal 6 binary64))) #s(literal 16 binary64))) c (*.f64 (/.f64 a (pow.f64 b #s(literal 4 binary64))) #s(literal 4 binary64))) c (/.f64 #s(literal 1 binary64) (*.f64 b b)))","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 (/.f64 (/.f64 b a) c) #s(literal -1/2 binary64))) c)","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/4 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 (/.f64 (/.f64 b a) c) #s(literal -1/2 binary64)))) c)","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/4 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 (/.f64 (/.f64 b a) c) #s(literal -1/2 binary64))))) c)","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (neg.f64 b) c)) c)","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (neg.f64 b) c))) c)","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))) (/ b c)))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (neg.f64 b) c)))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))))) c)","(* c (+ (* -4 a) (/ (pow b 2) c)))","(*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)","(+ (* -1/2 (* (sqrt (/ a (pow c 7))) (/ (+ (* 1/1024 (/ (* (pow b 4) c) (* (pow a 3) (pow (sqrt -1/4) 2)))) (* 1/256 (/ (pow b 6) (pow a 4)))) (sqrt -1/4)))) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 a (pow.f64 c #s(literal 7 binary64))))) (/.f64 (fma.f64 (*.f64 #s(literal -1/256 binary64) (pow.f64 b #s(literal 4 binary64))) (/.f64 c (pow.f64 a #s(literal 3 binary64))) (/.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 b #s(literal 6 binary64))) (pow.f64 a #s(literal 4 binary64)))) (sqrt.f64 #s(literal -1/4 binary64))) (fma.f64 (*.f64 #s(literal -1/128 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 #s(literal -1/4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -1/4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/32 binary64) (*.f64 (sqrt.f64 #s(literal -1/4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c)))))))","(/ (- (* -1/16 (/ (pow b 2) (* (pow a 2) c))) (* 1/4 (/ 1 a))) c)","(/.f64 (fma.f64 (/.f64 #s(literal -1/16 binary64) (*.f64 a a)) (/.f64 (*.f64 b b) c) (/.f64 #s(literal -1/4 binary64) a)) c)","(/ (- (* -1/64 (/ (pow b 4) (* (pow a 3) (pow c 2)))) (+ (* 1/16 (/ (pow b 2) (* (pow a 2) c))) (* 1/4 (/ 1 a)))) c)","(/.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/64 binary64) (*.f64 c c)) (/.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 a #s(literal 3 binary64))) (*.f64 (/.f64 #s(literal -1/16 binary64) (*.f64 a a)) (/.f64 (*.f64 b b) c))) (/.f64 #s(literal 1/4 binary64) a)) c)","(/ (- (* -1/256 (/ (pow b 6) (* (pow a 4) (pow c 3)))) (+ (* 1/64 (/ (pow b 4) (* (pow a 3) (pow c 2)))) (+ (* 1/16 (/ (pow b 2) (* (pow a 2) c))) (* 1/4 (/ 1 a))))) c)","(/.f64 (-.f64 (fma.f64 (/.f64 #s(literal -1/256 binary64) (pow.f64 c #s(literal 3 binary64))) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 a #s(literal 4 binary64))) (/.f64 (*.f64 #s(literal -1/64 binary64) (pow.f64 b #s(literal 4 binary64))) (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) c) c))) (fma.f64 (/.f64 #s(literal 1/16 binary64) (*.f64 a a)) (/.f64 (*.f64 b b) c) (/.f64 #s(literal 1/4 binary64) a))) c)","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) c) (/.f64 b a) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (/.f64 (fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/128 binary64)))) (neg.f64 c))) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (/.f64 b c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/4 binary64)) (neg.f64 b)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/64 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))) (neg.f64 c)) b) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64))))) (neg.f64 c))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b b)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/4 binary64)))))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (pow b 2) c)) (* 4 a))))","(*.f64 (fma.f64 #s(literal 4 binary64) a (/.f64 (*.f64 (neg.f64 b) b) c)) (neg.f64 c))","(+ (* -1 (/ (+ (* 1/64 (* (sqrt (/ c (pow a 5))) (* (pow b 4) (sqrt -1)))) (* (sqrt (/ a c)) (* (sqrt -1) (+ (* -1/256 (/ (* (pow b 4) c) (pow a 3))) (* 1/256 (/ (pow b 6) (pow a 4))))))) (pow c 3))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(fma.f64 (*.f64 #s(literal -1/16 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b) b)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/64 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/256 binary64) (pow.f64 b #s(literal 4 binary64))) (/.f64 c (pow.f64 a #s(literal 3 binary64))) (/.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 b #s(literal 6 binary64))) (pow.f64 a #s(literal 4 binary64)))) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)))) (neg.f64 (pow.f64 c #s(literal 3 binary64))))))","(* -1 (/ (+ (* 1/16 (/ (pow b 2) (* (pow a 2) c))) (* 1/4 (/ 1 a))) c))","(/.f64 (fma.f64 (/.f64 #s(literal 1/16 binary64) (*.f64 a a)) (/.f64 (*.f64 b b) c) (/.f64 #s(literal 1/4 binary64) a)) (neg.f64 c))","(* -1 (/ (+ (* -1 (/ (- (* -1/64 (/ (pow b 4) (* (pow a 3) c))) (* 1/16 (/ (pow b 2) (pow a 2)))) c)) (* 1/4 (/ 1 a))) c))","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) a) (/.f64 (fma.f64 (/.f64 #s(literal -1/64 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 b #s(literal 4 binary64)) c) (*.f64 (*.f64 (/.f64 b a) (/.f64 b a)) #s(literal -1/16 binary64))) c)) (neg.f64 c))","(* -1 (/ (+ (* -1 (/ (- (* -1 (/ (- (* 1/256 (/ (pow b 6) (* (pow a 4) c))) (* -1/64 (/ (pow b 4) (pow a 3)))) c)) (* 1/16 (/ (pow b 2) (pow a 2)))) c)) (* 1/4 (/ 1 a))) c))","(/.f64 (-.f64 (/.f64 #s(literal 1/4 binary64) a) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 #s(literal 1/256 binary64) (pow.f64 a #s(literal 4 binary64))) (/.f64 (pow.f64 b #s(literal 6 binary64)) c) (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 a #s(literal 3 binary64))) #s(literal 1/64 binary64))) c) #s(literal -1 binary64) (*.f64 (*.f64 (/.f64 b a) (/.f64 b a)) #s(literal -1/16 binary64))) c)) (neg.f64 c))"]],"stop":[["iter limit",1],["node limit",1]],"time":363.364013671875,"type":"simplify"},{"count":[[18,1609]],"egraph":[[0,8644,196,0.065505381],[2,1613,196,0.034106981],[1,227,196,0.006206523],[0,61,197,0.001791517],[0,40,217,0.000350411]],"inputs":[["(/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))","(-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","(/.f64 (neg.f64 b) a)","(neg.f64 b)","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","#s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c))","(*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)","(*.f64 (/.f64 a b) #s(literal -2 binary64))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(/.f64 #s(literal 1/2 binary64) a)","(/.f64 (+.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) a))","(+.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","(sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))))","(/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))"]],"memory":[[8786704,86577120]],"outputs":[["(*.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(*.f64 (/.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 (/.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(*.f64 (/.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 (/.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(*.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal 2 binary64)) (/.f64 (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) a) (/.f64 (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) a) (/.f64 (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) a) (/.f64 (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) a) (/.f64 (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -2 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) #s(literal -1 binary64)) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))) #s(literal -1 binary64)) (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a) #s(literal 1/2 binary64))","(*.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (/.f64 #s(literal -1 binary64) a))","(*.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))) (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) a))","(*.f64 (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))))","(*.f64 (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 3 binary64)) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))))))","(*.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (/.f64 #s(literal -1 binary64) a))","(*.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(*.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(*.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(*.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))))","(*.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (/.f64 #s(literal 1 binary64) (*.f64 a (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(*.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))) (/.f64 #s(literal 1 binary64) (*.f64 a (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(*.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 a (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(*.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 a (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))))","(*.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal -1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (neg.f64 a))))","(*.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a)))","(*.f64 (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) #s(literal -1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a))))","(*.f64 (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a)))","(*.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 a))))","(*.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (neg.f64 a))))","(*.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a)))","(*.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) a)))","(*.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b))) (/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(*.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 #s(literal 1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))))","(*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64)))","(*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (neg.f64 a)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(*.f64 #s(literal -1 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))","(*.f64 #s(literal 1/2 binary64) (pow.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) #s(literal -1 binary64)))","(*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a))","(*.f64 #s(literal 1/2 binary64) (*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a))","(pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))) (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64))) (-.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b))) (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64))) (-.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))) (-.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b))))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))) (-.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 3 binary64))) (fma.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 (/.f64 #s(literal 1/2 binary64) a) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b))) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b))))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 (/.f64 #s(literal 1/2 binary64) a) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))))))","(/.f64 (neg.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a)) #s(literal -2 binary64))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) a)","(/.f64 (neg.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a))) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))))) (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1/2 binary64))) a)","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 3 binary64)) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))))))","(/.f64 (neg.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))) a)","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))) (neg.f64 (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))))) (neg.f64 (*.f64 (neg.f64 a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 (neg.f64 a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 (neg.f64 a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a)))","(/.f64 (neg.f64 (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) a)))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b)))) (neg.f64 (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))) (neg.f64 (*.f64 a (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))))) (neg.f64 (*.f64 a (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 a (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 a (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) a) (*.f64 #s(literal 2 binary64) (*.f64 b #s(literal 1/2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 b a))) #s(literal 4 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) (*.f64 #s(literal 2 binary64) (/.f64 a b))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) (/.f64 a b))))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal 2 binary64) (neg.f64 b))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal 2 binary64) b)) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) a) (*.f64 a (*.f64 b #s(literal 1/2 binary64)))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 a (/.f64 b a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 a b))) a) (*.f64 a (*.f64 #s(literal 2 binary64) (/.f64 a b))))","(/.f64 (-.f64 (*.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (*.f64 #s(literal -2 binary64) a)) (*.f64 a (neg.f64 b))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 a b)) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 b #s(literal 1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 b a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) (/.f64 a b))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) (/.f64 a b))))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 b))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 b #s(literal 1/2 binary64)))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 b a))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) (/.f64 a b))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) (/.f64 a b))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 b))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) b)) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 b #s(literal 1/2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 b a))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) (/.f64 a b))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 2 binary64) (/.f64 a b))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 b))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a) #s(literal 2 binary64))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (neg.f64 a))","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1/2 binary64)) (neg.f64 a))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64))) (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 3 binary64)) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (neg.f64 a))","(/.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 (neg.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))) (neg.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))) (*.f64 (neg.f64 a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (neg.f64 a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (neg.f64 a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (*.f64 a (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(/.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))) (*.f64 a (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 a (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 a (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal -1/2 binary64)) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal 1/2 binary64)) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) #s(literal -1/2 binary64)) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a)))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) #s(literal 1/2 binary64)) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64)) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64)) (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64)) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64)) (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) a))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b))) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) a)","(/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 a) (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 b (/.f64 #s(literal 1/2 binary64) a))) (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))) (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 3 binary64)) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (*.f64 #s(literal -1/2 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -1/2 binary64) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))) (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 1/2 binary64) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))) (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (neg.f64 a)) (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a)) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a) (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a)) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 a)) (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (neg.f64 a)) (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) a) (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)) (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(/.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)))","(/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))","(neg.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) a) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) a) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) a) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (*.f64 b #s(literal 1/2 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 b #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (neg.f64 b) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 #s(literal -1/2 binary64) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 #s(literal -1/2 binary64) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 #s(literal -1 binary64) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 #s(literal 1/2 binary64) (/.f64 (neg.f64 b) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 b (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))) (/.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))))) (/.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))))))","(-.f64 (/.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(-.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (/.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(-.f64 (/.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","(-.f64 (/.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","(-.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(+.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(+.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(+.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(*.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal 1 binary64))","(pow.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) #s(literal 3 binary64))) (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (fma.f64 (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (*.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 0 binary64) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))) (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))))) (neg.f64 (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))))","(/.f64 (-.f64 (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 b b))) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(/.f64 (-.f64 (*.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))) (*.f64 b (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))))) (*.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))) (*.f64 b (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))))) (*.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) b) (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 b (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 b (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) b) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))))) (*.f64 b (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 b (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) b) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 b)) (*.f64 b (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) b) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) b) (*.f64 b (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (pow.f64 b #s(literal 3 binary64)) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (fma.f64 b b #s(literal 0 binary64)) (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))))) (*.f64 (fma.f64 b b #s(literal 0 binary64)) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (fma.f64 (pow.f64 b #s(literal 3 binary64)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))) (*.f64 (fma.f64 b b #s(literal 0 binary64)) (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))))) (*.f64 (fma.f64 b b #s(literal 0 binary64)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))))","(/.f64 (fma.f64 (pow.f64 b #s(literal 3 binary64)) (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (fma.f64 b b #s(literal 0 binary64)) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 (fma.f64 b b #s(literal 0 binary64)) (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (fma.f64 (pow.f64 b #s(literal 3 binary64)) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))))) (*.f64 (fma.f64 b b #s(literal 0 binary64)) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 (fma.f64 b b #s(literal 0 binary64)) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))))","(/.f64 (fma.f64 (pow.f64 b #s(literal 3 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (fma.f64 b b #s(literal 0 binary64)) #s(literal -1 binary64))) (*.f64 (fma.f64 b b #s(literal 0 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (fma.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) (*.f64 (fma.f64 b b #s(literal 0 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 b b #s(literal 0 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) b (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (neg.f64 b) b))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))) b))","(/.f64 (fma.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (fma.f64 b b #s(literal 0 binary64)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))) (fma.f64 b b #s(literal 0 binary64))))","(/.f64 (fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) b (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))) (*.f64 (neg.f64 b) b))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))) b))","(/.f64 (fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (fma.f64 b b #s(literal 0 binary64)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))) (fma.f64 b b #s(literal 0 binary64))))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) b (*.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (neg.f64 b) b))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) b))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 b b #s(literal 0 binary64)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (fma.f64 b b #s(literal 0 binary64))))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) b (*.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))))) (*.f64 (neg.f64 b) b))) (*.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))))) b))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 b b #s(literal 0 binary64)) (*.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))))) (fma.f64 b b #s(literal 0 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) b (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (neg.f64 b) b))) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) b))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 b b #s(literal 0 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 b b #s(literal 0 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 b b #s(literal 0 binary64)) (*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) (fma.f64 b b #s(literal 0 binary64))))","(/.f64 (+.f64 b (*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) (*.f64 (neg.f64 b) b))) (*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) b))","(/.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (neg.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))) (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))","(/.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)))","(neg.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 b))","(fma.f64 (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/4 binary64)) #s(literal -1 binary64)) (neg.f64 b))","(fma.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)) (neg.f64 b))","(fma.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1/2 binary64)) (neg.f64 b))","(fma.f64 (pow.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1/2 binary64)) (neg.f64 b))","(fma.f64 (pow.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))) #s(literal -1/2 binary64)) (neg.f64 b))","(fma.f64 (pow.f64 #s(literal -1 binary64) #s(literal -1/2 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) (neg.f64 b))","(fma.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 b))","(fma.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) (neg.f64 b))","(fma.f64 (*.f64 (neg.f64 b) b) (pow.f64 b #s(literal -1 binary64)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))) (neg.f64 b))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))) (neg.f64 b))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))) (neg.f64 b))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64))) (neg.f64 b))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))) (neg.f64 b))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))) (neg.f64 b))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))) (neg.f64 b))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))) #s(literal -1 binary64))) (neg.f64 b))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b))","(fma.f64 (pow.f64 b #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 b b #s(literal 0 binary64))) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(fma.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 b))","(fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(fma.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 b))","(fma.f64 (neg.f64 b) #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (neg.f64 b))","(fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64) (neg.f64 b))","(fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)) (neg.f64 (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(fma.f64 (*.f64 b b) (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) (neg.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(fma.f64 b #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(-.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(-.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(-.f64 #s(literal 0 binary64) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(-.f64 (neg.f64 b) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)","(+.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (neg.f64 (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(+.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(+.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(+.f64 #s(literal 0 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))","(+.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 b))","(*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/4 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 #s(literal -1 binary64) #s(literal -1/2 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1 binary64)) #s(literal -1/2 binary64))","(pow.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64))","(pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/2 binary64))","(/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 0 binary64)) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 0 binary64)))","(/.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) #s(literal 0 binary64)) (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 #s(literal 0 binary64) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 0 binary64)))))","(/.f64 (neg.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (neg.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))))","(/.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))))","(/.f64 (sqrt.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (sqrt.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (sqrt.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))))","(/.f64 (sqrt.f64 (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (sqrt.f64 (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))))","(/.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (+.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b)))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))))))","(/.f64 (sqrt.f64 (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) (sqrt.f64 #s(literal -1 binary64)))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))) (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))) (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))))) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)))","(/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64))","(neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 0 binary64))","(fma.f64 (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/4 binary64)) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1/2 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1/2 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))) #s(literal -1/2 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 #s(literal -1 binary64) #s(literal -1/2 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 0 binary64))","(fma.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64))) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))) #s(literal -1 binary64))) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64) #s(literal 0 binary64))","(sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))","(-.f64 #s(literal 0 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fabs.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(exp.f64 (*.f64 (neg.f64 (log.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1/2 binary64)))","(exp.f64 (log.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 0 binary64))","(*.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 (/.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) #s(literal 1 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))))","(*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal 1 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(*.f64 (/.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))) #s(literal 1 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))))))","(*.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/4 binary64))) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/4 binary64))))","(*.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64))) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64))))","(*.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/4 binary64))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/4 binary64))))","(*.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/4 binary64))) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/4 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/4 binary64))) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/4 binary64))))","(*.f64 (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/4 binary64)) #s(literal -2 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/4 binary64)) #s(literal -2 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 1 binary64)))","(*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(*.f64 (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))))","(*.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) (pow.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b)))))","(*.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (pow.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 #s(literal -1 binary64) (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))","(*.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))","(*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1 binary64))","(pow.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1 binary64))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) #s(literal -2 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64))","(pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))) (fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))) (/.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))) (/.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))) (/.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))) (fma.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))))","(/.f64 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64))) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (*.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 3 binary64)))) (*.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 1 binary64) (*.f64 (*.f64 a c) #s(literal 4 binary64)))) #s(literal 1 binary64))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))))","(/.f64 (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (neg.f64 (+.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b)))))","(/.f64 (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (neg.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (neg.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))))))","(/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))","(/.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (+.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))))","(/.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))","(/.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1 binary64)))","(/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)))","(/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1 binary64))","(neg.f64 (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))","(fma.f64 (exp.f64 (log.f64 b)) (exp.f64 (log.f64 b)) (*.f64 (*.f64 a c) #s(literal -4 binary64)))","(fma.f64 (*.f64 (neg.f64 b) #s(literal -1 binary64)) b (*.f64 (*.f64 a c) #s(literal -4 binary64)))","(fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))","(fma.f64 (neg.f64 (*.f64 #s(literal 4 binary64) a)) c (*.f64 b b))","(fma.f64 (neg.f64 (*.f64 a c)) #s(literal 4 binary64) (*.f64 b b))","(fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))","(fma.f64 (*.f64 #s(literal 4 binary64) a) (neg.f64 c) (*.f64 b b))","(fma.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))","(fma.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))))","(fma.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(fma.f64 #s(literal -1 binary64) (*.f64 (neg.f64 b) b) (*.f64 (*.f64 a c) #s(literal -4 binary64)))","(fma.f64 #s(literal -1 binary64) (*.f64 (*.f64 a c) #s(literal 4 binary64)) (*.f64 b b))","(fma.f64 #s(literal 1 binary64) (*.f64 b b) (*.f64 (*.f64 a c) #s(literal -4 binary64)))","(fma.f64 (neg.f64 b) (neg.f64 b) (*.f64 (*.f64 a c) #s(literal -4 binary64)))","(fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))","(fma.f64 #s(literal 4 binary64) (neg.f64 (*.f64 a c)) (*.f64 b b))","(fma.f64 (*.f64 b b) #s(literal 1 binary64) (*.f64 (*.f64 a c) #s(literal -4 binary64)))","(fma.f64 b b (*.f64 (*.f64 a c) #s(literal -4 binary64)))","(fma.f64 a (*.f64 c #s(literal -4 binary64)) (*.f64 b b))","(fma.f64 c (*.f64 a #s(literal -4 binary64)) (*.f64 b b))","(fma.f64 #s(literal -4 binary64) (*.f64 a c) (*.f64 b b))","(sqrt.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 2 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))) (/.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))))","(-.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(-.f64 #s(literal 0 binary64) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))","(-.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) (*.f64 (neg.f64 b) b))","(-.f64 (*.f64 b b) (*.f64 (*.f64 a c) #s(literal 4 binary64)))","(fabs.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64))) #s(literal -2 binary64)))","(exp.f64 (*.f64 (neg.f64 (log.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(+.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))","(+.f64 (/.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))) (neg.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))))","(+.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (neg.f64 (/.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 3 binary64)) (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(+.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) (*.f64 b b))","(+.f64 (*.f64 b b) (*.f64 (*.f64 a c) #s(literal -4 binary64)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) b) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 b))","(*.f64 #s(literal -1 binary64) (/.f64 b a))","(*.f64 #s(literal 1 binary64) (/.f64 (neg.f64 b) a))","(*.f64 (neg.f64 b) (pow.f64 a #s(literal -1 binary64)))","(*.f64 b (/.f64 #s(literal -1 binary64) a))","(pow.f64 (/.f64 (neg.f64 a) b) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (/.f64 b a) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (/.f64 b a) (/.f64 b a) (*.f64 #s(literal 0 binary64) (/.f64 b a)))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (/.f64 a b)) a) (*.f64 a (/.f64 a b)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 a)) (*.f64 a (neg.f64 b))) (*.f64 a (neg.f64 a)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) a) (*.f64 a b)) (*.f64 a a))","(/.f64 #s(literal -1 binary64) (/.f64 a b))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 a) b))","(/.f64 (neg.f64 b) a)","(/.f64 b (neg.f64 a))","(neg.f64 (/.f64 b a))","(-.f64 #s(literal 0 binary64) (/.f64 b a))","(exp.f64 (*.f64 (log.f64 (/.f64 (neg.f64 a) b)) #s(literal -1 binary64)))","(+.f64 #s(literal 0 binary64) (/.f64 (neg.f64 b) a))","(*.f64 (*.f64 (neg.f64 b) b) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (pow.f64 b #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 b b #s(literal 0 binary64))))","(*.f64 #s(literal -1 binary64) b)","(*.f64 (neg.f64 b) #s(literal 1 binary64))","(*.f64 b #s(literal -1 binary64))","(/.f64 (*.f64 (neg.f64 b) b) b)","(/.f64 (pow.f64 b #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (-.f64 (*.f64 b b) (*.f64 #s(literal 0 binary64) (neg.f64 b)))))","(/.f64 (pow.f64 b #s(literal 3 binary64)) (neg.f64 (fma.f64 b b #s(literal 0 binary64))))","(/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b #s(literal 0 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 b (*.f64 (neg.f64 b) b)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b b #s(literal 0 binary64)) (pow.f64 b #s(literal 3 binary64))))","(/.f64 (*.f64 b b) (neg.f64 b))","(neg.f64 b)","(-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 b b #s(literal 0 binary64))) (neg.f64 b))","(-.f64 (/.f64 #s(literal 0 binary64) b) (/.f64 (*.f64 b b) b))","(-.f64 #s(literal 0 binary64) b)","(+.f64 #s(literal 0 binary64) (neg.f64 b))","(*.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) #s(literal -2 binary64)))","(*.f64 (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) a) #s(literal 1/2 binary64))","(*.f64 (neg.f64 (*.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) #s(literal 1/2 binary64))) (/.f64 #s(literal -1 binary64) a))","(*.f64 (*.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) #s(literal 1/2 binary64)))","(*.f64 (neg.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c))) (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64)))","(*.f64 #s(literal -1/2 binary64) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) (neg.f64 a)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c))))))","(*.f64 #s(literal -1 binary64) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) (*.f64 #s(literal -2 binary64) a)))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c))))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (pow.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)))","(*.f64 #s(literal 1/2 binary64) (pow.f64 (/.f64 a #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c))) #s(literal -1 binary64)))","(*.f64 #s(literal 1/2 binary64) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) a))","(*.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) (/.f64 #s(literal 1/2 binary64) a))","(pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) a)) #s(literal -2 binary64))","(/.f64 (neg.f64 (neg.f64 (*.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) #s(literal 1/2 binary64)))) a)","(/.f64 (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) a) #s(literal 2 binary64))","(/.f64 (neg.f64 (*.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) #s(literal 1/2 binary64))) (neg.f64 a))","(/.f64 (*.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) #s(literal 1/2 binary64)) a)","(/.f64 (neg.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c))) (*.f64 #s(literal -2 binary64) a))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)))))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) a)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c))))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) (*.f64 #s(literal 2 binary64) a))","(neg.f64 (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) (*.f64 #s(literal -2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) (*.f64 #s(literal -2 binary64) a)))","(-.f64 #s(literal 0 binary64) (/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) (*.f64 #s(literal -2 binary64) a)))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c))))","(*.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)) #s(literal 1 binary64))","#s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c))","(neg.f64 (neg.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c))))","(-.f64 #s(literal 0 binary64) (neg.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c))))","(*.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64)) (/.f64 c b))","(*.f64 (/.f64 c #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 a b)))","(*.f64 (/.f64 c #s(literal 1 binary64)) (*.f64 #s(literal -2 binary64) (/.f64 a b)))","(*.f64 (*.f64 a #s(literal -1 binary64)) (/.f64 (*.f64 #s(literal -2 binary64) c) (neg.f64 b)))","(*.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) c) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) c)) (/.f64 #s(literal -1 binary64) b))","(*.f64 (*.f64 a (*.f64 #s(literal -2 binary64) c)) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (*.f64 c (*.f64 #s(literal -2 binary64) a)) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (*.f64 c (/.f64 a b)) #s(literal -2 binary64))","(*.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 a b))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (/.f64 (*.f64 #s(literal -2 binary64) c) (pow.f64 a #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 a) b) (/.f64 (*.f64 #s(literal -2 binary64) c) #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)","(*.f64 #s(literal -2 binary64) (*.f64 (/.f64 a b) c))","(*.f64 (/.f64 a b) (*.f64 #s(literal -2 binary64) c))","(*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 c (neg.f64 b)))","(*.f64 a (/.f64 (*.f64 #s(literal -2 binary64) c) b))","(*.f64 a (*.f64 (pow.f64 b #s(literal -1 binary64)) (*.f64 #s(literal -2 binary64) c)))","(*.f64 c (*.f64 #s(literal -2 binary64) (/.f64 a b)))","(/.f64 (neg.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) c)) (neg.f64 b))","(/.f64 (neg.f64 (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) c))) b)","(/.f64 (neg.f64 (*.f64 #s(literal -2 binary64) c)) (/.f64 (neg.f64 b) a))","(/.f64 (neg.f64 (*.f64 a (*.f64 #s(literal -2 binary64) c))) (neg.f64 b))","(/.f64 (neg.f64 (*.f64 c (*.f64 #s(literal -2 binary64) a))) (neg.f64 b))","(/.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) c) b)","(/.f64 (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) c)) (neg.f64 b))","(/.f64 (*.f64 a (*.f64 #s(literal -2 binary64) c)) b)","(/.f64 (*.f64 c (*.f64 #s(literal -2 binary64) a)) b)","(/.f64 (*.f64 #s(literal -2 binary64) c) (/.f64 b a))","(/.f64 #s(literal 1 binary64) (/.f64 b (*.f64 (*.f64 #s(literal -2 binary64) a) c)))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 b) (*.f64 (neg.f64 a) (*.f64 #s(literal -2 binary64) c))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b a) (*.f64 #s(literal -2 binary64) c)))","(/.f64 #s(literal 1 binary64) (/.f64 b (*.f64 a (*.f64 #s(literal -2 binary64) c))))","(/.f64 #s(literal 1 binary64) (/.f64 b (*.f64 c (*.f64 #s(literal -2 binary64) a))))","(/.f64 c (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(*.f64 (/.f64 #s(literal -2 binary64) b) a)","(*.f64 (*.f64 a #s(literal -1 binary64)) (/.f64 #s(literal 2 binary64) b))","(*.f64 (*.f64 a #s(literal -1 binary64)) (/.f64 #s(literal -2 binary64) (neg.f64 b)))","(*.f64 (*.f64 #s(literal -2 binary64) (neg.f64 a)) (/.f64 #s(literal -1 binary64) b))","(*.f64 (/.f64 (neg.f64 a) b) #s(literal 2 binary64))","(*.f64 (*.f64 #s(literal -2 binary64) a) (pow.f64 b #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (*.f64 #s(literal 2 binary64) (/.f64 a b)))","(*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) (/.f64 a b)))","(*.f64 #s(literal -2 binary64) (/.f64 a b))","(*.f64 (/.f64 a b) #s(literal -2 binary64))","(*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(literal -1 binary64) b))","(*.f64 #s(literal 2 binary64) (/.f64 (neg.f64 a) b))","(*.f64 a (/.f64 #s(literal -2 binary64) b))","(*.f64 a (*.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal -2 binary64)))","(pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(literal -2 binary64) (neg.f64 a))) b)","(/.f64 (*.f64 #s(literal -2 binary64) (neg.f64 a)) (neg.f64 b))","(/.f64 (*.f64 #s(literal -2 binary64) a) b)","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 b) (*.f64 #s(literal -2 binary64) (neg.f64 a))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b a) #s(literal -2 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(/.f64 #s(literal -2 binary64) (/.f64 b a))","(/.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 b))","(/.f64 #s(literal 2 binary64) (/.f64 (neg.f64 b) a))","(-.f64 (/.f64 #s(literal 0 binary64) b) (*.f64 #s(literal 2 binary64) (/.f64 a b)))","(*.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(*.f64 (/.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 (/.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(*.f64 (/.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 (/.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(*.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal 2 binary64)) (/.f64 (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) a) (/.f64 (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) a) (/.f64 (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) a) (/.f64 (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) a) (/.f64 (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -2 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) #s(literal -1 binary64)) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))) #s(literal -1 binary64)) (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a) #s(literal 1/2 binary64))","(*.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (/.f64 #s(literal -1 binary64) a))","(*.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))) (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) a))","(*.f64 (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))))","(*.f64 (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 3 binary64)) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))))))","(*.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (/.f64 #s(literal -1 binary64) a))","(*.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(*.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(*.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(*.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))))","(*.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (/.f64 #s(literal 1 binary64) (*.f64 a (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(*.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))) (/.f64 #s(literal 1 binary64) (*.f64 a (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(*.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 a (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(*.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 a (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))))","(*.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal -1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (neg.f64 a))))","(*.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a)))","(*.f64 (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) #s(literal -1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a))))","(*.f64 (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a)))","(*.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 a))))","(*.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (neg.f64 a))))","(*.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a)))","(*.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) a)))","(*.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b))) (/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(*.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 #s(literal 1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))))","(*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64)))","(*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (neg.f64 a)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(*.f64 #s(literal -1 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))","(*.f64 #s(literal 1/2 binary64) (pow.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) #s(literal -1 binary64)))","(*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a))","(*.f64 #s(literal 1/2 binary64) (*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a))","(pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))) (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64))) (-.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b))) (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64))) (-.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))) (-.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b))))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))) (-.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 3 binary64))) (fma.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 (/.f64 #s(literal 1/2 binary64) a) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b))) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b))))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 (/.f64 #s(literal 1/2 binary64) a) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))))))","(/.f64 (neg.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a)) #s(literal -2 binary64))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) a)","(/.f64 (neg.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a))) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))))) (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1/2 binary64))) a)","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 3 binary64)) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))))))","(/.f64 (neg.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))) a)","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))) (neg.f64 (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))))) (neg.f64 (*.f64 (neg.f64 a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 (neg.f64 a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 (neg.f64 a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a)))","(/.f64 (neg.f64 (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) a)))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b)))) (neg.f64 (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))) (neg.f64 (*.f64 a (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))))) (neg.f64 (*.f64 a (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 a (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 a (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) a) (*.f64 #s(literal 2 binary64) (*.f64 b #s(literal 1/2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 b a))) #s(literal 4 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) (*.f64 #s(literal 2 binary64) (/.f64 a b))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) (/.f64 a b))))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal 2 binary64) (neg.f64 b))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal 2 binary64) b)) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) a) (*.f64 a (*.f64 b #s(literal 1/2 binary64)))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 a (/.f64 b a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 a b))) a) (*.f64 a (*.f64 #s(literal 2 binary64) (/.f64 a b))))","(/.f64 (-.f64 (*.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (*.f64 #s(literal -2 binary64) a)) (*.f64 a (neg.f64 b))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 a b)) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 b #s(literal 1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 b a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) (/.f64 a b))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) (/.f64 a b))))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 b))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 b #s(literal 1/2 binary64)))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 b a))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) (/.f64 a b))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) (/.f64 a b))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 b))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) b)) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 b #s(literal 1/2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 b a))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) (/.f64 a b))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 2 binary64) (/.f64 a b))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 b))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a) #s(literal 2 binary64))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (neg.f64 a))","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1/2 binary64)) (neg.f64 a))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64))) (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 3 binary64)) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (neg.f64 a))","(/.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 (neg.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))) (neg.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))) (*.f64 (neg.f64 a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (neg.f64 a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (neg.f64 a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (*.f64 a (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(/.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))) (*.f64 a (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 a (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 a (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal -1/2 binary64)) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal 1/2 binary64)) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) #s(literal -1/2 binary64)) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a)))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) #s(literal 1/2 binary64)) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64)) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64)) (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64)) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64)) (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) a))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b))) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) a)","(/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 a) (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 b (/.f64 #s(literal 1/2 binary64) a))) (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))) (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 3 binary64)) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (*.f64 #s(literal -1/2 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -1/2 binary64) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))) (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 1/2 binary64) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))) (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (neg.f64 a)) (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a)) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a) (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a)) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 a)) (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (neg.f64 a)) (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) a) (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)) (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(/.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)))","(/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))","(neg.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) a) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) a) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) a) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (*.f64 b #s(literal 1/2 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 b #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (neg.f64 b) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 #s(literal -1/2 binary64) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 #s(literal -1/2 binary64) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 #s(literal -1 binary64) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 #s(literal 1/2 binary64) (/.f64 (neg.f64 b) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 b (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))) (/.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))))) (/.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))))))","(-.f64 (/.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(-.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (/.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(-.f64 (/.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","(-.f64 (/.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","(-.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(+.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(+.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(+.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal 1/2 binary64))","(*.f64 #s(literal -1/2 binary64) (/.f64 #s(literal -1 binary64) a))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 #s(literal -1 binary64) (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 #s(literal 1/2 binary64) (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal -1 binary64))","(/.f64 (neg.f64 (pow.f64 a #s(literal -1 binary64))) #s(literal -2 binary64))","(/.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal 2 binary64))","(/.f64 #s(literal -1/2 binary64) (neg.f64 a))","(/.f64 #s(literal -1 binary64) (*.f64 #s(literal -2 binary64) a))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (pow.f64 a #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/2 binary64) a)","(neg.f64 (/.f64 #s(literal -1/2 binary64) a))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1/2 binary64) a))","(exp.f64 (*.f64 (log.f64 (*.f64 #s(literal 2 binary64) a)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(*.f64 (/.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 (/.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(*.f64 (/.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 (/.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(*.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal 2 binary64)) (/.f64 (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) a) (/.f64 (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) #s(literal 2 binary64)) (/.f64 (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) a) (/.f64 (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) a) (/.f64 (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) a) (/.f64 (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -2 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) #s(literal -1 binary64)) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))) #s(literal -1 binary64)) (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a) #s(literal 1/2 binary64))","(*.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (/.f64 #s(literal -1 binary64) a))","(*.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))) (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) a))","(*.f64 (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))))","(*.f64 (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 3 binary64)) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))))))","(*.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (/.f64 #s(literal -1 binary64) a))","(*.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(*.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(*.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(*.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (neg.f64 a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))))","(*.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (/.f64 #s(literal 1 binary64) (*.f64 a (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(*.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))) (/.f64 #s(literal 1 binary64) (*.f64 a (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(*.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 a (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(*.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 a (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))))","(*.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal -1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (neg.f64 a))))","(*.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a)))","(*.f64 (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) #s(literal -1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a))))","(*.f64 (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a)))","(*.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 a))))","(*.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (neg.f64 a))))","(*.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a)))","(*.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64)) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) a)))","(*.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b))) (/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(*.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 #s(literal 1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a))))","(*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))))","(*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64)))","(*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (neg.f64 a)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(*.f64 #s(literal -1 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))","(*.f64 #s(literal 1/2 binary64) (pow.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) #s(literal -1 binary64)))","(*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a))","(*.f64 #s(literal 1/2 binary64) (*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a))","(pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))) (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64))) (-.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b))) (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64))) (-.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))) (-.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b))))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))) (-.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 3 binary64))) (fma.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 (/.f64 #s(literal 1/2 binary64) a) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b))) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b))))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 (/.f64 #s(literal 1/2 binary64) a) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))))))","(/.f64 (neg.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a)) #s(literal -2 binary64))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) a)","(/.f64 (neg.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a))) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))))) (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1/2 binary64))) a)","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 3 binary64)) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))))))","(/.f64 (neg.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))) a)","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))) (neg.f64 (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))))) (neg.f64 (*.f64 (neg.f64 a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 (neg.f64 a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 (neg.f64 a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a)))","(/.f64 (neg.f64 (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) a)))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b)))) (neg.f64 (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))) (neg.f64 (*.f64 a (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))))) (neg.f64 (*.f64 a (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 a (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 a (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) a) (*.f64 #s(literal 2 binary64) (*.f64 b #s(literal 1/2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 b a))) #s(literal 4 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) (*.f64 #s(literal 2 binary64) (/.f64 a b))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) (/.f64 a b))))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal 2 binary64) (neg.f64 b))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal 2 binary64) b)) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) a) (*.f64 a (*.f64 b #s(literal 1/2 binary64)))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) #s(literal 2 binary64)) (*.f64 a (/.f64 b a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 a b))) a) (*.f64 a (*.f64 #s(literal 2 binary64) (/.f64 a b))))","(/.f64 (-.f64 (*.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (*.f64 #s(literal -2 binary64) a)) (*.f64 a (neg.f64 b))) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 a b)) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 b #s(literal 1/2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 b a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) (/.f64 a b))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) (/.f64 a b))))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 b))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 b #s(literal 1/2 binary64)))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 b a))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) (/.f64 a b))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) (/.f64 a b))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 b))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) b)) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 b #s(literal 1/2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 b a))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) (/.f64 a b))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 2 binary64) (/.f64 a b))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 b))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a) #s(literal 2 binary64))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (neg.f64 a))","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1/2 binary64)) (neg.f64 a))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64))) (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 3 binary64)) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (neg.f64 a))","(/.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 (neg.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))) (neg.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(/.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))) (*.f64 (neg.f64 a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (neg.f64 a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (neg.f64 a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (*.f64 a (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(/.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))) (*.f64 a (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 a (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 a (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal -1/2 binary64)) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal 1/2 binary64)) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) #s(literal -1/2 binary64)) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a)))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) #s(literal 1/2 binary64)) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64)) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64)) (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64)) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64)) (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) a))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b))) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) a)","(/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (neg.f64 a) (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 b (/.f64 #s(literal 1/2 binary64) a))) (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 b (/.f64 #s(literal 1/2 binary64) a))))) (-.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 3 binary64)) (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (*.f64 #s(literal -1/2 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal -1/2 binary64) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (neg.f64 a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))) (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 1/2 binary64) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))) (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (neg.f64 a)) (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a)) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) a) (*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 a)) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 a)) (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (neg.f64 a)) (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) a) (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)) (fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))) (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(/.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)))","(/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))","(neg.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) a) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) a) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) a) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (*.f64 b #s(literal 1/2 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) #s(literal 1/2 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 b #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (neg.f64 b) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 #s(literal -1/2 binary64) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 #s(literal -1/2 binary64) (/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 #s(literal -1/2 binary64) (/.f64 b a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 #s(literal -1 binary64) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 #s(literal 1/2 binary64) (/.f64 (neg.f64 b) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(fma.f64 b (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))) (/.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))))","(-.f64 (/.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))))) (/.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 b (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))))))","(-.f64 (/.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))) (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) b) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64))))","(-.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) (/.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(-.f64 (/.f64 (*.f64 b b) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal -2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","(-.f64 (/.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 #s(literal 2 binary64) a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","(-.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 b (/.f64 #s(literal 1/2 binary64) a)))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(+.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 b a)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(+.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(+.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(*.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))))","(*.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal 1 binary64))","(pow.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) #s(literal 3 binary64))) (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (fma.f64 (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (*.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 #s(literal 0 binary64) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)))) (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))))) (neg.f64 (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))))","(/.f64 (-.f64 (*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (*.f64 b b))) (*.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(/.f64 (-.f64 (*.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) b) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))) (*.f64 b (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))))) (*.f64 b (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))) (*.f64 b (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))))) (*.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) b) (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 b (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 b (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) b) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))))) (*.f64 b (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 b (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) b) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 b)) (*.f64 b (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (fma.f64 (*.f64 (neg.f64 b) b) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) b) (*.f64 b (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (pow.f64 b #s(literal 3 binary64)) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (fma.f64 b b #s(literal 0 binary64)) (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))))) (*.f64 (fma.f64 b b #s(literal 0 binary64)) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (fma.f64 (pow.f64 b #s(literal 3 binary64)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))) (*.f64 (fma.f64 b b #s(literal 0 binary64)) (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))))) (*.f64 (fma.f64 b b #s(literal 0 binary64)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))))","(/.f64 (fma.f64 (pow.f64 b #s(literal 3 binary64)) (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (fma.f64 b b #s(literal 0 binary64)) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 (fma.f64 b b #s(literal 0 binary64)) (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (fma.f64 (pow.f64 b #s(literal 3 binary64)) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))))) (*.f64 (fma.f64 b b #s(literal 0 binary64)) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 (fma.f64 b b #s(literal 0 binary64)) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))))","(/.f64 (fma.f64 (pow.f64 b #s(literal 3 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (fma.f64 b b #s(literal 0 binary64)) #s(literal -1 binary64))) (*.f64 (fma.f64 b b #s(literal 0 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (fma.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) (*.f64 (fma.f64 b b #s(literal 0 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 b b #s(literal 0 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) b (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (neg.f64 b) b))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))) b))","(/.f64 (fma.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (fma.f64 b b #s(literal 0 binary64)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))) (fma.f64 b b #s(literal 0 binary64))))","(/.f64 (fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) b (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))) (*.f64 (neg.f64 b) b))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))) b))","(/.f64 (fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (fma.f64 b b #s(literal 0 binary64)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))) (fma.f64 b b #s(literal 0 binary64))))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) b (*.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (neg.f64 b) b))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) b))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 b b #s(literal 0 binary64)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (fma.f64 b b #s(literal 0 binary64))))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) b (*.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))))) (*.f64 (neg.f64 b) b))) (*.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))))) b))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 b b #s(literal 0 binary64)) (*.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))))) (fma.f64 b b #s(literal 0 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) b (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (*.f64 (neg.f64 b) b))) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) b))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 b b #s(literal 0 binary64)) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (fma.f64 b b #s(literal 0 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 b b #s(literal 0 binary64)) (*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) (fma.f64 b b #s(literal 0 binary64))))","(/.f64 (+.f64 b (*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) (*.f64 (neg.f64 b) b))) (*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) b))","(/.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b))) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (neg.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))) (neg.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))","(/.f64 (fma.f64 b b (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)))","(neg.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 b))","(fma.f64 (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/4 binary64)) #s(literal -1 binary64)) (neg.f64 b))","(fma.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)) (neg.f64 b))","(fma.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1/2 binary64)) (neg.f64 b))","(fma.f64 (pow.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1/2 binary64)) (neg.f64 b))","(fma.f64 (pow.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))) #s(literal -1/2 binary64)) (neg.f64 b))","(fma.f64 (pow.f64 #s(literal -1 binary64) #s(literal -1/2 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) (neg.f64 b))","(fma.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 b))","(fma.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) (neg.f64 b))","(fma.f64 (*.f64 (neg.f64 b) b) (pow.f64 b #s(literal -1 binary64)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))) (neg.f64 b))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))) (neg.f64 b))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))) (neg.f64 b))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64))) (neg.f64 b))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))) (neg.f64 b))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))) (neg.f64 b))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))) (neg.f64 b))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))) #s(literal -1 binary64))) (neg.f64 b))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (neg.f64 b))","(fma.f64 (pow.f64 b #s(literal 3 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 b b #s(literal 0 binary64))) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(fma.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 b))","(fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(fma.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 b))","(fma.f64 (neg.f64 b) #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (neg.f64 b))","(fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64) (neg.f64 b))","(fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (pow.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) #s(literal -1 binary64)) (neg.f64 (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(fma.f64 (*.f64 b b) (pow.f64 (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)) (neg.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(fma.f64 b #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b b (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))))","(-.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)))","(-.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(-.f64 #s(literal 0 binary64) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(-.f64 (neg.f64 b) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)","(+.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b)) (neg.f64 (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))))","(+.f64 (/.f64 (*.f64 b b) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (neg.f64 (/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(+.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(+.f64 #s(literal 0 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) b))","(+.f64 (neg.f64 b) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (neg.f64 b))","(*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/4 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 #s(literal -1 binary64) #s(literal -1/2 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1 binary64)) #s(literal -1/2 binary64))","(pow.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64))","(pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/2 binary64))","(/.f64 (-.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 0 binary64)) (-.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 0 binary64)))","(/.f64 (+.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 3/2 binary64)) #s(literal 0 binary64)) (+.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) (-.f64 #s(literal 0 binary64) (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 0 binary64)))))","(/.f64 (neg.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (neg.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))))","(/.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (neg.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (neg.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))))","(/.f64 (sqrt.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (sqrt.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))) (sqrt.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))))","(/.f64 (sqrt.f64 (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (sqrt.f64 (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))))","(/.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (+.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b)))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))))))","(/.f64 (sqrt.f64 (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))) (sqrt.f64 #s(literal -1 binary64)))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))) (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))) (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))))) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)))","(/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64))","(neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fma.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 0 binary64))","(fma.f64 (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/4 binary64)) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1/2 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1/2 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1/2 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))) #s(literal -1/2 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 #s(literal -1 binary64) #s(literal -1/2 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 0 binary64))","(fma.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64))) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))) #s(literal -1 binary64))) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) #s(literal 0 binary64))","(fma.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1 binary64) #s(literal 0 binary64))","(sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))","(-.f64 #s(literal 0 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fabs.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(exp.f64 (*.f64 (neg.f64 (log.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1/2 binary64)))","(exp.f64 (log.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(+.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 0 binary64))","(*.f64 (sqrt.f64 (pow.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64))) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))))","(*.f64 (sqrt.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))))","(*.f64 (sqrt.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64))) (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(*.f64 (sqrt.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64))) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))))))","(*.f64 (sqrt.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64))))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))))","(*.f64 (pow.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))))","(*.f64 (pow.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(*.f64 (pow.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))))))","(*.f64 (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) #s(literal 1/2 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)) (pow.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/4 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/4 binary64)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)))","(pow.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1 binary64))) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 2 binary64)) #s(literal -1/4 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) #s(literal 1 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(pow.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1 binary64))","(pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64))","(/.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (neg.f64 (sqrt.f64 (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64)))))","(/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(sqrt.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(fabs.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -1/2 binary64)))","(exp.f64 (log.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64))))","(*.f64 (pow.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)))","(*.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))","(*.f64 (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)) (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))))","(*.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) (pow.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))) (pow.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1 binary64)))","(pow.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1 binary64))) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) #s(literal 2 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1 binary64))","(pow.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal -2 binary64))","(pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1 binary64))","(/.f64 (neg.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))) (neg.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b))) (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b))))) (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))","(/.f64 (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 (neg.f64 b) b)) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64))))","(/.f64 (fma.f64 (*.f64 (*.f64 a c) #s(literal 4 binary64)) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))","(/.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (*.f64 (*.f64 b b) (fma.f64 (*.f64 a c) #s(literal 4 binary64) (*.f64 b b)))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))","(/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))","(/.f64 #s(literal -1 binary64) (fma.f64 (neg.f64 b) b (*.f64 (*.f64 a c) #s(literal 4 binary64))))","(/.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1/2 binary64)) (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))","(neg.f64 (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(sqrt.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)) #s(literal -1 binary64))))","(-.f64 (/.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (*.f64 b b) (-.f64 (pow.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) #s(literal 2 binary64)) (pow.f64 b #s(literal 4 binary64)))))","(-.f64 (/.f64 (fma.f64 (pow.f64 (*.f64 a c) #s(literal 2 binary64)) #s(literal 16 binary64) (pow.f64 b #s(literal 4 binary64))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 a c) #s(literal -4 binary64)) b) b) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 a c) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))))","(exp.f64 (neg.f64 (log.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b)))))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":275.758056640625,"type":"rewrite"},{"compiler":[[54305,5197]],"memory":[[8582096,142443568]],"time":241.56201171875,"type":"eval"},{"alts":[["(fma.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","fresh",29.948479108755432,"binary64"],["(/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","fresh",48.77517957682069,"binary64"],["(/.f64 (-.f64 (*.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) a) (*.f64 a (*.f64 b #s(literal 1/2 binary64)))) (*.f64 a a))","fresh",41.61249442889898,"binary64"],["(/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))","done",29.86701901748841,"binary64"],["(/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b) (*.f64 #s(literal 2 binary64) a))","next",41.23424108651143,"binary64"],["(/.f64 (-.f64 #s(approx (sqrt (+ (* -4 (* c a)) (* b b))) (*.f64 (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (/.f64 c b) #s(literal 1 binary64)) b)) b) (*.f64 #s(literal 2 binary64) a))","fresh",56.64784658895906,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))))) (*.f64 #s(literal 2 binary64) a))","next",42.08168866528308,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(approx (/ 1 (+ (* -4 (* c a)) (* b b))) (/.f64 (/.f64 #s(literal -1/4 binary64) a) c))))) (*.f64 #s(literal 2 binary64) a))","fresh",42.07387602484605,"binary64"],["(/.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","fresh",46.71282843149144,"binary64"],["(/.f64 #s(approx (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (*.f64 (*.f64 a (/.f64 c b)) #s(literal -2 binary64))) (*.f64 #s(literal 2 binary64) a))","fresh",45.14130364848889,"binary64"],["(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","done",46.34233072136904,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c))))","fresh",46.37033824090592,"binary64"],["(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","next",29.938458793665273,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b))","fresh",41.25880588709187,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)))","fresh",46.343457997545904,"binary64"],["(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)))) #s(literal -1 binary64)))","fresh",56.745051618278154,"binary64"],["#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 (neg.f64 c) b))","next",42.03137654896942,"binary64"],["#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b)))))","fresh",43.51155310928848,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a)))","fresh",42.927083200500476,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 (*.f64 (neg.f64 b) b) b) a))","fresh",47.91427585793324,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 b b #s(literal 0 binary64))) (neg.f64 b)) a))","next",62.7736447119417,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (*.f64 #s(literal 0 binary64) a) (*.f64 a b)) (*.f64 a a)))","fresh",51.377566399222076,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","done",42.84245937978134,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 #s(literal -1 binary64) (/.f64 a b)))","fresh",42.90105306209273,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b (/.f64 #s(literal -1 binary64) a)))","fresh",42.89714687978135,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (exp.f64 (*.f64 (log.f64 (/.f64 (neg.f64 a) b)) #s(literal -1 binary64))))","fresh",56.570112302315515,"binary64"]],"compiler":[[18,14],[27,16],[23,16],[15,12],[22,17],[29,21],[27,21],[27,22],[27,16],[24,18],[25,19],[27,21],[15,12],[22,17],[25,19],[29,23],[21,16],[29,21],[29,20],[26,19],[29,21],[29,21],[22,17],[23,18],[23,18],[26,21],[18,14],[27,16],[23,16],[22,17],[29,21],[27,21],[27,22],[27,16],[24,18],[27,21],[15,12],[22,17],[25,19],[29,23],[21,16],[29,21],[29,20],[26,19],[29,21],[29,21],[23,18],[23,18],[26,21]],"count":[[1561,26]],"kept":[{"done":[0,0],"fresh":[8,4],"new":[1548,19],"picked":[5,3]}],"memory":[[-14447664,70719088]],"min-error":[[5.460135704475071,"binary64"]],"time":47.2578125,"type":"prune"},{"egraph":[[0,7726,340,0.024451421],[22,7726,341,0.048789148],[21,7564,341,0.046324884],[20,7502,341,0.049279799],[19,7502,341,0.027539853],[18,7498,341,0.027684095],[17,7470,341,0.027267011],[16,7418,341,0.028405526],[15,7350,341,0.029478199],[14,6910,341,0.029985989],[13,6566,341,0.032774804],[12,6063,341,0.031781324],[11,5979,341,0.02770911],[10,5975,341,0.016097385],[9,5971,341,0.015672058],[8,5951,341,0.014810226],[7,5578,341,0.022422736],[6,4067,341,0.024518428],[5,2030,341,0.024452203],[4,1108,341,0.013134583],[3,514,341,0.006084589],[2,242,341,0.0022959],[1,139,341,0.00095094],[0,80,349,0.000723238],[0,52,375,0.000442508]],"inputs":[["(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","#s(literal 1/2 binary64)","(/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","a","(-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","#s(literal -4 binary64)","(*.f64 c a)","c","(*.f64 b b)","b","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 (neg.f64 c) b))","(/.f64 (neg.f64 c) b)","(neg.f64 c)","c","b","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 b b #s(literal 0 binary64))) (neg.f64 b)) a))","(/.f64 (-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 b b #s(literal 0 binary64))) (neg.f64 b)) a)","(-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 b b #s(literal 0 binary64))) (neg.f64 b))","(/.f64 #s(literal 0 binary64) (fma.f64 b b #s(literal 0 binary64)))","#s(literal 0 binary64)","(fma.f64 b b #s(literal 0 binary64))","b","(neg.f64 b)","a","(/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b) (*.f64 #s(literal 2 binary64) a))","(-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b)","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))","#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))","(*.f64 #s(literal -4 binary64) (*.f64 a c))","#s(literal -4 binary64)","(*.f64 a c)","a","c","b","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(/.f64 (+.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))))) (*.f64 #s(literal 2 binary64) a))","(+.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))))))","(neg.f64 b)","b","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))))","#s(literal 1 binary64)","(sqrt.f64 (/.f64 #s(literal 1 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))))","(/.f64 #s(literal 1 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))","#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))","(*.f64 #s(literal -4 binary64) (*.f64 a c))","#s(literal -4 binary64)","(*.f64 a c)","a","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"locations":[["(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))))","cost-diff",0],["(neg.f64 b)","cost-diff",0],["(+.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))))))","cost-diff",1],["(/.f64 (+.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))))) (*.f64 #s(literal 2 binary64) a))","cost-diff",1],["#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))","cost-diff",0],["(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))","cost-diff",0],["(-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b)","cost-diff",0],["(/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b) (*.f64 #s(literal 2 binary64) a))","cost-diff",0],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 b b #s(literal 0 binary64))) (neg.f64 b)) a))","cost-diff",0],["(fma.f64 b b #s(literal 0 binary64))","cost-diff",1],["(-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 b b #s(literal 0 binary64))) (neg.f64 b))","cost-diff",3],["(/.f64 #s(literal 0 binary64) (fma.f64 b b #s(literal 0 binary64)))","cost-diff",4],["(neg.f64 c)","cost-diff",0],["(/.f64 (neg.f64 c) b)","cost-diff",0],["#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 (neg.f64 c) b))","cost-diff",0],["(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","cost-diff",0],["(-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)","cost-diff",0],["(/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","cost-diff",0],["(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","cost-diff",0]],"memory":[[3043392,10848816]],"method":["egg-herbie"],"outputs":[["(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b))) b))","#s(literal 1/2 binary64)","(/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b))) b))","a","(-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)","(-.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b))) b)","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","(sqrt.f64 (fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b)))","(fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))","(fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b))","#s(literal -4 binary64)","(*.f64 c a)","c","(*.f64 b b)","b","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 (neg.f64 c) b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))","(/.f64 (neg.f64 c) b)","(neg.f64 c)","c","b","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 b b #s(literal 0 binary64))) (neg.f64 b)) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 b a))","(/.f64 (-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 b b #s(literal 0 binary64))) (neg.f64 b)) a)","(/.f64 b a)","(-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 b b #s(literal 0 binary64))) (neg.f64 b))","b","(/.f64 #s(literal 0 binary64) (fma.f64 b b #s(literal 0 binary64)))","#s(literal 0 binary64)","#s(literal 0 binary64)","(fma.f64 b b #s(literal 0 binary64))","(*.f64 b b)","b","(neg.f64 b)","a","(/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b)","(-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))","#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))","#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))","(*.f64 #s(literal -4 binary64) (*.f64 a c))","(*.f64 (*.f64 c a) #s(literal -4 binary64))","#s(literal -4 binary64)","(*.f64 a c)","(*.f64 c a)","a","c","b","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)","(/.f64 (+.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 #s(literal -1/2 binary64) b (/.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))) a)","(+.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))))))","(-.f64 (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) b)","(neg.f64 b)","b","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","#s(literal 1 binary64)","(sqrt.f64 (/.f64 #s(literal 1 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))))","(sqrt.f64 (/.f64 #s(literal 1 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(/.f64 #s(literal 1 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))","(/.f64 #s(literal 1 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))","#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))","#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))","(*.f64 #s(literal -4 binary64) (*.f64 a c))","(*.f64 (*.f64 c a) #s(literal -4 binary64))","#s(literal -4 binary64)","(*.f64 a c)","(*.f64 c a)","a","c","(*.f64 #s(literal 2 binary64) a)","#s(literal 2 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":643.148193359375,"type":"simplify"},{"compiler":[[320,40]],"locations":[["(/.f64 (+.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))))) (*.f64 #s(literal 2 binary64) a))","accuracy",3.4438901850410826],["(+.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))))))","accuracy",12.992468175560182],["(sqrt.f64 (/.f64 #s(literal 1 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))))","accuracy",23.425756201516517],["#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))","accuracy",38.497395304021886],["(/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b) (*.f64 #s(literal 2 binary64) a))","accuracy",3.4438901850410826],["(-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b)","accuracy",12.992468175560182],["(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))","accuracy",23.929958470936878],["#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))","accuracy",38.497395304021886],["(-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 b b #s(literal 0 binary64))) (neg.f64 b))","accuracy",0.0],["(neg.f64 b)","accuracy",0.0],["(/.f64 #s(literal 0 binary64) (fma.f64 b b #s(literal 0 binary64)))","accuracy",11.812433950599079],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 b b #s(literal 0 binary64))) (neg.f64 b)) a))","accuracy",62.30653182858571],["(/.f64 (neg.f64 c) b)","accuracy",0.0],["(neg.f64 c)","accuracy",0.0],["#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 (neg.f64 c) b))","accuracy",42.03137654896942],["(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","accuracy",0.5455600808437424],["(/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","accuracy",2.9297041306719955],["(-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)","accuracy",12.992468175560182],["(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","accuracy",23.929958470936878]],"memory":[[-545456,48086096]],"mixsample":[[0.155029296875,"ival-sub",1200],[0.009033203125,"ival-sub",4800],[4.845458984375,"adjust",800],[39.6884765625,"ival-div",0],[0.01025390625,"ival-add",4800],[0.01806640625,"ival-mult",1200],[0.054931640625,"ival-sub",1600],[0.267578125,"ival-div",400],[0.11962890625,"ival-assert",0],[0.211181640625,"ival-div",1600],[0.00390625,"ival-sub",3600],[0.07080078125,"ival-sqrt",4800],[0.896240234375,"ival-sqrt",1200],[4.34423828125,"ival-sub",0],[5.43603515625,"ival-sqrt",0],[0.087646484375,"ival-sub",400],[0.05908203125,"ival-div",4800],[0.029052734375,"ival-sqrt",2800],[0.077880859375,"ival-sub",4400],[6.321533203125,"ival-add",0],[0.061767578125,"ival-mult",800],[0.109375,"ival-sub",800],[0.007080078125,"ival-mult",1600],[0.138916015625,"ival-add",400],[0.704345703125,"adjust",2800],[0.02099609375,"ival-sqrt",3600],[0.2255859375,"ival-div",2000],[0.201416015625,"ival-add",2400],[0.0048828125,"ival-add",6400],[0.44677734375,"ival-div",2400],[0.472900390625,"ival-sqrt",400],[0.26123046875,"ival-add",1200],[0.30859375,"ival-sqrt",2000],[0.011962890625,"ival-mult",2000],[0.054931640625,"ival-sub",2000],[1.0712890625,"ival-sqrt",800],[0.311767578125,"ival-div",4400],[0.393310546875,"ival-sqrt",4400],[0.006103515625,"ival-add",3600],[0.01904296875,"ival-div",2800],[2.367919921875,"adjust",2000],[0.114013671875,"ival-sub",2400],[0.60595703125,"ival-div",1200],[0.036865234375,"ival-mult",400],[11.22119140625,"ival-mult",0],[0.8408203125,"ival-sqrt",1600],[0.082275390625,"ival-add",1600],[0.005126953125,"ival-add",2800],[0.01806640625,"ival-sqrt",6400],[0.0712890625,"ival-add",2000],[0.36572265625,"ival-div",800],[0.025146484375,"ival-div",3600],[0.2333984375,"ival-true",0],[0.693115234375,"ival-sqrt",2400],[0.0048828125,"ival-sub",2800],[0.69921875,"exact",0],[0.173828125,"ival-add",800],[0.06298828125,"ival-add",4400],[2.139404296875,"ival-neg",0]],"outcomes":[[18.00830078125,1,"valid",36],[22.020263671875,2,"valid",31],[33.484619140625,3,"valid",15],[46.454345703125,0,"valid",174]],"time":161.014892578125,"type":"localize"},{"count":[[20,154]],"inputs":[["(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 (neg.f64 c) b))","(/.f64 (neg.f64 c) b)","(neg.f64 c)","(/.f64 #s(literal 0 binary64) (fma.f64 b b #s(literal 0 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 b b #s(literal 0 binary64))) (neg.f64 b))","(fma.f64 b b #s(literal 0 binary64))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 b b #s(literal 0 binary64))) (neg.f64 b)) a))","(/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b) (*.f64 #s(literal 2 binary64) a))","(-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b)","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))","#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))","(/.f64 (+.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))))) (*.f64 #s(literal 2 binary64) a))","(+.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))))))","(neg.f64 b)","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))))","(sqrt.f64 (/.f64 #s(literal 1 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))))"]],"memory":[[4233824,12059712]],"outputs":[["(* -1 (/ c b))","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","(+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3))))))","(+ (* -1 (/ c b)) (* a (+ (* -1 (/ (pow c 2) (pow b 3))) (* a (+ (* -2 (/ (pow c 3) (pow b 5))) (* -1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","(* -1/2 (/ b c))","(+ (* -1/2 (/ b c)) (* 1/2 (/ a b)))","(+ (* -1/2 (/ b c)) (* a (+ (* -1 (* a (+ (* -1 (/ c (pow b 3))) (* 1/2 (/ c (pow b 3)))))) (* 1/2 (/ 1 b)))))","(+ (* -1/2 (/ b c)) (* a (+ (* a (- (* -1 (* a (+ (* -1 (/ (* c (+ (* -1 (/ c (pow b 3))) (* 1/2 (/ c (pow b 3))))) (pow b 2))) (+ (* -1/8 (/ (* b (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) (pow c 2))) (/ (pow c 2) (pow b 5)))))) (+ (* -1 (/ c (pow b 3))) (* 1/2 (/ c (pow b 3)))))) (* 1/2 (/ 1 b)))))","(* -2 (/ (* a c) b))","(* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b))))))))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(/ 1 b)","(+ (* 2 (/ (* a c) (pow b 3))) (/ 1 b))","(+ (* a (+ (* -1/2 (* a (* b (+ (* -16 (/ (pow c 2) (pow b 6))) (* 4 (/ (pow c 2) (pow b 6))))))) (* 2 (/ c (pow b 3))))) (/ 1 b))","(+ (* a (+ (* 2 (/ c (pow b 3))) (* a (+ (* -1/2 (* a (* b (+ (* -64 (/ (pow c 3) (pow b 8))) (* -2 (/ (* c (+ (* -16 (/ (pow c 2) (pow b 6))) (* 4 (/ (pow c 2) (pow b 6))))) (pow b 2))))))) (* -1/2 (* b (+ (* -16 (/ (pow c 2) (pow b 6))) (* 4 (/ (pow c 2) (pow b 6)))))))))) (/ 1 b))","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(* (sqrt (/ a c)) (/ 1 (sqrt -4)))","(+ (* (sqrt (/ a c)) (/ 1 (sqrt -4))) (/ b (* c (pow (sqrt -4) 2))))","(- (+ (* -1 (/ (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3))))) (pow a 2))) (* (sqrt (/ a c)) (/ 1 (sqrt -4)))) (* -1 (/ b (* c (pow (sqrt -4) 2)))))","(- (+ (* -1 (/ (+ (* 1/2 (/ (* (pow a 2) (pow b 3)) (* (pow c 2) (pow (sqrt -4) 4)))) (* (sqrt (/ a c)) (/ (* b (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (sqrt -4)))) (pow a 3))) (* (sqrt (/ a c)) (/ 1 (sqrt -4)))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (+ (* -1 (/ b (* c (pow (sqrt -4) 2)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -4 (* a c))","(* a (+ (* -4 c) (/ (pow b 2) a)))","(* (sqrt (/ 1 (* a c))) (sqrt -1/4))","(+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4)))","(+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4))))","(+ (* -1/2 (* (sqrt (/ c (pow a 7))) (/ (+ (* 1/1024 (/ (* a (pow b 4)) (* (pow c 3) (pow (sqrt -1/4) 2)))) (* 1/256 (/ (pow b 6) (pow c 4)))) (sqrt -1/4)))) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4)))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(* -1/2 (* (sqrt (/ a c)) (sqrt -1)))","(+ (* -1/2 (* (sqrt (/ a c)) (sqrt -1))) (* -1/4 (/ b c)))","(+ (* -1 (/ (- (+ (* -1/16 (* (sqrt (/ a (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ a (pow c 3))) (* (pow b 2) (sqrt -1))))) (* -1/4 (/ (* a b) c))) a)) (* -1/2 (* (sqrt (/ a c)) (sqrt -1))))","(+ (* -1 (/ (- (* -1 (/ (- (+ (* -1/32 (/ (* a (pow b 3)) (pow c 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (* b (* (sqrt -1) (+ (* -1/16 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))))))))) (+ (* -1/16 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))))) a)) (* -1/4 (/ (* a b) c))) a)) (* -1/2 (* (sqrt (/ a c)) (sqrt -1))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(* -1 (* a (+ (* -1 (/ (pow b 2) a)) (* 4 c))))","(* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))","(+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(+ (* -1 (/ (+ (* 1/64 (* (sqrt (/ a (pow c 5))) (* (pow b 4) (sqrt -1)))) (* (sqrt (/ c a)) (* (sqrt -1) (+ (* -1/256 (/ (* a (pow b 4)) (pow c 3))) (* 1/256 (/ (pow b 6) (pow c 4))))))) (pow a 3))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(+ (* b (+ (* -1 (* b (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3))))))) (/ 1 (* c (pow (sqrt -4) 2))))) (* (sqrt (/ a c)) (/ 1 (sqrt -4))))","(+ (* b (+ (* b (- (* -1 (* b (+ (* 1/2 (/ 1 (* a (* (pow c 2) (pow (sqrt -4) 4))))) (* (sqrt (/ 1 (* a c))) (/ (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3))))) (sqrt -4)))))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3))))))) (/ 1 (* c (pow (sqrt -4) 2))))) (* (sqrt (/ a c)) (/ 1 (sqrt -4))))","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","0","(* -1 b)","(+ (* (sqrt (/ 1 (* a c))) (sqrt -1/4)) (* (pow b 2) (+ (* -1/2 (* (sqrt (* a c)) (/ (* (pow b 2) (+ (* 1/1024 (/ 1 (* (pow a 3) (* (pow c 3) (pow (sqrt -1/4) 2))))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3)))))) (sqrt -1/4)))) (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (sqrt -1/4)))))))","(+ (* (sqrt (/ 1 (* a c))) (sqrt -1/4)) (* (pow b 2) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (sqrt -1/4)))) (* (pow b 2) (+ (* -1/2 (* (sqrt (* a c)) (/ (* (pow b 2) (+ (* 1/32 (/ (+ (* 1/1024 (/ 1 (* (pow a 3) (* (pow c 3) (pow (sqrt -1/4) 2))))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3))))) (* a (* c (pow (sqrt -1/4) 2))))) (* 1/256 (/ 1 (* (pow a 4) (pow c 4)))))) (sqrt -1/4)))) (* -1/2 (* (sqrt (* a c)) (/ (+ (* 1/1024 (/ 1 (* (pow a 3) (* (pow c 3) (pow (sqrt -1/4) 2))))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3))))) (sqrt -1/4)))))))))","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(* b (- (* 1/2 (/ a (pow b 2))) (* 1/2 (/ 1 c))))","(* b (- (* -1 (/ (+ (* -1 (* (pow a 2) c)) (* 1/2 (* (pow a 2) c))) (pow b 4))) (+ (* -1/2 (/ a (pow b 2))) (* 1/2 (/ 1 c)))))","(* b (- (* -1 (/ (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) c)) (* 1/2 (* (pow a 2) c)))))) (+ (* -1/8 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow c 2)))) (* (pow a 3) (pow c 2)))) (pow b 6))) (+ (* -1 (/ (* (pow a 2) c) (pow b 4))) (+ (* -1/2 (/ a (pow b 2))) (+ (* 1/2 (/ (* (pow a 2) c) (pow b 4))) (* 1/2 (/ 1 c)))))))","(/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(/ (+ 1 (* 2 (/ (* a c) (pow b 2)))) b)","(/ (+ 1 (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2))))) b)","(/ (+ 1 (+ (* -1/2 (/ (+ (* -64 (* (pow a 3) (pow c 3))) (* -2 (* a (* c (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))))))) (pow b 6))) (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2)))))) b)","(* -1 (/ b a))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(* -1/2 (/ a b))","(* -1 (/ (+ (* 1/2 a) (* 1/2 (/ (* (pow a 2) c) (pow b 2)))) b))","(* -1 (/ (- (+ (* 1/2 a) (/ (* (pow a 3) (pow c 2)) (pow b 4))) (* -1/2 (/ (* (pow a 2) c) (pow b 2)))) b))","(* -1 (/ (- (+ (* -1 (/ (+ (* -2 (* (pow a 4) (pow c 3))) (* -1/2 (* (pow a 4) (pow c 3)))) (pow b 6))) (* 1/2 a)) (+ (* -1 (/ (* (pow a 3) (pow c 2)) (pow b 4))) (* -1/2 (/ (* (pow a 2) c) (pow b 2))))) b))","(* -2 b)","(* -1 (* b (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(/ -1 b)","(* -1 (/ (+ 1 (* 2 (/ (* a c) (pow b 2)))) b))","(* -1 (/ (+ 1 (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2))))) b))","(* -1 (/ (+ 1 (+ (* -1/2 (/ (+ (* -64 (* (pow a 3) (pow c 3))) (* -2 (* a (* c (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))))))) (pow b 6))) (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2)))))) b))","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b)))","(* c (- (* c (+ (* -1 (/ a (pow b 3))) (* c (+ (* -2 (/ (pow a 2) (pow b 5))) (* -1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (/ 1 b)))","(/ (+ (* -1/2 b) (* 1/2 (/ (* a c) b))) c)","(/ (+ (* -1/2 b) (* c (- (* -1 (* c (+ (* -1 (/ (pow a 2) (pow b 3))) (* 1/2 (/ (pow a 2) (pow b 3)))))) (* -1/2 (/ a b))))) c)","(/ (+ (* -1/2 b) (* c (- (* c (- (* -1 (* c (+ (* -1 (/ (* a (+ (* -1 (/ (pow a 2) (pow b 3))) (* 1/2 (/ (pow a 2) (pow b 3))))) (pow b 2))) (+ (* -1/8 (/ (* b (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) a)) (/ (pow a 3) (pow b 5)))))) (+ (* -1 (/ (pow a 2) (pow b 3))) (* 1/2 (/ (pow a 2) (pow b 3)))))) (* -1/2 (/ a b))))) c)","(* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -2 (/ (pow a 2) (pow b 3))) (* c (+ (* -4 (/ (pow a 3) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b))))))))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* -1 c)","(+ (* c (+ (* -1/2 (* b (* c (+ (* -16 (/ (pow a 2) (pow b 6))) (* 4 (/ (pow a 2) (pow b 6))))))) (* 2 (/ a (pow b 3))))) (/ 1 b))","(+ (* c (+ (* 2 (/ a (pow b 3))) (* c (+ (* -1/2 (* b (* c (+ (* -64 (/ (pow a 3) (pow b 8))) (* -2 (/ (* a (+ (* -16 (/ (pow a 2) (pow b 6))) (* 4 (/ (pow a 2) (pow b 6))))) (pow b 2))))))) (* -1/2 (* b (+ (* -16 (/ (pow a 2) (pow b 6))) (* 4 (/ (pow a 2) (pow b 6)))))))))) (/ 1 b))","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(/ (+ (* (sqrt (* a c)) (/ 1 (sqrt -4))) (/ b (pow (sqrt -4) 2))) c)","(/ (- (+ (* -1 (/ (+ (* -1 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3))))) (pow c 2))) (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (* -1 (/ b (pow (sqrt -4) 2)))) c)","(/ (- (+ (* -1 (/ (+ (* 1/2 (/ (* (pow b 3) (pow c 2)) (* a (pow (sqrt -4) 4)))) (* (sqrt (/ c a)) (/ (* b (+ (* -1 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3)))))) (sqrt -4)))) (pow c 3))) (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (pow (sqrt -4) 3)))) (+ (* -1 (/ b (pow (sqrt -4) 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (pow (sqrt -4) 3))))))) c)","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))) (/ b c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* c (+ (* -4 a) (/ (pow b 2) c)))","(+ (* -1/2 (* (sqrt (/ a (pow c 7))) (/ (+ (* 1/1024 (/ (* (pow b 4) c) (* (pow a 3) (pow (sqrt -1/4) 2)))) (* 1/256 (/ (pow b 6) (pow a 4)))) (sqrt -1/4)))) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4)))))","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (/ (+ (* 1/4 b) (* 1/2 (* (sqrt (* a c)) (sqrt -1)))) c))","(* -1 (/ (+ (* -1 (/ (- (+ (* -1/8 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) (* 1/4 (* b c))) c)) (* 1/2 (* (sqrt (* a c)) (sqrt -1)))) c))","(* -1 (/ (+ (* -1 (/ (- (* -1 (/ (- (+ (* 1/32 (/ (* (pow b 3) c) a)) (* 1/2 (* (sqrt (/ 1 (* a c))) (* b (* (sqrt -1) (+ (* -1/8 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))))))))) (+ (* -1/8 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))))) c)) (* 1/4 (* b c))) c)) (* 1/2 (* (sqrt (* a c)) (sqrt -1)))) c))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* -1 (* c (+ (* -1 (/ (pow b 2) c)) (* 4 a))))","(+ (* -1 (/ (+ (* 1/64 (* (sqrt (/ c (pow a 5))) (* (pow b 4) (sqrt -1)))) (* (sqrt (/ a c)) (* (sqrt -1) (+ (* -1/256 (/ (* (pow b 4) c) (pow a 3))) (* 1/256 (/ (pow b 6) (pow a 4))))))) (pow c 3))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))"]],"series":[[3.02783203125,"((/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/ (neg c) b) (neg c) (/ 0 (+ (* b b) 0)) (- (/ 0 (+ (* b b) 0)) (neg b)) (+ (* b b) 0) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (sqrt (+ (* -4 (* c a)) (* b b))) (+ (* -4 (* c a)) (* b b)) (/ (+ (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (* 2 a)) (+ (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b))))) (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))","c","-inf"],[3.083984375,"((/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/ (neg c) b) (neg c) (/ 0 (+ (* b b) 0)) (- (/ 0 (+ (* b b) 0)) (neg b)) (+ (* b b) 0) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (sqrt (+ (* -4 (* c a)) (* b b))) (+ (* -4 (* c a)) (* b b)) (/ (+ (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (* 2 a)) (+ (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b))))) (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))","c","inf"],[2.0810546875,"((/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/ (neg c) b) (neg c) (/ 0 (+ (* b b) 0)) (- (/ 0 (+ (* b b) 0)) (neg b)) (+ (* b b) 0) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (sqrt (+ (* -4 (* c a)) (* b b))) (+ (* -4 (* c a)) (* b b)) (/ (+ (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (* 2 a)) (+ (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b))))) (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))","c","0"],[8.60302734375,"((/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/ (neg c) b) (neg c) (/ 0 (+ (* b b) 0)) (- (/ 0 (+ (* b b) 0)) (neg b)) (+ (* b b) 0) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (sqrt (+ (* -4 (* c a)) (* b b))) (+ (* -4 (* c a)) (* b b)) (/ (+ (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (* 2 a)) (+ (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b))))) (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))","b","-inf"],[3.26708984375,"((/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/ (neg c) b) (neg c) (/ 0 (+ (* b b) 0)) (- (/ 0 (+ (* b b) 0)) (neg b)) (+ (* b b) 0) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (sqrt (+ (* -4 (* c a)) (* b b))) (+ (* -4 (* c a)) (* b b)) (/ (+ (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (* 2 a)) (+ (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b))))) (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))","b","inf"],[2.97607421875,"((/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/ (neg c) b) (neg c) (/ 0 (+ (* b b) 0)) (- (/ 0 (+ (* b b) 0)) (neg b)) (+ (* b b) 0) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (sqrt (+ (* -4 (* c a)) (* b b))) (+ (* -4 (* c a)) (* b b)) (/ (+ (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (* 2 a)) (+ (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b))))) (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))","b","0"],[4.6708984375,"((/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/ (neg c) b) (neg c) (/ 0 (+ (* b b) 0)) (- (/ 0 (+ (* b b) 0)) (neg b)) (+ (* b b) 0) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (sqrt (+ (* -4 (* c a)) (* b b))) (+ (* -4 (* c a)) (* b b)) (/ (+ (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (* 2 a)) (+ (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b))))) (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))","a","-inf"],[2.947021484375,"((/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/ (neg c) b) (neg c) (/ 0 (+ (* b b) 0)) (- (/ 0 (+ (* b b) 0)) (neg b)) (+ (* b b) 0) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (sqrt (+ (* -4 (* c a)) (* b b))) (+ (* -4 (* c a)) (* b b)) (/ (+ (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (* 2 a)) (+ (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b))))) (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))","a","inf"],[1.881103515625,"((/ 1/2 (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b))) (/ a (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/ (neg c) b) (neg c) (/ 0 (+ (* b b) 0)) (- (/ 0 (+ (* b b) 0)) (neg b)) (+ (* b b) 0) (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (sqrt (+ (* -4 (* c a)) (* b b))) (+ (* -4 (* c a)) (* b b)) (/ (+ (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (* 2 a)) (+ (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))) (neg b) (/ 1 (sqrt (/ 1 (+ (* -4 (* c a)) (* b b))))) (sqrt (/ 1 (+ (* -4 (* c a)) (* b b)))))","a","0"]],"time":38.59912109375,"type":"series"},{"count":[[154,153]],"egraph":[[0,8311,4780,0.102948574],[1,3377,5002,0.031779226],[0,1018,5157,0.01119313]],"inputs":[["(* -1 (/ c b))","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","(+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3))))))","(+ (* -1 (/ c b)) (* a (+ (* -1 (/ (pow c 2) (pow b 3))) (* a (+ (* -2 (/ (pow c 3) (pow b 5))) (* -1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","(* -1/2 (/ b c))","(+ (* -1/2 (/ b c)) (* 1/2 (/ a b)))","(+ (* -1/2 (/ b c)) (* a (+ (* -1 (* a (+ (* -1 (/ c (pow b 3))) (* 1/2 (/ c (pow b 3)))))) (* 1/2 (/ 1 b)))))","(+ (* -1/2 (/ b c)) (* a (+ (* a (- (* -1 (* a (+ (* -1 (/ (* c (+ (* -1 (/ c (pow b 3))) (* 1/2 (/ c (pow b 3))))) (pow b 2))) (+ (* -1/8 (/ (* b (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) (pow c 2))) (/ (pow c 2) (pow b 5)))))) (+ (* -1 (/ c (pow b 3))) (* 1/2 (/ c (pow b 3)))))) (* 1/2 (/ 1 b)))))","(* -2 (/ (* a c) b))","(* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b))))))))","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(/ 1 b)","(+ (* 2 (/ (* a c) (pow b 3))) (/ 1 b))","(+ (* a (+ (* -1/2 (* a (* b (+ (* -16 (/ (pow c 2) (pow b 6))) (* 4 (/ (pow c 2) (pow b 6))))))) (* 2 (/ c (pow b 3))))) (/ 1 b))","(+ (* a (+ (* 2 (/ c (pow b 3))) (* a (+ (* -1/2 (* a (* b (+ (* -64 (/ (pow c 3) (pow b 8))) (* -2 (/ (* c (+ (* -16 (/ (pow c 2) (pow b 6))) (* 4 (/ (pow c 2) (pow b 6))))) (pow b 2))))))) (* -1/2 (* b (+ (* -16 (/ (pow c 2) (pow b 6))) (* 4 (/ (pow c 2) (pow b 6)))))))))) (/ 1 b))","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(* (sqrt (/ a c)) (/ 1 (sqrt -4)))","(+ (* (sqrt (/ a c)) (/ 1 (sqrt -4))) (/ b (* c (pow (sqrt -4) 2))))","(- (+ (* -1 (/ (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3))))) (pow a 2))) (* (sqrt (/ a c)) (/ 1 (sqrt -4)))) (* -1 (/ b (* c (pow (sqrt -4) 2)))))","(- (+ (* -1 (/ (+ (* 1/2 (/ (* (pow a 2) (pow b 3)) (* (pow c 2) (pow (sqrt -4) 4)))) (* (sqrt (/ a c)) (/ (* b (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (sqrt -4)))) (pow a 3))) (* (sqrt (/ a c)) (/ 1 (sqrt -4)))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (+ (* -1 (/ b (* c (pow (sqrt -4) 2)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* -4 (* a c))","(* a (+ (* -4 c) (/ (pow b 2) a)))","(* (sqrt (/ 1 (* a c))) (sqrt -1/4))","(+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4)))","(+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4))))","(+ (* -1/2 (* (sqrt (/ c (pow a 7))) (/ (+ (* 1/1024 (/ (* a (pow b 4)) (* (pow c 3) (pow (sqrt -1/4) 2)))) (* 1/256 (/ (pow b 6) (pow c 4)))) (sqrt -1/4)))) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4)))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(* -1/2 (* (sqrt (/ a c)) (sqrt -1)))","(+ (* -1/2 (* (sqrt (/ a c)) (sqrt -1))) (* -1/4 (/ b c)))","(+ (* -1 (/ (- (+ (* -1/16 (* (sqrt (/ a (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ a (pow c 3))) (* (pow b 2) (sqrt -1))))) (* -1/4 (/ (* a b) c))) a)) (* -1/2 (* (sqrt (/ a c)) (sqrt -1))))","(+ (* -1 (/ (- (* -1 (/ (- (+ (* -1/32 (/ (* a (pow b 3)) (pow c 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (* b (* (sqrt -1) (+ (* -1/16 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))))))))) (+ (* -1/16 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))))) a)) (* -1/4 (/ (* a b) c))) a)) (* -1/2 (* (sqrt (/ a c)) (sqrt -1))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(* -1 (* a (+ (* -1 (/ (pow b 2) a)) (* 4 c))))","(* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))","(+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(+ (* -1 (/ (+ (* 1/64 (* (sqrt (/ a (pow c 5))) (* (pow b 4) (sqrt -1)))) (* (sqrt (/ c a)) (* (sqrt -1) (+ (* -1/256 (/ (* a (pow b 4)) (pow c 3))) (* 1/256 (/ (pow b 6) (pow c 4))))))) (pow a 3))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(+ (* b (+ (* -1 (* b (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3))))))) (/ 1 (* c (pow (sqrt -4) 2))))) (* (sqrt (/ a c)) (/ 1 (sqrt -4))))","(+ (* b (+ (* b (- (* -1 (* b (+ (* 1/2 (/ 1 (* a (* (pow c 2) (pow (sqrt -4) 4))))) (* (sqrt (/ 1 (* a c))) (/ (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3))))) (sqrt -4)))))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3))))))) (/ 1 (* c (pow (sqrt -4) 2))))) (* (sqrt (/ a c)) (/ 1 (sqrt -4))))","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","0","(* -1 b)","(+ (* (sqrt (/ 1 (* a c))) (sqrt -1/4)) (* (pow b 2) (+ (* -1/2 (* (sqrt (* a c)) (/ (* (pow b 2) (+ (* 1/1024 (/ 1 (* (pow a 3) (* (pow c 3) (pow (sqrt -1/4) 2))))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3)))))) (sqrt -1/4)))) (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (sqrt -1/4)))))))","(+ (* (sqrt (/ 1 (* a c))) (sqrt -1/4)) (* (pow b 2) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (sqrt -1/4)))) (* (pow b 2) (+ (* -1/2 (* (sqrt (* a c)) (/ (* (pow b 2) (+ (* 1/32 (/ (+ (* 1/1024 (/ 1 (* (pow a 3) (* (pow c 3) (pow (sqrt -1/4) 2))))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3))))) (* a (* c (pow (sqrt -1/4) 2))))) (* 1/256 (/ 1 (* (pow a 4) (pow c 4)))))) (sqrt -1/4)))) (* -1/2 (* (sqrt (* a c)) (/ (+ (* 1/1024 (/ 1 (* (pow a 3) (* (pow c 3) (pow (sqrt -1/4) 2))))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3))))) (sqrt -1/4)))))))))","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(* b (- (* 1/2 (/ a (pow b 2))) (* 1/2 (/ 1 c))))","(* b (- (* -1 (/ (+ (* -1 (* (pow a 2) c)) (* 1/2 (* (pow a 2) c))) (pow b 4))) (+ (* -1/2 (/ a (pow b 2))) (* 1/2 (/ 1 c)))))","(* b (- (* -1 (/ (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) c)) (* 1/2 (* (pow a 2) c)))))) (+ (* -1/8 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow c 2)))) (* (pow a 3) (pow c 2)))) (pow b 6))) (+ (* -1 (/ (* (pow a 2) c) (pow b 4))) (+ (* -1/2 (/ a (pow b 2))) (+ (* 1/2 (/ (* (pow a 2) c) (pow b 4))) (* 1/2 (/ 1 c)))))))","(/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(/ (+ 1 (* 2 (/ (* a c) (pow b 2)))) b)","(/ (+ 1 (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2))))) b)","(/ (+ 1 (+ (* -1/2 (/ (+ (* -64 (* (pow a 3) (pow c 3))) (* -2 (* a (* c (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))))))) (pow b 6))) (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2)))))) b)","(* -1 (/ b a))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(* -1/2 (/ a b))","(* -1 (/ (+ (* 1/2 a) (* 1/2 (/ (* (pow a 2) c) (pow b 2)))) b))","(* -1 (/ (- (+ (* 1/2 a) (/ (* (pow a 3) (pow c 2)) (pow b 4))) (* -1/2 (/ (* (pow a 2) c) (pow b 2)))) b))","(* -1 (/ (- (+ (* -1 (/ (+ (* -2 (* (pow a 4) (pow c 3))) (* -1/2 (* (pow a 4) (pow c 3)))) (pow b 6))) (* 1/2 a)) (+ (* -1 (/ (* (pow a 3) (pow c 2)) (pow b 4))) (* -1/2 (/ (* (pow a 2) c) (pow b 2))))) b))","(* -2 b)","(* -1 (* b (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(/ -1 b)","(* -1 (/ (+ 1 (* 2 (/ (* a c) (pow b 2)))) b))","(* -1 (/ (+ 1 (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2))))) b))","(* -1 (/ (+ 1 (+ (* -1/2 (/ (+ (* -64 (* (pow a 3) (pow c 3))) (* -2 (* a (* c (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))))))) (pow b 6))) (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2)))))) b))","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b)))","(* c (- (* c (+ (* -1 (/ a (pow b 3))) (* c (+ (* -2 (/ (pow a 2) (pow b 5))) (* -1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (/ 1 b)))","(/ (+ (* -1/2 b) (* 1/2 (/ (* a c) b))) c)","(/ (+ (* -1/2 b) (* c (- (* -1 (* c (+ (* -1 (/ (pow a 2) (pow b 3))) (* 1/2 (/ (pow a 2) (pow b 3)))))) (* -1/2 (/ a b))))) c)","(/ (+ (* -1/2 b) (* c (- (* c (- (* -1 (* c (+ (* -1 (/ (* a (+ (* -1 (/ (pow a 2) (pow b 3))) (* 1/2 (/ (pow a 2) (pow b 3))))) (pow b 2))) (+ (* -1/8 (/ (* b (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) a)) (/ (pow a 3) (pow b 5)))))) (+ (* -1 (/ (pow a 2) (pow b 3))) (* 1/2 (/ (pow a 2) (pow b 3)))))) (* -1/2 (/ a b))))) c)","(* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -2 (/ (pow a 2) (pow b 3))) (* c (+ (* -4 (/ (pow a 3) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b))))))))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* -1 c)","(+ (* c (+ (* -1/2 (* b (* c (+ (* -16 (/ (pow a 2) (pow b 6))) (* 4 (/ (pow a 2) (pow b 6))))))) (* 2 (/ a (pow b 3))))) (/ 1 b))","(+ (* c (+ (* 2 (/ a (pow b 3))) (* c (+ (* -1/2 (* b (* c (+ (* -64 (/ (pow a 3) (pow b 8))) (* -2 (/ (* a (+ (* -16 (/ (pow a 2) (pow b 6))) (* 4 (/ (pow a 2) (pow b 6))))) (pow b 2))))))) (* -1/2 (* b (+ (* -16 (/ (pow a 2) (pow b 6))) (* 4 (/ (pow a 2) (pow b 6)))))))))) (/ 1 b))","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(/ (+ (* (sqrt (* a c)) (/ 1 (sqrt -4))) (/ b (pow (sqrt -4) 2))) c)","(/ (- (+ (* -1 (/ (+ (* -1 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3))))) (pow c 2))) (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (* -1 (/ b (pow (sqrt -4) 2)))) c)","(/ (- (+ (* -1 (/ (+ (* 1/2 (/ (* (pow b 3) (pow c 2)) (* a (pow (sqrt -4) 4)))) (* (sqrt (/ c a)) (/ (* b (+ (* -1 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3)))))) (sqrt -4)))) (pow c 3))) (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (pow (sqrt -4) 3)))) (+ (* -1 (/ b (pow (sqrt -4) 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (pow (sqrt -4) 3))))))) c)","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))) (/ b c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* c (+ (* -4 a) (/ (pow b 2) c)))","(+ (* -1/2 (* (sqrt (/ a (pow c 7))) (/ (+ (* 1/1024 (/ (* (pow b 4) c) (* (pow a 3) (pow (sqrt -1/4) 2)))) (* 1/256 (/ (pow b 6) (pow a 4)))) (sqrt -1/4)))) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4)))))","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (/ (+ (* 1/4 b) (* 1/2 (* (sqrt (* a c)) (sqrt -1)))) c))","(* -1 (/ (+ (* -1 (/ (- (+ (* -1/8 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) (* 1/4 (* b c))) c)) (* 1/2 (* (sqrt (* a c)) (sqrt -1)))) c))","(* -1 (/ (+ (* -1 (/ (- (* -1 (/ (- (+ (* 1/32 (/ (* (pow b 3) c) a)) (* 1/2 (* (sqrt (/ 1 (* a c))) (* b (* (sqrt -1) (+ (* -1/8 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))))))))) (+ (* -1/8 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))))) c)) (* 1/4 (* b c))) c)) (* 1/2 (* (sqrt (* a c)) (sqrt -1)))) c))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* -1 (* c (+ (* -1 (/ (pow b 2) c)) (* 4 a))))","(+ (* -1 (/ (+ (* 1/64 (* (sqrt (/ c (pow a 5))) (* (pow b 4) (sqrt -1)))) (* (sqrt (/ a c)) (* (sqrt -1) (+ (* -1/256 (/ (* (pow b 4) c) (pow a 3))) (* 1/256 (/ (pow b 6) (pow a 4))))))) (pow c 3))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))"]],"memory":[[-2040416,55296800]],"method":["egg-herbie"],"outputs":[["(* -1 (/ c b))","(/.f64 (neg.f64 c) b)","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","(neg.f64 (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)))","(+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3))))))","(fma.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) (pow.f64 b #s(literal 5 binary64))) #s(literal -2 binary64) (/.f64 (neg.f64 (*.f64 c c)) (pow.f64 b #s(literal 3 binary64)))) a (/.f64 (neg.f64 c) b))","(+ (* -1 (/ c b)) (* a (+ (* -1 (/ (pow c 2) (pow b 3))) (* a (+ (* -2 (/ (pow c 3) (pow b 5))) (* -1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 20 binary64)) a) b) #s(literal -1/4 binary64) (/.f64 (*.f64 #s(literal -2 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 5 binary64)))) a (/.f64 (neg.f64 (*.f64 c c)) (pow.f64 b #s(literal 3 binary64)))) a (/.f64 (neg.f64 c) b))","(* -1/2 (/ b c))","(*.f64 (/.f64 b c) #s(literal -1/2 binary64))","(+ (* -1/2 (/ b c)) (* 1/2 (/ a b)))","(fma.f64 (/.f64 a b) #s(literal 1/2 binary64) (*.f64 (/.f64 b c) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ b c)) (* a (+ (* -1 (* a (+ (* -1 (/ c (pow b 3))) (* 1/2 (/ c (pow b 3)))))) (* 1/2 (/ 1 b)))))","(fma.f64 (fma.f64 (*.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64)) a (/.f64 #s(literal 1/2 binary64) b)) a (*.f64 (/.f64 b c) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ b c)) (* a (+ (* a (- (* -1 (* a (+ (* -1 (/ (* c (+ (* -1 (/ c (pow b 3))) (* 1/2 (/ c (pow b 3))))) (pow b 2))) (+ (* -1/8 (/ (* b (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) (pow c 2))) (/ (pow c 2) (pow b 5)))))) (+ (* -1 (/ c (pow b 3))) (* 1/2 (/ c (pow b 3)))))) (* 1/2 (/ 1 b)))))","(fma.f64 (fma.f64 (fma.f64 (neg.f64 a) (fma.f64 (neg.f64 c) (*.f64 (/.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) b) (/.f64 #s(literal -1/2 binary64) b)) (fma.f64 (/.f64 #s(literal -1/8 binary64) c) (/.f64 (*.f64 (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 20 binary64)) b) c) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 5 binary64))))) (*.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64))) a (/.f64 #s(literal 1/2 binary64) b)) a (*.f64 (/.f64 b c) #s(literal -1/2 binary64)))","(* -2 (/ (* a c) b))","(*.f64 (*.f64 a (/.f64 c b)) #s(literal -2 binary64))","(* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))","(*.f64 (*.f64 #s(literal -2 binary64) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b))) a)","(* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))","(*.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) #s(literal -2 binary64) (/.f64 (*.f64 #s(literal -4 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)) (pow.f64 b #s(literal 5 binary64)))) a (*.f64 #s(literal -2 binary64) (/.f64 c b))) a)","(* a (+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 20 binary64)) a) b) (/.f64 (*.f64 #s(literal -4 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 5 binary64)))) a (/.f64 (*.f64 #s(literal -2 binary64) (*.f64 c c)) (pow.f64 b #s(literal 3 binary64)))) a (*.f64 #s(literal -2 binary64) (/.f64 c b))) a)","b","(+ b (* -2 (/ (* a c) b)))","(fma.f64 (*.f64 a (/.f64 c b)) #s(literal -2 binary64) b)","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(fma.f64 (*.f64 #s(literal -2 binary64) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b))) a b)","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) #s(literal -2 binary64) (/.f64 (*.f64 #s(literal -4 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)) (pow.f64 b #s(literal 5 binary64)))) a (*.f64 #s(literal -2 binary64) (/.f64 c b))) a b)","(pow b 2)","(*.f64 b b)","(+ (* -4 (* a c)) (pow b 2))","(fma.f64 (*.f64 c a) #s(literal -4 binary64) (*.f64 b b))","(/ 1 b)","(/.f64 #s(literal 1 binary64) b)","(+ (* 2 (/ (* a c) (pow b 3))) (/ 1 b))","(fma.f64 (*.f64 a (/.f64 c (pow.f64 b #s(literal 3 binary64)))) #s(literal 2 binary64) (/.f64 #s(literal 1 binary64) b))","(+ (* a (+ (* -1/2 (* a (* b (+ (* -16 (/ (pow c 2) (pow b 6))) (* 4 (/ (pow c 2) (pow b 6))))))) (* 2 (/ c (pow b 3))))) (/ 1 b))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (*.f64 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b #s(literal 6 binary64))) #s(literal -12 binary64)) b) (*.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64))) a (/.f64 #s(literal 1 binary64) b))","(+ (* a (+ (* 2 (/ c (pow b 3))) (* a (+ (* -1/2 (* a (* b (+ (* -64 (/ (pow c 3) (pow b 8))) (* -2 (/ (* c (+ (* -16 (/ (pow c 2) (pow b 6))) (* 4 (/ (pow c 2) (pow b 6))))) (pow b 2))))))) (* -1/2 (* b (+ (* -16 (/ (pow c 2) (pow b 6))) (* 4 (/ (pow c 2) (pow b 6)))))))))) (/ 1 b))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (fma.f64 (*.f64 b a) (fma.f64 (/.f64 #s(literal -2 binary64) b) (/.f64 (*.f64 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b #s(literal 6 binary64))) #s(literal -12 binary64)) c) b) (/.f64 (*.f64 #s(literal -64 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 8 binary64)))) (*.f64 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b #s(literal 6 binary64))) #s(literal -12 binary64)) b))) a (*.f64 (/.f64 c (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64))) a (/.f64 #s(literal 1 binary64) b))","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(*.f64 (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal 1/2 binary64))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(fma.f64 (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal 1/2 binary64) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/4 binary64) (fma.f64 (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal 1/2 binary64) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(fma.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/16 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/4 binary64) (fma.f64 (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal 1/2 binary64) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))))","(* (sqrt (/ a c)) (/ 1 (sqrt -4)))","(/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))","(+ (* (sqrt (/ a c)) (/ 1 (sqrt -4))) (/ b (* c (pow (sqrt -4) 2))))","(-.f64 (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))) (*.f64 #s(literal 1/4 binary64) (/.f64 b c)))","(- (+ (* -1 (/ (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3))))) (pow a 2))) (* (sqrt (/ a c)) (/ 1 (sqrt -4)))) (* -1 (/ b (* c (pow (sqrt -4) 2)))))","(-.f64 (-.f64 (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))) (*.f64 (/.f64 (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))))) a) (/.f64 #s(literal -1/2 binary64) a))) (*.f64 #s(literal 1/4 binary64) (/.f64 b c)))","(- (+ (* -1 (/ (+ (* 1/2 (/ (* (pow a 2) (pow b 3)) (* (pow c 2) (pow (sqrt -4) 4)))) (* (sqrt (/ a c)) (/ (* b (+ (* -1 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow a 3) (pow c 3))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (sqrt -4)))) (pow a 3))) (* (sqrt (/ a c)) (/ 1 (sqrt -4)))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (+ (* -1 (/ b (* c (pow (sqrt -4) 2)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))))))","(-.f64 (-.f64 (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))) (/.f64 (fma.f64 (*.f64 b (/.f64 (*.f64 (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/2 binary64)) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 a c)) (*.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 c c)) (/.f64 (*.f64 (*.f64 a a) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 4 binary64))))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (neg.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (*.f64 #s(literal 1/4 binary64) (/.f64 b c)))))","(* (sqrt (* a c)) (sqrt -4))","(*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64)))","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (-.f64 (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))) (/.f64 b a)) a)","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (-.f64 (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))) (/.f64 b a))) a)","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a)))","(*.f64 (fma.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (-.f64 (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))) (/.f64 b a)))) a)","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))))) a)","(* -4 (* a c))","(*.f64 (*.f64 c a) #s(literal -4 binary64))","(* a (+ (* -4 c) (/ (pow b 2) a)))","(*.f64 (fma.f64 #s(literal -4 binary64) c (/.f64 (*.f64 b b) a)) a)","(* (sqrt (/ 1 (* a c))) (sqrt -1/4))","(*.f64 (sqrt.f64 #s(literal -1/4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))))","(+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4)))","(fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -1/4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/32 binary64) (*.f64 (sqrt.f64 #s(literal -1/4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))))","(+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4))))","(fma.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 #s(literal -1/4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal -1/128 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -1/4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/32 binary64) (*.f64 (sqrt.f64 #s(literal -1/4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))))))","(+ (* -1/2 (* (sqrt (/ c (pow a 7))) (/ (+ (* 1/1024 (/ (* a (pow b 4)) (* (pow c 3) (pow (sqrt -1/4) 2)))) (* 1/256 (/ (pow b 6) (pow c 4)))) (sqrt -1/4)))) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 7 binary64))))) (/.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) a) (pow.f64 c #s(literal 3 binary64))) #s(literal -1/256 binary64) (/.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 b #s(literal 6 binary64))) (pow.f64 c #s(literal 4 binary64)))) (sqrt.f64 #s(literal -1/4 binary64))) (fma.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 #s(literal -1/4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal -1/128 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -1/4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/32 binary64) (*.f64 (sqrt.f64 #s(literal -1/4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(-.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 #s(literal 1/2 binary64) b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 #s(literal 1/2 binary64) b (/.f64 (fma.f64 (*.f64 #s(literal 1/128 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 a c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)))) (neg.f64 a))) a)))","(* -1/2 (* (sqrt (/ a c)) (sqrt -1)))","(*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 a c))) #s(literal -1/2 binary64))","(+ (* -1/2 (* (sqrt (/ a c)) (sqrt -1))) (* -1/4 (/ b c)))","(fma.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 a c))) #s(literal -1/2 binary64) (*.f64 (/.f64 b c) #s(literal -1/4 binary64)))","(+ (* -1 (/ (- (+ (* -1/16 (* (sqrt (/ a (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ a (pow c 3))) (* (pow b 2) (sqrt -1))))) (* -1/4 (/ (* a b) c))) a)) (* -1/2 (* (sqrt (/ a c)) (sqrt -1))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 a (pow.f64 c #s(literal 3 binary64)))) (*.f64 b b)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/16 binary64) (*.f64 (*.f64 a (/.f64 b c)) #s(literal 1/4 binary64))) (neg.f64 a)))","(+ (* -1 (/ (- (* -1 (/ (- (+ (* -1/32 (/ (* a (pow b 3)) (pow c 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (* b (* (sqrt -1) (+ (* -1/16 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))))))))) (+ (* -1/16 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) (pow c 3))) (* (pow b 2) (sqrt -1)))))) a)) (* -1/4 (/ (* a b) c))) a)) (* -1/2 (* (sqrt (/ a c)) (sqrt -1))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 #s(literal -1/32 binary64) c) (/.f64 (*.f64 (pow.f64 b #s(literal 3 binary64)) a) c) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 (*.f64 b (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/16 binary64))) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/16 binary64)))) a) #s(literal -1 binary64) (*.f64 (*.f64 a (/.f64 b c)) #s(literal 1/4 binary64))) (neg.f64 a)))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a))) #s(literal -2 binary64))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal 2 binary64) (/.f64 b a)))","(* -1 (* a (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (neg.f64 b)) (neg.f64 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/64 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 a c))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)))) (neg.f64 a)) b) (neg.f64 a))))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/64 binary64) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal 1/512 binary64) (fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/64 binary64) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)))))))","(* -1 (* a (+ (* -1 (/ (pow b 2) a)) (* 4 c))))","(*.f64 (neg.f64 a) (fma.f64 #s(literal 4 binary64) c (/.f64 (*.f64 b b) (neg.f64 a))))","(* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))","(*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) #s(literal 1/2 binary64))","(+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/16 binary64)))","(+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal -1/64 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/16 binary64))))","(+ (* -1 (/ (+ (* 1/64 (* (sqrt (/ a (pow c 5))) (* (pow b 4) (sqrt -1)))) (* (sqrt (/ c a)) (* (sqrt -1) (+ (* -1/256 (/ (* a (pow b 4)) (pow c 3))) (* 1/256 (/ (pow b 6) (pow c 4))))))) (pow a 3))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(-.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/16 binary64))) (/.f64 (fma.f64 (*.f64 #s(literal 1/64 binary64) (sqrt.f64 (/.f64 a (pow.f64 c #s(literal 5 binary64))))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) a) (pow.f64 c #s(literal 3 binary64))) #s(literal -1/256 binary64) (/.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 b #s(literal 6 binary64))) (pow.f64 c #s(literal 4 binary64)))) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))) (pow.f64 a #s(literal 3 binary64))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(fma.f64 (fma.f64 (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/4 binary64) (/.f64 #s(literal -1/2 binary64) a)) b (*.f64 (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal 1/2 binary64)))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/16 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/4 binary64))) b (/.f64 #s(literal -1/2 binary64) a)) b (*.f64 (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))) #s(literal 1/2 binary64)))","(+ (* b (+ (* -1 (* b (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3))))))) (/ 1 (* c (pow (sqrt -4) 2))))) (* (sqrt (/ a c)) (/ 1 (sqrt -4))))","(fma.f64 (fma.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) #s(literal 1/2 binary64)) b (/.f64 #s(literal 1 binary64) (*.f64 #s(literal -4 binary64) c))) b (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* b (+ (* b (- (* -1 (* b (+ (* 1/2 (/ 1 (* a (* (pow c 2) (pow (sqrt -4) 4))))) (* (sqrt (/ 1 (* a c))) (/ (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3))))) (sqrt -4)))))) (+ (* -1 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ 1 (pow (sqrt -4) 3))))))) (/ 1 (* c (pow (sqrt -4) 2))))) (* (sqrt (/ a c)) (/ 1 (sqrt -4))))","(fma.f64 (fma.f64 (fma.f64 (neg.f64 b) (fma.f64 (/.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) #s(literal -1/2 binary64)) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (*.f64 (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 4 binary64)) (*.f64 c c)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) #s(literal 1/2 binary64))) b (/.f64 #s(literal 1 binary64) (*.f64 #s(literal -4 binary64) c))) b (/.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64)) (neg.f64 b))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) #s(literal 1/2 binary64) #s(literal -1 binary64)) b (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) b #s(literal -1 binary64)) b (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64))))) (/.f64 (*.f64 b b) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) #s(literal -1/8 binary64))) (*.f64 b b) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))))","0","#s(literal 0 binary64)","(* -1 b)","(neg.f64 b)","(+ (* (sqrt (/ 1 (* a c))) (sqrt -1/4)) (* (pow b 2) (+ (* -1/2 (* (sqrt (* a c)) (/ (* (pow b 2) (+ (* 1/1024 (/ 1 (* (pow a 3) (* (pow c 3) (pow (sqrt -1/4) 2))))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3)))))) (sqrt -1/4)))) (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (sqrt -1/4)))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (*.f64 c a))) (/.f64 (*.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64)))) (/.f64 #s(literal 1/1024 binary64) (*.f64 (*.f64 #s(literal -1/4 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64))))) (*.f64 b b)) (sqrt.f64 #s(literal -1/4 binary64))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (sqrt.f64 #s(literal -1/4 binary64))) #s(literal -1/32 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 #s(literal -1/4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))))","(+ (* (sqrt (/ 1 (* a c))) (sqrt -1/4)) (* (pow b 2) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (sqrt -1/4)))) (* (pow b 2) (+ (* -1/2 (* (sqrt (* a c)) (/ (* (pow b 2) (+ (* 1/32 (/ (+ (* 1/1024 (/ 1 (* (pow a 3) (* (pow c 3) (pow (sqrt -1/4) 2))))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3))))) (* a (* c (pow (sqrt -1/4) 2))))) (* 1/256 (/ 1 (* (pow a 4) (pow c 4)))))) (sqrt -1/4)))) (* -1/2 (* (sqrt (* a c)) (/ (+ (* 1/1024 (/ 1 (* (pow a 3) (* (pow c 3) (pow (sqrt -1/4) 2))))) (* 1/64 (/ 1 (* (pow a 3) (pow c 3))))) (sqrt -1/4)))))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (*.f64 c a))) (fma.f64 (*.f64 b b) (/.f64 (fma.f64 (/.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64)))) (/.f64 #s(literal 1/1024 binary64) (*.f64 (*.f64 #s(literal -1/4 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64))))) (*.f64 (*.f64 #s(literal -1/4 binary64) c) a)) #s(literal 1/32 binary64) (/.f64 #s(literal 1/256 binary64) (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))))) (sqrt.f64 #s(literal -1/4 binary64))) (/.f64 (+.f64 (/.f64 #s(literal 1/64 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64)))) (/.f64 #s(literal 1/1024 binary64) (*.f64 (*.f64 #s(literal -1/4 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64))))) (sqrt.f64 #s(literal -1/4 binary64))))) (*.f64 b b) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (sqrt.f64 #s(literal -1/4 binary64))) #s(literal -1/32 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 #s(literal -1/4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))))","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(/.f64 (neg.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c)) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b)","(/.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 4 binary64))) #s(literal -2 binary64) (neg.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(/.f64 (fma.f64 (/.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 4 binary64))) #s(literal -2 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (pow.f64 b #s(literal 6 binary64))) (/.f64 #s(literal 20 binary64) a)) #s(literal -1/4 binary64) (neg.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c)))) b)","(* b (- (* 1/2 (/ a (pow b 2))) (* 1/2 (/ 1 c))))","(*.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal -1/2 binary64) c)) b)","(* b (- (* -1 (/ (+ (* -1 (* (pow a 2) c)) (* 1/2 (* (pow a 2) c))) (pow b 4))) (+ (* -1/2 (/ a (pow b 2))) (* 1/2 (/ 1 c)))))","(*.f64 (neg.f64 (+.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) #s(literal -1/2 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (/.f64 a (*.f64 b b)) #s(literal -1/2 binary64) (/.f64 #s(literal 1/2 binary64) c)))) b)","(* b (- (* -1 (/ (+ (* -1 (* a (* c (+ (* -1 (* (pow a 2) c)) (* 1/2 (* (pow a 2) c)))))) (+ (* -1/8 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow c 2)))) (* (pow a 3) (pow c 2)))) (pow b 6))) (+ (* -1 (/ (* (pow a 2) c) (pow b 4))) (+ (* -1/2 (/ a (pow b 2))) (+ (* 1/2 (/ (* (pow a 2) c) (pow b 4))) (* 1/2 (/ 1 c)))))))","(*.f64 (-.f64 (/.f64 (fma.f64 (neg.f64 (*.f64 (*.f64 (*.f64 (*.f64 a a) c) #s(literal -1/2 binary64)) c)) a (fma.f64 (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (*.f64 c c)) (/.f64 #s(literal 20 binary64) a)) #s(literal -1/8 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 c c)))) (neg.f64 (pow.f64 b #s(literal 6 binary64)))) (fma.f64 (neg.f64 (*.f64 a a)) (/.f64 c (pow.f64 b #s(literal 4 binary64))) (fma.f64 (/.f64 #s(literal -1/2 binary64) b) (/.f64 a b) (fma.f64 (*.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 4 binary64)))) #s(literal 1/2 binary64) (/.f64 #s(literal 1/2 binary64) c))))) b)","(/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/.f64 (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b) (*.f64 c a))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 4 binary64))) #s(literal -4 binary64) (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b) (*.f64 c a)))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b)","(/.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 4 binary64))) #s(literal -4 binary64) (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) #s(literal 20 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1/2 binary64) (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 (*.f64 c c) b) (*.f64 c a))))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(*.f64 (fma.f64 (/.f64 #s(literal -2 binary64) b) (*.f64 a (/.f64 c b)) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(*.f64 (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 a b) (/.f64 c b))) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64))) #s(literal -4 binary64) (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 a b) (/.f64 c b))) #s(literal 1 binary64))) b)","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(*.f64 (fma.f64 (/.f64 (*.f64 #s(literal -4 binary64) a) b) (/.f64 c b) #s(literal 1 binary64)) (*.f64 b b))","(/ (+ 1 (* 2 (/ (* a c) (pow b 2)))) b)","(/.f64 (fma.f64 (/.f64 #s(literal 2 binary64) b) (*.f64 a (/.f64 c b)) #s(literal 1 binary64)) b)","(/ (+ 1 (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2))))) b)","(/.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal -12 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1/2 binary64) (fma.f64 (/.f64 #s(literal 2 binary64) b) (*.f64 a (/.f64 c b)) #s(literal 1 binary64))) b)","(/ (+ 1 (+ (* -1/2 (/ (+ (* -64 (* (pow a 3) (pow c 3))) (* -2 (* a (* c (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))))))) (pow b 6))) (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2)))))) b)","(/.f64 (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal -12 binary64)) c) (*.f64 (*.f64 #s(literal -64 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (pow.f64 b #s(literal 6 binary64))) (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal -12 binary64)) (pow.f64 b #s(literal 4 binary64)))) (fma.f64 (/.f64 #s(literal 2 binary64) b) (*.f64 a (/.f64 c b)) #s(literal 1 binary64))) b)","(* -1 (/ b a))","(/.f64 (neg.f64 b) a)","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(*.f64 (neg.f64 b) (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b #s(literal 4 binary64)))) (/.f64 c (*.f64 b b))))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(*.f64 (neg.f64 b) (fma.f64 (/.f64 (*.f64 (*.f64 a a) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64))) #s(literal -2 binary64) (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b #s(literal 4 binary64)))) (/.f64 c (*.f64 b b)))))","(* -1/2 (/ a b))","(*.f64 (/.f64 a b) #s(literal -1/2 binary64))","(* -1 (/ (+ (* 1/2 a) (* 1/2 (/ (* (pow a 2) c) (pow b 2)))) b))","(/.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 c b) a)) (neg.f64 b))","(* -1 (/ (- (+ (* 1/2 a) (/ (* (pow a 3) (pow c 2)) (pow b 4))) (* -1/2 (/ (* (pow a 2) c) (pow b 2)))) b))","(/.f64 (fma.f64 (pow.f64 a #s(literal 3 binary64)) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 #s(literal 1/2 binary64) (fma.f64 (/.f64 (*.f64 a a) b) (/.f64 c b) a))) (neg.f64 b))","(* -1 (/ (- (+ (* -1 (/ (+ (* -2 (* (pow a 4) (pow c 3))) (* -1/2 (* (pow a 4) (pow c 3)))) (pow b 6))) (* 1/2 a)) (+ (* -1 (/ (* (pow a 3) (pow c 2)) (pow b 4))) (* -1/2 (/ (* (pow a 2) c) (pow b 2))))) b))","(/.f64 (-.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) a) (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 3 binary64))) #s(literal -5/2 binary64)) (pow.f64 b #s(literal 6 binary64)))) (fma.f64 (neg.f64 (pow.f64 a #s(literal 3 binary64))) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 #s(literal -1/2 binary64) b) (/.f64 (*.f64 (*.f64 a a) c) b)))) (neg.f64 b))","(* -2 b)","(*.f64 #s(literal -2 binary64) b)","(* -1 (* b (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (neg.f64 b) (fma.f64 (/.f64 #s(literal -2 binary64) b) (*.f64 a (/.f64 c b)) #s(literal 2 binary64)))","(* -1 (* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (neg.f64 b) (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 a b) (/.f64 c b))) #s(literal 2 binary64)))","(* -1 (* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(*.f64 (neg.f64 b) (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64))) #s(literal -4 binary64) (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 a b) (/.f64 c b))) #s(literal 2 binary64))))","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (neg.f64 b) (fma.f64 (/.f64 #s(literal -2 binary64) b) (*.f64 a (/.f64 c b)) #s(literal 1 binary64)))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (neg.f64 b) (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 a b) (/.f64 c b))) #s(literal 1 binary64)))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(*.f64 (neg.f64 b) (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 6 binary64))) #s(literal -4 binary64) (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 (/.f64 a b) (/.f64 c b))) #s(literal 1 binary64))))","(/ -1 b)","(/.f64 #s(literal -1 binary64) b)","(* -1 (/ (+ 1 (* 2 (/ (* a c) (pow b 2)))) b))","(/.f64 (fma.f64 (/.f64 #s(literal 2 binary64) b) (*.f64 a (/.f64 c b)) #s(literal 1 binary64)) (neg.f64 b))","(* -1 (/ (+ 1 (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2))))) b))","(/.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal -12 binary64)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1/2 binary64) (fma.f64 (/.f64 #s(literal 2 binary64) b) (*.f64 a (/.f64 c b)) #s(literal 1 binary64))) (neg.f64 b))","(* -1 (/ (+ 1 (+ (* -1/2 (/ (+ (* -64 (* (pow a 3) (pow c 3))) (* -2 (* a (* c (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))))))) (pow b 6))) (+ (* -1/2 (/ (+ (* -16 (* (pow a 2) (pow c 2))) (* 4 (* (pow a 2) (pow c 2)))) (pow b 4))) (* 2 (/ (* a c) (pow b 2)))))) b))","(/.f64 (fma.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal -12 binary64)) c) (*.f64 (*.f64 #s(literal -64 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (pow.f64 b #s(literal 6 binary64))) (/.f64 (*.f64 (*.f64 (*.f64 a a) (*.f64 c c)) #s(literal -12 binary64)) (pow.f64 b #s(literal 4 binary64)))) (fma.f64 (/.f64 #s(literal 2 binary64) b) (*.f64 a (/.f64 c b)) #s(literal 1 binary64))) (neg.f64 b))","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(*.f64 (neg.f64 (fma.f64 a (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) b))) c)","(* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b)))","(*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 5 binary64)))) #s(literal -2 binary64) (/.f64 (neg.f64 a) (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal -1 binary64) b)) c)","(* c (- (* c (+ (* -1 (/ a (pow b 3))) (* c (+ (* -2 (/ (pow a 2) (pow b 5))) (* -1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (/ 1 b)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 #s(literal -1/4 binary64) b) (/.f64 (*.f64 (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 20 binary64)) c) a) (/.f64 (*.f64 #s(literal -2 binary64) (*.f64 a a)) (pow.f64 b #s(literal 5 binary64)))) c (/.f64 (neg.f64 a) (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal -1 binary64) b)) c)","(/ (+ (* -1/2 b) (* 1/2 (/ (* a c) b))) c)","(/.f64 (fma.f64 (*.f64 a (/.f64 c b)) #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) b)) c)","(/ (+ (* -1/2 b) (* c (- (* -1 (* c (+ (* -1 (/ (pow a 2) (pow b 3))) (* 1/2 (/ (pow a 2) (pow b 3)))))) (* -1/2 (/ a b))))) c)","(/.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 a a)) (pow.f64 b #s(literal 3 binary64))) c (*.f64 (/.f64 a b) #s(literal 1/2 binary64))) c (*.f64 #s(literal -1/2 binary64) b)) c)","(/ (+ (* -1/2 b) (* c (- (* c (- (* -1 (* c (+ (* -1 (/ (* a (+ (* -1 (/ (pow a 2) (pow b 3))) (* 1/2 (/ (pow a 2) (pow b 3))))) (pow b 2))) (+ (* -1/8 (/ (* b (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) a)) (/ (pow a 3) (pow b 5)))))) (+ (* -1 (/ (pow a 2) (pow b 3))) (* 1/2 (/ (pow a 2) (pow b 3)))))) (* -1/2 (/ a b))))) c)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 20 binary64)) b) a) #s(literal -1/8 binary64) (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64)))) (*.f64 (/.f64 (*.f64 (/.f64 (*.f64 a a) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64)) b) (/.f64 a b))) (neg.f64 c) (/.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 a a)) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal 1/2 binary64))) c (*.f64 #s(literal -1/2 binary64) b)) c)","(* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))","(*.f64 (*.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 a b))) c)","(* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (/.f64 c (pow.f64 b #s(literal 5 binary64)))) #s(literal -4 binary64) (/.f64 (*.f64 #s(literal -2 binary64) (*.f64 a a)) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c)","(* c (+ (* -2 (/ a b)) (* c (+ (* -2 (/ (pow a 2) (pow b 3))) (* c (+ (* -4 (/ (pow a 3) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 20 binary64)) c) b) #s(literal -1/2 binary64) (/.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 b #s(literal 5 binary64)))) c (/.f64 (*.f64 #s(literal -2 binary64) (*.f64 a a)) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c)","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(fma.f64 (*.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 a b))) c b)","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (/.f64 c (pow.f64 b #s(literal 5 binary64)))) #s(literal -4 binary64) (/.f64 (*.f64 #s(literal -2 binary64) (*.f64 a a)) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c b)","(* -1 c)","(neg.f64 c)","(+ (* c (+ (* -1/2 (* b (* c (+ (* -16 (/ (pow a 2) (pow b 6))) (* 4 (/ (pow a 2) (pow b 6))))))) (* 2 (/ a (pow b 3))))) (/ 1 b))","(fma.f64 (fma.f64 (*.f64 (*.f64 b c) (*.f64 (/.f64 (*.f64 a a) (pow.f64 b #s(literal 6 binary64))) #s(literal -12 binary64))) #s(literal -1/2 binary64) (*.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64))) c (/.f64 #s(literal 1 binary64) b))","(+ (* c (+ (* 2 (/ a (pow b 3))) (* c (+ (* -1/2 (* b (* c (+ (* -64 (/ (pow a 3) (pow b 8))) (* -2 (/ (* a (+ (* -16 (/ (pow a 2) (pow b 6))) (* 4 (/ (pow a 2) (pow b 6))))) (pow b 2))))))) (* -1/2 (* b (+ (* -16 (/ (pow a 2) (pow b 6))) (* 4 (/ (pow a 2) (pow b 6)))))))))) (/ 1 b))","(fma.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) b) (fma.f64 (fma.f64 (/.f64 #s(literal -2 binary64) b) (/.f64 (*.f64 (*.f64 (/.f64 (*.f64 a a) (pow.f64 b #s(literal 6 binary64))) #s(literal -12 binary64)) a) b) (/.f64 (*.f64 #s(literal -64 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 b #s(literal 8 binary64)))) c (*.f64 (/.f64 (*.f64 a a) (pow.f64 b #s(literal 6 binary64))) #s(literal -12 binary64)))) c (*.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64))) c (/.f64 #s(literal 1 binary64) b))","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64) (*.f64 (/.f64 (/.f64 b a) c) #s(literal -1/2 binary64))) c)","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/4 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64) (*.f64 (/.f64 (/.f64 b a) c) #s(literal -1/2 binary64)))) c)","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) #s(literal -1/16 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/4 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64) (*.f64 (/.f64 (/.f64 b a) c) #s(literal -1/2 binary64))))) c)","(/ (+ (* (sqrt (* a c)) (/ 1 (sqrt -4))) (/ b (pow (sqrt -4) 2))) c)","(/.f64 (-.f64 (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))) (/.f64 b #s(literal 4 binary64))) c)","(/ (- (+ (* -1 (/ (+ (* -1 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3))))) (pow c 2))) (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (* -1 (/ b (pow (sqrt -4) 2)))) c)","(/.f64 (-.f64 (-.f64 (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))) (*.f64 (/.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) a)) (sqrt.f64 #s(literal -4 binary64))) (/.f64 (*.f64 b b) #s(literal -4 binary64))) c) (/.f64 #s(literal -1/2 binary64) c))) (/.f64 b #s(literal 4 binary64))) c)","(/ (- (+ (* -1 (/ (+ (* 1/2 (/ (* (pow b 3) (pow c 2)) (* a (pow (sqrt -4) 4)))) (* (sqrt (/ c a)) (/ (* b (+ (* -1 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ (pow c 3) a)) (/ (pow b 2) (pow (sqrt -4) 3)))))) (sqrt -4)))) (pow c 3))) (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (+ (* -1 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (pow (sqrt -4) 3)))) (+ (* -1 (/ b (pow (sqrt -4) 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (pow (sqrt -4) 3))))))) c)","(/.f64 (-.f64 (-.f64 (/.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -4 binary64))) (/.f64 (fma.f64 (*.f64 b (/.f64 (*.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) a)) (sqrt.f64 #s(literal -4 binary64))) (/.f64 (*.f64 b b) #s(literal -4 binary64))) #s(literal -1/2 binary64)) (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 c a)) (*.f64 (/.f64 (*.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 c c)) (*.f64 (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 4 binary64)) a)) #s(literal 1/2 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (neg.f64 (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64))))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (/.f64 b #s(literal 4 binary64))))) c)","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b (neg.f64 c))) c)","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b (neg.f64 c)))) c)","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))) (/ b c)))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 b (neg.f64 c))))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) #s(literal 1/16 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) #s(literal -1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))))) c)","(* c (+ (* -4 a) (/ (pow b 2) c)))","(*.f64 (fma.f64 #s(literal -4 binary64) a (/.f64 (*.f64 b b) c)) c)","(+ (* -1/2 (* (sqrt (/ a (pow c 7))) (/ (+ (* 1/1024 (/ (* (pow b 4) c) (* (pow a 3) (pow (sqrt -1/4) 2)))) (* 1/256 (/ (pow b 6) (pow a 4)))) (sqrt -1/4)))) (+ (* -1/32 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -1/4)))) (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (sqrt -1/4)))) (* (sqrt (/ 1 (* a c))) (sqrt -1/4)))))","(fma.f64 (*.f64 #s(literal -1/2 binary64) (sqrt.f64 (/.f64 a (pow.f64 c #s(literal 7 binary64))))) (/.f64 (fma.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (/.f64 c (pow.f64 a #s(literal 3 binary64)))) #s(literal -1/256 binary64) (/.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 b #s(literal 6 binary64))) (pow.f64 a #s(literal 4 binary64)))) (sqrt.f64 #s(literal -1/4 binary64))) (fma.f64 (*.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (sqrt.f64 #s(literal -1/4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64))))) #s(literal -1/128 binary64) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -1/4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/32 binary64) (*.f64 (sqrt.f64 #s(literal -1/4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))))))","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (/.f64 (/.f64 b a) c) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (/.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (/.f64 (fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (/.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64))))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (*.f64 #s(literal -1/128 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))))) (neg.f64 c))) (neg.f64 c))) (neg.f64 c))","(* -1 (/ (+ (* 1/4 b) (* 1/2 (* (sqrt (* a c)) (sqrt -1)))) c))","(/.f64 (fma.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a))) #s(literal 1/2 binary64) (*.f64 #s(literal 1/4 binary64) b)) (neg.f64 c))","(* -1 (/ (+ (* -1 (/ (- (+ (* -1/8 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) (* 1/4 (* b c))) c)) (* 1/2 (* (sqrt (* a c)) (sqrt -1)))) c))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (*.f64 b b)) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/16 binary64) (*.f64 (*.f64 b c) #s(literal -1/4 binary64))) (neg.f64 c))) (neg.f64 c))","(* -1 (/ (+ (* -1 (/ (- (* -1 (/ (- (+ (* 1/32 (/ (* (pow b 3) c) a)) (* 1/2 (* (sqrt (/ 1 (* a c))) (* b (* (sqrt -1) (+ (* -1/8 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))))))))) (+ (* -1/8 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))) (* 1/16 (* (sqrt (/ (pow c 3) a)) (* (pow b 2) (sqrt -1)))))) c)) (* 1/4 (* b c))) c)) (* 1/2 (* (sqrt (* a c)) (sqrt -1)))) c))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 (*.f64 b (sqrt.f64 #s(literal -1 binary64))) (*.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) a)) (*.f64 b b)) (sqrt.f64 #s(literal -1 binary64))) #s(literal -1/16 binary64))) (fma.f64 (/.f64 (*.f64 (pow.f64 b #s(literal 3 binary64)) c) a) #s(literal 1/32 binary64) (*.f64 (*.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b))))) c) #s(literal -1 binary64) (*.f64 (*.f64 b c) #s(literal -1/4 binary64))) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 a c))) #s(literal 2 binary64) (/.f64 b c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (neg.f64 b)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 (/.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 c a))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (*.f64 #s(literal -1/64 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))))) (neg.f64 c)) b) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 a c))) #s(literal 2 binary64))) (neg.f64 c))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) #s(literal -1/64 binary64) (fma.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 a c))) #s(literal 2 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) #s(literal 1/512 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) #s(literal -1/64 binary64) (fma.f64 (*.f64 #s(literal 1/4 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 a c))) #s(literal 2 binary64))))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (pow b 2) c)) (* 4 a))))","(*.f64 (fma.f64 #s(literal 4 binary64) a (/.f64 (*.f64 b b) (neg.f64 c))) (neg.f64 c))","(+ (* -1 (/ (+ (* 1/64 (* (sqrt (/ c (pow a 5))) (* (pow b 4) (sqrt -1)))) (* (sqrt (/ a c)) (* (sqrt -1) (+ (* -1/256 (/ (* (pow b 4) c) (pow a 3))) (* 1/256 (/ (pow b 6) (pow a 4))))))) (pow c 3))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(-.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a)))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (*.f64 b b)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/16 binary64))) (/.f64 (fma.f64 (*.f64 #s(literal 1/64 binary64) (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 5 binary64))))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (/.f64 c (pow.f64 a #s(literal 3 binary64)))) #s(literal -1/256 binary64) (/.f64 (*.f64 #s(literal 1/256 binary64) (pow.f64 b #s(literal 6 binary64))) (pow.f64 a #s(literal 4 binary64)))) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)))) (pow.f64 c #s(literal 3 binary64))))"]],"stop":[["iter limit",1],["node limit",1]],"time":277.165771484375,"type":"simplify"},{"count":[[20,839]],"egraph":[[0,9796,233,0.083130484],[2,2224,233,0.037516171],[1,310,237,0.007381438],[0,80,241,0.002867973],[0,52,275,0.000514214]],"inputs":[["(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)","(sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 (neg.f64 c) b))","(/.f64 (neg.f64 c) b)","(neg.f64 c)","(/.f64 #s(literal 0 binary64) (fma.f64 b b #s(literal 0 binary64)))","(-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 b b #s(literal 0 binary64))) (neg.f64 b))","(fma.f64 b b #s(literal 0 binary64))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 b b #s(literal 0 binary64))) (neg.f64 b)) a))","(/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b) (*.f64 #s(literal 2 binary64) a))","(-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b)","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))","#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))","(/.f64 (+.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))))) (*.f64 #s(literal 2 binary64) a))","(+.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))))))","(neg.f64 b)","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))))","(sqrt.f64 (/.f64 #s(literal 1 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))))"]],"memory":[[7275488,62210432]],"outputs":[["(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b))) #s(literal -1 binary64)) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal -1 binary64)) (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b b (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) (neg.f64 a)) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (/.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal 1/2 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))","(*.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a) #s(literal 1/2 binary64))","(*.f64 #s(literal -1/2 binary64) (pow.f64 (/.f64 a (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a))","(pow.f64 (/.f64 a (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal 1/2 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 2 binary64)) a) (*.f64 a (/.f64 b #s(literal 2 binary64)))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 2 binary64)) #s(literal 2 binary64)) (*.f64 a (/.f64 b a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 2 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) a)) (*.f64 a b)) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 a b)) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) a) a) (*.f64 #s(literal 2 binary64) (/.f64 b #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) a) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 b a))) #s(literal 4 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) a) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) a) (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal 2 binary64) b)) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) a) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal 2 binary64) b)) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 b #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 b a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (/.f64 b #s(literal 2 binary64)))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) a))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (/.f64 b a))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) b)) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) b)) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 b #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 b a))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 2 binary64)) a (*.f64 a (/.f64 b #s(literal 2 binary64)))) (*.f64 a a))","(/.f64 (fma.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 2 binary64)) #s(literal 2 binary64) (*.f64 a (/.f64 b a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 2 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) b) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (fma.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) a) (*.f64 a b)) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) a) (*.f64 a b)) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) a) a (*.f64 #s(literal 2 binary64) (/.f64 b #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) a) #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) (/.f64 b a))) #s(literal 4 binary64))","(/.f64 (fma.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) a) (/.f64 (*.f64 #s(literal 2 binary64) a) b) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (fma.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) a) (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) b)) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) a) (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 2 binary64) b)) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) a (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 b #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal 2 binary64) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 b a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (/.f64 (*.f64 #s(literal 2 binary64) a) b) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) a (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (/.f64 b #s(literal 2 binary64)))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) a))","(/.f64 (+.f64 #s(literal 2 binary64) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (/.f64 b a))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal 2 binary64)))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) b) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) b)) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) b)) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) a (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 b #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 2 binary64) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 b a))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 (*.f64 #s(literal 2 binary64) a) b) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (*.f64 #s(literal -2 binary64) a) (*.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (*.f64 #s(literal 2 binary64) a) (*.f64 (*.f64 #s(literal 2 binary64) a) b)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) b) (*.f64 #s(literal -2 binary64) a))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)) a)","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))","(/.f64 (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b b (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b))) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 b (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 b b (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 2 binary64))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","(/.f64 (-.f64 (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)) (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (/.f64 b (*.f64 #s(literal -2 binary64) a))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal 1/2 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) (neg.f64 (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b))) (*.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 a (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 a (fma.f64 b (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 a (fma.f64 b b (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))))","(/.f64 (*.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) #s(literal 1 binary64)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 1 binary64)) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b b (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) b)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal 1/2 binary64)) a)","(/.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","(/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64)))","(/.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a) #s(literal 2 binary64))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))))","(/.f64 #s(literal -1/2 binary64) (/.f64 a (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))))","(/.f64 #s(literal 1 binary64) (/.f64 a (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","(neg.f64 (/.f64 #s(literal -1/2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(neg.f64 (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a)))","(neg.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) b))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) b (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(fma.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a))))","(fma.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(fma.f64 b (/.f64 #s(literal 1/2 binary64) a) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))","(-.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(exp.f64 (*.f64 (log.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) b) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(+.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) b))","(+.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (neg.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a))))","(+.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(+.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)))","(*.f64 (pow.f64 (pow.f64 (neg.f64 a) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (/.f64 a (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b))) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))","(*.f64 (/.f64 a (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(*.f64 (/.f64 a (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 b (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","(*.f64 (/.f64 a (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 b b (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(*.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64)) (pow.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64)) a)","(*.f64 (neg.f64 a) (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","(*.f64 a (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a) #s(literal -1 binary64))","(pow.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)) #s(literal 1 binary64))","(/.f64 (*.f64 a #s(literal 1 binary64)) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))","(/.f64 (neg.f64 (neg.f64 a)) (neg.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 (neg.f64 a) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a))","(/.f64 a (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))","(neg.f64 (/.f64 a (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(exp.f64 (*.f64 (log.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) a)) #s(literal -1 binary64)))","(*.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (pow.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (fma.f64 b (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (fma.f64 b b (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b b (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (*.f64 b b))) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)))","(/.f64 (-.f64 (*.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 (fma.f64 b (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (fma.f64 b (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (fma.f64 b (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)))) (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 b b)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)))) (/.f64 b (*.f64 b b))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 b (*.f64 b b))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)))) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)))) b) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 b b))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) b))","(/.f64 (-.f64 (*.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (*.f64 b b)))","(/.f64 (-.f64 (*.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (/.f64 b (*.f64 b b))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 b (*.f64 b b))))","(/.f64 (-.f64 (*.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 (-.f64 (*.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) b) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (*.f64 b b))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 #s(literal 4 binary64) c) a) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 #s(literal 4 binary64) c) a) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 b b)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (/.f64 b (*.f64 b b))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 #s(literal 4 binary64) c) a) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 #s(literal 4 binary64) c) a) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (/.f64 b (*.f64 b b))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 #s(literal 4 binary64) c) a) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 #s(literal 4 binary64) c) a) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) b) (*.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 #s(literal 4 binary64) c) a) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 b b))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 #s(literal 4 binary64) c) a) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) b))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b)))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b)))) (*.f64 b b)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (/.f64 b (*.f64 b b))) (*.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b)))) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b)))) (/.f64 b (*.f64 b b))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b)))) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b)))) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) b) (*.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b)))) (*.f64 b b))) (*.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b)))) b))","(/.f64 (fma.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)))) (*.f64 b b) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 b b)))","(/.f64 (fma.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)))) (/.f64 b (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 b (*.f64 b b))))","(/.f64 (fma.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)))) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 (fma.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)))) b (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 b b))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) b))","(/.f64 (fma.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (*.f64 b b)))","(/.f64 (fma.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (/.f64 b (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 b (*.f64 b b))))","(/.f64 (fma.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 (fma.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) b (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (*.f64 b b))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (*.f64 b b) (*.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 #s(literal 4 binary64) c) a) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 #s(literal 4 binary64) c) a) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 b b)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (/.f64 b (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 #s(literal 4 binary64) c) a) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 #s(literal 4 binary64) c) a) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (/.f64 b (*.f64 b b))))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 #s(literal 4 binary64) c) a) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 #s(literal 4 binary64) c) a) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) b (*.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 #s(literal 4 binary64) c) a) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 b b))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 (*.f64 #s(literal 4 binary64) c) a) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) b))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (*.f64 b b) (*.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b)))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b)))) (*.f64 b b)))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (/.f64 b (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b)))) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b)))) (/.f64 b (*.f64 b b))))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64))) (*.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b)))) #s(literal 1 binary64))) (*.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b)))) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 (fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) b (*.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b)))) (*.f64 b b))) (*.f64 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b)))) b))","(/.f64 (fma.f64 (pow.f64 b #s(literal 3 binary64)) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (*.f64 b b) (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)))))) (*.f64 (*.f64 b b) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (fma.f64 (pow.f64 b #s(literal 3 binary64)) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (*.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b))) (*.f64 (*.f64 b b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 (fma.f64 (pow.f64 b #s(literal 3 binary64)) (sqrt.f64 (fma.f64 (*.f64 (*.f64 #s(literal 4 binary64) c) a) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (*.f64 b b) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 (*.f64 b b) (sqrt.f64 (fma.f64 (*.f64 (*.f64 #s(literal 4 binary64) c) a) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (fma.f64 (pow.f64 b #s(literal 3 binary64)) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b)))) (*.f64 (*.f64 b b) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 (*.f64 b b) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (/.f64 b (*.f64 b b)) (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)))))) (*.f64 (/.f64 b (*.f64 b b)) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (*.f64 (/.f64 b (*.f64 b b)) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 (/.f64 b (*.f64 b b)) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 (*.f64 #s(literal 4 binary64) c) a) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (/.f64 b (*.f64 b b)) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 (/.f64 b (*.f64 b b)) (sqrt.f64 (fma.f64 (*.f64 (*.f64 #s(literal 4 binary64) c) a) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b)))) (*.f64 (/.f64 b (*.f64 b b)) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 (/.f64 b (*.f64 b b)) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64))) (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)))))) (*.f64 (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64))) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (*.f64 (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64))) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64))) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (*.f64 (*.f64 #s(literal 4 binary64) c) a) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64))) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64))) (sqrt.f64 (fma.f64 (*.f64 (*.f64 #s(literal 4 binary64) c) a) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b)))) (*.f64 (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64))) (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64))) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b))))))","(/.f64 (fma.f64 (*.f64 b b) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 b (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)))))) (*.f64 b (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (fma.f64 (*.f64 b b) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (*.f64 b (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))","(/.f64 (fma.f64 (*.f64 b b) (sqrt.f64 (fma.f64 (*.f64 (*.f64 #s(literal 4 binary64) c) a) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))) (*.f64 b (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 b (sqrt.f64 (fma.f64 (*.f64 (*.f64 #s(literal 4 binary64) c) a) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (fma.f64 (*.f64 b b) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b)))) (*.f64 b (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))))) (*.f64 b (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b))))))","(/.f64 (neg.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b))) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (neg.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (fma.f64 b (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (fma.f64 b b (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))))","(/.f64 (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))","(/.f64 (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (+.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (-.f64 (*.f64 b b) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (fma.f64 b (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (fma.f64 b b (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 b b))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (-.f64 (*.f64 b b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b b (-.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b))) (-.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(fma.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) b)","(fma.f64 (pow.f64 (pow.f64 b #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 b #s(literal -2 binary64)) #s(literal 1 binary64)) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","(fma.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 1/4 binary64)) b)","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))) b)","(fma.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) b)","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 #s(literal 4 binary64) c) a) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))) b)","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b))) #s(literal -1 binary64))) b)","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 #s(literal 4 binary64) c) a) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) b)","(fma.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b))) #s(literal -1 binary64)) #s(literal 1/2 binary64)) b)","(fma.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 b #s(literal -2 binary64)) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","(fma.f64 #s(literal -1 binary64) b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","(fma.f64 #s(literal 1 binary64) b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","(fma.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal -1 binary64))) b)","(fma.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (pow.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)) b)","(fma.f64 (*.f64 b b) (pow.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal 1 binary64)) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","(fma.f64 (*.f64 b b) (pow.f64 b #s(literal -1 binary64)) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","(fma.f64 b #s(literal -1 binary64) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","(-.f64 (+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 0 binary64)) b)","(-.f64 (/.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)) (/.f64 (*.f64 b b) (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)))","(-.f64 (/.f64 (*.f64 b b) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))) (/.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 3/2 binary64)) (fma.f64 b (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b) (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(-.f64 #s(literal 0 binary64) (-.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(-.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)","(+.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) b)","(+.f64 b (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","(*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(*.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 1/4 binary64)))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 #s(literal 4 binary64) c) a) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b))) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 #s(literal 4 binary64) c) a) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (pow.f64 (pow.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (sqrt.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal -1 binary64))))","(*.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (pow.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(pow.f64 (pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (pow.f64 b #s(literal 4 binary64))) #s(literal 1/4 binary64))","(pow.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) #s(literal 1/2 binary64))","(pow.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))) #s(literal 1 binary64))","(/.f64 (sqrt.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)))))","(/.f64 (sqrt.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (pow.f64 b #s(literal 4 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","(/.f64 (sqrt.f64 (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal 4 binary64) c) a) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (sqrt.f64 (neg.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (sqrt.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b))))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (+.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b)))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)))) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(/.f64 (sqrt.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)))) (sqrt.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (+.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b)))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (fma.f64 (*.f64 (*.f64 #s(literal 4 binary64) c) a) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (sqrt.f64 (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b)))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 4 binary64) c) a) (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) #s(literal 16 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 c a) #s(literal -4 binary64)) b) b))) (fma.f64 #s(literal -64 binary64) (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))))","(/.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)) (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","(sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))","(fabs.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b))))","(exp.f64 (log.f64 (sqrt.f64 (fma.f64 (*.f64 c #s(literal -4 binary64)) a (*.f64 b b)))))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 c b))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (pow.f64 (pow.f64 (neg.f64 c) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (neg.f64 c))","(*.f64 #s(literal -1 binary64) (/.f64 c b))","(*.f64 #s(literal 1 binary64) (/.f64 c b))","(*.f64 (neg.f64 c) (pow.f64 b #s(literal -1 binary64)))","(*.f64 c (pow.f64 b #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 b c) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 b c) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (/.f64 b c)) (*.f64 b #s(literal 1 binary64))) (*.f64 b (/.f64 b c)))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 b (neg.f64 c))) (*.f64 b b))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 b c)) (*.f64 b b))","(/.f64 (/.f64 c #s(literal -1 binary64)) b)","(/.f64 (*.f64 (neg.f64 c) #s(literal 1 binary64)) b)","(/.f64 #s(literal -1 binary64) (/.f64 b c))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b c) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 b c))","(/.f64 (neg.f64 c) b)","(/.f64 c b)","(neg.f64 (/.f64 c b))","(-.f64 (/.f64 #s(literal 0 binary64) b) (/.f64 c b))","(-.f64 #s(literal 0 binary64) (/.f64 c b))","(exp.f64 (*.f64 (log.f64 (/.f64 b c)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) c)","(*.f64 c #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 c c)) (+.f64 #s(literal 0 binary64) c))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 c #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 c c (*.f64 #s(literal 0 binary64) c))))","(neg.f64 c)","(-.f64 #s(literal 0 binary64) c)","(+.f64 #s(literal 0 binary64) (neg.f64 c))","#s(literal 0 binary64)","(*.f64 (pow.f64 (pow.f64 b #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 b #s(literal -2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 b #s(literal -2 binary64)))","(*.f64 #s(literal -1 binary64) b)","(*.f64 #s(literal 1 binary64) b)","(*.f64 (*.f64 b b) (pow.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 b b) (pow.f64 b #s(literal -1 binary64)))","(*.f64 b #s(literal -1 binary64))","(pow.f64 (/.f64 b (*.f64 b b)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64))","(pow.f64 b #s(literal 1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 4 binary64))) (pow.f64 b #s(literal 3 binary64)))","(/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 b b))","(/.f64 #s(literal 1 binary64) (/.f64 b (*.f64 b b)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64))))","(/.f64 (*.f64 b b) b)","(neg.f64 b)","(fma.f64 (pow.f64 (pow.f64 b #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 b #s(literal -2 binary64)) #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 b #s(literal -2 binary64)) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) b #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) b #s(literal 0 binary64))","(fma.f64 (*.f64 b b) (pow.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 b b) (pow.f64 b #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 b #s(literal -1 binary64) #s(literal 0 binary64))","(-.f64 (/.f64 #s(literal 0 binary64) b) b)","(-.f64 #s(literal 0 binary64) b)","(exp.f64 (-.f64 (*.f64 (log.f64 b) #s(literal 3 binary64)) (*.f64 (log.f64 b) #s(literal 2 binary64))))","(exp.f64 (*.f64 (log.f64 b) #s(literal 1 binary64)))","(+.f64 #s(literal 0 binary64) b)","(+.f64 b #s(literal 0 binary64))","b","(*.f64 (exp.f64 (log.f64 b)) (exp.f64 (log.f64 b)))","(*.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 b #s(literal -2 binary64)))","(*.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (pow.f64 b #s(literal -2 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 b #s(literal -4 binary64)))","(*.f64 #s(literal -1 binary64) (*.f64 b b))","(*.f64 #s(literal 1 binary64) (*.f64 b b))","(*.f64 (*.f64 b b) #s(literal 1 binary64))","(*.f64 b b)","(pow.f64 (exp.f64 (log.f64 b)) #s(literal 2 binary64))","(pow.f64 (pow.f64 b #s(literal -2 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 b b) #s(literal 1 binary64))","(pow.f64 b #s(literal 2 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 4 binary64))) (*.f64 b b))","(/.f64 (neg.f64 (pow.f64 b #s(literal 4 binary64))) (*.f64 b b))","(/.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) #s(literal 0 binary64)) (pow.f64 b #s(literal 4 binary64)))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 6 binary64))) (pow.f64 b #s(literal 4 binary64)))","(/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 b b))","(/.f64 (pow.f64 b #s(literal 6 binary64)) (neg.f64 (pow.f64 b #s(literal 4 binary64))))","(/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 b #s(literal 4 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 b #s(literal -2 binary64)))","(neg.f64 (*.f64 b b))","(fma.f64 (exp.f64 (log.f64 b)) (exp.f64 (log.f64 b)) #s(literal 0 binary64))","(fma.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal 2 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 b #s(literal -2 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (pow.f64 b #s(literal -2 binary64)) #s(literal 2 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 b #s(literal -4 binary64)) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) (*.f64 b b) #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 b b) #s(literal 0 binary64))","(fma.f64 (*.f64 b b) #s(literal 1 binary64) #s(literal 0 binary64))","(fma.f64 b b #s(literal 0 binary64))","(-.f64 #s(literal 0 binary64) (*.f64 b b))","(-.f64 (*.f64 b b) #s(literal 0 binary64))","(exp.f64 (*.f64 (log.f64 b) #s(literal 2 binary64)))","(+.f64 #s(literal 0 binary64) (*.f64 b b))","(+.f64 (*.f64 b b) #s(literal 0 binary64))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 b a))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -1 binary64)) (pow.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b))) #s(literal -1 binary64)) (pow.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(literal 1/2 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (pow.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)))","(*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 #s(literal 1/2 binary64) (pow.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) #s(literal -1 binary64)))","(pow.f64 (/.f64 a (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(literal 1/2 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) a) (*.f64 #s(literal 2 binary64) (/.f64 b #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 b a))) #s(literal 4 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal 2 binary64) b)) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal 2 binary64) b)) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 2 binary64)) a) (*.f64 a (/.f64 b #s(literal 2 binary64)))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 2 binary64)) #s(literal 2 binary64)) (*.f64 a (/.f64 b a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 2 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) a)) (*.f64 a b)) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 a b)) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 b #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 b a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (/.f64 b #s(literal 2 binary64)))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) a))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (/.f64 b a))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b)) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b)) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 b #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 b a))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) (/.f64 b a)) #s(literal 2 binary64))","(/.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b) (*.f64 #s(literal -2 binary64) a))","(/.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) a) #s(literal 2 binary64))","(/.f64 (*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)))","(/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 2 binary64))) (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal 1/2 binary64) a) (/.f64 b (*.f64 #s(literal -2 binary64) a))))","(/.f64 (-.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)) (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal 1/2 binary64) a)) (/.f64 b (*.f64 #s(literal -2 binary64) a))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(literal 1/2 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (neg.f64 (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) #s(literal 1 binary64)) (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 1 binary64)) (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) b)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(literal 1/2 binary64)) a)","(/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)))","(/.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))))","(/.f64 #s(literal 1 binary64) (/.f64 a (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) (*.f64 #s(literal 2 binary64) a))","(neg.f64 (/.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 #s(literal 2 binary64) a)))","(neg.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) (*.f64 #s(literal -2 binary64) a)))","(fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a))))","(-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal 1/2 binary64) a)) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))) #s(literal -1 binary64)))","(+.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal 1/2 binary64) a)) (neg.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a))))","(*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) (pow.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (-.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (fma.f64 b (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 b b) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 b b)))","(/.f64 (-.f64 b (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 b b))) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b))","(/.f64 (-.f64 (*.f64 (*.f64 b b) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 (-.f64 (*.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) (*.f64 b b))) (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (fma.f64 b (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 (fma.f64 b (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (fma.f64 b (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (fma.f64 b (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 b (*.f64 b b))) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (/.f64 b (*.f64 b b))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 (-.f64 (*.f64 b b) (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (*.f64 b b)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 b (*.f64 b b))) (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) #s(literal 1 binary64))) (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (/.f64 b (*.f64 b b))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) #s(literal 1 binary64))) (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 (-.f64 b (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (*.f64 b b))) (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) b))","(/.f64 (-.f64 (*.f64 b b) (*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) (*.f64 b b)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 b (*.f64 b b))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64))) (*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) (/.f64 b (*.f64 b b))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64))) (*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 (-.f64 b (*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) (*.f64 b b))) (*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) b))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 b (*.f64 b b)) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (/.f64 b (*.f64 b b))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 (fma.f64 b b (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (*.f64 b b)))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 b (*.f64 b b)) (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) #s(literal 1 binary64))) (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (/.f64 b (*.f64 b b))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64))) (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) #s(literal 1 binary64))) (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 (+.f64 b (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (*.f64 b b))) (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) b))","(/.f64 (fma.f64 b b (*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) (*.f64 b b)))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 b (*.f64 b b)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64))) (*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) (/.f64 b (*.f64 b b))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64))) (*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 (+.f64 b (*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) (*.f64 b b))) (*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) b))","(/.f64 (fma.f64 (pow.f64 b #s(literal 3 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 (*.f64 b b) #s(literal -1 binary64))) (*.f64 (*.f64 b b) (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 (fma.f64 (pow.f64 b #s(literal 3 binary64)) (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (*.f64 b b)) (*.f64 (*.f64 b b) (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))))","(/.f64 (fma.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) (*.f64 b b)) (*.f64 (*.f64 b b) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 (/.f64 b (*.f64 b b)) #s(literal -1 binary64))) (*.f64 (/.f64 b (*.f64 b b)) (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (*.f64 (/.f64 b (*.f64 b b)) #s(literal 1 binary64))) (*.f64 (/.f64 b (*.f64 b b)) (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))))","(/.f64 (+.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) (*.f64 (/.f64 b (*.f64 b b)) #s(literal 1 binary64))) (*.f64 (/.f64 b (*.f64 b b)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (*.f64 (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64))) (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))))","(/.f64 (+.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) (*.f64 (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (*.f64 b b) (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b) (*.f64 b (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 (fma.f64 b b (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 b b)))","(/.f64 (+.f64 b (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 b b))) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b))","(/.f64 (fma.f64 (*.f64 b b) (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (*.f64 b #s(literal 1 binary64))) (*.f64 b (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))))","(/.f64 (fma.f64 (*.f64 b b) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) (*.f64 b #s(literal 1 binary64))) (*.f64 b (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (neg.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b))) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (-.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (fma.f64 b (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))","(/.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (+.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (-.f64 (*.f64 b b) (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))))","(/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (fma.f64 b (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (-.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(fma.f64 (sqrt.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (sqrt.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b)","(fma.f64 (pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/4 binary64)) #s(literal -1 binary64)) b)","(fma.f64 (pow.f64 #s(literal -1 binary64) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (neg.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) b)","(fma.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)","(fma.f64 (pow.f64 (pow.f64 b #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 b #s(literal -2 binary64)) #s(literal 1 binary64)) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(fma.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 1/4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 1/4 binary64)) b)","(fma.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 b #s(literal -2 binary64)) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -1 binary64)) b)","(fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(fma.f64 #s(literal 1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)","(fma.f64 #s(literal 1 binary64) b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) b)","(fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 1 binary64) b)","(fma.f64 (*.f64 b b) (pow.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal 1 binary64)) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(fma.f64 (*.f64 b b) (pow.f64 b #s(literal -1 binary64)) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(fma.f64 b #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(-.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 0 binary64)) b)","(-.f64 (/.f64 (*.f64 b b) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (/.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(-.f64 (/.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) (/.f64 (*.f64 b b) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)))","(-.f64 (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (fma.f64 b (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)","(-.f64 #s(literal 0 binary64) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)","(+.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(*.f64 (sqrt.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (sqrt.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(*.f64 (pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/4 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 #s(literal -1 binary64) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (neg.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 1/4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 1/4 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 1 binary64))","(pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) #s(literal -1 binary64))","(pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64))","(pow.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 1 binary64))","(pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 1/2 binary64))","(/.f64 (sqrt.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 (sqrt.f64 (*.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (sqrt.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 (sqrt.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (sqrt.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64))))","(/.f64 (sqrt.f64 (neg.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (sqrt.f64 #s(literal -1 binary64)))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 #s(literal 1 binary64) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)))","(/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 1 binary64))","(neg.f64 (/.f64 #s(literal -1 binary64) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64))))","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))","(fabs.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(exp.f64 (*.f64 (neg.f64 (log.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -1/2 binary64)))","(exp.f64 (log.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(*.f64 (pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/4 binary64)) #s(literal -2 binary64)) (pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/4 binary64)) #s(literal -2 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64))) (/.f64 #s(literal -1 binary64) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64))))","(*.f64 #s(literal -1 binary64) (pow.f64 (pow.f64 (neg.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 #s(literal 1 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))","(*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(*.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 1 binary64))","(pow.f64 (*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1 binary64))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) #s(literal -2 binary64))","(pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 2 binary64))","(pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 1 binary64))","#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))","(/.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 (*.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 (neg.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64))))","(/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 #s(literal 1 binary64) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1 binary64)))","(/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)))","(/.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 1 binary64))","(sqrt.f64 (/.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1 binary64))))","(sqrt.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)))","(fabs.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))","(exp.f64 (*.f64 (log.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (log.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -2 binary64)))","(exp.f64 (*.f64 (neg.f64 (log.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 1 binary64)))","(exp.f64 (log.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -1 binary64)) (pow.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b))) #s(literal -1 binary64)) (pow.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (pow.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(literal 1/2 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (pow.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)))","(*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 #s(literal 1/2 binary64) (pow.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) #s(literal -1 binary64)))","(pow.f64 (/.f64 a (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(literal 1/2 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) a) (*.f64 #s(literal 2 binary64) (/.f64 b #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 b a))) #s(literal 4 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal 2 binary64) b)) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal 2 binary64) b)) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 2 binary64)) a) (*.f64 a (/.f64 b #s(literal 2 binary64)))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 2 binary64)) #s(literal 2 binary64)) (*.f64 a (/.f64 b a))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 2 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) a)) (*.f64 a b)) (*.f64 a (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) a)) (*.f64 a b)) (*.f64 a (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 b #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 b a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (/.f64 b #s(literal 2 binary64)))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) a))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (/.f64 b a))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b)) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b)) (*.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 b #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 b a))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) (/.f64 b a)) #s(literal 2 binary64))","(/.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b) (*.f64 #s(literal -2 binary64) a))","(/.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) a) #s(literal 2 binary64))","(/.f64 (*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)))","(/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 2 binary64))) (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal 1/2 binary64) a) (/.f64 b (*.f64 #s(literal -2 binary64) a))))","(/.f64 (-.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 3 binary64)) (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a)) #s(literal 2 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal 1/2 binary64) a)) (/.f64 b (*.f64 #s(literal -2 binary64) a))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(literal 1/2 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (neg.f64 (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) #s(literal 1 binary64)) (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 1 binary64)) (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) b)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(literal 1/2 binary64)) a)","(/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)))","(/.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))))","(/.f64 #s(literal 1 binary64) (/.f64 a (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) (*.f64 #s(literal 2 binary64) a))","(neg.f64 (/.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 #s(literal 2 binary64) a)))","(neg.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) (*.f64 #s(literal -2 binary64) a)))","(fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a))))","(-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal 1/2 binary64) a)) (/.f64 b (*.f64 #s(literal -2 binary64) a)))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))) #s(literal -1 binary64)))","(+.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal 1/2 binary64) a)) (neg.f64 (/.f64 b (*.f64 #s(literal -2 binary64) a))))","(*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) (pow.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (-.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (fma.f64 b (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 b b) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 b b)))","(/.f64 (-.f64 b (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 b b))) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b))","(/.f64 (-.f64 (*.f64 (*.f64 b b) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 (-.f64 (*.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) (*.f64 b b))) (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (fma.f64 b (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 (fma.f64 b (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (fma.f64 b (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (fma.f64 b (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 b (*.f64 b b))) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (/.f64 b (*.f64 b b))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 (-.f64 (*.f64 b b) (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (*.f64 b b)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 b (*.f64 b b))) (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) #s(literal 1 binary64))) (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (/.f64 b (*.f64 b b))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) #s(literal 1 binary64))) (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 (-.f64 b (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (*.f64 b b))) (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) b))","(/.f64 (-.f64 (*.f64 b b) (*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) (*.f64 b b)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 b (*.f64 b b))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64))) (*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) (/.f64 b (*.f64 b b))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64)))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64))) (*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 (-.f64 b (*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) (*.f64 b b))) (*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) b))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 b (*.f64 b b)) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (/.f64 b (*.f64 b b))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 (fma.f64 b b (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (*.f64 b b)))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 b (*.f64 b b)) (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) #s(literal 1 binary64))) (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (/.f64 b (*.f64 b b))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64))) (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) #s(literal 1 binary64))) (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 (+.f64 b (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (*.f64 b b))) (*.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) b))","(/.f64 (fma.f64 b b (*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) (*.f64 b b)))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 b (*.f64 b b)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64))) (*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) (/.f64 b (*.f64 b b))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64))) (*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 (+.f64 b (*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) (*.f64 b b))) (*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) b))","(/.f64 (fma.f64 (pow.f64 b #s(literal 3 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 (*.f64 b b) #s(literal -1 binary64))) (*.f64 (*.f64 b b) (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 (fma.f64 (pow.f64 b #s(literal 3 binary64)) (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (*.f64 b b)) (*.f64 (*.f64 b b) (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))))","(/.f64 (fma.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) (*.f64 b b)) (*.f64 (*.f64 b b) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 (/.f64 b (*.f64 b b)) #s(literal -1 binary64))) (*.f64 (/.f64 b (*.f64 b b)) (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (*.f64 (/.f64 b (*.f64 b b)) #s(literal 1 binary64))) (*.f64 (/.f64 b (*.f64 b b)) (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))))","(/.f64 (+.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) (*.f64 (/.f64 b (*.f64 b b)) #s(literal 1 binary64))) (*.f64 (/.f64 b (*.f64 b b)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64))) (*.f64 (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (*.f64 (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64))) (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))))","(/.f64 (+.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) (*.f64 (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (*.f64 b b) (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b) (*.f64 b (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 (fma.f64 b b (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 b b)))","(/.f64 (+.f64 b (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (*.f64 b b))) (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b))","(/.f64 (fma.f64 (*.f64 b b) (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (*.f64 b #s(literal 1 binary64))) (*.f64 b (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))))","(/.f64 (fma.f64 (*.f64 b b) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) (*.f64 b #s(literal 1 binary64))) (*.f64 b (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (neg.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b))) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (-.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (fma.f64 b (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b)) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))","(/.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (+.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (-.f64 (*.f64 b b) (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))))","(/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (fma.f64 b (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (-.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (*.f64 b b))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(fma.f64 (sqrt.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (sqrt.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) b)","(fma.f64 (pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/4 binary64)) #s(literal -1 binary64)) b)","(fma.f64 (pow.f64 #s(literal -1 binary64) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (neg.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1 binary64)) #s(literal -1/2 binary64)) b)","(fma.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)","(fma.f64 (pow.f64 (pow.f64 b #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 b #s(literal -2 binary64)) #s(literal 1 binary64)) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(fma.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 1/4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 1/4 binary64)) b)","(fma.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 b #s(literal -2 binary64)) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -1 binary64)) b)","(fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(fma.f64 #s(literal 1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)","(fma.f64 #s(literal 1 binary64) b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) b)","(fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 1 binary64) b)","(fma.f64 (*.f64 b b) (pow.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal 1 binary64)) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(fma.f64 (*.f64 b b) (pow.f64 b #s(literal -1 binary64)) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(fma.f64 b #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(-.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 0 binary64)) b)","(-.f64 (/.f64 (*.f64 b b) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (/.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(-.f64 (/.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)) (/.f64 (*.f64 b b) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)))","(-.f64 (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 3/2 binary64)) (fma.f64 b (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)","(-.f64 #s(literal 0 binary64) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)","(+.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(*.f64 (pow.f64 (pow.f64 b #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 b #s(literal -2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 b #s(literal -2 binary64)))","(*.f64 #s(literal -1 binary64) b)","(*.f64 #s(literal 1 binary64) b)","(*.f64 (*.f64 b b) (pow.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (*.f64 b b) (pow.f64 b #s(literal -1 binary64)))","(*.f64 b #s(literal -1 binary64))","(pow.f64 (/.f64 b (*.f64 b b)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64))","(pow.f64 b #s(literal 1 binary64))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b #s(literal 4 binary64))) (pow.f64 b #s(literal 3 binary64)))","(/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 b b))","(/.f64 #s(literal 1 binary64) (/.f64 b (*.f64 b b)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 b b) (pow.f64 b #s(literal 3 binary64))))","(/.f64 (*.f64 b b) b)","(neg.f64 b)","(fma.f64 (pow.f64 (pow.f64 b #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 b #s(literal -2 binary64)) #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 b #s(literal -2 binary64)) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) b #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) b #s(literal 0 binary64))","(fma.f64 (*.f64 b b) (pow.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 b b) (pow.f64 b #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 b #s(literal -1 binary64) #s(literal 0 binary64))","(-.f64 (/.f64 #s(literal 0 binary64) b) b)","(-.f64 #s(literal 0 binary64) b)","(exp.f64 (-.f64 (*.f64 (log.f64 b) #s(literal 3 binary64)) (*.f64 (log.f64 b) #s(literal 2 binary64))))","(exp.f64 (*.f64 (log.f64 b) #s(literal 1 binary64)))","(+.f64 #s(literal 0 binary64) b)","(+.f64 b #s(literal 0 binary64))","b","(*.f64 (sqrt.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (sqrt.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(*.f64 (pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/4 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 #s(literal -1 binary64) #s(literal -1/2 binary64)) (pow.f64 (pow.f64 (neg.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 1/4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 1/4 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 1 binary64))","(pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) #s(literal -1 binary64))","(pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1 binary64)) #s(literal -1/2 binary64))","(pow.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 1 binary64))","(pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 1/2 binary64))","(/.f64 (sqrt.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 (sqrt.f64 (*.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))) (sqrt.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 (sqrt.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (sqrt.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64))))","(/.f64 (sqrt.f64 (neg.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (sqrt.f64 #s(literal -1 binary64)))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)))))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 #s(literal 1 binary64) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)))","(/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal 1 binary64))","(neg.f64 (/.f64 #s(literal -1 binary64) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64))))","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))","(fabs.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(exp.f64 (*.f64 (neg.f64 (log.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -1/2 binary64)))","(exp.f64 (log.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(*.f64 (sqrt.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64))) (sqrt.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64))))","(*.f64 (pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) #s(literal 1/2 binary64)) (pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) #s(literal 1/2 binary64)))","(*.f64 (pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 1/4 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 1/4 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1/2 binary64)) (pow.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/4 binary64)))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (pow.f64 (neg.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1 binary64))))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 (pow.f64 (neg.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1 binary64)) #s(literal 1/2 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (pow.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) (pow.f64 #s(literal 1 binary64) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)))","(pow.f64 (*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1 binary64))) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal 2 binary64)) #s(literal -1/4 binary64))","(pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) #s(literal 1 binary64))","(pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(pow.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1 binary64))","(pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64))","(/.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (neg.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 (/.f64 #s(literal -1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (sqrt.f64 (neg.f64 (neg.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 #s(literal 1 binary64) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(sqrt.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1 binary64)))","(fabs.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 #s(literal -1/2 binary64) (log.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":354.93408203125,"type":"rewrite"},{"compiler":[[30297,3643]],"memory":[[-3318640,76196224]],"time":184.47998046875,"type":"eval"},{"alts":[["(/.f64 (-.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) (/.f64 b a)) #s(literal 2 binary64))","next",41.2236496126883,"binary64"],["(/.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","fresh",48.3975796686435,"binary64"],["(/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))","done",29.86701901748841,"binary64"],["(/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b) (*.f64 #s(literal 2 binary64) a))","done",41.23424108651143,"binary64"],["(/.f64 (-.f64 #s(approx (sqrt (+ (* -4 (* c a)) (* b b))) (*.f64 (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (/.f64 c b) #s(literal 1 binary64)) b)) b) (*.f64 #s(literal 2 binary64) a))","fresh",56.64784658895906,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))))) (*.f64 #s(literal 2 binary64) a))","done",42.08168866528308,"binary64"],["(/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","next",46.55329151923889,"binary64"],["(/.f64 #s(approx (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (*.f64 (*.f64 a (/.f64 c b)) #s(literal -2 binary64))) (*.f64 #s(literal 2 binary64) a))","fresh",45.14130364848889,"binary64"],["(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","done",46.34233072136904,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","fresh",41.26939733651143,"binary64"],["(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","done",29.938458793665273,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))","next",41.25880588709187,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)))","fresh",46.343457997545904,"binary64"],["(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)))) #s(literal -1 binary64)))","fresh",56.745051618278154,"binary64"],["#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 (-.f64 #s(literal 0 binary64) (*.f64 b (neg.f64 c))) (*.f64 b b)))","next",57.352046665647556,"binary64"],["#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 (neg.f64 c) b))","done",42.03137654896942,"binary64"],["#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 c b))","fresh",57.000844804639414,"binary64"],["#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 b a))","next",62.30653182858571,"binary64"],["#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 #s(literal -1 binary64) (/.f64 b c)))","fresh",42.39334287981316,"binary64"],["#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (*.f64 (pow.f64 b #s(literal -1 binary64)) (pow.f64 (pow.f64 (neg.f64 c) #s(literal -1 binary64)) #s(literal -1 binary64))))","fresh",42.11731404896942,"binary64"],["#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b)))))","fresh",43.51155310928848,"binary64"],["#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (exp.f64 (*.f64 (log.f64 (/.f64 b c)) #s(literal -1 binary64))))","fresh",60.00750419107162,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a)))","fresh",42.927083200500476,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 (*.f64 (neg.f64 b) b) b) a))","fresh",47.91427585793324,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","done",42.84245937978134,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (exp.f64 (-.f64 (*.f64 (log.f64 b) #s(literal 3 binary64)) (*.f64 (log.f64 b) #s(literal 2 binary64)))) a))","fresh",62.71919003593339,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (exp.f64 (*.f64 (log.f64 b) #s(literal 1 binary64))) a))","fresh",62.71919003593339,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 #s(literal -1 binary64) (/.f64 a b)))","fresh",42.90105306209273,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b (/.f64 #s(literal -1 binary64) a)))","fresh",42.89714687978135,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (exp.f64 (*.f64 (log.f64 (/.f64 (neg.f64 a) b)) #s(literal -1 binary64))))","fresh",56.570112302315515,"binary64"]],"compiler":[[24,18],[42,20],[15,12],[22,17],[29,21],[27,21],[42,20],[24,18],[25,19],[24,19],[15,12],[22,17],[25,19],[29,23],[27,20],[21,16],[20,15],[20,15],[22,17],[27,20],[29,21],[24,19],[29,20],[26,19],[22,17],[30,23],[25,20],[23,18],[23,18],[26,21],[24,18],[42,20],[29,21],[42,20],[24,18],[24,19],[22,17],[25,19],[29,23],[27,20],[20,15],[20,15],[22,17],[27,20],[29,21],[24,19],[29,20],[26,19],[30,23],[25,20],[23,18],[23,18],[26,21]],"count":[[838,30]],"kept":[{"done":[3,3],"fresh":[18,10],"new":[812,13],"picked":[5,4]}],"memory":[[-484800,43069792]],"min-error":[[5.460133860237955,"binary64"]],"time":34.426025390625,"type":"prune"},{"egraph":[[0,8149,391,0.039936663],[9,7851,409,0.019133507],[8,7668,409,0.026694329],[7,7101,409,0.033425049],[6,5597,409,0.029000422],[5,3199,409,0.029263974],[4,1287,409,0.023227593],[3,496,409,0.010648866],[2,216,409,0.002994325],[1,105,421,0.000830056],[0,56,427,0.000592259],[0,37,430,0.000425852]],"inputs":[["(/.f64 (-.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) (/.f64 b a)) #s(literal 2 binary64))","(-.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) (/.f64 b a))","(/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a)","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))","#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))","(*.f64 (*.f64 c a) #s(literal -4 binary64))","(*.f64 c a)","c","a","#s(literal -4 binary64)","(/.f64 b a)","b","#s(literal 2 binary64)","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 b a))","(/.f64 b a)","b","a","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 (-.f64 #s(literal 0 binary64) (*.f64 b (neg.f64 c))) (*.f64 b b)))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 b (neg.f64 c))) (*.f64 b b))","(-.f64 #s(literal 0 binary64) (*.f64 b (neg.f64 c)))","#s(literal 0 binary64)","(*.f64 b (neg.f64 c))","b","(neg.f64 c)","c","(*.f64 b b)","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))","(/.f64 #s(literal 1/2 binary64) a)","#s(literal 1/2 binary64)","a","(-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))","#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))","(*.f64 (*.f64 c a) #s(literal -4 binary64))","(*.f64 c a)","c","#s(literal -4 binary64)","b","(/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal 1/2 binary64) a))","(-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))","(*.f64 b b)","b","#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))","(*.f64 (*.f64 c a) #s(literal -4 binary64))","(*.f64 c a)","c","a","#s(literal -4 binary64)","(/.f64 #s(literal 1/2 binary64) a)","#s(literal 1/2 binary64)","(-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))"]],"locations":[["(*.f64 b b)","cost-diff",0],["(-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))","cost-diff",0],["(*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal 1/2 binary64) a))","cost-diff",0],["(/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","cost-diff",0],["(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))","cost-diff",0],["(-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)","cost-diff",0],["(/.f64 #s(literal 1/2 binary64) a)","cost-diff",0],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))","cost-diff",0],["(*.f64 b (neg.f64 c))","cost-diff",0],["#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 (-.f64 #s(literal 0 binary64) (*.f64 b (neg.f64 c))) (*.f64 b b)))","cost-diff",0],["(-.f64 #s(literal 0 binary64) (*.f64 b (neg.f64 c)))","cost-diff",3],["(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 b (neg.f64 c))) (*.f64 b b))","cost-diff",4],["(/.f64 b a)","cost-diff",0],["#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 b a))","cost-diff",0],["(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))","cost-diff",0],["(/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a)","cost-diff",0],["(/.f64 (-.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) (/.f64 b a)) #s(literal 2 binary64))","cost-diff",0],["(-.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) (/.f64 b a))","cost-diff",2]],"memory":[[-4829072,19729792]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) (/.f64 b a)) #s(literal 2 binary64))","(/.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (*.f64 #s(literal -2 binary64) a))","(-.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) (/.f64 b a))","(/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a)","(/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a)","(/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))","#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))","#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))","(*.f64 (*.f64 c a) #s(literal -4 binary64))","(*.f64 (*.f64 a #s(literal -4 binary64)) c)","(*.f64 c a)","(*.f64 a c)","c","a","#s(literal -4 binary64)","(/.f64 b a)","b","#s(literal 2 binary64)","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 b a))","(/.f64 b a)","b","a","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 (-.f64 #s(literal 0 binary64) (*.f64 b (neg.f64 c))) (*.f64 b b)))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 c b))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 b (neg.f64 c))) (*.f64 b b))","(/.f64 c b)","(-.f64 #s(literal 0 binary64) (*.f64 b (neg.f64 c)))","(*.f64 b c)","#s(literal 0 binary64)","(*.f64 b (neg.f64 c))","(*.f64 (neg.f64 c) b)","b","(neg.f64 c)","c","(*.f64 b b)","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","(/.f64 #s(literal 1/2 binary64) a)","#s(literal 1/2 binary64)","a","(-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)","(-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))","#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))","#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))","(*.f64 (*.f64 c a) #s(literal -4 binary64))","(*.f64 (*.f64 a #s(literal -4 binary64)) c)","(*.f64 c a)","(*.f64 a c)","c","#s(literal -4 binary64)","b","(/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(*.f64 (/.f64 (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 (/.f64 #s(literal -1/2 binary64) a) (fma.f64 (neg.f64 b) b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))","(-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))","(-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))","(*.f64 b b)","b","#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))","#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))","(*.f64 (*.f64 c a) #s(literal -4 binary64))","(*.f64 (*.f64 a #s(literal -4 binary64)) c)","(*.f64 c a)","(*.f64 a c)","c","a","#s(literal -4 binary64)","(/.f64 #s(literal 1/2 binary64) a)","#s(literal 1/2 binary64)","(-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))","(-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":306.56591796875,"type":"simplify"},{"compiler":[[321,32]],"locations":[["(*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal 1/2 binary64) a))","accuracy",15.650856620801253],["(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))","accuracy",23.929958470936878],["(-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))","accuracy",33.64710340611102],["#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))","accuracy",38.497395304021886],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))","accuracy",3.3164016309035493],["(-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)","accuracy",12.992468175560182],["(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))","accuracy",23.929958470936878],["#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))","accuracy",38.497395304021886],["(*.f64 b b)","accuracy",0.0],["(neg.f64 c)","accuracy",0.0],["(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 b (neg.f64 c))) (*.f64 b b))","accuracy",23.94948392412649],["#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 (-.f64 #s(literal 0 binary64) (*.f64 b (neg.f64 c))) (*.f64 b b)))","accuracy",57.000844804639414],["(/.f64 b a)","accuracy",0.0],["#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 b a))","accuracy",62.30653182858571],["(/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a)","accuracy",0.078125],["(-.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) (/.f64 b a))","accuracy",17.143575136640784],["(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))","accuracy",23.929958470936878],["#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))","accuracy",38.497395304021886]],"memory":[[3070160,48228608]],"mixsample":[[18.356201171875,"ival-div",0],[8.083251953125,"adjust",800],[0.147705078125,"ival-sqrt",3200],[0.3173828125,"ival-div",400],[0.1083984375,"ival-assert",0],[0.282958984375,"ival-div",1600],[0.01904296875,"ival-sqrt",4800],[0.272705078125,"ival-sqrt",1200],[11.32568359375,"ival-sub",0],[2.88134765625,"ival-sqrt",0],[0.01708984375,"ival-div",4800],[0.01708984375,"ival-add",5200],[0.023193359375,"ival-sqrt",2800],[1.611328125,"ival-add",0],[0.14453125,"ival-add",400],[0.19580078125,"adjust",2800],[0.02392578125,"ival-sqrt",3600],[0.325927734375,"ival-div",2000],[0.206298828125,"ival-add",2400],[0.2080078125,"ival-div",2400],[0.072998046875,"ival-sqrt",400],[0.203857421875,"ival-add",1200],[0.27880859375,"ival-sqrt",2000],[0.258056640625,"ival-sqrt",800],[0.01318359375,"ival-div",4400],[0.014892578125,"ival-sqrt",4400],[0.19482421875,"ival-div",3200],[0.150390625,"ival-add",3200],[0.02685546875,"ival-add",3600],[0.015869140625,"ival-div",2800],[3.21484375,"adjust",2000],[0.285400390625,"ival-div",1200],[17.59228515625,"ival-mult",0],[0.317138671875,"ival-add",1600],[0.1884765625,"ival-sqrt",1600],[0.01611328125,"ival-sqrt",5200],[0.02490234375,"ival-add",2800],[0.3466796875,"ival-add",2000],[0.27392578125,"ival-div",800],[0.0302734375,"ival-div",3600],[0.23388671875,"ival-true",0],[0.19921875,"ival-sqrt",2400],[0.016845703125,"ival-div",5200],[0.52734375,"exact",0],[0.19921875,"ival-add",800],[1.15087890625,"ival-neg",0]],"outcomes":[[40.95947265625,1,"valid",91],[44.67626953125,2,"valid",65],[3.64306640625,3,"valid",4],[23.49951171875,0,"valid",96]],"time":143.959228515625,"type":"localize"},{"count":[[19,189]],"inputs":[["(-.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) (/.f64 b a))","(/.f64 (-.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) (/.f64 b a)) #s(literal 2 binary64))","(/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a)","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 b a))","(/.f64 b a)","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 b (neg.f64 c))) (*.f64 b b))","(-.f64 #s(literal 0 binary64) (*.f64 b (neg.f64 c)))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 (-.f64 #s(literal 0 binary64) (*.f64 b (neg.f64 c))) (*.f64 b b)))","(*.f64 b (neg.f64 c))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))","(/.f64 #s(literal 1/2 binary64) a)","(-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)","(/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal 1/2 binary64) a))","(-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))","(*.f64 b b)","#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))","(neg.f64 c)"]],"memory":[[812176,16507008]],"outputs":[["(* -2 (/ c b))","(+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))","(+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))","(+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","(* -1 (/ c b))","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","(+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3))))))","(+ (* -1 (/ c b)) (* a (+ (* -1 (/ (pow c 2) (pow b 3))) (* a (+ (* -2 (/ (pow c 3) (pow b 5))) (* -1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","(/ b a)","(/ (+ b (* -2 (/ (* a c) b))) a)","(/ (+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))) a)","(/ (+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))) a)","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(/ 1/2 a)","(* -2 (/ (* a c) b))","(* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b))))))))","(/ (+ b (* -1 (/ (* a c) b))) a)","(/ (+ b (* a (+ (* -2 (* a (+ (* -1/2 (/ (pow c 2) (pow b 3))) (/ (pow c 2) (pow b 3))))) (* -1 (/ c b))))) a)","(/ (+ b (* a (+ (* -1 (/ c b)) (* a (+ (* -2 (* a (+ (* -1 (/ (* c (+ (* -1/2 (/ (pow c 2) (pow b 3))) (/ (pow c 2) (pow b 3)))) (pow b 2))) (+ (* -1 (/ (pow c 3) (pow b 5))) (* 1/8 (/ (* b (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) c)))))) (* -2 (+ (* -1/2 (/ (pow c 2) (pow b 3))) (/ (pow c 2) (pow b 3))))))))) a)","(* 2 c)","(* 4 (* a c))","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* (sqrt (/ c a)) (sqrt -4))","(+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4)))","(- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a))","(- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a))","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a)))","(* -2 (* (sqrt (/ c a)) (/ 1 (sqrt -4))))","(/ (+ (* -2 (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (* -2 (/ b (pow (sqrt -4) 2)))) a)","(/ (+ (* -2 (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (+ (* -2 (/ b (pow (sqrt -4) 2))) (* -2 (/ (+ (* -1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3)))) (pow a 2))))) a)","(/ (+ (* -2 (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (+ (* -2 (/ b (pow (sqrt -4) 2))) (+ (* -2 (/ (+ (* -1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3)))) (pow a 2))) (* -2 (/ (+ (* -1/2 (/ (* (pow a 2) (pow b 3)) (* c (pow (sqrt -4) 4)))) (* (sqrt (/ a c)) (/ (* b (+ (* -1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3))))) (sqrt -4)))) (pow a 3)))))) a)","(* -4 (* a c))","(* a (+ (* -4 c) (/ (pow b 2) a)))","(* -2 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b a)))","(+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* -1 b)) a)))","(+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (- (* -1 (/ (+ (* -1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* -1 b)) a)))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))))","(+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1))))))","(+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (+ (* -1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (* 1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* (sqrt (/ c a)) (sqrt -1))","(* -1 (/ (+ (* -1 (* (sqrt (* a c)) (sqrt -1))) (* -1/2 b)) a))","(* -1 (/ (+ (* -1 (* (sqrt (* a c)) (sqrt -1))) (* -1 (/ (+ (* 1/2 (* a b)) (* 2 (/ (+ (* -1/16 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1))))) a))) a))) a))","(* -1 (/ (+ (* -1 (* (sqrt (* a c)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -2 (+ (* -1/16 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1)))))) (* 2 (/ (+ (* -1/32 (/ (* (pow a 2) (pow b 3)) c)) (* 1/2 (* (sqrt (/ a c)) (* b (* (sqrt -1) (+ (* -1/16 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1)))))))))) a))) a)) (* 1/2 (* a b))) a))) a))","(* -1 (* a (+ (* -1 (/ (pow b 2) a)) (* 4 c))))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -4)))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -4)))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(+ (* (sqrt (/ c a)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (/ c a)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(/ c b)","(* b c)","(* -1 (* b c))","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* -2 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* -2 (/ b (* a (pow (sqrt -4) 2)))))","(+ (* -2 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* b (- (* -2 (* b (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))) (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))))) (* 2 (/ 1 (* a (pow (sqrt -4) 2)))))))","(+ (* -2 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* b (- (* b (+ (* -2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))) (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3))))) (* 2 (* b (- (* 1/2 (/ 1 (* (pow a 2) (* c (pow (sqrt -4) 4))))) (* (sqrt (/ 1 (* a c))) (/ (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))) (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))) (sqrt -4)))))))) (* 2 (/ 1 (* a (pow (sqrt -4) 2)))))))","(/ (+ (* -2 c) (* -2 (/ (* a (pow c 2)) (pow b 2)))) b)","(/ (+ (* -4 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -2 c) (* -2 (/ (* a (pow c 2)) (pow b 2))))) b)","(/ (+ (* -4 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -2 c) (+ (* -2 (/ (* a (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(* b (+ (* -2 (/ c (pow b 2))) (/ 1 a)))","(* b (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))","(* b (+ (* -4 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b)","(* b (+ (* -1 (/ c (pow b 2))) (/ 1 a)))","(* b (+ (* -2 (/ (+ (* -1/2 (* a (pow c 2))) (* a (pow c 2))) (pow b 4))) (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(* b (+ (* -2 (/ (+ (* -1 (* a (* c (+ (* -1/2 (* a (pow c 2))) (* a (pow c 2)))))) (+ (* -1 (* (pow a 2) (pow c 3))) (* 1/8 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* (pow a 2) c))))) (pow b 6))) (+ (* -2 (/ (+ (* -1/2 (* a (pow c 2))) (* a (pow c 2))) (pow b 4))) (+ (* -1 (/ c (pow b 2))) (/ 1 a)))))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* -2 (/ b a))","(* -1 (* b (+ (* -2 (/ c (pow b 2))) (* 2 (/ 1 a)))))","(* -1 (* b (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (* 2 (/ 1 a))))))","(* -1 (* b (+ (* -4 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (* 2 (/ 1 a)))))))","(* -1 (/ b a))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(* -1 (* b (+ (* -2 (/ c (pow b 2))) (/ 1 a))))","(* -1 (* b (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* -1 (* b (+ (* -4 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(* -1 b)","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -2 b)","(* -1 (* b (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b))","(* -1 (/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* 2 (/ (+ (* -2 (* (pow a 3) (pow c 4))) (* -1/2 (* (pow a 3) (pow c 4)))) (pow b 6)))))) b))","(* c (- (* -2 (/ (* a c) (pow b 3))) (* 2 (/ 1 b))))","(* c (- (* c (+ (* -4 (/ (* (pow a 2) c) (pow b 5))) (* -2 (/ a (pow b 3))))) (* 2 (/ 1 b))))","(* c (- (* c (+ (* -2 (/ a (pow b 3))) (* c (+ (* -4 (/ (pow a 2) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (* 2 (/ 1 b))))","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b)))","(* c (- (* c (+ (* -1 (/ a (pow b 3))) (* c (+ (* -2 (/ (pow a 2) (pow b 5))) (* -1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (/ 1 b)))","(+ (* -2 (/ c b)) (/ b a))","(+ (* c (- (* -2 (/ (* a c) (pow b 3))) (* 2 (/ 1 b)))) (/ b a))","(+ (* c (- (* c (+ (* -4 (/ (* (pow a 2) c) (pow b 5))) (* -2 (/ a (pow b 3))))) (* 2 (/ 1 b)))) (/ b a))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -2 (/ (pow a 2) (pow b 3))) (* c (+ (* -4 (/ (pow a 3) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b))))))))","(+ (* -1 (/ c b)) (/ b a))","(+ (* c (- (* -2 (* c (+ (* -1/2 (/ a (pow b 3))) (/ a (pow b 3))))) (/ 1 b))) (/ b a))","(+ (* c (- (* c (+ (* -2 (* c (+ (* -1 (/ (* a (+ (* -1/2 (/ a (pow b 3))) (/ a (pow b 3)))) (pow b 2))) (+ (* -1 (/ (pow a 2) (pow b 5))) (* 1/8 (/ (* b (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (pow a 2))))))) (* -2 (+ (* -1/2 (/ a (pow b 3))) (/ a (pow b 3)))))) (/ 1 b))) (/ b a))","(* -1 c)","(* c (+ (* -1 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -4))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ 1 (* a c))) (sqrt -4))) (/ b (* a c))))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ 1 (* a c))) (sqrt -4)))) (/ b (* a c))))","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ 1 (* a c))) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))) (/ b c)))","(- (+ (* -2 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* -1 (/ (+ (* -1 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3))))) (pow c 2)))) (* 2 (/ b (* a (pow (sqrt -4) 2)))))","(- (+ (* -2 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* -1 (/ (+ (* -1 (/ (* (pow b 3) (pow c 2)) (* (pow a 2) (pow (sqrt -4) 4)))) (* (sqrt (/ c a)) (/ (* b (+ (* -1 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (sqrt -4)))) (pow c 3)))) (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (pow (sqrt -4) 3)))) (+ (* 2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 2 (/ b (* a (pow (sqrt -4) 2)))))))","(* c (+ (* -4 a) (/ (pow b 2) c)))","(* -1 (* c (+ (* 2 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b (* a c)))))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (/ b a)) c)) (* 2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (/ b a)) c)) (* 2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(+ (* 1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (- (+ (* -1/4 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) (* 1/2 (/ (* b c) a))) c)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (- (* -1 (/ (- (+ (* 1/16 (/ (* (pow b 3) c) (pow a 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (* b (* (sqrt -1) (+ (* -1/4 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1)))))))))) (+ (* -1/4 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1)))))) c)) (* 1/2 (/ (* b c) a))) c)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* c (+ (* -1 (/ (pow b 2) c)) (* 4 a))))"]],"series":[[4.68603515625,"((- (/ (sqrt (+ (* -4 (* c a)) (* b b))) a) (/ b a)) (/ (- (/ (sqrt (+ (* -4 (* c a)) (* b b))) a) (/ b a)) 2) (/ (sqrt (+ (* -4 (* c a)) (* b b))) a) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/ b a) (/ (- 0 (* b (neg c))) (* b b)) (- 0 (* b (neg c))) (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (* b (neg c)) (* (/ 1/2 a) (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (/ 1/2 a) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (/ (* (- (* b b) (+ (* -4 (* c a)) (* b b))) (/ 1/2 a)) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (* (- (* b b) (+ (* -4 (* c a)) (* b b))) (/ 1/2 a)) (- (* b b) (+ (* -4 (* c a)) (* b b))) (* b b) (+ (* -4 (* c a)) (* b b)) (neg c))","c","-inf"],[4.7060546875,"((- (/ (sqrt (+ (* -4 (* c a)) (* b b))) a) (/ b a)) (/ (- (/ (sqrt (+ (* -4 (* c a)) (* b b))) a) (/ b a)) 2) (/ (sqrt (+ (* -4 (* c a)) (* b b))) a) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/ b a) (/ (- 0 (* b (neg c))) (* b b)) (- 0 (* b (neg c))) (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (* b (neg c)) (* (/ 1/2 a) (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (/ 1/2 a) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (/ (* (- (* b b) (+ (* -4 (* c a)) (* b b))) (/ 1/2 a)) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (* (- (* b b) (+ (* -4 (* c a)) (* b b))) (/ 1/2 a)) (- (* b b) (+ (* -4 (* c a)) (* b b))) (* b b) (+ (* -4 (* c a)) (* b b)) (neg c))","c","inf"],[3.22900390625,"((- (/ (sqrt (+ (* -4 (* c a)) (* b b))) a) (/ b a)) (/ (- (/ (sqrt (+ (* -4 (* c a)) (* b b))) a) (/ b a)) 2) (/ (sqrt (+ (* -4 (* c a)) (* b b))) a) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/ b a) (/ (- 0 (* b (neg c))) (* b b)) (- 0 (* b (neg c))) (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (* b (neg c)) (* (/ 1/2 a) (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (/ 1/2 a) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (/ (* (- (* b b) (+ (* -4 (* c a)) (* b b))) (/ 1/2 a)) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (* (- (* b b) (+ (* -4 (* c a)) (* b b))) (/ 1/2 a)) (- (* b b) (+ (* -4 (* c a)) (* b b))) (* b b) (+ (* -4 (* c a)) (* b b)) (neg c))","c","0"],[4.177978515625,"((- (/ (sqrt (+ (* -4 (* c a)) (* b b))) a) (/ b a)) (/ (- (/ (sqrt (+ (* -4 (* c a)) (* b b))) a) (/ b a)) 2) (/ (sqrt (+ (* -4 (* c a)) (* b b))) a) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/ b a) (/ (- 0 (* b (neg c))) (* b b)) (- 0 (* b (neg c))) (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (* b (neg c)) (* (/ 1/2 a) (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (/ 1/2 a) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (/ (* (- (* b b) (+ (* -4 (* c a)) (* b b))) (/ 1/2 a)) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (* (- (* b b) (+ (* -4 (* c a)) (* b b))) (/ 1/2 a)) (- (* b b) (+ (* -4 (* c a)) (* b b))) (* b b) (+ (* -4 (* c a)) (* b b)) (neg c))","b","-inf"],[4.098876953125,"((- (/ (sqrt (+ (* -4 (* c a)) (* b b))) a) (/ b a)) (/ (- (/ (sqrt (+ (* -4 (* c a)) (* b b))) a) (/ b a)) 2) (/ (sqrt (+ (* -4 (* c a)) (* b b))) a) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/ b a) (/ (- 0 (* b (neg c))) (* b b)) (- 0 (* b (neg c))) (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (* b (neg c)) (* (/ 1/2 a) (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (/ 1/2 a) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (/ (* (- (* b b) (+ (* -4 (* c a)) (* b b))) (/ 1/2 a)) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (* (- (* b b) (+ (* -4 (* c a)) (* b b))) (/ 1/2 a)) (- (* b b) (+ (* -4 (* c a)) (* b b))) (* b b) (+ (* -4 (* c a)) (* b b)) (neg c))","b","inf"],[3.668212890625,"((- (/ (sqrt (+ (* -4 (* c a)) (* b b))) a) (/ b a)) (/ (- (/ (sqrt (+ (* -4 (* c a)) (* b b))) a) (/ b a)) 2) (/ (sqrt (+ (* -4 (* c a)) (* b b))) a) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/ b a) (/ (- 0 (* b (neg c))) (* b b)) (- 0 (* b (neg c))) (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (* b (neg c)) (* (/ 1/2 a) (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (/ 1/2 a) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (/ (* (- (* b b) (+ (* -4 (* c a)) (* b b))) (/ 1/2 a)) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (* (- (* b b) (+ (* -4 (* c a)) (* b b))) (/ 1/2 a)) (- (* b b) (+ (* -4 (* c a)) (* b b))) (* b b) (+ (* -4 (* c a)) (* b b)) (neg c))","b","0"],[4.451904296875,"((- (/ (sqrt (+ (* -4 (* c a)) (* b b))) a) (/ b a)) (/ (- (/ (sqrt (+ (* -4 (* c a)) (* b b))) a) (/ b a)) 2) (/ (sqrt (+ (* -4 (* c a)) (* b b))) a) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/ b a) (/ (- 0 (* b (neg c))) (* b b)) (- 0 (* b (neg c))) (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (* b (neg c)) (* (/ 1/2 a) (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (/ 1/2 a) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (/ (* (- (* b b) (+ (* -4 (* c a)) (* b b))) (/ 1/2 a)) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (* (- (* b b) (+ (* -4 (* c a)) (* b b))) (/ 1/2 a)) (- (* b b) (+ (* -4 (* c a)) (* b b))) (* b b) (+ (* -4 (* c a)) (* b b)) (neg c))","a","-inf"],[3.541015625,"((- (/ (sqrt (+ (* -4 (* c a)) (* b b))) a) (/ b a)) (/ (- (/ (sqrt (+ (* -4 (* c a)) (* b b))) a) (/ b a)) 2) (/ (sqrt (+ (* -4 (* c a)) (* b b))) a) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/ b a) (/ (- 0 (* b (neg c))) (* b b)) (- 0 (* b (neg c))) (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (* b (neg c)) (* (/ 1/2 a) (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (/ 1/2 a) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (/ (* (- (* b b) (+ (* -4 (* c a)) (* b b))) (/ 1/2 a)) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (* (- (* b b) (+ (* -4 (* c a)) (* b b))) (/ 1/2 a)) (- (* b b) (+ (* -4 (* c a)) (* b b))) (* b b) (+ (* -4 (* c a)) (* b b)) (neg c))","a","inf"],[4.560791015625,"((- (/ (sqrt (+ (* -4 (* c a)) (* b b))) a) (/ b a)) (/ (- (/ (sqrt (+ (* -4 (* c a)) (* b b))) a) (/ b a)) 2) (/ (sqrt (+ (* -4 (* c a)) (* b b))) a) (sqrt (+ (* -4 (* c a)) (* b b))) (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/ b a) (/ (- 0 (* b (neg c))) (* b b)) (- 0 (* b (neg c))) (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (* b (neg c)) (* (/ 1/2 a) (- (sqrt (+ (* -4 (* c a)) (* b b))) b)) (/ 1/2 a) (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (/ (* (- (* b b) (+ (* -4 (* c a)) (* b b))) (/ 1/2 a)) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (* (- (* b b) (+ (* -4 (* c a)) (* b b))) (/ 1/2 a)) (- (* b b) (+ (* -4 (* c a)) (* b b))) (* b b) (+ (* -4 (* c a)) (* b b)) (neg c))","a","0"]],"time":42.1259765625,"type":"series"},{"count":[[189,188]],"egraph":[[0,8967,5469,0.112830273],[1,3224,5719,0.032158076],[0,958,5915,0.009127783]],"inputs":[["(* -2 (/ c b))","(+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))","(+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))","(+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","(* -1 (/ c b))","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","(+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3))))))","(+ (* -1 (/ c b)) (* a (+ (* -1 (/ (pow c 2) (pow b 3))) (* a (+ (* -2 (/ (pow c 3) (pow b 5))) (* -1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","(/ b a)","(/ (+ b (* -2 (/ (* a c) b))) a)","(/ (+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))) a)","(/ (+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))) a)","b","(+ b (* -2 (/ (* a c) b)))","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(/ 1/2 a)","(* -2 (/ (* a c) b))","(* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))","(* a (+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b))))))))","(/ (+ b (* -1 (/ (* a c) b))) a)","(/ (+ b (* a (+ (* -2 (* a (+ (* -1/2 (/ (pow c 2) (pow b 3))) (/ (pow c 2) (pow b 3))))) (* -1 (/ c b))))) a)","(/ (+ b (* a (+ (* -1 (/ c b)) (* a (+ (* -2 (* a (+ (* -1 (/ (* c (+ (* -1/2 (/ (pow c 2) (pow b 3))) (/ (pow c 2) (pow b 3)))) (pow b 2))) (+ (* -1 (/ (pow c 3) (pow b 5))) (* 1/8 (/ (* b (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) c)))))) (* -2 (+ (* -1/2 (/ (pow c 2) (pow b 3))) (/ (pow c 2) (pow b 3))))))))) a)","(* 2 c)","(* 4 (* a c))","(pow b 2)","(+ (* -4 (* a c)) (pow b 2))","(* (sqrt (/ c a)) (sqrt -4))","(+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4)))","(- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a))","(- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a))","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))","(+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* (sqrt (* a c)) (sqrt -4))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a)))","(* -2 (* (sqrt (/ c a)) (/ 1 (sqrt -4))))","(/ (+ (* -2 (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (* -2 (/ b (pow (sqrt -4) 2)))) a)","(/ (+ (* -2 (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (+ (* -2 (/ b (pow (sqrt -4) 2))) (* -2 (/ (+ (* -1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3)))) (pow a 2))))) a)","(/ (+ (* -2 (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (+ (* -2 (/ b (pow (sqrt -4) 2))) (+ (* -2 (/ (+ (* -1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3)))) (pow a 2))) (* -2 (/ (+ (* -1/2 (/ (* (pow a 2) (pow b 3)) (* c (pow (sqrt -4) 4)))) (* (sqrt (/ a c)) (/ (* b (+ (* -1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3))))) (sqrt -4)))) (pow a 3)))))) a)","(* -4 (* a c))","(* a (+ (* -4 c) (/ (pow b 2) a)))","(* -2 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b a)))","(+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* -1 b)) a)))","(+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (- (* -1 (/ (+ (* -1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* -1 b)) a)))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))))","(+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1))))))","(+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (+ (* -1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (* 1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(* (sqrt (/ c a)) (sqrt -1))","(* -1 (/ (+ (* -1 (* (sqrt (* a c)) (sqrt -1))) (* -1/2 b)) a))","(* -1 (/ (+ (* -1 (* (sqrt (* a c)) (sqrt -1))) (* -1 (/ (+ (* 1/2 (* a b)) (* 2 (/ (+ (* -1/16 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1))))) a))) a))) a))","(* -1 (/ (+ (* -1 (* (sqrt (* a c)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -2 (+ (* -1/16 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1)))))) (* 2 (/ (+ (* -1/32 (/ (* (pow a 2) (pow b 3)) c)) (* 1/2 (* (sqrt (/ a c)) (* b (* (sqrt -1) (+ (* -1/16 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1)))))))))) a))) a)) (* 1/2 (* a b))) a))) a))","(* -1 (* a (+ (* -1 (/ (pow b 2) a)) (* 4 c))))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -4)))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -4)))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(+ (* (sqrt (/ c a)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (/ c a)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(/ c b)","(* b c)","(* -1 (* b c))","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(+ (* -2 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* -2 (/ b (* a (pow (sqrt -4) 2)))))","(+ (* -2 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* b (- (* -2 (* b (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))) (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))))) (* 2 (/ 1 (* a (pow (sqrt -4) 2)))))))","(+ (* -2 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* b (- (* b (+ (* -2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))) (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3))))) (* 2 (* b (- (* 1/2 (/ 1 (* (pow a 2) (* c (pow (sqrt -4) 4))))) (* (sqrt (/ 1 (* a c))) (/ (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))) (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))) (sqrt -4)))))))) (* 2 (/ 1 (* a (pow (sqrt -4) 2)))))))","(/ (+ (* -2 c) (* -2 (/ (* a (pow c 2)) (pow b 2)))) b)","(/ (+ (* -4 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -2 c) (* -2 (/ (* a (pow c 2)) (pow b 2))))) b)","(/ (+ (* -4 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -2 c) (+ (* -2 (/ (* a (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(* b (+ (* -2 (/ c (pow b 2))) (/ 1 a)))","(* b (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))","(* b (+ (* -4 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b)","(* b (+ (* -1 (/ c (pow b 2))) (/ 1 a)))","(* b (+ (* -2 (/ (+ (* -1/2 (* a (pow c 2))) (* a (pow c 2))) (pow b 4))) (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(* b (+ (* -2 (/ (+ (* -1 (* a (* c (+ (* -1/2 (* a (pow c 2))) (* a (pow c 2)))))) (+ (* -1 (* (pow a 2) (pow c 3))) (* 1/8 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* (pow a 2) c))))) (pow b 6))) (+ (* -2 (/ (+ (* -1/2 (* a (pow c 2))) (* a (pow c 2))) (pow b 4))) (+ (* -1 (/ c (pow b 2))) (/ 1 a)))))","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(* -2 (/ b a))","(* -1 (* b (+ (* -2 (/ c (pow b 2))) (* 2 (/ 1 a)))))","(* -1 (* b (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (* 2 (/ 1 a))))))","(* -1 (* b (+ (* -4 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (* 2 (/ 1 a)))))))","(* -1 (/ b a))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(* -1 (* b (+ (* -2 (/ c (pow b 2))) (/ 1 a))))","(* -1 (* b (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(* -1 (* b (+ (* -4 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(* -1 b)","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -2 b)","(* -1 (* b (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(* -1 (* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(* -1 (* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(* -1 (/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b))","(* -1 (/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b))","(* -1 (/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* 2 (/ (+ (* -2 (* (pow a 3) (pow c 4))) (* -1/2 (* (pow a 3) (pow c 4)))) (pow b 6)))))) b))","(* c (- (* -2 (/ (* a c) (pow b 3))) (* 2 (/ 1 b))))","(* c (- (* c (+ (* -4 (/ (* (pow a 2) c) (pow b 5))) (* -2 (/ a (pow b 3))))) (* 2 (/ 1 b))))","(* c (- (* c (+ (* -2 (/ a (pow b 3))) (* c (+ (* -4 (/ (pow a 2) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (* 2 (/ 1 b))))","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b)))","(* c (- (* c (+ (* -1 (/ a (pow b 3))) (* c (+ (* -2 (/ (pow a 2) (pow b 5))) (* -1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (/ 1 b)))","(+ (* -2 (/ c b)) (/ b a))","(+ (* c (- (* -2 (/ (* a c) (pow b 3))) (* 2 (/ 1 b)))) (/ b a))","(+ (* c (- (* c (+ (* -4 (/ (* (pow a 2) c) (pow b 5))) (* -2 (/ a (pow b 3))))) (* 2 (/ 1 b)))) (/ b a))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))","(* c (+ (* -2 (/ a b)) (* c (+ (* -2 (/ (pow a 2) (pow b 3))) (* c (+ (* -4 (/ (pow a 3) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b))))))))","(+ (* -1 (/ c b)) (/ b a))","(+ (* c (- (* -2 (* c (+ (* -1/2 (/ a (pow b 3))) (/ a (pow b 3))))) (/ 1 b))) (/ b a))","(+ (* c (- (* c (+ (* -2 (* c (+ (* -1 (/ (* a (+ (* -1/2 (/ a (pow b 3))) (/ a (pow b 3)))) (pow b 2))) (+ (* -1 (/ (pow a 2) (pow b 5))) (* 1/8 (/ (* b (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (pow a 2))))))) (* -2 (+ (* -1/2 (/ a (pow b 3))) (/ a (pow b 3)))))) (/ 1 b))) (/ b a))","(* -1 c)","(* c (+ (* -1 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -4))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ 1 (* a c))) (sqrt -4))) (/ b (* a c))))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ 1 (* a c))) (sqrt -4)))) (/ b (* a c))))","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ 1 (* a c))) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))) (/ b c)))","(- (+ (* -2 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* -1 (/ (+ (* -1 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3))))) (pow c 2)))) (* 2 (/ b (* a (pow (sqrt -4) 2)))))","(- (+ (* -2 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* -1 (/ (+ (* -1 (/ (* (pow b 3) (pow c 2)) (* (pow a 2) (pow (sqrt -4) 4)))) (* (sqrt (/ c a)) (/ (* b (+ (* -1 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (sqrt -4)))) (pow c 3)))) (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (pow (sqrt -4) 3)))) (+ (* 2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 2 (/ b (* a (pow (sqrt -4) 2)))))))","(* c (+ (* -4 a) (/ (pow b 2) c)))","(* -1 (* c (+ (* 2 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b (* a c)))))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (/ b a)) c)) (* 2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (/ b a)) c)) (* 2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(+ (* 1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (- (+ (* -1/4 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) (* 1/2 (/ (* b c) a))) c)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ (- (* -1 (/ (- (+ (* 1/16 (/ (* (pow b 3) c) (pow a 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (* b (* (sqrt -1) (+ (* -1/4 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1)))))))))) (+ (* -1/4 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1)))))) c)) (* 1/2 (/ (* b c) a))) c)) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 (* c (+ (* -1 (/ (pow b 2) c)) (* 4 a))))"]],"memory":[[385008,62888048]],"method":["egg-herbie"],"outputs":[["(* -2 (/ c b))","(*.f64 (/.f64 c b) #s(literal -2 binary64))","(+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))","(*.f64 #s(literal -2 binary64) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)))","(+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))","(fma.f64 (*.f64 a #s(literal -4 binary64)) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) (pow.f64 b #s(literal 5 binary64))) (*.f64 #s(literal -2 binary64) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b))))","(+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 20 binary64)) b) (/.f64 (*.f64 #s(literal -4 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 5 binary64)))) a (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) c) c) (pow.f64 b #s(literal 3 binary64)))) a (*.f64 (/.f64 c b) #s(literal -2 binary64)))","(* -1 (/ c b))","(/.f64 (neg.f64 c) b)","(+ (* -1 (/ c b)) (* -1 (/ (* a (pow c 2)) (pow b 3))))","(neg.f64 (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)))","(+ (* -1 (/ c b)) (* a (+ (* -2 (/ (* a (pow c 3)) (pow b 5))) (* -1 (/ (pow c 2) (pow b 3))))))","(fma.f64 (fma.f64 (*.f64 a #s(literal -2 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (neg.f64 c) c) (pow.f64 b #s(literal 3 binary64)))) a (/.f64 (neg.f64 c) b))","(+ (* -1 (/ c b)) (* a (+ (* -1 (/ (pow c 2) (pow b 3))) (* a (+ (* -2 (/ (pow c 3) (pow b 5))) (* -1/4 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b)))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) a) (/.f64 (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 20 binary64)) b) (/.f64 (*.f64 #s(literal -2 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 5 binary64)))) a (/.f64 (*.f64 (neg.f64 c) c) (pow.f64 b #s(literal 3 binary64)))) a (/.f64 (neg.f64 c) b))","(/ b a)","(/.f64 b a)","(/ (+ b (* -2 (/ (* a c) b))) a)","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 c b) b) a)","(/ (+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))) a)","(/.f64 (fma.f64 (*.f64 #s(literal -2 binary64) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b))) a b) a)","(/ (+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))) a)","(/.f64 (fma.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) (pow.f64 b #s(literal 5 binary64))) (*.f64 #s(literal -2 binary64) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)))) a b) a)","b","(+ b (* -2 (/ (* a c) b)))","(fma.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 c b) b)","(+ b (* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3))))))","(fma.f64 (*.f64 #s(literal -2 binary64) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b))) a b)","(+ b (* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3))))))))","(fma.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) (pow.f64 b #s(literal 5 binary64))) (*.f64 #s(literal -2 binary64) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)))) a b)","(/ 1/2 a)","(/.f64 #s(literal 1/2 binary64) a)","(* -2 (/ (* a c) b))","(*.f64 (*.f64 a (/.f64 c b)) #s(literal -2 binary64))","(* a (+ (* -2 (/ c b)) (* -2 (/ (* a (pow c 2)) (pow b 3)))))","(*.f64 (*.f64 #s(literal -2 binary64) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b))) a)","(* a (+ (* -2 (/ c b)) (* a (+ (* -4 (/ (* a (pow c 3)) (pow b 5))) (* -2 (/ (pow c 2) (pow b 3)))))))","(*.f64 (fma.f64 (*.f64 a #s(literal -4 binary64)) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) (pow.f64 b #s(literal 5 binary64))) (*.f64 #s(literal -2 binary64) (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b)))) a)","(* a (+ (* -2 (/ c b)) (* a (+ (* -2 (/ (pow c 2) (pow b 3))) (* a (+ (* -4 (/ (pow c 3) (pow b 5))) (* -1/2 (/ (* a (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) b))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 20 binary64)) b) (/.f64 (*.f64 #s(literal -4 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 5 binary64)))) a (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) c) c) (pow.f64 b #s(literal 3 binary64)))) a (*.f64 (/.f64 c b) #s(literal -2 binary64))) a)","(/ (+ b (* -1 (/ (* a c) b))) a)","(/.f64 (fma.f64 (neg.f64 a) (/.f64 c b) b) a)","(/ (+ b (* a (+ (* -2 (* a (+ (* -1/2 (/ (pow c 2) (pow b 3))) (/ (pow c 2) (pow b 3))))) (* -1 (/ c b))))) a)","(/.f64 (fma.f64 (neg.f64 (fma.f64 a (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64))) (/.f64 c b))) a b) a)","(/ (+ b (* a (+ (* -1 (/ c b)) (* a (+ (* -2 (* a (+ (* -1 (/ (* c (+ (* -1/2 (/ (pow c 2) (pow b 3))) (/ (pow c 2) (pow b 3)))) (pow b 2))) (+ (* -1 (/ (pow c 3) (pow b 5))) (* 1/8 (/ (* b (+ (* 4 (/ (pow c 4) (pow b 6))) (* 16 (/ (pow c 4) (pow b 6))))) c)))))) (* -2 (+ (* -1/2 (/ (pow c 2) (pow b 3))) (/ (pow c 2) (pow b 3))))))))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -2 binary64) a) (fma.f64 (neg.f64 c) (/.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 3 binary64)))) (*.f64 b b)) (fma.f64 (/.f64 (*.f64 (*.f64 b (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64)))) #s(literal 20 binary64)) c) #s(literal 1/8 binary64) (/.f64 (neg.f64 (pow.f64 c #s(literal 3 binary64))) (pow.f64 b #s(literal 5 binary64))))) (/.f64 (*.f64 (neg.f64 c) c) (pow.f64 b #s(literal 3 binary64)))) a (/.f64 (neg.f64 c) b)) a b) a)","(* 2 c)","(*.f64 #s(literal 2 binary64) c)","(* 4 (* a c))","(*.f64 (*.f64 #s(literal 4 binary64) a) c)","(pow b 2)","(*.f64 b b)","(+ (* -4 (* a c)) (pow b 2))","(fma.f64 (*.f64 a c) #s(literal -4 binary64) (*.f64 b b))","(* (sqrt (/ c a)) (sqrt -4))","(*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4)))","(fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b) a))","(- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a))","(fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b) a)))","(- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a))","(fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b) a))))","(* 1/2 (* (sqrt (/ c a)) (sqrt -4)))","(*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1/2 (/ b a)) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ b a)) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4)))))","(fma.f64 #s(literal 1/4 binary64) (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))))","(+ (* -1/2 (/ b a)) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ c a)) (sqrt -4))))))","(fma.f64 (*.f64 #s(literal -1/16 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 #s(literal 1/4 binary64) (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))))","(+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))","(fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))","(+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))))","(+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))))","(* (sqrt (* a c)) (sqrt -4))","(*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)))))) a)","(* a (+ (* -1 (/ b a)) (* (sqrt (/ c a)) (sqrt -4))))","(*.f64 (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b) a)) a)","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4))) (/ b a)))","(*.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b) a))) a)","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ c a)) (sqrt -4)))) (/ b a)))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b) a)))) a)","(* -2 (* (sqrt (/ c a)) (/ 1 (sqrt -4))))","(*.f64 (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64))) #s(literal -2 binary64))","(/ (+ (* -2 (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (* -2 (/ b (pow (sqrt -4) 2)))) a)","(/.f64 (*.f64 #s(literal -2 binary64) (+.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))) a)","(/ (+ (* -2 (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (+ (* -2 (/ b (pow (sqrt -4) 2))) (* -2 (/ (+ (* -1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3)))) (pow a 2))))) a)","(/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 (/.f64 b #s(literal -4 binary64)) (/.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))) (/.f64 (*.f64 #s(literal -1 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c)) (sqrt.f64 #s(literal -4 binary64))) (/.f64 (*.f64 b b) #s(literal -4 binary64)))) (*.f64 a a))) a)","(/ (+ (* -2 (* (sqrt (* a c)) (/ 1 (sqrt -4)))) (+ (* -2 (/ b (pow (sqrt -4) 2))) (+ (* -2 (/ (+ (* -1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3)))) (pow a 2))) (* -2 (/ (+ (* -1/2 (/ (* (pow a 2) (pow b 3)) (* c (pow (sqrt -4) 4)))) (* (sqrt (/ a c)) (/ (* b (+ (* -1/2 (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3)))) (* (sqrt (/ (pow a 3) c)) (/ (pow b 2) (pow (sqrt -4) 3))))) (sqrt -4)))) (pow a 3)))))) a)","(/.f64 (*.f64 #s(literal -2 binary64) (+.f64 (+.f64 (/.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64))) (/.f64 b #s(literal -4 binary64))) (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c)) (sqrt.f64 #s(literal -4 binary64))) (/.f64 (*.f64 b b) #s(literal -4 binary64))) a) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 a a) c)) (/.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 4 binary64))) (/.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 a c)) b) (*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) (/.f64 b #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (sqrt.f64 #s(literal -4 binary64)))) (pow.f64 a #s(literal 3 binary64)))))) a)","(* -4 (* a c))","(*.f64 (*.f64 a c) #s(literal -4 binary64))","(* a (+ (* -4 c) (/ (pow b 2) a)))","(*.f64 (fma.f64 c #s(literal -4 binary64) (/.f64 (*.f64 b b) a)) a)","(* -2 (* (sqrt (/ c a)) (sqrt -1)))","(*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b a)))","(fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b) a))","(+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (- (* 1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* -1 b)) a)))","(fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 b b))) (sqrt.f64 #s(literal -1 binary64)) b) (neg.f64 a)))","(+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (- (* -1 (/ (+ (* -1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* -1 b)) a)))","(fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) (pow.f64 c #s(literal 3 binary64)))))) a) #s(literal -1 binary64) b) (neg.f64 a)))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1/2 (/ b a)))","(-.f64 (*.f64 (/.f64 b a) #s(literal -1/2 binary64)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* 1/8 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) (* 1/2 b)) a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 b b))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 #s(literal 1/2 binary64) b)) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -1/8 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1)))) (* 1/128 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1))))) a)) (* 1/2 b)) a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 #s(literal 1/2 binary64) b (/.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/128 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) (pow.f64 c #s(literal 3 binary64)))))) (neg.f64 a))) a)))","(+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))))","(fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) (*.f64 b b)) #s(literal -1/4 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a))))","(+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1))))))","(fma.f64 (*.f64 #s(literal -1/4 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b))) (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal 1/64 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))))","(+ (* -2 (* (sqrt (/ c a)) (sqrt -1))) (+ (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (+ (* -1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (* 1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))))))","(fma.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal -1/4 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b))) (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal 1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (*.f64 #s(literal -1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64))))))))","(* -2 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (*.f64 #s(literal -2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 a c)))","(* -1 (* a (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) (*.f64 b b)) #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) (*.f64 b b)) #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a))))))","(* -1 (* a (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) (*.f64 b b)) #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))))))","(* -1 (* a (+ (* 2 (* (sqrt (/ c a)) (sqrt -1))) (/ b a))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 b a)))","(* -1 (* a (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 b b))) (sqrt.f64 #s(literal -1 binary64)) (neg.f64 b)) (neg.f64 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ a c)) (* (pow b 2) (sqrt -1))))) a)) b) a)) (* 2 (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b b))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) (pow.f64 c #s(literal 3 binary64)))))) (neg.f64 a)) #s(literal -1 binary64) b) a)))","(* (sqrt (/ c a)) (sqrt -1))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))","(* -1 (/ (+ (* -1 (* (sqrt (* a c)) (sqrt -1))) (* -1/2 b)) a))","(/.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) b) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 a c)))) (neg.f64 a))","(* -1 (/ (+ (* -1 (* (sqrt (* a c)) (sqrt -1))) (* -1 (/ (+ (* 1/2 (* a b)) (* 2 (/ (+ (* -1/16 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1))))) a))) a))) a))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 a c)) (/.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c)) (sqrt.f64 #s(literal -1 binary64))) (*.f64 b b)) #s(literal 1/16 binary64)) a) #s(literal 2 binary64) (*.f64 (*.f64 b a) #s(literal 1/2 binary64))) a))) (neg.f64 a))","(* -1 (/ (+ (* -1 (* (sqrt (* a c)) (sqrt -1))) (* -1 (/ (+ (* -1 (/ (+ (* -2 (+ (* -1/16 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1)))))) (* 2 (/ (+ (* -1/32 (/ (* (pow a 2) (pow b 3)) c)) (* 1/2 (* (sqrt (/ a c)) (* b (* (sqrt -1) (+ (* -1/16 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow a 3) c)) (* (pow b 2) (sqrt -1)))))))))) a))) a)) (* 1/2 (* a b))) a))) a))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 a c)) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) b (/.f64 (fma.f64 (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 a c))) (*.f64 b (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c)) (sqrt.f64 #s(literal -1 binary64))) (*.f64 b b)) #s(literal 1/16 binary64)) (*.f64 (*.f64 #s(literal -1/32 binary64) (*.f64 a a)) (/.f64 (pow.f64 b #s(literal 3 binary64)) c))) a) #s(literal 2 binary64) (*.f64 (*.f64 #s(literal -2 binary64) (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) c)) (sqrt.f64 #s(literal -1 binary64))) (*.f64 b b))) #s(literal 1/16 binary64))) (neg.f64 a))) a))) (neg.f64 a))","(* -1 (* a (+ (* -1 (/ (pow b 2) a)) (* 4 c))))","(*.f64 (neg.f64 a) (fma.f64 #s(literal 4 binary64) c (/.f64 (*.f64 (neg.f64 b) b) a)))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -4)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -1 binary64) a)) b (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -4)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) (/.f64 b #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) b (/.f64 #s(literal -1 binary64) a)) b (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b (sqrt -4)))) (* 1/2 (/ 1 a)))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 c a)) (*.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -1/2 binary64) a)) b))","(+ (* 1/2 (* (sqrt (/ c a)) (sqrt -4))) (* b (- (* b (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))) (* 1/2 (/ 1 a)))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 c a))) (sqrt.f64 #s(literal -4 binary64)) (*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) (/.f64 b #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/16 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/4 binary64))) b (/.f64 #s(literal -1/2 binary64) a)) b))","(+ (* (sqrt (/ c a)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) (/.f64 b #s(literal -4 binary64))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))","(+ (* (sqrt (/ c a)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (*.f64 b b) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) #s(literal -1/8 binary64))) (*.f64 b b) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 #s(literal -4 binary64)) (sqrt.f64 (/.f64 c a))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))))","(fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) (/.f64 b #s(literal -4 binary64)))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* (sqrt (* a c)) (sqrt -4)) (* (pow b 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))) (* (pow b 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -4) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 2) (pow (sqrt -4) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (*.f64 b b) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))) #s(literal -1/8 binary64))) (*.f64 b b) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) (*.f64 b b) (*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))","(/ c b)","(/.f64 c b)","(* b c)","(*.f64 b c)","(* -1 (* b c))","(*.f64 (neg.f64 b) c)","(+ (* -1 b) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (neg.f64 b))","(+ (* b (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b (sqrt -4)))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b (sqrt.f64 #s(literal -4 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) #s(literal -1 binary64)) b (*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* b (- (* b (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -4)))))) 1)) (* (sqrt (* a c)) (sqrt -4)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) (/.f64 b #s(literal -4 binary64)))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64))) #s(literal 1/2 binary64))) b #s(literal -1 binary64)) b (*.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))","(+ (* -2 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* -2 (/ b (* a (pow (sqrt -4) 2)))))","(fma.f64 (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64))) #s(literal -2 binary64) (*.f64 #s(literal 1/2 binary64) (/.f64 b a)))","(+ (* -2 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* b (- (* -2 (* b (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))) (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))))) (* 2 (/ 1 (* a (pow (sqrt -4) 2)))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) b (/.f64 #s(literal -2 binary64) (*.f64 a #s(literal -4 binary64)))) b (*.f64 (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64))) #s(literal -2 binary64)))","(+ (* -2 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* b (- (* b (+ (* -2 (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))) (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3))))) (* 2 (* b (- (* 1/2 (/ 1 (* (pow a 2) (* c (pow (sqrt -4) 4))))) (* (sqrt (/ 1 (* a c))) (/ (+ (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))) (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (pow (sqrt -4) 3)))) (sqrt -4)))))))) (* 2 (/ 1 (* a (pow (sqrt -4) 2)))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 2 binary64) b) (-.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 (*.f64 (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 4 binary64)) c) a) a)) (*.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))))) (*.f64 #s(literal -1 binary64) (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64))))) b (/.f64 #s(literal -2 binary64) (*.f64 a #s(literal -4 binary64)))) b (*.f64 (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64))) #s(literal -2 binary64)))","(/ (+ (* -2 c) (* -2 (/ (* a (pow c 2)) (pow b 2)))) b)","(/.f64 (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c)) b)","(/ (+ (* -4 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -2 c) (* -2 (/ (* a (pow c 2)) (pow b 2))))) b)","(/.f64 (fma.f64 (*.f64 (*.f64 a #s(literal -4 binary64)) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c))) b)","(/ (+ (* -4 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -2 c) (+ (* -2 (/ (* a (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(/.f64 (fma.f64 (*.f64 (*.f64 a #s(literal -4 binary64)) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (pow.f64 b #s(literal 6 binary64))) (/.f64 #s(literal 20 binary64) a)) #s(literal -1/2 binary64) (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c)))) b)","(/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b)","(/.f64 (neg.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c)) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b)","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (neg.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c))) b)","(/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* -1/4 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* a (pow b 6))))))) b)","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (pow.f64 b #s(literal 6 binary64))) (/.f64 #s(literal 20 binary64) a)) #s(literal -1/4 binary64) (neg.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c)))) b)","(* b (+ (* -2 (/ c (pow b 2))) (/ 1 a)))","(*.f64 (fma.f64 (/.f64 c (*.f64 b b)) #s(literal -2 binary64) (/.f64 #s(literal 1 binary64) a)) b)","(* b (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))","(*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 (/.f64 c (*.f64 b b)) (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) a)) b)","(* b (+ (* -4 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(*.f64 (fma.f64 (*.f64 (*.f64 a #s(literal -4 binary64)) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (+.f64 (/.f64 c (*.f64 b b)) (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) a))) b)","(* b (+ 1 (* -2 (/ (* a c) (pow b 2)))))","(*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -2 binary64) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))","(*.f64 (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 a (/.f64 c (*.f64 b b)))) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 a (/.f64 c (*.f64 b b)))) #s(literal 1 binary64))) b)","(/ (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2)))) b)","(/.f64 (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 (*.f64 a a) b) (*.f64 a c))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))))) b)","(/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 (*.f64 a a) b) (*.f64 a c)))) b)","(/ (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 4))) (+ (* -2 (* a c)) (+ (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 2))) (* -1/2 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (pow b 6)))))) b)","(/.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) #s(literal 20 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal -1/2 binary64) (*.f64 #s(literal -2 binary64) (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 (*.f64 a a) b) (*.f64 a c))))) b)","(* b (+ (* -1 (/ c (pow b 2))) (/ 1 a)))","(*.f64 (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b))) b)","(* b (+ (* -2 (/ (+ (* -1/2 (* a (pow c 2))) (* a (pow c 2))) (pow b 4))) (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(*.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b #s(literal 4 binary64)))) (/.f64 c (*.f64 b b))) b)","(* b (+ (* -2 (/ (+ (* -1 (* a (* c (+ (* -1/2 (* a (pow c 2))) (* a (pow c 2)))))) (+ (* -1 (* (pow a 2) (pow c 3))) (* 1/8 (/ (+ (* 4 (* (pow a 4) (pow c 4))) (* 16 (* (pow a 4) (pow c 4)))) (* (pow a 2) c))))) (pow b 6))) (+ (* -2 (/ (+ (* -1/2 (* a (pow c 2))) (* a (pow c 2))) (pow b 4))) (+ (* -1 (/ c (pow b 2))) (/ 1 a)))))","(*.f64 (fma.f64 (/.f64 (fma.f64 (*.f64 (neg.f64 a) (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 c c) a))) c (fma.f64 (neg.f64 (pow.f64 c #s(literal 3 binary64))) (*.f64 a a) (*.f64 (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (*.f64 a a)) (/.f64 #s(literal 20 binary64) c)) #s(literal 1/8 binary64)))) (pow.f64 b #s(literal 6 binary64))) #s(literal -2 binary64) (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b #s(literal 4 binary64)))) (/.f64 c (*.f64 b b)))) b)","(* (pow b 2) (+ 1 (* -4 (/ (* a c) (pow b 2)))))","(*.f64 (*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -4 binary64) #s(literal 1 binary64)) b) b)","(* -2 (/ b a))","(*.f64 (/.f64 b a) #s(literal -2 binary64))","(* -1 (* b (+ (* -2 (/ c (pow b 2))) (* 2 (/ 1 a)))))","(*.f64 (fma.f64 (/.f64 c (*.f64 b b)) #s(literal -2 binary64) (/.f64 #s(literal 2 binary64) a)) (neg.f64 b))","(* -1 (* b (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (* 2 (/ 1 a))))))","(*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 (/.f64 c (*.f64 b b)) (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b #s(literal 4 binary64)))) (/.f64 #s(literal 2 binary64) a)) (neg.f64 b))","(* -1 (* b (+ (* -4 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (* 2 (/ 1 a)))))))","(*.f64 (fma.f64 (*.f64 (*.f64 a #s(literal -4 binary64)) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (+.f64 (/.f64 c (*.f64 b b)) (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b #s(literal 4 binary64)))) (/.f64 #s(literal 2 binary64) a))) (neg.f64 b))","(* -1 (/ b a))","(/.f64 (neg.f64 b) a)","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (/ 1 a))))","(*.f64 (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b))) (neg.f64 b))","(* -1 (* b (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(*.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b #s(literal 4 binary64)))) (/.f64 c (*.f64 b b))) (neg.f64 b))","(* -1 (* b (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -1 (/ c (pow b 2))) (+ (* -1 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(*.f64 (fma.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b #s(literal 4 binary64)))) (/.f64 c (*.f64 b b)))) (neg.f64 b))","(* -1 (* b (+ (* -2 (/ c (pow b 2))) (/ 1 a))))","(*.f64 (fma.f64 (/.f64 c (*.f64 b b)) #s(literal -2 binary64) (/.f64 #s(literal 1 binary64) a)) (neg.f64 b))","(* -1 (* b (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a)))))","(*.f64 (fma.f64 #s(literal -2 binary64) (+.f64 (/.f64 c (*.f64 b b)) (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) a)) (neg.f64 b))","(* -1 (* b (+ (* -4 (/ (* (pow a 2) (pow c 3)) (pow b 6))) (+ (* -2 (/ c (pow b 2))) (+ (* -2 (/ (* a (pow c 2)) (pow b 4))) (/ 1 a))))))","(*.f64 (fma.f64 (*.f64 (*.f64 a #s(literal -4 binary64)) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (+.f64 (/.f64 c (*.f64 b b)) (/.f64 (*.f64 (*.f64 c c) a) (pow.f64 b #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) a))) (neg.f64 b))","(* -1 b)","(neg.f64 b)","(* -1 (* b (+ 1 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -2 binary64) #s(literal 1 binary64)) (neg.f64 b))","(* -1 (* b (+ 1 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 a (/.f64 c (*.f64 b b)))) #s(literal 1 binary64)) (neg.f64 b))","(* -1 (* b (+ 1 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 a (/.f64 c (*.f64 b b)))) #s(literal 1 binary64))) (neg.f64 b))","(* -2 b)","(*.f64 #s(literal -2 binary64) b)","(* -1 (* b (+ 2 (* -2 (/ (* a c) (pow b 2))))))","(*.f64 (fma.f64 (*.f64 a (/.f64 c (*.f64 b b))) #s(literal -2 binary64) #s(literal 2 binary64)) (neg.f64 b))","(* -1 (* b (+ 2 (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4)))))))","(*.f64 (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 a (/.f64 c (*.f64 b b)))) #s(literal 2 binary64)) (neg.f64 b))","(* -1 (* b (+ 2 (+ (* -4 (/ (* (pow a 3) (pow c 3)) (pow b 6))) (+ (* -2 (/ (* a c) (pow b 2))) (* -2 (/ (* (pow a 2) (pow c 2)) (pow b 4))))))))","(*.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (fma.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 (*.f64 c c) (pow.f64 b #s(literal 4 binary64))) (*.f64 a (/.f64 c (*.f64 b b)))) #s(literal 2 binary64))) (neg.f64 b))","(* -1 (/ (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2)))) b))","(/.f64 (neg.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c)) (neg.f64 b))","(* -1 (/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (* -1 (/ (* a (pow c 2)) (pow b 2))))) b))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (neg.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c))) (neg.f64 b))","(* -1 (/ (+ (* -2 (/ (* (pow a 2) (pow c 3)) (pow b 4))) (+ (* -1 c) (+ (* -1 (/ (* a (pow c 2)) (pow b 2))) (* 2 (/ (+ (* -2 (* (pow a 3) (pow c 4))) (* -1/2 (* (pow a 3) (pow c 4)))) (pow b 6)))))) b))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b #s(literal 4 binary64))) (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 c #s(literal 4 binary64))) #s(literal -5/2 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 2 binary64) (neg.f64 (fma.f64 (/.f64 (*.f64 c c) b) (/.f64 a b) c)))) (neg.f64 b))","(* c (- (* -2 (/ (* a c) (pow b 3))) (* 2 (/ 1 b))))","(*.f64 (*.f64 #s(literal -2 binary64) (fma.f64 a (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) b))) c)","(* c (- (* c (+ (* -4 (/ (* (pow a 2) c) (pow b 5))) (* -2 (/ a (pow b 3))))) (* 2 (/ 1 b))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 a #s(literal -4 binary64)) a) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (*.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) #s(literal -2 binary64))) c (/.f64 #s(literal -2 binary64) b)) c)","(* c (- (* c (+ (* -2 (/ a (pow b 3))) (* c (+ (* -4 (/ (pow a 2) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (* 2 (/ 1 b))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c a)) (/.f64 (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 20 binary64)) b) (/.f64 (*.f64 (*.f64 a #s(literal -4 binary64)) a) (pow.f64 b #s(literal 5 binary64)))) c (*.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) #s(literal -2 binary64))) c (/.f64 #s(literal -2 binary64) b)) c)","(* c (- (* -1 (/ (* a c) (pow b 3))) (/ 1 b)))","(*.f64 (neg.f64 (fma.f64 a (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) b))) c)","(* c (- (* c (+ (* -2 (/ (* (pow a 2) c) (pow b 5))) (* -1 (/ a (pow b 3))))) (/ 1 b)))","(*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 (neg.f64 a) (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal -1 binary64) b)) c)","(* c (- (* c (+ (* -1 (/ a (pow b 3))) (* c (+ (* -2 (/ (pow a 2) (pow b 5))) (* -1/4 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (* a b))))))) (/ 1 b)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) (/.f64 c a)) (/.f64 (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 20 binary64)) b) (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (pow.f64 b #s(literal 5 binary64)))) c (/.f64 (neg.f64 a) (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal -1 binary64) b)) c)","(+ (* -2 (/ c b)) (/ b a))","(fma.f64 (/.f64 c b) #s(literal -2 binary64) (/.f64 b a))","(+ (* c (- (* -2 (/ (* a c) (pow b 3))) (* 2 (/ 1 b)))) (/ b a))","(fma.f64 (*.f64 #s(literal -2 binary64) (fma.f64 a (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) b))) c (/.f64 b a))","(+ (* c (- (* c (+ (* -4 (/ (* (pow a 2) c) (pow b 5))) (* -2 (/ a (pow b 3))))) (* 2 (/ 1 b)))) (/ b a))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 a #s(literal -4 binary64)) a) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (*.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) #s(literal -2 binary64))) c (/.f64 #s(literal -2 binary64) b)) c (/.f64 b a))","(+ b (* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3))))))","(fma.f64 (*.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 a b))) c b)","(+ b (* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c b)","(* c (+ (* -2 (/ a b)) (* -2 (/ (* (pow a 2) c) (pow b 3)))))","(*.f64 (*.f64 #s(literal -2 binary64) (fma.f64 (*.f64 a a) (/.f64 c (pow.f64 b #s(literal 3 binary64))) (/.f64 a b))) c)","(* c (+ (* -2 (/ a b)) (* c (+ (* -4 (/ (* (pow a 3) c) (pow b 5))) (* -2 (/ (pow a 2) (pow b 3)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c)","(* c (+ (* -2 (/ a b)) (* c (+ (* -2 (/ (pow a 2) (pow b 3))) (* c (+ (* -4 (/ (pow a 3) (pow b 5))) (* -1/2 (/ (* c (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) b))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) #s(literal 20 binary64)) b) (/.f64 (*.f64 #s(literal -4 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 b #s(literal 5 binary64)))) c (/.f64 (*.f64 (*.f64 #s(literal -2 binary64) a) a) (pow.f64 b #s(literal 3 binary64)))) c (*.f64 (/.f64 a b) #s(literal -2 binary64))) c)","(+ (* -1 (/ c b)) (/ b a))","(-.f64 (/.f64 b a) (/.f64 c b))","(+ (* c (- (* -2 (* c (+ (* -1/2 (/ a (pow b 3))) (/ a (pow b 3))))) (/ 1 b))) (/ b a))","(fma.f64 (fma.f64 (/.f64 (neg.f64 a) (pow.f64 b #s(literal 3 binary64))) c (/.f64 #s(literal -1 binary64) b)) c (/.f64 b a))","(+ (* c (- (* c (+ (* -2 (* c (+ (* -1 (/ (* a (+ (* -1/2 (/ a (pow b 3))) (/ a (pow b 3)))) (pow b 2))) (+ (* -1 (/ (pow a 2) (pow b 5))) (* 1/8 (/ (* b (+ (* 4 (/ (pow a 4) (pow b 6))) (* 16 (/ (pow a 4) (pow b 6))))) (pow a 2))))))) (* -2 (+ (* -1/2 (/ a (pow b 3))) (/ a (pow b 3)))))) (/ 1 b))) (/ b a))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -2 binary64) c) (fma.f64 (neg.f64 a) (*.f64 (/.f64 #s(literal 1/2 binary64) b) (/.f64 (/.f64 a (pow.f64 b #s(literal 3 binary64))) b)) (fma.f64 (*.f64 #s(literal 1/8 binary64) b) (*.f64 (/.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 b #s(literal 6 binary64))) a) (/.f64 #s(literal 20 binary64) a)) (/.f64 (*.f64 (neg.f64 a) a) (pow.f64 b #s(literal 5 binary64))))) (/.f64 (neg.f64 a) (pow.f64 b #s(literal 3 binary64)))) c (/.f64 #s(literal -1 binary64) b)) c (/.f64 b a))","(* -1 c)","(neg.f64 c)","(* c (+ (* -1 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -4))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 (neg.f64 b) a) c)) c)","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ 1 (* a c))) (sqrt -4))) (/ b (* a c))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 (neg.f64 b) a) c))) c)","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ 1 (* a c))) (sqrt -4)))) (/ b (* a c))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (/.f64 (neg.f64 b) a) c)))) c)","(* c (+ (* -1/2 (/ b (* a c))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 (/.f64 (/.f64 b a) c) #s(literal -1/2 binary64))) c)","(* c (+ (* -1/2 (/ b (* a c))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/4 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 (/.f64 (/.f64 b a) c) #s(literal -1/2 binary64)))) c)","(* c (+ (* -1/2 (/ b (* a c))) (+ (* -1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (sqrt -4)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/4 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 #s(literal -4 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 (/.f64 (/.f64 b a) c) #s(literal -1/2 binary64))))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ 1 (* a c))) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ 1 (* a c))) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ 1 (* a c))) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 7 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -4 binary64)))))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b 6) (pow (sqrt -4) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)))))) c)","(* c (+ (* -1 (/ b c)) (* (sqrt (/ a c)) (sqrt -4))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (neg.f64 b) c)) c)","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4))) (/ b c)))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (neg.f64 b) c))) c)","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b 4) (pow (sqrt -4) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b 2) (sqrt -4)))) (* (sqrt (/ a c)) (sqrt -4)))) (/ b c)))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b #s(literal 4 binary64)) (*.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal -4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) (pow.f64 c #s(literal 3 binary64)))) (/.f64 (*.f64 b b) (sqrt.f64 #s(literal -4 binary64)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -4 binary64)) (/.f64 (neg.f64 b) c)))) c)","(- (+ (* -2 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* -1 (/ (+ (* -1 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3))))) (pow c 2)))) (* 2 (/ b (* a (pow (sqrt -4) 2)))))","(fma.f64 (/.f64 #s(literal -1 binary64) c) (/.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) (/.f64 b #s(literal -4 binary64)))) c) (fma.f64 (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64))) #s(literal -2 binary64) (*.f64 #s(literal 1/2 binary64) (/.f64 b a))))","(- (+ (* -2 (* (sqrt (/ c a)) (/ 1 (sqrt -4)))) (* -1 (/ (+ (* -1 (/ (* (pow b 3) (pow c 2)) (* (pow a 2) (pow (sqrt -4) 4)))) (* (sqrt (/ c a)) (/ (* b (+ (* -1 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 2 (* (sqrt (/ (pow c 3) (pow a 3))) (/ (pow b 2) (pow (sqrt -4) 3)))))) (sqrt -4)))) (pow c 3)))) (+ (* -1 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (pow (sqrt -4) 3)))) (+ (* 2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b 2) (pow (sqrt -4) 3)))) (* 2 (/ b (* a (pow (sqrt -4) 2)))))))","(fma.f64 (/.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -4 binary64))) #s(literal -2 binary64) (-.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c a)) b) (/.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (/.f64 b (sqrt.f64 #s(literal -4 binary64))) (/.f64 b #s(literal -4 binary64)))) (sqrt.f64 #s(literal -4 binary64))) (*.f64 (neg.f64 (pow.f64 b #s(literal 3 binary64))) (*.f64 (/.f64 c (pow.f64 (sqrt.f64 #s(literal -4 binary64)) #s(literal 4 binary64))) (/.f64 c (*.f64 a a))))) (neg.f64 (pow.f64 c #s(literal 3 binary64)))) (fma.f64 (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -4 binary64))) (/.f64 (*.f64 b b) #s(literal -4 binary64))) #s(literal 1 binary64) (*.f64 (/.f64 b a) #s(literal -1/2 binary64)))))","(* c (+ (* -4 a) (/ (pow b 2) c)))","(*.f64 (fma.f64 a #s(literal -4 binary64) (/.f64 (*.f64 b b) c)) c)","(* -1 (* c (+ (* 2 (* (sqrt (/ 1 (* a c))) (sqrt -1))) (/ b (* a c)))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (/.f64 (/.f64 b a) c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1)))) (/ b a)) c)) (* 2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (/.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b) a)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (/ b a)) c)) (* 2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (/.f64 (-.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b b))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c)) (/.f64 b a)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* 1/2 (/ b (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (/.f64 #s(literal 1/2 binary64) c) (/.f64 b a) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1/2 (/ b a)) (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b b))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (/.f64 b a) #s(literal -1/2 binary64))) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ (+ (* -1/128 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b 4) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) c)) (* -1/2 (/ b a))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (/.f64 b a) #s(literal -1/2 binary64) (/.f64 (fma.f64 (*.f64 #s(literal -1/128 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b b))) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b) b)) #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))))) (neg.f64 c))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ 1 (* a c))) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b) b)) #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c)))))) (neg.f64 c))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 7) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ 1 (* a c))) (sqrt -1))))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 7 binary64))) (pow.f64 c #s(literal 7 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b) b)) #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))))))) (neg.f64 c))","(* -1 (* c (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b) b)) #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)))) (neg.f64 c))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b) b)) #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c))))) (neg.f64 c))","(* -1 (* c (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b 4) (sqrt -1)))) (+ (* 1/512 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b 6) (sqrt -1)))) (+ (* 1/4 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b 2) (sqrt -1)))) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 c #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 1/512 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 a #s(literal 5 binary64))) (pow.f64 c #s(literal 7 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) (pow.f64 c #s(literal 3 binary64)))) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b) b)) #s(literal 1/4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)))))) (neg.f64 c))","(* -1 (* c (+ (* 2 (* (sqrt (/ a c)) (sqrt -1))) (/ b c))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (/.f64 b c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1/4 (* (sqrt (/ 1 (* a c))) (* (pow b 2) (sqrt -1)))) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (/.f64 (fma.f64 (*.f64 #s(literal -1/4 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 b b))) (sqrt.f64 #s(literal -1 binary64)) (neg.f64 b)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/64 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b 4) (sqrt -1)))) (* 1/4 (* (sqrt (/ c a)) (* (pow b 2) (sqrt -1))))) c)) b) c)) (* 2 (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 a c)) (/.f64 (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (*.f64 b b))) (sqrt.f64 #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal -1/64 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (pow.f64 b #s(literal 4 binary64)))) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c)) #s(literal -1 binary64) b) c)) (neg.f64 c))","(+ (* 1/2 (/ b a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (*.f64 #s(literal 1/2 binary64) (/.f64 b a)))","(+ (* -1 (/ (- (+ (* -1/4 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ c (pow a 3))) (* (pow b 2) (sqrt -1))))) (* 1/2 (/ (* b c) a))) c)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (sqrt.f64 #s(literal -1 binary64))) (*.f64 b b)) #s(literal -1/8 binary64) (*.f64 (*.f64 b (/.f64 c a)) #s(literal -1/2 binary64))) (neg.f64 c)))","(+ (* -1 (/ (- (* -1 (/ (- (+ (* 1/16 (/ (* (pow b 3) c) (pow a 2))) (* 1/2 (* (sqrt (/ 1 (* a c))) (* b (* (sqrt -1) (+ (* -1/4 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1)))))))))) (+ (* -1/4 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ (pow c 3) (pow a 3))) (* (pow b 2) (sqrt -1)))))) c)) (* 1/2 (/ (* b c) a))) c)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c)))) (*.f64 b (sqrt.f64 #s(literal -1 binary64)))) (*.f64 (*.f64 (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b) b)) #s(literal -1/8 binary64)) (fma.f64 (*.f64 #s(literal 1/16 binary64) (pow.f64 b #s(literal 3 binary64))) (/.f64 c (*.f64 a a)) (*.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) b) b)) (sqrt.f64 (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))))))) c) #s(literal -1 binary64) (*.f64 (*.f64 b (/.f64 c a)) #s(literal -1/2 binary64))) (neg.f64 c)))","(* -1 (* c (+ (* -1 (/ (pow b 2) c)) (* 4 a))))","(*.f64 (fma.f64 #s(literal 4 binary64) a (/.f64 (*.f64 (neg.f64 b) b) c)) (neg.f64 c))"]],"stop":[["iter limit",1],["node limit",1]],"time":289.908935546875,"type":"simplify"},{"count":[[19,1125]],"egraph":[[0,8621,252,0.069552477],[2,2031,264,0.031853034],[1,236,264,0.00644618],[0,56,290,0.001765332],[0,37,297,0.000336602]],"inputs":[["(-.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) (/.f64 b a))","(/.f64 (-.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) (/.f64 b a)) #s(literal 2 binary64))","(/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a)","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 b a))","(/.f64 b a)","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 b (neg.f64 c))) (*.f64 b b))","(-.f64 #s(literal 0 binary64) (*.f64 b (neg.f64 c)))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 (-.f64 #s(literal 0 binary64) (*.f64 b (neg.f64 c))) (*.f64 b b)))","(*.f64 b (neg.f64 c))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))","(/.f64 #s(literal 1/2 binary64) a)","(-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b)","(/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal 1/2 binary64) a))","(-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))","(*.f64 b b)","#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))","(neg.f64 c)"]],"memory":[[-851504,76852944]],"outputs":[["(*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)) (pow.f64 a #s(literal -1 binary64))) (/.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))","(*.f64 (/.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a) (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))","(*.f64 (/.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","(*.f64 (/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) (*.f64 a a)) (pow.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))","(*.f64 (/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 (/.f64 b a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a (neg.f64 (*.f64 b a))) (pow.f64 a #s(literal -2 binary64)))","(*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)) (/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) (*.f64 a a))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 (/.f64 b a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))) (/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 a a) (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a (neg.f64 (*.f64 b a)))) #s(literal -1 binary64))","(pow.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a (neg.f64 (*.f64 b a))) a)) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 (/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) (*.f64 a a)))) (neg.f64 (neg.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 (/.f64 b a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a (neg.f64 (*.f64 b a))))) (neg.f64 (neg.f64 (*.f64 a a))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (-.f64 (/.f64 a b) (*.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (/.f64 a b))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 a)) (*.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (neg.f64 b)))) (neg.f64 (*.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (neg.f64 a))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) b))) (neg.f64 (*.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) a)))","(/.f64 (neg.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (/.f64 a b)) (*.f64 (neg.f64 a) #s(literal 1 binary64)))) (neg.f64 (*.f64 (neg.f64 a) (/.f64 a b))))","(/.f64 (neg.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (neg.f64 a)) (*.f64 (neg.f64 a) (neg.f64 b)))) (neg.f64 (*.f64 a a)))","(/.f64 (neg.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) a) (*.f64 (neg.f64 a) b))) (neg.f64 (*.f64 (neg.f64 a) a)))","(/.f64 (neg.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 a b)) (*.f64 a #s(literal 1 binary64)))) (neg.f64 (*.f64 a (/.f64 a b))))","(/.f64 (neg.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (neg.f64 a)) (*.f64 a (neg.f64 b)))) (neg.f64 (*.f64 a (neg.f64 a))))","(/.f64 (neg.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (neg.f64 b))) (neg.f64 (neg.f64 a)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))) (*.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)) (pow.f64 (/.f64 b a) #s(literal 2 binary64)))) (*.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal -3 binary64)) (fma.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 (/.f64 b a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))))) (*.f64 (fma.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 (/.f64 b a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))) (pow.f64 (/.f64 b a) #s(literal 3 binary64)))) (*.f64 (fma.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 (/.f64 b a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))) (fma.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 (/.f64 b a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))))))","(/.f64 (-.f64 (*.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) (*.f64 a a)) (*.f64 (*.f64 a a) (*.f64 b a))) (*.f64 (*.f64 a a) (*.f64 a a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (neg.f64 (neg.f64 a))) (*.f64 (neg.f64 (neg.f64 a)) (neg.f64 (neg.f64 b)))) (*.f64 (neg.f64 (neg.f64 a)) (neg.f64 (neg.f64 a))))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) a) (*.f64 (neg.f64 (neg.f64 a)) (*.f64 b #s(literal 1 binary64)))) (*.f64 (neg.f64 (neg.f64 a)) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (neg.f64 (/.f64 a b))) (*.f64 (neg.f64 (neg.f64 a)) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 a)) (neg.f64 (/.f64 a b))))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (/.f64 (/.f64 a b) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 a)) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 a)) (/.f64 (/.f64 a b) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (/.f64 a b)) (*.f64 (neg.f64 (neg.f64 a)) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 a)) (/.f64 a b)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (neg.f64 a)) (*.f64 (neg.f64 (neg.f64 a)) (neg.f64 b))) (*.f64 (neg.f64 (neg.f64 a)) (neg.f64 a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) a) (*.f64 (neg.f64 (neg.f64 a)) b)) (*.f64 (neg.f64 (neg.f64 a)) a))","(/.f64 (-.f64 (*.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 1 binary64)) (neg.f64 (neg.f64 a))) (*.f64 a (neg.f64 (neg.f64 b)))) (*.f64 a (neg.f64 (neg.f64 a))))","(/.f64 (-.f64 (*.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 1 binary64)) a) (*.f64 a (*.f64 b #s(literal 1 binary64)))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 1 binary64)) (neg.f64 (/.f64 a b))) (*.f64 a #s(literal -1 binary64))) (*.f64 a (neg.f64 (/.f64 a b))))","(/.f64 (-.f64 (*.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 1 binary64)) (/.f64 (/.f64 a b) #s(literal 1 binary64))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 (/.f64 a b) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 1 binary64)) (/.f64 a b)) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 a b)))","(/.f64 (-.f64 (*.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 1 binary64)) (neg.f64 a)) (*.f64 a (neg.f64 b))) (*.f64 a (neg.f64 a)))","(/.f64 (-.f64 (*.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 1 binary64)) a) (*.f64 b a)) (*.f64 a a))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 a))) (*.f64 (neg.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (neg.f64 (neg.f64 b)))) (*.f64 (neg.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (neg.f64 (neg.f64 a))))","(/.f64 (-.f64 (neg.f64 a) (*.f64 (neg.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (*.f64 b #s(literal 1 binary64)))) (*.f64 (neg.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) a))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a b))) (*.f64 (neg.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) #s(literal -1 binary64))) (*.f64 (neg.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (neg.f64 (/.f64 a b))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 (/.f64 a b) #s(literal 1 binary64))) (*.f64 (neg.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) #s(literal 1 binary64))) (*.f64 (neg.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (/.f64 (/.f64 a b) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (/.f64 a b)) (*.f64 (neg.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) #s(literal 1 binary64))) (*.f64 (neg.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (/.f64 a b)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 a)) (*.f64 (neg.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (neg.f64 b))) (*.f64 (neg.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (neg.f64 a)))","(/.f64 (-.f64 (neg.f64 a) (*.f64 (neg.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) b)) (*.f64 (neg.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 a))) (*.f64 (/.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal 1 binary64)) (neg.f64 (neg.f64 b)))) (*.f64 (/.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal 1 binary64)) (neg.f64 (neg.f64 a))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal 1 binary64)) (*.f64 b #s(literal 1 binary64)))) (*.f64 (/.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal 1 binary64)) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 a b))) (*.f64 (/.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (/.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal 1 binary64)) (neg.f64 (/.f64 a b))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (/.f64 a b) #s(literal 1 binary64))) (*.f64 (/.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal 1 binary64)) (/.f64 (/.f64 a b) #s(literal 1 binary64))))","(/.f64 (-.f64 (/.f64 a b) (*.f64 (/.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (/.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal 1 binary64)) (/.f64 a b)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 a)) (*.f64 (/.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal 1 binary64)) (neg.f64 b))) (*.f64 (/.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal 1 binary64)) (neg.f64 a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal 1 binary64)) b)) (*.f64 (/.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal 1 binary64)) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 a))) (*.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (neg.f64 (neg.f64 b)))) (*.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (neg.f64 (neg.f64 a))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (*.f64 b #s(literal 1 binary64)))) (*.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) a))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (/.f64 a b))) (*.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal -1 binary64))) (*.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (neg.f64 (/.f64 a b))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (/.f64 a b) #s(literal 1 binary64))) (*.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal 1 binary64))) (*.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (/.f64 (/.f64 a b) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (neg.f64 (neg.f64 a))) (*.f64 (neg.f64 a) (neg.f64 (neg.f64 b)))) (*.f64 (neg.f64 a) (neg.f64 (neg.f64 a))))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) a) (*.f64 (neg.f64 a) (*.f64 b #s(literal 1 binary64)))) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (neg.f64 (/.f64 a b))) (*.f64 (neg.f64 a) #s(literal -1 binary64))) (*.f64 (neg.f64 a) (neg.f64 (/.f64 a b))))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (/.f64 (/.f64 a b) #s(literal 1 binary64))) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 (/.f64 a b) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (neg.f64 (neg.f64 a))) (*.f64 a (neg.f64 (neg.f64 b)))) (*.f64 a (neg.f64 (neg.f64 a))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) (*.f64 a (*.f64 b #s(literal 1 binary64)))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (neg.f64 (/.f64 a b))) (*.f64 a #s(literal -1 binary64))) (*.f64 a (neg.f64 (/.f64 a b))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 (/.f64 a b) #s(literal 1 binary64))) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 (/.f64 a b) #s(literal 1 binary64))))","(/.f64 (-.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (neg.f64 (neg.f64 b))) (neg.f64 (neg.f64 a)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 1 binary64)) (*.f64 b #s(literal 1 binary64))) a)","(/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (*.f64 b #s(literal 1 binary64))) a)","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 1 binary64)) b) a)","(/.f64 (/.f64 (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a (neg.f64 (*.f64 b a))) a) a)","(/.f64 (neg.f64 (/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) (*.f64 a a))) (neg.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (neg.f64 b)) a)))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) (*.f64 a a))) (neg.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))))","(/.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (-.f64 (pow.f64 (/.f64 b a) #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) (/.f64 (neg.f64 b) a))))))","(/.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 (/.f64 b a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))))))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a (neg.f64 (*.f64 b a)))) (neg.f64 (*.f64 a a)))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)) (neg.f64 a))","(/.f64 (neg.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b))) (neg.f64 (*.f64 a (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 a (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))))","(/.f64 (-.f64 (/.f64 a b) (*.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal 1 binary64))) (*.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (/.f64 a b)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 a)) (*.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (neg.f64 b))) (*.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (neg.f64 a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) b)) (*.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (/.f64 a b)) (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) (/.f64 a b)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (neg.f64 a)) (*.f64 (neg.f64 a) (neg.f64 b))) (*.f64 a a))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) a) (*.f64 (neg.f64 a) b)) (*.f64 (neg.f64 a) a))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 a b)) (*.f64 a #s(literal 1 binary64))) (*.f64 a (/.f64 a b)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (neg.f64 a)) (*.f64 a (neg.f64 b))) (*.f64 a (neg.f64 a)))","(/.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (neg.f64 b)) (neg.f64 a))","(/.f64 (/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) (*.f64 a a)) (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (neg.f64 b)) a))","(/.f64 (/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) (*.f64 a a)) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))","(/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) (*.f64 a (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)) (/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) (*.f64 a a)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 (/.f64 b a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))) (/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 a a) (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a (neg.f64 (*.f64 b a))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)) (/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) (*.f64 a a))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 (/.f64 b a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))) (/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a a) (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a (neg.f64 (*.f64 b a)))))","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))","(/.f64 (/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64))) (fma.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (-.f64 (pow.f64 (/.f64 b a) #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) (/.f64 (neg.f64 b) a)))))","(/.f64 (/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64))) (fma.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 (/.f64 b a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))))","(/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 a (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","(/.f64 (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a (neg.f64 (*.f64 b a))) (*.f64 a a))","(/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a)","(fma.f64 #s(literal -1 binary64) (/.f64 b a) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (/.f64 (neg.f64 b) a))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 (neg.f64 b) a))","(fma.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) (/.f64 (neg.f64 b) a))","(fma.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (pow.f64 (neg.f64 a) #s(literal -1 binary64)) (/.f64 (neg.f64 b) a))","(fma.f64 (neg.f64 b) (pow.f64 a #s(literal -1 binary64)) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a))","(fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 a #s(literal -1 binary64)) (/.f64 (neg.f64 b) a))","(fma.f64 b (neg.f64 (pow.f64 a #s(literal -1 binary64))) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a))","(-.f64 (/.f64 (*.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (neg.f64 b)) a)) (/.f64 (pow.f64 (/.f64 b a) #s(literal 2 binary64)) (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (neg.f64 b)) a)))","(-.f64 (/.f64 (/.f64 a b) (*.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (/.f64 a b))) (/.f64 (*.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal 1 binary64)) (*.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (/.f64 a b))))","(-.f64 (/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 a)) (*.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (neg.f64 a))) (/.f64 (*.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (neg.f64 b)) (*.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (neg.f64 a))))","(-.f64 (/.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) a)) (/.f64 (*.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) b) (*.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) a)))","(-.f64 (/.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (/.f64 a b)) (*.f64 (neg.f64 a) (/.f64 a b))) (/.f64 (*.f64 (neg.f64 a) #s(literal 1 binary64)) (*.f64 (neg.f64 a) (/.f64 a b))))","(-.f64 (/.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (neg.f64 a)) (*.f64 a a)) (/.f64 (*.f64 (neg.f64 a) (neg.f64 b)) (*.f64 a a)))","(-.f64 (/.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) a) (*.f64 (neg.f64 a) a)) (/.f64 (*.f64 (neg.f64 a) b) (*.f64 (neg.f64 a) a)))","(-.f64 (/.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 a b)) (*.f64 a (/.f64 a b))) (/.f64 (*.f64 a #s(literal 1 binary64)) (*.f64 a (/.f64 a b))))","(-.f64 (/.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (neg.f64 a)) (*.f64 a (neg.f64 a))) (/.f64 (*.f64 a (neg.f64 b)) (*.f64 a (neg.f64 a))))","(-.f64 (/.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 a (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))) (/.f64 (*.f64 b b) (*.f64 a (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))))","(-.f64 (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (*.f64 a (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 a (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))))","(-.f64 (/.f64 (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) a) (/.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) a))","(-.f64 (/.f64 (/.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)) a) (/.f64 (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)) a))","(-.f64 (/.f64 (*.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))) (/.f64 (pow.f64 (/.f64 b a) #s(literal 2 binary64)) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))))","(-.f64 (/.f64 (pow.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal -3 binary64)) (fma.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 (/.f64 b a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))))) (/.f64 (pow.f64 (/.f64 b a) #s(literal 3 binary64)) (fma.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 (/.f64 b a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))))))","(-.f64 (*.f64 (/.f64 a a) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) (*.f64 (/.f64 a a) (/.f64 b a)))","(-.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) (/.f64 b a))","(+.f64 (/.f64 (neg.f64 b) a) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a))","(+.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) (/.f64 (neg.f64 b) a))","(*.f64 (/.f64 (/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) (*.f64 a a)) (pow.f64 a #s(literal -1 binary64))) (/.f64 #s(literal 1/2 binary64) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))","(*.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(literal 2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)) #s(literal 2 binary64)) (/.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))))","(*.f64 (/.f64 (fma.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 (/.f64 b a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))) #s(literal 2 binary64)) (/.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a) (fma.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 (/.f64 b a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))))))","(*.f64 (/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) #s(literal 2 binary64)) (/.f64 (pow.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) a) (/.f64 (pow.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) a) (/.f64 (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal 2 binary64) (/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) (*.f64 a a))) #s(literal -1 binary64)) (pow.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal 2 binary64) (/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 (/.f64 b a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal 2 binary64) (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a (neg.f64 (*.f64 b a)))) #s(literal -1 binary64)) (pow.f64 a #s(literal -2 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal 2 binary64) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)) #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a (neg.f64 (*.f64 b a))) a) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(literal 2 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (/.f64 #s(literal 1/2 binary64) a)))","(*.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (neg.f64 a)) #s(literal -1/2 binary64))","(*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))","(*.f64 #s(literal 1/2 binary64) (pow.f64 (pow.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a))","(*.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a) #s(literal 1/2 binary64))","(pow.f64 (/.f64 a (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(literal 1/2 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 #s(literal 2 binary64) (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 #s(literal 2 binary64) (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) (*.f64 a a)) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64))) #s(literal 1/2 binary64))) (neg.f64 (fma.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 (/.f64 b a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a (neg.f64 (*.f64 b a))) #s(literal 1/2 binary64))) (neg.f64 (*.f64 a a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(literal 1 binary64))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(literal -1/2 binary64))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)))) (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b a)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a) (*.f64 #s(literal 1/2 binary64) (/.f64 b a)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal -3 binary64)) #s(literal 1/8 binary64)) (*.f64 (pow.f64 (/.f64 b a) #s(literal 3 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (+.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b a)) #s(literal 2 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 #s(literal 1/2 binary64) (/.f64 b a)))))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(literal 1/2 binary64)))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (neg.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (neg.f64 a)))) #s(literal -2 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)))) (neg.f64 (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 (neg.f64 a) (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))))","(/.f64 (neg.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 b a)))) #s(literal -4 binary64))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)))) (neg.f64 (*.f64 a (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 a (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) a) (*.f64 #s(literal -2 binary64) (/.f64 b #s(literal 2 binary64)))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) (/.f64 (neg.f64 b) a))) #s(literal 4 binary64))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) (*.f64 #s(literal 2 binary64) (/.f64 a b))) #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (/.f64 a b))))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) (/.f64 #s(literal 2 binary64) (/.f64 b a))) #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) (/.f64 #s(literal 2 binary64) (/.f64 b a))))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal -2 binary64) (neg.f64 b))) (*.f64 #s(literal -2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) (/.f64 b a))) #s(literal -4 binary64))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal -2 binary64) b)) (*.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (/.f64 b #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) a))","(/.f64 (-.f64 #s(literal -2 binary64) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (/.f64 (neg.f64 b) a))) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) #s(literal -2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) (/.f64 a b))) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (*.f64 #s(literal 2 binary64) (/.f64 a b))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (/.f64 b a))) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (/.f64 #s(literal 2 binary64) (/.f64 b a))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (neg.f64 b))) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (/.f64 b a))) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) b)) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) (/.f64 b #s(literal 2 binary64)))) (*.f64 (/.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) a))","(/.f64 (-.f64 #s(literal -2 binary64) (*.f64 (/.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) (/.f64 (neg.f64 b) a))) (*.f64 (/.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) #s(literal -2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) (/.f64 a b))) (*.f64 (/.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) (*.f64 #s(literal 2 binary64) (/.f64 a b))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (/.f64 b a))) (*.f64 (/.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) (/.f64 #s(literal 2 binary64) (/.f64 b a))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 (/.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) (neg.f64 b))) (*.f64 (/.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (/.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) (/.f64 b a))) (*.f64 (/.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (/.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) b)) (*.f64 (/.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 b #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal -2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (neg.f64 b) a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (*.f64 #s(literal 2 binary64) (/.f64 a b))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) (/.f64 a b))))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (/.f64 #s(literal 2 binary64) (/.f64 b a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 #s(literal 2 binary64) (/.f64 b a))))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 b))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 b a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) a) (*.f64 #s(literal 2 binary64) (/.f64 b #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) #s(literal -2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 (neg.f64 b) a))) #s(literal -4 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) (*.f64 #s(literal 2 binary64) (/.f64 a b))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) (/.f64 a b))))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) (/.f64 #s(literal 2 binary64) (/.f64 b a))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 2 binary64) (/.f64 b a))))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal 2 binary64) (neg.f64 b))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal 2 binary64) b)) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 b #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal -2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (neg.f64 b) a))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal -2 binary64)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (*.f64 #s(literal 2 binary64) (/.f64 a b))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 2 binary64) (/.f64 a b))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 2 binary64) (/.f64 b a))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(literal 2 binary64) (/.f64 b a))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 b))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 b a))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) b)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (neg.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) (/.f64 (neg.f64 b) a)) #s(literal -2 binary64))","(/.f64 (*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)) (neg.f64 a))","(/.f64 (*.f64 (/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) (*.f64 a a)) #s(literal 1/2 binary64)) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))","(/.f64 (*.f64 (/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64))) #s(literal 1/2 binary64)) (fma.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 (/.f64 b a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))))","(/.f64 (*.f64 (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a (neg.f64 (*.f64 b a))) #s(literal 1/2 binary64)) (*.f64 a a))","(/.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(literal -1/2 binary64)) (neg.f64 a))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b))) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))","(/.f64 (-.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b a)) #s(literal 2 binary64))) (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a) (*.f64 #s(literal 1/2 binary64) (/.f64 b a))))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal -3 binary64)) #s(literal 1/8 binary64)) (*.f64 (pow.f64 (/.f64 b a) #s(literal 3 binary64)) #s(literal 1/8 binary64))) (+.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b a)) #s(literal 2 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 #s(literal 1/2 binary64) (/.f64 b a))))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) (*.f64 a a))) (neg.f64 (*.f64 #s(literal 2 binary64) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))))","(/.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (neg.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 (/.f64 b a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))))))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a (neg.f64 (*.f64 b a)))) (neg.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a))))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(literal 1/2 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (neg.f64 a))) #s(literal 2 binary64))","(/.f64 (*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) #s(literal 1 binary64)) (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) #s(literal -1/2 binary64)) (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) #s(literal 1/2 binary64)) (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64)) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64)) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b))) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b))) (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (neg.f64 a) (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b))) (*.f64 a (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 a (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 b a))) #s(literal 4 binary64))","(/.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (neg.f64 b)) (*.f64 #s(literal -2 binary64) a))","(/.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(literal 1/2 binary64)) a)","(/.f64 (/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) (*.f64 a a)) (*.f64 #s(literal 2 binary64) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(literal 1/2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 #s(literal 2 binary64) (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 2 binary64) (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 #s(literal 2 binary64) (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a)))))","(/.f64 #s(literal 1 binary64) (/.f64 a (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 2 binary64) (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a)))","(/.f64 (/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64))) (*.f64 #s(literal 2 binary64) (fma.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 (/.f64 b a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))))))","(/.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (neg.f64 a)) #s(literal -2 binary64))","(/.f64 (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a (neg.f64 (*.f64 b a))) (*.f64 #s(literal 2 binary64) (*.f64 a a)))","(/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a) #s(literal 2 binary64))","(neg.f64 (/.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a) #s(literal -2 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal -2 binary64)) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal -2 binary64)) (neg.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b a))))","(fma.f64 (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 1/4 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 1/4 binary64)) a) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 1/4 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 1/4 binary64)) a) (neg.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b a))))","(fma.f64 (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 1/4 binary64)) a) (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 1/4 binary64)) #s(literal 2 binary64)) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 1/4 binary64)) a) (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 1/4 binary64)) #s(literal 2 binary64)) (neg.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b a))))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 2 binary64)) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 2 binary64)) (neg.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b a))))","(fma.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) (neg.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b a))))","(fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (neg.f64 a)) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (neg.f64 a)) (neg.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b a))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) (neg.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b a))))","(fma.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) #s(literal 1/2 binary64) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) #s(literal 1/2 binary64) (neg.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b a))))","(fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b a))))","(-.f64 (/.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a) (*.f64 #s(literal 1/2 binary64) (/.f64 b a)))) (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b a)) #s(literal 2 binary64)) (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a) (*.f64 #s(literal 1/2 binary64) (/.f64 b a)))))","(-.f64 (/.f64 (*.f64 (pow.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal -3 binary64)) #s(literal 1/8 binary64)) (+.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b a)) #s(literal 2 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 #s(literal 1/2 binary64) (/.f64 b a)))))) (/.f64 (*.f64 (pow.f64 (/.f64 b a) #s(literal 3 binary64)) #s(literal 1/8 binary64)) (+.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b a)) #s(literal 2 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 #s(literal 1/2 binary64) (/.f64 b a)))))))","(-.f64 (/.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) #s(literal 2 binary64)) #s(literal 4 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) (/.f64 b a)) #s(literal 4 binary64)))","(-.f64 (/.f64 (*.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (*.f64 #s(literal 2 binary64) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))) (/.f64 (pow.f64 (/.f64 b a) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))))","(-.f64 (/.f64 (pow.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal -3 binary64)) (*.f64 #s(literal 2 binary64) (fma.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 (/.f64 b a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))))) (/.f64 (pow.f64 (/.f64 b a) #s(literal 3 binary64)) (*.f64 #s(literal 2 binary64) (fma.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 (/.f64 b a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))))))","(-.f64 (/.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) (*.f64 #s(literal 2 binary64) (*.f64 a a))) (/.f64 (*.f64 b a) (*.f64 #s(literal 2 binary64) (*.f64 a a))))","(-.f64 (/.f64 (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (*.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))) #s(literal 2 binary64)) (/.f64 (/.f64 (pow.f64 (/.f64 b a) #s(literal 2 binary64)) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))) #s(literal 2 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal -3 binary64)) (fma.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 (/.f64 b a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))))) #s(literal 2 binary64)) (/.f64 (/.f64 (pow.f64 (/.f64 b a) #s(literal 3 binary64)) (fma.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 (/.f64 b a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))))) #s(literal 2 binary64)))","(-.f64 (/.f64 (*.f64 (/.f64 a a) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) #s(literal 2 binary64)) (/.f64 (*.f64 (/.f64 a a) (/.f64 b a)) #s(literal 2 binary64)))","(-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 #s(literal 1/2 binary64) (/.f64 b a)))","(-.f64 #s(literal 0 binary64) (/.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a) #s(literal -2 binary64)))","(exp.f64 (*.f64 (log.f64 (/.f64 #s(literal 2 binary64) (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a))) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(+.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)))","(+.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) (neg.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b a))))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))","(*.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a))","(*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 1 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (neg.f64 (neg.f64 a)))","(/.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 1 binary64)) a)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","(/.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (neg.f64 a))","(/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)","(neg.f64 (/.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) a))","(neg.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (neg.f64 a)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 a)) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (neg.f64 a)))","(exp.f64 (*.f64 (log.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (sqrt.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","(*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 1/4 binary64)))","(pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 1 binary64))","(pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))","(fabs.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))","(exp.f64 (log.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 b a))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) b)","(*.f64 #s(literal 1 binary64) (/.f64 b a))","(*.f64 (neg.f64 b) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 b (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 a b) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 a b) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (neg.f64 b))) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 b #s(literal 1 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 b)) (neg.f64 (neg.f64 a)))","(/.f64 (*.f64 b #s(literal 1 binary64)) a)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 a b) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a b)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 a b))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a b) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 a b))","(/.f64 (neg.f64 b) (neg.f64 a))","(/.f64 b a)","(neg.f64 (/.f64 (neg.f64 b) a))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 a)) (/.f64 (neg.f64 b) a))","(exp.f64 (*.f64 (log.f64 (/.f64 a b)) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64))) (*.f64 b #s(literal -1 binary64))) (/.f64 (pow.f64 b #s(literal -2 binary64)) c))","(*.f64 (/.f64 (neg.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64))) (neg.f64 c)) (/.f64 (pow.f64 b #s(literal -2 binary64)) b))","(*.f64 (/.f64 (pow.f64 (*.f64 b c) #s(literal 3 binary64)) (*.f64 (*.f64 (neg.f64 c) b) (neg.f64 c))) (/.f64 (pow.f64 b #s(literal -2 binary64)) b))","(*.f64 (/.f64 (pow.f64 (*.f64 b c) #s(literal 3 binary64)) (*.f64 (*.f64 (neg.f64 c) b) b)) (/.f64 (pow.f64 b #s(literal -2 binary64)) (neg.f64 c)))","(*.f64 (/.f64 (pow.f64 (*.f64 b c) #s(literal 3 binary64)) (*.f64 c c)) (/.f64 (pow.f64 b #s(literal -2 binary64)) (*.f64 b b)))","(*.f64 (/.f64 (pow.f64 (*.f64 b c) #s(literal 3 binary64)) (*.f64 b b)) (/.f64 (pow.f64 b #s(literal -2 binary64)) (*.f64 c c)))","(*.f64 (/.f64 (pow.f64 (*.f64 b c) #s(literal 3 binary64)) (*.f64 b c)) (/.f64 (pow.f64 b #s(literal -2 binary64)) (*.f64 b c)))","(*.f64 (/.f64 (pow.f64 (*.f64 b c) #s(literal 3 binary64)) (*.f64 (neg.f64 c) b)) (/.f64 (pow.f64 b #s(literal -2 binary64)) (*.f64 (neg.f64 c) b)))","(*.f64 (/.f64 (pow.f64 (*.f64 b c) #s(literal 3 binary64)) (neg.f64 c)) (/.f64 (pow.f64 b #s(literal -2 binary64)) (*.f64 b (*.f64 (neg.f64 c) b))))","(*.f64 (/.f64 (*.f64 b #s(literal -1 binary64)) (neg.f64 b)) (/.f64 c b))","(*.f64 (/.f64 (*.f64 (neg.f64 b) #s(literal -1 binary64)) b) (/.f64 c b))","(*.f64 (/.f64 (neg.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 b #s(literal -2 binary64)) (*.f64 b c)))","(*.f64 (/.f64 (neg.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64))) (neg.f64 b)) (/.f64 (pow.f64 b #s(literal -2 binary64)) c))","(*.f64 (/.f64 (neg.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64))) b) (/.f64 (pow.f64 b #s(literal -2 binary64)) (neg.f64 c)))","(*.f64 (/.f64 (neg.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64))) b) (/.f64 (/.f64 #s(literal -1 binary64) (*.f64 b c)) b))","(*.f64 (/.f64 (pow.f64 (*.f64 b c) #s(literal 3 binary64)) b) (/.f64 (pow.f64 b #s(literal -2 binary64)) (*.f64 (neg.f64 c) (*.f64 (neg.f64 c) b))))","(*.f64 (/.f64 (pow.f64 (*.f64 b c) #s(literal 3 binary64)) b) (/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal -2 binary64)) b))","(*.f64 (/.f64 (neg.f64 (neg.f64 c)) b) (/.f64 b b))","(*.f64 (/.f64 (*.f64 b #s(literal -1 binary64)) b) (/.f64 c (neg.f64 b)))","(*.f64 (/.f64 (neg.f64 c) (neg.f64 b)) (/.f64 b b))","(*.f64 (/.f64 (*.f64 b #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 c (*.f64 b b)))","(*.f64 (/.f64 (neg.f64 c) #s(literal -1 binary64)) (/.f64 b (*.f64 b b)))","(*.f64 (/.f64 #s(literal -1 binary64) b) (/.f64 (*.f64 (neg.f64 c) b) b))","(*.f64 (/.f64 (neg.f64 b) #s(literal -1 binary64)) (/.f64 c (*.f64 b b)))","(*.f64 (/.f64 (neg.f64 b) b) (/.f64 c (neg.f64 b)))","(*.f64 (/.f64 (neg.f64 b) b) (/.f64 (neg.f64 c) b))","(*.f64 (/.f64 b #s(literal -1 binary64)) (/.f64 (neg.f64 c) (*.f64 b b)))","(*.f64 (/.f64 b (neg.f64 b)) (/.f64 (neg.f64 c) b))","(*.f64 (/.f64 c b) (/.f64 b b))","(*.f64 (pow.f64 (/.f64 (*.f64 b b) (neg.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (*.f64 b c)))","(*.f64 (pow.f64 (/.f64 (*.f64 b b) (pow.f64 (*.f64 b c) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (*.f64 (neg.f64 c) b) #s(literal -2 binary64)))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (/.f64 (*.f64 b c) b))","(*.f64 (/.f64 (neg.f64 c) b) (/.f64 (neg.f64 b) b))","(*.f64 (/.f64 (neg.f64 c) b) (/.f64 b (neg.f64 b)))","(*.f64 (/.f64 b b) (/.f64 (neg.f64 (neg.f64 c)) b))","(*.f64 (/.f64 b b) (/.f64 (neg.f64 c) (neg.f64 b)))","(*.f64 (/.f64 b b) (/.f64 c b))","(*.f64 (/.f64 (*.f64 b c) b) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 (pow.f64 (*.f64 b c) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 b #s(literal -2 binary64)) (*.f64 b c))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b) (/.f64 b b)))","(*.f64 (*.f64 b c) (pow.f64 b #s(literal -2 binary64)))","(*.f64 (*.f64 (neg.f64 c) b) (pow.f64 (*.f64 (neg.f64 b) b) #s(literal -1 binary64)))","(pow.f64 (/.f64 b (/.f64 (*.f64 b c) b)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (/.f64 b c) (/.f64 b b)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 b c) (/.f64 b b)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64))) (pow.f64 b #s(literal -2 binary64)))) (*.f64 b c))","(/.f64 (neg.f64 (*.f64 (pow.f64 (*.f64 b c) #s(literal 3 binary64)) (pow.f64 b #s(literal -2 binary64)))) (neg.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64))))","(/.f64 (neg.f64 (*.f64 (*.f64 b c) #s(literal 1 binary64))) (*.f64 (neg.f64 b) b))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (/.f64 c (neg.f64 b)) (/.f64 b b)) #s(literal 2 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (*.f64 (/.f64 c (neg.f64 b)) (/.f64 b b)))))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))))) (neg.f64 (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (*.f64 (/.f64 c (neg.f64 b)) (/.f64 b b)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 (/.f64 c (neg.f64 b)) (/.f64 b b)))))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (*.f64 b c) b))) (neg.f64 (neg.f64 b)))","(/.f64 (neg.f64 (*.f64 (neg.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (*.f64 (neg.f64 c) b) (*.f64 b b))))","(/.f64 (neg.f64 (*.f64 (pow.f64 (*.f64 b c) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (pow.f64 (*.f64 (*.f64 (neg.f64 c) b) b) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 b b)) (*.f64 (*.f64 b b) (*.f64 (neg.f64 c) b)))) (neg.f64 (pow.f64 b #s(literal 4 binary64))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64))) (pow.f64 b #s(literal -2 binary64))) (*.f64 (neg.f64 c) b))","(/.f64 (*.f64 (pow.f64 (*.f64 b c) #s(literal 3 binary64)) (pow.f64 b #s(literal -2 binary64))) (pow.f64 (*.f64 b c) #s(literal 2 binary64)))","(/.f64 (*.f64 (*.f64 b c) #s(literal 1 binary64)) (*.f64 b b))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (/.f64 c (neg.f64 b)) (/.f64 b b)) #s(literal 2 binary64))) (+.f64 #s(literal 0 binary64) (*.f64 (/.f64 c (neg.f64 b)) (/.f64 b b))))","(/.f64 (-.f64 #s(literal 0 binary64) (/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64)))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (*.f64 (/.f64 c (neg.f64 b)) (/.f64 b b)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 (/.f64 c (neg.f64 b)) (/.f64 b b))))))","(/.f64 (neg.f64 (/.f64 (*.f64 b c) b)) (neg.f64 b))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)))) (neg.f64 (*.f64 (*.f64 b b) (*.f64 (neg.f64 c) b))))","(/.f64 (*.f64 (neg.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (*.f64 (neg.f64 c) b) (*.f64 b b)))","(/.f64 (*.f64 (pow.f64 (*.f64 b c) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (*.f64 (*.f64 (neg.f64 c) b) b) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (*.f64 b b)) (*.f64 (*.f64 b b) (*.f64 (neg.f64 c) b))) (pow.f64 b #s(literal 4 binary64)))","(/.f64 (/.f64 (*.f64 b c) b) b)","(/.f64 (neg.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64))) (*.f64 (*.f64 b b) (*.f64 (neg.f64 c) b)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b (/.f64 (*.f64 b c) b))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (/.f64 b c) (/.f64 b b)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 b c) (/.f64 b b))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (/.f64 b c) (/.f64 b b)))))","(/.f64 #s(literal 1 binary64) (/.f64 b (/.f64 (*.f64 b c) b)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (/.f64 b c) (/.f64 b b)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 b c) (/.f64 b b)))","(/.f64 (pow.f64 (*.f64 b c) #s(literal 3 binary64)) (pow.f64 (*.f64 b (*.f64 (neg.f64 c) b)) #s(literal 2 binary64)))","(/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3 binary64)) (neg.f64 (pow.f64 (*.f64 b (*.f64 (neg.f64 c) b)) #s(literal 2 binary64))))","(/.f64 (*.f64 b c) (neg.f64 (*.f64 (neg.f64 b) b)))","(/.f64 (*.f64 b c) (*.f64 b b))","(/.f64 (*.f64 (neg.f64 c) b) (neg.f64 (neg.f64 (*.f64 (neg.f64 b) b))))","(/.f64 (*.f64 (neg.f64 c) b) (*.f64 (neg.f64 b) b))","(neg.f64 (*.f64 (/.f64 c (neg.f64 b)) (/.f64 b b)))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (*.f64 (/.f64 c (neg.f64 b)) (/.f64 b b)))) (/.f64 (pow.f64 (*.f64 (/.f64 c (neg.f64 b)) (/.f64 b b)) #s(literal 2 binary64)) (+.f64 #s(literal 0 binary64) (*.f64 (/.f64 c (neg.f64 b)) (/.f64 b b)))))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (*.f64 (/.f64 c (neg.f64 b)) (/.f64 b b)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 (/.f64 c (neg.f64 b)) (/.f64 b b)))))) (/.f64 (/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3 binary64)) (pow.f64 b #s(literal 6 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (pow.f64 (*.f64 (/.f64 c (neg.f64 b)) (/.f64 b b)) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 (/.f64 c (neg.f64 b)) (/.f64 b b)))))))","(-.f64 (/.f64 (*.f64 #s(literal 0 binary64) (*.f64 b b)) (pow.f64 b #s(literal 4 binary64))) (/.f64 (*.f64 (*.f64 b b) (*.f64 (neg.f64 c) b)) (pow.f64 b #s(literal 4 binary64))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (*.f64 b b) (*.f64 (neg.f64 c) b))) (/.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)) (*.f64 (*.f64 b b) (*.f64 (neg.f64 c) b))))","(-.f64 (/.f64 #s(literal 0 binary64) (pow.f64 (*.f64 b (*.f64 (neg.f64 c) b)) #s(literal 2 binary64))) (/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3 binary64)) (pow.f64 (*.f64 b (*.f64 (neg.f64 c) b)) #s(literal 2 binary64))))","(-.f64 (/.f64 (/.f64 #s(literal 0 binary64) (*.f64 b c)) (neg.f64 (*.f64 (neg.f64 b) b))) (*.f64 (/.f64 c (neg.f64 b)) (/.f64 b b)))","(-.f64 (/.f64 (/.f64 #s(literal 0 binary64) (pow.f64 (*.f64 b c) #s(literal 2 binary64))) (neg.f64 (*.f64 (neg.f64 b) b))) (*.f64 (/.f64 c (neg.f64 b)) (/.f64 b b)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (*.f64 (neg.f64 b) b))) (*.f64 (/.f64 c (neg.f64 b)) (/.f64 b b)))","(-.f64 (/.f64 (/.f64 #s(literal 0 binary64) (*.f64 b c)) (*.f64 b b)) (*.f64 (/.f64 c (neg.f64 b)) (/.f64 b b)))","(-.f64 (/.f64 (/.f64 #s(literal 0 binary64) (pow.f64 (*.f64 b c) #s(literal 2 binary64))) (*.f64 b b)) (*.f64 (/.f64 c (neg.f64 b)) (/.f64 b b)))","(-.f64 #s(literal 0 binary64) (*.f64 (/.f64 c (neg.f64 b)) (/.f64 b b)))","(exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 b c) (/.f64 b b))) #s(literal -1 binary64)))","(+.f64 #s(literal 0 binary64) (*.f64 (/.f64 c b) (/.f64 b b)))","(*.f64 (*.f64 (neg.f64 b) #s(literal -1 binary64)) c)","(*.f64 (neg.f64 (neg.f64 c)) b)","(*.f64 (neg.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (*.f64 b c)))","(*.f64 #s(literal -1 binary64) (*.f64 (neg.f64 c) b))","(*.f64 (pow.f64 (*.f64 b c) #s(literal 3 binary64)) (pow.f64 (*.f64 (neg.f64 c) b) #s(literal -2 binary64)))","(*.f64 (neg.f64 b) (neg.f64 c))","(*.f64 (neg.f64 c) (neg.f64 b))","(*.f64 b (neg.f64 (neg.f64 c)))","(*.f64 b c)","(*.f64 c b)","(pow.f64 (/.f64 (*.f64 b c) (neg.f64 (neg.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)) (pow.f64 (*.f64 b c) #s(literal 3 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64))))) (*.f64 (neg.f64 c) b))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (pow.f64 (*.f64 b c) #s(literal 2 binary64))) (*.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)) (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3 binary64)))) (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 4 binary64)))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)))) (*.f64 b c))","(/.f64 (neg.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64))) (*.f64 (neg.f64 c) b))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 b c) (neg.f64 (neg.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)) (pow.f64 (*.f64 b c) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 b c) (neg.f64 (neg.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)) (pow.f64 (*.f64 b c) #s(literal 3 binary64))))","(/.f64 (pow.f64 (*.f64 b c) #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 b c)))))","(/.f64 (pow.f64 (*.f64 b c) #s(literal 3 binary64)) (neg.f64 (neg.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)))))","(/.f64 (pow.f64 (*.f64 b c) #s(literal 3 binary64)) (pow.f64 (*.f64 b c) #s(literal 2 binary64)))","(/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3 binary64)) (neg.f64 (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)) (*.f64 #s(literal 0 binary64) (*.f64 b c))))))","(/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3 binary64)) (neg.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64))))","(neg.f64 (*.f64 (neg.f64 c) b))","(fma.f64 (*.f64 (neg.f64 b) #s(literal -1 binary64)) c #s(literal 0 binary64))","(fma.f64 (neg.f64 (neg.f64 c)) b #s(literal 0 binary64))","(fma.f64 (neg.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64))) (/.f64 #s(literal -1 binary64) (*.f64 b c)) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) (*.f64 (neg.f64 c) b) #s(literal 0 binary64))","(fma.f64 (pow.f64 (*.f64 b c) #s(literal 3 binary64)) (pow.f64 (*.f64 (neg.f64 c) b) #s(literal -2 binary64)) #s(literal 0 binary64))","(fma.f64 (neg.f64 b) (neg.f64 c) #s(literal 0 binary64))","(fma.f64 (neg.f64 c) (neg.f64 b) #s(literal 0 binary64))","(fma.f64 b (neg.f64 (neg.f64 c)) #s(literal 0 binary64))","(fma.f64 b c #s(literal 0 binary64))","(fma.f64 c b #s(literal 0 binary64))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 b c)) (*.f64 (neg.f64 c) b))","(-.f64 (/.f64 #s(literal 0 binary64) (pow.f64 (*.f64 b c) #s(literal 2 binary64))) (*.f64 (neg.f64 c) b))","(-.f64 #s(literal 0 binary64) (*.f64 (neg.f64 c) b))","(+.f64 (*.f64 b c) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (*.f64 b c))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (*.f64 (/.f64 c b) (/.f64 b b)))","(*.f64 (/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3/2 binary64)) (*.f64 (*.f64 (neg.f64 c) b) (neg.f64 c))) (/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3/2 binary64)) b))","(*.f64 (/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3/2 binary64)) (*.f64 (*.f64 (neg.f64 c) b) b)) (/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3/2 binary64)) (neg.f64 c)))","(*.f64 (/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3/2 binary64)) (*.f64 c c)) (/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3/2 binary64)) (*.f64 b b)))","(*.f64 (/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3/2 binary64)) (*.f64 b b)) (/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3/2 binary64)) (*.f64 c c)))","(*.f64 (/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3/2 binary64)) (*.f64 b c)) (/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3/2 binary64)) (*.f64 b c)))","(*.f64 (/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3/2 binary64)) (*.f64 (neg.f64 c) b)) (/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3/2 binary64)) (*.f64 (neg.f64 c) b)))","(*.f64 (/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3/2 binary64)) (neg.f64 c)) (/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3/2 binary64)) (*.f64 b (*.f64 (neg.f64 c) b))))","(*.f64 (/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3/2 binary64)) b) (/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3/2 binary64)) (*.f64 (neg.f64 c) (*.f64 (neg.f64 c) b))))","(*.f64 (/.f64 (pow.f64 (neg.f64 c) #s(literal 3 binary64)) (*.f64 (*.f64 (neg.f64 c) b) (neg.f64 c))) (/.f64 (pow.f64 b #s(literal 3 binary64)) b))","(*.f64 (/.f64 (pow.f64 (neg.f64 c) #s(literal 3 binary64)) (*.f64 (*.f64 (neg.f64 c) b) b)) (/.f64 (pow.f64 b #s(literal 3 binary64)) (neg.f64 c)))","(*.f64 (/.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)) (*.f64 (*.f64 (neg.f64 c) b) (neg.f64 c))) (/.f64 (*.f64 (neg.f64 c) b) b))","(*.f64 (/.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)) (*.f64 (*.f64 (neg.f64 c) b) b)) (/.f64 (*.f64 (neg.f64 c) b) (neg.f64 c)))","(*.f64 (/.f64 (pow.f64 (neg.f64 c) #s(literal 3 binary64)) b) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (neg.f64 c) (*.f64 (neg.f64 c) b))))","(*.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (*.f64 (neg.f64 c) b) (neg.f64 c))) (/.f64 (pow.f64 (neg.f64 c) #s(literal 3 binary64)) b))","(*.f64 (/.f64 (pow.f64 (neg.f64 c) #s(literal 3 binary64)) (neg.f64 c)) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 b (*.f64 (neg.f64 c) b))))","(*.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (*.f64 (neg.f64 c) b) b)) (/.f64 (pow.f64 (neg.f64 c) #s(literal 3 binary64)) (neg.f64 c)))","(*.f64 (/.f64 (pow.f64 (neg.f64 c) #s(literal 3 binary64)) (*.f64 b b)) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 c c)))","(*.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 c c)) (/.f64 (pow.f64 (neg.f64 c) #s(literal 3 binary64)) (*.f64 b b)))","(*.f64 (/.f64 (pow.f64 (neg.f64 c) #s(literal 3 binary64)) (*.f64 c c)) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 b b)))","(*.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 b b)) (/.f64 (pow.f64 (neg.f64 c) #s(literal 3 binary64)) (*.f64 c c)))","(*.f64 (/.f64 (pow.f64 (neg.f64 c) #s(literal 3 binary64)) (*.f64 b c)) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 b c)))","(*.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 b c)) (/.f64 (pow.f64 (neg.f64 c) #s(literal 3 binary64)) (*.f64 b c)))","(*.f64 (/.f64 (pow.f64 (neg.f64 c) #s(literal 3 binary64)) (*.f64 (neg.f64 c) b)) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (neg.f64 c) b)))","(*.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (neg.f64 c) b)) (/.f64 (pow.f64 (neg.f64 c) #s(literal 3 binary64)) (*.f64 (neg.f64 c) b)))","(*.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (neg.f64 c)) (/.f64 (pow.f64 (neg.f64 c) #s(literal 3 binary64)) (*.f64 b (*.f64 (neg.f64 c) b))))","(*.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) b) (/.f64 (pow.f64 (neg.f64 c) #s(literal 3 binary64)) (*.f64 (neg.f64 c) (*.f64 (neg.f64 c) b))))","(*.f64 (/.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)) b) (/.f64 (*.f64 (neg.f64 c) b) (*.f64 (neg.f64 c) (*.f64 (neg.f64 c) b))))","(*.f64 (/.f64 (*.f64 (neg.f64 c) b) (*.f64 (*.f64 (neg.f64 c) b) (neg.f64 c))) (/.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)) b))","(*.f64 (/.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)) (neg.f64 c)) (/.f64 (*.f64 (neg.f64 c) b) (*.f64 b (*.f64 (neg.f64 c) b))))","(*.f64 (/.f64 (*.f64 (neg.f64 c) b) (*.f64 (*.f64 (neg.f64 c) b) b)) (/.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)) (neg.f64 c)))","(*.f64 (/.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)) (*.f64 b b)) (/.f64 (*.f64 (neg.f64 c) b) (*.f64 c c)))","(*.f64 (/.f64 (*.f64 (neg.f64 c) b) (*.f64 c c)) (/.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)) (*.f64 b b)))","(*.f64 (/.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)) (*.f64 c c)) (*.f64 (/.f64 c (neg.f64 b)) (/.f64 b b)))","(*.f64 (/.f64 (*.f64 (neg.f64 c) b) (*.f64 (neg.f64 c) b)) (*.f64 (neg.f64 c) b))","(*.f64 (/.f64 (*.f64 (*.f64 (neg.f64 c) b) (neg.f64 c)) (*.f64 b #s(literal -1 binary64))) (/.f64 b c))","(*.f64 (/.f64 (*.f64 (*.f64 (neg.f64 c) b) (neg.f64 c)) #s(literal -1 binary64)) (/.f64 b (*.f64 b c)))","(*.f64 (/.f64 (*.f64 (*.f64 (neg.f64 c) b) (neg.f64 c)) (neg.f64 b)) (/.f64 b c))","(*.f64 (/.f64 (*.f64 (*.f64 (neg.f64 c) b) (neg.f64 c)) (neg.f64 c)) (/.f64 b b))","(*.f64 (/.f64 (*.f64 (*.f64 (neg.f64 c) b) (neg.f64 c)) b) (/.f64 b (neg.f64 c)))","(*.f64 (/.f64 (*.f64 (*.f64 (neg.f64 c) b) b) (*.f64 b #s(literal -1 binary64))) (/.f64 (neg.f64 c) c))","(*.f64 (/.f64 (*.f64 (*.f64 (neg.f64 c) b) b) #s(literal -1 binary64)) (/.f64 (neg.f64 c) (*.f64 b c)))","(*.f64 (/.f64 (*.f64 (*.f64 (neg.f64 c) b) b) (neg.f64 b)) (/.f64 (neg.f64 c) c))","(*.f64 (/.f64 (*.f64 (*.f64 (neg.f64 c) b) b) (neg.f64 c)) (/.f64 (neg.f64 c) b))","(*.f64 (/.f64 (*.f64 (*.f64 (neg.f64 c) b) b) b) (/.f64 (neg.f64 c) (neg.f64 c)))","(*.f64 (/.f64 (*.f64 c c) (*.f64 b #s(literal -1 binary64))) (/.f64 (*.f64 b b) c))","(*.f64 (/.f64 (*.f64 c c) #s(literal -1 binary64)) (*.f64 (/.f64 b c) (/.f64 b b)))","(*.f64 (/.f64 (*.f64 c c) (neg.f64 b)) (/.f64 (*.f64 b b) c))","(*.f64 (/.f64 (*.f64 b b) (*.f64 b #s(literal -1 binary64))) (/.f64 (*.f64 c c) c))","(*.f64 (/.f64 (*.f64 b b) #s(literal -1 binary64)) (/.f64 (*.f64 c c) (*.f64 b c)))","(*.f64 (/.f64 (*.f64 b b) (neg.f64 b)) (/.f64 (*.f64 c c) c))","(*.f64 (/.f64 (*.f64 c c) b) (/.f64 (*.f64 b b) (neg.f64 c)))","(*.f64 (/.f64 (*.f64 c c) (neg.f64 c)) (/.f64 (*.f64 b b) b))","(*.f64 (/.f64 (*.f64 b c) (*.f64 b #s(literal -1 binary64))) (/.f64 (*.f64 b c) c))","(*.f64 (/.f64 (*.f64 b c) #s(literal -1 binary64)) (/.f64 (*.f64 b c) (*.f64 b c)))","(*.f64 (/.f64 (*.f64 b c) (neg.f64 c)) (/.f64 (*.f64 b c) b))","(*.f64 (/.f64 (*.f64 (neg.f64 c) b) (*.f64 b #s(literal -1 binary64))) (/.f64 (*.f64 (neg.f64 c) b) c))","(*.f64 (/.f64 (*.f64 (neg.f64 c) b) (*.f64 b c)) (/.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)) (*.f64 b c)))","(*.f64 (/.f64 (*.f64 (neg.f64 c) b) #s(literal -1 binary64)) (/.f64 (*.f64 (neg.f64 c) b) (*.f64 b c)))","(*.f64 (/.f64 (*.f64 (neg.f64 c) b) (neg.f64 c)) (/.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)) (*.f64 b (*.f64 (neg.f64 c) b))))","(*.f64 (/.f64 (*.f64 (neg.f64 c) b) (neg.f64 c)) (/.f64 (*.f64 (neg.f64 c) b) b))","(*.f64 (/.f64 (neg.f64 c) (*.f64 b #s(literal -1 binary64))) (/.f64 (*.f64 b (*.f64 (neg.f64 c) b)) c))","(*.f64 (/.f64 (neg.f64 c) (neg.f64 b)) (/.f64 (*.f64 b (*.f64 (neg.f64 c) b)) c))","(*.f64 (/.f64 (neg.f64 c) (neg.f64 c)) (/.f64 (*.f64 b (*.f64 (neg.f64 c) b)) b))","(*.f64 (/.f64 (neg.f64 c) #s(literal -1 binary64)) (/.f64 (*.f64 b (*.f64 (neg.f64 c) b)) (*.f64 b c)))","(*.f64 (/.f64 (*.f64 b b) b) (/.f64 (*.f64 c c) (neg.f64 c)))","(*.f64 (/.f64 (*.f64 b b) (neg.f64 c)) (/.f64 (*.f64 c c) b))","(*.f64 (/.f64 b (*.f64 b #s(literal -1 binary64))) (/.f64 (*.f64 (neg.f64 c) (*.f64 (neg.f64 c) b)) c))","(*.f64 (/.f64 b #s(literal -1 binary64)) (/.f64 (*.f64 (neg.f64 c) (*.f64 (neg.f64 c) b)) (*.f64 b c)))","(*.f64 (/.f64 b (neg.f64 b)) (/.f64 (*.f64 (neg.f64 c) (*.f64 (neg.f64 c) b)) c))","(*.f64 (/.f64 b (neg.f64 c)) (/.f64 (*.f64 (neg.f64 c) (*.f64 (neg.f64 c) b)) b))","(*.f64 (/.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)) (*.f64 b c)) (/.f64 (*.f64 (neg.f64 c) b) (*.f64 b c)))","(*.f64 (*.f64 b #s(literal -1 binary64)) c)","(*.f64 (/.f64 (neg.f64 c) b) (/.f64 (*.f64 b (*.f64 (neg.f64 c) b)) (neg.f64 c)))","(*.f64 (/.f64 b b) (/.f64 (*.f64 (neg.f64 c) (*.f64 (neg.f64 c) b)) (neg.f64 c)))","(*.f64 (/.f64 (*.f64 (neg.f64 c) b) b) (/.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)) (*.f64 (neg.f64 c) (*.f64 (neg.f64 c) b))))","(*.f64 (/.f64 (*.f64 (neg.f64 c) b) b) (/.f64 (*.f64 b c) c))","(*.f64 (/.f64 (*.f64 (neg.f64 c) b) b) (/.f64 (*.f64 (neg.f64 c) b) (neg.f64 c)))","(*.f64 (/.f64 (*.f64 b c) b) (/.f64 (*.f64 b c) (neg.f64 c)))","(*.f64 (/.f64 (*.f64 b c) b) (/.f64 (*.f64 (neg.f64 c) b) c))","(*.f64 #s(literal -1 binary64) (*.f64 b c))","(*.f64 (*.f64 (/.f64 c (neg.f64 b)) (/.f64 b b)) (/.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)) (*.f64 c c)))","(*.f64 (neg.f64 b) c)","(*.f64 (*.f64 (neg.f64 c) b) (/.f64 (*.f64 (neg.f64 c) b) (*.f64 (neg.f64 c) b)))","(*.f64 (neg.f64 c) b)","(*.f64 b (neg.f64 c))","(pow.f64 (*.f64 (neg.f64 c) b) #s(literal 1 binary64))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64))))) (*.f64 b c))","(/.f64 (neg.f64 (+.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)) #s(literal 0 binary64)))))","(/.f64 (+.f64 #s(literal 0 binary64) (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (-.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)) #s(literal 0 binary64))))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)))) (*.f64 (neg.f64 c) b))","(/.f64 (neg.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64))) (*.f64 b c))","(/.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)) (*.f64 (neg.f64 c) b))","(/.f64 (pow.f64 (*.f64 b c) #s(literal 3 binary64)) (neg.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64))))","(/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3 binary64)) (neg.f64 (neg.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)))))","(/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3 binary64)) (pow.f64 (*.f64 b c) #s(literal 2 binary64)))","(neg.f64 (*.f64 b c))","(fma.f64 (/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3/2 binary64)) (*.f64 (*.f64 (neg.f64 c) b) (neg.f64 c))) (/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3/2 binary64)) b) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3/2 binary64)) (*.f64 (*.f64 (neg.f64 c) b) b)) (/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3/2 binary64)) (neg.f64 c)) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3/2 binary64)) (*.f64 c c)) (/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3/2 binary64)) (*.f64 b b)) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3/2 binary64)) (*.f64 b b)) (/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3/2 binary64)) (*.f64 c c)) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3/2 binary64)) (*.f64 b c)) (/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3/2 binary64)) (*.f64 b c)) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3/2 binary64)) (*.f64 (neg.f64 c) b)) (/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3/2 binary64)) (*.f64 (neg.f64 c) b)) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3/2 binary64)) (neg.f64 c)) (/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3/2 binary64)) (*.f64 b (*.f64 (neg.f64 c) b))) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3/2 binary64)) b) (/.f64 (pow.f64 (*.f64 (neg.f64 c) b) #s(literal 3/2 binary64)) (*.f64 (neg.f64 c) (*.f64 (neg.f64 c) b))) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (neg.f64 c) #s(literal 3 binary64)) (*.f64 (*.f64 (neg.f64 c) b) (neg.f64 c))) (/.f64 (pow.f64 b #s(literal 3 binary64)) b) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (neg.f64 c) #s(literal 3 binary64)) (*.f64 (*.f64 (neg.f64 c) b) b)) (/.f64 (pow.f64 b #s(literal 3 binary64)) (neg.f64 c)) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)) (*.f64 (*.f64 (neg.f64 c) b) (neg.f64 c))) (/.f64 (*.f64 (neg.f64 c) b) b) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)) (*.f64 (*.f64 (neg.f64 c) b) b)) (/.f64 (*.f64 (neg.f64 c) b) (neg.f64 c)) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (neg.f64 c) #s(literal 3 binary64)) b) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (neg.f64 c) (*.f64 (neg.f64 c) b))) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (*.f64 (neg.f64 c) b) (neg.f64 c))) (/.f64 (pow.f64 (neg.f64 c) #s(literal 3 binary64)) b) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (neg.f64 c) #s(literal 3 binary64)) (neg.f64 c)) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 b (*.f64 (neg.f64 c) b))) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (*.f64 (neg.f64 c) b) b)) (/.f64 (pow.f64 (neg.f64 c) #s(literal 3 binary64)) (neg.f64 c)) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (neg.f64 c) #s(literal 3 binary64)) (*.f64 b b)) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 c c)) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 c c)) (/.f64 (pow.f64 (neg.f64 c) #s(literal 3 binary64)) (*.f64 b b)) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (neg.f64 c) #s(literal 3 binary64)) (*.f64 c c)) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 b b)) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 b b)) (/.f64 (pow.f64 (neg.f64 c) #s(literal 3 binary64)) (*.f64 c c)) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (neg.f64 c) #s(literal 3 binary64)) (*.f64 b c)) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 b c)) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 b c)) (/.f64 (pow.f64 (neg.f64 c) #s(literal 3 binary64)) (*.f64 b c)) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (neg.f64 c) #s(literal 3 binary64)) (*.f64 (neg.f64 c) b)) (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (neg.f64 c) b)) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 (neg.f64 c) b)) (/.f64 (pow.f64 (neg.f64 c) #s(literal 3 binary64)) (*.f64 (neg.f64 c) b)) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (neg.f64 c)) (/.f64 (pow.f64 (neg.f64 c) #s(literal 3 binary64)) (*.f64 b (*.f64 (neg.f64 c) b))) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) b) (/.f64 (pow.f64 (neg.f64 c) #s(literal 3 binary64)) (*.f64 (neg.f64 c) (*.f64 (neg.f64 c) b))) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)) b) (/.f64 (*.f64 (neg.f64 c) b) (*.f64 (neg.f64 c) (*.f64 (neg.f64 c) b))) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 (neg.f64 c) b) (*.f64 (*.f64 (neg.f64 c) b) (neg.f64 c))) (/.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)) b) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)) (neg.f64 c)) (/.f64 (*.f64 (neg.f64 c) b) (*.f64 b (*.f64 (neg.f64 c) b))) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 (neg.f64 c) b) (*.f64 (*.f64 (neg.f64 c) b) b)) (/.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)) (neg.f64 c)) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)) (*.f64 b b)) (/.f64 (*.f64 (neg.f64 c) b) (*.f64 c c)) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 (neg.f64 c) b) (*.f64 c c)) (/.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)) (*.f64 b b)) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)) (*.f64 c c)) (*.f64 (/.f64 c (neg.f64 b)) (/.f64 b b)) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 (neg.f64 c) b) (*.f64 (neg.f64 c) b)) (*.f64 (neg.f64 c) b) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 (*.f64 (neg.f64 c) b) (neg.f64 c)) (*.f64 b #s(literal -1 binary64))) (/.f64 b c) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 (*.f64 (neg.f64 c) b) (neg.f64 c)) #s(literal -1 binary64)) (/.f64 b (*.f64 b c)) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 (*.f64 (neg.f64 c) b) (neg.f64 c)) (neg.f64 b)) (/.f64 b c) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 (*.f64 (neg.f64 c) b) (neg.f64 c)) (neg.f64 c)) (/.f64 b b) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 (*.f64 (neg.f64 c) b) (neg.f64 c)) b) (/.f64 b (neg.f64 c)) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 (*.f64 (neg.f64 c) b) b) (*.f64 b #s(literal -1 binary64))) (/.f64 (neg.f64 c) c) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 (*.f64 (neg.f64 c) b) b) #s(literal -1 binary64)) (/.f64 (neg.f64 c) (*.f64 b c)) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 (*.f64 (neg.f64 c) b) b) (neg.f64 b)) (/.f64 (neg.f64 c) c) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 (*.f64 (neg.f64 c) b) b) (neg.f64 c)) (/.f64 (neg.f64 c) b) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 (*.f64 (neg.f64 c) b) b) b) (/.f64 (neg.f64 c) (neg.f64 c)) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 c c) (*.f64 b #s(literal -1 binary64))) (/.f64 (*.f64 b b) c) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 c c) #s(literal -1 binary64)) (*.f64 (/.f64 b c) (/.f64 b b)) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 c c) (neg.f64 b)) (/.f64 (*.f64 b b) c) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 b b) (*.f64 b #s(literal -1 binary64))) (/.f64 (*.f64 c c) c) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 b b) #s(literal -1 binary64)) (/.f64 (*.f64 c c) (*.f64 b c)) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 b b) (neg.f64 b)) (/.f64 (*.f64 c c) c) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 c c) b) (/.f64 (*.f64 b b) (neg.f64 c)) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 c c) (neg.f64 c)) (/.f64 (*.f64 b b) b) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 b c) (*.f64 b #s(literal -1 binary64))) (/.f64 (*.f64 b c) c) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 b c) #s(literal -1 binary64)) (/.f64 (*.f64 b c) (*.f64 b c)) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 b c) (neg.f64 c)) (/.f64 (*.f64 b c) b) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 (neg.f64 c) b) (*.f64 b #s(literal -1 binary64))) (/.f64 (*.f64 (neg.f64 c) b) c) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 (neg.f64 c) b) (*.f64 b c)) (/.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)) (*.f64 b c)) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 (neg.f64 c) b) #s(literal -1 binary64)) (/.f64 (*.f64 (neg.f64 c) b) (*.f64 b c)) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 (neg.f64 c) b) (neg.f64 c)) (/.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)) (*.f64 b (*.f64 (neg.f64 c) b))) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 (neg.f64 c) b) (neg.f64 c)) (/.f64 (*.f64 (neg.f64 c) b) b) #s(literal 0 binary64))","(fma.f64 (/.f64 (neg.f64 c) (*.f64 b #s(literal -1 binary64))) (/.f64 (*.f64 b (*.f64 (neg.f64 c) b)) c) #s(literal 0 binary64))","(fma.f64 (/.f64 (neg.f64 c) (neg.f64 b)) (/.f64 (*.f64 b (*.f64 (neg.f64 c) b)) c) #s(literal 0 binary64))","(fma.f64 (/.f64 (neg.f64 c) (neg.f64 c)) (/.f64 (*.f64 b (*.f64 (neg.f64 c) b)) b) #s(literal 0 binary64))","(fma.f64 (/.f64 (neg.f64 c) #s(literal -1 binary64)) (/.f64 (*.f64 b (*.f64 (neg.f64 c) b)) (*.f64 b c)) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 b b) b) (/.f64 (*.f64 c c) (neg.f64 c)) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 b b) (neg.f64 c)) (/.f64 (*.f64 c c) b) #s(literal 0 binary64))","(fma.f64 (/.f64 b (*.f64 b #s(literal -1 binary64))) (/.f64 (*.f64 (neg.f64 c) (*.f64 (neg.f64 c) b)) c) #s(literal 0 binary64))","(fma.f64 (/.f64 b #s(literal -1 binary64)) (/.f64 (*.f64 (neg.f64 c) (*.f64 (neg.f64 c) b)) (*.f64 b c)) #s(literal 0 binary64))","(fma.f64 (/.f64 b (neg.f64 b)) (/.f64 (*.f64 (neg.f64 c) (*.f64 (neg.f64 c) b)) c) #s(literal 0 binary64))","(fma.f64 (/.f64 b (neg.f64 c)) (/.f64 (*.f64 (neg.f64 c) (*.f64 (neg.f64 c) b)) b) #s(literal 0 binary64))","(fma.f64 (/.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)) (*.f64 b c)) (/.f64 (*.f64 (neg.f64 c) b) (*.f64 b c)) #s(literal 0 binary64))","(fma.f64 (*.f64 b #s(literal -1 binary64)) c #s(literal 0 binary64))","(fma.f64 (/.f64 (neg.f64 c) b) (/.f64 (*.f64 b (*.f64 (neg.f64 c) b)) (neg.f64 c)) #s(literal 0 binary64))","(fma.f64 (/.f64 b b) (/.f64 (*.f64 (neg.f64 c) (*.f64 (neg.f64 c) b)) (neg.f64 c)) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 (neg.f64 c) b) b) (/.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)) (*.f64 (neg.f64 c) (*.f64 (neg.f64 c) b))) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 (neg.f64 c) b) b) (/.f64 (*.f64 b c) c) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 (neg.f64 c) b) b) (/.f64 (*.f64 (neg.f64 c) b) (neg.f64 c)) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 b c) b) (/.f64 (*.f64 b c) (neg.f64 c)) #s(literal 0 binary64))","(fma.f64 (/.f64 (*.f64 b c) b) (/.f64 (*.f64 (neg.f64 c) b) c) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) (*.f64 b c) #s(literal 0 binary64))","(fma.f64 (*.f64 (/.f64 c (neg.f64 b)) (/.f64 b b)) (/.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)) (*.f64 c c)) #s(literal 0 binary64))","(fma.f64 (neg.f64 b) c #s(literal 0 binary64))","(fma.f64 (*.f64 (neg.f64 c) b) (/.f64 (*.f64 (neg.f64 c) b) (*.f64 (neg.f64 c) b)) #s(literal 0 binary64))","(fma.f64 (neg.f64 c) b #s(literal 0 binary64))","(fma.f64 b (neg.f64 c) #s(literal 0 binary64))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 b c)) (/.f64 (pow.f64 (*.f64 b c) #s(literal 2 binary64)) (*.f64 b c)))","(-.f64 (/.f64 #s(literal 0 binary64) (pow.f64 (*.f64 b c) #s(literal 2 binary64))) (*.f64 b c))","(-.f64 #s(literal 0 binary64) (*.f64 b c))","(+.f64 (*.f64 (neg.f64 c) b) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (*.f64 (neg.f64 c) b))","(*.f64 (/.f64 (/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) (*.f64 a a)) (pow.f64 a #s(literal -1 binary64))) (/.f64 #s(literal 1/2 binary64) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))","(*.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(literal 2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)) #s(literal 2 binary64)) (/.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))))","(*.f64 (/.f64 (fma.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 (/.f64 b a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))) #s(literal 2 binary64)) (/.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a) (fma.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 (/.f64 b a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))))))","(*.f64 (/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) #s(literal 2 binary64)) (/.f64 (pow.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) a) (/.f64 (pow.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) a) (/.f64 (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal 2 binary64) (/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) (*.f64 a a))) #s(literal -1 binary64)) (pow.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal 2 binary64) (/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 (/.f64 b a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal 2 binary64) (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a (neg.f64 (*.f64 b a)))) #s(literal -1 binary64)) (pow.f64 a #s(literal -2 binary64)))","(*.f64 (pow.f64 (/.f64 #s(literal 2 binary64) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)) #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a (neg.f64 (*.f64 b a))) a) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(literal 2 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (/.f64 #s(literal 1/2 binary64) a)))","(*.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (neg.f64 a)) #s(literal -1/2 binary64))","(*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))","(*.f64 #s(literal 1/2 binary64) (pow.f64 (pow.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a))","(*.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a) #s(literal 1/2 binary64))","(pow.f64 (/.f64 a (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(literal 1/2 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 #s(literal 2 binary64) (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 #s(literal 2 binary64) (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) (*.f64 a a)) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))))","(/.f64 (neg.f64 (*.f64 (/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64))) #s(literal 1/2 binary64))) (neg.f64 (fma.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 (/.f64 b a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a (neg.f64 (*.f64 b a))) #s(literal 1/2 binary64))) (neg.f64 (*.f64 a a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(literal 1 binary64))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(literal -1/2 binary64))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)))) (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b a)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a) (*.f64 #s(literal 1/2 binary64) (/.f64 b a)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal -3 binary64)) #s(literal 1/8 binary64)) (*.f64 (pow.f64 (/.f64 b a) #s(literal 3 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (+.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b a)) #s(literal 2 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 #s(literal 1/2 binary64) (/.f64 b a)))))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(literal 1/2 binary64)))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (neg.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (neg.f64 a)))) #s(literal -2 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)))) (neg.f64 (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 (neg.f64 a) (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))))","(/.f64 (neg.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 b a)))) #s(literal -4 binary64))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)))) (neg.f64 (*.f64 a (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (*.f64 a (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) a) (*.f64 #s(literal -2 binary64) (/.f64 b #s(literal 2 binary64)))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) (/.f64 (neg.f64 b) a))) #s(literal 4 binary64))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) (*.f64 #s(literal 2 binary64) (/.f64 a b))) #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) (/.f64 a b))))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) (/.f64 #s(literal 2 binary64) (/.f64 b a))) #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) (/.f64 #s(literal 2 binary64) (/.f64 b a))))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) #s(literal -2 binary64)) (*.f64 #s(literal -2 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal -2 binary64) (neg.f64 b))) (*.f64 #s(literal -2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) #s(literal 2 binary64)) (*.f64 #s(literal -2 binary64) (/.f64 b a))) #s(literal -4 binary64))","(/.f64 (-.f64 (*.f64 (neg.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal -2 binary64) b)) (*.f64 #s(literal -2 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (/.f64 b #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) a))","(/.f64 (-.f64 #s(literal -2 binary64) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (/.f64 (neg.f64 b) a))) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) #s(literal -2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) (/.f64 a b))) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (*.f64 #s(literal 2 binary64) (/.f64 a b))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (/.f64 b a))) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (/.f64 #s(literal 2 binary64) (/.f64 b a))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (neg.f64 b))) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (/.f64 b a))) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) b)) (*.f64 (*.f64 #s(literal 2 binary64) (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) a) (*.f64 (/.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) (/.f64 b #s(literal 2 binary64)))) (*.f64 (/.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) a))","(/.f64 (-.f64 #s(literal -2 binary64) (*.f64 (/.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) (/.f64 (neg.f64 b) a))) (*.f64 (/.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) #s(literal -2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) (/.f64 a b))) (*.f64 (/.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) (*.f64 #s(literal 2 binary64) (/.f64 a b))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (/.f64 b a))) (*.f64 (/.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) (/.f64 #s(literal 2 binary64) (/.f64 b a))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 (/.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -2 binary64) a)) (*.f64 (/.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) (neg.f64 b))) (*.f64 (/.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 #s(literal 2 binary64) (*.f64 (/.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) (/.f64 b a))) (*.f64 (/.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a)) (*.f64 (/.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) b)) (*.f64 (/.f64 #s(literal 2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) a) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 b #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal -2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal -2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (neg.f64 b) a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (*.f64 #s(literal 2 binary64) (/.f64 a b))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) (/.f64 a b))))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (/.f64 #s(literal 2 binary64) (/.f64 b a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 #s(literal 2 binary64) (/.f64 b a))))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) (neg.f64 b))) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -2 binary64) a) (/.f64 b a))) (*.f64 (*.f64 #s(literal -2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal -2 binary64) a) b)) (*.f64 (*.f64 #s(literal -2 binary64) a) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) a) (*.f64 #s(literal 2 binary64) (/.f64 b #s(literal 2 binary64)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) #s(literal -2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 (neg.f64 b) a))) #s(literal -4 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) (*.f64 #s(literal 2 binary64) (/.f64 a b))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) (/.f64 a b))))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) (/.f64 #s(literal 2 binary64) (/.f64 b a))) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 #s(literal 2 binary64) (/.f64 b a))))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) (*.f64 #s(literal -2 binary64) a)) (*.f64 #s(literal 2 binary64) (neg.f64 b))) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal 2 binary64) b)) (*.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 b #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) a))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal -2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (neg.f64 b) a))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal -2 binary64)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (*.f64 #s(literal 2 binary64) (/.f64 a b))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal 2 binary64) (/.f64 a b))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 2 binary64) (/.f64 b a))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 #s(literal 2 binary64) (/.f64 b a))))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 (*.f64 #s(literal 2 binary64) a) b)) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 (*.f64 #s(literal 2 binary64) a) b)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (*.f64 #s(literal -2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) (neg.f64 b))) (*.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) a) (/.f64 b a))) (*.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (*.f64 #s(literal 2 binary64) a)) (*.f64 (*.f64 #s(literal 2 binary64) a) b)) (pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal 2 binary64)))","(/.f64 (-.f64 (neg.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) (/.f64 (neg.f64 b) a)) #s(literal -2 binary64))","(/.f64 (*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) (/.f64 #s(literal 1/2 binary64) a)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)) (neg.f64 a))","(/.f64 (*.f64 (/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) (*.f64 a a)) #s(literal 1/2 binary64)) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))","(/.f64 (*.f64 (/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64))) #s(literal 1/2 binary64)) (fma.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 (/.f64 b a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))))","(/.f64 (*.f64 (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a (neg.f64 (*.f64 b a))) #s(literal 1/2 binary64)) (*.f64 a a))","(/.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(literal -1/2 binary64)) (neg.f64 a))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b))) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))","(/.f64 (-.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b a)) #s(literal 2 binary64))) (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a) (*.f64 #s(literal 1/2 binary64) (/.f64 b a))))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal -3 binary64)) #s(literal 1/8 binary64)) (*.f64 (pow.f64 (/.f64 b a) #s(literal 3 binary64)) #s(literal 1/8 binary64))) (+.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b a)) #s(literal 2 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 #s(literal 1/2 binary64) (/.f64 b a))))))","(/.f64 (neg.f64 (/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) (*.f64 a a))) (neg.f64 (*.f64 #s(literal 2 binary64) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))))","(/.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (neg.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 (/.f64 b a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))))))","(/.f64 (neg.f64 (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a (neg.f64 (*.f64 b a)))) (neg.f64 (*.f64 #s(literal 2 binary64) (*.f64 a a))))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(literal 1/2 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (neg.f64 a))) #s(literal 2 binary64))","(/.f64 (*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) #s(literal 1 binary64)) (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) #s(literal -1/2 binary64)) (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) #s(literal 1/2 binary64)) (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1/2 binary64)) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1/2 binary64)) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b))) (*.f64 (*.f64 #s(literal 2 binary64) a) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b))) (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (neg.f64 a) (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b))) (*.f64 a (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (*.f64 a (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","(/.f64 (-.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (/.f64 b a))) #s(literal 4 binary64))","(/.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (neg.f64 b)) (*.f64 #s(literal -2 binary64) a))","(/.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(literal 1/2 binary64)) a)","(/.f64 (/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) (*.f64 a a)) (*.f64 #s(literal 2 binary64) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(literal 1/2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 #s(literal 2 binary64) (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 2 binary64) (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 #s(literal 2 binary64) (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a)))))","(/.f64 #s(literal 1 binary64) (/.f64 a (*.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 2 binary64) (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a)))","(/.f64 (/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64))) (*.f64 #s(literal 2 binary64) (fma.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 (/.f64 b a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))))))","(/.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (neg.f64 a)) #s(literal -2 binary64))","(/.f64 (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a (neg.f64 (*.f64 b a))) (*.f64 #s(literal 2 binary64) (*.f64 a a)))","(/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a) #s(literal 2 binary64))","(neg.f64 (/.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a) #s(literal -2 binary64)))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal -2 binary64)) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal -2 binary64)) (neg.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b a))))","(fma.f64 (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 1/4 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 1/4 binary64)) a) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 1/4 binary64)) #s(literal 2 binary64)) (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 1/4 binary64)) a) (neg.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b a))))","(fma.f64 (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 1/4 binary64)) a) (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 1/4 binary64)) #s(literal 2 binary64)) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 1/4 binary64)) a) (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 1/4 binary64)) #s(literal 2 binary64)) (neg.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b a))))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 2 binary64)) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 2 binary64)) (neg.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b a))))","(fma.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 #s(literal 1 binary64) (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) (neg.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b a))))","(fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (neg.f64 a)) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 #s(literal -1/2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (neg.f64 a)) (neg.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b a))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 #s(literal 1/2 binary64) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) (neg.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b a))))","(fma.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) #s(literal 1/2 binary64) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) #s(literal 1/2 binary64) (neg.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b a))))","(fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)))","(fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b a))))","(-.f64 (/.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a) (*.f64 #s(literal 1/2 binary64) (/.f64 b a)))) (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b a)) #s(literal 2 binary64)) (fma.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a) (*.f64 #s(literal 1/2 binary64) (/.f64 b a)))))","(-.f64 (/.f64 (*.f64 (pow.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal -3 binary64)) #s(literal 1/8 binary64)) (+.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b a)) #s(literal 2 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 #s(literal 1/2 binary64) (/.f64 b a)))))) (/.f64 (*.f64 (pow.f64 (/.f64 b a) #s(literal 3 binary64)) #s(literal 1/8 binary64)) (+.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 2 binary64)) (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b a)) #s(literal 2 binary64)) (*.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 #s(literal 1/2 binary64) (/.f64 b a)))))))","(-.f64 (/.f64 (*.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) #s(literal 2 binary64)) #s(literal 4 binary64)) (/.f64 (*.f64 #s(literal 2 binary64) (/.f64 b a)) #s(literal 4 binary64)))","(-.f64 (/.f64 (*.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (*.f64 #s(literal 2 binary64) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))) (/.f64 (pow.f64 (/.f64 b a) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))))","(-.f64 (/.f64 (pow.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal -3 binary64)) (*.f64 #s(literal 2 binary64) (fma.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 (/.f64 b a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))))) (/.f64 (pow.f64 (/.f64 b a) #s(literal 3 binary64)) (*.f64 #s(literal 2 binary64) (fma.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 (/.f64 b a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))))))","(-.f64 (/.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) (*.f64 #s(literal 2 binary64) (*.f64 a a))) (/.f64 (*.f64 b a) (*.f64 #s(literal 2 binary64) (*.f64 a a))))","(-.f64 (/.f64 (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (*.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))) #s(literal 2 binary64)) (/.f64 (/.f64 (pow.f64 (/.f64 b a) #s(literal 2 binary64)) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))) #s(literal 2 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 (/.f64 a (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal -3 binary64)) (fma.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 (/.f64 b a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))))) #s(literal 2 binary64)) (/.f64 (/.f64 (pow.f64 (/.f64 b a) #s(literal 3 binary64)) (fma.f64 (pow.f64 a #s(literal -2 binary64)) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 (/.f64 b a) (*.f64 (pow.f64 a #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))))) #s(literal 2 binary64)))","(-.f64 (/.f64 (*.f64 (/.f64 a a) (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) #s(literal 2 binary64)) (/.f64 (*.f64 (/.f64 a a) (/.f64 b a)) #s(literal 2 binary64)))","(-.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 #s(literal 1/2 binary64) (/.f64 b a)))","(-.f64 #s(literal 0 binary64) (/.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a) #s(literal -2 binary64)))","(exp.f64 (*.f64 (log.f64 (/.f64 #s(literal 2 binary64) (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a))) #s(literal -1 binary64)))","(+.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 b)))","(+.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)))","(+.f64 (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) (neg.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b a))))","(*.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal 1/2 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 #s(literal -1/2 binary64) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 #s(literal 1/2 binary64) (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 #s(literal 2 binary64) a) #s(literal -1 binary64))","(/.f64 (neg.f64 (pow.f64 a #s(literal -1 binary64))) #s(literal -2 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (*.f64 #s(literal -2 binary64) a))","(/.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal 2 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -2 binary64) a) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 #s(literal -2 binary64) a)))","(/.f64 #s(literal 1 binary64) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal -1/2 binary64) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 #s(literal -1/2 binary64) (neg.f64 a))","(/.f64 #s(literal 1/2 binary64) (neg.f64 (neg.f64 a)))","(/.f64 #s(literal 1/2 binary64) a)","(neg.f64 (/.f64 #s(literal -1/2 binary64) a))","(exp.f64 (*.f64 (log.f64 (*.f64 #s(literal 2 binary64) a)) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) (pow.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)))) (neg.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 b #s(literal 3 binary64)))) (*.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","(/.f64 (-.f64 (*.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)) (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (*.f64 b b))) (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))","(/.f64 (neg.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b))) (neg.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (neg.f64 b))))","(/.f64 (neg.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b))) (neg.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (-.f64 (*.f64 b b) (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (neg.f64 b))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","(/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (neg.f64 b)))","(/.f64 (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (-.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (+.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (-.f64 (*.f64 b b) (*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (neg.f64 b)))))","(/.f64 (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (pow.f64 b #s(literal 3 binary64))) (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))","(fma.f64 (sqrt.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (sqrt.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (neg.f64 b))","(fma.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 1/4 binary64)) (neg.f64 b))","(fma.f64 #s(literal -1 binary64) b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))","(-.f64 (/.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (neg.f64 b))) (/.f64 (*.f64 b b) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (neg.f64 b))))","(-.f64 (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)) (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (/.f64 (pow.f64 b #s(literal 3 binary64)) (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","(-.f64 (/.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)) (/.f64 (*.f64 b b) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))","(-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)","(+.f64 (neg.f64 b) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))","(+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (neg.f64 b))","(*.f64 (/.f64 (neg.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))))","(*.f64 (/.f64 (neg.f64 (/.f64 #s(literal 1/2 binary64) a)) #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))","(*.f64 (/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 1/2 binary64)) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)))) (/.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 1/2 binary64)) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (/.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)))) (/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal 1/2 binary64) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (pow.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (pow.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal 1/2 binary64) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (/.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a))","(*.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) a) #s(literal -1 binary64)) (/.f64 (neg.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))))","(*.f64 (/.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal -1 binary64)) (/.f64 (neg.f64 (/.f64 #s(literal 1/2 binary64) a)) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))))","(*.f64 (pow.f64 (/.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 1/2 binary64))) #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))) (/.f64 #s(literal 1 binary64) (pow.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(literal -1 binary64))))","(*.f64 (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))","(*.f64 (/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)))) (/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)))) (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))","(*.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (/.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 b #s(literal 3 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3/2 binary64)))) (/.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 (fma.f64 b (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))","(*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 (pow.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal -1 binary64)) (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)))","(*.f64 #s(literal 1 binary64) (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (/.f64 #s(literal 1/2 binary64) a)))","(*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) (pow.f64 (neg.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) (pow.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b))","(pow.f64 (/.f64 (pow.f64 (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (/.f64 #s(literal 1/2 binary64) a)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (/.f64 #s(literal 1/2 binary64) a)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 1/2 binary64)) (pow.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal -1 binary64)))) (neg.f64 a))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))))) (neg.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3 binary64))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))))) (neg.f64 (fma.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (neg.f64 (*.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 1 binary64))) (neg.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))))","(/.f64 (neg.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)))) (neg.f64 (neg.f64 (neg.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))))))","(/.f64 (neg.f64 (*.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 1/2 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 a (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (*.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (*.f64 (fma.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))))","(/.f64 (*.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 1/2 binary64)) (pow.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal -1 binary64))) a)","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3 binary64))) (/.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))) (fma.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 b #s(literal 4 binary64))))","(/.f64 (*.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) #s(literal 1 binary64)) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a))) (neg.f64 (neg.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) a)))","(/.f64 (*.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 1/2 binary64)) #s(literal 1 binary64)) (*.f64 a (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (fma.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))))","(/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 1/2 binary64)) (*.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) a))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (/.f64 #s(literal 1/2 binary64) a)) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (/.f64 #s(literal 1/2 binary64) a)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (/.f64 #s(literal 1/2 binary64) a)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (/.f64 #s(literal 1/2 binary64) a)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (/.f64 #s(literal 1/2 binary64) a)) #s(literal -1 binary64)))","(/.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) (neg.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))))","(/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","(neg.f64 (/.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))))","(neg.f64 (*.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) a) #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))) (*.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) a) #s(literal -1 binary64)) (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (/.f64 #s(literal 1/2 binary64) a)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) #s(literal 2 binary64)) (/.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) a))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64))) a) (/.f64 (pow.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3 binary64))) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3 binary64))) a) (/.f64 (pow.f64 (fma.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(*.f64 (/.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal -1 binary64)) (/.f64 #s(literal -1/2 binary64) a))","(*.f64 (/.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) #s(literal 1/2 binary64))","(*.f64 (/.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) a) (/.f64 (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal 2 binary64)))","(*.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 2 binary64)))","(*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))","(*.f64 #s(literal 1/2 binary64) (/.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a))","(*.f64 #s(literal 1/2 binary64) (*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","(pow.f64 (/.f64 a (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 1/2 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 1 binary64))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal -1/2 binary64))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64))))) (neg.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3 binary64))))) (neg.f64 (fma.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a))) (neg.f64 (fma.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64))) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3 binary64))) #s(literal -1/2 binary64))) (neg.f64 (*.f64 (fma.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3 binary64))))) (neg.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64))))) (neg.f64 (*.f64 (neg.f64 a) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3 binary64))))) (neg.f64 (*.f64 (neg.f64 a) (fma.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64))))) (neg.f64 (*.f64 a (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3 binary64))))) (neg.f64 (*.f64 a (fma.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64))) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3 binary64))) #s(literal 1/2 binary64))) (neg.f64 (*.f64 (fma.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) a)))","(/.f64 (neg.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 1/2 binary64)))) (neg.f64 (neg.f64 a)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (neg.f64 a))","(/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 1 binary64)) (*.f64 #s(literal 2 binary64) a))","(/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal -1/2 binary64)) (neg.f64 a))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64)))) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3 binary64)))) (fma.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 b #s(literal 4 binary64))))","(/.f64 (neg.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (*.f64 #s(literal -2 binary64) a))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 1/2 binary64))) (neg.f64 a))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (fma.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 b #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (*.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64))) #s(literal 1/2 binary64)) (*.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (*.f64 #s(literal 2 binary64) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3 binary64))) #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3 binary64))) #s(literal 1/2 binary64)) (*.f64 (fma.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) a))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (fma.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64)))) (*.f64 (neg.f64 a) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","(/.f64 (*.f64 #s(literal -1/2 binary64) (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3 binary64)))) (*.f64 (neg.f64 a) (fma.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64)))) (*.f64 a (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","(/.f64 (*.f64 #s(literal 1/2 binary64) (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3 binary64)))) (*.f64 a (fma.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 1/2 binary64)) a)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 a (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 1/2 binary64))))","(/.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (*.f64 #s(literal 2 binary64) a))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) (*.f64 b b) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","(fma.f64 (*.f64 b b) (/.f64 #s(literal 1/2 binary64) a) (*.f64 (neg.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)))","(-.f64 (/.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 b #s(literal 4 binary64)))) (*.f64 #s(literal 2 binary64) a)) (/.f64 (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3 binary64)) (fma.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 b #s(literal 4 binary64)))) (*.f64 #s(literal 2 binary64) a)))","(-.f64 (/.f64 (*.f64 b b) (*.f64 #s(literal 2 binary64) a)) (/.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 #s(literal 2 binary64) a)))","(+.f64 (*.f64 (*.f64 b b) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (neg.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (/.f64 #s(literal 1/2 binary64) a)))","(+.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (*.f64 b b)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","(*.f64 (+.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) b) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","(*.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64))) (pow.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3 binary64))) (pow.f64 (fma.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 b #s(literal 4 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (*.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64)))) (*.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","(/.f64 (-.f64 (*.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 b #s(literal 4 binary64)))) (*.f64 (fma.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3 binary64)))) (*.f64 (fma.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (fma.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 b b) (neg.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64)) (*.f64 (*.f64 b b) (neg.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 b #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64))) (-.f64 (*.f64 b b) (neg.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64))) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (-.f64 (pow.f64 b #s(literal 4 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 b #s(literal 4 binary64))) (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3 binary64))) (+.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64)) (*.f64 (*.f64 b b) (neg.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))))","(/.f64 (-.f64 (pow.f64 b #s(literal 6 binary64)) (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3 binary64))) (fma.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 b #s(literal 4 binary64))))","(fma.f64 (exp.f64 (log.f64 b)) (exp.f64 (log.f64 b)) (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","(fma.f64 (exp.f64 (log.f64 b)) (exp.f64 (log.f64 b)) (neg.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))","(fma.f64 #s(literal -1 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (*.f64 b b))","(fma.f64 (neg.f64 b) (neg.f64 b) (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","(fma.f64 (neg.f64 b) (neg.f64 b) (neg.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))","(fma.f64 b b (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","(fma.f64 b b (neg.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))","(-.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (-.f64 (*.f64 b b) (neg.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))) (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64)) (-.f64 (*.f64 b b) (neg.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))))","(-.f64 (/.f64 (pow.f64 b #s(literal 4 binary64)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","(-.f64 (/.f64 (pow.f64 b #s(literal 6 binary64)) (fma.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 b #s(literal 4 binary64)))) (/.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 3 binary64)) (fma.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) (fma.f64 b b #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (pow.f64 b #s(literal 4 binary64)))))","(-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))","(+.f64 (neg.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (*.f64 b b))","(+.f64 (*.f64 b b) (*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","(+.f64 (*.f64 b b) (neg.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))","(*.f64 (exp.f64 (log.f64 b)) (exp.f64 (log.f64 b)))","(*.f64 (neg.f64 b) (neg.f64 b))","(*.f64 b b)","(pow.f64 (exp.f64 (log.f64 b)) #s(literal 2 binary64))","(pow.f64 (neg.f64 b) #s(literal 2 binary64))","(pow.f64 (*.f64 b b) #s(literal 1 binary64))","(pow.f64 b #s(literal 2 binary64))","(exp.f64 (*.f64 (log.f64 b) #s(literal 2 binary64)))","(*.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))))","(*.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))","(pow.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (neg.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal 2 binary64))","(pow.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 2 binary64))","(pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 1 binary64))","#s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))","(sqrt.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64)))","(fabs.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))","(exp.f64 (*.f64 (log.f64 (pow.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c)))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) #s(literal 1 binary64)))","(exp.f64 (log.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))))","(*.f64 #s(literal -1 binary64) c)","(*.f64 c #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (*.f64 c c))) (neg.f64 (+.f64 #s(literal 0 binary64) c)))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 c #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (fma.f64 c c (*.f64 #s(literal 0 binary64) c)))))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 c c)) (+.f64 #s(literal 0 binary64) c))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 c #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 c c (*.f64 #s(literal 0 binary64) c))))","(neg.f64 c)","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) c)) (/.f64 (*.f64 c c) (+.f64 #s(literal 0 binary64) c)))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 c c (*.f64 #s(literal 0 binary64) c)))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (fma.f64 c c (*.f64 #s(literal 0 binary64) c)))))","(-.f64 #s(literal 0 binary64) c)","(+.f64 #s(literal 0 binary64) (neg.f64 c))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":331.2890625,"type":"rewrite"},{"compiler":[[57733,4919]],"memory":[[6197296,115594512]],"time":165.780029296875,"type":"eval"},{"alts":[["(fma.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) #s(literal 1/2 binary64) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)))","fresh",41.2236496126883,"binary64"],["(/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))","done",29.86701901748841,"binary64"],["(/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b) (*.f64 #s(literal 2 binary64) a))","done",41.23424108651143,"binary64"],["(/.f64 (-.f64 #s(approx (sqrt (+ (* -4 (* c a)) (* b b))) (*.f64 (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (/.f64 c b) #s(literal 1 binary64)) b)) b) (*.f64 #s(literal 2 binary64) a))","fresh",56.64784658895906,"binary64"],["(/.f64 (*.f64 #s(approx (- (* b b) (+ (* -4 (* c a)) (* b b))) (*.f64 (*.f64 #s(literal 4 binary64) a) c)) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","fresh",43.37623094000553,"binary64"],["(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","done",46.34233072136904,"binary64"],["(/.f64 #s(approx (* (- (* b b) (+ (* -4 (* c a)) (* b b))) (/ 1/2 a)) (*.f64 #s(literal 2 binary64) c)) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","fresh",43.25570402448137,"binary64"],["(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","done",29.938458793665273,"binary64"],["(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (*.f64 (*.f64 a (/.f64 c b)) #s(literal -2 binary64))))","fresh",45.15414967466575,"binary64"],["(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)))) #s(literal -1 binary64)))","fresh",56.745051618278154,"binary64"],["#s(approx (/ (- (/ (sqrt (+ (* -4 (* c a)) (* b b))) a) (/ b a)) 2) (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b))) (neg.f64 b)))","fresh",43.51155310928848,"binary64"],["#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 (*.f64 c b) (*.f64 b b)))","fresh",57.352046665647556,"binary64"],["#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 (neg.f64 c) b))","done",42.03137654896942,"binary64"],["#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 c b))","fresh",57.000844804639414,"binary64"],["#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 b a))","done",62.30653182858571,"binary64"],["#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 #s(literal 1 binary64) (/.f64 a b)))","fresh",62.3065318905359,"binary64"],["#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 #s(literal -1 binary64) (/.f64 b c)))","fresh",42.39334287981316,"binary64"],["#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (*.f64 (pow.f64 b #s(literal -1 binary64)) (pow.f64 (pow.f64 (neg.f64 c) #s(literal -1 binary64)) #s(literal -1 binary64))))","fresh",42.11731404896942,"binary64"],["#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (exp.f64 (*.f64 (log.f64 (/.f64 b c)) #s(literal -1 binary64))))","fresh",60.00750419107162,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a)))","fresh",42.927083200500476,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 (*.f64 (neg.f64 b) b) b) a))","fresh",47.91427585793324,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","done",42.84245937978134,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (exp.f64 (-.f64 (*.f64 (log.f64 b) #s(literal 3 binary64)) (*.f64 (log.f64 b) #s(literal 2 binary64)))) a))","fresh",62.71919003593339,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (exp.f64 (*.f64 (log.f64 b) #s(literal 1 binary64))) a))","fresh",62.71919003593339,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 #s(literal -1 binary64) (/.f64 a b)))","fresh",42.90105306209273,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b (/.f64 #s(literal -1 binary64) a)))","fresh",42.89714687978135,"binary64"],["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (exp.f64 (*.f64 (log.f64 (/.f64 (neg.f64 a) b)) #s(literal -1 binary64))))","fresh",56.570112302315515,"binary64"],["#s(approx (/ (* (- (* b b) (+ (* -4 (* c a)) (* b b))) (/ 1/2 a)) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 (fma.f64 (neg.f64 a) (/.f64 c b) b) a))","fresh",62.442851277760596,"binary64"]],"compiler":[[1374,253],[26,19],[15,12],[22,17],[29,21],[42,23],[25,19],[40,22],[15,12],[24,18],[29,23],[31,22],[24,17],[21,16],[20,15],[20,15],[22,17],[22,17],[27,20],[24,19],[29,20],[26,19],[22,17],[30,23],[25,20],[23,18],[23,18],[26,21],[40,20]],"count":[[1345,28]],"kept":[{"done":[7,6],"fresh":[18,13],"new":[1315,8],"picked":[5,1]}],"memory":[[-2315792,65438544]],"min-error":[[5.460133860237955,"binary64"]],"time":56.726806640625,"type":"prune"},{"accuracy":[8.655832642450603],"baseline":[29.86701901748841],"branch":[["a",29.867019017488403,1,"binary64"],["b",8.655832642450603,3,"binary64"],["c",29.867019017488406,1,"binary64"],["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",15.181190461368388,5,"binary64"]],"compiler":[[1,3],[1,3],[1,3],[17,14]],"count":[[54,3]],"inputs":[["#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 b a))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 c b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 (neg.f64 c) b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b (/.f64 #s(literal -1 binary64) a)))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 (*.f64 c b) (*.f64 b b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 #s(literal -1 binary64) (/.f64 a b)))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 #s(literal -1 binary64) (/.f64 b c)))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 #s(literal 1 binary64) (/.f64 a b)))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 (-.f64 #s(literal 0 binary64) (*.f64 b (neg.f64 c))) (*.f64 b b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (*.f64 #s(literal 0 binary64) a) (*.f64 a b)) (*.f64 a a)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 (*.f64 (neg.f64 b) b) b) a))","#s(approx (/ (* (- (* b b) (+ (* -4 (* c a)) (* b b))) (/ 1/2 a)) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 (fma.f64 (neg.f64 a) (/.f64 c b) b) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 b b #s(literal 0 binary64))) (neg.f64 b)) a))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b)))))","#s(approx (/ (- (/ (sqrt (+ (* -4 (* c a)) (* b b))) a) (/ b a)) 2) (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b))) (neg.f64 b)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (*.f64 (*.f64 a (/.f64 c b)) #s(literal -2 binary64))))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (*.f64 (*.f64 a (/.f64 c b)) #s(literal -2 binary64))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))","(/.f64 #s(approx (* (- (* b b) (+ (* -4 (* c a)) (* b b))) (/ 1/2 a)) (*.f64 #s(literal 2 binary64) c)) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a)))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c))))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(fma.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) #s(literal 1/2 binary64) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)))","(/.f64 (-.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) (/.f64 b a)) #s(literal 2 binary64))","(/.f64 (-.f64 #s(approx (sqrt (+ (* -4 (* c a)) (* b b))) (*.f64 (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (/.f64 c b) #s(literal 1 binary64)) b)) b) (*.f64 #s(literal 2 binary64) a))","(fma.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","(/.f64 (*.f64 #s(approx (- (* b b) (+ (* -4 (* c a)) (* b b))) (*.f64 (*.f64 #s(literal 4 binary64) a) c)) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(-.f64 (/.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) (*.f64 #s(literal 2 binary64) a)) (/.f64 b (*.f64 #s(literal 2 binary64) a)))","(/.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (*.f64 (*.f64 #s(literal 2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 (+.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c))))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (+.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 #s(approx (/ 1 (+ (* -4 (* c a)) (* b b))) (/.f64 (/.f64 #s(literal -1/4 binary64) a) c))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (-.f64 (*.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) #s(literal 1/2 binary64)) a) (*.f64 a (*.f64 b #s(literal 1/2 binary64)))) (*.f64 a a))","(/.f64 (*.f64 (-.f64 (*.f64 b b) #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 (+.f64 (neg.f64 b) (/.f64 #s(literal 1 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal -2 binary64) a)))","(/.f64 (*.f64 (fma.f64 b b (fma.f64 (*.f64 c a) #s(literal 4 binary64) (*.f64 b b))) (/.f64 #s(literal 1/2 binary64) a)) (-.f64 b (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b)))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (exp.f64 (*.f64 (log.f64 b) #s(literal 1 binary64))) a))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (exp.f64 (*.f64 (log.f64 (/.f64 b c)) #s(literal -1 binary64))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (exp.f64 (*.f64 (log.f64 (/.f64 (neg.f64 a) b)) #s(literal -1 binary64))))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)))) #s(literal -1 binary64)))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (*.f64 (pow.f64 b #s(literal -1 binary64)) (pow.f64 (pow.f64 (neg.f64 c) #s(literal -1 binary64)) #s(literal -1 binary64))))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (exp.f64 (-.f64 (*.f64 (log.f64 b) #s(literal 3 binary64)) (*.f64 (log.f64 b) #s(literal 2 binary64)))) a))"]],"memory":[[4183392,27971584]],"oracle":[64.0],"outputs":[["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a)))","(fma.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (/.f64 b a)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))"]],"repr":["binary64"],"time":60.35107421875,"times":[[15.787109375,"a"],[15.17919921875,"b"],[13.281982421875,"c"],[12.319091796875,"(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"]],"type":"regimes"},{"accuracy":[8.66642411627374],"baseline":[29.86701901748841],"branch":[["b",8.66642411627374,3,"binary64"]],"compiler":[[1,3]],"count":[[37,3]],"inputs":[["#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 b a))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 c b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 (neg.f64 c) b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b (/.f64 #s(literal -1 binary64) a)))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 (*.f64 c b) (*.f64 b b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 #s(literal -1 binary64) (/.f64 a b)))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 #s(literal -1 binary64) (/.f64 b c)))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 #s(literal 1 binary64) (/.f64 a b)))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 (-.f64 #s(literal 0 binary64) (*.f64 b (neg.f64 c))) (*.f64 b b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (*.f64 #s(literal 0 binary64) a) (*.f64 a b)) (*.f64 a a)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 (*.f64 (neg.f64 b) b) b) a))","#s(approx (/ (* (- (* b b) (+ (* -4 (* c a)) (* b b))) (/ 1/2 a)) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 (fma.f64 (neg.f64 a) (/.f64 c b) b) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 b b #s(literal 0 binary64))) (neg.f64 b)) a))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b)))))","#s(approx (/ (- (/ (sqrt (+ (* -4 (* c a)) (* b b))) a) (/ b a)) 2) (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b))) (neg.f64 b)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (*.f64 (*.f64 a (/.f64 c b)) #s(literal -2 binary64))))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (*.f64 (*.f64 a (/.f64 c b)) #s(literal -2 binary64))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))","(/.f64 #s(approx (* (- (* b b) (+ (* -4 (* c a)) (* b b))) (/ 1/2 a)) (*.f64 #s(literal 2 binary64) c)) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a)))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","(/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c))))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -2 binary64) a) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))))))","(/.f64 #s(literal 1/2 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)))","(fma.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 a #s(literal -4 binary64)) c))) a) #s(literal 1/2 binary64) (*.f64 (neg.f64 b) (/.f64 #s(literal 1/2 binary64) a)))","(/.f64 (-.f64 (/.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) a) (/.f64 b a)) #s(literal 2 binary64))","(/.f64 (-.f64 #s(approx (sqrt (+ (* -4 (* c a)) (* b b))) (*.f64 (fma.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) (/.f64 c b) #s(literal 1 binary64)) b)) b) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[-990992,6998128]],"oracle":[63.66408418227387],"outputs":[["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a)))","(/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))"]],"repr":["binary64"],"time":11.075927734375,"times":[[8.84814453125,"b"]],"type":"regimes"},{"accuracy":[8.722238892450603],"baseline":[29.938458793665273],"branch":[["b",8.722238892450603,3,"binary64"]],"compiler":[[1,3]],"count":[[29,3]],"inputs":[["#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 b a))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 c b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 (neg.f64 c) b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b (/.f64 #s(literal -1 binary64) a)))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 (*.f64 c b) (*.f64 b b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 #s(literal -1 binary64) (/.f64 a b)))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 #s(literal -1 binary64) (/.f64 b c)))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 #s(literal 1 binary64) (/.f64 a b)))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 (-.f64 #s(literal 0 binary64) (*.f64 b (neg.f64 c))) (*.f64 b b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (*.f64 #s(literal 0 binary64) a) (*.f64 a b)) (*.f64 a a)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 (*.f64 (neg.f64 b) b) b) a))","#s(approx (/ (* (- (* b b) (+ (* -4 (* c a)) (* b b))) (/ 1/2 a)) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 (fma.f64 (neg.f64 a) (/.f64 c b) b) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 b b #s(literal 0 binary64))) (neg.f64 b)) a))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b)))))","#s(approx (/ (- (/ (sqrt (+ (* -4 (* c a)) (* b b))) a) (/ b a)) 2) (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b))) (neg.f64 b)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (*.f64 (*.f64 a (/.f64 c b)) #s(literal -2 binary64))))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (*.f64 (*.f64 a (/.f64 c b)) #s(literal -2 binary64))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))","(/.f64 #s(approx (* (- (* b b) (+ (* -4 (* c a)) (* b b))) (/ 1/2 a)) (*.f64 #s(literal 2 binary64) c)) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a)))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))"]],"memory":[[5780768,5780768]],"oracle":[63.66408418227387],"outputs":[["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))"]],"repr":["binary64"],"time":9.089111328125,"times":[[7.156005859375,"b"]],"type":"regimes"},{"accuracy":[11.88546923347618],"baseline":[41.23424108651143],"branch":[["b",11.88546923347618,3,"binary64"]],"compiler":[[1,3]],"count":[[28,3]],"inputs":[["#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 b a))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 c b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 (neg.f64 c) b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b (/.f64 #s(literal -1 binary64) a)))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 (*.f64 c b) (*.f64 b b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 #s(literal -1 binary64) (/.f64 a b)))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 #s(literal -1 binary64) (/.f64 b c)))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 #s(literal 1 binary64) (/.f64 a b)))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 (-.f64 #s(literal 0 binary64) (*.f64 b (neg.f64 c))) (*.f64 b b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (*.f64 #s(literal 0 binary64) a) (*.f64 a b)) (*.f64 a a)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 (*.f64 (neg.f64 b) b) b) a))","#s(approx (/ (* (- (* b b) (+ (* -4 (* c a)) (* b b))) (/ 1/2 a)) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 (fma.f64 (neg.f64 a) (/.f64 c b) b) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 b b #s(literal 0 binary64))) (neg.f64 b)) a))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b)))))","#s(approx (/ (- (/ (sqrt (+ (* -4 (* c a)) (* b b))) a) (/ b a)) 2) (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b))) (neg.f64 b)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (*.f64 (*.f64 a (/.f64 c b)) #s(literal -2 binary64))))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (*.f64 (*.f64 a (/.f64 c b)) #s(literal -2 binary64))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))","(/.f64 #s(approx (* (- (* b b) (+ (* -4 (* c a)) (* b b))) (/ 1/2 a)) (*.f64 #s(literal 2 binary64) c)) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a)))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 #s(literal -4 binary64) (*.f64 c a))))) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[-2510384,5641728]],"oracle":[63.66408418227387],"outputs":[["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a)))","(/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))"]],"repr":["binary64"],"time":9.549072265625,"times":[[6.98583984375,"b"]],"type":"regimes"},{"accuracy":[11.932343702249572],"baseline":[41.23424108651143],"branch":[["b",11.932343702249572,3,"binary64"]],"compiler":[[1,3]],"count":[[26,3]],"inputs":[["#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 b a))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 c b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 (neg.f64 c) b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b (/.f64 #s(literal -1 binary64) a)))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 (*.f64 c b) (*.f64 b b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 #s(literal -1 binary64) (/.f64 a b)))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 #s(literal -1 binary64) (/.f64 b c)))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 #s(literal 1 binary64) (/.f64 a b)))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 (-.f64 #s(literal 0 binary64) (*.f64 b (neg.f64 c))) (*.f64 b b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (*.f64 #s(literal 0 binary64) a) (*.f64 a b)) (*.f64 a a)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 (*.f64 (neg.f64 b) b) b) a))","#s(approx (/ (* (- (* b b) (+ (* -4 (* c a)) (* b b))) (/ 1/2 a)) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 (fma.f64 (neg.f64 a) (/.f64 c b) b) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 b b #s(literal 0 binary64))) (neg.f64 b)) a))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b)))))","#s(approx (/ (- (/ (sqrt (+ (* -4 (* c a)) (* b b))) a) (/ b a)) 2) (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b))) (neg.f64 b)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (*.f64 (*.f64 a (/.f64 c b)) #s(literal -2 binary64))))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (*.f64 (*.f64 a (/.f64 c b)) #s(literal -2 binary64))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))","(/.f64 #s(approx (* (- (* b b) (+ (* -4 (* c a)) (* b b))) (/ 1/2 a)) (*.f64 #s(literal 2 binary64) c)) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))","(/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[-13458960,5369184]],"oracle":[63.66408418227387],"outputs":[["#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b)))))","(/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))"]],"repr":["binary64"],"time":19.90283203125,"times":[[17.31005859375,"b"]],"type":"regimes"},{"accuracy":[11.953002228426435],"baseline":[41.25880588709187],"branch":[["b",11.953002228426435,3,"binary64"]],"compiler":[[1,3]],"count":[[25,3]],"inputs":[["#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 b a))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 c b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 (neg.f64 c) b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b (/.f64 #s(literal -1 binary64) a)))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 (*.f64 c b) (*.f64 b b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 #s(literal -1 binary64) (/.f64 a b)))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 #s(literal -1 binary64) (/.f64 b c)))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 #s(literal 1 binary64) (/.f64 a b)))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 (-.f64 #s(literal 0 binary64) (*.f64 b (neg.f64 c))) (*.f64 b b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (*.f64 #s(literal 0 binary64) a) (*.f64 a b)) (*.f64 a a)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 (*.f64 (neg.f64 b) b) b) a))","#s(approx (/ (* (- (* b b) (+ (* -4 (* c a)) (* b b))) (/ 1/2 a)) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 (fma.f64 (neg.f64 a) (/.f64 c b) b) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 b b #s(literal 0 binary64))) (neg.f64 b)) a))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b)))))","#s(approx (/ (- (/ (sqrt (+ (* -4 (* c a)) (* b b))) a) (/ b a)) 2) (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b))) (neg.f64 b)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (*.f64 (*.f64 a (/.f64 c b)) #s(literal -2 binary64))))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (*.f64 (*.f64 a (/.f64 c b)) #s(literal -2 binary64))) (*.f64 #s(literal 2 binary64) a))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64)))) b))","(/.f64 #s(approx (* (- (* b b) (+ (* -4 (* c a)) (* b b))) (/ 1/2 a)) (*.f64 #s(literal 2 binary64) c)) (-.f64 b (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 (*.f64 c a) #s(literal -4 binary64))))))"]],"memory":[[5399360,5399360]],"oracle":[63.66408418227387],"outputs":[["#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b)))))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))"]],"repr":["binary64"],"time":8.4970703125,"times":[[6.385009765625,"b"]],"type":"regimes"},{"accuracy":[22.42402342953901],"baseline":[42.03137654896942],"branch":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",32.11833036845604,4,"binary64"],["b",22.42402342953901,2,"binary64"]],"compiler":[[17,14],[1,3]],"count":[[22,2]],"inputs":[["#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 b a))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 c b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 (neg.f64 c) b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (*.f64 b (/.f64 #s(literal -1 binary64) a)))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 (*.f64 c b) (*.f64 b b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 #s(literal -1 binary64) (/.f64 a b)))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 #s(literal -1 binary64) (/.f64 b c)))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 #s(literal 1 binary64) (/.f64 a b)))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 (-.f64 #s(literal 0 binary64) (*.f64 b (neg.f64 c))) (*.f64 b b)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (*.f64 #s(literal 0 binary64) a) (*.f64 a b)) (*.f64 a a)))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (/.f64 (*.f64 (neg.f64 b) b) b) a))","#s(approx (/ (* (- (* b b) (+ (* -4 (* c a)) (* b b))) (/ 1/2 a)) (- b (sqrt (+ (* -4 (* c a)) (* b b))))) (/.f64 (fma.f64 (neg.f64 a) (/.f64 c b) b) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (-.f64 (/.f64 #s(literal 0 binary64) (fma.f64 b b #s(literal 0 binary64))) (neg.f64 b)) a))","(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 #s(approx (- (* b b) (* 4 (* a c))) (*.f64 b b)))) (*.f64 #s(literal 2 binary64) a))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b)))))","#s(approx (/ (- (/ (sqrt (+ (* -4 (* c a)) (* b b))) a) (/ b a)) 2) (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b))) (neg.f64 b)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) c)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(approx (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (*.f64 (*.f64 a (/.f64 c b)) #s(literal -2 binary64))))","(/.f64 #s(approx (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (*.f64 (*.f64 (/.f64 a b) #s(literal -2 binary64)) c)) (*.f64 #s(literal 2 binary64) a))","(/.f64 #s(approx (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (*.f64 (*.f64 a (/.f64 c b)) #s(literal -2 binary64))) (*.f64 #s(literal 2 binary64) a))"]],"memory":[[-48576,7954288]],"oracle":[63.55324842658318],"outputs":[["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))"]],"repr":["binary64"],"time":13.7080078125,"times":[[5.51708984375,"(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"],[6.0869140625,"b"]],"type":"regimes"},{"accuracy":[37.5679285863733],"baseline":[42.84245937978134],"branch":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",42.842459379781346,1,"binary64"],["c",42.842459379781324,1,"binary64"],["a",42.842459379781324,1,"binary64"],["b",37.5679285863733,2,"binary64"]],"compiler":[[17,14],[1,3],[1,3],[1,3]],"count":[[3,2]],"inputs":[["#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 b a))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 c b))","#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))"]],"memory":[[-1239312,7113792]],"oracle":[63.09015480037752],"outputs":[["#s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 c b))"]],"repr":["binary64"],"time":10.903076171875,"times":[[3.19921875,"(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"],[2.321044921875,"c"],[1.8388671875,"a"],[2.114990234375,"b"]],"type":"regimes"},{"accuracy":[57.00084480463941],"baseline":[57.000844804639414],"branch":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",57.00084480463944,1,"binary64"],["a",57.000844804639435,1,"binary64"],["c",57.00084480463941,1,"binary64"],["b",57.000844804639414,1,"binary64"]],"compiler":[[17,14],[1,3],[1,3],[1,3]],"count":[[2,1]],"inputs":[["#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 b a))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 c b))"]],"memory":[[-1655280,6624784]],"oracle":[63.026017143249625],"outputs":[["#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 c b))"]],"repr":["binary64"],"time":11.625,"times":[[2.578125,"(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"],[2.7490234375,"a"],[2.60205078125,"c"],[2.489990234375,"b"]],"type":"regimes"},{"accuracy":[62.30653182858568],"baseline":[62.30653182858571],"branch":[["(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))",62.30653182858568,1,"binary64"],["a",62.30653182858572,1,"binary64"],["b",62.30653182858568,1,"binary64"],["c",62.30653182858571,1,"binary64"]],"compiler":[[17,14],[1,3],[1,3],[1,3]],"count":[[1,1]],"inputs":[["#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 b a))"]],"link":["."],"memory":[[-2873168,6210112]],"name":["quadp (p42, positive)"],"oracle":[62.30653182858571],"outputs":[["#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 b a))"]],"repr":["binary64"],"time":7.19287109375,"times":[[1.740966796875,"(/.f64 (+.f64 (neg.f64 b) (sqrt.f64 (-.f64 (*.f64 b b) (*.f64 #s(literal 4 binary64) (*.f64 a c))))) (*.f64 #s(literal 2 binary64) a))"],[1.251953125,"a"],[1.695068359375,"b"],[1.572998046875,"c"]],"type":"regimes"},{"bstep":[[23.568115234375,4.7777207163861344e-42,3.0225774677824295e-40],[4.4951171875,-2.0331042633025292e+145,-9.378451077392652e+144]],"compiler":[[22,18],[18,15],[22,18],[18,15],[22,18],[18,15],[22,18],[18,15],[22,18],[18,15],[22,18],[18,15],[22,18],[18,15],[18,15],[29,21],[18,15],[29,21],[19,17],[1,3]],"memory":[[1327440,9210416]],"method":["binary-search","binary-search"],"mixsample":[[1.31103515625,"adjust",800],[1.87744140625,"ival-div",0],[0.148193359375,"ival-sub",1600],[0.064453125,"ival-assert",0],[0.9169921875,"ival-sub",0],[1.38720703125,"ival-sqrt",0],[0.258544921875,"ival-sub",400],[0.595703125,"adjust",2000],[1.291015625,"ival-add",0],[0.02783203125,"ival-mult",800],[0.332275390625,"ival-mult",400],[4.2578125,"ival-mult",0],[0.280029296875,"ival-sqrt",1600],[0.14306640625,"ival-true",0],[0.1669921875,"exact",0],[0.439208984375,"ival-sqrt",400],[0.880126953125,"ival-neg",0]],"outcomes":[[4.469970703125,1,"valid",27],[2.316650390625,0,"invalid",25],[6.197998046875,2,"valid",28],[7.64990234375,0,"valid",89]],"stop":[["narrow-enough",1],["predicate-same",1]],"time":32.845947265625,"type":"bsearch"},{"bstep":[[1.447998046875,4.7777207163861344e-42,3.0225774677824295e-40],[0.741943359375,-2.0331042633025292e+145,-9.378451077392652e+144]],"compiler":[[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[15,13],[29,21],[15,13],[29,21],[19,17],[1,3]],"memory":[[912976,912976]],"method":["binary-search","binary-search"],"stop":[["narrow-enough",1],["predicate-same",1]],"time":3.34716796875,"type":"bsearch"},{"bstep":[[0.837890625,4.7777207163861344e-42,3.0225774677824295e-40],[22.013916015625,-2.911985053980245e+132,-1.5720585588306725e+117]],"compiler":[[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[22,18],[15,13],[15,13],[29,21],[15,13],[29,21],[15,13],[29,21],[15,13],[29,21],[15,13],[29,21],[15,13],[29,21],[15,13],[29,21],[15,13],[29,21],[15,13],[29,21],[15,13],[29,21],[19,17],[1,3]],"memory":[[353008,8226960]],"method":["binary-search","binary-search"],"mixsample":[[1.31298828125,"ival-div",0],[0.844482421875,"ival-add",0],[5.043212890625,"ival-mult",0],[0.06591796875,"ival-assert",0],[0.859375,"ival-sub",0],[0.1181640625,"ival-true",0],[1.18798828125,"ival-sqrt",0],[0.18310546875,"exact",0],[0.878173828125,"ival-neg",0]],"outcomes":[[0.77294921875,0,"invalid",9],[14.292236328125,0,"valid",160]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":26.242919921875,"type":"bsearch"},{"bstep":[[1.27099609375,4.7777207163861344e-42,3.0225774677824295e-40],[12.995849609375,-2.6758812276829418e-101,-2.0640867943307755e-102]],"compiler":[[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[29,21],[22,18],[29,21],[22,18],[29,21],[22,18],[29,21],[22,18],[29,21],[22,18],[29,21],[19,17],[1,3]],"memory":[[-2254752,5659952]],"method":["binary-search","binary-search"],"mixsample":[[0.749755859375,"ival-div",0],[0.525390625,"ival-add",0],[2.777099609375,"ival-mult",0],[0.039794921875,"ival-assert",0],[0.546875,"ival-sub",0],[0.07373046875,"ival-true",0],[0.75537109375,"ival-sqrt",0],[0.09765625,"exact",0],[0.64013671875,"ival-neg",0]],"outcomes":[[1.341552734375,0,"invalid",17],[7.75,0,"valid",96]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":18.7939453125,"type":"bsearch"},{"bstep":[[0.929931640625,4.7777207163861344e-42,3.0225774677824295e-40],[17.240966796875,-2.0640867943307755e-102,-4.68017487476233e-104]],"compiler":[[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[29,22],[22,18],[29,22],[22,18],[29,22],[22,18],[29,22],[22,18],[29,22],[22,18],[29,22],[22,18],[29,22],[19,17],[1,3]],"memory":[[6685952,6685952]],"method":["binary-search","binary-search"],"mixsample":[[1.033203125,"ival-div",0],[0.674560546875,"ival-add",0],[3.703857421875,"ival-mult",0],[0.05419921875,"ival-assert",0],[0.727294921875,"ival-sub",0],[0.093994140625,"ival-true",0],[0.978515625,"ival-sqrt",0],[0.126953125,"exact",0],[0.67626953125,"ival-neg",0]],"outcomes":[[2.140869140625,0,"invalid",23],[9.6484375,0,"valid",112]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":21.406005859375,"type":"bsearch"},{"bstep":[[0.885986328125,4.7777207163861344e-42,3.0225774677824295e-40],[1.136962890625,-2.0640867943307755e-102,-4.68017487476233e-104]],"compiler":[[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[29,22],[22,18],[29,22],[22,18],[29,22],[22,18],[29,22],[22,18],[29,22],[22,18],[29,22],[22,18],[29,22],[19,17],[1,3]],"memory":[[1321232,1321232]],"method":["binary-search","binary-search"],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":2.833984375,"type":"bsearch"},{"bstep":[[17.376953125,-7.388757949674414e-308,2.4784084176596646e-307]],"compiler":[[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[22,18],[19,17],[1,3]],"memory":[[-2692016,6913792]],"method":["binary-search"],"mixsample":[[1.00537109375,"ival-div",0],[0.697021484375,"ival-add",0],[3.59423828125,"ival-mult",0],[0.057373046875,"ival-assert",0],[0.751708984375,"ival-sub",0],[0.1064453125,"ival-true",0],[0.97705078125,"ival-sqrt",0],[0.12109375,"exact",0],[0.711181640625,"ival-neg",0]],"outcomes":[[3.589599609375,0,"invalid",45],[9.28857421875,0,"valid",112]],"stop":[["narrow-enough",1]],"time":21.281005859375,"type":"bsearch"},{"bstep":[[28.870849609375,4.886751364799729,297658620.8397299]],"compiler":[[20,16],[22,18],[20,16],[22,18],[20,16],[22,18],[20,16],[22,18],[20,16],[22,18],[20,16],[22,18],[20,16],[22,18],[20,16],[22,18],[20,16],[22,18],[19,17],[1,3]],"memory":[[766624,8849856]],"method":["binary-search"],"mixsample":[[1.64892578125,"adjust",800],[2.2509765625,"ival-div",0],[0.0087890625,"ival-div",400],[0.19677734375,"ival-sub",1600],[0.053466796875,"ival-assert",0],[0.880615234375,"ival-sub",0],[1.343017578125,"ival-sqrt",0],[0.493896484375,"ival-sub",400],[0.6318359375,"adjust",2000],[1.613525390625,"ival-add",0],[0.05908203125,"ival-mult",800],[4.244140625,"ival-mult",0],[0.359130859375,"ival-sqrt",1600],[0.38916015625,"ival-mult",400],[0.007080078125,"ival-add",400],[0.120849609375,"ival-true",0],[0.18212890625,"exact",0],[0.7353515625,"ival-sqrt",400],[0.853515625,"ival-neg",0]],"outcomes":[[6.081787109375,1,"valid",37],[8.5986328125,2,"valid",37],[1.308349609375,0,"invalid",12],[6.9345703125,0,"valid",70]],"stop":[["narrow-enough",1]],"time":33.920166015625,"type":"bsearch"},{"egraph":[[7,5931,587,0.055006844],[6,2933,587,0.056244097],[5,791,587,0.017911683],[4,495,589,0.006027593],[3,334,589,0.004184797],[2,208,589,0.003397436],[1,132,589,0.001999605],[0,91,602,0.001552798]],"inputs":[["(if (<=.f64 b #s(literal -19999999999999999781741223642818392253569612520802717890360030929450604798220516297708225612915260122593317856641907797168065523046908674225209344 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a))) (if (<=.f64 b #s(literal 5963246648617347/784637716923335095479473677900958302012794430558004314112 binary64)) (fma.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))","(if (<=.f64 b #s(literal -19999999999999999781741223642818392253569612520802717890360030929450604798220516297708225612915260122593317856641907797168065523046908674225209344 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a))) (if (<=.f64 b #s(literal 5963246648617347/784637716923335095479473677900958302012794430558004314112 binary64)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))","(if (<=.f64 b #s(literal -85999999999999996768418412426612073315747874889589646515688096711661853630447377650054942490015517144101285970256608784338158354432 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a))) (if (<=.f64 b #s(literal 5963246648617347/784637716923335095479473677900958302012794430558004314112 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))","(if (<=.f64 b #s(literal -6304320991423117/315216049571155833698232320801148910440637914163723573343586347233965774171977684891314130039079325126453023922454528 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a))) (if (<=.f64 b #s(literal 5963246648617347/784637716923335095479473677900958302012794430558004314112 binary64)) (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))","(if (<=.f64 b #s(literal -6556493831080041/5043456793138493339171717132818382567050206626619577173497381555743452386751642958261026080625269202023248382759272448 binary64)) #s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b))))) (if (<=.f64 b #s(literal 5963246648617347/784637716923335095479473677900958302012794430558004314112 binary64)) (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))","(if (<=.f64 b #s(literal -6556493831080041/5043456793138493339171717132818382567050206626619577173497381555743452386751642958261026080625269202023248382759272448 binary64)) #s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b))))) (if (<=.f64 b #s(literal 5963246648617347/784637716923335095479473677900958302012794430558004314112 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))","(if (<=.f64 b #s(literal 202402253307311/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b)))","(if (<=.f64 b #s(literal 25/2 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)) #s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 c b)))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 c b))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 b a))"]],"memory":[[-1622416,14090416]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 b #s(literal -19999999999999999781741223642818392253569612520802717890360030929450604798220516297708225612915260122593317856641907797168065523046908674225209344 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a))) (if (<=.f64 b #s(literal 5963246648617347/784637716923335095479473677900958302012794430558004314112 binary64)) (fma.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 #s(literal -4 binary64) a) c (*.f64 b b))) a) #s(literal 1/2 binary64) (*.f64 #s(literal -1/2 binary64) (/.f64 b a))) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))","(if (<=.f64 b #s(literal -19999999999999999781741223642818392253569612520802717890360030929450604798220516297708225612915260122593317856641907797168065523046908674225209344 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a))) (if (<=.f64 b #s(literal 5963246648617347/784637716923335095479473677900958302012794430558004314112 binary64)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))","(if (<=.f64 b #s(literal -85999999999999996768418412426612073315747874889589646515688096711661853630447377650054942490015517144101285970256608784338158354432 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a))) (if (<=.f64 b #s(literal 5963246648617347/784637716923335095479473677900958302012794430558004314112 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 (fma.f64 #s(literal -4 binary64) (*.f64 c a) (*.f64 b b))) b)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))","(if (<=.f64 b #s(literal -6304320991423117/315216049571155833698232320801148910440637914163723573343586347233965774171977684891314130039079325126453023922454528 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (fma.f64 (/.f64 (/.f64 c b) b) b (/.f64 (neg.f64 b) a))) (if (<=.f64 b #s(literal 5963246648617347/784637716923335095479473677900958302012794430558004314112 binary64)) (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))","(if (<=.f64 b #s(literal -6556493831080041/5043456793138493339171717132818382567050206626619577173497381555743452386751642958261026080625269202023248382759272448 binary64)) #s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b))))) (if (<=.f64 b #s(literal 5963246648617347/784637716923335095479473677900958302012794430558004314112 binary64)) (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))","(if (<=.f64 b #s(literal -6556493831080041/5043456793138493339171717132818382567050206626619577173497381555743452386751642958261026080625269202023248382759272448 binary64)) #s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (*.f64 b (+.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 c (*.f64 b b))))) (if (<=.f64 b #s(literal 5963246648617347/784637716923335095479473677900958302012794430558004314112 binary64)) (/.f64 (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b) (*.f64 #s(literal 2 binary64) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))","(if (<=.f64 b #s(literal -6556493831080041/5043456793138493339171717132818382567050206626619577173497381555743452386751642958261026080625269202023248382759272448 binary64)) #s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (*.f64 (neg.f64 b) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 c (*.f64 b b))))) (if (<=.f64 b #s(literal 5963246648617347/784637716923335095479473677900958302012794430558004314112 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))","(if (<=.f64 b #s(literal -6556493831080041/5043456793138493339171717132818382567050206626619577173497381555743452386751642958261026080625269202023248382759272448 binary64)) #s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (*.f64 b (+.f64 (/.f64 #s(literal -1 binary64) a) (/.f64 c (*.f64 b b))))) (if (<=.f64 b #s(literal 5963246648617347/784637716923335095479473677900958302012794430558004314112 binary64)) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (-.f64 (sqrt.f64 #s(approx (+ (* -4 (* c a)) (* b b)) (*.f64 #s(literal -4 binary64) (*.f64 a c)))) b)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b))))","(if (<=.f64 b #s(literal 202402253307311/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 c) b)))","(if (<=.f64 b #s(literal 25/2 binary64)) #s(approx (/ (+ (neg b) (sqrt (- (* b b) (* 4 (* a c))))) (* 2 a)) (/.f64 (neg.f64 b) a)) #s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 c b)))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 c b))","#s(approx (/ (- (sqrt (+ (* -4 (* c a)) (* b b))) b) (* 2 a)) (/.f64 b a))"]],"stop":[["node limit",1]],"time":180.333984375,"type":"simplify"},{"compiler":[[600,93]],"memory":[[2613216,2613216]],"stop":[["fuel",1]],"time":5.14501953125,"type":"soundness"},{"compiler":[[600,93],[600,93],[105,28],[105,28],[17,14],[17,14]],"memory":[[807152,50689008]],"remove-preprocessing":[[],[],[],[],[],[],[],[],[],[],[]],"time":96.2109375,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.02490234375,"type":"end"}]