[{"memory":[[52608,52608]],"time":0.06591796875,"type":"start"},{"compiler":[[52,27]],"memory":[[7480848,48908304]],"method":["search"],"sampling":[[12,{"invalid":0.209961568909735,"precondition":0.7460122308758788,"unknown":0.04402620021438625,"valid":0.0}],[11,{"invalid":0.20363667817471048,"precondition":0.7460122308758788,"unknown":0.05035109094941075,"valid":0.0}],[10,{"invalid":0.19693973504350806,"precondition":0.7460122308758788,"unknown":0.05704803408061317,"valid":0.0}],[9,{"invalid":0.17164017210341007,"precondition":0.7460122308758788,"unknown":0.08234759702071119,"valid":0.0}],[8,{"invalid":0.160726635148858,"precondition":0.7460122308758788,"unknown":0.09326113397526327,"valid":0.0}],[7,{"invalid":0.1468366790248826,"precondition":0.7460122308758788,"unknown":0.10715109009923865,"valid":0.0}],[6,{"invalid":0.0714340600661591,"precondition":0.7460122308758788,"unknown":0.18255370905796214,"valid":0.0}],[5,{"invalid":0.04762270671077273,"precondition":0.7460122308758788,"unknown":0.2063650624133485,"valid":0.0}],[4,{"invalid":0.031748471140515155,"precondition":0.7460122308758788,"unknown":0.2222392979836061,"valid":0.0}],[3,{"invalid":0.0,"precondition":0.7460122308758788,"unknown":0.25398776912412124,"valid":0.0}],[2,{"invalid":0.0,"precondition":0.7460122308758788,"unknown":0.25398776912412124,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.7460122308758788,"unknown":0.25398776912412124,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.7460122308758788,"unknown":0.25398776912412124,"valid":0.0}]],"time":173.1640625,"type":"analyze"},{"bogosity":[{"invalid":0.24882535652104532,"precondition":0.7460122308758788,"valid":0.005162412603075926}],"memory":[[185799584,4765540000]],"mixsample":[[503.25830078125,"ival-div",0],[474.085205078125,"ival-add",0],[1050.85302734375,"ival-fabs",0],[2695.251708984375,"ival-mult",0],[1231.11376953125,"ival-expm1",0],[28.818359375,"ival-assert",0],[416.388427734375,"ival-fmin",0],[225.312255859375,"ival-and",0],[1197.178955078125,"const",0],[50.912841796875,"exact",0],[914.701904296875,"ival-<=",0]],"outcomes":[[9837.129638671875,0,"invalid",62153],[1392.6064453125,0,"valid",8256]],"time":15423.030029296875,"type":"sample"},{"compiler":[[24,17],[101,19],[101,19]],"confusion":[[256,0,0,0]],"explanations":[["/.f64","(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))","n/u",26,0,[["(*.f64 b eps)","underflow",145],["(-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64))","underflow",145],["(-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))","underflow",145],["(*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64)))","underflow",224],["(*.f64 a eps)","underflow",145]],[[]]],["-.f64","(-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))","cancellation",111,0,[],[[2,2]]],["-.f64","(-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64))","cancellation",111,0,[],[[2,1]]],["-.f64","(-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))","cancellation",144,0,[],[[1,2]]],["/.f64","(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))","u/u",198,0,[["(*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64)))","underflow",198],["(*.f64 (+.f64 a b) eps)","underflow",112],["(-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))","underflow",112],["(*.f64 b eps)","underflow",145],["(-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64))","underflow",145],["(-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))","underflow",145],["(*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64)))","underflow",224],["(*.f64 a eps)","underflow",145]],[[]]]],"fperrors":[["(-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))",142,2,[-3.290593946954918e-136,1.4383016161767735e-181,1.2628219792725564e-187],0,false],["(-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))",110,1,[-2.684023920497355e-169,2.8274860762035316e-129,4.434501346619807e-195],0,false],["(-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64))",110,1,[-3.290593946954918e-136,1.4383016161767735e-181,1.2628219792725564e-187],0,false],["(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))",225,0,false,1,[-4.968600649315788e-77,-6.97477203036201e-43,2.8268650627332264e-102]],["(+.f64 a b)",0,0,false,0,false],["(*.f64 b eps)",0,0,false,0,false],["(exp.f64 (*.f64 a eps))",0,0,false,0,false],["a",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(*.f64 a eps)",0,0,false,0,false],["(exp.f64 (*.f64 (+.f64 a b) eps))",0,0,false,0,false],["eps",0,0,false,0,false],["(*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64)))",0,0,false,0,false],["(*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64)))",0,0,false,0,false],["(*.f64 (+.f64 a b) eps)",0,0,false,0,false],["(exp.f64 (*.f64 b eps))",0,0,false,0,false],["b",0,0,false,0,false]],"freqs":[[4,46],[3,98],[1,112]],"maybe-confusion":[[256,0,0,0,0,0]],"memory":[[-1451552,115346624]],"mixsample":[[3.975341796875,"ival-div",0],[0.72900390625,"ival-true",0],[3.542724609375,"ival-add",0],[15.162109375,"ival-exp",0],[19.1103515625,"ival-mult",0],[10.1474609375,"ival-expm1",0],[0.48046875,"exact",0],[0.259521484375,"ival-assert",0]],"outcomes":[[82.078369140625,0,"valid",512]],"time":233.77001953125,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[24,17]],"egraph":[[0,8094,18,0.009046263],[12,7965,24,0.027493633],[11,7935,24,0.030020929],[10,7852,24,0.023688289],[9,7551,24,0.025980256],[8,6201,24,0.028599417],[7,3499,24,0.037157328],[6,1292,24,0.017468306],[5,656,24,0.005830866],[4,327,24,0.002861146],[3,176,24,0.001685746],[2,109,24,0.001061256],[1,56,24,0.000444119],[0,30,24,0.000403205],[0,17,24,0.00030207]],"inputs":[["(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))"]],"memory":[[5077360,22799440]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))","(/.f64 (/.f64 (*.f64 eps (expm1.f64 (*.f64 (+.f64 b a) eps))) (expm1.f64 (*.f64 b eps))) (expm1.f64 (*.f64 a eps)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"symmetry":[["(sort a b)"]],"time":482.391845703125,"type":"preprocess"},{"compiler":[[0,3]],"memory":[[50624,50624]],"time":0.071044921875,"type":"eval"},{"alts":[["(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))","next",64.0,"binary64"]],"compiler":[[24,17]],"memory":[[-7869072,335552]],"time":17.9541015625,"type":"prune"},{"egraph":[[0,8094,81,0.030667996],[12,7965,99,0.025702574],[11,7935,99,0.024682959],[10,7852,99,0.025800123],[9,7551,99,0.02551321],[8,6201,99,0.027048215],[7,3499,99,0.030583729],[6,1292,99,0.017322729],[5,656,99,0.00511126],[4,327,99,0.002454817],[3,176,99,0.001276119],[2,109,99,0.000768793],[1,56,99,0.000443074],[0,30,99,0.00037066],[0,17,99,0.000219537]],"inputs":[["(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))","(*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64)))","eps","(-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))","(exp.f64 (*.f64 (+.f64 a b) eps))","(*.f64 (+.f64 a b) eps)","(+.f64 a b)","a","b","#s(literal 1 binary64)","(*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64)))","(-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64))","(exp.f64 (*.f64 a eps))","(*.f64 a eps)","(-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))","(exp.f64 (*.f64 b eps))","(*.f64 b eps)"]],"locations":[["(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))","cost-diff",0],["(-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))","cost-diff",2],["(-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64))","cost-diff",2],["(-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))","cost-diff",2]],"memory":[[3306608,17854320]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))","(*.f64 (/.f64 (/.f64 eps (expm1.f64 (*.f64 b eps))) (expm1.f64 (*.f64 a eps))) (expm1.f64 (*.f64 (+.f64 b a) eps)))","(*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64)))","(*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps)","eps","(-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))","(expm1.f64 (*.f64 (+.f64 b a) eps))","(exp.f64 (*.f64 (+.f64 a b) eps))","(pow.f64 (exp.f64 eps) (+.f64 b a))","(*.f64 (+.f64 a b) eps)","(*.f64 (+.f64 b a) eps)","(+.f64 a b)","(+.f64 b a)","a","b","#s(literal 1 binary64)","(*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64)))","(*.f64 (expm1.f64 (*.f64 b eps)) (expm1.f64 (*.f64 a eps)))","(-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64))","(expm1.f64 (*.f64 a eps))","(exp.f64 (*.f64 a eps))","(pow.f64 (exp.f64 eps) a)","(*.f64 a eps)","(-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))","(expm1.f64 (*.f64 b eps))","(exp.f64 (*.f64 b eps))","(pow.f64 (exp.f64 eps) b)","(*.f64 b eps)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":273.548828125,"type":"simplify"},{"compiler":[[101,19]],"locations":[["(-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))","accuracy",22.8048076791958],["(-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64))","accuracy",26.659780096374583],["(-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))","accuracy",31.817212074440725],["(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))","accuracy",54.34286637108768]],"memory":[[82624,18428528]],"mixsample":[[1.715087890625,"ival-div",0],[0.1796875,"ival-true",0],[1.64404296875,"ival-add",0],[7.4501953125,"ival-exp",0],[7.64453125,"ival-mult",0],[4.155029296875,"ival-expm1",0],[0.17822265625,"exact",0],[0.10205078125,"ival-assert",0]],"outcomes":[[33.942626953125,0,"valid",256]],"time":66.904052734375,"type":"localize"},{"count":[[4,44]],"inputs":[["(-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))","(-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64))","(-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))","(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))"]],"memory":[[-453488,7090512]],"outputs":[["(- (exp (* b eps)) 1)","(- (+ (exp (* b eps)) (* a (* eps (exp (* b eps))))) 1)","(- (+ (exp (* b eps)) (* a (+ (* 1/2 (* a (* (pow eps 2) (exp (* b eps))))) (* eps (exp (* b eps)))))) 1)","(- (+ (exp (* b eps)) (* a (+ (* a (+ (* 1/6 (* a (* (pow eps 3) (exp (* b eps))))) (* 1/2 (* (pow eps 2) (exp (* b eps)))))) (* eps (exp (* b eps)))))) 1)","(* a eps)","(* a (+ eps (* 1/2 (* a (pow eps 2)))))","(* a (+ eps (* a (+ (* 1/6 (* a (pow eps 3))) (* 1/2 (pow eps 2))))))","(* a (+ eps (* a (+ (* 1/2 (pow eps 2)) (* a (+ (* 1/24 (* a (pow eps 4))) (* 1/6 (pow eps 3))))))))","(/ 1 a)","(/ (+ 1 (* a (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (* a (- (* 1/6 (/ (* (pow eps 3) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(- (exp (* eps (+ a b))) 1)","(- (exp (* a eps)) 1)","(/ (* eps (- (exp (* eps (+ a b))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(- (exp (* eps (- b (* -1 a)))) 1)","(/ (* eps (- (exp (* eps (- b (* -1 a)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(- (+ (exp (* a eps)) (* b (* eps (exp (* a eps))))) 1)","(- (+ (exp (* a eps)) (* b (+ (* 1/2 (* b (* (pow eps 2) (exp (* a eps))))) (* eps (exp (* a eps)))))) 1)","(- (+ (exp (* a eps)) (* b (+ (* b (+ (* 1/6 (* b (* (pow eps 3) (exp (* a eps))))) (* 1/2 (* (pow eps 2) (exp (* a eps)))))) (* eps (exp (* a eps)))))) 1)","(* b eps)","(* b (+ eps (* 1/2 (* b (pow eps 2)))))","(* b (+ eps (* b (+ (* 1/6 (* b (pow eps 3))) (* 1/2 (pow eps 2))))))","(* b (+ eps (* b (+ (* 1/2 (pow eps 2)) (* b (+ (* 1/24 (* b (pow eps 4))) (* 1/6 (pow eps 3))))))))","(/ 1 b)","(/ (+ 1 (* b (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (* b (- (* 1/6 (/ (* (pow eps 3) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(- (exp (* eps (- a (* -1 b)))) 1)","(/ (* eps (- (exp (* eps (- a (* -1 b)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(* eps (+ a b))","(* eps (+ a (+ b (* 1/2 (* eps (pow (+ a b) 2))))))","(* eps (+ a (+ b (* eps (+ (* 1/6 (* eps (pow (+ a b) 3))) (* 1/2 (pow (+ a b) 2)))))))","(* eps (+ a (+ b (* eps (+ (* 1/2 (pow (+ a b) 2)) (* eps (+ (* 1/24 (* eps (pow (+ a b) 4))) (* 1/6 (pow (+ a b) 3)))))))))","(* eps (+ a (* 1/2 (* (pow a 2) eps))))","(* eps (+ a (* eps (+ (* 1/6 (* (pow a 3) eps)) (* 1/2 (pow a 2))))))","(* eps (+ a (* eps (+ (* 1/2 (pow a 2)) (* eps (+ (* 1/24 (* (pow a 4) eps)) (* 1/6 (pow a 3))))))))","(* eps (+ b (* 1/2 (* (pow b 2) eps))))","(* eps (+ b (* eps (+ (* 1/6 (* (pow b 3) eps)) (* 1/2 (pow b 2))))))","(* eps (+ b (* eps (+ (* 1/2 (pow b 2)) (* eps (+ (* 1/24 (* (pow b 4) eps)) (* 1/6 (pow b 3))))))))","(/ (+ a b) (* a b))","(+ (* eps (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (+ (* 1/6 (/ (pow (+ a b) 3) (* a b))) (* eps (- (* 1/24 (/ (pow (+ a b) 4) (* a b))) (+ (/ (* (+ a b) (+ (* 1/24 (* a (pow b 4))) (+ (* 1/24 (* (pow a 4) b)) (+ (* 1/12 (* (pow a 2) (pow b 3))) (* 1/12 (* (pow a 3) (pow b 2))))))) (* (pow a 2) (pow b 2))) (+ (/ (* (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2))))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b))))) (* a b))))))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))"]],"series":[[3.89404296875,"((- (exp (* (+ a b) eps)) 1) (- (exp (* a eps)) 1) (- (exp (* b eps)) 1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))))","eps","-inf"],[3.712158203125,"((- (exp (* (+ a b) eps)) 1) (- (exp (* a eps)) 1) (- (exp (* b eps)) 1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))))","eps","inf"],[4.093994140625,"((- (exp (* (+ a b) eps)) 1) (- (exp (* a eps)) 1) (- (exp (* b eps)) 1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))))","eps","0"],[3.5029296875,"((- (exp (* (+ a b) eps)) 1) (- (exp (* a eps)) 1) (- (exp (* b eps)) 1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))))","b","-inf"],[1.56005859375,"((- (exp (* (+ a b) eps)) 1) (- (exp (* a eps)) 1) (- (exp (* b eps)) 1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))))","b","inf"],[1.9111328125,"((- (exp (* (+ a b) eps)) 1) (- (exp (* a eps)) 1) (- (exp (* b eps)) 1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))))","b","0"],[2.679931640625,"((- (exp (* (+ a b) eps)) 1) (- (exp (* a eps)) 1) (- (exp (* b eps)) 1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))))","a","-inf"],[2.416015625,"((- (exp (* (+ a b) eps)) 1) (- (exp (* a eps)) 1) (- (exp (* b eps)) 1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))))","a","inf"],[3.12109375,"((- (exp (* (+ a b) eps)) 1) (- (exp (* a eps)) 1) (- (exp (* b eps)) 1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))))","a","0"]],"time":29.2529296875,"type":"series"},{"count":[[44,44]],"egraph":[[0,8118,1416,0.099105605],[2,3456,1586,0.024924519],[1,1079,1694,0.011118307],[0,336,1742,0.004190881]],"inputs":[["(- (exp (* b eps)) 1)","(- (+ (exp (* b eps)) (* a (* eps (exp (* b eps))))) 1)","(- (+ (exp (* b eps)) (* a (+ (* 1/2 (* a (* (pow eps 2) (exp (* b eps))))) (* eps (exp (* b eps)))))) 1)","(- (+ (exp (* b eps)) (* a (+ (* a (+ (* 1/6 (* a (* (pow eps 3) (exp (* b eps))))) (* 1/2 (* (pow eps 2) (exp (* b eps)))))) (* eps (exp (* b eps)))))) 1)","(* a eps)","(* a (+ eps (* 1/2 (* a (pow eps 2)))))","(* a (+ eps (* a (+ (* 1/6 (* a (pow eps 3))) (* 1/2 (pow eps 2))))))","(* a (+ eps (* a (+ (* 1/2 (pow eps 2)) (* a (+ (* 1/24 (* a (pow eps 4))) (* 1/6 (pow eps 3))))))))","(/ 1 a)","(/ (+ 1 (* a (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (* a (- (* 1/6 (/ (* (pow eps 3) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(- (exp (* eps (+ a b))) 1)","(- (exp (* a eps)) 1)","(/ (* eps (- (exp (* eps (+ a b))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(- (exp (* eps (- b (* -1 a)))) 1)","(/ (* eps (- (exp (* eps (- b (* -1 a)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(- (+ (exp (* a eps)) (* b (* eps (exp (* a eps))))) 1)","(- (+ (exp (* a eps)) (* b (+ (* 1/2 (* b (* (pow eps 2) (exp (* a eps))))) (* eps (exp (* a eps)))))) 1)","(- (+ (exp (* a eps)) (* b (+ (* b (+ (* 1/6 (* b (* (pow eps 3) (exp (* a eps))))) (* 1/2 (* (pow eps 2) (exp (* a eps)))))) (* eps (exp (* a eps)))))) 1)","(* b eps)","(* b (+ eps (* 1/2 (* b (pow eps 2)))))","(* b (+ eps (* b (+ (* 1/6 (* b (pow eps 3))) (* 1/2 (pow eps 2))))))","(* b (+ eps (* b (+ (* 1/2 (pow eps 2)) (* b (+ (* 1/24 (* b (pow eps 4))) (* 1/6 (pow eps 3))))))))","(/ 1 b)","(/ (+ 1 (* b (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (* b (- (* 1/6 (/ (* (pow eps 3) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(- (exp (* eps (- a (* -1 b)))) 1)","(/ (* eps (- (exp (* eps (- a (* -1 b)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(* eps (+ a b))","(* eps (+ a (+ b (* 1/2 (* eps (pow (+ a b) 2))))))","(* eps (+ a (+ b (* eps (+ (* 1/6 (* eps (pow (+ a b) 3))) (* 1/2 (pow (+ a b) 2)))))))","(* eps (+ a (+ b (* eps (+ (* 1/2 (pow (+ a b) 2)) (* eps (+ (* 1/24 (* eps (pow (+ a b) 4))) (* 1/6 (pow (+ a b) 3)))))))))","(* eps (+ a (* 1/2 (* (pow a 2) eps))))","(* eps (+ a (* eps (+ (* 1/6 (* (pow a 3) eps)) (* 1/2 (pow a 2))))))","(* eps (+ a (* eps (+ (* 1/2 (pow a 2)) (* eps (+ (* 1/24 (* (pow a 4) eps)) (* 1/6 (pow a 3))))))))","(* eps (+ b (* 1/2 (* (pow b 2) eps))))","(* eps (+ b (* eps (+ (* 1/6 (* (pow b 3) eps)) (* 1/2 (pow b 2))))))","(* eps (+ b (* eps (+ (* 1/2 (pow b 2)) (* eps (+ (* 1/24 (* (pow b 4) eps)) (* 1/6 (pow b 3))))))))","(/ (+ a b) (* a b))","(+ (* eps (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (+ (* 1/6 (/ (pow (+ a b) 3) (* a b))) (* eps (- (* 1/24 (/ (pow (+ a b) 4) (* a b))) (+ (/ (* (+ a b) (+ (* 1/24 (* a (pow b 4))) (+ (* 1/24 (* (pow a 4) b)) (+ (* 1/12 (* (pow a 2) (pow b 3))) (* 1/12 (* (pow a 3) (pow b 2))))))) (* (pow a 2) (pow b 2))) (+ (/ (* (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2))))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b))))) (* a b))))))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))"]],"memory":[[8884800,45614608]],"method":["egg-herbie"],"outputs":[["(- (exp (* b eps)) 1)","(expm1.f64 (*.f64 eps b))","(- (+ (exp (* b eps)) (* a (* eps (exp (* b eps))))) 1)","(fma.f64 (fma.f64 eps a #s(literal 1 binary64)) (pow.f64 (exp.f64 b) eps) #s(literal -1 binary64))","(- (+ (exp (* b eps)) (* a (+ (* 1/2 (* a (* (pow eps 2) (exp (* b eps))))) (* eps (exp (* b eps)))))) 1)","(fma.f64 (*.f64 (pow.f64 (exp.f64 b) eps) (fma.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 eps eps) eps)) a (expm1.f64 (*.f64 eps b)))","(- (+ (exp (* b eps)) (* a (+ (* a (+ (* 1/6 (* a (* (pow eps 3) (exp (* b eps))))) (* 1/2 (* (pow eps 2) (exp (* b eps)))))) (* eps (exp (* b eps)))))) 1)","(fma.f64 (fma.f64 (*.f64 (pow.f64 (exp.f64 b) eps) (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/6 binary64) a) eps #s(literal 1/2 binary64)))) a (*.f64 (pow.f64 (exp.f64 b) eps) eps)) a (expm1.f64 (*.f64 eps b)))","(* a eps)","(*.f64 eps a)","(* a (+ eps (* 1/2 (* a (pow eps 2)))))","(*.f64 (fma.f64 (*.f64 (*.f64 a a) eps) #s(literal 1/2 binary64) a) eps)","(* a (+ eps (* a (+ (* 1/6 (* a (pow eps 3))) (* 1/2 (pow eps 2))))))","(*.f64 (fma.f64 (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/6 binary64) a) eps #s(literal 1/2 binary64))) a eps) a)","(* a (+ eps (* a (+ (* 1/2 (pow eps 2)) (* a (+ (* 1/24 (* a (pow eps 4))) (* 1/6 (pow eps 3))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) a) #s(literal 1/24 binary64) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64))) a (*.f64 (*.f64 eps eps) #s(literal 1/2 binary64))) a eps) a)","(/ 1 a)","(/.f64 #s(literal 1 binary64) a)","(/ (+ 1 (* a (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) a)","(/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))))) a #s(literal 1 binary64)) a)","(/ (+ 1 (* a (- (+ (* a (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))))))) a (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b)))))) a #s(literal 1 binary64)) a)","(/ (+ 1 (* a (- (+ (* a (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (* a (- (* 1/6 (/ (* (pow eps 3) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))) #s(literal 1/6 binary64)) #s(literal 1/24 binary64)) (neg.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b)))))) (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))))))) eps) #s(literal 1/2 binary64))))) a (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b)))))))) a (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 eps b)))))) a #s(literal 1 binary64)) a)","(- (exp (* eps (+ a b))) 1)","(expm1.f64 (*.f64 (+.f64 b a) eps))","(- (exp (* a eps)) 1)","(expm1.f64 (*.f64 eps a))","(/ (* eps (- (exp (* eps (+ a b))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps) (*.f64 (expm1.f64 (*.f64 eps a)) (expm1.f64 (*.f64 eps b))))","(- (exp (* eps (- b (* -1 a)))) 1)","(expm1.f64 (*.f64 (+.f64 b a) eps))","(/ (* eps (- (exp (* eps (- b (* -1 a)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps) (*.f64 (expm1.f64 (*.f64 eps a)) (expm1.f64 (*.f64 eps b))))","(- (+ (exp (* a eps)) (* b (* eps (exp (* a eps))))) 1)","(fma.f64 (fma.f64 eps b #s(literal 1 binary64)) (pow.f64 (exp.f64 a) eps) #s(literal -1 binary64))","(- (+ (exp (* a eps)) (* b (+ (* 1/2 (* b (* (pow eps 2) (exp (* a eps))))) (* eps (exp (* a eps)))))) 1)","(fma.f64 (*.f64 (pow.f64 (exp.f64 a) eps) (fma.f64 (*.f64 #s(literal 1/2 binary64) b) (*.f64 eps eps) eps)) b (expm1.f64 (*.f64 eps a)))","(- (+ (exp (* a eps)) (* b (+ (* b (+ (* 1/6 (* b (* (pow eps 3) (exp (* a eps))))) (* 1/2 (* (pow eps 2) (exp (* a eps)))))) (* eps (exp (* a eps)))))) 1)","(fma.f64 (fma.f64 (*.f64 (pow.f64 (exp.f64 a) eps) (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/6 binary64) b) eps #s(literal 1/2 binary64)))) b (*.f64 (pow.f64 (exp.f64 a) eps) eps)) b (expm1.f64 (*.f64 eps a)))","(* b eps)","(*.f64 eps b)","(* b (+ eps (* 1/2 (* b (pow eps 2)))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) b) (*.f64 eps eps) eps) b)","(* b (+ eps (* b (+ (* 1/6 (* b (pow eps 3))) (* 1/2 (pow eps 2))))))","(*.f64 (fma.f64 (*.f64 (*.f64 eps eps) (fma.f64 (*.f64 #s(literal 1/6 binary64) b) eps #s(literal 1/2 binary64))) b eps) b)","(* b (+ eps (* b (+ (* 1/2 (pow eps 2)) (* b (+ (* 1/24 (* b (pow eps 4))) (* 1/6 (pow eps 3))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) b) #s(literal 1/24 binary64) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64))) b (*.f64 (*.f64 eps eps) #s(literal 1/2 binary64))) b eps) b)","(/ 1 b)","(/.f64 #s(literal 1 binary64) b)","(/ (+ 1 (* b (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) b)","(/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64)) b)","(/ (+ 1 (* b (- (+ (* b (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))))) b (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a)))))) b #s(literal 1 binary64)) b)","(/ (+ 1 (* b (- (+ (* b (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (* b (- (* 1/6 (/ (* (pow eps 3) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))) #s(literal 1/6 binary64)) #s(literal 1/24 binary64)) (neg.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a)))))) (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))))) eps) #s(literal 1/2 binary64))))) b (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a)))))))) b (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a)))))) b #s(literal 1 binary64)) b)","(- (exp (* eps (- a (* -1 b)))) 1)","(expm1.f64 (*.f64 (+.f64 b a) eps))","(/ (* eps (- (exp (* eps (- a (* -1 b)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps) (*.f64 (expm1.f64 (*.f64 eps a)) (expm1.f64 (*.f64 eps b))))","(* eps (+ a b))","(*.f64 (+.f64 b a) eps)","(* eps (+ a (+ b (* 1/2 (* eps (pow (+ a b) 2))))))","(*.f64 (fma.f64 (*.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) #s(literal 1/2 binary64)) eps (+.f64 b a)) eps)","(* eps (+ a (+ b (* eps (+ (* 1/6 (* eps (pow (+ a b) 3))) (* 1/2 (pow (+ a b) 2)))))))","(*.f64 (fma.f64 (*.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) (fma.f64 (*.f64 #s(literal 1/6 binary64) eps) (+.f64 b a) #s(literal 1/2 binary64))) eps (+.f64 b a)) eps)","(* eps (+ a (+ b (* eps (+ (* 1/2 (pow (+ a b) 2)) (* eps (+ (* 1/24 (* eps (pow (+ a b) 4))) (* 1/6 (pow (+ a b) 3)))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 (+.f64 b a) #s(literal 4 binary64)) eps) #s(literal 1/24 binary64) (*.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) #s(literal 1/6 binary64))) eps (*.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) #s(literal 1/2 binary64))) eps (+.f64 b a)) eps)","(* eps (+ a (* 1/2 (* (pow a 2) eps))))","(*.f64 (fma.f64 (*.f64 (*.f64 a a) eps) #s(literal 1/2 binary64) a) eps)","(* eps (+ a (* eps (+ (* 1/6 (* (pow a 3) eps)) (* 1/2 (pow a 2))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) eps) #s(literal 1/6 binary64) (*.f64 (*.f64 a a) #s(literal 1/2 binary64))) eps a) eps)","(* eps (+ a (* eps (+ (* 1/2 (pow a 2)) (* eps (+ (* 1/24 (* (pow a 4) eps)) (* 1/6 (pow a 3))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) eps) #s(literal 1/24 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))) eps (*.f64 (*.f64 a a) #s(literal 1/2 binary64))) eps a) eps)","(* eps (+ b (* 1/2 (* (pow b 2) eps))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) b) (*.f64 eps eps) eps) b)","(* eps (+ b (* eps (+ (* 1/6 (* (pow b 3) eps)) (* 1/2 (pow b 2))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 b #s(literal 3 binary64)) eps) #s(literal 1/6 binary64) (*.f64 (*.f64 b b) #s(literal 1/2 binary64))) eps b) eps)","(* eps (+ b (* eps (+ (* 1/2 (pow b 2)) (* eps (+ (* 1/24 (* (pow b 4) eps)) (* 1/6 (pow b 3))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) eps) #s(literal 1/24 binary64) (*.f64 (pow.f64 b #s(literal 3 binary64)) #s(literal 1/6 binary64))) eps (*.f64 (*.f64 b b) #s(literal 1/2 binary64))) eps b) eps)","(/ (+ a b) (* a b))","(/.f64 (/.f64 (+.f64 b a) b) a)","(+ (* eps (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (fma.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/6 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) a)) (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 b #s(literal 3 binary64)) (*.f64 b (fma.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) (*.f64 (*.f64 b a) a)) (/.f64 (+.f64 b a) b) (*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) b))))) eps (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a)))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (+ (* 1/6 (/ (pow (+ a b) 3) (* a b))) (* eps (- (* 1/24 (/ (pow (+ a b) 4) (* a b))) (+ (/ (* (+ a b) (+ (* 1/24 (* a (pow b 4))) (+ (* 1/24 (* (pow a 4) b)) (+ (* 1/12 (* (pow a 2) (pow b 3))) (* 1/12 (* (pow a 3) (pow b 2))))))) (* (pow a 2) (pow b 2))) (+ (/ (* (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2))))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b))))) (* a b))))))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/24 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 4 binary64)) a)) (fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 (*.f64 b a) a) b) (+.f64 b a)) #s(literal 1/12 binary64) (*.f64 #s(literal 1/24 binary64) (fma.f64 (pow.f64 a #s(literal 4 binary64)) b (*.f64 (pow.f64 b #s(literal 4 binary64)) a)))) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (fma.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/6 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) a)) (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 b #s(literal 3 binary64)) (*.f64 b (fma.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) (*.f64 (*.f64 b a) a)) (/.f64 (+.f64 b a) b) (*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) b))))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) b)) (*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 b #s(literal 3 binary64)) (*.f64 b (fma.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) (*.f64 b a)))))) eps (-.f64 (*.f64 (/.f64 #s(literal 1/6 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) a)) (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) a) (pow.f64 b #s(literal 3 binary64)) (*.f64 b (fma.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) (*.f64 (*.f64 b a) a)) (/.f64 (+.f64 b a) b) (*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) b)))))) eps (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a)))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))"]],"stop":[["iter limit",1],["node limit",1]],"time":241.162109375,"type":"simplify"},{"count":[[4,364]],"egraph":[[0,8509,32,0.066798202],[2,766,44,0.023559711],[1,108,44,0.00247873],[0,30,44,0.000983862],[0,17,44,0.000188239]],"inputs":[["(-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))","(-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64))","(-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))","(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))"]],"memory":[[-4243408,54272448]],"outputs":[["(*.f64 (+.f64 (pow.f64 (exp.f64 (+.f64 b a)) (*.f64 eps #s(literal 1/2 binary64))) #s(literal 1 binary64)) (expm1.f64 (*.f64 (+.f64 b a) (*.f64 eps #s(literal 1/2 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) #s(literal 1 binary64)))","(*.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)))))","(*.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)))))","(*.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) #s(literal 1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)))))","(*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 eps (+.f64 b a))))","(pow.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 eps (+.f64 b a)))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)))) (*.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 (+.f64 b a) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))) (/.f64 (pow.f64 (exp.f64 eps) (*.f64 (+.f64 b a) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)))) (*.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 (+.f64 b a) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) (fma.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 (+.f64 b a) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 (+.f64 b a) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))) (/.f64 (pow.f64 (exp.f64 eps) (*.f64 (+.f64 b a) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))) (fma.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 (+.f64 b a) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 eps) (*.f64 (+.f64 b a) #s(literal 3 binary64)))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (*.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 eps) (+.f64 b a))))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) #s(literal 1 binary64)) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 eps (+.f64 b a))) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 eps (+.f64 b a))) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 (+.f64 b a) #s(literal 3 binary64))) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (*.f64 (+.f64 b a) #s(literal 3 binary64))))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 eps) (*.f64 (+.f64 b a) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a)))) (-.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 eps) (+.f64 b a))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) #s(literal 1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))))","(/.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 eps (+.f64 b a))))))","(/.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))) (-.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) #s(literal 1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))))","(/.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) #s(literal 1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 eps (+.f64 b a)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 eps (+.f64 b a)))))","(neg.f64 (neg.f64 (expm1.f64 (*.f64 eps (+.f64 b a)))))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 (+.f64 b a)) (*.f64 eps #s(literal 1/2 binary64)))) (pow.f64 (exp.f64 (+.f64 b a)) (*.f64 eps #s(literal 1/2 binary64))) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 eps) (/.f64 (+.f64 b a) #s(literal 2 binary64))) (pow.f64 (exp.f64 eps) (/.f64 (+.f64 b a) #s(literal 2 binary64))) #s(literal -1 binary64))","(fma.f64 (/.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 (+.f64 b a)) (*.f64 eps #s(literal 1/2 binary64))) (*.f64 (pow.f64 (exp.f64 (+.f64 b a)) (*.f64 eps #s(literal 1/2 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 (+.f64 b a)) (*.f64 eps #s(literal 1/2 binary64))) (pow.f64 (exp.f64 (+.f64 b a)) (*.f64 eps #s(literal 1/2 binary64))) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 eps) (*.f64 (+.f64 b a) #s(literal 3 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 eps) b) (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 eps) a) (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal 1 binary64) #s(literal -1 binary64))","(expm1.f64 (*.f64 (log.f64 (exp.f64 eps)) (+.f64 b a)))","(expm1.f64 (*.f64 eps (+.f64 b a)))","(-.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 (+.f64 b a) #s(literal 3 binary64))) (-.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) #s(literal 1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) #s(literal 1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)))))","(-.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 (+.f64 b a) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal 1 binary64))","(+.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 (+.f64 b a) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 eps) (+.f64 b a)))","(+.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))","(*.f64 (+.f64 (pow.f64 (exp.f64 a) (*.f64 eps #s(literal 1/2 binary64))) #s(literal 1 binary64)) (expm1.f64 (*.f64 a (*.f64 eps #s(literal 1/2 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))) (/.f64 (expm1.f64 (*.f64 eps a)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)))))","(*.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)))))","(*.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 eps a)) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 2 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) #s(literal 1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)))))","(*.f64 (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 3 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 eps a)))","(pow.f64 (pow.f64 (expm1.f64 (*.f64 eps a)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)))) (*.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64))) (/.f64 (pow.f64 (exp.f64 eps) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)))) (*.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))) (fma.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64))) (/.f64 (pow.f64 (exp.f64 eps) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64))) (fma.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 eps) (*.f64 a #s(literal 3 binary64)))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 eps) a)))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (*.f64 eps a) #s(literal 3 binary64)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 eps) a) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (*.f64 a #s(literal 3 binary64))))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (pow.f64 (exp.f64 eps) a) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) #s(literal 1 binary64)) (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 eps a)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 eps) a) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)))) (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 eps a)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))) (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 eps) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a))) (-.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 eps) a)))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 2 binary64)))) (neg.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 3 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) #s(literal 1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 3 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64))))","(/.f64 (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 2 binary64))) (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (expm1.f64 (*.f64 eps a)) #s(literal -1 binary64))))","(/.f64 (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 3 binary64))) (-.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) #s(literal 1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))))","(/.f64 (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) #s(literal 1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))) (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (expm1.f64 (*.f64 eps a)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (expm1.f64 (*.f64 eps a)) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (expm1.f64 (*.f64 eps a))))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 a) (*.f64 eps #s(literal 1/2 binary64)))) (pow.f64 (exp.f64 a) (*.f64 eps #s(literal 1/2 binary64))) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 eps) (/.f64 a #s(literal 2 binary64))) (pow.f64 (exp.f64 eps) (/.f64 a #s(literal 2 binary64))) #s(literal -1 binary64))","(fma.f64 (/.f64 (pow.f64 (exp.f64 eps) a) (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 a) (*.f64 eps #s(literal 1/2 binary64))) (*.f64 (pow.f64 (exp.f64 a) (*.f64 eps #s(literal 1/2 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 a) (*.f64 eps #s(literal 1/2 binary64))) (pow.f64 (exp.f64 a) (*.f64 eps #s(literal 1/2 binary64))) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 eps) (*.f64 a #s(literal 3 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))","(expm1.f64 (*.f64 (log.f64 (exp.f64 eps)) a))","(expm1.f64 (*.f64 eps a))","(-.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 a #s(literal 3 binary64))) (-.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) #s(literal 1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) #s(literal 1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)))))","(-.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64))","(+.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64))) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 eps) a))","(+.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64))","(*.f64 (+.f64 (pow.f64 (exp.f64 b) (*.f64 eps #s(literal 1/2 binary64))) #s(literal 1 binary64)) (expm1.f64 (*.f64 b (*.f64 eps #s(literal 1/2 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))) (/.f64 (expm1.f64 (*.f64 eps b)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)))))","(*.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)))))","(*.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 eps b)) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) #s(literal 1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)))))","(*.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 eps b)))","(pow.f64 (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)))) (*.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 b #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64))) (/.f64 (pow.f64 (exp.f64 eps) (*.f64 b #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)))) (*.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 b #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))) (fma.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 b #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 b #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64))) (/.f64 (pow.f64 (exp.f64 eps) (*.f64 b #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64))) (fma.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 b #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 eps) (*.f64 b #s(literal 3 binary64)))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (*.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 eps) b)))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 eps) b) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (*.f64 b #s(literal 3 binary64))))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (pow.f64 (exp.f64 eps) b) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) #s(literal 1 binary64)) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 eps b)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 eps) b) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)))) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 eps b)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 eps) (*.f64 b #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b))) (-.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 eps) b)))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) (neg.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) #s(literal 1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64))))","(/.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64))) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64))))","(/.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64))) (-.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) #s(literal 1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))))","(/.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) #s(literal 1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (expm1.f64 (*.f64 eps b))))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 b) (*.f64 eps #s(literal 1/2 binary64)))) (pow.f64 (exp.f64 b) (*.f64 eps #s(literal 1/2 binary64))) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 eps) (/.f64 b #s(literal 2 binary64))) (pow.f64 (exp.f64 eps) (/.f64 b #s(literal 2 binary64))) #s(literal -1 binary64))","(fma.f64 (/.f64 (pow.f64 (exp.f64 eps) b) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 b) (*.f64 eps #s(literal 1/2 binary64))) (*.f64 (pow.f64 (exp.f64 b) (*.f64 eps #s(literal 1/2 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 b) (*.f64 eps #s(literal 1/2 binary64))) (pow.f64 (exp.f64 b) (*.f64 eps #s(literal 1/2 binary64))) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 eps) (*.f64 b #s(literal 3 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))","(expm1.f64 (*.f64 (log.f64 (exp.f64 eps)) b))","(expm1.f64 (*.f64 eps b))","(-.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 b #s(literal 3 binary64))) (-.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) #s(literal 1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) #s(literal 1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)))))","(-.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 b #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64))","(+.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 (exp.f64 eps) (*.f64 b #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64))) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 eps) b))","(+.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))","(*.f64 (*.f64 (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64)) (expm1.f64 (*.f64 eps (+.f64 b a)))) eps)","(*.f64 (*.f64 (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64)) eps) (expm1.f64 (*.f64 eps (+.f64 b a))))","(*.f64 (*.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b))) (/.f64 eps (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 2 binary64))))) (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b))) (/.f64 eps (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 3 binary64))))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)))","(*.f64 (*.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b))) eps) (pow.f64 (expm1.f64 (*.f64 eps a)) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 eps (expm1.f64 (*.f64 eps a))) (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64))))) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 eps (expm1.f64 (*.f64 eps a))) (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64))))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64))))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps a)))) (/.f64 eps (expm1.f64 (*.f64 eps b))))","(*.f64 (*.f64 #s(literal 1 binary64) (/.f64 eps (expm1.f64 (*.f64 eps b)))) (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps a))))","(*.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 eps) (expm1.f64 (*.f64 eps (+.f64 b a))))) (/.f64 #s(literal -1 binary64) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a)))))","(*.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64))))) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps)) #s(literal -1/2 binary64)) (pow.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps)) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (/.f64 eps (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 eps (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 2 binary64)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) (/.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 2 binary64)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (/.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 3 binary64)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) (/.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 3 binary64)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (/.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) (/.f64 (pow.f64 (expm1.f64 (*.f64 eps a)) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (/.f64 (pow.f64 (expm1.f64 (*.f64 eps a)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 eps (+.f64 b a)))) #s(literal -1 binary64)) (/.f64 eps (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a)))))","(*.f64 (/.f64 (neg.f64 eps) #s(literal -1 binary64)) (/.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b))) (expm1.f64 (*.f64 eps a))))","(*.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (neg.f64 (expm1.f64 (*.f64 eps a)))) (/.f64 (neg.f64 eps) (expm1.f64 (*.f64 eps b))))","(*.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (neg.f64 (expm1.f64 (*.f64 eps b)))) (/.f64 (neg.f64 eps) (expm1.f64 (*.f64 eps a))))","(*.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) #s(literal -1 binary64)) (/.f64 (neg.f64 eps) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a)))))","(*.f64 (/.f64 eps (neg.f64 (expm1.f64 (*.f64 eps a)))) (/.f64 (neg.f64 (expm1.f64 (*.f64 eps (+.f64 b a)))) (expm1.f64 (*.f64 eps b))))","(*.f64 (/.f64 eps (neg.f64 (expm1.f64 (*.f64 eps b)))) (/.f64 (neg.f64 (expm1.f64 (*.f64 eps (+.f64 b a)))) (expm1.f64 (*.f64 eps a))))","(*.f64 (/.f64 eps #s(literal -1 binary64)) (/.f64 (neg.f64 (expm1.f64 (*.f64 eps (+.f64 b a)))) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a)))))","(*.f64 (/.f64 eps (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) (/.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps a))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 eps (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (/.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps a))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 eps b))) (/.f64 (*.f64 (neg.f64 eps) (expm1.f64 (*.f64 eps (+.f64 b a)))) (expm1.f64 (*.f64 eps a))))","(*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 eps a))) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) (neg.f64 (expm1.f64 (*.f64 eps b)))))","(*.f64 (/.f64 (neg.f64 eps) (expm1.f64 (*.f64 eps a))) (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (neg.f64 (expm1.f64 (*.f64 eps b)))))","(*.f64 (/.f64 (neg.f64 eps) (expm1.f64 (*.f64 eps b))) (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (neg.f64 (expm1.f64 (*.f64 eps a)))))","(*.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 eps (+.f64 b a)))) (expm1.f64 (*.f64 eps a))) (/.f64 eps (neg.f64 (expm1.f64 (*.f64 eps b)))))","(*.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 eps (+.f64 b a)))) (expm1.f64 (*.f64 eps b))) (/.f64 eps (neg.f64 (expm1.f64 (*.f64 eps a)))))","(*.f64 (*.f64 #s(literal 1 binary64) eps) (/.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b))) (expm1.f64 (*.f64 eps a))))","(*.f64 (pow.f64 (/.f64 (expm1.f64 (*.f64 eps b)) eps) #s(literal -1 binary64)) (pow.f64 (/.f64 (expm1.f64 (*.f64 eps a)) (expm1.f64 (*.f64 eps (+.f64 b a)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (expm1.f64 (*.f64 eps a)) (expm1.f64 (*.f64 eps (+.f64 b a)))) #s(literal -1 binary64)) (pow.f64 (/.f64 (expm1.f64 (*.f64 eps b)) eps) #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 2 binary64)))) (*.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 3 binary64)))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)) (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) (*.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) (/.f64 eps (expm1.f64 (*.f64 eps a)))))","(*.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) (/.f64 (/.f64 eps (expm1.f64 (*.f64 eps a))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) (/.f64 eps (expm1.f64 (*.f64 eps a)))))","(*.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (/.f64 (/.f64 eps (expm1.f64 (*.f64 eps a))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 eps (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 2 binary64)))) (*.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b)))))","(*.f64 (/.f64 eps (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 2 binary64)))) (/.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 eps (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 3 binary64)))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)) (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b)))))","(*.f64 (/.f64 eps (expm1.f64 (*.f64 (*.f64 eps a) #s(literal 3 binary64)))) (/.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 eps) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (pow.f64 (exp.f64 eps) b)) #s(literal 1 binary64)))","(*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) (expm1.f64 (*.f64 eps b))) (pow.f64 (expm1.f64 (*.f64 eps a)) #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 eps (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 eps (+.f64 b a)))) (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (expm1.f64 (*.f64 eps (+.f64 b a)))) (*.f64 eps (/.f64 #s(literal -1 binary64) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))))))","(*.f64 (pow.f64 (expm1.f64 (*.f64 eps a)) #s(literal -1 binary64)) (pow.f64 (/.f64 (expm1.f64 (*.f64 eps b)) (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 eps a)) #s(literal -1 binary64)) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) (expm1.f64 (*.f64 eps b))))","(*.f64 (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))))","(*.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps a))) (/.f64 eps (expm1.f64 (*.f64 eps b))))","(*.f64 (/.f64 eps (expm1.f64 (*.f64 eps b))) (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps a))))","(*.f64 (neg.f64 eps) (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 #s(literal -1 binary64) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))))))","(*.f64 (/.f64 (*.f64 (neg.f64 eps) (expm1.f64 (*.f64 eps (+.f64 b a)))) (expm1.f64 (*.f64 eps a))) (/.f64 #s(literal 1 binary64) (neg.f64 (expm1.f64 (*.f64 eps b)))))","(*.f64 (/.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b))) (expm1.f64 (*.f64 eps a))) eps)","(*.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) (*.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 eps (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))))))","(*.f64 #s(literal -1 binary64) (*.f64 (/.f64 (neg.f64 eps) (expm1.f64 (*.f64 eps a))) (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b)))))","(*.f64 (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps))","(*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))) (*.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 eps (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))))))","(*.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b))) (/.f64 eps (expm1.f64 (*.f64 eps a))))","(*.f64 (/.f64 eps (expm1.f64 (*.f64 eps a))) (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b))))","(*.f64 (*.f64 (neg.f64 eps) (expm1.f64 (*.f64 eps (+.f64 b a)))) (/.f64 #s(literal -1 binary64) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a)))))","(*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a)))) #s(literal 1 binary64))","(*.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (*.f64 (/.f64 eps (expm1.f64 (*.f64 eps a))) (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64))))","(*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (*.f64 (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64)) (/.f64 eps (expm1.f64 (*.f64 eps a)))))","(*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (*.f64 (neg.f64 eps) (/.f64 #s(literal -1 binary64) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))))))","(*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (*.f64 (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64)) eps))","(*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a)))))","(*.f64 #s(literal 1 binary64) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a)))))","(*.f64 eps (*.f64 (pow.f64 (expm1.f64 (*.f64 eps a)) #s(literal -1 binary64)) (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b)))))","(*.f64 eps (/.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b))) (expm1.f64 (*.f64 eps a))))","(pow.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) (expm1.f64 (*.f64 eps b)))) (neg.f64 (expm1.f64 (*.f64 eps a))))","(/.f64 (neg.f64 (*.f64 (/.f64 eps (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 eps (+.f64 b a))))) (neg.f64 (expm1.f64 (*.f64 eps b))))","(/.f64 (*.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)))) (*.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64))) (neg.f64 (expm1.f64 (*.f64 eps b)))))","(/.f64 (*.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (+.f64 (pow.f64 (exp.f64 eps) (*.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))) (*.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64))) (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (neg.f64 (expm1.f64 (*.f64 eps b))))))","(/.f64 (*.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (*.f64 b #s(literal 3 binary64))))) (*.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64))) (+.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (exp.f64 eps) b) (expm1.f64 (*.f64 eps b))))))","(/.f64 (*.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) (*.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64))) (expm1.f64 (*.f64 eps b))))","(/.f64 (*.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (-.f64 (pow.f64 (pow.f64 (exp.f64 eps) b) #s(literal 4 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal 2 binary64)))) (*.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64))) (-.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64))) (pow.f64 (exp.f64 eps) b))))","(/.f64 (*.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (+.f64 (pow.f64 (pow.f64 (exp.f64 eps) b) #s(literal 6 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) #s(literal 3 binary64)))) (*.f64 (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64))) (+.f64 (pow.f64 (pow.f64 (exp.f64 eps) b) #s(literal 4 binary64)) (*.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) (-.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)))))))","(/.f64 (*.f64 (*.f64 (neg.f64 eps) (expm1.f64 (*.f64 eps (+.f64 b a)))) #s(literal 1 binary64)) (*.f64 (neg.f64 (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 eps b))))","(/.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 eps a)) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) eps)) (*.f64 (expm1.f64 (*.f64 eps b)) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))))","(/.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 eps a)) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))) eps)) (*.f64 (expm1.f64 (*.f64 eps b)) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 eps a)) #s(literal -1 binary64)) (*.f64 eps (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))))) (*.f64 (expm1.f64 (*.f64 eps b)) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))))","(/.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 eps a)) #s(literal -1 binary64)) (*.f64 eps (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))))) (*.f64 (expm1.f64 (*.f64 eps b)) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) eps)) (*.f64 (expm1.f64 (*.f64 eps a)) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))))","(/.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))) eps)) (*.f64 (expm1.f64 (*.f64 eps a)) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64)) (*.f64 eps (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))))) (*.f64 (expm1.f64 (*.f64 eps a)) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))))","(/.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64)) (*.f64 eps (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))))) (*.f64 (expm1.f64 (*.f64 eps a)) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal -1 binary64) (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) eps)) (*.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 eps b))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))))","(/.f64 (*.f64 #s(literal -1 binary64) (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))) eps)) (*.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 eps b))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal -1 binary64) (*.f64 eps (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))))) (*.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 eps b))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))))","(/.f64 (*.f64 #s(literal -1 binary64) (*.f64 eps (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))))) (*.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 eps b))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) eps)) (*.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))) eps)) (*.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 eps (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))))) (*.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 eps (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))))) (*.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))))","(/.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 eps (+.f64 b a)))) #s(literal 1 binary64)) (*.f64 (neg.f64 (expm1.f64 (*.f64 eps b))) (/.f64 (expm1.f64 (*.f64 eps a)) eps)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) (neg.f64 eps)) (*.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) (neg.f64 (expm1.f64 (*.f64 eps a)))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) (/.f64 (expm1.f64 (*.f64 eps a)) eps)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))) (neg.f64 eps)) (*.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))) (neg.f64 (expm1.f64 (*.f64 eps a)))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))) (/.f64 (expm1.f64 (*.f64 eps a)) eps)))","(/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) #s(literal 1 binary64)) (*.f64 (expm1.f64 (*.f64 eps b)) (/.f64 (expm1.f64 (*.f64 eps a)) eps)))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 eps)) (*.f64 (/.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps (+.f64 b a)))) (neg.f64 (expm1.f64 (*.f64 eps a)))))","(/.f64 (*.f64 (neg.f64 eps) (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64)))) (*.f64 (neg.f64 (expm1.f64 (*.f64 eps a))) (*.f64 (expm1.f64 (*.f64 eps b)) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)))))","(/.f64 (*.f64 (neg.f64 eps) (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64)))) (*.f64 (neg.f64 (expm1.f64 (*.f64 eps a))) (*.f64 (expm1.f64 (*.f64 eps b)) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)))))","(/.f64 (*.f64 (neg.f64 eps) #s(literal 1 binary64)) (*.f64 (neg.f64 (expm1.f64 (*.f64 eps a))) (/.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps (+.f64 b a))))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (expm1.f64 (*.f64 eps (+.f64 b a))))) (*.f64 (/.f64 (expm1.f64 (*.f64 eps a)) eps) (neg.f64 (expm1.f64 (*.f64 eps b)))))","(/.f64 (*.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64)))) (*.f64 (/.f64 (expm1.f64 (*.f64 eps a)) eps) (*.f64 (expm1.f64 (*.f64 eps b)) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64)))) (*.f64 (/.f64 (expm1.f64 (*.f64 eps a)) eps) (*.f64 (expm1.f64 (*.f64 eps b)) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)))))","(/.f64 (*.f64 eps #s(literal 1 binary64)) (*.f64 (expm1.f64 (*.f64 eps a)) (/.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps (+.f64 b a))))))","(/.f64 (*.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) eps) (pow.f64 (expm1.f64 (*.f64 eps a)) #s(literal -1 binary64))) (*.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (expm1.f64 (*.f64 eps b))))","(/.f64 (*.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) eps) (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64))) (*.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (expm1.f64 (*.f64 eps a))))","(/.f64 (*.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) eps) #s(literal -1 binary64)) (*.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (*.f64 (neg.f64 (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 eps b)))))","(/.f64 (*.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) eps) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a)))))","(/.f64 (*.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))) eps) (pow.f64 (expm1.f64 (*.f64 eps a)) #s(literal -1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) (expm1.f64 (*.f64 eps b))))","(/.f64 (*.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))) eps) (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) (expm1.f64 (*.f64 eps a))))","(/.f64 (*.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))) eps) #s(literal -1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) (*.f64 (neg.f64 (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 eps b)))))","(/.f64 (*.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))) eps) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a)))))","(/.f64 (*.f64 (*.f64 eps (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64)))) (pow.f64 (expm1.f64 (*.f64 eps a)) #s(literal -1 binary64))) (*.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (expm1.f64 (*.f64 eps b))))","(/.f64 (*.f64 (*.f64 eps (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64)))) (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64))) (*.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (expm1.f64 (*.f64 eps a))))","(/.f64 (*.f64 (*.f64 eps (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64)))) #s(literal -1 binary64)) (*.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (*.f64 (neg.f64 (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 eps b)))))","(/.f64 (*.f64 (*.f64 eps (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64)))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a)))))","(/.f64 (*.f64 (*.f64 eps (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64)))) (pow.f64 (expm1.f64 (*.f64 eps a)) #s(literal -1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) (expm1.f64 (*.f64 eps b))))","(/.f64 (*.f64 (*.f64 eps (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64)))) (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) (expm1.f64 (*.f64 eps a))))","(/.f64 (*.f64 (*.f64 eps (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64)))) #s(literal -1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) (*.f64 (neg.f64 (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 eps b)))))","(/.f64 (*.f64 (*.f64 eps (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a)))))","(/.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64)))) eps) (*.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a)))))","(/.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64)))) eps) (*.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a)))))","(/.f64 (*.f64 #s(literal 1 binary64) eps) (*.f64 (/.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps (+.f64 b a)))) (expm1.f64 (*.f64 eps a))))","(/.f64 (*.f64 #s(literal 1 binary64) eps) (*.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 eps (+.f64 b a)))) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a)))))","(/.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) (expm1.f64 (*.f64 eps b))) (expm1.f64 (*.f64 eps a)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) eps) (*.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) (expm1.f64 (*.f64 eps a))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) eps) (*.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a)))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))) eps) (*.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))) (expm1.f64 (*.f64 eps a))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))) eps) (*.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) #s(literal 1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a)))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64))) eps) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64)) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a)))))","(/.f64 (*.f64 (/.f64 eps (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 eps (+.f64 b a)))) (expm1.f64 (*.f64 eps b)))","(/.f64 (*.f64 eps (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64)))) (*.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))))","(/.f64 (*.f64 eps (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 3 binary64)))) (*.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) (+.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) (+.f64 b a))) (pow.f64 (exp.f64 eps) (+.f64 b a))) #s(literal 1 binary64))))","(/.f64 (/.f64 (*.f64 (neg.f64 eps) (expm1.f64 (*.f64 eps (+.f64 b a)))) (expm1.f64 (*.f64 eps a))) (neg.f64 (expm1.f64 (*.f64 eps b))))","(/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 eps b)))","(/.f64 #s(literal -1 binary64) (/.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) (*.f64 (neg.f64 eps) (expm1.f64 (*.f64 eps (+.f64 b a))))))","(/.f64 (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b))) (/.f64 (expm1.f64 (*.f64 eps a)) eps))","(/.f64 (/.f64 eps (expm1.f64 (*.f64 eps a))) (/.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps (+.f64 b a)))))","(/.f64 (*.f64 (neg.f64 eps) (expm1.f64 (*.f64 eps (+.f64 b a)))) (*.f64 (neg.f64 (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 eps b))))","(/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))))","(/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (*.f64 (/.f64 (expm1.f64 (*.f64 eps a)) eps) (expm1.f64 (*.f64 eps b))))","(/.f64 #s(literal 1 binary64) (/.f64 (expm1.f64 (*.f64 eps a)) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) (expm1.f64 (*.f64 eps b)))))","(/.f64 #s(literal 1 binary64) (/.f64 (expm1.f64 (*.f64 eps b)) (*.f64 (/.f64 eps (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 eps (+.f64 b a))))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (expm1.f64 (*.f64 eps a)) (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps)) (expm1.f64 (*.f64 eps b))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps)))","(/.f64 eps (/.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 eps (+.f64 b a)))))","(neg.f64 (/.f64 (/.f64 (*.f64 (neg.f64 eps) (expm1.f64 (*.f64 eps (+.f64 b a)))) (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 eps b))))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps))))","(neg.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (neg.f64 (expm1.f64 (*.f64 eps b)))))","(neg.f64 (*.f64 #s(literal 1 binary64) (*.f64 (/.f64 (neg.f64 eps) (expm1.f64 (*.f64 eps a))) (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b))))))","(neg.f64 (*.f64 (/.f64 (neg.f64 eps) (expm1.f64 (*.f64 eps a))) (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b)))))","(fma.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) (pow.f64 (exp.f64 eps) b) (*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) #s(literal 1 binary64)))","(fma.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) #s(literal 1 binary64) (*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) (pow.f64 (exp.f64 eps) b)))","(fma.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) #s(literal 1 binary64)) (*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (pow.f64 (exp.f64 eps) b)))","(fma.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) (*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b))))","(fma.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))))","(fma.f64 (*.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) eps) (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64)) (*.f64 (neg.f64 eps) (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64))))","(fma.f64 (*.f64 eps (pow.f64 (exp.f64 eps) (+.f64 b a))) (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64)) (*.f64 (*.f64 eps #s(literal -1 binary64)) (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64))))","(fma.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) #s(literal 1 binary64)) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (*.f64 (pow.f64 (exp.f64 eps) b) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64))))))","(fma.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (*.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64))))))","(fma.f64 (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) eps) (*.f64 (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64)) (neg.f64 eps)))","(fma.f64 (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64)) (*.f64 eps (pow.f64 (exp.f64 eps) (+.f64 b a))) (*.f64 (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64)) (*.f64 eps #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (*.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64))))))","(fma.f64 (pow.f64 (exp.f64 eps) b) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64))))))","(fma.f64 #s(literal 1 binary64) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) (*.f64 (pow.f64 (exp.f64 eps) b) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64))))))","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 (neg.f64 (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 eps b)))) (*.f64 (/.f64 (neg.f64 eps) (expm1.f64 (*.f64 eps a))) (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b)))))","(-.f64 #s(literal 0 binary64) (*.f64 (/.f64 (neg.f64 eps) (expm1.f64 (*.f64 eps a))) (/.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (expm1.f64 (*.f64 eps b)))))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps))) #s(literal -1 binary64)))","(+.f64 (*.f64 (pow.f64 (exp.f64 eps) b) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64))))) (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64))))))","(+.f64 (*.f64 #s(literal 1 binary64) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64))))) (*.f64 (pow.f64 (exp.f64 eps) b) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64))))))","(+.f64 (*.f64 (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) #s(literal 1 binary64)) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64))))) (*.f64 (pow.f64 (exp.f64 eps) b) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64))))))","(+.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64))))) (*.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64))))))","(+.f64 (*.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64))))) (*.f64 (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)) (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64))))))","(+.f64 (*.f64 (*.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) eps) (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64))) (*.f64 (neg.f64 eps) (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64))))","(+.f64 (*.f64 (*.f64 eps (pow.f64 (exp.f64 eps) (+.f64 b a))) (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64))) (*.f64 (*.f64 eps #s(literal -1 binary64)) (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64))))","(+.f64 (*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) (pow.f64 (exp.f64 eps) b)) (*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) #s(literal 1 binary64)) (*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 2 binary64)))) (pow.f64 (exp.f64 eps) b)))","(+.f64 (*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (+.f64 (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b)) #s(literal 1 binary64))) (*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (pow.f64 (exp.f64 eps) b)))","(+.f64 (*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))) (*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b))))","(+.f64 (*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (pow.f64 (exp.f64 eps) (*.f64 #s(literal 2 binary64) b))) (*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) (/.f64 eps (expm1.f64 (*.f64 eps a)))) (expm1.f64 (*.f64 (*.f64 eps b) #s(literal 3 binary64)))) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))))","(+.f64 (*.f64 (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64)) (*.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) eps)) (*.f64 (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64)) (neg.f64 eps)))","(+.f64 (*.f64 (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64)) (*.f64 eps (pow.f64 (exp.f64 eps) (+.f64 b a)))) (*.f64 (pow.f64 (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))) #s(literal -1 binary64)) (*.f64 eps #s(literal -1 binary64))))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":240.409912109375,"type":"rewrite"},{"compiler":[[15909,1605]],"memory":[[6577968,30370400]],"time":38.89404296875,"type":"eval"},{"alts":[["(/.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) eps)) (*.f64 (expm1.f64 (*.f64 eps a)) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))))","next",50.547955290434096,"binary64"],["(/.f64 (*.f64 (/.f64 eps (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 eps (+.f64 b a)))) (expm1.f64 (*.f64 eps b)))","fresh",44.166574078161226,"binary64"],["(/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))))","fresh",55.94910296106846,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a))))","next",51.77307670756691,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64)) b))","next",34.41857541082393,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a))","next",0.1640625,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","fresh",29.163799465689642,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","next",37.38168893579878,"binary64"]],"compiler":[[31,21],[18,13],[18,13],[66,38],[43,29],[32,21],[28,20],[28,20],[31,21],[18,13],[18,13],[66,38],[43,29],[32,21],[28,20],[28,20]],"count":[[403,8]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[402,8],"picked":[1,0]}],"memory":[[1979696,18384352]],"min-error":[[0.0390625,"binary64"]],"time":11.333984375,"type":"prune"},{"egraph":[[0,8373,500,0.088848335],[5,7659,513,0.016570343],[4,5437,513,0.019118507],[3,2027,521,0.017557465],[2,536,552,0.00615699],[1,221,559,0.001978579],[0,111,559,0.001069729],[0,65,575,0.000638106]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a))","(/.f64 (/.f64 (+.f64 b a) b) a)","(/.f64 (+.f64 b a) b)","(+.f64 b a)","b","a","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","(/.f64 #s(literal 1 binary64) a)","#s(literal 1 binary64)","a","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a))))","(fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))","(fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a)))","(*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64))","(*.f64 (*.f64 b a) (+.f64 b a))","(*.f64 b a)","b","a","(+.f64 b a)","#s(literal -1/2 binary64)","(/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b))","(*.f64 (*.f64 (*.f64 b a) a) b)","(*.f64 (*.f64 b a) a)","(*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))","(/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)","(pow.f64 (+.f64 b a) #s(literal 2 binary64))","#s(literal 2 binary64)","(/.f64 #s(literal 1/2 binary64) a)","#s(literal 1/2 binary64)","eps","(+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a))","(/.f64 #s(literal 1 binary64) b)","#s(literal 1 binary64)","(/.f64 #s(literal 1 binary64) a)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64)) b))","(/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64)) b)","(fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64))","(*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a)))))","eps","(+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))","#s(literal -1/2 binary64)","(/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a)))","(pow.f64 (exp.f64 a) eps)","(exp.f64 a)","a","(expm1.f64 (*.f64 eps a))","(*.f64 eps a)","b","#s(literal 1 binary64)","(/.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) eps)) (*.f64 (expm1.f64 (*.f64 eps a)) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) eps))","(pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64))","(expm1.f64 (*.f64 eps b))","(*.f64 eps b)","eps","b","#s(literal -1 binary64)","(*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) eps)","(expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64)))","(*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))","(*.f64 eps (+.f64 b a))","(+.f64 b a)","a","#s(literal 2 binary64)","(*.f64 (expm1.f64 (*.f64 eps a)) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)))","(expm1.f64 (*.f64 eps a))","(*.f64 eps a)","(-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))","(pow.f64 (exp.f64 eps) (+.f64 b a))","(exp.f64 eps)"]],"locations":[["(expm1.f64 (*.f64 eps b))","cost-diff",0],["(pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64))","cost-diff",0],["(*.f64 (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) eps))","cost-diff",2],["(/.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) eps)) (*.f64 (expm1.f64 (*.f64 eps a)) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))))","cost-diff",11],["(*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a)))))","cost-diff",0],["(fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64))","cost-diff",0],["(/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64)) b)","cost-diff",0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64)) b))","cost-diff",0],["(*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64))","cost-diff",0],["(fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))","cost-diff",0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a))))","cost-diff",0],["(fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a)))","cost-diff",12],["(/.f64 #s(literal 1 binary64) a)","cost-diff",0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","cost-diff",0],["(+.f64 b a)","cost-diff",0],["(/.f64 (+.f64 b a) b)","cost-diff",0],["(/.f64 (/.f64 (+.f64 b a) b) a)","cost-diff",0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a))","cost-diff",0]],"memory":[[-11145024,44413792]],"method":["egg-herbie"],"outputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a))","(/.f64 (/.f64 (+.f64 b a) b) a)","(/.f64 (+.f64 b a) b)","(+.f64 b a)","b","a","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","(/.f64 #s(literal 1 binary64) a)","#s(literal 1 binary64)","a","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a))))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (fma.f64 (*.f64 (/.f64 (+.f64 b a) b) (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (+.f64 b a) (/.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a))))","(fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))","(fma.f64 (*.f64 (/.f64 (+.f64 b a) b) (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (+.f64 b a) (/.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))","(fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a)))","(*.f64 (/.f64 (+.f64 b a) b) (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (+.f64 b a) (/.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) a)))","(*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64))","(*.f64 (*.f64 #s(literal -1/2 binary64) a) (*.f64 (+.f64 b a) b))","(*.f64 (*.f64 b a) (+.f64 b a))","(*.f64 (*.f64 (+.f64 b a) b) a)","(*.f64 b a)","b","a","(+.f64 b a)","#s(literal -1/2 binary64)","(/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b))","(/.f64 (/.f64 (/.f64 (/.f64 (+.f64 b a) b) b) a) a)","(*.f64 (*.f64 (*.f64 b a) a) b)","(*.f64 (*.f64 b a) a)","(*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 (/.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) a) #s(literal 1/2 binary64))","(/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)","(pow.f64 (+.f64 b a) #s(literal 2 binary64))","#s(literal 2 binary64)","(/.f64 #s(literal 1/2 binary64) a)","#s(literal 1/2 binary64)","eps","(+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a))","(/.f64 #s(literal 1 binary64) b)","#s(literal 1 binary64)","(/.f64 #s(literal 1 binary64) a)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64)) b))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (fma.f64 (*.f64 b eps) (+.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal -1/2 binary64)) #s(literal 1 binary64)) b))","(/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64)) b)","(/.f64 (fma.f64 (*.f64 b eps) (+.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal -1/2 binary64)) #s(literal 1 binary64)) b)","(fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64))","(fma.f64 (*.f64 b eps) (+.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal -1/2 binary64)) #s(literal 1 binary64))","(*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a)))))","(*.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal -1/2 binary64)) eps)","eps","(+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))","(+.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal -1/2 binary64))","#s(literal -1/2 binary64)","(/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a)))","(/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps)))","(pow.f64 (exp.f64 a) eps)","(exp.f64 a)","a","(expm1.f64 (*.f64 eps a))","(expm1.f64 (*.f64 a eps))","(*.f64 eps a)","(*.f64 a eps)","b","#s(literal 1 binary64)","(/.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) eps)) (*.f64 (expm1.f64 (*.f64 eps a)) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 eps (expm1.f64 (*.f64 a eps))) (expm1.f64 (*.f64 b eps))) (expm1.f64 (*.f64 (+.f64 b a) eps)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) eps))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps) (expm1.f64 (*.f64 b eps)))","(pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64))","(pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal -1 binary64))","(expm1.f64 (*.f64 eps b))","(expm1.f64 (*.f64 b eps))","(*.f64 eps b)","(*.f64 b eps)","eps","b","#s(literal -1 binary64)","(*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) eps)","(*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps)","(expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64)))","(expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64)))","(*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))","(*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))","(*.f64 eps (+.f64 b a))","(*.f64 (+.f64 b a) eps)","(+.f64 b a)","a","#s(literal 2 binary64)","(*.f64 (expm1.f64 (*.f64 eps a)) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (expm1.f64 (*.f64 a eps)))","(expm1.f64 (*.f64 eps a))","(expm1.f64 (*.f64 a eps))","(*.f64 eps a)","(*.f64 a eps)","(-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))","(pow.f64 (exp.f64 eps) (+.f64 b a))","(exp.f64 eps)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":329.532958984375,"type":"simplify"},{"compiler":[[543,63]],"locations":[["(*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) eps)","accuracy",0.0703125],["(pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64))","accuracy",0.08984375],["(/.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) eps)) (*.f64 (expm1.f64 (*.f64 eps a)) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))))","accuracy",32.82907369029827],["(*.f64 (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) eps))","accuracy",49.43222491761313],["(fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64))","accuracy",0.0859375],["(/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a)))","accuracy",0.0859375],["(/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64)) b)","accuracy",0.10546875],["(*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a)))))","accuracy",34.19082037998971],["(*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))","accuracy",0.296875],["(/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b))","accuracy",3.4229595329379094],["(/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)","accuracy",16.877312519201404],["(fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a)))","accuracy",62.78685012551246],["(/.f64 #s(literal 1 binary64) a)","accuracy",0.0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","accuracy",37.38168893579878],["(+.f64 b a)","accuracy",0.0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a))","accuracy",0.0],["(/.f64 (+.f64 b a) b)","accuracy",0.05859375],["(/.f64 (/.f64 (+.f64 b a) b) a)","accuracy",0.15234375]],"memory":[[3529696,117143168]],"mixsample":[[28.035400390625,"adjust",800],[30.134765625,"ival-div",0],[6.048828125,"ival-exp",0],[1.391845703125,"ival-mult",1200],[1.092529296875,"ival-pow2",400],[2.53125,"ival-div",400],[4.036865234375,"ival-div",1600],[0.147705078125,"ival-assert",0],[2.826904296875,"ival-sub",0],[0.418212890625,"ival-pow2",1200],[39.401123046875,"ival-pow",0],[0.244873046875,"ival-pow2",2400],[5.425048828125,"ival-mult",800],[19.1728515625,"ival-add",0],[2.246826171875,"ival-mult",1600],[0.2333984375,"ival-add",400],[2.697998046875,"ival-div",2000],[0.364990234375,"ival-mult",2400],[2.957275390625,"ival-pow2",0],[0.6552734375,"ival-div",2400],[0.175537109375,"ival-add",1200],[1.175048828125,"ival-pow2",800],[1.627197265625,"ival-mult",2000],[0.3359375,"ival-pow2",2000],[27.59130859375,"adjust",2000],[0.822265625,"ival-div",1200],[4.81103515625,"ival-mult",400],[58.618896484375,"ival-mult",0],[17.87353515625,"ival-expm1",0],[2.52001953125,"ival-div",800],[0.31982421875,"ival-true",0],[0.6943359375,"exact",0],[0.48828125,"ival-add",800]],"outcomes":[[346.050048828125,2,"valid",256]],"time":436.7890625,"type":"localize"},{"count":[[23,180]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a))","(/.f64 (/.f64 (+.f64 b a) b) a)","(/.f64 (+.f64 b a) b)","(+.f64 b a)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","(/.f64 #s(literal 1 binary64) a)","(fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a))))","(fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))","(*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64)) b))","(/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64)) b)","(fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64))","(*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a)))))","(/.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) eps)) (*.f64 (expm1.f64 (*.f64 eps a)) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) eps))","(pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64))","(expm1.f64 (*.f64 eps b))","(/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)","(/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b))","(*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))","(/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a)))","(*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) eps)"]],"memory":[[9708544,70055776]],"outputs":[["(/ 1 a)","(/ (+ 1 (* a (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (* a (- (* 1/6 (/ (* (pow eps 3) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/ (+ 1 (/ a b)) a)","1","(+ 1 (/ a b))","b","(+ a b)","(/ (+ (* -1/2 b) (* 1/2 b)) a)","(/ (+ 1 (* eps (+ (* -1/2 b) (* 1/2 b)))) a)","(/ (+ 1 (+ (* eps (+ (* -1/2 b) (* 1/2 b))) (/ a b))) a)","(* -1/2 (* a (pow b 2)))","(* a (+ (* -1/2 (* a b)) (* -1/2 (pow b 2))))","(/ (+ 1 (* a (+ (* a (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))) (/ 1 b)))) a)","(/ (+ 1 (* a (+ (* a (+ (* a (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))) (/ 1 b)))) a)","(/ b a)","(/ (+ a b) a)","(/ (+ b (* a (+ 1 (* a (* b (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))))) a)","(/ (+ b (* a (+ 1 (* a (+ (* a (* b (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))))))) (* b (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) a)","(/ (+ 1 (* (pow a 2) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))) a)","(/ (+ 1 (* (pow a 2) (+ (* a (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))) a)","(/ (+ 1 (* (pow a 2) (+ (* a (+ (* a (* eps (- (* 1/24 (pow eps 3)) (+ (* 1/120 (pow eps 3)) (+ (* 1/48 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))) (* 1/2 (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))))))))) (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))))))) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))) a)","(/ (- (exp (* 2 (* b eps))) 1) (* a (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1))))","(/ (- (+ (* a (- (* 2 (/ (* eps (exp (* 2 (* b eps)))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 2) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (exp (* 2 (* b eps))) 1)) (* eps (* (pow (+ 1 (exp (* b eps))) 2) (pow (- (exp (* b eps)) 1) 2)))))) (/ (exp (* 2 (* b eps))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (/ 1 (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) a)","(/ (- (+ (* a (- (+ (* 2 (/ (* eps (exp (* 2 (* b eps)))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* a (- (* 2 (/ (* (pow eps 2) (exp (* 2 (* b eps)))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (+ (/ (* (+ (* 1/6 (* (pow eps 3) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 3) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (exp (* 2 (* b eps))) 1)) (* eps (* (pow (+ 1 (exp (* b eps))) 2) (pow (- (exp (* b eps)) 1) 2)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 2) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (* 2 (/ (* eps (exp (* 2 (* b eps)))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 2) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (exp (* 2 (* b eps))) 1)) (* eps (* (pow (+ 1 (exp (* b eps))) 2) (pow (- (exp (* b eps)) 1) 2)))))) (* eps (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))))))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 2) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (exp (* 2 (* b eps))) 1)) (* eps (* (pow (+ 1 (exp (* b eps))) 2) (pow (- (exp (* b eps)) 1) 2)))))) (/ (exp (* 2 (* b eps))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (/ 1 (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) a)","(/ (- (+ (* a (- (+ (* 2 (/ (* eps (exp (* 2 (* b eps)))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* a (- (+ (* 2 (/ (* (pow eps 2) (exp (* 2 (* b eps)))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* a (- (* 4/3 (/ (* (pow eps 3) (exp (* 2 (* b eps)))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (+ (/ (* (+ (* 1/24 (* (pow eps 4) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (+ (* 1/4 (* (pow eps 4) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (* 1/3 (* (pow eps 4) (* (exp (* b eps)) (- (exp (* b eps)) 1)))))) (- (exp (* 2 (* b eps))) 1)) (* eps (* (pow (+ 1 (exp (* b eps))) 2) (pow (- (exp (* b eps)) 1) 2)))) (+ (/ (* (+ (* 1/6 (* (pow eps 3) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 3) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (* 2 (/ (* eps (exp (* 2 (* b eps)))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 2) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (exp (* 2 (* b eps))) 1)) (* eps (* (pow (+ 1 (exp (* b eps))) 2) (pow (- (exp (* b eps)) 1) 2)))))) (* eps (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 2) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (* 2 (/ (* (pow eps 2) (exp (* 2 (* b eps)))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (+ (/ (* (+ (* 1/6 (* (pow eps 3) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 3) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (exp (* 2 (* b eps))) 1)) (* eps (* (pow (+ 1 (exp (* b eps))) 2) (pow (- (exp (* b eps)) 1) 2)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 2) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (* 2 (/ (* eps (exp (* 2 (* b eps)))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 2) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (exp (* 2 (* b eps))) 1)) (* eps (* (pow (+ 1 (exp (* b eps))) 2) (pow (- (exp (* b eps)) 1) 2)))))) (* eps (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1))))))) (* eps (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1))))))))) (+ (/ (* (+ (* 1/6 (* (pow eps 3) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 3) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (exp (* 2 (* b eps))) 1)) (* eps (* (pow (+ 1 (exp (* b eps))) 2) (pow (- (exp (* b eps)) 1) 2)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 2) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (* 2 (/ (* eps (exp (* 2 (* b eps)))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 2) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (exp (* 2 (* b eps))) 1)) (* eps (* (pow (+ 1 (exp (* b eps))) 2) (pow (- (exp (* b eps)) 1) 2)))))) (* eps (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))))))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 2) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (exp (* 2 (* b eps))) 1)) (* eps (* (pow (+ 1 (exp (* b eps))) 2) (pow (- (exp (* b eps)) 1) 2)))))) (/ (exp (* 2 (* b eps))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (/ 1 (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) a)","(/ (* eps (- (exp (* 2 (* b eps))) 1)) (- (exp (* b eps)) 1))","(+ (* 2 (/ (* a (* (pow eps 2) (exp (* 2 (* b eps))))) (- (exp (* b eps)) 1))) (/ (* eps (- (exp (* 2 (* b eps))) 1)) (- (exp (* b eps)) 1)))","(+ (* a (+ (* 2 (/ (* a (* (pow eps 3) (exp (* 2 (* b eps))))) (- (exp (* b eps)) 1))) (* 2 (/ (* (pow eps 2) (exp (* 2 (* b eps)))) (- (exp (* b eps)) 1))))) (/ (* eps (- (exp (* 2 (* b eps))) 1)) (- (exp (* b eps)) 1)))","(+ (* a (+ (* 2 (/ (* (pow eps 2) (exp (* 2 (* b eps)))) (- (exp (* b eps)) 1))) (* a (+ (* 4/3 (/ (* a (* (pow eps 4) (exp (* 2 (* b eps))))) (- (exp (* b eps)) 1))) (* 2 (/ (* (pow eps 3) (exp (* 2 (* b eps)))) (- (exp (* b eps)) 1))))))) (/ (* eps (- (exp (* 2 (* b eps))) 1)) (- (exp (* b eps)) 1)))","(+ b (* 2 a))","(+ b (* a (+ 2 (/ a b))))","(/ 1 (* (pow a 2) b))","(/ (+ (/ 1 b) (/ a (pow b 2))) (pow a 2))","(* 1/2 (/ b a))","(/ (+ a (* 1/2 b)) a)","(/ (+ (* 1/2 b) (* a (+ 1 (* 1/2 (/ a b))))) a)","(/ 1 (* a eps))","(/ (+ (* 1/2 a) (/ 1 eps)) a)","(/ (+ (* a (+ 1/2 (* a (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))) (/ 1 eps)) a)","(/ (+ (* a (+ 1/2 (* a (- (+ (* 1/2 eps) (* a (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) (+ (* 1/6 eps) (* 1/4 eps)))))) (/ 1 eps)) a)","(* eps (- (exp (* 2 (* b eps))) 1))","(+ (* 2 (* a (* (pow eps 2) (exp (* 2 (* b eps)))))) (* eps (- (exp (* 2 (* b eps))) 1)))","(+ (* a (+ (* 2 (* a (* (pow eps 3) (exp (* 2 (* b eps)))))) (* 2 (* (pow eps 2) (exp (* 2 (* b eps))))))) (* eps (- (exp (* 2 (* b eps))) 1)))","(+ (* a (+ (* 2 (* (pow eps 2) (exp (* 2 (* b eps))))) (* a (+ (* 4/3 (* a (* (pow eps 4) (exp (* 2 (* b eps)))))) (* 2 (* (pow eps 3) (exp (* 2 (* b eps))))))))) (* eps (- (exp (* 2 (* b eps))) 1)))","(/ (* eps (- (exp (* eps (+ a b))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/ 1 b)","(+ (/ 1 a) (/ 1 b))","(/ a b)","(* a (+ (/ 1 a) (/ 1 b)))","a","(* a (+ 1 (/ b a)))","(+ (/ 1 a) (+ (/ 1 b) (/ (* eps (+ (* -1/2 b) (* 1/2 b))) a)))","(* -1/2 (* (pow a 2) b))","(* (pow a 2) (+ (* -1/2 b) (* -1/2 (/ (pow b 2) a))))","(/ (+ 1 (* b (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)))) b)","(+ 1 (* b (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))))","(* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))","(/ (* eps (- (exp (* 2 (* eps (+ a b)))) 1)) (* (+ 1 (exp (* eps (+ a b)))) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))))","(/ (* eps (- (exp (* 2 (* eps (+ a b)))) 1)) (- (exp (* b eps)) 1))","(/ (pow a 2) b)","(* (pow a 2) (+ (* 2 (/ 1 a)) (/ 1 b)))","(* (pow a 2) (+ (* 2 (/ 1 a)) (+ (/ 1 b) (/ b (pow a 2)))))","(/ 1 (* a (pow b 2)))","(/ (+ (/ 1 (* a b)) (/ 1 (pow b 2))) a)","(* 1/2 (/ a b))","(* a (+ (/ 1 a) (* 1/2 (/ 1 b))))","(* a (+ (* 1/2 (/ b (pow a 2))) (+ (/ 1 a) (* 1/2 (/ 1 b)))))","(/ (exp (* a eps)) (- (exp (* a eps)) 1))","(* eps (- (exp (* 2 (* eps (+ a b)))) 1))","(/ (* eps (- (exp (* eps (- b (* -1 a)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(* -1 (* a (- (* -1 (/ b a)) 1)))","(* -1 (/ (+ (* -1/2 b) (* 1/2 b)) a))","(+ (* -1 (/ (- (* eps (+ (* -1/2 b) (* 1/2 b))) 1) a)) (/ 1 b))","(/ (* eps (- (exp (* 2 (* eps (- b (* -1 a))))) 1)) (* (+ 1 (exp (* eps (- b (* -1 a))))) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))))","(/ (* eps (- (exp (* 2 (* eps (- b (* -1 a))))) 1)) (- (exp (* b eps)) 1))","(* (pow a 2) (+ (* -1 (/ (- (* -1 (/ b a)) 2) a)) (/ 1 b)))","(* -1 (* a (- (* -1 (/ (+ 1 (* 1/2 (/ b a))) a)) (* 1/2 (/ 1 b)))))","(* eps (- (exp (* 2 (* eps (- b (* -1 a))))) 1))","(/ (+ 1 (* b (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (* b (- (* 1/6 (/ (* (pow eps 3) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/ (+ 1 (/ b a)) b)","(/ (+ a b) b)","(/ (+ (* -1/2 a) (* 1/2 a)) b)","(/ (+ 1 (* eps (+ (* -1/2 a) (* 1/2 a)))) b)","(/ (+ 1 (+ (* eps (+ (* -1/2 a) (* 1/2 a))) (/ b a))) b)","(* b (+ (* -1/2 (* a b)) (* -1/2 (pow a 2))))","(/ (- (exp (* 2 (* a eps))) 1) (* b (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1))))","(/ (- (+ (* b (- (* 2 (/ (* eps (exp (* 2 (* a eps)))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 2) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (exp (* 2 (* a eps))) 1)) (* eps (* (pow (+ 1 (exp (* a eps))) 2) (pow (- (exp (* a eps)) 1) 2)))))) (/ (exp (* 2 (* a eps))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (/ 1 (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) b)","(/ (- (+ (* b (- (+ (* 2 (/ (* eps (exp (* 2 (* a eps)))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* b (- (* 2 (/ (* (pow eps 2) (exp (* 2 (* a eps)))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (+ (/ (* (+ (* 1/6 (* (pow eps 3) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 3) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (exp (* 2 (* a eps))) 1)) (* eps (* (pow (+ 1 (exp (* a eps))) 2) (pow (- (exp (* a eps)) 1) 2)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 2) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (* 2 (/ (* eps (exp (* 2 (* a eps)))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 2) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (exp (* 2 (* a eps))) 1)) (* eps (* (pow (+ 1 (exp (* a eps))) 2) (pow (- (exp (* a eps)) 1) 2)))))) (* eps (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))))))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 2) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (exp (* 2 (* a eps))) 1)) (* eps (* (pow (+ 1 (exp (* a eps))) 2) (pow (- (exp (* a eps)) 1) 2)))))) (/ (exp (* 2 (* a eps))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (/ 1 (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) b)","(/ (- (+ (* b (- (+ (* 2 (/ (* eps (exp (* 2 (* a eps)))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* b (- (+ (* 2 (/ (* (pow eps 2) (exp (* 2 (* a eps)))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* b (- (* 4/3 (/ (* (pow eps 3) (exp (* 2 (* a eps)))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (+ (/ (* (+ (* 1/24 (* (pow eps 4) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (+ (* 1/4 (* (pow eps 4) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (* 1/3 (* (pow eps 4) (* (exp (* a eps)) (- (exp (* a eps)) 1)))))) (- (exp (* 2 (* a eps))) 1)) (* eps (* (pow (+ 1 (exp (* a eps))) 2) (pow (- (exp (* a eps)) 1) 2)))) (+ (/ (* (+ (* 1/6 (* (pow eps 3) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 3) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (* 2 (/ (* eps (exp (* 2 (* a eps)))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 2) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (exp (* 2 (* a eps))) 1)) (* eps (* (pow (+ 1 (exp (* a eps))) 2) (pow (- (exp (* a eps)) 1) 2)))))) (* eps (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 2) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (* 2 (/ (* (pow eps 2) (exp (* 2 (* a eps)))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (+ (/ (* (+ (* 1/6 (* (pow eps 3) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 3) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (exp (* 2 (* a eps))) 1)) (* eps (* (pow (+ 1 (exp (* a eps))) 2) (pow (- (exp (* a eps)) 1) 2)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 2) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (* 2 (/ (* eps (exp (* 2 (* a eps)))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 2) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (exp (* 2 (* a eps))) 1)) (* eps (* (pow (+ 1 (exp (* a eps))) 2) (pow (- (exp (* a eps)) 1) 2)))))) (* eps (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1))))))) (* eps (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1))))))))) (+ (/ (* (+ (* 1/6 (* (pow eps 3) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 3) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (exp (* 2 (* a eps))) 1)) (* eps (* (pow (+ 1 (exp (* a eps))) 2) (pow (- (exp (* a eps)) 1) 2)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 2) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (* 2 (/ (* eps (exp (* 2 (* a eps)))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 2) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (exp (* 2 (* a eps))) 1)) (* eps (* (pow (+ 1 (exp (* a eps))) 2) (pow (- (exp (* a eps)) 1) 2)))))) (* eps (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))))))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 2) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (exp (* 2 (* a eps))) 1)) (* eps (* (pow (+ 1 (exp (* a eps))) 2) (pow (- (exp (* a eps)) 1) 2)))))) (/ (exp (* 2 (* a eps))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (/ 1 (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) b)","(/ (- (exp (* 2 (* a eps))) 1) b)","(/ (- (+ (exp (* 2 (* a eps))) (* b (- (* 2 (* eps (exp (* 2 (* a eps))))) (* 1/2 (* eps (- (exp (* 2 (* a eps))) 1)))))) 1) b)","(/ (- (+ (exp (* 2 (* a eps))) (* b (- (+ (* 2 (* eps (exp (* 2 (* a eps))))) (* b (- (* 2 (* (pow eps 2) (exp (* 2 (* a eps))))) (+ (* 1/6 (* (pow eps 2) (- (exp (* 2 (* a eps))) 1))) (* 1/2 (* eps (- (* 2 (* eps (exp (* 2 (* a eps))))) (* 1/2 (* eps (- (exp (* 2 (* a eps))) 1)))))))))) (* 1/2 (* eps (- (exp (* 2 (* a eps))) 1)))))) 1) b)","(/ (- (+ (exp (* 2 (* a eps))) (* b (- (+ (* 2 (* eps (exp (* 2 (* a eps))))) (* b (- (+ (* 2 (* (pow eps 2) (exp (* 2 (* a eps))))) (* b (- (* 4/3 (* (pow eps 3) (exp (* 2 (* a eps))))) (+ (* 1/24 (* (pow eps 3) (- (exp (* 2 (* a eps))) 1))) (+ (* 1/6 (* (pow eps 2) (- (* 2 (* eps (exp (* 2 (* a eps))))) (* 1/2 (* eps (- (exp (* 2 (* a eps))) 1)))))) (* 1/2 (* eps (- (* 2 (* (pow eps 2) (exp (* 2 (* a eps))))) (+ (* 1/6 (* (pow eps 2) (- (exp (* 2 (* a eps))) 1))) (* 1/2 (* eps (- (* 2 (* eps (exp (* 2 (* a eps))))) (* 1/2 (* eps (- (exp (* 2 (* a eps))) 1))))))))))))))) (+ (* 1/6 (* (pow eps 2) (- (exp (* 2 (* a eps))) 1))) (* 1/2 (* eps (- (* 2 (* eps (exp (* 2 (* a eps))))) (* 1/2 (* eps (- (exp (* 2 (* a eps))) 1)))))))))) (* 1/2 (* eps (- (exp (* 2 (* a eps))) 1)))))) 1) b)","(/ 1 (* b eps))","(/ (+ (* -1/2 b) (/ 1 eps)) b)","(/ (+ (* b (- (* -1 (* b (+ (* -1/4 eps) (* 1/6 eps)))) 1/2)) (/ 1 eps)) b)","(/ (+ (* b (- (* b (- (* -1 (* b (+ (* -1/2 (* eps (+ (* -1/4 eps) (* 1/6 eps)))) (+ (* -1/12 (pow eps 2)) (* 1/24 (pow eps 2)))))) (+ (* -1/4 eps) (* 1/6 eps)))) 1/2)) (/ 1 eps)) b)","(* b eps)","(* b (+ eps (* 1/2 (* b (pow eps 2)))))","(* b (+ eps (* b (+ (* 1/6 (* b (pow eps 3))) (* 1/2 (pow eps 2))))))","(* b (+ eps (* b (+ (* 1/2 (pow eps 2)) (* b (+ (* 1/24 (* b (pow eps 4))) (* 1/6 (pow eps 3))))))))","(/ (+ (* 2 (* a b)) (pow a 2)) b)","(/ (+ (* b (+ b (* 2 a))) (pow a 2)) b)","(/ (+ (/ 1 a) (/ b (pow a 2))) (pow b 2))","(/ (+ b (* 1/2 a)) b)","(/ (+ (* 1/2 a) (* b (+ 1 (* 1/2 (/ b a))))) b)","(* eps (- (exp (* 2 (* a eps))) 1))","(+ (* 2 (* b (* (pow eps 2) (exp (* 2 (* a eps)))))) (* eps (- (exp (* 2 (* a eps))) 1)))","(+ (* b (+ (* 2 (* b (* (pow eps 3) (exp (* 2 (* a eps)))))) (* 2 (* (pow eps 2) (exp (* 2 (* a eps))))))) (* eps (- (exp (* 2 (* a eps))) 1)))","(+ (* b (+ (* 2 (* (pow eps 2) (exp (* 2 (* a eps))))) (* b (+ (* 4/3 (* b (* (pow eps 4) (exp (* 2 (* a eps)))))) (* 2 (* (pow eps 3) (exp (* 2 (* a eps))))))))) (* eps (- (exp (* 2 (* a eps))) 1)))","(* b (+ 1 (/ a b)))","(+ (/ 1 a) (+ (/ 1 b) (/ (* eps (+ (* -1/2 a) (* 1/2 a))) b)))","(* (pow b 2) (+ (* -1/2 a) (* -1/2 (/ (pow a 2) b))))","(+ (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 b))","(* b (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)))","(* b (+ (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 b)))","(/ 1 (- (exp (* b eps)) 1))","(- (exp (* b eps)) 1)","(* b (+ 1 (* 2 (/ a b))))","(* b (+ 1 (+ (* 2 (/ a b)) (/ (pow a 2) (pow b 2)))))","(/ (+ (/ 1 (* a b)) (/ 1 (pow a 2))) b)","(* b (+ (* 1/2 (/ 1 a)) (/ 1 b)))","(* b (+ (* 1/2 (/ a (pow b 2))) (+ (* 1/2 (/ 1 a)) (/ 1 b))))","(/ (* eps (- (exp (* eps (- a (* -1 b)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(* -1 (* b (- (* -1 (/ a b)) 1)))","(* -1 (/ (+ (* -1/2 a) (* 1/2 a)) b))","(+ (* -1 (/ (- (* eps (+ (* -1/2 a) (* 1/2 a))) 1) b)) (/ 1 a))","(* -1 (* b (- (* -1 (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))) (/ 1 b))))","(/ (* eps (- (exp (* 2 (* eps (- a (* -1 b))))) 1)) (* (+ 1 (exp (* eps (- a (* -1 b))))) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))))","(/ (* eps (- (exp (* 2 (* eps (- a (* -1 b))))) 1)) (- (exp (* b eps)) 1))","(* -1 (* b (- (* -2 (/ a b)) 1)))","(* -1 (* b (- (* -1 (/ (+ (* 2 a) (/ (pow a 2) b)) b)) 1)))","(* -1 (* b (- (* -1 (/ (+ 1 (* 1/2 (/ a b))) b)) (* 1/2 (/ 1 a)))))","(* eps (- (exp (* 2 (* eps (- a (* -1 b))))) 1))","(/ (+ a b) (* a b))","(+ (* eps (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (+ (* 1/6 (/ (pow (+ a b) 3) (* a b))) (* eps (- (* 1/24 (/ (pow (+ a b) 4) (* a b))) (+ (/ (* (+ a b) (+ (* 1/24 (* a (pow b 4))) (+ (* 1/24 (* (pow a 4) b)) (+ (* 1/12 (* (pow a 2) (pow b 3))) (* 1/12 (* (pow a 3) (pow b 2))))))) (* (pow a 2) (pow b 2))) (+ (/ (* (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2))))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b))))) (* a b))))))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b))))) (+ (/ 1 a) (/ 1 b)))","(+ (* (pow eps 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))) (+ (/ 1 a) (/ 1 b)))","(+ (* (pow eps 2) (- (+ (* 1/2 a) (* eps (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))) (+ (/ 1 a) (/ 1 b)))","(+ (* (pow eps 2) (- (+ (* 1/2 a) (* eps (- (+ (* 1/6 (pow a 2)) (* eps (- (* 1/24 (pow a 3)) (+ (* 1/120 (pow a 3)) (+ (* 1/48 (pow a 3)) (+ (* 1/6 (* (pow a 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (* 1/2 (* a (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))))))))) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))) (+ (/ 1 a) (/ 1 b)))","(+ 1 (/ b a))","(+ 1 (+ (* b (* (pow eps 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (/ b a)))","(+ 1 (+ (* (pow eps 2) (+ (* b (* eps (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (* b (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))) (/ b a)))","(+ 1 (+ (* (pow eps 2) (+ (* b (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))) (* eps (+ (* b (* eps (- (* 1/24 (pow a 3)) (+ (* 1/120 (pow a 3)) (+ (* 1/48 (pow a 3)) (+ (* 1/6 (* (pow a 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (* 1/2 (* a (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))))))))) (* b (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))))))))))) (/ b a)))","(+ (* (pow eps 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))) (/ 1 a))","(+ (* (pow eps 2) (- (+ (* 1/2 a) (* eps (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))) (/ 1 a))","(+ (* (pow eps 2) (- (+ (* 1/2 a) (* eps (- (+ (* 1/6 (pow a 2)) (* eps (- (* 1/24 (pow a 3)) (+ (* 1/120 (pow a 3)) (+ (* 1/48 (pow a 3)) (+ (* 1/6 (* (pow a 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (* 1/2 (* a (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))))))))) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))) (/ 1 a))","(+ (* eps (- (/ (pow (+ a b) 2) (* a b)) (* 1/2 (/ (* (+ a b) (+ (* 2 (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* a (* b (+ a b))))) (* (pow a 2) (pow b 2)))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* eps (- (* 2/3 (/ (pow (+ a b) 3) (* a b))) (+ (* 1/2 (/ (* (+ a b) (+ (* 1/2 (* a (* b (pow (+ a b) 2)))) (+ (* 2 (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))))))) (* (pow a 2) (pow b 2)))) (* 1/2 (/ (* (+ (* 2 (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* a (* b (+ a b)))) (- (/ (pow (+ a b) 2) (* a b)) (* 1/2 (/ (* (+ a b) (+ (* 2 (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* a (* b (+ a b))))) (* (pow a 2) (pow b 2)))))) (* a b)))))) (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (* (+ a b) (+ (* 2 (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* a (* b (+ a b))))) (* (pow a 2) (pow b 2)))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* eps (- (+ (* 2/3 (/ (pow (+ a b) 3) (* a b))) (* eps (- (* 1/3 (/ (pow (+ a b) 4) (* a b))) (+ (* 1/2 (/ (* (+ a b) (+ (* 1/6 (* a (* b (pow (+ a b) 3)))) (+ (* 1/2 (* (pow (+ a b) 2) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))))) (+ (* 2 (+ (* 1/24 (* a (pow b 4))) (+ (* 1/24 (* (pow a 4) b)) (+ (* 1/12 (* (pow a 2) (pow b 3))) (* 1/12 (* (pow a 3) (pow b 2))))))) (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))))))) (* (pow a 2) (pow b 2)))) (+ (* 1/2 (/ (* (+ (* 1/2 (* a (* b (pow (+ a b) 2)))) (+ (* 2 (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))))) (- (/ (pow (+ a b) 2) (* a b)) (* 1/2 (/ (* (+ a b) (+ (* 2 (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* a (* b (+ a b))))) (* (pow a 2) (pow b 2)))))) (* a b))) (* 1/2 (/ (* (+ (* 2 (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* a (* b (+ a b)))) (- (* 2/3 (/ (pow (+ a b) 3) (* a b))) (+ (* 1/2 (/ (* (+ a b) (+ (* 1/2 (* a (* b (pow (+ a b) 2)))) (+ (* 2 (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))))))) (* (pow a 2) (pow b 2)))) (* 1/2 (/ (* (+ (* 2 (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* a (* b (+ a b)))) (- (/ (pow (+ a b) 2) (* a b)) (* 1/2 (/ (* (+ a b) (+ (* 2 (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* a (* b (+ a b))))) (* (pow a 2) (pow b 2)))))) (* a b)))))) (* a b)))))))) (+ (* 1/2 (/ (* (+ a b) (+ (* 1/2 (* a (* b (pow (+ a b) 2)))) (+ (* 2 (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))))))) (* (pow a 2) (pow b 2)))) (* 1/2 (/ (* (+ (* 2 (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* a (* b (+ a b)))) (- (/ (pow (+ a b) 2) (* a b)) (* 1/2 (/ (* (+ a b) (+ (* 2 (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* a (* b (+ a b))))) (* (pow a 2) (pow b 2)))))) (* a b)))))) (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (* (+ a b) (+ (* 2 (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* a (* b (+ a b))))) (* (pow a 2) (pow b 2)))))) (+ (/ 1 a) (/ 1 b)))","(* 2 (/ (* eps (+ a b)) b))","(* eps (+ (* 2 (/ (+ a b) b)) (* eps (- (* 2 (/ (pow (+ a b) 2) b)) (+ a b)))))","(* eps (+ (* 2 (/ (+ a b) b)) (* eps (- (+ (* 2 (/ (pow (+ a b) 2) b)) (* eps (- (* 4/3 (/ (pow (+ a b) 3) b)) (+ (* 1/3 (* b (+ a b))) (* 1/2 (* b (- (* 2 (/ (pow (+ a b) 2) b)) (+ a b)))))))) (+ a b)))))","(* eps (+ (* 2 (/ (+ a b) b)) (* eps (- (+ (* 2 (/ (pow (+ a b) 2) b)) (* eps (- (+ (* 4/3 (/ (pow (+ a b) 3) b)) (* eps (- (* 2/3 (/ (pow (+ a b) 4) b)) (+ (* 1/12 (* (pow b 2) (+ a b))) (+ (* 1/6 (* (pow b 2) (- (* 2 (/ (pow (+ a b) 2) b)) (+ a b)))) (* 1/2 (* b (- (* 4/3 (/ (pow (+ a b) 3) b)) (+ (* 1/3 (* b (+ a b))) (* 1/2 (* b (- (* 2 (/ (pow (+ a b) 2) b)) (+ a b))))))))))))) (+ (* 1/3 (* b (+ a b))) (* 1/2 (* b (- (* 2 (/ (pow (+ a b) 2) b)) (+ a b)))))))) (+ a b)))))","(/ (+ (* -1/2 eps) (/ 1 b)) eps)","(/ (+ (* eps (- (* -1 (* eps (+ (* -1/4 b) (* 1/6 b)))) 1/2)) (/ 1 b)) eps)","(/ (+ (* eps (- (* eps (- (* -1 (* eps (+ (* -1/2 (* b (+ (* -1/4 b) (* 1/6 b)))) (+ (* -1/12 (pow b 2)) (* 1/24 (pow b 2)))))) (+ (* -1/4 b) (* 1/6 b)))) 1/2)) (/ 1 b)) eps)","(* eps (+ b (* 1/2 (* (pow b 2) eps))))","(* eps (+ b (* eps (+ (* 1/6 (* (pow b 3) eps)) (* 1/2 (pow b 2))))))","(* eps (+ b (* eps (+ (* 1/2 (pow b 2)) (* eps (+ (* 1/24 (* (pow b 4) eps)) (* 1/6 (pow b 3))))))))","(/ (+ (* 1/2 eps) (/ 1 a)) eps)","(/ (+ (* eps (+ 1/2 (* eps (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))) (/ 1 a)) eps)","(/ (+ (* eps (+ 1/2 (* eps (- (+ (* 1/2 a) (* eps (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))))) (/ 1 a)) eps)","(* 2 (* (pow eps 2) (+ a b)))","(* (pow eps 2) (+ (* 2 (* eps (pow (+ a b) 2))) (* 2 (+ a b))))","(* (pow eps 2) (+ (* 2 (+ a b)) (* eps (+ (* 4/3 (* eps (pow (+ a b) 3))) (* 2 (pow (+ a b) 2))))))","(* (pow eps 2) (+ (* 2 (+ a b)) (* eps (+ (* 2 (pow (+ a b) 2)) (* eps (+ (* 2/3 (* eps (pow (+ a b) 4))) (* 4/3 (pow (+ a b) 3))))))))","(* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b)))))","(* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (+ (/ 1 (* a eps)) (/ 1 (* b eps))))))","(* eps (- (+ (/ 1 (* b eps)) (/ (exp (* a eps)) (- (exp (* a eps)) 1))) 1/2))","(* eps (+ (* b (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 eps)))","(* -1 (* eps (+ (* -1 (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b))))) (* -1 (/ (+ (/ 1 a) (/ 1 b)) eps)))))","(* -1 (* eps (- (* -1 (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 (* b eps)))))","(* -1 (* eps (- (* -1 (* b (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))) (/ 1 eps))))"]],"series":[[31.466064453125,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (+ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 a) (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (* (* (* b a) (+ b a)) -1/2) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) (/ (* (pow (- (exp (* eps b)) 1) -1) (* (- (exp (* (* eps (+ b a)) 2)) 1) eps)) (* (- (exp (* eps a)) 1) (- (pow (exp eps) (+ b a)) -1))) (* (pow (- (exp (* eps b)) 1) -1) (* (- (exp (* (* eps (+ b a)) 2)) 1) eps)) (pow (- (exp (* eps b)) 1) -1) (- (exp (* eps b)) 1) (/ (pow (+ b a) 2) b) (/ (+ b a) (* (* (* b a) a) b)) (* (/ (pow (+ b a) 2) b) (/ 1/2 a)) (/ (pow (exp a) eps) (- (exp (* eps a)) 1)) (* (- (exp (* (* eps (+ b a)) 2)) 1) eps))","eps","-inf"],[33.3720703125,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (+ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 a) (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (* (* (* b a) (+ b a)) -1/2) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) (/ (* (pow (- (exp (* eps b)) 1) -1) (* (- (exp (* (* eps (+ b a)) 2)) 1) eps)) (* (- (exp (* eps a)) 1) (- (pow (exp eps) (+ b a)) -1))) (* (pow (- (exp (* eps b)) 1) -1) (* (- (exp (* (* eps (+ b a)) 2)) 1) eps)) (pow (- (exp (* eps b)) 1) -1) (- (exp (* eps b)) 1) (/ (pow (+ b a) 2) b) (/ (+ b a) (* (* (* b a) a) b)) (* (/ (pow (+ b a) 2) b) (/ 1/2 a)) (/ (pow (exp a) eps) (- (exp (* eps a)) 1)) (* (- (exp (* (* eps (+ b a)) 2)) 1) eps))","eps","inf"],[10.52099609375,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (+ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 a) (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (* (* (* b a) (+ b a)) -1/2) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) (/ (* (pow (- (exp (* eps b)) 1) -1) (* (- (exp (* (* eps (+ b a)) 2)) 1) eps)) (* (- (exp (* eps a)) 1) (- (pow (exp eps) (+ b a)) -1))) (* (pow (- (exp (* eps b)) 1) -1) (* (- (exp (* (* eps (+ b a)) 2)) 1) eps)) (pow (- (exp (* eps b)) 1) -1) (- (exp (* eps b)) 1) (/ (pow (+ b a) 2) b) (/ (+ b a) (* (* (* b a) a) b)) (* (/ (pow (+ b a) 2) b) (/ 1/2 a)) (/ (pow (exp a) eps) (- (exp (* eps a)) 1)) (* (- (exp (* (* eps (+ b a)) 2)) 1) eps))","eps","0"],[23.369140625,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (+ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 a) (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (* (* (* b a) (+ b a)) -1/2) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) (/ (* (pow (- (exp (* eps b)) 1) -1) (* (- (exp (* (* eps (+ b a)) 2)) 1) eps)) (* (- (exp (* eps a)) 1) (- (pow (exp eps) (+ b a)) -1))) (* (pow (- (exp (* eps b)) 1) -1) (* (- (exp (* (* eps (+ b a)) 2)) 1) eps)) (pow (- (exp (* eps b)) 1) -1) (- (exp (* eps b)) 1) (/ (pow (+ b a) 2) b) (/ (+ b a) (* (* (* b a) a) b)) (* (/ (pow (+ b a) 2) b) (/ 1/2 a)) (/ (pow (exp a) eps) (- (exp (* eps a)) 1)) (* (- (exp (* (* eps (+ b a)) 2)) 1) eps))","b","-inf"],[53.320068359375,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (+ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 a) (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (* (* (* b a) (+ b a)) -1/2) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) (/ (* (pow (- (exp (* eps b)) 1) -1) (* (- (exp (* (* eps (+ b a)) 2)) 1) eps)) (* (- (exp (* eps a)) 1) (- (pow (exp eps) (+ b a)) -1))) (* (pow (- (exp (* eps b)) 1) -1) (* (- (exp (* (* eps (+ b a)) 2)) 1) eps)) (pow (- (exp (* eps b)) 1) -1) (- (exp (* eps b)) 1) (/ (pow (+ b a) 2) b) (/ (+ b a) (* (* (* b a) a) b)) (* (/ (pow (+ b a) 2) b) (/ 1/2 a)) (/ (pow (exp a) eps) (- (exp (* eps a)) 1)) (* (- (exp (* (* eps (+ b a)) 2)) 1) eps))","b","inf"],[18.544921875,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (+ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 a) (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (* (* (* b a) (+ b a)) -1/2) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) (/ (* (pow (- (exp (* eps b)) 1) -1) (* (- (exp (* (* eps (+ b a)) 2)) 1) eps)) (* (- (exp (* eps a)) 1) (- (pow (exp eps) (+ b a)) -1))) (* (pow (- (exp (* eps b)) 1) -1) (* (- (exp (* (* eps (+ b a)) 2)) 1) eps)) (pow (- (exp (* eps b)) 1) -1) (- (exp (* eps b)) 1) (/ (pow (+ b a) 2) b) (/ (+ b a) (* (* (* b a) a) b)) (* (/ (pow (+ b a) 2) b) (/ 1/2 a)) (/ (pow (exp a) eps) (- (exp (* eps a)) 1)) (* (- (exp (* (* eps (+ b a)) 2)) 1) eps))","b","0"],[34.27587890625,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (+ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 a) (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (* (* (* b a) (+ b a)) -1/2) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) (/ (* (pow (- (exp (* eps b)) 1) -1) (* (- (exp (* (* eps (+ b a)) 2)) 1) eps)) (* (- (exp (* eps a)) 1) (- (pow (exp eps) (+ b a)) -1))) (* (pow (- (exp (* eps b)) 1) -1) (* (- (exp (* (* eps (+ b a)) 2)) 1) eps)) (pow (- (exp (* eps b)) 1) -1) (- (exp (* eps b)) 1) (/ (pow (+ b a) 2) b) (/ (+ b a) (* (* (* b a) a) b)) (* (/ (pow (+ b a) 2) b) (/ 1/2 a)) (/ (pow (exp a) eps) (- (exp (* eps a)) 1)) (* (- (exp (* (* eps (+ b a)) 2)) 1) eps))","a","-inf"],[55.6591796875,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (+ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 a) (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (* (* (* b a) (+ b a)) -1/2) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) (/ (* (pow (- (exp (* eps b)) 1) -1) (* (- (exp (* (* eps (+ b a)) 2)) 1) eps)) (* (- (exp (* eps a)) 1) (- (pow (exp eps) (+ b a)) -1))) (* (pow (- (exp (* eps b)) 1) -1) (* (- (exp (* (* eps (+ b a)) 2)) 1) eps)) (pow (- (exp (* eps b)) 1) -1) (- (exp (* eps b)) 1) (/ (pow (+ b a) 2) b) (/ (+ b a) (* (* (* b a) a) b)) (* (/ (pow (+ b a) 2) b) (/ 1/2 a)) (/ (pow (exp a) eps) (- (exp (* eps a)) 1)) (* (- (exp (* (* eps (+ b a)) 2)) 1) eps))","a","inf"],[19.9638671875,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (+ b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 a) (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (* (* (* b a) (+ b a)) -1/2) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) (/ (* (pow (- (exp (* eps b)) 1) -1) (* (- (exp (* (* eps (+ b a)) 2)) 1) eps)) (* (- (exp (* eps a)) 1) (- (pow (exp eps) (+ b a)) -1))) (* (pow (- (exp (* eps b)) 1) -1) (* (- (exp (* (* eps (+ b a)) 2)) 1) eps)) (pow (- (exp (* eps b)) 1) -1) (- (exp (* eps b)) 1) (/ (pow (+ b a) 2) b) (/ (+ b a) (* (* (* b a) a) b)) (* (/ (pow (+ b a) 2) b) (/ 1/2 a)) (/ (pow (exp a) eps) (- (exp (* eps a)) 1)) (* (- (exp (* (* eps (+ b a)) 2)) 1) eps))","a","0"]],"time":287.9130859375,"type":"series"},{"count":[[180,178]],"egraph":[[0,8354,7249,0.10529847],[1,3352,8132,0.030378447],[0,1053,8560,0.012297989]],"inputs":[["(/ 1 a)","(/ (+ 1 (* a (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (* a (- (* 1/6 (/ (* (pow eps 3) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/ (+ 1 (/ a b)) a)","1","(+ 1 (/ a b))","b","(+ a b)","(/ (+ (* -1/2 b) (* 1/2 b)) a)","(/ (+ 1 (* eps (+ (* -1/2 b) (* 1/2 b)))) a)","(/ (+ 1 (+ (* eps (+ (* -1/2 b) (* 1/2 b))) (/ a b))) a)","(* -1/2 (* a (pow b 2)))","(* a (+ (* -1/2 (* a b)) (* -1/2 (pow b 2))))","(/ (+ 1 (* a (+ (* a (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))) (/ 1 b)))) a)","(/ (+ 1 (* a (+ (* a (+ (* a (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))) (/ 1 b)))) a)","(/ b a)","(/ (+ a b) a)","(/ (+ b (* a (+ 1 (* a (* b (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))))) a)","(/ (+ b (* a (+ 1 (* a (+ (* a (* b (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))))))) (* b (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) a)","(/ (+ 1 (* (pow a 2) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))) a)","(/ (+ 1 (* (pow a 2) (+ (* a (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))) a)","(/ (+ 1 (* (pow a 2) (+ (* a (+ (* a (* eps (- (* 1/24 (pow eps 3)) (+ (* 1/120 (pow eps 3)) (+ (* 1/48 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))) (* 1/2 (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))))))))) (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))))))) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))) a)","(/ (- (exp (* 2 (* b eps))) 1) (* a (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1))))","(/ (- (+ (* a (- (* 2 (/ (* eps (exp (* 2 (* b eps)))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 2) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (exp (* 2 (* b eps))) 1)) (* eps (* (pow (+ 1 (exp (* b eps))) 2) (pow (- (exp (* b eps)) 1) 2)))))) (/ (exp (* 2 (* b eps))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (/ 1 (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) a)","(/ (- (+ (* a (- (+ (* 2 (/ (* eps (exp (* 2 (* b eps)))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* a (- (* 2 (/ (* (pow eps 2) (exp (* 2 (* b eps)))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (+ (/ (* (+ (* 1/6 (* (pow eps 3) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 3) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (exp (* 2 (* b eps))) 1)) (* eps (* (pow (+ 1 (exp (* b eps))) 2) (pow (- (exp (* b eps)) 1) 2)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 2) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (* 2 (/ (* eps (exp (* 2 (* b eps)))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 2) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (exp (* 2 (* b eps))) 1)) (* eps (* (pow (+ 1 (exp (* b eps))) 2) (pow (- (exp (* b eps)) 1) 2)))))) (* eps (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))))))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 2) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (exp (* 2 (* b eps))) 1)) (* eps (* (pow (+ 1 (exp (* b eps))) 2) (pow (- (exp (* b eps)) 1) 2)))))) (/ (exp (* 2 (* b eps))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (/ 1 (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) a)","(/ (- (+ (* a (- (+ (* 2 (/ (* eps (exp (* 2 (* b eps)))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* a (- (+ (* 2 (/ (* (pow eps 2) (exp (* 2 (* b eps)))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* a (- (* 4/3 (/ (* (pow eps 3) (exp (* 2 (* b eps)))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (+ (/ (* (+ (* 1/24 (* (pow eps 4) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (+ (* 1/4 (* (pow eps 4) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (* 1/3 (* (pow eps 4) (* (exp (* b eps)) (- (exp (* b eps)) 1)))))) (- (exp (* 2 (* b eps))) 1)) (* eps (* (pow (+ 1 (exp (* b eps))) 2) (pow (- (exp (* b eps)) 1) 2)))) (+ (/ (* (+ (* 1/6 (* (pow eps 3) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 3) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (* 2 (/ (* eps (exp (* 2 (* b eps)))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 2) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (exp (* 2 (* b eps))) 1)) (* eps (* (pow (+ 1 (exp (* b eps))) 2) (pow (- (exp (* b eps)) 1) 2)))))) (* eps (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 2) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (* 2 (/ (* (pow eps 2) (exp (* 2 (* b eps)))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (+ (/ (* (+ (* 1/6 (* (pow eps 3) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 3) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (exp (* 2 (* b eps))) 1)) (* eps (* (pow (+ 1 (exp (* b eps))) 2) (pow (- (exp (* b eps)) 1) 2)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 2) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (* 2 (/ (* eps (exp (* 2 (* b eps)))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 2) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (exp (* 2 (* b eps))) 1)) (* eps (* (pow (+ 1 (exp (* b eps))) 2) (pow (- (exp (* b eps)) 1) 2)))))) (* eps (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1))))))) (* eps (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1))))))))) (+ (/ (* (+ (* 1/6 (* (pow eps 3) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 3) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (exp (* 2 (* b eps))) 1)) (* eps (* (pow (+ 1 (exp (* b eps))) 2) (pow (- (exp (* b eps)) 1) 2)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 2) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (* 2 (/ (* eps (exp (* 2 (* b eps)))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 2) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (exp (* 2 (* b eps))) 1)) (* eps (* (pow (+ 1 (exp (* b eps))) 2) (pow (- (exp (* b eps)) 1) 2)))))) (* eps (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))))))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 2) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (exp (* 2 (* b eps))) 1)) (* eps (* (pow (+ 1 (exp (* b eps))) 2) (pow (- (exp (* b eps)) 1) 2)))))) (/ (exp (* 2 (* b eps))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (/ 1 (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) a)","(/ (* eps (- (exp (* 2 (* b eps))) 1)) (- (exp (* b eps)) 1))","(+ (* 2 (/ (* a (* (pow eps 2) (exp (* 2 (* b eps))))) (- (exp (* b eps)) 1))) (/ (* eps (- (exp (* 2 (* b eps))) 1)) (- (exp (* b eps)) 1)))","(+ (* a (+ (* 2 (/ (* a (* (pow eps 3) (exp (* 2 (* b eps))))) (- (exp (* b eps)) 1))) (* 2 (/ (* (pow eps 2) (exp (* 2 (* b eps)))) (- (exp (* b eps)) 1))))) (/ (* eps (- (exp (* 2 (* b eps))) 1)) (- (exp (* b eps)) 1)))","(+ (* a (+ (* 2 (/ (* (pow eps 2) (exp (* 2 (* b eps)))) (- (exp (* b eps)) 1))) (* a (+ (* 4/3 (/ (* a (* (pow eps 4) (exp (* 2 (* b eps))))) (- (exp (* b eps)) 1))) (* 2 (/ (* (pow eps 3) (exp (* 2 (* b eps)))) (- (exp (* b eps)) 1))))))) (/ (* eps (- (exp (* 2 (* b eps))) 1)) (- (exp (* b eps)) 1)))","(+ b (* 2 a))","(+ b (* a (+ 2 (/ a b))))","(/ 1 (* (pow a 2) b))","(/ (+ (/ 1 b) (/ a (pow b 2))) (pow a 2))","(* 1/2 (/ b a))","(/ (+ a (* 1/2 b)) a)","(/ (+ (* 1/2 b) (* a (+ 1 (* 1/2 (/ a b))))) a)","(/ 1 (* a eps))","(/ (+ (* 1/2 a) (/ 1 eps)) a)","(/ (+ (* a (+ 1/2 (* a (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))) (/ 1 eps)) a)","(/ (+ (* a (+ 1/2 (* a (- (+ (* 1/2 eps) (* a (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) (+ (* 1/6 eps) (* 1/4 eps)))))) (/ 1 eps)) a)","(* eps (- (exp (* 2 (* b eps))) 1))","(+ (* 2 (* a (* (pow eps 2) (exp (* 2 (* b eps)))))) (* eps (- (exp (* 2 (* b eps))) 1)))","(+ (* a (+ (* 2 (* a (* (pow eps 3) (exp (* 2 (* b eps)))))) (* 2 (* (pow eps 2) (exp (* 2 (* b eps))))))) (* eps (- (exp (* 2 (* b eps))) 1)))","(+ (* a (+ (* 2 (* (pow eps 2) (exp (* 2 (* b eps))))) (* a (+ (* 4/3 (* a (* (pow eps 4) (exp (* 2 (* b eps)))))) (* 2 (* (pow eps 3) (exp (* 2 (* b eps))))))))) (* eps (- (exp (* 2 (* b eps))) 1)))","(/ (* eps (- (exp (* eps (+ a b))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/ 1 b)","(+ (/ 1 a) (/ 1 b))","(/ a b)","(* a (+ (/ 1 a) (/ 1 b)))","a","(* a (+ 1 (/ b a)))","(+ (/ 1 a) (+ (/ 1 b) (/ (* eps (+ (* -1/2 b) (* 1/2 b))) a)))","(* -1/2 (* (pow a 2) b))","(* (pow a 2) (+ (* -1/2 b) (* -1/2 (/ (pow b 2) a))))","(/ (+ 1 (* b (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)))) b)","(+ 1 (* b (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))))","(* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))","(/ (* eps (- (exp (* 2 (* eps (+ a b)))) 1)) (* (+ 1 (exp (* eps (+ a b)))) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))))","(/ (* eps (- (exp (* 2 (* eps (+ a b)))) 1)) (- (exp (* b eps)) 1))","(/ (pow a 2) b)","(* (pow a 2) (+ (* 2 (/ 1 a)) (/ 1 b)))","(* (pow a 2) (+ (* 2 (/ 1 a)) (+ (/ 1 b) (/ b (pow a 2)))))","(/ 1 (* a (pow b 2)))","(/ (+ (/ 1 (* a b)) (/ 1 (pow b 2))) a)","(* 1/2 (/ a b))","(* a (+ (/ 1 a) (* 1/2 (/ 1 b))))","(* a (+ (* 1/2 (/ b (pow a 2))) (+ (/ 1 a) (* 1/2 (/ 1 b)))))","(/ (exp (* a eps)) (- (exp (* a eps)) 1))","(* eps (- (exp (* 2 (* eps (+ a b)))) 1))","(/ (* eps (- (exp (* eps (- b (* -1 a)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(* -1 (* a (- (* -1 (/ b a)) 1)))","(* -1 (/ (+ (* -1/2 b) (* 1/2 b)) a))","(+ (* -1 (/ (- (* eps (+ (* -1/2 b) (* 1/2 b))) 1) a)) (/ 1 b))","(/ (* eps (- (exp (* 2 (* eps (- b (* -1 a))))) 1)) (* (+ 1 (exp (* eps (- b (* -1 a))))) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))))","(/ (* eps (- (exp (* 2 (* eps (- b (* -1 a))))) 1)) (- (exp (* b eps)) 1))","(* (pow a 2) (+ (* -1 (/ (- (* -1 (/ b a)) 2) a)) (/ 1 b)))","(* -1 (* a (- (* -1 (/ (+ 1 (* 1/2 (/ b a))) a)) (* 1/2 (/ 1 b)))))","(* eps (- (exp (* 2 (* eps (- b (* -1 a))))) 1))","(/ (+ 1 (* b (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (* b (- (* 1/6 (/ (* (pow eps 3) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/ (+ 1 (/ b a)) b)","(/ (+ a b) b)","(/ (+ (* -1/2 a) (* 1/2 a)) b)","(/ (+ 1 (* eps (+ (* -1/2 a) (* 1/2 a)))) b)","(/ (+ 1 (+ (* eps (+ (* -1/2 a) (* 1/2 a))) (/ b a))) b)","(* b (+ (* -1/2 (* a b)) (* -1/2 (pow a 2))))","(/ (- (exp (* 2 (* a eps))) 1) (* b (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1))))","(/ (- (+ (* b (- (* 2 (/ (* eps (exp (* 2 (* a eps)))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 2) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (exp (* 2 (* a eps))) 1)) (* eps (* (pow (+ 1 (exp (* a eps))) 2) (pow (- (exp (* a eps)) 1) 2)))))) (/ (exp (* 2 (* a eps))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (/ 1 (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) b)","(/ (- (+ (* b (- (+ (* 2 (/ (* eps (exp (* 2 (* a eps)))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* b (- (* 2 (/ (* (pow eps 2) (exp (* 2 (* a eps)))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (+ (/ (* (+ (* 1/6 (* (pow eps 3) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 3) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (exp (* 2 (* a eps))) 1)) (* eps (* (pow (+ 1 (exp (* a eps))) 2) (pow (- (exp (* a eps)) 1) 2)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 2) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (* 2 (/ (* eps (exp (* 2 (* a eps)))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 2) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (exp (* 2 (* a eps))) 1)) (* eps (* (pow (+ 1 (exp (* a eps))) 2) (pow (- (exp (* a eps)) 1) 2)))))) (* eps (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))))))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 2) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (exp (* 2 (* a eps))) 1)) (* eps (* (pow (+ 1 (exp (* a eps))) 2) (pow (- (exp (* a eps)) 1) 2)))))) (/ (exp (* 2 (* a eps))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (/ 1 (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) b)","(/ (- (+ (* b (- (+ (* 2 (/ (* eps (exp (* 2 (* a eps)))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* b (- (+ (* 2 (/ (* (pow eps 2) (exp (* 2 (* a eps)))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* b (- (* 4/3 (/ (* (pow eps 3) (exp (* 2 (* a eps)))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (+ (/ (* (+ (* 1/24 (* (pow eps 4) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (+ (* 1/4 (* (pow eps 4) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (* 1/3 (* (pow eps 4) (* (exp (* a eps)) (- (exp (* a eps)) 1)))))) (- (exp (* 2 (* a eps))) 1)) (* eps (* (pow (+ 1 (exp (* a eps))) 2) (pow (- (exp (* a eps)) 1) 2)))) (+ (/ (* (+ (* 1/6 (* (pow eps 3) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 3) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (* 2 (/ (* eps (exp (* 2 (* a eps)))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 2) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (exp (* 2 (* a eps))) 1)) (* eps (* (pow (+ 1 (exp (* a eps))) 2) (pow (- (exp (* a eps)) 1) 2)))))) (* eps (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 2) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (* 2 (/ (* (pow eps 2) (exp (* 2 (* a eps)))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (+ (/ (* (+ (* 1/6 (* (pow eps 3) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 3) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (exp (* 2 (* a eps))) 1)) (* eps (* (pow (+ 1 (exp (* a eps))) 2) (pow (- (exp (* a eps)) 1) 2)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 2) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (* 2 (/ (* eps (exp (* 2 (* a eps)))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 2) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (exp (* 2 (* a eps))) 1)) (* eps (* (pow (+ 1 (exp (* a eps))) 2) (pow (- (exp (* a eps)) 1) 2)))))) (* eps (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1))))))) (* eps (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1))))))))) (+ (/ (* (+ (* 1/6 (* (pow eps 3) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 3) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (exp (* 2 (* a eps))) 1)) (* eps (* (pow (+ 1 (exp (* a eps))) 2) (pow (- (exp (* a eps)) 1) 2)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 2) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (* 2 (/ (* eps (exp (* 2 (* a eps)))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 2) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (exp (* 2 (* a eps))) 1)) (* eps (* (pow (+ 1 (exp (* a eps))) 2) (pow (- (exp (* a eps)) 1) 2)))))) (* eps (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))))))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 2) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (exp (* 2 (* a eps))) 1)) (* eps (* (pow (+ 1 (exp (* a eps))) 2) (pow (- (exp (* a eps)) 1) 2)))))) (/ (exp (* 2 (* a eps))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (/ 1 (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) b)","(/ (- (exp (* 2 (* a eps))) 1) b)","(/ (- (+ (exp (* 2 (* a eps))) (* b (- (* 2 (* eps (exp (* 2 (* a eps))))) (* 1/2 (* eps (- (exp (* 2 (* a eps))) 1)))))) 1) b)","(/ (- (+ (exp (* 2 (* a eps))) (* b (- (+ (* 2 (* eps (exp (* 2 (* a eps))))) (* b (- (* 2 (* (pow eps 2) (exp (* 2 (* a eps))))) (+ (* 1/6 (* (pow eps 2) (- (exp (* 2 (* a eps))) 1))) (* 1/2 (* eps (- (* 2 (* eps (exp (* 2 (* a eps))))) (* 1/2 (* eps (- (exp (* 2 (* a eps))) 1)))))))))) (* 1/2 (* eps (- (exp (* 2 (* a eps))) 1)))))) 1) b)","(/ (- (+ (exp (* 2 (* a eps))) (* b (- (+ (* 2 (* eps (exp (* 2 (* a eps))))) (* b (- (+ (* 2 (* (pow eps 2) (exp (* 2 (* a eps))))) (* b (- (* 4/3 (* (pow eps 3) (exp (* 2 (* a eps))))) (+ (* 1/24 (* (pow eps 3) (- (exp (* 2 (* a eps))) 1))) (+ (* 1/6 (* (pow eps 2) (- (* 2 (* eps (exp (* 2 (* a eps))))) (* 1/2 (* eps (- (exp (* 2 (* a eps))) 1)))))) (* 1/2 (* eps (- (* 2 (* (pow eps 2) (exp (* 2 (* a eps))))) (+ (* 1/6 (* (pow eps 2) (- (exp (* 2 (* a eps))) 1))) (* 1/2 (* eps (- (* 2 (* eps (exp (* 2 (* a eps))))) (* 1/2 (* eps (- (exp (* 2 (* a eps))) 1))))))))))))))) (+ (* 1/6 (* (pow eps 2) (- (exp (* 2 (* a eps))) 1))) (* 1/2 (* eps (- (* 2 (* eps (exp (* 2 (* a eps))))) (* 1/2 (* eps (- (exp (* 2 (* a eps))) 1)))))))))) (* 1/2 (* eps (- (exp (* 2 (* a eps))) 1)))))) 1) b)","(/ 1 (* b eps))","(/ (+ (* -1/2 b) (/ 1 eps)) b)","(/ (+ (* b (- (* -1 (* b (+ (* -1/4 eps) (* 1/6 eps)))) 1/2)) (/ 1 eps)) b)","(/ (+ (* b (- (* b (- (* -1 (* b (+ (* -1/2 (* eps (+ (* -1/4 eps) (* 1/6 eps)))) (+ (* -1/12 (pow eps 2)) (* 1/24 (pow eps 2)))))) (+ (* -1/4 eps) (* 1/6 eps)))) 1/2)) (/ 1 eps)) b)","(* b eps)","(* b (+ eps (* 1/2 (* b (pow eps 2)))))","(* b (+ eps (* b (+ (* 1/6 (* b (pow eps 3))) (* 1/2 (pow eps 2))))))","(* b (+ eps (* b (+ (* 1/2 (pow eps 2)) (* b (+ (* 1/24 (* b (pow eps 4))) (* 1/6 (pow eps 3))))))))","(/ (+ (* 2 (* a b)) (pow a 2)) b)","(/ (+ (* b (+ b (* 2 a))) (pow a 2)) b)","(/ (+ (/ 1 a) (/ b (pow a 2))) (pow b 2))","(/ (+ b (* 1/2 a)) b)","(/ (+ (* 1/2 a) (* b (+ 1 (* 1/2 (/ b a))))) b)","(* eps (- (exp (* 2 (* a eps))) 1))","(+ (* 2 (* b (* (pow eps 2) (exp (* 2 (* a eps)))))) (* eps (- (exp (* 2 (* a eps))) 1)))","(+ (* b (+ (* 2 (* b (* (pow eps 3) (exp (* 2 (* a eps)))))) (* 2 (* (pow eps 2) (exp (* 2 (* a eps))))))) (* eps (- (exp (* 2 (* a eps))) 1)))","(+ (* b (+ (* 2 (* (pow eps 2) (exp (* 2 (* a eps))))) (* b (+ (* 4/3 (* b (* (pow eps 4) (exp (* 2 (* a eps)))))) (* 2 (* (pow eps 3) (exp (* 2 (* a eps))))))))) (* eps (- (exp (* 2 (* a eps))) 1)))","(* b (+ 1 (/ a b)))","(+ (/ 1 a) (+ (/ 1 b) (/ (* eps (+ (* -1/2 a) (* 1/2 a))) b)))","(* (pow b 2) (+ (* -1/2 a) (* -1/2 (/ (pow a 2) b))))","(+ (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 b))","(* b (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)))","(* b (+ (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 b)))","(/ 1 (- (exp (* b eps)) 1))","(- (exp (* b eps)) 1)","(* b (+ 1 (* 2 (/ a b))))","(* b (+ 1 (+ (* 2 (/ a b)) (/ (pow a 2) (pow b 2)))))","(/ (+ (/ 1 (* a b)) (/ 1 (pow a 2))) b)","(* b (+ (* 1/2 (/ 1 a)) (/ 1 b)))","(* b (+ (* 1/2 (/ a (pow b 2))) (+ (* 1/2 (/ 1 a)) (/ 1 b))))","(/ (* eps (- (exp (* eps (- a (* -1 b)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(* -1 (* b (- (* -1 (/ a b)) 1)))","(* -1 (/ (+ (* -1/2 a) (* 1/2 a)) b))","(+ (* -1 (/ (- (* eps (+ (* -1/2 a) (* 1/2 a))) 1) b)) (/ 1 a))","(* -1 (* b (- (* -1 (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))) (/ 1 b))))","(/ (* eps (- (exp (* 2 (* eps (- a (* -1 b))))) 1)) (* (+ 1 (exp (* eps (- a (* -1 b))))) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))))","(/ (* eps (- (exp (* 2 (* eps (- a (* -1 b))))) 1)) (- (exp (* b eps)) 1))","(* -1 (* b (- (* -2 (/ a b)) 1)))","(* -1 (* b (- (* -1 (/ (+ (* 2 a) (/ (pow a 2) b)) b)) 1)))","(* -1 (* b (- (* -1 (/ (+ 1 (* 1/2 (/ a b))) b)) (* 1/2 (/ 1 a)))))","(* eps (- (exp (* 2 (* eps (- a (* -1 b))))) 1))","(/ (+ a b) (* a b))","(+ (* eps (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (+ (* 1/6 (/ (pow (+ a b) 3) (* a b))) (* eps (- (* 1/24 (/ (pow (+ a b) 4) (* a b))) (+ (/ (* (+ a b) (+ (* 1/24 (* a (pow b 4))) (+ (* 1/24 (* (pow a 4) b)) (+ (* 1/12 (* (pow a 2) (pow b 3))) (* 1/12 (* (pow a 3) (pow b 2))))))) (* (pow a 2) (pow b 2))) (+ (/ (* (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2))))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b))))) (* a b))))))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b))))) (+ (/ 1 a) (/ 1 b)))","(+ (* (pow eps 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))) (+ (/ 1 a) (/ 1 b)))","(+ (* (pow eps 2) (- (+ (* 1/2 a) (* eps (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))) (+ (/ 1 a) (/ 1 b)))","(+ (* (pow eps 2) (- (+ (* 1/2 a) (* eps (- (+ (* 1/6 (pow a 2)) (* eps (- (* 1/24 (pow a 3)) (+ (* 1/120 (pow a 3)) (+ (* 1/48 (pow a 3)) (+ (* 1/6 (* (pow a 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (* 1/2 (* a (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))))))))) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))) (+ (/ 1 a) (/ 1 b)))","(+ 1 (/ b a))","(+ 1 (+ (* b (* (pow eps 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (/ b a)))","(+ 1 (+ (* (pow eps 2) (+ (* b (* eps (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (* b (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))) (/ b a)))","(+ 1 (+ (* (pow eps 2) (+ (* b (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))) (* eps (+ (* b (* eps (- (* 1/24 (pow a 3)) (+ (* 1/120 (pow a 3)) (+ (* 1/48 (pow a 3)) (+ (* 1/6 (* (pow a 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (* 1/2 (* a (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))))))))) (* b (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))))))))))) (/ b a)))","(+ (* (pow eps 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))) (/ 1 a))","(+ (* (pow eps 2) (- (+ (* 1/2 a) (* eps (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))) (/ 1 a))","(+ (* (pow eps 2) (- (+ (* 1/2 a) (* eps (- (+ (* 1/6 (pow a 2)) (* eps (- (* 1/24 (pow a 3)) (+ (* 1/120 (pow a 3)) (+ (* 1/48 (pow a 3)) (+ (* 1/6 (* (pow a 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (* 1/2 (* a (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))))))))) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))) (/ 1 a))","(+ (* eps (- (/ (pow (+ a b) 2) (* a b)) (* 1/2 (/ (* (+ a b) (+ (* 2 (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* a (* b (+ a b))))) (* (pow a 2) (pow b 2)))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* eps (- (* 2/3 (/ (pow (+ a b) 3) (* a b))) (+ (* 1/2 (/ (* (+ a b) (+ (* 1/2 (* a (* b (pow (+ a b) 2)))) (+ (* 2 (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))))))) (* (pow a 2) (pow b 2)))) (* 1/2 (/ (* (+ (* 2 (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* a (* b (+ a b)))) (- (/ (pow (+ a b) 2) (* a b)) (* 1/2 (/ (* (+ a b) (+ (* 2 (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* a (* b (+ a b))))) (* (pow a 2) (pow b 2)))))) (* a b)))))) (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (* (+ a b) (+ (* 2 (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* a (* b (+ a b))))) (* (pow a 2) (pow b 2)))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* eps (- (+ (* 2/3 (/ (pow (+ a b) 3) (* a b))) (* eps (- (* 1/3 (/ (pow (+ a b) 4) (* a b))) (+ (* 1/2 (/ (* (+ a b) (+ (* 1/6 (* a (* b (pow (+ a b) 3)))) (+ (* 1/2 (* (pow (+ a b) 2) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))))) (+ (* 2 (+ (* 1/24 (* a (pow b 4))) (+ (* 1/24 (* (pow a 4) b)) (+ (* 1/12 (* (pow a 2) (pow b 3))) (* 1/12 (* (pow a 3) (pow b 2))))))) (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))))))) (* (pow a 2) (pow b 2)))) (+ (* 1/2 (/ (* (+ (* 1/2 (* a (* b (pow (+ a b) 2)))) (+ (* 2 (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))))) (- (/ (pow (+ a b) 2) (* a b)) (* 1/2 (/ (* (+ a b) (+ (* 2 (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* a (* b (+ a b))))) (* (pow a 2) (pow b 2)))))) (* a b))) (* 1/2 (/ (* (+ (* 2 (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* a (* b (+ a b)))) (- (* 2/3 (/ (pow (+ a b) 3) (* a b))) (+ (* 1/2 (/ (* (+ a b) (+ (* 1/2 (* a (* b (pow (+ a b) 2)))) (+ (* 2 (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))))))) (* (pow a 2) (pow b 2)))) (* 1/2 (/ (* (+ (* 2 (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* a (* b (+ a b)))) (- (/ (pow (+ a b) 2) (* a b)) (* 1/2 (/ (* (+ a b) (+ (* 2 (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* a (* b (+ a b))))) (* (pow a 2) (pow b 2)))))) (* a b)))))) (* a b)))))))) (+ (* 1/2 (/ (* (+ a b) (+ (* 1/2 (* a (* b (pow (+ a b) 2)))) (+ (* 2 (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))))))) (* (pow a 2) (pow b 2)))) (* 1/2 (/ (* (+ (* 2 (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* a (* b (+ a b)))) (- (/ (pow (+ a b) 2) (* a b)) (* 1/2 (/ (* (+ a b) (+ (* 2 (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* a (* b (+ a b))))) (* (pow a 2) (pow b 2)))))) (* a b)))))) (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (* (+ a b) (+ (* 2 (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* a (* b (+ a b))))) (* (pow a 2) (pow b 2)))))) (+ (/ 1 a) (/ 1 b)))","(* 2 (/ (* eps (+ a b)) b))","(* eps (+ (* 2 (/ (+ a b) b)) (* eps (- (* 2 (/ (pow (+ a b) 2) b)) (+ a b)))))","(* eps (+ (* 2 (/ (+ a b) b)) (* eps (- (+ (* 2 (/ (pow (+ a b) 2) b)) (* eps (- (* 4/3 (/ (pow (+ a b) 3) b)) (+ (* 1/3 (* b (+ a b))) (* 1/2 (* b (- (* 2 (/ (pow (+ a b) 2) b)) (+ a b)))))))) (+ a b)))))","(* eps (+ (* 2 (/ (+ a b) b)) (* eps (- (+ (* 2 (/ (pow (+ a b) 2) b)) (* eps (- (+ (* 4/3 (/ (pow (+ a b) 3) b)) (* eps (- (* 2/3 (/ (pow (+ a b) 4) b)) (+ (* 1/12 (* (pow b 2) (+ a b))) (+ (* 1/6 (* (pow b 2) (- (* 2 (/ (pow (+ a b) 2) b)) (+ a b)))) (* 1/2 (* b (- (* 4/3 (/ (pow (+ a b) 3) b)) (+ (* 1/3 (* b (+ a b))) (* 1/2 (* b (- (* 2 (/ (pow (+ a b) 2) b)) (+ a b))))))))))))) (+ (* 1/3 (* b (+ a b))) (* 1/2 (* b (- (* 2 (/ (pow (+ a b) 2) b)) (+ a b)))))))) (+ a b)))))","(/ (+ (* -1/2 eps) (/ 1 b)) eps)","(/ (+ (* eps (- (* -1 (* eps (+ (* -1/4 b) (* 1/6 b)))) 1/2)) (/ 1 b)) eps)","(/ (+ (* eps (- (* eps (- (* -1 (* eps (+ (* -1/2 (* b (+ (* -1/4 b) (* 1/6 b)))) (+ (* -1/12 (pow b 2)) (* 1/24 (pow b 2)))))) (+ (* -1/4 b) (* 1/6 b)))) 1/2)) (/ 1 b)) eps)","(* eps (+ b (* 1/2 (* (pow b 2) eps))))","(* eps (+ b (* eps (+ (* 1/6 (* (pow b 3) eps)) (* 1/2 (pow b 2))))))","(* eps (+ b (* eps (+ (* 1/2 (pow b 2)) (* eps (+ (* 1/24 (* (pow b 4) eps)) (* 1/6 (pow b 3))))))))","(/ (+ (* 1/2 eps) (/ 1 a)) eps)","(/ (+ (* eps (+ 1/2 (* eps (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))) (/ 1 a)) eps)","(/ (+ (* eps (+ 1/2 (* eps (- (+ (* 1/2 a) (* eps (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))))) (/ 1 a)) eps)","(* 2 (* (pow eps 2) (+ a b)))","(* (pow eps 2) (+ (* 2 (* eps (pow (+ a b) 2))) (* 2 (+ a b))))","(* (pow eps 2) (+ (* 2 (+ a b)) (* eps (+ (* 4/3 (* eps (pow (+ a b) 3))) (* 2 (pow (+ a b) 2))))))","(* (pow eps 2) (+ (* 2 (+ a b)) (* eps (+ (* 2 (pow (+ a b) 2)) (* eps (+ (* 2/3 (* eps (pow (+ a b) 4))) (* 4/3 (pow (+ a b) 3))))))))","(* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b)))))","(* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (+ (/ 1 (* a eps)) (/ 1 (* b eps))))))","(* eps (- (+ (/ 1 (* b eps)) (/ (exp (* a eps)) (- (exp (* a eps)) 1))) 1/2))","(* eps (+ (* b (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 eps)))","(* -1 (* eps (+ (* -1 (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b))))) (* -1 (/ (+ (/ 1 a) (/ 1 b)) eps)))))","(* -1 (* eps (- (* -1 (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 (* b eps)))))","(* -1 (* eps (- (* -1 (* b (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))) (/ 1 eps))))"]],"memory":[[2319440,61873280]],"method":["egg-herbie"],"outputs":[["(/ 1 a)","(/.f64 #s(literal 1 binary64) a)","(/ (+ 1 (* a (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) a)","(/.f64 (fma.f64 (*.f64 eps (-.f64 (/.f64 (pow.f64 (exp.f64 eps) b) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64))) a #s(literal 1 binary64)) a)","(/ (+ 1 (* a (- (+ (* a (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/.f64 (fma.f64 (fma.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (*.f64 eps eps) (pow.f64 (exp.f64 eps) b)) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/6 binary64) (*.f64 eps eps))) (*.f64 (*.f64 (*.f64 eps (-.f64 (/.f64 (pow.f64 (exp.f64 eps) b) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64))) eps) #s(literal 1/2 binary64))) a (*.f64 eps (-.f64 (/.f64 (pow.f64 (exp.f64 eps) b) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)))) a #s(literal 1 binary64)) a)","(/ (+ 1 (* a (- (+ (* a (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (* a (- (* 1/6 (/ (* (pow eps 3) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (exp.f64 eps) b)) (expm1.f64 (*.f64 b eps))) #s(literal 1/6 binary64) (*.f64 #s(literal -1/24 binary64) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 (*.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (*.f64 eps eps) (pow.f64 (exp.f64 eps) b)) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/6 binary64) (*.f64 eps eps))) (*.f64 (*.f64 (*.f64 eps (-.f64 (/.f64 (pow.f64 (exp.f64 eps) b) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64))) eps) #s(literal 1/2 binary64))) eps) #s(literal 1/2 binary64) (*.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 eps eps)) (*.f64 eps (-.f64 (/.f64 (pow.f64 (exp.f64 eps) b) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)))))) a (-.f64 (fma.f64 (/.f64 (*.f64 (*.f64 eps eps) (pow.f64 (exp.f64 eps) b)) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/6 binary64) (*.f64 eps eps))) (*.f64 (*.f64 (*.f64 eps (-.f64 (/.f64 (pow.f64 (exp.f64 eps) b) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64))) eps) #s(literal 1/2 binary64)))) a (*.f64 eps (-.f64 (/.f64 (pow.f64 (exp.f64 eps) b) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)))) a #s(literal 1 binary64)) a)","(/ (+ 1 (/ a b)) a)","(/.f64 (+.f64 (/.f64 a b) #s(literal 1 binary64)) a)","1","#s(literal 1 binary64)","(+ 1 (/ a b))","(+.f64 (/.f64 a b) #s(literal 1 binary64))","b","(+ a b)","(+.f64 b a)","(/ (+ (* -1/2 b) (* 1/2 b)) a)","(/.f64 #s(literal 0 binary64) a)","(/ (+ 1 (* eps (+ (* -1/2 b) (* 1/2 b)))) a)","(/.f64 (fma.f64 #s(literal 0 binary64) eps #s(literal 1 binary64)) a)","(/ (+ 1 (+ (* eps (+ (* -1/2 b) (* 1/2 b))) (/ a b))) a)","(/.f64 (fma.f64 #s(literal 0 binary64) eps (+.f64 (/.f64 a b) #s(literal 1 binary64))) a)","(* -1/2 (* a (pow b 2)))","(*.f64 (*.f64 (*.f64 b b) a) #s(literal -1/2 binary64))","(* a (+ (* -1/2 (* a b)) (* -1/2 (pow b 2))))","(*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 (+.f64 b a) b)) a)","(/ (+ 1 (* a (+ (* a (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))) (/ 1 b)))) a)","(/.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 eps #s(literal 1/12 binary64)) eps) a (/.f64 #s(literal 1 binary64) b)) a #s(literal 1 binary64)) a)","(/ (+ 1 (* a (+ (* a (+ (* a (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))) (/ 1 b)))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps #s(literal 1/12 binary64)) eps (*.f64 (*.f64 a eps) (-.f64 (*.f64 (*.f64 eps eps) #s(literal 1/8 binary64)) (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) (*.f64 (*.f64 (*.f64 eps #s(literal 1/12 binary64)) eps) #s(literal 1/2 binary64)))))) a (/.f64 #s(literal 1 binary64) b)) a #s(literal 1 binary64)) a)","(/ b a)","(/.f64 b a)","(/ (+ a b) a)","(/.f64 (+.f64 b a) a)","(/ (+ b (* a (+ 1 (* a (* b (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))))) a)","(/.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 eps #s(literal 1/12 binary64)) eps) b) a #s(literal 1 binary64)) a b) a)","(/ (+ b (* a (+ 1 (* a (+ (* a (* b (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))))))) (* b (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 b eps) (-.f64 (*.f64 (*.f64 eps eps) #s(literal 1/8 binary64)) (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) (*.f64 (*.f64 (*.f64 eps #s(literal 1/12 binary64)) eps) #s(literal 1/2 binary64))))) a (*.f64 (*.f64 (*.f64 eps #s(literal 1/12 binary64)) eps) b)) a #s(literal 1 binary64)) a b) a)","(/ (+ 1 (* (pow a 2) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))) a)","(/.f64 (fma.f64 (*.f64 a a) (*.f64 (*.f64 eps #s(literal 1/12 binary64)) eps) #s(literal 1 binary64)) a)","(/ (+ 1 (* (pow a 2) (+ (* a (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))) a)","(/.f64 (fma.f64 (*.f64 a a) (fma.f64 (*.f64 eps #s(literal 1/12 binary64)) eps (*.f64 (*.f64 a eps) (-.f64 (*.f64 (*.f64 eps eps) #s(literal 1/8 binary64)) (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) (*.f64 (*.f64 (*.f64 eps #s(literal 1/12 binary64)) eps) #s(literal 1/2 binary64)))))) #s(literal 1 binary64)) a)","(/ (+ 1 (* (pow a 2) (+ (* a (+ (* a (* eps (- (* 1/24 (pow eps 3)) (+ (* 1/120 (pow eps 3)) (+ (* 1/48 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))) (* 1/2 (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))))))))) (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))))))) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 (-.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/30 binary64)) (fma.f64 #s(literal 1/48 binary64) (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 eps eps)) (*.f64 eps #s(literal 1/12 binary64)) (*.f64 (*.f64 #s(literal 1/2 binary64) eps) (-.f64 (*.f64 (*.f64 eps eps) #s(literal 1/8 binary64)) (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) (*.f64 (*.f64 (*.f64 eps #s(literal 1/12 binary64)) eps) #s(literal 1/2 binary64)))))))) eps) a (*.f64 (-.f64 (*.f64 (*.f64 eps eps) #s(literal 1/8 binary64)) (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) (*.f64 (*.f64 (*.f64 eps #s(literal 1/12 binary64)) eps) #s(literal 1/2 binary64)))) eps)) a (*.f64 (*.f64 eps #s(literal 1/12 binary64)) eps)) (*.f64 a a) #s(literal 1 binary64)) a)","(/ (- (exp (* 2 (* b eps))) 1) (* a (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1))))","(/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) (*.f64 b eps))) (*.f64 (fma.f64 (pow.f64 (exp.f64 eps) b) a a) (expm1.f64 (*.f64 b eps))))","(/ (- (+ (* a (- (* 2 (/ (* eps (exp (* 2 (* b eps)))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 2) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (exp (* 2 (* b eps))) 1)) (* eps (* (pow (+ 1 (exp (* b eps))) 2) (pow (- (exp (* b eps)) 1) 2)))))) (/ (exp (* 2 (* b eps))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (/ 1 (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) a)","(/.f64 (fma.f64 (-.f64 (*.f64 (/.f64 #s(literal 2 binary64) (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64))) (/.f64 (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 b eps)) eps) (expm1.f64 (*.f64 b eps)))) (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) (expm1.f64 (*.f64 b eps))) (*.f64 (*.f64 (*.f64 eps eps) (pow.f64 (exp.f64 eps) b)) (expm1.f64 (*.f64 b eps)))) (expm1.f64 (*.f64 #s(literal 2 binary64) (*.f64 b eps)))) (*.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal 2 binary64)) (pow.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) #s(literal 2 binary64))) eps))) a (-.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 b eps)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) (expm1.f64 (*.f64 b eps)))) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) (expm1.f64 (*.f64 b eps)))))) a)","(/ (- (+ (* a (- (+ (* 2 (/ (* eps (exp (* 2 (* b eps)))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* a (- (* 2 (/ (* (pow eps 2) (exp (* 2 (* b eps)))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (+ (/ (* (+ (* 1/6 (* (pow eps 3) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 3) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (exp (* 2 (* b eps))) 1)) (* eps (* (pow (+ 1 (exp (* b eps))) 2) (pow (- (exp (* b eps)) 1) 2)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 2) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (* 2 (/ (* eps (exp (* 2 (* b eps)))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 2) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (exp (* 2 (* b eps))) 1)) (* eps (* (pow (+ 1 (exp (* b eps))) 2) (pow (- (exp (* b eps)) 1) 2)))))) (* eps (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))))))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 2) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (exp (* 2 (* b eps))) 1)) (* eps (* (pow (+ 1 (exp (* b eps))) 2) (pow (- (exp (* b eps)) 1) 2)))))) (/ (exp (* 2 (* b eps))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (/ 1 (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) a)","(/.f64 (fma.f64 (fma.f64 (-.f64 (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 eps eps)) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 b eps))) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) (expm1.f64 (*.f64 b eps)))) (fma.f64 (/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) (expm1.f64 (*.f64 b eps))) (*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (exp.f64 eps) b)) (expm1.f64 (*.f64 b eps)))) (*.f64 eps (pow.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) (*.f64 b eps))) (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal 2 binary64))) (*.f64 (/.f64 (-.f64 (*.f64 (/.f64 #s(literal 2 binary64) (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64))) (/.f64 (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 b eps)) eps) (expm1.f64 (*.f64 b eps)))) (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) (expm1.f64 (*.f64 b eps))) (*.f64 (*.f64 (*.f64 eps eps) (pow.f64 (exp.f64 eps) b)) (expm1.f64 (*.f64 b eps)))) (expm1.f64 (*.f64 #s(literal 2 binary64) (*.f64 b eps)))) (*.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal 2 binary64)) (pow.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) #s(literal 2 binary64))) eps))) (*.f64 eps (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)))) (/.f64 (fma.f64 (*.f64 (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) (expm1.f64 (*.f64 b eps))) (*.f64 (*.f64 (*.f64 eps eps) (pow.f64 (exp.f64 eps) b)) (expm1.f64 (*.f64 b eps)))) (expm1.f64 (*.f64 b eps)))))) a (-.f64 (*.f64 (/.f64 #s(literal 2 binary64) (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64))) (/.f64 (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 b eps)) eps) (expm1.f64 (*.f64 b eps)))) (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) (expm1.f64 (*.f64 b eps))) (*.f64 (*.f64 (*.f64 eps eps) (pow.f64 (exp.f64 eps) b)) (expm1.f64 (*.f64 b eps)))) (expm1.f64 (*.f64 #s(literal 2 binary64) (*.f64 b eps)))) (*.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal 2 binary64)) (pow.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) #s(literal 2 binary64))) eps)))) a (-.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 b eps)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) (expm1.f64 (*.f64 b eps)))) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) (expm1.f64 (*.f64 b eps)))))) a)","(/ (- (+ (* a (- (+ (* 2 (/ (* eps (exp (* 2 (* b eps)))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* a (- (+ (* 2 (/ (* (pow eps 2) (exp (* 2 (* b eps)))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* a (- (* 4/3 (/ (* (pow eps 3) (exp (* 2 (* b eps)))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (+ (/ (* (+ (* 1/24 (* (pow eps 4) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (+ (* 1/4 (* (pow eps 4) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (* 1/3 (* (pow eps 4) (* (exp (* b eps)) (- (exp (* b eps)) 1)))))) (- (exp (* 2 (* b eps))) 1)) (* eps (* (pow (+ 1 (exp (* b eps))) 2) (pow (- (exp (* b eps)) 1) 2)))) (+ (/ (* (+ (* 1/6 (* (pow eps 3) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 3) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (* 2 (/ (* eps (exp (* 2 (* b eps)))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 2) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (exp (* 2 (* b eps))) 1)) (* eps (* (pow (+ 1 (exp (* b eps))) 2) (pow (- (exp (* b eps)) 1) 2)))))) (* eps (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 2) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (* 2 (/ (* (pow eps 2) (exp (* 2 (* b eps)))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (+ (/ (* (+ (* 1/6 (* (pow eps 3) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 3) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (exp (* 2 (* b eps))) 1)) (* eps (* (pow (+ 1 (exp (* b eps))) 2) (pow (- (exp (* b eps)) 1) 2)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 2) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (* 2 (/ (* eps (exp (* 2 (* b eps)))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 2) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (exp (* 2 (* b eps))) 1)) (* eps (* (pow (+ 1 (exp (* b eps))) 2) (pow (- (exp (* b eps)) 1) 2)))))) (* eps (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1))))))) (* eps (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1))))))))) (+ (/ (* (+ (* 1/6 (* (pow eps 3) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 3) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (exp (* 2 (* b eps))) 1)) (* eps (* (pow (+ 1 (exp (* b eps))) 2) (pow (- (exp (* b eps)) 1) 2)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 2) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (* 2 (/ (* eps (exp (* 2 (* b eps)))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 2) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (exp (* 2 (* b eps))) 1)) (* eps (* (pow (+ 1 (exp (* b eps))) 2) (pow (- (exp (* b eps)) 1) 2)))))) (* eps (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))))))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (* (pow eps 2) (* (exp (* b eps)) (- (exp (* b eps)) 1)))) (- (exp (* 2 (* b eps))) 1)) (* eps (* (pow (+ 1 (exp (* b eps))) 2) (pow (- (exp (* b eps)) 1) 2)))))) (/ (exp (* 2 (* b eps))) (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) (/ 1 (* (+ 1 (exp (* b eps))) (- (exp (* b eps)) 1)))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 (/.f64 #s(literal 4/3 binary64) (expm1.f64 (*.f64 b eps))) (/.f64 (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 b eps)) (pow.f64 eps #s(literal 3 binary64))) (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)))) (fma.f64 (/.f64 (-.f64 (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 eps eps)) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 b eps))) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) (expm1.f64 (*.f64 b eps)))) (fma.f64 (/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) (expm1.f64 (*.f64 b eps))) (*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (exp.f64 eps) b)) (expm1.f64 (*.f64 b eps)))) (*.f64 eps (pow.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) (*.f64 b eps))) (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal 2 binary64))) (*.f64 (/.f64 (-.f64 (*.f64 (/.f64 #s(literal 2 binary64) (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64))) (/.f64 (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 b eps)) eps) (expm1.f64 (*.f64 b eps)))) (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) (expm1.f64 (*.f64 b eps))) (*.f64 (*.f64 (*.f64 eps eps) (pow.f64 (exp.f64 eps) b)) (expm1.f64 (*.f64 b eps)))) (expm1.f64 (*.f64 #s(literal 2 binary64) (*.f64 b eps)))) (*.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal 2 binary64)) (pow.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) #s(literal 2 binary64))) eps))) (*.f64 eps (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)))) (/.f64 (fma.f64 (*.f64 (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) (expm1.f64 (*.f64 b eps))) (*.f64 (*.f64 (*.f64 eps eps) (pow.f64 (exp.f64 eps) b)) (expm1.f64 (*.f64 b eps)))) (expm1.f64 (*.f64 b eps)))))) (*.f64 eps (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)))) (/.f64 (fma.f64 (*.f64 (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) (expm1.f64 (*.f64 b eps))) (*.f64 (*.f64 (*.f64 eps eps) (pow.f64 (exp.f64 eps) b)) (expm1.f64 (*.f64 b eps)))) (expm1.f64 (*.f64 b eps))) (fma.f64 (/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) (expm1.f64 (*.f64 b eps))) (*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (exp.f64 eps) b)) (expm1.f64 (*.f64 b eps)))) (*.f64 eps (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)))) (/.f64 (-.f64 (*.f64 (/.f64 #s(literal 2 binary64) (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64))) (/.f64 (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 b eps)) eps) (expm1.f64 (*.f64 b eps)))) (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) (expm1.f64 (*.f64 b eps))) (*.f64 (*.f64 (*.f64 eps eps) (pow.f64 (exp.f64 eps) b)) (expm1.f64 (*.f64 b eps)))) (expm1.f64 (*.f64 #s(literal 2 binary64) (*.f64 b eps)))) (*.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal 2 binary64)) (pow.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) #s(literal 2 binary64))) eps))) (expm1.f64 (*.f64 b eps))) (*.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) (expm1.f64 (*.f64 b eps))) (*.f64 (*.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (exp.f64 eps) b)) (expm1.f64 (*.f64 b eps))) #s(literal 7/12 binary64))) (*.f64 eps (pow.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) (*.f64 b eps))) (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal 2 binary64))))))) a (-.f64 (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 eps eps)) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 b eps))) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) (expm1.f64 (*.f64 b eps)))) (fma.f64 (/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) (expm1.f64 (*.f64 b eps))) (*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (exp.f64 eps) b)) (expm1.f64 (*.f64 b eps)))) (*.f64 eps (pow.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) (*.f64 b eps))) (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal 2 binary64))) (*.f64 (/.f64 (-.f64 (*.f64 (/.f64 #s(literal 2 binary64) (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64))) (/.f64 (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 b eps)) eps) (expm1.f64 (*.f64 b eps)))) (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) (expm1.f64 (*.f64 b eps))) (*.f64 (*.f64 (*.f64 eps eps) (pow.f64 (exp.f64 eps) b)) (expm1.f64 (*.f64 b eps)))) (expm1.f64 (*.f64 #s(literal 2 binary64) (*.f64 b eps)))) (*.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal 2 binary64)) (pow.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) #s(literal 2 binary64))) eps))) (*.f64 eps (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)))) (/.f64 (fma.f64 (*.f64 (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) (expm1.f64 (*.f64 b eps))) (*.f64 (*.f64 (*.f64 eps eps) (pow.f64 (exp.f64 eps) b)) (expm1.f64 (*.f64 b eps)))) (expm1.f64 (*.f64 b eps))))))) a (-.f64 (*.f64 (/.f64 #s(literal 2 binary64) (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64))) (/.f64 (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 b eps)) eps) (expm1.f64 (*.f64 b eps)))) (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) (expm1.f64 (*.f64 b eps))) (*.f64 (*.f64 (*.f64 eps eps) (pow.f64 (exp.f64 eps) b)) (expm1.f64 (*.f64 b eps)))) (expm1.f64 (*.f64 #s(literal 2 binary64) (*.f64 b eps)))) (*.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal 2 binary64)) (pow.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) #s(literal 2 binary64))) eps)))) a (-.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 b eps)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) (expm1.f64 (*.f64 b eps)))) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) (expm1.f64 (*.f64 b eps)))))) a)","(/ (* eps (- (exp (* 2 (* b eps))) 1)) (- (exp (* b eps)) 1))","(/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) (*.f64 b eps))) eps) (expm1.f64 (*.f64 b eps)))","(+ (* 2 (/ (* a (* (pow eps 2) (exp (* 2 (* b eps))))) (- (exp (* b eps)) 1))) (/ (* eps (- (exp (* 2 (* b eps))) 1)) (- (exp (* b eps)) 1)))","(fma.f64 (/.f64 (*.f64 (*.f64 a (*.f64 eps eps)) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 b eps))) (expm1.f64 (*.f64 b eps))) #s(literal 2 binary64) (/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) (*.f64 b eps))) eps) (expm1.f64 (*.f64 b eps))))","(+ (* a (+ (* 2 (/ (* a (* (pow eps 3) (exp (* 2 (* b eps))))) (- (exp (* b eps)) 1))) (* 2 (/ (* (pow eps 2) (exp (* 2 (* b eps)))) (- (exp (* b eps)) 1))))) (/ (* eps (- (exp (* 2 (* b eps))) 1)) (- (exp (* b eps)) 1)))","(fma.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (*.f64 eps eps) (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 b eps)) (expm1.f64 (*.f64 b eps))) (/.f64 (*.f64 (*.f64 a (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 b eps))) (expm1.f64 (*.f64 b eps))))) a (/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) (*.f64 b eps))) eps) (expm1.f64 (*.f64 b eps))))","(+ (* a (+ (* 2 (/ (* (pow eps 2) (exp (* 2 (* b eps)))) (- (exp (* b eps)) 1))) (* a (+ (* 4/3 (/ (* a (* (pow eps 4) (exp (* 2 (* b eps))))) (- (exp (* b eps)) 1))) (* 2 (/ (* (pow eps 3) (exp (* 2 (* b eps)))) (- (exp (* b eps)) 1))))))) (/ (* eps (- (exp (* 2 (* b eps))) 1)) (- (exp (* b eps)) 1)))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 b eps)) (pow.f64 eps #s(literal 3 binary64))) (expm1.f64 (*.f64 b eps))) #s(literal 2 binary64) (/.f64 (*.f64 (*.f64 #s(literal 4/3 binary64) a) (*.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 b eps)))) (expm1.f64 (*.f64 b eps)))) a (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 eps eps)) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 b eps))) (expm1.f64 (*.f64 b eps)))) a (/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) (*.f64 b eps))) eps) (expm1.f64 (*.f64 b eps))))","(+ b (* 2 a))","(fma.f64 #s(literal 2 binary64) a b)","(+ b (* a (+ 2 (/ a b))))","(fma.f64 (+.f64 (/.f64 a b) #s(literal 2 binary64)) a b)","(/ 1 (* (pow a 2) b))","(/.f64 #s(literal 1 binary64) (*.f64 (*.f64 a a) b))","(/ (+ (/ 1 b) (/ a (pow b 2))) (pow a 2))","(/.f64 (+.f64 (/.f64 a (*.f64 b b)) (/.f64 #s(literal 1 binary64) b)) (*.f64 a a))","(* 1/2 (/ b a))","(*.f64 (/.f64 b a) #s(literal 1/2 binary64))","(/ (+ a (* 1/2 b)) a)","(/.f64 (fma.f64 #s(literal 1/2 binary64) b a) a)","(/ (+ (* 1/2 b) (* a (+ 1 (* 1/2 (/ a b))))) a)","(/.f64 (fma.f64 (fma.f64 (/.f64 a b) #s(literal 1/2 binary64) #s(literal 1 binary64)) a (*.f64 #s(literal 1/2 binary64) b)) a)","(/ 1 (* a eps))","(/.f64 (/.f64 #s(literal 1 binary64) a) eps)","(/ (+ (* 1/2 a) (/ 1 eps)) a)","(/.f64 (fma.f64 #s(literal 1/2 binary64) a (/.f64 #s(literal 1 binary64) eps)) a)","(/ (+ (* a (+ 1/2 (* a (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))) (/ 1 eps)) a)","(/.f64 (fma.f64 (fma.f64 (*.f64 eps #s(literal 1/12 binary64)) a #s(literal 1/2 binary64)) a (/.f64 #s(literal 1 binary64) eps)) a)","(/ (+ (* a (+ 1/2 (* a (- (+ (* 1/2 eps) (* a (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) (+ (* 1/6 eps) (* 1/4 eps)))))) (/ 1 eps)) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 (*.f64 eps eps) #s(literal 1/8 binary64)) (fma.f64 #s(literal 1/12 binary64) (*.f64 eps eps) (*.f64 (*.f64 (*.f64 eps #s(literal 1/12 binary64)) eps) #s(literal 1/2 binary64)))) a (*.f64 eps #s(literal 1/12 binary64))) a #s(literal 1/2 binary64)) a (/.f64 #s(literal 1 binary64) eps)) a)","(* eps (- (exp (* 2 (* b eps))) 1))","(*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) (*.f64 b eps))) eps)","(+ (* 2 (* a (* (pow eps 2) (exp (* 2 (* b eps)))))) (* eps (- (exp (* 2 (* b eps))) 1)))","(fma.f64 (*.f64 #s(literal 2 binary64) a) (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 b eps)) (*.f64 eps eps)) (*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) (*.f64 b eps))) eps))","(+ (* a (+ (* 2 (* a (* (pow eps 3) (exp (* 2 (* b eps)))))) (* 2 (* (pow eps 2) (exp (* 2 (* b eps))))))) (* eps (- (exp (* 2 (* b eps))) 1)))","(fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 b eps)) (fma.f64 a (pow.f64 eps #s(literal 3 binary64)) (*.f64 eps eps)))) a (*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) (*.f64 b eps))) eps))","(+ (* a (+ (* 2 (* (pow eps 2) (exp (* 2 (* b eps))))) (* a (+ (* 4/3 (* a (* (pow eps 4) (exp (* 2 (* b eps)))))) (* 2 (* (pow eps 3) (exp (* 2 (* b eps))))))))) (* eps (- (exp (* 2 (* b eps))) 1)))","(fma.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 eps eps)) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 b eps)) (*.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) a) (*.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 b eps))) (*.f64 (*.f64 #s(literal 2 binary64) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 b eps)))) a)) a (*.f64 (expm1.f64 (*.f64 #s(literal 2 binary64) (*.f64 b eps))) eps))","(/ (* eps (- (exp (* eps (+ a b))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps) (*.f64 (expm1.f64 (*.f64 b eps)) (expm1.f64 (*.f64 a eps))))","(/ 1 b)","(/.f64 #s(literal 1 binary64) b)","(+ (/ 1 a) (/ 1 b))","(+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a))","(/ a b)","(/.f64 a b)","(* a (+ (/ 1 a) (/ 1 b)))","(fma.f64 (/.f64 #s(literal 1 binary64) b) a #s(literal 1 binary64))","a","(* a (+ 1 (/ b a)))","(fma.f64 (/.f64 b a) a a)","(+ (/ 1 a) (+ (/ 1 b) (/ (* eps (+ (* -1/2 b) (* 1/2 b))) a)))","(fma.f64 eps (/.f64 #s(literal 0 binary64) a) (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))","(* -1/2 (* (pow a 2) b))","(*.f64 (*.f64 (*.f64 a a) #s(literal -1/2 binary64)) b)","(* (pow a 2) (+ (* -1/2 b) (* -1/2 (/ (pow b 2) a))))","(*.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (*.f64 b b) a) b)) (*.f64 a a))","(/ (+ 1 (* b (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)))) b)","(/.f64 (fma.f64 (*.f64 b eps) (-.f64 (/.f64 (pow.f64 (exp.f64 eps) a) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) #s(literal 1 binary64)) b)","(+ 1 (* b (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))))","(fma.f64 (*.f64 b eps) (-.f64 (/.f64 (pow.f64 (exp.f64 eps) a) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) #s(literal 1 binary64))","(* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))","(*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 eps) a) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps)","(/ (* eps (- (exp (* 2 (* eps (+ a b)))) 1)) (* (+ 1 (exp (* eps (+ a b)))) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))))","(*.f64 (/.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal 1 binary64)) (expm1.f64 (*.f64 a eps)))) (/.f64 eps (expm1.f64 (*.f64 b eps))))","(/ (* eps (- (exp (* 2 (* eps (+ a b)))) 1)) (- (exp (* b eps)) 1))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps) (expm1.f64 (*.f64 b eps)))","(/ (pow a 2) b)","(/.f64 (*.f64 a a) b)","(* (pow a 2) (+ (* 2 (/ 1 a)) (/ 1 b)))","(*.f64 (+.f64 (/.f64 #s(literal 2 binary64) a) (/.f64 #s(literal 1 binary64) b)) (*.f64 a a))","(* (pow a 2) (+ (* 2 (/ 1 a)) (+ (/ 1 b) (/ b (pow a 2)))))","(*.f64 (+.f64 (+.f64 (/.f64 b (*.f64 a a)) (/.f64 #s(literal 1 binary64) b)) (/.f64 #s(literal 2 binary64) a)) (*.f64 a a))","(/ 1 (* a (pow b 2)))","(/.f64 #s(literal 1 binary64) (*.f64 (*.f64 b b) a))","(/ (+ (/ 1 (* a b)) (/ 1 (pow b 2))) a)","(/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (*.f64 b b)) (/.f64 (/.f64 #s(literal 1 binary64) a) b)) a)","(* 1/2 (/ a b))","(*.f64 (/.f64 a b) #s(literal 1/2 binary64))","(* a (+ (/ 1 a) (* 1/2 (/ 1 b))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) b) a #s(literal 1 binary64))","(* a (+ (* 1/2 (/ b (pow a 2))) (+ (/ 1 a) (* 1/2 (/ 1 b)))))","(fma.f64 (*.f64 (/.f64 b (*.f64 a a)) #s(literal 1/2 binary64)) a (fma.f64 (/.f64 #s(literal 1/2 binary64) b) a #s(literal 1 binary64)))","(/ (exp (* a eps)) (- (exp (* a eps)) 1))","(/.f64 (pow.f64 (exp.f64 eps) a) (expm1.f64 (*.f64 a eps)))","(* eps (- (exp (* 2 (* eps (+ a b)))) 1))","(*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps)","(/ (* eps (- (exp (* eps (- b (* -1 a)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps) (*.f64 (expm1.f64 (*.f64 b eps)) (expm1.f64 (*.f64 a eps))))","(* -1 (* a (- (* -1 (/ b a)) 1)))","(fma.f64 (/.f64 b (neg.f64 a)) (neg.f64 a) a)","(* -1 (/ (+ (* -1/2 b) (* 1/2 b)) a))","(/.f64 #s(literal 0 binary64) a)","(+ (* -1 (/ (- (* eps (+ (* -1/2 b) (* 1/2 b))) 1) a)) (/ 1 b))","(-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 (fma.f64 #s(literal 0 binary64) eps #s(literal -1 binary64)) a))","(/ (* eps (- (exp (* 2 (* eps (- b (* -1 a))))) 1)) (* (+ 1 (exp (* eps (- b (* -1 a))))) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))))","(*.f64 (/.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal 1 binary64)) (expm1.f64 (*.f64 a eps)))) (/.f64 eps (expm1.f64 (*.f64 b eps))))","(/ (* eps (- (exp (* 2 (* eps (- b (* -1 a))))) 1)) (- (exp (* b eps)) 1))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps) (expm1.f64 (*.f64 b eps)))","(* (pow a 2) (+ (* -1 (/ (- (* -1 (/ b a)) 2) a)) (/ 1 b)))","(*.f64 (-.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 b a) #s(literal -2 binary64)) a)) (*.f64 a a))","(* -1 (* a (- (* -1 (/ (+ 1 (* 1/2 (/ b a))) a)) (* 1/2 (/ 1 b)))))","(*.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 b a) #s(literal 1/2 binary64) #s(literal 1 binary64)) a) #s(literal -1 binary64) (/.f64 #s(literal -1/2 binary64) b)) (neg.f64 a))","(* eps (- (exp (* 2 (* eps (- b (* -1 a))))) 1))","(*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps)","(/ (+ 1 (* b (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) b)","(/.f64 (fma.f64 (*.f64 b eps) (-.f64 (/.f64 (pow.f64 (exp.f64 eps) a) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) #s(literal 1 binary64)) b)","(/ (+ 1 (* b (- (+ (* b (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/.f64 (fma.f64 (fma.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (*.f64 eps eps) (pow.f64 (exp.f64 eps) a)) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/6 binary64) (*.f64 eps eps))) (*.f64 (*.f64 (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 eps) a) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps) eps) #s(literal 1/2 binary64))) b (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 eps) a) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps)) b #s(literal 1 binary64)) b)","(/ (+ 1 (* b (- (+ (* b (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (* b (- (* 1/6 (/ (* (pow eps 3) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (exp.f64 eps) a)) (expm1.f64 (*.f64 a eps))) #s(literal 1/6 binary64) (*.f64 #s(literal -1/24 binary64) (pow.f64 eps #s(literal 3 binary64)))) (fma.f64 (*.f64 (-.f64 (fma.f64 (/.f64 (*.f64 (*.f64 eps eps) (pow.f64 (exp.f64 eps) a)) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/6 binary64) (*.f64 eps eps))) (*.f64 (*.f64 (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 eps) a) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps) eps) #s(literal 1/2 binary64))) eps) #s(literal 1/2 binary64) (*.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 eps eps)) (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 eps) a) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps)))) b (-.f64 (fma.f64 (/.f64 (*.f64 (*.f64 eps eps) (pow.f64 (exp.f64 eps) a)) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64) (*.f64 #s(literal -1/6 binary64) (*.f64 eps eps))) (*.f64 (*.f64 (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 eps) a) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps) eps) #s(literal 1/2 binary64)))) b (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 eps) a) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps)) b #s(literal 1 binary64)) b)","(/ (+ 1 (/ b a)) b)","(/.f64 (+.f64 (/.f64 b a) #s(literal 1 binary64)) b)","(/ (+ a b) b)","(/.f64 (+.f64 b a) b)","(/ (+ (* -1/2 a) (* 1/2 a)) b)","(/.f64 #s(literal 0 binary64) b)","(/ (+ 1 (* eps (+ (* -1/2 a) (* 1/2 a)))) b)","(/.f64 (fma.f64 #s(literal 0 binary64) eps #s(literal 1 binary64)) b)","(/ (+ 1 (+ (* eps (+ (* -1/2 a) (* 1/2 a))) (/ b a))) b)","(/.f64 (fma.f64 #s(literal 0 binary64) eps (+.f64 (/.f64 b a) #s(literal 1 binary64))) b)","(* b (+ (* -1/2 (* a b)) (* -1/2 (pow a 2))))","(*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 a (+.f64 b a))) b)","(/ (- (exp (* 2 (* a eps))) 1) (* b (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1))))","(/.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) eps)) (*.f64 (fma.f64 (pow.f64 (exp.f64 eps) a) b b) (expm1.f64 (*.f64 a eps))))","(/ (- (+ (* b (- (* 2 (/ (* eps (exp (* 2 (* a eps)))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 2) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (exp (* 2 (* a eps))) 1)) (* eps (* (pow (+ 1 (exp (* a eps))) 2) (pow (- (exp (* a eps)) 1) 2)))))) (/ (exp (* 2 (* a eps))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (/ 1 (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) b)","(/.f64 (fma.f64 (-.f64 (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) eps) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 a eps))) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) (expm1.f64 (*.f64 a eps)))) (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) (expm1.f64 (*.f64 a eps))) (*.f64 (*.f64 (*.f64 eps eps) (pow.f64 (exp.f64 eps) a)) (expm1.f64 (*.f64 a eps)))) (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) eps))) (*.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 a eps)) #s(literal 2 binary64)) (pow.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) #s(literal 2 binary64))) eps))) b (-.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 a eps)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) (expm1.f64 (*.f64 a eps)))) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) (expm1.f64 (*.f64 a eps)))))) b)","(/ (- (+ (* b (- (+ (* 2 (/ (* eps (exp (* 2 (* a eps)))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* b (- (* 2 (/ (* (pow eps 2) (exp (* 2 (* a eps)))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (+ (/ (* (+ (* 1/6 (* (pow eps 3) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 3) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (exp (* 2 (* a eps))) 1)) (* eps (* (pow (+ 1 (exp (* a eps))) 2) (pow (- (exp (* a eps)) 1) 2)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 2) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (* 2 (/ (* eps (exp (* 2 (* a eps)))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 2) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (exp (* 2 (* a eps))) 1)) (* eps (* (pow (+ 1 (exp (* a eps))) 2) (pow (- (exp (* a eps)) 1) 2)))))) (* eps (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))))))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 2) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (exp (* 2 (* a eps))) 1)) (* eps (* (pow (+ 1 (exp (* a eps))) 2) (pow (- (exp (* a eps)) 1) 2)))))) (/ (exp (* 2 (* a eps))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (/ 1 (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) b)","(/.f64 (fma.f64 (fma.f64 (-.f64 (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 eps eps)) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 a eps))) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) (expm1.f64 (*.f64 a eps)))) (fma.f64 (/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) (expm1.f64 (*.f64 a eps))) (*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (exp.f64 eps) a)) (expm1.f64 (*.f64 a eps)))) (*.f64 eps (pow.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) eps)) (pow.f64 (expm1.f64 (*.f64 a eps)) #s(literal 2 binary64))) (*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) (expm1.f64 (*.f64 a eps))) (*.f64 (*.f64 (*.f64 eps eps) (pow.f64 (exp.f64 eps) a)) (expm1.f64 (*.f64 a eps)))) (*.f64 eps (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)))) (/.f64 (-.f64 (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) eps) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 a eps))) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) (expm1.f64 (*.f64 a eps)))) (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) (expm1.f64 (*.f64 a eps))) (*.f64 (*.f64 (*.f64 eps eps) (pow.f64 (exp.f64 eps) a)) (expm1.f64 (*.f64 a eps)))) (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) eps))) (*.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 a eps)) #s(literal 2 binary64)) (pow.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) #s(literal 2 binary64))) eps))) (expm1.f64 (*.f64 a eps)))))) b (-.f64 (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) eps) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 a eps))) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) (expm1.f64 (*.f64 a eps)))) (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) (expm1.f64 (*.f64 a eps))) (*.f64 (*.f64 (*.f64 eps eps) (pow.f64 (exp.f64 eps) a)) (expm1.f64 (*.f64 a eps)))) (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) eps))) (*.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 a eps)) #s(literal 2 binary64)) (pow.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) #s(literal 2 binary64))) eps)))) b (-.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 a eps)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) (expm1.f64 (*.f64 a eps)))) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) (expm1.f64 (*.f64 a eps)))))) b)","(/ (- (+ (* b (- (+ (* 2 (/ (* eps (exp (* 2 (* a eps)))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* b (- (+ (* 2 (/ (* (pow eps 2) (exp (* 2 (* a eps)))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* b (- (* 4/3 (/ (* (pow eps 3) (exp (* 2 (* a eps)))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (+ (/ (* (+ (* 1/24 (* (pow eps 4) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (+ (* 1/4 (* (pow eps 4) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (* 1/3 (* (pow eps 4) (* (exp (* a eps)) (- (exp (* a eps)) 1)))))) (- (exp (* 2 (* a eps))) 1)) (* eps (* (pow (+ 1 (exp (* a eps))) 2) (pow (- (exp (* a eps)) 1) 2)))) (+ (/ (* (+ (* 1/6 (* (pow eps 3) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 3) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (* 2 (/ (* eps (exp (* 2 (* a eps)))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 2) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (exp (* 2 (* a eps))) 1)) (* eps (* (pow (+ 1 (exp (* a eps))) 2) (pow (- (exp (* a eps)) 1) 2)))))) (* eps (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 2) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (* 2 (/ (* (pow eps 2) (exp (* 2 (* a eps)))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (+ (/ (* (+ (* 1/6 (* (pow eps 3) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 3) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (exp (* 2 (* a eps))) 1)) (* eps (* (pow (+ 1 (exp (* a eps))) 2) (pow (- (exp (* a eps)) 1) 2)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 2) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (* 2 (/ (* eps (exp (* 2 (* a eps)))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 2) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (exp (* 2 (* a eps))) 1)) (* eps (* (pow (+ 1 (exp (* a eps))) 2) (pow (- (exp (* a eps)) 1) 2)))))) (* eps (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1))))))) (* eps (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1))))))))) (+ (/ (* (+ (* 1/6 (* (pow eps 3) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 3) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (exp (* 2 (* a eps))) 1)) (* eps (* (pow (+ 1 (exp (* a eps))) 2) (pow (- (exp (* a eps)) 1) 2)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 2) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (* 2 (/ (* eps (exp (* 2 (* a eps)))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 2) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (exp (* 2 (* a eps))) 1)) (* eps (* (pow (+ 1 (exp (* a eps))) 2) (pow (- (exp (* a eps)) 1) 2)))))) (* eps (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))))))) (/ (* (+ (* 1/2 (* (pow eps 2) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (* (pow eps 2) (* (exp (* a eps)) (- (exp (* a eps)) 1)))) (- (exp (* 2 (* a eps))) 1)) (* eps (* (pow (+ 1 (exp (* a eps))) 2) (pow (- (exp (* a eps)) 1) 2)))))) (/ (exp (* 2 (* a eps))) (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) (/ 1 (* (+ 1 (exp (* a eps))) (- (exp (* a eps)) 1)))) b)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (-.f64 (/.f64 (*.f64 (*.f64 #s(literal 4/3 binary64) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 a eps))) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) (expm1.f64 (*.f64 a eps)))) (fma.f64 (/.f64 (-.f64 (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 eps eps)) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 a eps))) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) (expm1.f64 (*.f64 a eps)))) (fma.f64 (/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) (expm1.f64 (*.f64 a eps))) (*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (exp.f64 eps) a)) (expm1.f64 (*.f64 a eps)))) (*.f64 eps (pow.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) eps)) (pow.f64 (expm1.f64 (*.f64 a eps)) #s(literal 2 binary64))) (*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) (expm1.f64 (*.f64 a eps))) (*.f64 (*.f64 (*.f64 eps eps) (pow.f64 (exp.f64 eps) a)) (expm1.f64 (*.f64 a eps)))) (*.f64 eps (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)))) (/.f64 (-.f64 (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) eps) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 a eps))) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) (expm1.f64 (*.f64 a eps)))) (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) (expm1.f64 (*.f64 a eps))) (*.f64 (*.f64 (*.f64 eps eps) (pow.f64 (exp.f64 eps) a)) (expm1.f64 (*.f64 a eps)))) (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) eps))) (*.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 a eps)) #s(literal 2 binary64)) (pow.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) #s(literal 2 binary64))) eps))) (expm1.f64 (*.f64 a eps)))))) (*.f64 eps (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)))) (/.f64 (fma.f64 (*.f64 (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) (expm1.f64 (*.f64 a eps))) (*.f64 (*.f64 (*.f64 eps eps) (pow.f64 (exp.f64 eps) a)) (expm1.f64 (*.f64 a eps)))) (expm1.f64 (*.f64 a eps))) (fma.f64 (/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) (expm1.f64 (*.f64 a eps))) (*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (exp.f64 eps) a)) (expm1.f64 (*.f64 a eps)))) (*.f64 eps (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)))) (/.f64 (-.f64 (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) eps) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 a eps))) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) (expm1.f64 (*.f64 a eps)))) (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) (expm1.f64 (*.f64 a eps))) (*.f64 (*.f64 (*.f64 eps eps) (pow.f64 (exp.f64 eps) a)) (expm1.f64 (*.f64 a eps)))) (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) eps))) (*.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 a eps)) #s(literal 2 binary64)) (pow.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) #s(literal 2 binary64))) eps))) (expm1.f64 (*.f64 a eps))) (*.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) (expm1.f64 (*.f64 a eps))) (*.f64 (*.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (exp.f64 eps) a)) (expm1.f64 (*.f64 a eps))) #s(literal 7/12 binary64))) (*.f64 eps (pow.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) eps)) (pow.f64 (expm1.f64 (*.f64 a eps)) #s(literal 2 binary64))))))) b (-.f64 (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 eps eps)) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 a eps))) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) (expm1.f64 (*.f64 a eps)))) (fma.f64 (/.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) (expm1.f64 (*.f64 a eps))) (*.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (exp.f64 eps) a)) (expm1.f64 (*.f64 a eps)))) (*.f64 eps (pow.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) #s(literal 2 binary64)))) (/.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) eps)) (pow.f64 (expm1.f64 (*.f64 a eps)) #s(literal 2 binary64))) (*.f64 (/.f64 (fma.f64 (*.f64 (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) (expm1.f64 (*.f64 a eps))) (*.f64 (*.f64 (*.f64 eps eps) (pow.f64 (exp.f64 eps) a)) (expm1.f64 (*.f64 a eps)))) (*.f64 eps (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)))) (/.f64 (-.f64 (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) eps) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 a eps))) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) (expm1.f64 (*.f64 a eps)))) (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) (expm1.f64 (*.f64 a eps))) (*.f64 (*.f64 (*.f64 eps eps) (pow.f64 (exp.f64 eps) a)) (expm1.f64 (*.f64 a eps)))) (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) eps))) (*.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 a eps)) #s(literal 2 binary64)) (pow.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) #s(literal 2 binary64))) eps))) (expm1.f64 (*.f64 a eps))))))) b (-.f64 (/.f64 (*.f64 (*.f64 #s(literal 2 binary64) eps) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 a eps))) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) (expm1.f64 (*.f64 a eps)))) (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 eps eps) #s(literal 1/2 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) (expm1.f64 (*.f64 a eps))) (*.f64 (*.f64 (*.f64 eps eps) (pow.f64 (exp.f64 eps) a)) (expm1.f64 (*.f64 a eps)))) (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) eps))) (*.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 a eps)) #s(literal 2 binary64)) (pow.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) #s(literal 2 binary64))) eps)))) b (-.f64 (/.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 a eps)) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) (expm1.f64 (*.f64 a eps)))) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) a) #s(literal 1 binary64)) (expm1.f64 (*.f64 a eps)))))) b)","(/ (- (exp (* 2 (* a eps))) 1) b)","(/.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) eps)) b)","(/ (- (+ (exp (* 2 (* a eps))) (* b (- (* 2 (* eps (exp (* 2 (* a eps))))) (* 1/2 (* eps (- (exp (* 2 (* a eps))) 1)))))) 1) b)","(/.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 2 binary64) eps) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 a eps)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) eps)))) b (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) eps))) b)","(/ (- (+ (exp (* 2 (* a eps))) (* b (- (+ (* 2 (* eps (exp (* 2 (* a eps))))) (* b (- (* 2 (* (pow eps 2) (exp (* 2 (* a eps))))) (+ (* 1/6 (* (pow eps 2) (- (exp (* 2 (* a eps))) 1))) (* 1/2 (* eps (- (* 2 (* eps (exp (* 2 (* a eps))))) (* 1/2 (* eps (- (exp (* 2 (* a eps))) 1)))))))))) (* 1/2 (* eps (- (exp (* 2 (* a eps))) 1)))))) 1) b)","(/.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 2 binary64) eps) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 a eps)) (fma.f64 (-.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 eps eps)) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 a eps))) (fma.f64 (*.f64 #s(literal 1/2 binary64) eps) (fma.f64 (*.f64 #s(literal 2 binary64) eps) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 a eps)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) eps)))) (*.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 eps eps)) (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) eps))))) b (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) eps))))) b (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) eps))) b)","(/ (- (+ (exp (* 2 (* a eps))) (* b (- (+ (* 2 (* eps (exp (* 2 (* a eps))))) (* b (- (+ (* 2 (* (pow eps 2) (exp (* 2 (* a eps))))) (* b (- (* 4/3 (* (pow eps 3) (exp (* 2 (* a eps))))) (+ (* 1/24 (* (pow eps 3) (- (exp (* 2 (* a eps))) 1))) (+ (* 1/6 (* (pow eps 2) (- (* 2 (* eps (exp (* 2 (* a eps))))) (* 1/2 (* eps (- (exp (* 2 (* a eps))) 1)))))) (* 1/2 (* eps (- (* 2 (* (pow eps 2) (exp (* 2 (* a eps))))) (+ (* 1/6 (* (pow eps 2) (- (exp (* 2 (* a eps))) 1))) (* 1/2 (* eps (- (* 2 (* eps (exp (* 2 (* a eps))))) (* 1/2 (* eps (- (exp (* 2 (* a eps))) 1))))))))))))))) (+ (* 1/6 (* (pow eps 2) (- (exp (* 2 (* a eps))) 1))) (* 1/2 (* eps (- (* 2 (* eps (exp (* 2 (* a eps))))) (* 1/2 (* eps (- (exp (* 2 (* a eps))) 1)))))))))) (* 1/2 (* eps (- (exp (* 2 (* a eps))) 1)))))) 1) b)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (-.f64 (fma.f64 (*.f64 #s(literal 4/3 binary64) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 a eps)) (*.f64 #s(literal -1/24 binary64) (*.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) eps)) (pow.f64 eps #s(literal 3 binary64))))) (fma.f64 (*.f64 (-.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 eps eps)) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 a eps))) (fma.f64 (*.f64 #s(literal 1/2 binary64) eps) (fma.f64 (*.f64 #s(literal 2 binary64) eps) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 a eps)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) eps)))) (*.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 eps eps)) (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) eps))))) eps) #s(literal 1/2 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) eps) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 a eps)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) eps)))) (*.f64 eps eps)) #s(literal 1/6 binary64)))) b (-.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 eps eps)) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 a eps))) (fma.f64 (*.f64 #s(literal 1/2 binary64) eps) (fma.f64 (*.f64 #s(literal 2 binary64) eps) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 a eps)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) eps)))) (*.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 eps eps)) (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) eps)))))) b (fma.f64 (*.f64 #s(literal 2 binary64) eps) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 a eps)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) eps))))) b (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) eps))) b)","(/ 1 (* b eps))","(/.f64 (/.f64 #s(literal 1 binary64) b) eps)","(/ (+ (* -1/2 b) (/ 1 eps)) b)","(/.f64 (fma.f64 #s(literal -1/2 binary64) b (/.f64 #s(literal 1 binary64) eps)) b)","(/ (+ (* b (- (* -1 (* b (+ (* -1/4 eps) (* 1/6 eps)))) 1/2)) (/ 1 eps)) b)","(/.f64 (fma.f64 (fma.f64 (*.f64 eps #s(literal 1/12 binary64)) b #s(literal -1/2 binary64)) b (/.f64 #s(literal 1 binary64) eps)) b)","(/ (+ (* b (- (* b (- (* -1 (* b (+ (* -1/2 (* eps (+ (* -1/4 eps) (* 1/6 eps)))) (+ (* -1/12 (pow eps 2)) (* 1/24 (pow eps 2)))))) (+ (* -1/4 eps) (* 1/6 eps)))) 1/2)) (/ 1 eps)) b)","(/.f64 (fma.f64 (fma.f64 (neg.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 eps #s(literal -1/12 binary64)) eps) #s(literal -1/2 binary64) (*.f64 (*.f64 eps eps) #s(literal -1/24 binary64))) b (*.f64 eps #s(literal -1/12 binary64)))) b #s(literal -1/2 binary64)) b (/.f64 #s(literal 1 binary64) eps)) b)","(* b eps)","(*.f64 b eps)","(* b (+ eps (* 1/2 (* b (pow eps 2)))))","(*.f64 (fma.f64 (*.f64 (*.f64 eps eps) b) #s(literal 1/2 binary64) eps) b)","(* b (+ eps (* b (+ (* 1/6 (* b (pow eps 3))) (* 1/2 (pow eps 2))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) b) #s(literal 1/6 binary64) (*.f64 (*.f64 eps eps) #s(literal 1/2 binary64))) b eps) b)","(* b (+ eps (* b (+ (* 1/2 (pow eps 2)) (* b (+ (* 1/24 (* b (pow eps 4))) (* 1/6 (pow eps 3))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) b) #s(literal 1/24 binary64) (*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64))) b (*.f64 (*.f64 eps eps) #s(literal 1/2 binary64))) b eps) b)","(/ (+ (* 2 (* a b)) (pow a 2)) b)","(/.f64 (fma.f64 (*.f64 #s(literal 2 binary64) a) b (*.f64 a a)) b)","(/ (+ (* b (+ b (* 2 a))) (pow a 2)) b)","(/.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) a b) b (*.f64 a a)) b)","(/ (+ (/ 1 a) (/ b (pow a 2))) (pow b 2))","(/.f64 (+.f64 (/.f64 b (*.f64 a a)) (/.f64 #s(literal 1 binary64) a)) (*.f64 b b))","(/ (+ b (* 1/2 a)) b)","(/.f64 (fma.f64 #s(literal 1/2 binary64) a b) b)","(/ (+ (* 1/2 a) (* b (+ 1 (* 1/2 (/ b a))))) b)","(/.f64 (fma.f64 (fma.f64 (/.f64 b a) #s(literal 1/2 binary64) #s(literal 1 binary64)) b (*.f64 #s(literal 1/2 binary64) a)) b)","(* eps (- (exp (* 2 (* a eps))) 1))","(*.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) eps)) eps)","(+ (* 2 (* b (* (pow eps 2) (exp (* 2 (* a eps)))))) (* eps (- (exp (* 2 (* a eps))) 1)))","(fma.f64 (*.f64 #s(literal 2 binary64) b) (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 a eps)) (*.f64 eps eps)) (*.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) eps)) eps))","(+ (* b (+ (* 2 (* b (* (pow eps 3) (exp (* 2 (* a eps)))))) (* 2 (* (pow eps 2) (exp (* 2 (* a eps))))))) (* eps (- (exp (* 2 (* a eps))) 1)))","(fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 a eps)) (fma.f64 (pow.f64 eps #s(literal 3 binary64)) b (*.f64 eps eps)))) b (*.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) eps)) eps))","(+ (* b (+ (* 2 (* (pow eps 2) (exp (* 2 (* a eps))))) (* b (+ (* 4/3 (* b (* (pow eps 4) (exp (* 2 (* a eps)))))) (* 2 (* (pow eps 3) (exp (* 2 (* a eps))))))))) (* eps (- (exp (* 2 (* a eps))) 1)))","(fma.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (*.f64 eps eps)) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 a eps)) (*.f64 (fma.f64 (*.f64 #s(literal 2 binary64) (pow.f64 eps #s(literal 3 binary64))) (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 a eps)) (*.f64 (*.f64 #s(literal 4/3 binary64) b) (*.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) (*.f64 a eps)) (pow.f64 eps #s(literal 4 binary64))))) b)) b (*.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) a) eps)) eps))","(* b (+ 1 (/ a b)))","(fma.f64 (/.f64 a b) b b)","(+ (/ 1 a) (+ (/ 1 b) (/ (* eps (+ (* -1/2 a) (* 1/2 a))) b)))","(fma.f64 eps (/.f64 #s(literal 0 binary64) b) (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))","(* (pow b 2) (+ (* -1/2 a) (* -1/2 (/ (pow a 2) b))))","(*.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 (/.f64 (*.f64 a a) b) a)) (*.f64 b b))","(+ (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 b))","(fma.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 eps) a) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps (/.f64 #s(literal 1 binary64) b))","(* b (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)))","(*.f64 (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 eps) a) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps) b)","(* b (+ (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 b)))","(fma.f64 (*.f64 b eps) (-.f64 (/.f64 (pow.f64 (exp.f64 eps) a) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) #s(literal 1 binary64))","(/ 1 (- (exp (* b eps)) 1))","(/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 b eps)))","(- (exp (* b eps)) 1)","(expm1.f64 (*.f64 b eps))","(* b (+ 1 (* 2 (/ a b))))","(*.f64 (fma.f64 (/.f64 a b) #s(literal 2 binary64) #s(literal 1 binary64)) b)","(* b (+ 1 (+ (* 2 (/ a b)) (/ (pow a 2) (pow b 2)))))","(*.f64 (fma.f64 (/.f64 a b) (/.f64 a b) (fma.f64 (/.f64 a b) #s(literal 2 binary64) #s(literal 1 binary64))) b)","(/ (+ (/ 1 (* a b)) (/ 1 (pow a 2))) b)","(/.f64 (+.f64 (/.f64 #s(literal 1 binary64) (*.f64 a a)) (/.f64 (/.f64 #s(literal 1 binary64) a) b)) b)","(* b (+ (* 1/2 (/ 1 a)) (/ 1 b)))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) b #s(literal 1 binary64))","(* b (+ (* 1/2 (/ a (pow b 2))) (+ (* 1/2 (/ 1 a)) (/ 1 b))))","(fma.f64 (fma.f64 (/.f64 a (*.f64 b b)) #s(literal 1/2 binary64) (/.f64 #s(literal 1/2 binary64) a)) b #s(literal 1 binary64))","(/ (* eps (- (exp (* eps (- a (* -1 b)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps) (*.f64 (expm1.f64 (*.f64 b eps)) (expm1.f64 (*.f64 a eps))))","(* -1 (* b (- (* -1 (/ a b)) 1)))","(fma.f64 (/.f64 (neg.f64 a) b) (neg.f64 b) b)","(* -1 (/ (+ (* -1/2 a) (* 1/2 a)) b))","(/.f64 #s(literal 0 binary64) b)","(+ (* -1 (/ (- (* eps (+ (* -1/2 a) (* 1/2 a))) 1) b)) (/ 1 a))","(-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 (fma.f64 #s(literal 0 binary64) eps #s(literal -1 binary64)) b))","(* -1 (* b (- (* -1 (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))) (/ 1 b))))","(*.f64 (fma.f64 (neg.f64 eps) (-.f64 (/.f64 (pow.f64 (exp.f64 eps) a) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) (/.f64 #s(literal -1 binary64) b)) (neg.f64 b))","(/ (* eps (- (exp (* 2 (* eps (- a (* -1 b))))) 1)) (* (+ 1 (exp (* eps (- a (* -1 b))))) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))))","(*.f64 (/.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) (*.f64 (+.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal 1 binary64)) (expm1.f64 (*.f64 a eps)))) (/.f64 eps (expm1.f64 (*.f64 b eps))))","(/ (* eps (- (exp (* 2 (* eps (- a (* -1 b))))) 1)) (- (exp (* b eps)) 1))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps) (expm1.f64 (*.f64 b eps)))","(* -1 (* b (- (* -2 (/ a b)) 1)))","(fma.f64 (*.f64 #s(literal -2 binary64) (/.f64 a b)) (neg.f64 b) b)","(* -1 (* b (- (* -1 (/ (+ (* 2 a) (/ (pow a 2) b)) b)) 1)))","(fma.f64 (/.f64 (fma.f64 #s(literal 2 binary64) a (/.f64 (*.f64 a a) b)) (neg.f64 b)) (neg.f64 b) b)","(* -1 (* b (- (* -1 (/ (+ 1 (* 1/2 (/ a b))) b)) (* 1/2 (/ 1 a)))))","(*.f64 (fma.f64 (/.f64 (fma.f64 (/.f64 a b) #s(literal 1/2 binary64) #s(literal 1 binary64)) b) #s(literal -1 binary64) (/.f64 #s(literal -1/2 binary64) a)) (neg.f64 b))","(* eps (- (exp (* 2 (* eps (- a (* -1 b))))) 1))","(*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps)","(/ (+ a b) (* a b))","(/.f64 (/.f64 (+.f64 b a) a) b)","(+ (* eps (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)) (*.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 (*.f64 a a) b (*.f64 (*.f64 b b) a))) (*.f64 a a)) (/.f64 (+.f64 b a) (*.f64 b b)))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/6 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) a)) (fma.f64 (+.f64 b a) (/.f64 (fma.f64 #s(literal 1/6 binary64) (fma.f64 (pow.f64 b #s(literal 3 binary64)) a (*.f64 (pow.f64 a #s(literal 3 binary64)) b)) (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) (*.f64 b b))) (*.f64 (*.f64 a a) (*.f64 b b))) (/.f64 (*.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)) (*.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 (*.f64 a a) b (*.f64 (*.f64 b b) a))) (*.f64 a a)) (/.f64 (+.f64 b a) (*.f64 b b)))) (*.f64 #s(literal 1/2 binary64) (fma.f64 (*.f64 a a) b (*.f64 (*.f64 b b) a)))) (*.f64 b a)))) eps (-.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)) (*.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 (*.f64 a a) b (*.f64 (*.f64 b b) a))) (*.f64 a a)) (/.f64 (+.f64 b a) (*.f64 b b))))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (+ (* 1/6 (/ (pow (+ a b) 3) (* a b))) (* eps (- (* 1/24 (/ (pow (+ a b) 4) (* a b))) (+ (/ (* (+ a b) (+ (* 1/24 (* a (pow b 4))) (+ (* 1/24 (* (pow a 4) b)) (+ (* 1/12 (* (pow a 2) (pow b 3))) (* 1/12 (* (pow a 3) (pow b 2))))))) (* (pow a 2) (pow b 2))) (+ (/ (* (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2))))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b))))) (* a b))))))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/24 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 4 binary64)) a)) (fma.f64 (/.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/6 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) a)) (fma.f64 (+.f64 b a) (/.f64 (fma.f64 #s(literal 1/6 binary64) (fma.f64 (pow.f64 b #s(literal 3 binary64)) a (*.f64 (pow.f64 a #s(literal 3 binary64)) b)) (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) (*.f64 b b))) (*.f64 (*.f64 a a) (*.f64 b b))) (/.f64 (*.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)) (*.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 (*.f64 a a) b (*.f64 (*.f64 b b) a))) (*.f64 a a)) (/.f64 (+.f64 b a) (*.f64 b b)))) (*.f64 #s(literal 1/2 binary64) (fma.f64 (*.f64 a a) b (*.f64 (*.f64 b b) a)))) (*.f64 b a)))) a) (/.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 (*.f64 a a) b (*.f64 (*.f64 b b) a))) b) (fma.f64 (/.f64 (fma.f64 #s(literal 1/6 binary64) (fma.f64 (pow.f64 b #s(literal 3 binary64)) a (*.f64 (pow.f64 a #s(literal 3 binary64)) b)) (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) (*.f64 b b))) b) (/.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)) (*.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 (*.f64 a a) b (*.f64 (*.f64 b b) a))) (*.f64 a a)) (/.f64 (+.f64 b a) (*.f64 b b)))) a) (/.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) (fma.f64 (pow.f64 b #s(literal 4 binary64)) a (*.f64 (pow.f64 a #s(literal 4 binary64)) b)) (*.f64 #s(literal 1/12 binary64) (fma.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 b b) (*.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 a a))))) (+.f64 b a)) (*.f64 (*.f64 a a) (*.f64 b b)))))) eps (-.f64 (*.f64 (/.f64 #s(literal 1/6 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) a)) (fma.f64 (+.f64 b a) (/.f64 (fma.f64 #s(literal 1/6 binary64) (fma.f64 (pow.f64 b #s(literal 3 binary64)) a (*.f64 (pow.f64 a #s(literal 3 binary64)) b)) (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) (*.f64 b b))) (*.f64 (*.f64 a a) (*.f64 b b))) (/.f64 (*.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)) (*.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 (*.f64 a a) b (*.f64 (*.f64 b b) a))) (*.f64 a a)) (/.f64 (+.f64 b a) (*.f64 b b)))) (*.f64 #s(literal 1/2 binary64) (fma.f64 (*.f64 a a) b (*.f64 (*.f64 b b) a)))) (*.f64 b a))))) eps (-.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)) (*.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 (*.f64 a a) b (*.f64 (*.f64 b b) a))) (*.f64 a a)) (/.f64 (+.f64 b a) (*.f64 b b))))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))","(+ (* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b))))) (+ (/ 1 a) (/ 1 b)))","(+.f64 (fma.f64 #s(literal 0 binary64) eps (/.f64 #s(literal 1 binary64) b)) (/.f64 #s(literal 1 binary64) a))","(+ (* (pow eps 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (*.f64 a #s(literal 1/12 binary64)) (*.f64 eps eps) (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))","(+ (* (pow eps 2) (- (+ (* 1/2 a) (* eps (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (-.f64 (*.f64 (*.f64 a a) #s(literal 1/8 binary64)) (fma.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) a) #s(literal 1/2 binary64) (*.f64 (*.f64 a a) #s(literal 1/12 binary64)))) eps (*.f64 a #s(literal 1/12 binary64))) (*.f64 eps eps) (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))","(+ (* (pow eps 2) (- (+ (* 1/2 a) (* eps (- (+ (* 1/6 (pow a 2)) (* eps (- (* 1/24 (pow a 3)) (+ (* 1/120 (pow a 3)) (+ (* 1/48 (pow a 3)) (+ (* 1/6 (* (pow a 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (* 1/2 (* a (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))))))))) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (-.f64 (fma.f64 (-.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/30 binary64)) (fma.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/48 binary64) (fma.f64 (*.f64 (*.f64 a a) #s(literal 1/6 binary64)) (*.f64 a #s(literal 1/12 binary64)) (*.f64 (*.f64 #s(literal 1/2 binary64) a) (-.f64 (*.f64 (*.f64 a a) #s(literal 1/8 binary64)) (fma.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) a) #s(literal 1/2 binary64) (*.f64 (*.f64 a a) #s(literal 1/12 binary64)))))))) eps (*.f64 (*.f64 a a) #s(literal 1/6 binary64))) (fma.f64 (*.f64 a a) #s(literal 1/8 binary64) (*.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) a) #s(literal 1/2 binary64)))) eps (*.f64 a #s(literal 1/12 binary64))) (*.f64 eps eps) (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))","(+ 1 (/ b a))","(+.f64 (/.f64 b a) #s(literal 1 binary64))","(+ 1 (+ (* b (* (pow eps 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (/ b a)))","(fma.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) (*.f64 eps eps)) b (+.f64 (/.f64 b a) #s(literal 1 binary64)))","(+ 1 (+ (* (pow eps 2) (+ (* b (* eps (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (* b (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))) (/ b a)))","(fma.f64 (*.f64 b (fma.f64 (-.f64 (*.f64 (*.f64 a a) #s(literal 1/8 binary64)) (fma.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) a) #s(literal 1/2 binary64) (*.f64 (*.f64 a a) #s(literal 1/12 binary64)))) eps (*.f64 a #s(literal 1/12 binary64)))) (*.f64 eps eps) (+.f64 (/.f64 b a) #s(literal 1 binary64)))","(+ 1 (+ (* (pow eps 2) (+ (* b (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))) (* eps (+ (* b (* eps (- (* 1/24 (pow a 3)) (+ (* 1/120 (pow a 3)) (+ (* 1/48 (pow a 3)) (+ (* 1/6 (* (pow a 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (* 1/2 (* a (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))))))))) (* b (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))))))))))) (/ b a)))","(fma.f64 (fma.f64 (*.f64 b (-.f64 (fma.f64 (-.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/30 binary64)) (fma.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/48 binary64) (fma.f64 (*.f64 (*.f64 a a) #s(literal 1/6 binary64)) (*.f64 a #s(literal 1/12 binary64)) (*.f64 (*.f64 #s(literal 1/2 binary64) a) (-.f64 (*.f64 (*.f64 a a) #s(literal 1/8 binary64)) (fma.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) a) #s(literal 1/2 binary64) (*.f64 (*.f64 a a) #s(literal 1/12 binary64)))))))) eps (*.f64 (*.f64 a a) #s(literal 1/6 binary64))) (fma.f64 (*.f64 a a) #s(literal 1/8 binary64) (*.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) a) #s(literal 1/2 binary64))))) eps (*.f64 (*.f64 a #s(literal 1/12 binary64)) b)) (*.f64 eps eps) (+.f64 (/.f64 b a) #s(literal 1 binary64)))","(+ (* (pow eps 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))) (/ 1 a))","(fma.f64 (*.f64 a #s(literal 1/12 binary64)) (*.f64 eps eps) (/.f64 #s(literal 1 binary64) a))","(+ (* (pow eps 2) (- (+ (* 1/2 a) (* eps (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))) (/ 1 a))","(fma.f64 (fma.f64 (-.f64 (*.f64 (*.f64 a a) #s(literal 1/8 binary64)) (fma.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) a) #s(literal 1/2 binary64) (*.f64 (*.f64 a a) #s(literal 1/12 binary64)))) eps (*.f64 a #s(literal 1/12 binary64))) (*.f64 eps eps) (/.f64 #s(literal 1 binary64) a))","(+ (* (pow eps 2) (- (+ (* 1/2 a) (* eps (- (+ (* 1/6 (pow a 2)) (* eps (- (* 1/24 (pow a 3)) (+ (* 1/120 (pow a 3)) (+ (* 1/48 (pow a 3)) (+ (* 1/6 (* (pow a 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (* 1/2 (* a (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))))))))) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))) (/ 1 a))","(fma.f64 (fma.f64 (-.f64 (fma.f64 (-.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/30 binary64)) (fma.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/48 binary64) (fma.f64 (*.f64 (*.f64 a a) #s(literal 1/6 binary64)) (*.f64 a #s(literal 1/12 binary64)) (*.f64 (*.f64 #s(literal 1/2 binary64) a) (-.f64 (*.f64 (*.f64 a a) #s(literal 1/8 binary64)) (fma.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) a) #s(literal 1/2 binary64) (*.f64 (*.f64 a a) #s(literal 1/12 binary64)))))))) eps (*.f64 (*.f64 a a) #s(literal 1/6 binary64))) (fma.f64 (*.f64 a a) #s(literal 1/8 binary64) (*.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) a) #s(literal 1/2 binary64)))) eps (*.f64 a #s(literal 1/12 binary64))) (*.f64 eps eps) (/.f64 #s(literal 1 binary64) a))","(+ (* eps (- (/ (pow (+ a b) 2) (* a b)) (* 1/2 (/ (* (+ a b) (+ (* 2 (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* a (* b (+ a b))))) (* (pow a 2) (pow b 2)))))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (-.f64 (/.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) b) (*.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 a a)) (/.f64 (*.f64 (fma.f64 (*.f64 (+.f64 b a) b) a (*.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 (*.f64 a a) b (*.f64 (*.f64 b b) a))) #s(literal 2 binary64))) (+.f64 b a)) (*.f64 b b)))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))","(+ (* eps (- (+ (* eps (- (* 2/3 (/ (pow (+ a b) 3) (* a b))) (+ (* 1/2 (/ (* (+ a b) (+ (* 1/2 (* a (* b (pow (+ a b) 2)))) (+ (* 2 (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))))))) (* (pow a 2) (pow b 2)))) (* 1/2 (/ (* (+ (* 2 (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* a (* b (+ a b)))) (- (/ (pow (+ a b) 2) (* a b)) (* 1/2 (/ (* (+ a b) (+ (* 2 (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* a (* b (+ a b))))) (* (pow a 2) (pow b 2)))))) (* a b)))))) (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (* (+ a b) (+ (* 2 (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* a (* b (+ a b))))) (* (pow a 2) (pow b 2)))))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (fma.f64 (/.f64 #s(literal 2/3 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) a) (*.f64 #s(literal -1/2 binary64) (fma.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) a) #s(literal 1/2 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (fma.f64 (pow.f64 b #s(literal 3 binary64)) a (*.f64 (pow.f64 a #s(literal 3 binary64)) b)) (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) (*.f64 b b))) #s(literal 2 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 (*.f64 a a) b (*.f64 (*.f64 b b) a))) (+.f64 b a)))) (*.f64 a a)) (/.f64 (+.f64 b a) (*.f64 b b)) (/.f64 (*.f64 (-.f64 (/.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) b) (*.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 a a)) (/.f64 (*.f64 (fma.f64 (*.f64 (+.f64 b a) b) a (*.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 (*.f64 a a) b (*.f64 (*.f64 b b) a))) #s(literal 2 binary64))) (+.f64 b a)) (*.f64 b b)))) (fma.f64 (*.f64 (+.f64 b a) b) a (*.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 (*.f64 a a) b (*.f64 (*.f64 b b) a))) #s(literal 2 binary64)))) (*.f64 b a))))) eps (-.f64 (/.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) b) (*.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 a a)) (/.f64 (*.f64 (fma.f64 (*.f64 (+.f64 b a) b) a (*.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 (*.f64 a a) b (*.f64 (*.f64 b b) a))) #s(literal 2 binary64))) (+.f64 b a)) (*.f64 b b))))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))","(+ (* eps (- (+ (* eps (- (+ (* 2/3 (/ (pow (+ a b) 3) (* a b))) (* eps (- (* 1/3 (/ (pow (+ a b) 4) (* a b))) (+ (* 1/2 (/ (* (+ a b) (+ (* 1/6 (* a (* b (pow (+ a b) 3)))) (+ (* 1/2 (* (pow (+ a b) 2) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))))) (+ (* 2 (+ (* 1/24 (* a (pow b 4))) (+ (* 1/24 (* (pow a 4) b)) (+ (* 1/12 (* (pow a 2) (pow b 3))) (* 1/12 (* (pow a 3) (pow b 2))))))) (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))))))) (* (pow a 2) (pow b 2)))) (+ (* 1/2 (/ (* (+ (* 1/2 (* a (* b (pow (+ a b) 2)))) (+ (* 2 (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))))) (- (/ (pow (+ a b) 2) (* a b)) (* 1/2 (/ (* (+ a b) (+ (* 2 (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* a (* b (+ a b))))) (* (pow a 2) (pow b 2)))))) (* a b))) (* 1/2 (/ (* (+ (* 2 (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* a (* b (+ a b)))) (- (* 2/3 (/ (pow (+ a b) 3) (* a b))) (+ (* 1/2 (/ (* (+ a b) (+ (* 1/2 (* a (* b (pow (+ a b) 2)))) (+ (* 2 (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))))))) (* (pow a 2) (pow b 2)))) (* 1/2 (/ (* (+ (* 2 (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* a (* b (+ a b)))) (- (/ (pow (+ a b) 2) (* a b)) (* 1/2 (/ (* (+ a b) (+ (* 2 (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* a (* b (+ a b))))) (* (pow a 2) (pow b 2)))))) (* a b)))))) (* a b)))))))) (+ (* 1/2 (/ (* (+ a b) (+ (* 1/2 (* a (* b (pow (+ a b) 2)))) (+ (* 2 (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))))))) (* (pow a 2) (pow b 2)))) (* 1/2 (/ (* (+ (* 2 (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* a (* b (+ a b)))) (- (/ (pow (+ a b) 2) (* a b)) (* 1/2 (/ (* (+ a b) (+ (* 2 (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* a (* b (+ a b))))) (* (pow a 2) (pow b 2)))))) (* a b)))))) (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (* (+ a b) (+ (* 2 (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* a (* b (+ a b))))) (* (pow a 2) (pow b 2)))))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/3 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 4 binary64)) a)) (*.f64 #s(literal 1/2 binary64) (fma.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) b) a) #s(literal 1/6 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) (*.f64 #s(literal 1/2 binary64) (fma.f64 (*.f64 a a) b (*.f64 (*.f64 b b) a))) (fma.f64 (fma.f64 #s(literal 1/24 binary64) (fma.f64 (pow.f64 b #s(literal 4 binary64)) a (*.f64 (pow.f64 a #s(literal 4 binary64)) b)) (*.f64 #s(literal 1/12 binary64) (fma.f64 (pow.f64 a #s(literal 3 binary64)) (*.f64 b b) (*.f64 (pow.f64 b #s(literal 3 binary64)) (*.f64 a a))))) #s(literal 2 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) (fma.f64 (pow.f64 b #s(literal 3 binary64)) a (*.f64 (pow.f64 a #s(literal 3 binary64)) b)) (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) (*.f64 b b))) (+.f64 b a))))) (*.f64 a a)) (/.f64 (+.f64 b a) (*.f64 b b)) (fma.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) a) #s(literal 1/2 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (fma.f64 (pow.f64 b #s(literal 3 binary64)) a (*.f64 (pow.f64 a #s(literal 3 binary64)) b)) (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) (*.f64 b b))) #s(literal 2 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 (*.f64 a a) b (*.f64 (*.f64 b b) a))) (+.f64 b a)))) b) (/.f64 (-.f64 (/.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) b) (*.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 a a)) (/.f64 (*.f64 (fma.f64 (*.f64 (+.f64 b a) b) a (*.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 (*.f64 a a) b (*.f64 (*.f64 b b) a))) #s(literal 2 binary64))) (+.f64 b a)) (*.f64 b b)))) a) (*.f64 (/.f64 (fma.f64 (/.f64 #s(literal 2/3 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) a) (*.f64 #s(literal -1/2 binary64) (fma.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) a) #s(literal 1/2 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (fma.f64 (pow.f64 b #s(literal 3 binary64)) a (*.f64 (pow.f64 a #s(literal 3 binary64)) b)) (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) (*.f64 b b))) #s(literal 2 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 (*.f64 a a) b (*.f64 (*.f64 b b) a))) (+.f64 b a)))) (*.f64 a a)) (/.f64 (+.f64 b a) (*.f64 b b)) (/.f64 (*.f64 (-.f64 (/.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) b) (*.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 a a)) (/.f64 (*.f64 (fma.f64 (*.f64 (+.f64 b a) b) a (*.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 (*.f64 a a) b (*.f64 (*.f64 b b) a))) #s(literal 2 binary64))) (+.f64 b a)) (*.f64 b b)))) (fma.f64 (*.f64 (+.f64 b a) b) a (*.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 (*.f64 a a) b (*.f64 (*.f64 b b) a))) #s(literal 2 binary64)))) (*.f64 b a))))) a) (/.f64 (fma.f64 (*.f64 (+.f64 b a) b) a (*.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 (*.f64 a a) b (*.f64 (*.f64 b b) a))) #s(literal 2 binary64))) b)))))) eps (fma.f64 (/.f64 #s(literal 2/3 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) a) (*.f64 #s(literal -1/2 binary64) (fma.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) a) #s(literal 1/2 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) (fma.f64 (pow.f64 b #s(literal 3 binary64)) a (*.f64 (pow.f64 a #s(literal 3 binary64)) b)) (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) (*.f64 b b))) #s(literal 2 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 (*.f64 a a) b (*.f64 (*.f64 b b) a))) (+.f64 b a)))) (*.f64 a a)) (/.f64 (+.f64 b a) (*.f64 b b)) (/.f64 (*.f64 (-.f64 (/.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) b) (*.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 a a)) (/.f64 (*.f64 (fma.f64 (*.f64 (+.f64 b a) b) a (*.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 (*.f64 a a) b (*.f64 (*.f64 b b) a))) #s(literal 2 binary64))) (+.f64 b a)) (*.f64 b b)))) (fma.f64 (*.f64 (+.f64 b a) b) a (*.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 (*.f64 a a) b (*.f64 (*.f64 b b) a))) #s(literal 2 binary64)))) (*.f64 b a)))))) eps (-.f64 (/.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) b) (*.f64 (/.f64 #s(literal 1/2 binary64) (*.f64 a a)) (/.f64 (*.f64 (fma.f64 (*.f64 (+.f64 b a) b) a (*.f64 (*.f64 #s(literal 1/2 binary64) (fma.f64 (*.f64 a a) b (*.f64 (*.f64 b b) a))) #s(literal 2 binary64))) (+.f64 b a)) (*.f64 b b))))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))","(* 2 (/ (* eps (+ a b)) b))","(*.f64 (*.f64 eps (/.f64 (+.f64 b a) b)) #s(literal 2 binary64))","(* eps (+ (* 2 (/ (+ a b) b)) (* eps (- (* 2 (/ (pow (+ a b) 2) b)) (+ a b)))))","(*.f64 (fma.f64 (-.f64 (fma.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) #s(literal 2 binary64) (neg.f64 a)) b) eps (*.f64 (/.f64 (+.f64 b a) b) #s(literal 2 binary64))) eps)","(* eps (+ (* 2 (/ (+ a b) b)) (* eps (- (+ (* 2 (/ (pow (+ a b) 2) b)) (* eps (- (* 4/3 (/ (pow (+ a b) 3) b)) (+ (* 1/3 (* b (+ a b))) (* 1/2 (* b (- (* 2 (/ (pow (+ a b) 2) b)) (+ a b)))))))) (+ a b)))))","(*.f64 (fma.f64 (-.f64 (fma.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) b) #s(literal 4/3 binary64)) (fma.f64 (*.f64 #s(literal 1/3 binary64) b) (+.f64 b a) (*.f64 (*.f64 #s(literal 1/2 binary64) b) (-.f64 (fma.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) #s(literal 2 binary64) (neg.f64 a)) b)))) eps (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) #s(literal 2 binary64))) (+.f64 b a)) eps (*.f64 (/.f64 (+.f64 b a) b) #s(literal 2 binary64))) eps)","(* eps (+ (* 2 (/ (+ a b) b)) (* eps (- (+ (* 2 (/ (pow (+ a b) 2) b)) (* eps (- (+ (* 4/3 (/ (pow (+ a b) 3) b)) (* eps (- (* 2/3 (/ (pow (+ a b) 4) b)) (+ (* 1/12 (* (pow b 2) (+ a b))) (+ (* 1/6 (* (pow b 2) (- (* 2 (/ (pow (+ a b) 2) b)) (+ a b)))) (* 1/2 (* b (- (* 4/3 (/ (pow (+ a b) 3) b)) (+ (* 1/3 (* b (+ a b))) (* 1/2 (* b (- (* 2 (/ (pow (+ a b) 2) b)) (+ a b))))))))))))) (+ (* 1/3 (* b (+ a b))) (* 1/2 (* b (- (* 2 (/ (pow (+ a b) 2) b)) (+ a b)))))))) (+ a b)))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 4 binary64)) b) #s(literal 2/3 binary64)) (fma.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 b b)) (+.f64 b a) (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 b b)) (-.f64 (fma.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) #s(literal 2 binary64) (neg.f64 a)) b) (*.f64 (*.f64 #s(literal 1/2 binary64) b) (-.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) b) #s(literal 4/3 binary64)) (fma.f64 (*.f64 #s(literal 1/3 binary64) b) (+.f64 b a) (*.f64 (*.f64 #s(literal 1/2 binary64) b) (-.f64 (fma.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) #s(literal 2 binary64) (neg.f64 a)) b)))))))) eps (-.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) b) #s(literal 4/3 binary64)) (fma.f64 (*.f64 #s(literal 1/3 binary64) b) (+.f64 b a) (*.f64 (*.f64 #s(literal 1/2 binary64) b) (-.f64 (fma.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) #s(literal 2 binary64) (neg.f64 a)) b))))) eps (-.f64 (fma.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) #s(literal 2 binary64) (neg.f64 a)) b)) eps (*.f64 (/.f64 (+.f64 b a) b) #s(literal 2 binary64))) eps)","(/ (+ (* -1/2 eps) (/ 1 b)) eps)","(/.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 #s(literal 1 binary64) b)) eps)","(/ (+ (* eps (- (* -1 (* eps (+ (* -1/4 b) (* 1/6 b)))) 1/2)) (/ 1 b)) eps)","(/.f64 (fma.f64 (fma.f64 (*.f64 b #s(literal 1/12 binary64)) eps #s(literal -1/2 binary64)) eps (/.f64 #s(literal 1 binary64) b)) eps)","(/ (+ (* eps (- (* eps (- (* -1 (* eps (+ (* -1/2 (* b (+ (* -1/4 b) (* 1/6 b)))) (+ (* -1/12 (pow b 2)) (* 1/24 (pow b 2)))))) (+ (* -1/4 b) (* 1/6 b)))) 1/2)) (/ 1 b)) eps)","(/.f64 (fma.f64 (fma.f64 (neg.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 b #s(literal -1/12 binary64)) b) #s(literal -1/2 binary64) (*.f64 (*.f64 b b) #s(literal -1/24 binary64))) eps (*.f64 b #s(literal -1/12 binary64)))) eps #s(literal -1/2 binary64)) eps (/.f64 #s(literal 1 binary64) b)) eps)","(* eps (+ b (* 1/2 (* (pow b 2) eps))))","(*.f64 (fma.f64 (*.f64 (*.f64 b b) eps) #s(literal 1/2 binary64) b) eps)","(* eps (+ b (* eps (+ (* 1/6 (* (pow b 3) eps)) (* 1/2 (pow b 2))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 b #s(literal 3 binary64)) eps) #s(literal 1/6 binary64) (*.f64 (*.f64 b b) #s(literal 1/2 binary64))) eps b) eps)","(* eps (+ b (* eps (+ (* 1/2 (pow b 2)) (* eps (+ (* 1/24 (* (pow b 4) eps)) (* 1/6 (pow b 3))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 b #s(literal 4 binary64)) eps) #s(literal 1/24 binary64) (*.f64 (pow.f64 b #s(literal 3 binary64)) #s(literal 1/6 binary64))) eps (*.f64 (*.f64 b b) #s(literal 1/2 binary64))) eps b) eps)","(/ (+ (* 1/2 eps) (/ 1 a)) eps)","(/.f64 (fma.f64 #s(literal 1/2 binary64) eps (/.f64 #s(literal 1 binary64) a)) eps)","(/ (+ (* eps (+ 1/2 (* eps (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))) (/ 1 a)) eps)","(/.f64 (fma.f64 (fma.f64 (*.f64 a #s(literal 1/12 binary64)) eps #s(literal 1/2 binary64)) eps (/.f64 #s(literal 1 binary64) a)) eps)","(/ (+ (* eps (+ 1/2 (* eps (- (+ (* 1/2 a) (* eps (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))))) (/ 1 a)) eps)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 (*.f64 a a) #s(literal 1/8 binary64)) (fma.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) a) #s(literal 1/2 binary64) (*.f64 (*.f64 a a) #s(literal 1/12 binary64)))) eps (*.f64 a #s(literal 1/12 binary64))) eps #s(literal 1/2 binary64)) eps (/.f64 #s(literal 1 binary64) a)) eps)","(* 2 (* (pow eps 2) (+ a b)))","(*.f64 (*.f64 #s(literal 2 binary64) (*.f64 eps eps)) (+.f64 b a))","(* (pow eps 2) (+ (* 2 (* eps (pow (+ a b) 2))) (* 2 (+ a b))))","(*.f64 (*.f64 #s(literal 2 binary64) (fma.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) eps (+.f64 b a))) (*.f64 eps eps))","(* (pow eps 2) (+ (* 2 (+ a b)) (* eps (+ (* 4/3 (* eps (pow (+ a b) 3))) (* 2 (pow (+ a b) 2))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) eps) #s(literal 4/3 binary64) (*.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) #s(literal 2 binary64))) eps (*.f64 #s(literal 2 binary64) (+.f64 b a))) (*.f64 eps eps))","(* (pow eps 2) (+ (* 2 (+ a b)) (* eps (+ (* 2 (pow (+ a b) 2)) (* eps (+ (* 2/3 (* eps (pow (+ a b) 4))) (* 4/3 (pow (+ a b) 3))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 (+.f64 b a) #s(literal 4 binary64)) eps) #s(literal 2/3 binary64) (*.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) #s(literal 4/3 binary64))) eps (*.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) #s(literal 2 binary64))) eps (*.f64 #s(literal 2 binary64) (+.f64 b a))) (*.f64 eps eps))","(* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b)))))","(*.f64 #s(literal 0 binary64) eps)","(* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (+ (/ 1 (* a eps)) (/ 1 (* b eps))))))","(*.f64 (+.f64 (+.f64 #s(literal 0 binary64) (/.f64 (/.f64 #s(literal 1 binary64) b) eps)) (/.f64 (/.f64 #s(literal 1 binary64) a) eps)) eps)","(* eps (- (+ (/ 1 (* b eps)) (/ (exp (* a eps)) (- (exp (* a eps)) 1))) 1/2))","(*.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 eps) a) (expm1.f64 (*.f64 a eps))) (+.f64 (/.f64 (/.f64 #s(literal 1 binary64) b) eps) #s(literal -1/2 binary64))) eps)","(* eps (+ (* b (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 eps)))","(fma.f64 (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 eps) a) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) b) eps #s(literal 1 binary64))","(* -1 (* eps (+ (* -1 (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b))))) (* -1 (/ (+ (/ 1 a) (/ 1 b)) eps)))))","(*.f64 (neg.f64 eps) (/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b)) eps))","(* -1 (* eps (- (* -1 (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 (* b eps)))))","(*.f64 (neg.f64 eps) (fma.f64 #s(literal -1 binary64) (-.f64 (/.f64 (pow.f64 (exp.f64 eps) a) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) (/.f64 #s(literal -1 binary64) (*.f64 b eps))))","(* -1 (* eps (- (* -1 (* b (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))) (/ 1 eps))))","(*.f64 (neg.f64 eps) (fma.f64 (fma.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (exp.f64 eps) a) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) b (/.f64 #s(literal -1 binary64) eps)))"]],"stop":[["iter limit",1],["node limit",1]],"time":333.2890625,"type":"simplify"},{"count":[[23,615]],"egraph":[[0,8154,371,0.074008105],[2,3865,385,0.039643873],[1,480,385,0.012676324],[0,111,406,0.003170572],[0,65,422,0.000588656]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a))","(/.f64 (/.f64 (+.f64 b a) b) a)","(/.f64 (+.f64 b a) b)","(+.f64 b a)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","(/.f64 #s(literal 1 binary64) a)","(fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a))))","(fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a)))","(*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64)) b))","(/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64)) b)","(fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64))","(*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a)))))","(/.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) eps)) (*.f64 (expm1.f64 (*.f64 eps a)) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) eps))","(pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64))","(expm1.f64 (*.f64 eps b))","(/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)","(/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b))","(*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))","(/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a)))","(*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) eps)"]],"memory":[[-2770896,61019840]],"outputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a))","(*.f64 (pow.f64 (/.f64 a (neg.f64 (+.f64 b a))) #s(literal -1 binary64)) (pow.f64 (neg.f64 b) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 a (+.f64 b a)) #s(literal -1 binary64)) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (*.f64 (/.f64 (+.f64 b a) b) #s(literal 1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -2 binary64))) (pow.f64 (/.f64 (-.f64 a b) (*.f64 b a)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64))) (pow.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (pow.f64 b #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 (+.f64 b a)) b) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (+.f64 b a) b))","(*.f64 (/.f64 (+.f64 b a) b) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (+.f64 b a) (pow.f64 (*.f64 b a) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 (+.f64 b a) b) a))","(pow.f64 (/.f64 (/.f64 (-.f64 a b) (*.f64 b a)) (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (pow.f64 b #s(literal -2 binary64))) (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 a (/.f64 b (+.f64 b a))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 b (+.f64 b a)) a) #s(literal -1 binary64))","(pow.f64 (*.f64 a (/.f64 b (+.f64 b a))) #s(literal -1 binary64))","(/.f64 (/.f64 (+.f64 b a) a) b)","(/.f64 (*.f64 (neg.f64 (+.f64 b a)) (pow.f64 a #s(literal -1 binary64))) (neg.f64 b))","(/.f64 (*.f64 (+.f64 b a) (pow.f64 a #s(literal -1 binary64))) b)","(/.f64 (*.f64 (/.f64 (+.f64 b a) b) #s(literal -1 binary64)) (neg.f64 a))","(/.f64 (*.f64 (/.f64 (+.f64 b a) b) #s(literal 1 binary64)) a)","(/.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 b #s(literal -2 binary64))) (-.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 b #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -2 binary64)))) (neg.f64 (/.f64 (-.f64 a b) (*.f64 b a))))","(/.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64)))) (neg.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (pow.f64 b #s(literal -2 binary64)))))","(/.f64 (*.f64 (neg.f64 (+.f64 b a)) #s(literal -1 binary64)) (*.f64 (neg.f64 b) (neg.f64 a)))","(/.f64 (*.f64 (neg.f64 (+.f64 b a)) #s(literal 1 binary64)) (*.f64 (neg.f64 b) a))","(/.f64 (*.f64 (+.f64 b a) #s(literal -1 binary64)) (*.f64 b (neg.f64 a)))","(/.f64 (*.f64 (+.f64 b a) #s(literal 1 binary64)) (*.f64 b a))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 a) (*.f64 (neg.f64 b) #s(literal -1 binary64))) (*.f64 (neg.f64 b) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal -1 binary64) a (*.f64 (neg.f64 b) #s(literal 1 binary64))) (*.f64 (neg.f64 b) a))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 b #s(literal -1 binary64))) (*.f64 b (neg.f64 a)))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 b) (*.f64 (neg.f64 a) #s(literal -1 binary64))) (*.f64 (neg.f64 a) (neg.f64 b)))","(/.f64 (fma.f64 #s(literal -1 binary64) b (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 a) b))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 b) (*.f64 a #s(literal -1 binary64))) (*.f64 a (neg.f64 b)))","(/.f64 (*.f64 (+.f64 b a) (-.f64 a b)) (*.f64 (*.f64 b a) (-.f64 a b)))","(/.f64 (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -2 binary64))) (/.f64 (-.f64 a b) (*.f64 b a)))","(/.f64 (*.f64 (+.f64 b a) (-.f64 b a)) (*.f64 (*.f64 b a) (-.f64 b a)))","(/.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 b a) (fma.f64 b (-.f64 b a) (*.f64 a a))))","(/.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 b a) (fma.f64 a (-.f64 a b) (*.f64 b b))))","(/.f64 (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64))) (+.f64 (pow.f64 a #s(literal -2 binary64)) (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64)))))","(/.f64 (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64))) (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (pow.f64 b #s(literal -2 binary64))))","(/.f64 (/.f64 (neg.f64 (+.f64 b a)) b) (neg.f64 a))","(/.f64 (neg.f64 (+.f64 b a)) (neg.f64 (*.f64 b a)))","(/.f64 (neg.f64 (+.f64 b a)) (*.f64 a (neg.f64 b)))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 a (/.f64 b (+.f64 b a)))))","(/.f64 #s(literal -1 binary64) (*.f64 (/.f64 b (+.f64 b a)) (neg.f64 a)))","(/.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 b (+.f64 b a)))","(/.f64 (/.f64 (+.f64 b a) b) (neg.f64 (neg.f64 a)))","(/.f64 (/.f64 (+.f64 b a) b) a)","(/.f64 (+.f64 b a) (*.f64 b a))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 a b) (*.f64 b a)) (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (pow.f64 b #s(literal -2 binary64))) (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 b a) (+.f64 b a)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 a (/.f64 b (+.f64 b a))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 b (+.f64 b a)) a))","(/.f64 #s(literal 1 binary64) (*.f64 a (/.f64 b (+.f64 b a))))","(neg.f64 (/.f64 (/.f64 (neg.f64 (+.f64 b a)) b) a))","(neg.f64 (/.f64 (/.f64 (+.f64 b a) b) (neg.f64 a)))","(fma.f64 (pow.f64 a #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1/2 binary64)) (pow.f64 b #s(literal -1 binary64)))","(fma.f64 (pow.f64 b #s(literal -1/2 binary64)) (pow.f64 b #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 a) #s(literal -1 binary64)) (pow.f64 b #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 b) #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal 1 binary64) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal 1 binary64) (pow.f64 b #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 b #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 a #s(literal -1 binary64)) (pow.f64 b #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 b #s(literal -2 binary64)) (/.f64 (-.f64 a b) (*.f64 b a))) (/.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (-.f64 a b) (*.f64 b a))))","(exp.f64 (*.f64 (log.f64 (*.f64 a (/.f64 b (+.f64 b a)))) #s(literal -1 binary64)))","(+.f64 (pow.f64 b #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(+.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 b (*.f64 (+.f64 b a) (-.f64 a b))) #s(literal -1 binary64)) (pow.f64 (-.f64 a b) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 b (*.f64 (+.f64 b a) (-.f64 b a))) #s(literal -1 binary64)) (pow.f64 (-.f64 b a) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 b (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 b (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 a (-.f64 a b) (*.f64 b b)) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 b a) #s(literal 1 binary64)) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (neg.f64 (+.f64 b a)) (pow.f64 (neg.f64 b) #s(literal -1 binary64)))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 b a) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (+.f64 b a))","(*.f64 (+.f64 b a) (pow.f64 b #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (+.f64 b a) b))","(pow.f64 (/.f64 (/.f64 b (+.f64 b a)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 b (+.f64 b a)) #s(literal -1 binary64))","(/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 a b)) (pow.f64 b #s(literal -1 binary64))) (-.f64 a b))","(/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) (pow.f64 b #s(literal -1 binary64))) (-.f64 b a))","(/.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 b #s(literal -1 binary64))) (fma.f64 b (-.f64 b a) (*.f64 a a)))","(/.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 b #s(literal -1 binary64))) (fma.f64 a (-.f64 a b) (*.f64 b b)))","(/.f64 (neg.f64 (neg.f64 (+.f64 b a))) (neg.f64 (neg.f64 b)))","(/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 a b)) #s(literal -1 binary64)) (*.f64 (-.f64 a b) (neg.f64 b)))","(/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) #s(literal -1 binary64)) (*.f64 (-.f64 b a) (neg.f64 b)))","(/.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) (neg.f64 b)))","(/.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 a (-.f64 a b) (*.f64 b b)) (neg.f64 b)))","(/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 a b)) #s(literal 1 binary64)) (*.f64 (-.f64 a b) b))","(/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) #s(literal 1 binary64)) (*.f64 (-.f64 b a) b))","(/.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) b))","(/.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 a (-.f64 a b) (*.f64 b b)) b))","(/.f64 (*.f64 (+.f64 b a) #s(literal -1 binary64)) (neg.f64 b))","(/.f64 (*.f64 (+.f64 b a) #s(literal 1 binary64)) b)","(/.f64 (*.f64 (+.f64 b a) (-.f64 a b)) (*.f64 b (-.f64 a b)))","(/.f64 (*.f64 (+.f64 b a) (-.f64 b a)) (*.f64 b (-.f64 b a)))","(/.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 b (fma.f64 b (-.f64 b a) (*.f64 a a))))","(/.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 b (fma.f64 a (-.f64 a b) (*.f64 b b))))","(/.f64 (neg.f64 (+.f64 b a)) (neg.f64 b))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b (+.f64 b a))))","(/.f64 (+.f64 b a) b)","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b (+.f64 b a)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 b (+.f64 b a)))","(neg.f64 (/.f64 (neg.f64 (+.f64 b a)) b))","(exp.f64 (fma.f64 (log.f64 b) #s(literal -1 binary64) (log.f64 (+.f64 b a))))","(exp.f64 (+.f64 (log.f64 (+.f64 b a)) (neg.f64 (log.f64 b))))","(exp.f64 (*.f64 (log.f64 (/.f64 b (+.f64 b a))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (sqrt.f64 (+.f64 b a)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (+.f64 b a)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (*.f64 (+.f64 b a) (-.f64 a b)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 a b) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (*.f64 (+.f64 b a) (-.f64 b a)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 b a) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 a (-.f64 a b) (*.f64 b b)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (sqrt.f64 (+.f64 b a)) (sqrt.f64 (+.f64 b a)))","(*.f64 (*.f64 (+.f64 b a) (-.f64 a b)) (pow.f64 (-.f64 a b) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) (pow.f64 (-.f64 b a) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (fma.f64 a (-.f64 a b) (*.f64 b b)) #s(literal -1 binary64)))","(pow.f64 (sqrt.f64 (+.f64 b a)) #s(literal 2 binary64))","(pow.f64 (/.f64 (-.f64 a b) (*.f64 (+.f64 b a) (-.f64 a b))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 b a) (*.f64 (+.f64 b a) (-.f64 b a))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 a (-.f64 a b) (*.f64 b b)) (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (+.f64 b a) #s(literal 1 binary64))","(/.f64 (exp.f64 (log.f64 (*.f64 (+.f64 b a) (-.f64 a b)))) (exp.f64 (log.f64 (-.f64 a b))))","(/.f64 (exp.f64 (log.f64 (*.f64 (+.f64 b a) (-.f64 b a)))) (exp.f64 (log.f64 (-.f64 b a))))","(/.f64 (exp.f64 (log.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))))) (exp.f64 (log.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)))))","(/.f64 (exp.f64 (log.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))))) (exp.f64 (log.f64 (fma.f64 a (-.f64 a b) (*.f64 b b)))))","(/.f64 (neg.f64 (*.f64 (+.f64 b a) (-.f64 a b))) (neg.f64 (-.f64 a b)))","(/.f64 (neg.f64 (*.f64 (+.f64 b a) (-.f64 b a))) (neg.f64 (-.f64 b a)))","(/.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (fma.f64 b (-.f64 b a) (*.f64 a a))))","(/.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (fma.f64 a (-.f64 a b) (*.f64 b b))))","(/.f64 (*.f64 (+.f64 b a) (-.f64 a b)) (-.f64 a b))","(/.f64 (*.f64 (+.f64 b a) (-.f64 b a)) (-.f64 b a))","(/.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (fma.f64 b (-.f64 b a) (*.f64 a a)))","(/.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (fma.f64 a (-.f64 a b) (*.f64 b b)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 a b) (*.f64 (+.f64 b a) (-.f64 a b))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 b a) (*.f64 (+.f64 b a) (-.f64 b a))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 a (-.f64 a b) (*.f64 b b)) (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(fma.f64 #s(literal 1 binary64) b a)","(fma.f64 #s(literal 1 binary64) a b)","(fma.f64 b #s(literal 1 binary64) a)","(fma.f64 a #s(literal 1 binary64) b)","(-.f64 (/.f64 (*.f64 a a) (-.f64 a b)) (/.f64 (*.f64 b b) (-.f64 a b)))","(-.f64 (/.f64 (*.f64 b b) (-.f64 b a)) (/.f64 (*.f64 a a) (-.f64 b a)))","(exp.f64 (log.f64 (+.f64 b a)))","(+.f64 b a)","(+.f64 a b)","(log.f64 (exp.f64 (+.f64 b a)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1/2 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (pow.f64 a #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (neg.f64 a)) #s(literal -1 binary64))","(pow.f64 (*.f64 a a) #s(literal -1/2 binary64))","(pow.f64 a #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 a))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 a)))","(/.f64 #s(literal 1 binary64) a)","(neg.f64 (/.f64 #s(literal -1 binary64) a))","(exp.f64 (neg.f64 (log.f64 a)))","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)) #s(literal 2 binary64))) (pow.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (neg.f64 (/.f64 #s(literal 1/2 binary64) a)) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 (*.f64 (+.f64 b a) b) a)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (/.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 a (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 (*.f64 (+.f64 b a) b) a)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)) #s(literal 2 binary64)) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)) (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) (pow.f64 (*.f64 b a) #s(literal 3 binary64))))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (neg.f64 (/.f64 #s(literal 1/2 binary64) a)) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b))) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 (*.f64 (+.f64 b a) b) a)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)) #s(literal 2 binary64)) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)) (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) (pow.f64 (*.f64 b a) #s(literal 3 binary64))))) (fma.f64 (pow.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 (*.f64 (+.f64 b a) b) a)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (/.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 a (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) #s(literal 3 binary64))))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)) #s(literal 2 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))) #s(literal 2 binary64))) (-.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)) (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (neg.f64 (/.f64 #s(literal 1/2 binary64) a)) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 (*.f64 (+.f64 b a) b) a)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (/.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 a (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 (*.f64 (+.f64 b a) b) a)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)) #s(literal 2 binary64)) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)) (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) (pow.f64 (*.f64 b a) #s(literal 3 binary64)))))))","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)) b (*.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (/.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) a))) (*.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) b))","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)) a (*.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)))) (*.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) a))","(/.f64 (fma.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)) (*.f64 b a) (*.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))))) (pow.f64 (*.f64 b a) #s(literal 3 binary64)))","(/.f64 (fma.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) a) (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (*.f64 b (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)))) (*.f64 b (pow.f64 (*.f64 b a) #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)) (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (*.f64 a (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)))) (*.f64 a (pow.f64 (*.f64 b a) #s(literal 2 binary64))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (*.f64 (*.f64 b a) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)))) (pow.f64 (*.f64 b a) #s(literal 3 binary64)))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)) #s(literal 2 binary64))) (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (neg.f64 (/.f64 #s(literal 1/2 binary64) a)) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 (*.f64 (+.f64 b a) b) a)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (/.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 a (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) #s(literal 3 binary64)))) (+.f64 (pow.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))) #s(literal 2 binary64)) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)) (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) (pow.f64 (*.f64 b a) #s(literal 3 binary64))))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 (*.f64 (+.f64 b a) b) a)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (/.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 a (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) #s(literal 3 binary64)))) (fma.f64 (pow.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 (*.f64 (+.f64 b a) b) a)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)) #s(literal 2 binary64)) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)) (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) (pow.f64 (*.f64 b a) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (neg.f64 (/.f64 #s(literal 1/2 binary64) a)) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b))) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))) #s(literal 2 binary64)) (pow.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 (*.f64 (+.f64 b a) b) a)) #s(literal 2 binary64)) #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)) #s(literal 2 binary64)) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)) (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) (pow.f64 (*.f64 b a) #s(literal 3 binary64))))) (fma.f64 (pow.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 (*.f64 (+.f64 b a) b) a)) #s(literal 3 binary64)) #s(literal -1/8 binary64) (/.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 a (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) #s(literal 3 binary64))))))","(fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 (*.f64 (+.f64 b a) b) a)) #s(literal -1/2 binary64) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)))","(fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (*.f64 (*.f64 b a) a)) (/.f64 (+.f64 b a) b) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (*.f64 b a)) (/.f64 (/.f64 (+.f64 b a) b) a) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) b) (/.f64 (/.f64 (/.f64 (+.f64 b a) b) a) a) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)))","(fma.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b) (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) a) (pow.f64 b #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)) (pow.f64 a #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))))","(fma.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (+.f64 b a)) (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)))","(fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (pow.f64 (*.f64 b a) #s(literal -2 binary64))) (*.f64 (*.f64 (+.f64 b a) b) a) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) (pow.f64 (*.f64 b a) #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))))","(fma.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))))","(fma.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))))","(fma.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a) (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))))","(fma.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) (/.f64 (/.f64 #s(literal 1/2 binary64) a) b) (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))))","(fma.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) (/.f64 #s(literal 1/2 binary64) (*.f64 b a)) (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))))","(fma.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) (pow.f64 (*.f64 b (*.f64 a #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))))","(fma.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)))","(fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a)) (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)))","(fma.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (*.f64 (+.f64 b a) b) a) (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a))) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)))","(fma.f64 (*.f64 (*.f64 (+.f64 b a) b) a) (*.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (pow.f64 (*.f64 b a) #s(literal -2 binary64))) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)))","(fma.f64 (*.f64 b a) (*.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a))) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)))","(fma.f64 (*.f64 b a) (*.f64 (+.f64 b a) (*.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (pow.f64 (*.f64 b a) #s(literal -2 binary64)))) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)))","(fma.f64 (+.f64 b a) (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a))) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)))","(fma.f64 (+.f64 b a) (*.f64 (*.f64 b a) (*.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (pow.f64 (*.f64 b a) #s(literal -2 binary64)))) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)))","(fma.f64 b (*.f64 (*.f64 (+.f64 b a) a) (*.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (pow.f64 (*.f64 b a) #s(literal -2 binary64)))) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))) #s(literal 2 binary64)) (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (neg.f64 (/.f64 #s(literal 1/2 binary64) a)) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)))) (/.f64 (pow.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)) #s(literal 2 binary64)) (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (neg.f64 (/.f64 #s(literal 1/2 binary64) a)) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)))))","(+.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)))","(+.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b)) (*.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a))))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (/.f64 (/.f64 (+.f64 b a) b) a)))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 2 binary64)) (pow.f64 (/.f64 (/.f64 (+.f64 b a) b) a) #s(literal 2 binary64))) (pow.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (neg.f64 (/.f64 (/.f64 (+.f64 b a) b) a))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (/.f64 (/.f64 (+.f64 b a) b) a) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 3 binary64))) (pow.f64 (fma.f64 (/.f64 (/.f64 (+.f64 b a) b) a) (-.f64 (/.f64 (/.f64 (+.f64 b a) b) a) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps)) (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (neg.f64 (/.f64 (/.f64 (+.f64 b a) b) a))) (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 2 binary64)) (pow.f64 (/.f64 (/.f64 (+.f64 b a) b) a) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (/.f64 (/.f64 (+.f64 b a) b) a) (-.f64 (/.f64 (/.f64 (+.f64 b a) b) a) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps)) (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 2 binary64))) (+.f64 (pow.f64 (/.f64 (/.f64 (+.f64 b a) b) a) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (pow.f64 b #s(literal -1 binary64))) #s(literal 2 binary64)) (pow.f64 a #s(literal -2 binary64))) (-.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (pow.f64 b #s(literal -1 binary64))) (pow.f64 a #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 (+.f64 b a) b) a) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 2 binary64))) (-.f64 (/.f64 (/.f64 (+.f64 b a) b) a) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps)))","(/.f64 (+.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (pow.f64 b #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64))) (+.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (pow.f64 b #s(literal -1 binary64))) #s(literal 2 binary64)) (-.f64 (pow.f64 a #s(literal -2 binary64)) (*.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (pow.f64 b #s(literal -1 binary64))) (pow.f64 a #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 2 binary64)) (pow.f64 (/.f64 (/.f64 (+.f64 b a) b) a) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (neg.f64 (/.f64 (/.f64 (+.f64 b a) b) a)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (/.f64 (/.f64 (+.f64 b a) b) a) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (/.f64 (/.f64 (+.f64 b a) b) a) (-.f64 (/.f64 (/.f64 (+.f64 b a) b) a) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps)) (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 2 binary64)) (pow.f64 (/.f64 (/.f64 (+.f64 b a) b) a) #s(literal 2 binary64))) (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (neg.f64 (/.f64 (/.f64 (+.f64 b a) b) a))))","(/.f64 (+.f64 (pow.f64 (/.f64 (/.f64 (+.f64 b a) b) a) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (/.f64 (+.f64 b a) b) a) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 2 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) (*.f64 eps (/.f64 (/.f64 (+.f64 b a) b) a))))))","(/.f64 (+.f64 (pow.f64 (/.f64 (/.f64 (+.f64 b a) b) a) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 3 binary64))) (fma.f64 (/.f64 (/.f64 (+.f64 b a) b) a) (-.f64 (/.f64 (/.f64 (+.f64 b a) b) a) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps)) (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (neg.f64 (/.f64 (/.f64 (+.f64 b a) b) a))) (-.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 2 binary64)) (pow.f64 (/.f64 (/.f64 (+.f64 b a) b) a) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (/.f64 (+.f64 b a) b) a) (-.f64 (/.f64 (/.f64 (+.f64 b a) b) a) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps)) (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 2 binary64))) (+.f64 (pow.f64 (/.f64 (/.f64 (+.f64 b a) b) a) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 3 binary64)))))","(fma.f64 (pow.f64 (/.f64 a (neg.f64 (+.f64 b a))) #s(literal -1 binary64)) (pow.f64 (neg.f64 b) #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps))","(fma.f64 (pow.f64 (/.f64 a (+.f64 b a)) #s(literal -1 binary64)) (pow.f64 b #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps))","(fma.f64 (*.f64 (/.f64 (+.f64 b a) b) #s(literal 1 binary64)) (pow.f64 a #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps))","(fma.f64 (pow.f64 a #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1/2 binary64)) (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (pow.f64 b #s(literal -1 binary64))))","(fma.f64 (pow.f64 b #s(literal -1/2 binary64)) (pow.f64 b #s(literal -1/2 binary64)) (+.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps)))","(fma.f64 (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -2 binary64))) (pow.f64 (/.f64 (-.f64 a b) (*.f64 b a)) #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps))","(fma.f64 (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64))) (pow.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (pow.f64 b #s(literal -2 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps))","(fma.f64 (/.f64 (neg.f64 (+.f64 b a)) b) (pow.f64 (neg.f64 a) #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps))","(fma.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 a) #s(literal -1 binary64)) (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (pow.f64 b #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 b) #s(literal -1 binary64)) (+.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps)))","(fma.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal 1 binary64) (+.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps)))","(fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (/.f64 (/.f64 (+.f64 b a) b) a))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (+.f64 b a) b) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal 1 binary64) (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (pow.f64 b #s(literal -1 binary64))))","(fma.f64 (/.f64 (+.f64 b a) b) (pow.f64 a #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps))","(fma.f64 (+.f64 b a) (pow.f64 (*.f64 b a) #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps))","(fma.f64 #s(literal 1 binary64) (/.f64 (/.f64 (+.f64 b a) b) a) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps))","(fma.f64 #s(literal 1 binary64) (pow.f64 b #s(literal -1 binary64)) (+.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps)))","(fma.f64 #s(literal 1 binary64) (pow.f64 a #s(literal -1 binary64)) (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (pow.f64 b #s(literal -1 binary64))))","(fma.f64 eps (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) (/.f64 (/.f64 (+.f64 b a) b) a))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) #s(literal 2 binary64)) (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (neg.f64 (/.f64 (/.f64 (+.f64 b a) b) a)))) (/.f64 (pow.f64 (/.f64 (/.f64 (+.f64 b a) b) a) #s(literal 2 binary64)) (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (neg.f64 (/.f64 (/.f64 (+.f64 b a) b) a)))))","(+.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (pow.f64 a #s(literal -1 binary64))) (pow.f64 b #s(literal -1 binary64)))","(+.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (pow.f64 b #s(literal -1 binary64))) (pow.f64 a #s(literal -1 binary64)))","(+.f64 (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps) (/.f64 (/.f64 (+.f64 b a) b) a))","(+.f64 (/.f64 (/.f64 (+.f64 b a) b) a) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps))","(+.f64 (pow.f64 b #s(literal -1 binary64)) (+.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps)))","(+.f64 (pow.f64 a #s(literal -1 binary64)) (fma.f64 (fma.f64 (*.f64 (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)) (*.f64 b a)) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))) eps (pow.f64 b #s(literal -1 binary64))))","(*.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 b a)) (+.f64 b a))","(*.f64 (*.f64 #s(literal -1/2 binary64) b) (*.f64 (+.f64 b a) a))","(*.f64 (*.f64 #s(literal -1/2 binary64) (+.f64 b a)) (*.f64 b a))","(*.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (+.f64 b a) b) a))","(*.f64 (*.f64 (*.f64 (+.f64 b a) b) a) #s(literal -1/2 binary64))","(*.f64 (*.f64 b a) (*.f64 #s(literal -1/2 binary64) (+.f64 b a)))","(*.f64 (+.f64 b a) (*.f64 (*.f64 b a) #s(literal -1/2 binary64)))","(*.f64 b (*.f64 (*.f64 (+.f64 b a) a) #s(literal -1/2 binary64)))","(*.f64 b (*.f64 a (*.f64 #s(literal -1/2 binary64) (+.f64 b a))))","(*.f64 a (*.f64 b (*.f64 #s(literal -1/2 binary64) (+.f64 b a))))","(fma.f64 (*.f64 (*.f64 b b) a) #s(literal -1/2 binary64) (*.f64 (*.f64 (*.f64 b a) a) #s(literal -1/2 binary64)))","(fma.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 b b) a) (*.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 b a) a)))","(+.f64 (*.f64 (*.f64 (*.f64 b b) a) #s(literal -1/2 binary64)) (*.f64 (*.f64 (*.f64 b a) a) #s(literal -1/2 binary64)))","(+.f64 (*.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 b b) a)) (*.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 b a) a)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64)) b))","(*.f64 (pow.f64 (/.f64 b (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 b (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64)) #s(literal 1 binary64)) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64))) (pow.f64 (neg.f64 b) #s(literal -1 binary64)))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64)) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64)) b))","(pow.f64 (/.f64 (/.f64 b (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 b (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 b #s(literal -1 binary64))) (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal -1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 b #s(literal -1 binary64))) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64))))","(/.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 b))","(/.f64 (*.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64)) #s(literal 1 binary64)) b)","(/.f64 (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64)))) (neg.f64 (neg.f64 b)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal -1 binary64)) (neg.f64 b)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal -1 binary64)) b))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64))) (neg.f64 b)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64))) b))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 b (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal -1 binary64))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 b (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64))) (neg.f64 b))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64)))))","(/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64)) b)","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 b (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64))) b))","(neg.f64 (/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64)) (neg.f64 b)))","(exp.f64 (*.f64 (log.f64 (/.f64 b (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal -1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal -1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b)) (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 3 binary64)) #s(literal 1 binary64))))","(fma.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal -1/2 binary64)) b) eps #s(literal 1 binary64))","(fma.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (*.f64 b eps) (+.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal -1/2 binary64)) #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal 1 binary64))","(fma.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal -1/2 binary64)) (*.f64 b eps) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 1 binary64))","(fma.f64 b (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 b (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) #s(literal 1 binary64))","(fma.f64 eps (*.f64 (*.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal -1/2 binary64)) b) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 eps (*.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal -1/2 binary64)) b) #s(literal 1 binary64))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) b))","(*.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal -1/2 binary64)) eps)","(*.f64 eps (+.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal -1/2 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))) #s(literal -2 binary64))) eps) (-.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))) #s(literal -3 binary64)) #s(literal -1/8 binary64)) eps) (+.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))) #s(literal -2 binary64)) (/.f64 #s(literal -1/2 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) #s(literal 1/4 binary64)))","(/.f64 (*.f64 eps (-.f64 #s(literal 1/4 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))) #s(literal -2 binary64)))) (-.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps)))))","(/.f64 (*.f64 eps (+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))) #s(literal -3 binary64)) #s(literal -1/8 binary64))) (+.f64 (-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))) #s(literal -2 binary64)) (/.f64 #s(literal -1/2 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))) #s(literal 1/4 binary64)))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) eps) #s(literal 2 binary64)) (pow.f64 (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a)))) #s(literal 2 binary64))) (-.f64 (*.f64 #s(literal -1/2 binary64) eps) (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) eps) #s(literal 2 binary64)) (-.f64 (pow.f64 (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a)))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))))))","(fma.f64 (*.f64 eps (pow.f64 (exp.f64 a) eps)) (pow.f64 (expm1.f64 (*.f64 a eps)) #s(literal -1 binary64)) (*.f64 #s(literal -1/2 binary64) eps))","(fma.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) eps (*.f64 #s(literal -1/2 binary64) eps))","(fma.f64 (pow.f64 (exp.f64 a) eps) (*.f64 (pow.f64 (expm1.f64 (*.f64 a eps)) #s(literal -1 binary64)) eps) (*.f64 #s(literal -1/2 binary64) eps))","(fma.f64 #s(literal -1/2 binary64) eps (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a)))))","(fma.f64 eps (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) (*.f64 #s(literal -1/2 binary64) eps))","(fma.f64 eps #s(literal -1/2 binary64) (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a)))))","(+.f64 (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a)))) (*.f64 #s(literal -1/2 binary64) eps))","(+.f64 (*.f64 #s(literal -1/2 binary64) eps) (/.f64 eps (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a)))))","(*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal -1 binary64)))) #s(literal -1 binary64)) (/.f64 eps (expm1.f64 (*.f64 a eps))))","(*.f64 (pow.f64 (/.f64 (expm1.f64 (*.f64 a eps)) (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal -1 binary64)))) #s(literal -1 binary64)) (pow.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) eps) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (/.f64 (expm1.f64 (*.f64 a eps)) (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (expm1.f64 (*.f64 a eps)) (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps)) #s(literal -1 binary64)) (pow.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (expm1.f64 (*.f64 b eps)) eps) #s(literal -1 binary64)) (pow.f64 (/.f64 (expm1.f64 (*.f64 a eps)) (expm1.f64 (*.f64 (+.f64 b a) eps))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (expm1.f64 (*.f64 a eps)) (expm1.f64 (*.f64 (+.f64 b a) eps))) #s(literal -1 binary64)) (pow.f64 (/.f64 (expm1.f64 (*.f64 b eps)) eps) #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 (/.f64 eps (expm1.f64 (*.f64 a eps))) (expm1.f64 (*.f64 (+.f64 b a) eps))) (expm1.f64 (*.f64 b (*.f64 #s(literal 2 binary64) eps)))) (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)))","(*.f64 (/.f64 (*.f64 (/.f64 eps (expm1.f64 (*.f64 a eps))) (expm1.f64 (*.f64 (+.f64 b a) eps))) (expm1.f64 (*.f64 b (*.f64 eps #s(literal 3 binary64))))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 eps) b) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 eps) b)))","(*.f64 (/.f64 (/.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps) (expm1.f64 (*.f64 b eps))) (expm1.f64 (*.f64 a eps))) (-.f64 (pow.f64 (exp.f64 (+.f64 b a)) (*.f64 eps #s(literal 3 binary64))) #s(literal -1 binary64))) (+.f64 (fma.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64) #s(literal 1 binary64)) (pow.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) eps) (+.f64 b a))))","(*.f64 (/.f64 (/.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps) (expm1.f64 (*.f64 b eps))) (expm1.f64 (*.f64 a eps))) (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64)))) (expm1.f64 (*.f64 (+.f64 b a) eps)))","(*.f64 (/.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) (expm1.f64 (*.f64 a eps))) (/.f64 eps (expm1.f64 (*.f64 b eps))))","(*.f64 (/.f64 eps (expm1.f64 (*.f64 b eps))) (/.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) (expm1.f64 (*.f64 a eps))))","(*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal -1 binary64))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) (/.f64 eps (expm1.f64 (*.f64 a eps))))","(*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal -1 binary64))) (expm1.f64 (*.f64 a eps))) (/.f64 eps (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps) (expm1.f64 (*.f64 a eps))) (/.f64 (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal -1 binary64)) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))))","(*.f64 (/.f64 (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal -1 binary64)) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) (/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps) (expm1.f64 (*.f64 a eps))))","(*.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps) (expm1.f64 (*.f64 b eps))) (expm1.f64 (*.f64 a eps))))","(*.f64 (/.f64 (/.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) (expm1.f64 (*.f64 a eps))) (expm1.f64 (*.f64 b eps))) eps)","(*.f64 (*.f64 (/.f64 eps (expm1.f64 (*.f64 a eps))) (expm1.f64 (*.f64 (+.f64 b a) eps))) (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps) (expm1.f64 (*.f64 b eps))) (expm1.f64 (*.f64 a eps))) (pow.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal -1 binary64))) (/.f64 eps (*.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (expm1.f64 (*.f64 a eps)))))","(*.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal -1 binary64))) (*.f64 eps (pow.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (expm1.f64 (*.f64 a eps))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal -1/2 binary64)) (*.f64 (/.f64 eps (expm1.f64 (*.f64 a eps))) (expm1.f64 (*.f64 (+.f64 b a) eps)))))","(*.f64 (/.f64 (pow.f64 (expm1.f64 (*.f64 a eps)) #s(literal -1 binary64)) (expm1.f64 (*.f64 b eps))) (pow.f64 (pow.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (expm1.f64 (*.f64 a eps)) #s(literal -1 binary64)) (expm1.f64 (*.f64 b eps))) (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps))","(*.f64 (pow.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (expm1.f64 (*.f64 a eps))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps) (expm1.f64 (*.f64 b eps))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (expm1.f64 (*.f64 a eps))) #s(literal -1 binary64)) (/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps) (expm1.f64 (*.f64 b eps))))","(*.f64 (pow.f64 (expm1.f64 (*.f64 a eps)) #s(literal -1 binary64)) (pow.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps) (expm1.f64 (*.f64 b eps)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 a eps)) #s(literal -1 binary64)) (pow.f64 (/.f64 (expm1.f64 (*.f64 b eps)) (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps)) #s(literal -1 binary64)))","(*.f64 (/.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) (expm1.f64 (*.f64 b eps))) (/.f64 eps (expm1.f64 (*.f64 a eps))))","(*.f64 (/.f64 eps (expm1.f64 (*.f64 a eps))) (/.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) (expm1.f64 (*.f64 b eps))))","(*.f64 (*.f64 (neg.f64 eps) (expm1.f64 (*.f64 (+.f64 b a) eps))) (pow.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 a eps))) (expm1.f64 (*.f64 b eps))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps) (expm1.f64 (*.f64 b eps)))) (pow.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 a eps))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps) (expm1.f64 (*.f64 b eps))) (pow.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (expm1.f64 (*.f64 a eps))) #s(literal -1 binary64)))","(*.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps) (/.f64 (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal -1 binary64)) (*.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (expm1.f64 (*.f64 a eps)))))","(*.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps) (pow.f64 (*.f64 (expm1.f64 (*.f64 b eps)) (*.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (expm1.f64 (*.f64 a eps)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal -1 binary64)) (*.f64 (/.f64 eps (expm1.f64 (*.f64 a eps))) (expm1.f64 (*.f64 (+.f64 b a) eps))))","(*.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps) (/.f64 (pow.f64 (expm1.f64 (*.f64 a eps)) #s(literal -1 binary64)) (expm1.f64 (*.f64 b eps))))","(*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) (/.f64 eps (*.f64 (expm1.f64 (*.f64 b eps)) (expm1.f64 (*.f64 a eps)))))","(*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) (*.f64 eps (/.f64 (pow.f64 (expm1.f64 (*.f64 a eps)) #s(literal -1 binary64)) (expm1.f64 (*.f64 b eps)))))","(*.f64 #s(literal 1 binary64) (/.f64 (*.f64 (/.f64 eps (expm1.f64 (*.f64 a eps))) (expm1.f64 (*.f64 (+.f64 b a) eps))) (expm1.f64 (*.f64 b eps))))","(*.f64 eps (/.f64 (/.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) (expm1.f64 (*.f64 a eps))) (expm1.f64 (*.f64 b eps))))","(pow.f64 (/.f64 (expm1.f64 (*.f64 b eps)) (*.f64 (/.f64 eps (expm1.f64 (*.f64 a eps))) (expm1.f64 (*.f64 (+.f64 b a) eps)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 b eps)) (expm1.f64 (*.f64 a eps))) (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (/.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps) (expm1.f64 (*.f64 b eps))) (expm1.f64 (*.f64 a eps)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 b eps)) (expm1.f64 (*.f64 a eps))) (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps)) #s(literal -1 binary64))","(/.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps) (expm1.f64 (*.f64 b eps))) (expm1.f64 (*.f64 a eps)))","(/.f64 (/.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps) (expm1.f64 (*.f64 b eps))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))) (expm1.f64 (*.f64 a eps)))","(/.f64 (*.f64 eps (/.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) (expm1.f64 (*.f64 b eps)))) (expm1.f64 (*.f64 a eps)))","(/.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps)) (expm1.f64 (*.f64 a eps)))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 (/.f64 eps (expm1.f64 (*.f64 a eps))) (expm1.f64 (*.f64 (+.f64 b a) eps)))) (expm1.f64 (*.f64 b eps)))","(/.f64 (*.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps) #s(literal 1 binary64)) (*.f64 (expm1.f64 (*.f64 b eps)) (expm1.f64 (*.f64 a eps))))","(/.f64 (*.f64 (/.f64 (pow.f64 (expm1.f64 (*.f64 a eps)) #s(literal -1 binary64)) (expm1.f64 (*.f64 b eps))) (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps)) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)))","(/.f64 (*.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (expm1.f64 (*.f64 a eps))))","(/.f64 (neg.f64 (*.f64 (/.f64 eps (expm1.f64 (*.f64 a eps))) (expm1.f64 (*.f64 (+.f64 b a) eps)))) (neg.f64 (expm1.f64 (*.f64 b eps))))","(/.f64 (neg.f64 (*.f64 (neg.f64 eps) (expm1.f64 (*.f64 (+.f64 b a) eps)))) (neg.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 a eps))) (expm1.f64 (*.f64 b eps)))))","(/.f64 (neg.f64 (/.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps) (expm1.f64 (*.f64 b eps))) (expm1.f64 (*.f64 a eps)))) (neg.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps) (expm1.f64 (*.f64 b eps))))) (neg.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 a eps))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps)) (*.f64 (expm1.f64 (*.f64 b eps)) (*.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (expm1.f64 (*.f64 a eps)))))","(/.f64 (*.f64 (/.f64 eps (expm1.f64 (*.f64 a eps))) (expm1.f64 (*.f64 (+.f64 b a) eps))) (expm1.f64 (*.f64 b eps)))","(/.f64 (/.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps) (expm1.f64 (*.f64 b eps))) (expm1.f64 (*.f64 a eps))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)))","(/.f64 (*.f64 (neg.f64 eps) (expm1.f64 (*.f64 (+.f64 b a) eps))) (*.f64 (neg.f64 (expm1.f64 (*.f64 a eps))) (expm1.f64 (*.f64 b eps))))","(/.f64 (neg.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps) (expm1.f64 (*.f64 b eps)))) (*.f64 (neg.f64 (expm1.f64 (*.f64 a eps))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))))","(/.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps) (expm1.f64 (*.f64 b eps))) (*.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (expm1.f64 (*.f64 a eps))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 b eps)) (expm1.f64 (*.f64 a eps))) (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps) (*.f64 (expm1.f64 (*.f64 b eps)) (expm1.f64 (*.f64 a eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (expm1.f64 (*.f64 b eps)) (*.f64 (/.f64 eps (expm1.f64 (*.f64 a eps))) (expm1.f64 (*.f64 (+.f64 b a) eps)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 b eps)) (expm1.f64 (*.f64 a eps))) (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (/.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps) (expm1.f64 (*.f64 b eps))) (expm1.f64 (*.f64 a eps)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (expm1.f64 (*.f64 b eps)) (expm1.f64 (*.f64 a eps))) (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps)))","(neg.f64 (/.f64 (*.f64 (neg.f64 eps) (expm1.f64 (*.f64 (+.f64 b a) eps))) (*.f64 (expm1.f64 (*.f64 b eps)) (expm1.f64 (*.f64 a eps)))))","(neg.f64 (/.f64 (neg.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps) (expm1.f64 (*.f64 b eps)))) (*.f64 (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)) (expm1.f64 (*.f64 a eps)))))","(neg.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps) (*.f64 (neg.f64 (expm1.f64 (*.f64 a eps))) (expm1.f64 (*.f64 b eps)))))","(neg.f64 (/.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps) (expm1.f64 (*.f64 b eps))) (*.f64 (neg.f64 (expm1.f64 (*.f64 a eps))) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64)))))","(exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 (expm1.f64 (*.f64 b eps)) (expm1.f64 (*.f64 a eps))) (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps))) #s(literal -1 binary64)))","(*.f64 (*.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps) (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal -1/2 binary64))) (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal -1/2 binary64)))","(*.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal -1 binary64)) eps) (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))))","(*.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal -1 binary64))) eps)","(*.f64 (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal -1/2 binary64)) (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps)))","(*.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps) (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) (*.f64 eps (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps))","(*.f64 eps (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal -1 binary64))))","(/.f64 (*.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps) #s(literal 1 binary64)) (expm1.f64 (*.f64 b eps)))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps)) (expm1.f64 (*.f64 b eps)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps) (expm1.f64 (*.f64 b eps)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 b (*.f64 #s(literal 2 binary64) eps))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 b (*.f64 #s(literal 2 binary64) eps))) #s(literal -1 binary64)) (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 b (*.f64 eps #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 eps) b) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 eps) b)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 b (*.f64 eps #s(literal 3 binary64)))) #s(literal -1 binary64)) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 eps) b) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 eps) b)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal -1/2 binary64)) (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal -1/2 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal -1 binary64)))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (expm1.f64 (*.f64 b eps))))","(pow.f64 (/.f64 (expm1.f64 (*.f64 b eps)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (expm1.f64 (*.f64 b eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (expm1.f64 (*.f64 b eps)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 b eps)))","(exp.f64 (fma.f64 (log.f64 (expm1.f64 (*.f64 b eps))) #s(literal -1/2 binary64) (*.f64 (log.f64 (expm1.f64 (*.f64 b eps))) #s(literal -1/2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 (expm1.f64 (*.f64 b eps))) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal 2 binary64))) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (expm1.f64 (*.f64 b eps)) #s(literal -1/2 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (expm1.f64 (*.f64 b eps))) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 b (*.f64 #s(literal 2 binary64) eps))) (pow.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 b (*.f64 eps #s(literal 3 binary64)))) (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 eps) b) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 eps) b)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) (expm1.f64 (*.f64 b (*.f64 #s(literal 2 binary64) eps)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 eps) b) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 eps) b)) (expm1.f64 (*.f64 b (*.f64 eps #s(literal 3 binary64))))) #s(literal -1 binary64))","(/.f64 (exp.f64 (log.f64 (expm1.f64 (*.f64 b (*.f64 #s(literal 2 binary64) eps))))) (exp.f64 (log1p.f64 (pow.f64 (exp.f64 eps) b))))","(/.f64 (exp.f64 (log.f64 (expm1.f64 (*.f64 b (*.f64 eps #s(literal 3 binary64)))))) (exp.f64 (log.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 eps) b) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 eps) b)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 b (*.f64 #s(literal 2 binary64) eps)))) (neg.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 b (*.f64 eps #s(literal 3 binary64))))) (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 eps) b) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 eps) b))))","(/.f64 (expm1.f64 (*.f64 b (*.f64 #s(literal 2 binary64) eps))) (-.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)))","(/.f64 (expm1.f64 (*.f64 b (*.f64 #s(literal 2 binary64) eps))) (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)))","(/.f64 (expm1.f64 (*.f64 b (*.f64 eps #s(literal 3 binary64)))) (+.f64 (pow.f64 (pow.f64 (exp.f64 eps) b) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64)))))","(/.f64 (expm1.f64 (*.f64 b (*.f64 eps #s(literal 3 binary64)))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 eps) b) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 eps) b)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) (expm1.f64 (*.f64 b (*.f64 #s(literal 2 binary64) eps)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 eps) b) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 eps) b)) (expm1.f64 (*.f64 b (*.f64 eps #s(literal 3 binary64))))))","(fma.f64 (pow.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1/2 binary64)) (pow.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1/2 binary64)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 eps) (/.f64 b #s(literal 2 binary64))) (pow.f64 (exp.f64 eps) (/.f64 b #s(literal 2 binary64))) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))","(expm1.f64 (*.f64 b eps))","(-.f64 (/.f64 (pow.f64 (pow.f64 (exp.f64 eps) b) #s(literal 2 binary64)) (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64))) (pow.f64 (+.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (pow.f64 (exp.f64 eps) b) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 eps) b) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 eps) b))) (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 eps) b) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 eps) b)) #s(literal -1 binary64)))","(-.f64 (pow.f64 (exp.f64 eps) b) #s(literal 1 binary64))","(exp.f64 (log.f64 (expm1.f64 (*.f64 b eps))))","(+.f64 (pow.f64 (exp.f64 eps) b) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 eps) b))","(*.f64 (*.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (neg.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64))) (pow.f64 (neg.f64 b) #s(literal -1 binary64)))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 b a) #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (pow.f64 (+.f64 b a) #s(literal 2 binary64)))","(*.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (+.f64 b a) (/.f64 (+.f64 b a) b))","(*.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b))","(pow.f64 (/.f64 (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64))) #s(literal -1 binary64))","(/.f64 (*.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) #s(literal -1 binary64)) (neg.f64 b))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) (neg.f64 (neg.f64 b)))","(/.f64 (*.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) #s(literal 1 binary64)) b)","(/.f64 (neg.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64))) (neg.f64 b))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64)))))","(/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64))))","(neg.f64 (/.f64 (neg.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64))) b))","(neg.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) (neg.f64 b)))","(exp.f64 (+.f64 (neg.f64 (log.f64 b)) (*.f64 (log.f64 (+.f64 b a)) #s(literal 2 binary64))))","(exp.f64 (fma.f64 (log.f64 (+.f64 b a)) #s(literal 2 binary64) (neg.f64 (log.f64 b))))","(exp.f64 (*.f64 (log.f64 (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (*.f64 (+.f64 b a) (-.f64 a b))) #s(literal -1 binary64)) (pow.f64 (-.f64 a b) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (*.f64 (+.f64 b a) (-.f64 b a))) #s(literal -1 binary64)) (pow.f64 (-.f64 b a) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 a (-.f64 a b) (*.f64 b b)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (*.f64 b a) a) #s(literal -1 binary64)) (/.f64 (+.f64 b a) b))","(*.f64 (/.f64 (/.f64 (/.f64 (+.f64 b a) b) a) a) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (pow.f64 (pow.f64 (+.f64 b a) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a))","(*.f64 (pow.f64 (*.f64 b a) #s(literal -1 binary64)) (/.f64 (/.f64 (+.f64 b a) b) a))","(*.f64 (neg.f64 (+.f64 b a)) (pow.f64 (neg.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (/.f64 (/.f64 (/.f64 (+.f64 b a) b) a) a))","(*.f64 (+.f64 b a) (pow.f64 (*.f64 b a) #s(literal -2 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (*.f64 b a) #s(literal -2 binary64)) (+.f64 b a)))","(pow.f64 (/.f64 b (/.f64 (/.f64 (/.f64 (+.f64 b a) b) a) a)) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (+.f64 b a)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (+.f64 b a)) #s(literal -1 binary64))","(/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 a b)) (pow.f64 (*.f64 b a) #s(literal -2 binary64))) (-.f64 a b))","(/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) (pow.f64 (*.f64 b a) #s(literal -2 binary64))) (-.f64 b a))","(/.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (*.f64 b a) #s(literal -2 binary64))) (fma.f64 b (-.f64 b a) (*.f64 a a)))","(/.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (*.f64 b a) #s(literal -2 binary64))) (fma.f64 a (-.f64 a b) (*.f64 b b)))","(/.f64 (neg.f64 (/.f64 (/.f64 (/.f64 (+.f64 b a) b) a) a)) (neg.f64 b))","(/.f64 (neg.f64 (neg.f64 (+.f64 b a))) (neg.f64 (neg.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)))))","(/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 a b)) #s(literal 1 binary64)) (*.f64 (-.f64 a b) (pow.f64 (*.f64 b a) #s(literal 2 binary64))))","(/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) #s(literal 1 binary64)) (*.f64 (-.f64 b a) (pow.f64 (*.f64 b a) #s(literal 2 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) (pow.f64 (*.f64 b a) #s(literal 2 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 a (-.f64 a b) (*.f64 b b)) (pow.f64 (*.f64 b a) #s(literal 2 binary64))))","(/.f64 (*.f64 (+.f64 b a) #s(literal 1 binary64)) (pow.f64 (*.f64 b a) #s(literal 2 binary64)))","(/.f64 (/.f64 (/.f64 (/.f64 (+.f64 b a) b) a) a) b)","(/.f64 (*.f64 (+.f64 b a) (-.f64 a b)) (*.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (-.f64 a b)))","(/.f64 (*.f64 (+.f64 b a) (-.f64 b a)) (*.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (-.f64 b a)))","(/.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (fma.f64 b (-.f64 b a) (*.f64 a a))))","(/.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (fma.f64 a (-.f64 a b) (*.f64 b b))))","(/.f64 (neg.f64 (+.f64 b a)) (neg.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (+.f64 b a))))","(/.f64 (/.f64 (/.f64 (+.f64 b a) b) a) (*.f64 b a))","(/.f64 (/.f64 (+.f64 b a) b) (*.f64 (*.f64 b a) a))","(/.f64 (+.f64 b a) (pow.f64 (*.f64 b a) #s(literal 2 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 b (/.f64 (/.f64 (/.f64 (+.f64 b a) b) a) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (+.f64 b a)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (+.f64 b a)))","(neg.f64 (/.f64 (neg.f64 (+.f64 b a)) (pow.f64 (*.f64 b a) #s(literal 2 binary64))))","(neg.f64 (/.f64 (+.f64 b a) (neg.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)))))","(exp.f64 (*.f64 (log.f64 (/.f64 (pow.f64 (*.f64 b a) #s(literal 2 binary64)) (+.f64 b a))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a) (/.f64 #s(literal 1/2 binary64) b))","(*.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) a) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) (pow.f64 (*.f64 b a) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b))","(*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))","(*.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) (/.f64 (/.f64 #s(literal 1/2 binary64) a) b))","(*.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) (/.f64 #s(literal 1/2 binary64) (*.f64 b a)))","(*.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) (pow.f64 (*.f64 b (*.f64 a #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 b (/.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) a)) #s(literal -1 binary64))","(pow.f64 (/.f64 a (*.f64 #s(literal 1/2 binary64) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b))) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 b a) (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (*.f64 (*.f64 a #s(literal 2 binary64)) (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64))) (*.f64 a #s(literal 2 binary64))) #s(literal -1 binary64))","(/.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)) (neg.f64 a))","(/.f64 (*.f64 (neg.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64))) (/.f64 #s(literal 1/2 binary64) a)) (neg.f64 b))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) (neg.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) (neg.f64 b))","(/.f64 (*.f64 (/.f64 #s(literal 1/2 binary64) a) #s(literal 1 binary64)) (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64))))","(/.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) #s(literal -1/2 binary64)) (neg.f64 a))","(/.f64 (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) #s(literal 1 binary64)) (*.f64 a #s(literal 2 binary64)))","(/.f64 (neg.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) a)) (neg.f64 b))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b))) (neg.f64 a))","(/.f64 (neg.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) (neg.f64 (*.f64 b a)))","(/.f64 (*.f64 #s(literal 1/2 binary64) (neg.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) (*.f64 a (neg.f64 b)))","(/.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) (*.f64 (neg.f64 a) (neg.f64 b)))","(/.f64 (*.f64 #s(literal -1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) (*.f64 (neg.f64 a) b))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)))) (*.f64 (*.f64 a #s(literal 2 binary64)) (neg.f64 b)))","(/.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) (*.f64 (*.f64 a #s(literal 2 binary64)) b))","(/.f64 (*.f64 (neg.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64))) #s(literal 1/2 binary64)) (*.f64 (neg.f64 b) a))","(/.f64 (*.f64 (neg.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64))) #s(literal -1/2 binary64)) (*.f64 (neg.f64 b) (neg.f64 a)))","(/.f64 (*.f64 (neg.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (neg.f64 b) (*.f64 a #s(literal 2 binary64))))","(/.f64 (*.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) #s(literal -1/2 binary64)) (*.f64 b (neg.f64 a)))","(/.f64 (*.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 b (*.f64 a #s(literal 2 binary64))))","(/.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) a) b)","(/.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b)) a)","(/.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) (*.f64 b a))","(/.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64))))","(/.f64 #s(literal 1/2 binary64) (*.f64 a (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64)))))","(/.f64 #s(literal 1/2 binary64) (*.f64 (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64))) a))","(/.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (*.f64 a #s(literal 2 binary64)))","(/.f64 #s(literal -1/2 binary64) (*.f64 (neg.f64 a) (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64)))))","(/.f64 #s(literal -1/2 binary64) (*.f64 (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64))) (neg.f64 a)))","(/.f64 #s(literal 1 binary64) (/.f64 b (/.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64))) a)))","(/.f64 #s(literal 1 binary64) (/.f64 a (*.f64 #s(literal 1/2 binary64) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 b a) (*.f64 #s(literal 1/2 binary64) (pow.f64 (+.f64 b a) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (*.f64 (*.f64 a #s(literal 2 binary64)) (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 b (pow.f64 (+.f64 b a) #s(literal 2 binary64))) (*.f64 a #s(literal 2 binary64))))","(*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 (+.f64 a a) eps))) (+.f64 (pow.f64 (exp.f64 a) eps) #s(literal 1 binary64)))","(*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps (*.f64 a #s(literal 3 binary64))))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 a) eps) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 a) eps)))","(*.f64 (pow.f64 (pow.f64 (exp.f64 a) eps) #s(literal 1/2 binary64)) (/.f64 (pow.f64 (pow.f64 (exp.f64 a) eps) #s(literal 1/2 binary64)) (expm1.f64 (*.f64 a eps))))","(*.f64 (pow.f64 (pow.f64 (exp.f64 a) eps) #s(literal 1/2 binary64)) (*.f64 (pow.f64 (pow.f64 (exp.f64 a) eps) #s(literal 1/2 binary64)) (pow.f64 (expm1.f64 (*.f64 a eps)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (expm1.f64 (*.f64 a eps)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (exp.f64 eps) (neg.f64 a)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 a eps)) #s(literal -1 binary64)) (pow.f64 (exp.f64 a) eps))","(*.f64 (neg.f64 (pow.f64 (exp.f64 a) eps)) (pow.f64 (neg.f64 (expm1.f64 (*.f64 a eps))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (exp.f64 a) eps) (pow.f64 (expm1.f64 (*.f64 a eps)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))))","(pow.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (pow.f64 (exp.f64 a) eps))) (neg.f64 (neg.f64 (expm1.f64 (*.f64 a eps)))))","(/.f64 (neg.f64 (pow.f64 (exp.f64 a) eps)) (neg.f64 (expm1.f64 (*.f64 a eps))))","(/.f64 #s(literal -1 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a)))))","(/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a))))","(neg.f64 (/.f64 (neg.f64 (pow.f64 (exp.f64 a) eps)) (expm1.f64 (*.f64 a eps))))","(neg.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (neg.f64 (expm1.f64 (*.f64 a eps)))))","(exp.f64 (*.f64 (log.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 eps) (neg.f64 a)))) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))) eps)","(*.f64 eps (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 4 binary64))) eps) (+.f64 (pow.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) eps) (+.f64 b a)) #s(literal 1 binary64)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 6 binary64))) eps) (+.f64 (+.f64 (pow.f64 (exp.f64 (+.f64 b a)) (*.f64 eps #s(literal 4 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) eps) (+.f64 b a))))","(/.f64 (*.f64 eps (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 4 binary64)))) (+.f64 (pow.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) eps) (+.f64 b a)) #s(literal 1 binary64)))","(/.f64 (*.f64 eps (expm1.f64 (*.f64 (*.f64 (+.f64 b a) eps) #s(literal 6 binary64)))) (+.f64 (+.f64 (pow.f64 (exp.f64 (+.f64 b a)) (*.f64 eps #s(literal 4 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) eps) (+.f64 b a))))","(fma.f64 (pow.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) eps) (+.f64 b a)) eps (*.f64 #s(literal -1 binary64) eps))","(fma.f64 eps (pow.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) eps) (+.f64 b a)) (*.f64 eps #s(literal -1 binary64)))","(+.f64 (*.f64 (pow.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) eps) (+.f64 b a)) eps) (*.f64 #s(literal -1 binary64) eps))","(+.f64 (*.f64 eps (pow.f64 (pow.f64 (exp.f64 #s(literal 2 binary64)) eps) (+.f64 b a))) (*.f64 eps #s(literal -1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":258.751953125,"type":"rewrite"},{"compiler":[[62484,4979]],"memory":[[8692400,97832272]],"time":168.574951171875,"type":"eval"},{"alts":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (+.f64 b a) (*.f64 b a)))","next",25.000744128617008,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a))","fresh",29.25755027928136,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64))) a))","fresh",0.15234375,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b))","next",37.43616408026957,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64))) b))","next",0.10546875,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","next",29.163799465689642,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","done",37.38168893579878,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (*.f64 #s(literal 0 binary64) eps)))","next",62.671268414817355,"binary64"]],"compiler":[[32,21],[36,23],[38,25],[50,32],[52,34],[28,20],[28,20],[72,42],[32,21],[36,23],[38,25],[50,32],[52,34],[28,20],[72,42]],"count":[[1043,8]],"kept":[{"done":[0,0],"fresh":[3,1],"new":[1035,6],"picked":[5,1]}],"memory":[[1775264,44121504]],"min-error":[[0.0,"binary64"]],"time":26.4560546875,"type":"prune"},{"egraph":[[0,8424,300,0.09023693],[5,7622,348,0.015858765],[4,5734,372,0.016782305],[3,1467,392,0.016931508],[2,368,412,0.004214858],[1,155,416,0.001159032],[0,74,416,0.000691789],[0,66,422,0.000333401]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64))) b))","(/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64))) b)","#s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64)))","(+.f64 (/.f64 b a) #s(literal 1 binary64))","(/.f64 b a)","b","a","#s(literal 1 binary64)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (*.f64 #s(literal 0 binary64) eps)))","#s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (*.f64 #s(literal 0 binary64) eps))","(*.f64 #s(literal 0 binary64) eps)","#s(literal 0 binary64)","eps","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","(/.f64 #s(literal 1 binary64) b)","#s(literal 1 binary64)","b","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (+.f64 b a) (*.f64 b a)))","(/.f64 (+.f64 b a) (*.f64 b a))","(+.f64 b a)","b","a","(*.f64 b a)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b))","(/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b)","#s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a))","(/.f64 b a)","b","a"]],"locations":[["(/.f64 b a)","cost-diff",0],["#s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a))","cost-diff",0],["(/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b)","cost-diff",0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b))","cost-diff",0],["(*.f64 b a)","cost-diff",0],["(+.f64 b a)","cost-diff",0],["(/.f64 (+.f64 b a) (*.f64 b a))","cost-diff",0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (+.f64 b a) (*.f64 b a)))","cost-diff",0],["(/.f64 #s(literal 1 binary64) b)","cost-diff",0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","cost-diff",0],["#s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (*.f64 #s(literal 0 binary64) eps))","cost-diff",0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (*.f64 #s(literal 0 binary64) eps)))","cost-diff",0],["(*.f64 #s(literal 0 binary64) eps)","cost-diff",2],["(+.f64 (/.f64 b a) #s(literal 1 binary64))","cost-diff",0],["#s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64)))","cost-diff",0],["(/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64))) b)","cost-diff",0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64))) b))","cost-diff",0]],"memory":[[-14870848,42661360]],"method":["egg-herbie"],"outputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64))) b))","(/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64))) b)","#s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64)))","(+.f64 (/.f64 b a) #s(literal 1 binary64))","(/.f64 b a)","b","a","#s(literal 1 binary64)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (*.f64 #s(literal 0 binary64) eps)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(literal 0 binary64)))","#s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (*.f64 #s(literal 0 binary64) eps))","#s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(literal 0 binary64))","(*.f64 #s(literal 0 binary64) eps)","#s(literal 0 binary64)","#s(literal 0 binary64)","eps","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","(/.f64 #s(literal 1 binary64) b)","#s(literal 1 binary64)","b","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (+.f64 b a) (*.f64 b a)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) a) b))","(/.f64 (+.f64 b a) (*.f64 b a))","(/.f64 (/.f64 (+.f64 b a) a) b)","(+.f64 b a)","b","a","(*.f64 b a)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b))","(/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b)","#s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a))","(/.f64 b a)","b","a"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":279.847900390625,"type":"simplify"},{"compiler":[[286,51]],"locations":[["(/.f64 b a)","accuracy",0.0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b))","accuracy",0.0],["(/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b)","accuracy",0.10546875],["#s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a))","accuracy",37.16869248210563],["(+.f64 b a)","accuracy",0.0],["(*.f64 b a)","accuracy",0.0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (+.f64 b a) (*.f64 b a)))","accuracy",0.0],["(/.f64 (+.f64 b a) (*.f64 b a))","accuracy",25.000744128617008],["(/.f64 #s(literal 1 binary64) b)","accuracy",0.0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","accuracy",29.163799465689642],["(*.f64 #s(literal 0 binary64) eps)","accuracy",0.0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (*.f64 #s(literal 0 binary64) eps)))","accuracy",0.0],["#s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (*.f64 #s(literal 0 binary64) eps))","accuracy",62.671268414817355],["(+.f64 (/.f64 b a) #s(literal 1 binary64))","accuracy",0.0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64))) b))","accuracy",0.0],["#s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64)))","accuracy",0.0],["(/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64))) b)","accuracy",0.10546875]],"memory":[[7280320,38978256]],"mixsample":[[17.848876953125,"ival-div",0],[10.474609375,"ival-add",0],[3.26171875,"ival-exp",0],[26.215576171875,"ival-mult",0],[6.029052734375,"ival-expm1",0],[0.112060546875,"ival-assert",0],[0.23974609375,"ival-true",0],[0.5673828125,"exact",0],[2.657470703125,"ival-pow2",0],[8.129638671875,"ival-pow",0]],"outcomes":[[94.996337890625,0,"valid",256]],"time":120.590087890625,"type":"localize"},{"count":[[17,65]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64))) b))","(/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64))) b)","#s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64)))","(+.f64 (/.f64 b a) #s(literal 1 binary64))","(*.f64 #s(literal 0 binary64) eps)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (*.f64 #s(literal 0 binary64) eps)))","#s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (*.f64 #s(literal 0 binary64) eps))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","(/.f64 #s(literal 1 binary64) b)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (+.f64 b a) (*.f64 b a)))","(/.f64 (+.f64 b a) (*.f64 b a))","(+.f64 b a)","(*.f64 b a)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b))","(/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b)","#s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a))","(/.f64 b a)"]],"memory":[[-725392,33006432]],"outputs":[["(/ 1 a)","(/ (+ 1 (* a (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (* a (- (* 1/6 (/ (* (pow eps 3) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/ (+ 1 (/ a b)) a)","(/ (+ 1 (* a (+ (* a (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))) (/ 1 b)))) a)","(/ (+ 1 (* a (+ (* a (+ (* a (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))) (/ 1 b)))) a)","(/ b a)","(/ (+ a b) a)","(/ (+ b (* a (+ 1 (* a (* b (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))))) a)","(/ (+ b (* a (+ 1 (* a (+ (* a (* b (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))))))) (* b (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) a)","(/ (+ 1 (* eps (+ (* -1/2 b) (* 1/2 b)))) a)","(/ (+ 1 (+ (* eps (+ (* -1/2 b) (* 1/2 b))) (/ a b))) a)","b","(+ a b)","(* a b)","(/ (* eps (- (exp (* eps (+ a b))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/ (+ 1 (* b (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)))) b)","(+ 1 (* b (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))))","1","(+ 1 (/ b a))","(/ 1 b)","(+ (/ 1 a) (+ (/ 1 b) (/ (* eps (+ (* -1/2 b) (* 1/2 b))) a)))","(+ (/ 1 a) (/ 1 b))","a","(* a (+ 1 (/ b a)))","(/ (* eps (- (exp (* eps (- b (* -1 a)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(+ (* -1 (/ (- (* eps (+ (* -1/2 b) (* 1/2 b))) 1) a)) (/ 1 b))","(* -1 (* a (- (* -1 (/ b a)) 1)))","(/ (+ 1 (* b (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (* b (- (* 1/6 (/ (* (pow eps 3) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/ (+ 1 (* eps (+ (* -1/2 a) (* 1/2 a)))) b)","(/ (+ 1 (+ (* eps (+ (* -1/2 a) (* 1/2 a))) (/ b a))) b)","(/ (+ 1 (/ b a)) b)","(* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))","(+ (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 b))","(* b (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)))","(* b (+ (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 b)))","(* b (+ (/ 1 a) (/ 1 b)))","(+ (/ 1 a) (+ (/ 1 b) (/ (* eps (+ (* -1/2 a) (* 1/2 a))) b)))","(* b (+ 1 (/ a b)))","(/ (* eps (- (exp (* eps (- a (* -1 b)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(* -1 (* b (- (* -1 (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))) (/ 1 b))))","(+ (* -1 (/ (- (* eps (+ (* -1/2 a) (* 1/2 a))) 1) b)) (/ 1 a))","(* -1 (* b (- (* -1 (/ a b)) 1)))","(/ (+ a b) (* a b))","(+ (* eps (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (+ (* 1/6 (/ (pow (+ a b) 3) (* a b))) (* eps (- (* 1/24 (/ (pow (+ a b) 4) (* a b))) (+ (/ (* (+ a b) (+ (* 1/24 (* a (pow b 4))) (+ (* 1/24 (* (pow a 4) b)) (+ (* 1/12 (* (pow a 2) (pow b 3))) (* 1/12 (* (pow a 3) (pow b 2))))))) (* (pow a 2) (pow b 2))) (+ (/ (* (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2))))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b))))) (* a b))))))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* (pow eps 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))) (+ (/ 1 a) (/ 1 b)))","(+ (* (pow eps 2) (- (+ (* 1/2 a) (* eps (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))) (+ (/ 1 a) (/ 1 b)))","(+ (* (pow eps 2) (- (+ (* 1/2 a) (* eps (- (+ (* 1/6 (pow a 2)) (* eps (- (* 1/24 (pow a 3)) (+ (* 1/120 (pow a 3)) (+ (* 1/48 (pow a 3)) (+ (* 1/6 (* (pow a 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (* 1/2 (* a (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))))))))) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))) (+ (/ 1 a) (/ 1 b)))","(+ 1 (+ (* b (* (pow eps 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (/ b a)))","(+ 1 (+ (* (pow eps 2) (+ (* b (* eps (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (* b (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))) (/ b a)))","(+ 1 (+ (* (pow eps 2) (+ (* b (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))) (* eps (+ (* b (* eps (- (* 1/24 (pow a 3)) (+ (* 1/120 (pow a 3)) (+ (* 1/48 (pow a 3)) (+ (* 1/6 (* (pow a 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (* 1/2 (* a (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))))))))) (* b (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))))))))))) (/ b a)))","0","(+ (* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b))))) (+ (/ 1 a) (/ 1 b)))","(* eps (- (+ (/ 1 (* b eps)) (/ (exp (* a eps)) (- (exp (* a eps)) 1))) 1/2))","(* eps (+ (* b (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 eps)))","(* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b)))))","(* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (+ (/ 1 (* a eps)) (/ 1 (* b eps))))))","(* -1 (* eps (- (* -1 (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 (* b eps)))))","(* -1 (* eps (- (* -1 (* b (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))) (/ 1 eps))))","(* -1 (* eps (+ (* -1 (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b))))) (* -1 (/ (+ (/ 1 a) (/ 1 b)) eps)))))"]],"series":[[2.81298828125,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+ (/ b a) 1) (* 0 eps) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 b) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ b a) (* b a)) (+ b a) (* b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/ b a))","eps","-inf"],[2.2939453125,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+ (/ b a) 1) (* 0 eps) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 b) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ b a) (* b a)) (+ b a) (* b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/ b a))","eps","inf"],[2.7958984375,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+ (/ b a) 1) (* 0 eps) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 b) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ b a) (* b a)) (+ b a) (* b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/ b a))","eps","0"],[7.3330078125,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+ (/ b a) 1) (* 0 eps) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 b) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ b a) (* b a)) (+ b a) (* b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/ b a))","b","-inf"],[5.718994140625,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+ (/ b a) 1) (* 0 eps) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 b) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ b a) (* b a)) (+ b a) (* b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/ b a))","b","inf"],[4.64404296875,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+ (/ b a) 1) (* 0 eps) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 b) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ b a) (* b a)) (+ b a) (* b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/ b a))","b","0"],[11.376953125,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+ (/ b a) 1) (* 0 eps) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 b) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ b a) (* b a)) (+ b a) (* b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/ b a))","a","-inf"],[12.508056640625,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+ (/ b a) 1) (* 0 eps) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 b) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ b a) (* b a)) (+ b a) (* b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/ b a))","a","inf"],[2.52490234375,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+ (/ b a) 1) (* 0 eps) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ 1 b) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ b a) (* b a)) (+ b a) (* b a) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) b) (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/ b a))","a","0"]],"time":55.1669921875,"type":"series"},{"count":[[65,63]],"egraph":[[0,8289,1617,0.090424487],[2,4026,1794,0.026144646],[1,1153,1990,0.013706442],[0,388,2209,0.003625469]],"inputs":[["(/ 1 a)","(/ (+ 1 (* a (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (* a (- (* 1/6 (/ (* (pow eps 3) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/ (+ 1 (/ a b)) a)","(/ (+ 1 (* a (+ (* a (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))) (/ 1 b)))) a)","(/ (+ 1 (* a (+ (* a (+ (* a (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))) (/ 1 b)))) a)","(/ b a)","(/ (+ a b) a)","(/ (+ b (* a (+ 1 (* a (* b (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))))) a)","(/ (+ b (* a (+ 1 (* a (+ (* a (* b (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))))))) (* b (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) a)","(/ (+ 1 (* eps (+ (* -1/2 b) (* 1/2 b)))) a)","(/ (+ 1 (+ (* eps (+ (* -1/2 b) (* 1/2 b))) (/ a b))) a)","b","(+ a b)","(* a b)","(/ (* eps (- (exp (* eps (+ a b))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/ (+ 1 (* b (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)))) b)","(+ 1 (* b (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))))","1","(+ 1 (/ b a))","(/ 1 b)","(+ (/ 1 a) (+ (/ 1 b) (/ (* eps (+ (* -1/2 b) (* 1/2 b))) a)))","(+ (/ 1 a) (/ 1 b))","a","(* a (+ 1 (/ b a)))","(/ (* eps (- (exp (* eps (- b (* -1 a)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(+ (* -1 (/ (- (* eps (+ (* -1/2 b) (* 1/2 b))) 1) a)) (/ 1 b))","(* -1 (* a (- (* -1 (/ b a)) 1)))","(/ (+ 1 (* b (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (* b (- (* 1/6 (/ (* (pow eps 3) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/ (+ 1 (* eps (+ (* -1/2 a) (* 1/2 a)))) b)","(/ (+ 1 (+ (* eps (+ (* -1/2 a) (* 1/2 a))) (/ b a))) b)","(/ (+ 1 (/ b a)) b)","(* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))","(+ (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 b))","(* b (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)))","(* b (+ (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 b)))","(* b (+ (/ 1 a) (/ 1 b)))","(+ (/ 1 a) (+ (/ 1 b) (/ (* eps (+ (* -1/2 a) (* 1/2 a))) b)))","(* b (+ 1 (/ a b)))","(/ (* eps (- (exp (* eps (- a (* -1 b)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(* -1 (* b (- (* -1 (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))) (/ 1 b))))","(+ (* -1 (/ (- (* eps (+ (* -1/2 a) (* 1/2 a))) 1) b)) (/ 1 a))","(* -1 (* b (- (* -1 (/ a b)) 1)))","(/ (+ a b) (* a b))","(+ (* eps (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (+ (* 1/6 (/ (pow (+ a b) 3) (* a b))) (* eps (- (* 1/24 (/ (pow (+ a b) 4) (* a b))) (+ (/ (* (+ a b) (+ (* 1/24 (* a (pow b 4))) (+ (* 1/24 (* (pow a 4) b)) (+ (* 1/12 (* (pow a 2) (pow b 3))) (* 1/12 (* (pow a 3) (pow b 2))))))) (* (pow a 2) (pow b 2))) (+ (/ (* (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2))))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b))))) (* a b))))))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* (pow eps 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))) (+ (/ 1 a) (/ 1 b)))","(+ (* (pow eps 2) (- (+ (* 1/2 a) (* eps (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))) (+ (/ 1 a) (/ 1 b)))","(+ (* (pow eps 2) (- (+ (* 1/2 a) (* eps (- (+ (* 1/6 (pow a 2)) (* eps (- (* 1/24 (pow a 3)) (+ (* 1/120 (pow a 3)) (+ (* 1/48 (pow a 3)) (+ (* 1/6 (* (pow a 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (* 1/2 (* a (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))))))))) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))) (+ (/ 1 a) (/ 1 b)))","(+ 1 (+ (* b (* (pow eps 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (/ b a)))","(+ 1 (+ (* (pow eps 2) (+ (* b (* eps (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (* b (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))) (/ b a)))","(+ 1 (+ (* (pow eps 2) (+ (* b (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))) (* eps (+ (* b (* eps (- (* 1/24 (pow a 3)) (+ (* 1/120 (pow a 3)) (+ (* 1/48 (pow a 3)) (+ (* 1/6 (* (pow a 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (* 1/2 (* a (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))))))))) (* b (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))))))))))) (/ b a)))","0","(+ (* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b))))) (+ (/ 1 a) (/ 1 b)))","(* eps (- (+ (/ 1 (* b eps)) (/ (exp (* a eps)) (- (exp (* a eps)) 1))) 1/2))","(* eps (+ (* b (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 eps)))","(* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b)))))","(* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (+ (/ 1 (* a eps)) (/ 1 (* b eps))))))","(* -1 (* eps (- (* -1 (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 (* b eps)))))","(* -1 (* eps (- (* -1 (* b (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))) (/ 1 eps))))","(* -1 (* eps (+ (* -1 (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b))))) (* -1 (/ (+ (/ 1 a) (/ 1 b)) eps)))))"]],"memory":[[4390480,43972224]],"method":["egg-herbie"],"outputs":[["(/ 1 a)","(/.f64 #s(literal 1 binary64) a)","(/ (+ 1 (* a (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) a)","(/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))))) a #s(literal 1 binary64)) a)","(/ (+ 1 (* a (- (+ (* a (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))))))) a (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps)))))) a #s(literal 1 binary64)) a)","(/ (+ 1 (* a (- (+ (* a (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (* a (- (* 1/6 (/ (* (pow eps 3) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/6 binary64)) #s(literal 1/24 binary64)) (neg.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps)))))) (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))))))) eps) #s(literal 1/2 binary64))))) a (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps)))))))) a (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps)))))) a #s(literal 1 binary64)) a)","(/ (+ 1 (/ a b)) a)","(/.f64 (-.f64 (/.f64 a b) #s(literal -1 binary64)) a)","(/ (+ 1 (* a (+ (* a (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))) (/ 1 b)))) a)","(/.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 eps eps)) a (/.f64 #s(literal 1 binary64) b)) a #s(literal 1 binary64)) a)","(/ (+ 1 (* a (+ (* a (+ (* a (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))) (/ 1 b)))) a)","(/.f64 (fma.f64 (fma.f64 (*.f64 eps (fma.f64 a (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps (*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 eps eps)) #s(literal -1/2 binary64))) (*.f64 #s(literal 1/12 binary64) eps))) a (/.f64 #s(literal 1 binary64) b)) a #s(literal 1 binary64)) a)","(/ b a)","(/.f64 b a)","(/ (+ a b) a)","(/.f64 (+.f64 b a) a)","(/ (+ b (* a (+ 1 (* a (* b (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))))) a)","(/.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 eps eps)) b) a #s(literal 1 binary64)) a b) a)","(/ (+ b (* a (+ 1 (* a (+ (* a (* b (* eps (- (* 1/6 (pow eps 2)) (+ (* 1/24 (pow eps 2)) (+ (* 1/12 (pow eps 2)) (* 1/2 (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps))))))))))) (* b (* eps (- (* 1/2 eps) (+ (* 1/6 eps) (* 1/4 eps)))))))))) a)","(/.f64 (fma.f64 (fma.f64 (*.f64 b a) (*.f64 eps (fma.f64 a (fma.f64 (*.f64 #s(literal 1/24 binary64) eps) eps (*.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 eps eps)) #s(literal -1/2 binary64))) (*.f64 #s(literal 1/12 binary64) eps))) #s(literal 1 binary64)) a b) a)","(/ (+ 1 (* eps (+ (* -1/2 b) (* 1/2 b)))) a)","(/.f64 #s(literal 1 binary64) a)","(/ (+ 1 (+ (* eps (+ (* -1/2 b) (* 1/2 b))) (/ a b))) a)","(/.f64 (-.f64 (/.f64 a b) #s(literal -1 binary64)) a)","b","(+ a b)","(+.f64 b a)","(* a b)","(*.f64 b a)","(/ (* eps (- (exp (* eps (+ a b))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps) (*.f64 (expm1.f64 (*.f64 b eps)) (expm1.f64 (*.f64 a eps))))","(/ (+ 1 (* b (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)))) b)","(/.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps) b #s(literal 1 binary64)) b)","(+ 1 (* b (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))))","(fma.f64 (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps) b #s(literal 1 binary64))","1","#s(literal 1 binary64)","(+ 1 (/ b a))","(-.f64 (/.f64 b a) #s(literal -1 binary64))","(/ 1 b)","(/.f64 #s(literal 1 binary64) b)","(+ (/ 1 a) (+ (/ 1 b) (/ (* eps (+ (* -1/2 b) (* 1/2 b))) a)))","(-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b))","(+ (/ 1 a) (/ 1 b))","(-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b))","a","(* a (+ 1 (/ b a)))","(fma.f64 (/.f64 b a) a a)","(/ (* eps (- (exp (* eps (- b (* -1 a)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps) (*.f64 (expm1.f64 (*.f64 b eps)) (expm1.f64 (*.f64 a eps))))","(+ (* -1 (/ (- (* eps (+ (* -1/2 b) (* 1/2 b))) 1) a)) (/ 1 b))","(-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b))","(* -1 (* a (- (* -1 (/ b a)) 1)))","(fma.f64 (/.f64 b a) a a)","(/ (+ 1 (* b (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) b)","(/.f64 (fma.f64 (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps) b #s(literal 1 binary64)) b)","(/ (+ 1 (* b (- (+ (* b (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps))) b (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps)) b #s(literal 1 binary64)) b)","(/ (+ 1 (* b (- (+ (* b (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (* b (- (* 1/6 (/ (* (pow eps 3) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/6 binary64)) #s(literal 1/24 binary64)) (neg.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps)) (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps))) eps) #s(literal 1/2 binary64))))) b (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps)))) b (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps)) b #s(literal 1 binary64)) b)","(/ (+ 1 (* eps (+ (* -1/2 a) (* 1/2 a)))) b)","(/.f64 #s(literal 1 binary64) b)","(/ (+ 1 (+ (* eps (+ (* -1/2 a) (* 1/2 a))) (/ b a))) b)","(/.f64 (-.f64 (/.f64 b a) #s(literal -1 binary64)) b)","(/ (+ 1 (/ b a)) b)","(/.f64 (-.f64 (/.f64 b a) #s(literal -1 binary64)) b)","(* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))","(*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps)","(+ (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 b))","(fma.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps (/.f64 #s(literal 1 binary64) b))","(* b (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)))","(*.f64 (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps) b)","(* b (+ (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 b)))","(fma.f64 (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps) b #s(literal 1 binary64))","(* b (+ (/ 1 a) (/ 1 b)))","(-.f64 (/.f64 b a) #s(literal -1 binary64))","(+ (/ 1 a) (+ (/ 1 b) (/ (* eps (+ (* -1/2 a) (* 1/2 a))) b)))","(-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b))","(* b (+ 1 (/ a b)))","(fma.f64 (/.f64 a b) b b)","(/ (* eps (- (exp (* eps (- a (* -1 b)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps) (*.f64 (expm1.f64 (*.f64 b eps)) (expm1.f64 (*.f64 a eps))))","(* -1 (* b (- (* -1 (* eps (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))) (/ 1 b))))","(fma.f64 (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps) b #s(literal 1 binary64))","(+ (* -1 (/ (- (* eps (+ (* -1/2 a) (* 1/2 a))) 1) b)) (/ 1 a))","(-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b))","(* -1 (* b (- (* -1 (/ a b)) 1)))","(fma.f64 (/.f64 a b) b b)","(/ (+ a b) (* a b))","(/.f64 (/.f64 (+.f64 b a) a) b)","(+ (* eps (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 a a) b) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 a a) b) b)) (fma.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/6 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) a)) (fma.f64 (/.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 b #s(literal 3 binary64))) a (*.f64 b (fma.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) a) a) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) a) b) (/.f64 (/.f64 (+.f64 b a) a) b) (*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 a a) b) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) b))))) eps (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a)))) eps (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (+ (* 1/6 (/ (pow (+ a b) 3) (* a b))) (* eps (- (* 1/24 (/ (pow (+ a b) 4) (* a b))) (+ (/ (* (+ a b) (+ (* 1/24 (* a (pow b 4))) (+ (* 1/24 (* (pow a 4) b)) (+ (* 1/12 (* (pow a 2) (pow b 3))) (* 1/12 (* (pow a 3) (pow b 2))))))) (* (pow a 2) (pow b 2))) (+ (/ (* (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2))))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b))))) (* a b))))))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/24 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 4 binary64)) a)) (fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 (*.f64 a a) b) b) (+.f64 b a)) #s(literal 1/12 binary64) (*.f64 #s(literal 1/24 binary64) (fma.f64 (pow.f64 a #s(literal 4 binary64)) b (*.f64 (pow.f64 b #s(literal 4 binary64)) a)))) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 a a) b) b)) (fma.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/6 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) a)) (fma.f64 (/.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 b #s(literal 3 binary64))) a (*.f64 b (fma.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) a) a) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) a) b) (/.f64 (/.f64 (+.f64 b a) a) b) (*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 a a) b) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) b))))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) b)) (*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 a a) b) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 b #s(literal 3 binary64))) a (*.f64 b (fma.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) a) a) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) (*.f64 b a)))))) eps (-.f64 (*.f64 (/.f64 #s(literal 1/6 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) a)) (fma.f64 (/.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 b #s(literal 3 binary64))) a (*.f64 b (fma.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) a) a) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) a) b) (/.f64 (/.f64 (+.f64 b a) a) b) (*.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 a a) b) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) (*.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) b)))))) eps (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 a a) b) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a)))) eps (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b)))","(+ (* (pow eps 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) eps) eps (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b)))","(+ (* (pow eps 2) (- (+ (* 1/2 a) (* eps (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) a (*.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) a) #s(literal -1/2 binary64))) eps (*.f64 a #s(literal 1/12 binary64))) (*.f64 eps eps) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b)))","(+ (* (pow eps 2) (- (+ (* 1/2 a) (* eps (- (+ (* 1/6 (pow a 2)) (* eps (- (* 1/24 (pow a 3)) (+ (* 1/120 (pow a 3)) (+ (* 1/48 (pow a 3)) (+ (* 1/6 (* (pow a 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (* 1/2 (* a (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))))))))) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (+ (* 1/6 a) (* 1/4 a)))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/80 binary64)) (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/12 binary64)) #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) a (*.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) a) #s(literal -1/2 binary64))) a) #s(literal 1/2 binary64)))) eps (fma.f64 (*.f64 #s(literal 1/24 binary64) a) a (*.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) a) #s(literal -1/2 binary64)))) eps (*.f64 a #s(literal 1/12 binary64))) (*.f64 eps eps) (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b)))","(+ 1 (+ (* b (* (pow eps 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (/ b a)))","(fma.f64 b (fma.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) eps) eps (/.f64 #s(literal 1 binary64) a)) #s(literal 1 binary64))","(+ 1 (+ (* (pow eps 2) (+ (* b (* eps (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))) (* b (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))) (/ b a)))","(fma.f64 b (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) a (*.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) a) #s(literal -1/2 binary64))) eps (*.f64 a #s(literal 1/12 binary64))) (*.f64 eps eps) (/.f64 #s(literal 1 binary64) a)) #s(literal 1 binary64))","(+ 1 (+ (* (pow eps 2) (+ (* b (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))) (* eps (+ (* b (* eps (- (* 1/24 (pow a 3)) (+ (* 1/120 (pow a 3)) (+ (* 1/48 (pow a 3)) (+ (* 1/6 (* (pow a 2) (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))) (* 1/2 (* a (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a)))))))))))))))) (* b (- (* 1/6 (pow a 2)) (+ (* 1/24 (pow a 2)) (+ (* 1/12 (pow a 2)) (* 1/2 (* a (- (* 1/2 a) (+ (* 1/6 a) (* 1/4 a))))))))))))) (/ b a)))","(fma.f64 (*.f64 b (fma.f64 (fma.f64 (-.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/80 binary64)) (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/12 binary64)) #s(literal 1/6 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) a) a (*.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) a) #s(literal -1/2 binary64))) a) #s(literal 1/2 binary64)))) eps (fma.f64 (*.f64 #s(literal 1/24 binary64) a) a (*.f64 (*.f64 (*.f64 a #s(literal 1/12 binary64)) a) #s(literal -1/2 binary64)))) eps (*.f64 a #s(literal 1/12 binary64)))) (*.f64 eps eps) (-.f64 (/.f64 b a) #s(literal -1 binary64)))","0","#s(literal 0 binary64)","(+ (* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b))))) (+ (/ 1 a) (/ 1 b)))","(-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b))","(* eps (- (+ (/ 1 (* b eps)) (/ (exp (* a eps)) (- (exp (* a eps)) 1))) 1/2))","(*.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) (-.f64 (/.f64 (/.f64 #s(literal 1 binary64) b) eps) #s(literal 1/2 binary64))) eps)","(* eps (+ (* b (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 eps)))","(fma.f64 (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps) b #s(literal 1 binary64))","(* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b)))))","#s(literal 0 binary64)","(* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (+ (/ 1 (* a eps)) (/ 1 (* b eps))))))","(*.f64 (+.f64 (/.f64 (/.f64 #s(literal 1 binary64) eps) a) (/.f64 (/.f64 #s(literal 1 binary64) b) eps)) eps)","(* -1 (* eps (- (* -1 (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2)) (/ 1 (* b eps)))))","(*.f64 (+.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) (-.f64 (/.f64 (/.f64 #s(literal 1 binary64) b) eps) #s(literal 1/2 binary64))) eps)","(* -1 (* eps (- (* -1 (* b (- (/ (exp (* a eps)) (- (exp (* a eps)) 1)) 1/2))) (/ 1 eps))))","(fma.f64 (*.f64 (-.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) eps) b #s(literal 1 binary64))","(* -1 (* eps (+ (* -1 (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b))))) (* -1 (/ (+ (/ 1 a) (/ 1 b)) eps)))))","(*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b)) eps) eps)"]],"stop":[["iter limit",1],["node limit",1]],"time":237.846923828125,"type":"simplify"},{"count":[[17,274]],"egraph":[[0,8629,340,0.068565248],[2,3293,386,0.036418144],[1,374,398,0.009386006],[0,74,402,0.002130375],[0,66,408,0.000367269]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64))) b))","(/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64))) b)","#s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64)))","(+.f64 (/.f64 b a) #s(literal 1 binary64))","(*.f64 #s(literal 0 binary64) eps)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (*.f64 #s(literal 0 binary64) eps)))","#s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (*.f64 #s(literal 0 binary64) eps))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","(/.f64 #s(literal 1 binary64) b)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (+.f64 b a) (*.f64 b a)))","(/.f64 (+.f64 b a) (*.f64 b a))","(+.f64 b a)","(*.f64 b a)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b))","(/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b)","#s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a))","(/.f64 b a)"]],"memory":[[-1187248,46297856]],"outputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64))) b))","(*.f64 (*.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (neg.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64)))) (/.f64 #s(literal -1 binary64) b))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 b #s(literal -1 binary64)) #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64))))","(*.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64))) (pow.f64 b #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64))) b))","(pow.f64 (/.f64 (/.f64 b #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 b #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64))) #s(literal -1 binary64))) (neg.f64 (neg.f64 b)))","(/.f64 (neg.f64 (*.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64))) #s(literal 1 binary64))) (neg.f64 b))","(/.f64 (neg.f64 (neg.f64 (neg.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64)))))) (neg.f64 (neg.f64 (neg.f64 b))))","(/.f64 (*.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 b))","(/.f64 (*.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64))) #s(literal 1 binary64)) b)","(/.f64 (neg.f64 (neg.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64))))) (neg.f64 (neg.f64 b)))","(/.f64 (neg.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64)))) (neg.f64 b))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 b #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64)))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64))))))","(/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64))) b)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 b #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 b #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64)))))","(neg.f64 (/.f64 (neg.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64)))) b))","(neg.f64 (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64))) (neg.f64 b)))","(exp.f64 (*.f64 (log.f64 (/.f64 b #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64))))) #s(literal -1 binary64)))","#s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 (/.f64 b a) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (/.f64 b a) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (/.f64 b a) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (/.f64 b a) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 b a)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (/.f64 b a) #s(literal 1 binary64)) (-.f64 (pow.f64 (/.f64 b a) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (+.f64 (pow.f64 (/.f64 b a) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 b a)) (+.f64 (pow.f64 (/.f64 b a) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 b a) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (-.f64 (/.f64 b a) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (/.f64 b a) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (/.f64 b a) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 b a)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 b a) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (/.f64 b a))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 b a) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (/.f64 b a)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 b a) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 (/.f64 b a) #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (/.f64 b a) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 b (/.f64 b a)) b) a))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (/.f64 b a) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (/.f64 b a) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 b a))))","(/.f64 (-.f64 (pow.f64 (/.f64 b a) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 (/.f64 b a) #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 (/.f64 b a) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 b (/.f64 b a)) b) a)))","(/.f64 (+.f64 (pow.f64 (/.f64 b a) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (/.f64 b a) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 b a)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (/.f64 b a) #s(literal 1 binary64)) (-.f64 (pow.f64 (/.f64 b a) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (+.f64 (pow.f64 (/.f64 b a) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 b a)) (+.f64 (pow.f64 (/.f64 b a) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 b a) #s(literal 1 binary64)) (-.f64 (pow.f64 (/.f64 b a) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (/.f64 b a) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 b a)) (+.f64 (pow.f64 (/.f64 b a) #s(literal 3 binary64)) #s(literal 1 binary64))))","(fma.f64 (neg.f64 b) (/.f64 #s(literal -1 binary64) a) #s(literal 1 binary64))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) b #s(literal 1 binary64))","(fma.f64 (/.f64 b a) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (/.f64 b a) #s(literal 1 binary64))","(fma.f64 b (pow.f64 a #s(literal -1 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 (pow.f64 (/.f64 b a) #s(literal 2 binary64)) (-.f64 (/.f64 b a) #s(literal 1 binary64))) (pow.f64 (-.f64 (/.f64 b a) #s(literal 1 binary64)) #s(literal -1 binary64)))","(+.f64 (/.f64 b a) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (/.f64 b a))","#s(literal 0 binary64)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(literal 0 binary64)))","#s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(literal 0 binary64))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (pow.f64 b #s(literal -1/2 binary64)) (pow.f64 b #s(literal -1/2 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) b))","(*.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 b #s(literal -1 binary64)))","(pow.f64 (pow.f64 b #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (neg.f64 b)) #s(literal -1 binary64))","(pow.f64 (*.f64 b b) #s(literal -1/2 binary64))","(pow.f64 b #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (neg.f64 b))))","(/.f64 #s(literal -1 binary64) (neg.f64 b))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 b)))","(/.f64 #s(literal 1 binary64) b)","(neg.f64 (/.f64 #s(literal -1 binary64) b))","(exp.f64 (neg.f64 (log.f64 b)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) a) b))","(*.f64 (pow.f64 (/.f64 (*.f64 b a) (*.f64 (+.f64 b a) (-.f64 a b))) #s(literal -1 binary64)) (pow.f64 (-.f64 a b) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 b a) (*.f64 (+.f64 b a) (-.f64 b a))) #s(literal -1 binary64)) (pow.f64 (-.f64 b a) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 b a) (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 b a) (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b b (*.f64 a (-.f64 a b))) #s(literal -1 binary64)))","(*.f64 (/.f64 (+.f64 b a) b) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -2 binary64))) (pow.f64 (/.f64 (-.f64 a b) (*.f64 b a)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 b a) #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 b a) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 b a) #s(literal -1 binary64)) (+.f64 b a))","(*.f64 (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64))) (pow.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (pow.f64 b #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (+.f64 b a)) (pow.f64 (*.f64 (neg.f64 b) a) #s(literal -1 binary64)))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (pow.f64 (/.f64 a (+.f64 b a)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (+.f64 b a) b))","(*.f64 (+.f64 b a) (pow.f64 (*.f64 b a) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 (+.f64 b a) a) b))","(pow.f64 (/.f64 (/.f64 (-.f64 a b) (*.f64 b a)) (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (pow.f64 b #s(literal -2 binary64))) (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 a (/.f64 (+.f64 b a) b)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 b (/.f64 a (+.f64 b a))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 b (/.f64 a (+.f64 b a))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (+.f64 b a) a)) (neg.f64 b))","(/.f64 (neg.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 a b)) (pow.f64 (*.f64 b a) #s(literal -1 binary64)))) (neg.f64 (-.f64 a b)))","(/.f64 (neg.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) (pow.f64 (*.f64 b a) #s(literal -1 binary64)))) (neg.f64 (-.f64 b a)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (*.f64 b a) #s(literal -1 binary64)))) (neg.f64 (fma.f64 b (-.f64 b a) (*.f64 a a))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (*.f64 b a) #s(literal -1 binary64)))) (neg.f64 (fma.f64 b b (*.f64 a (-.f64 a b)))))","(/.f64 (neg.f64 (*.f64 (+.f64 b a) #s(literal 1 binary64))) (*.f64 (neg.f64 b) a))","(/.f64 (neg.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 b #s(literal -2 binary64)))) (neg.f64 (-.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 b #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -2 binary64))))) (neg.f64 (neg.f64 (/.f64 (-.f64 a b) (*.f64 b a)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64))))) (neg.f64 (neg.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (pow.f64 b #s(literal -2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (+.f64 b a) b))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (+.f64 b a)))) (neg.f64 (neg.f64 (*.f64 (neg.f64 b) a))))","(/.f64 (neg.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 a b)) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 a b) (*.f64 b a))))","(/.f64 (neg.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 b a) (*.f64 b a))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) (*.f64 b a))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b b (*.f64 a (-.f64 a b))) (*.f64 b a))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 a) (*.f64 (neg.f64 b) #s(literal -1 binary64)))) (neg.f64 (*.f64 (neg.f64 b) (neg.f64 a))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) a (*.f64 (neg.f64 b) #s(literal 1 binary64)))) (neg.f64 (*.f64 (neg.f64 b) a)))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 b #s(literal -1 binary64)))) (neg.f64 (*.f64 (neg.f64 b) a)))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 b) (*.f64 (neg.f64 a) #s(literal -1 binary64)))) (neg.f64 (*.f64 (neg.f64 a) (neg.f64 b))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) b (*.f64 (neg.f64 a) #s(literal 1 binary64)))) (neg.f64 (*.f64 (neg.f64 b) a)))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 b) (*.f64 a #s(literal -1 binary64)))) (neg.f64 (*.f64 (neg.f64 b) a)))","(/.f64 (/.f64 (+.f64 b a) a) b)","(/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 a b)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (-.f64 a b))","(/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (-.f64 b a))","(/.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (fma.f64 b (-.f64 b a) (*.f64 a a)))","(/.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (fma.f64 b b (*.f64 a (-.f64 a b))))","(/.f64 (*.f64 (+.f64 b a) #s(literal 1 binary64)) (*.f64 b a))","(/.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 b #s(literal -2 binary64))) (-.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 b #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 b a) (-.f64 a b))) (neg.f64 (*.f64 (*.f64 b a) (-.f64 a b))))","(/.f64 (neg.f64 (*.f64 (+.f64 b a) (-.f64 b a))) (neg.f64 (*.f64 (*.f64 b a) (-.f64 b a))))","(/.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 b a) (fma.f64 b (-.f64 b a) (*.f64 a a)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 b a) (fma.f64 b b (*.f64 a (-.f64 a b))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -2 binary64)))) (neg.f64 (/.f64 (-.f64 a b) (*.f64 b a))))","(/.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 a #s(literal -2 binary64)) (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64)))) (neg.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (pow.f64 b #s(literal -2 binary64)))))","(/.f64 (neg.f64 (/.f64 (+.f64 b a) b)) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 (+.f64 b a))) (neg.f64 (*.f64 (neg.f64 b) a)))","(/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 a b)) #s(literal 1 binary64)) (*.f64 (-.f64 a b) (*.f64 b a)))","(/.f64 (*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) #s(literal 1 binary64)) (*.f64 (-.f64 b a) (*.f64 b a)))","(/.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) (*.f64 b a)))","(/.f64 (*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b b (*.f64 a (-.f64 a b))) (*.f64 b a)))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 a) (*.f64 (neg.f64 b) #s(literal -1 binary64))) (*.f64 (neg.f64 b) (neg.f64 a)))","(/.f64 (fma.f64 #s(literal -1 binary64) a (*.f64 (neg.f64 b) #s(literal 1 binary64))) (*.f64 (neg.f64 b) a))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 a) (*.f64 b #s(literal -1 binary64))) (*.f64 (neg.f64 b) a))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 b) (*.f64 (neg.f64 a) #s(literal -1 binary64))) (*.f64 (neg.f64 a) (neg.f64 b)))","(/.f64 (fma.f64 #s(literal -1 binary64) b (*.f64 (neg.f64 a) #s(literal 1 binary64))) (*.f64 (neg.f64 b) a))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 b) (*.f64 a #s(literal -1 binary64))) (*.f64 (neg.f64 b) a))","(/.f64 (/.f64 (+.f64 b a) b) a)","(/.f64 (*.f64 (+.f64 b a) (-.f64 a b)) (*.f64 (*.f64 b a) (-.f64 a b)))","(/.f64 (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -2 binary64))) (/.f64 (-.f64 a b) (*.f64 b a)))","(/.f64 (*.f64 (+.f64 b a) (-.f64 b a)) (*.f64 (*.f64 b a) (-.f64 b a)))","(/.f64 (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64))) (+.f64 (pow.f64 a #s(literal -2 binary64)) (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64)))))","(/.f64 (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64))) (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (pow.f64 b #s(literal -2 binary64))))","(/.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 b a) (fma.f64 b (-.f64 b a) (*.f64 a a))))","(/.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (*.f64 (*.f64 b a) (fma.f64 b b (*.f64 a (-.f64 a b)))))","(/.f64 (neg.f64 (+.f64 b a)) (*.f64 (neg.f64 b) a))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (-.f64 a b) (*.f64 b a)) (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (pow.f64 b #s(literal -2 binary64))) (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (/.f64 (+.f64 b a) b))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 b (/.f64 a (+.f64 b a))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 b (/.f64 a (+.f64 b a)))))","(/.f64 (+.f64 b a) (*.f64 b a))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 b (/.f64 a (+.f64 b a))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 a b) (*.f64 b a)) (-.f64 (pow.f64 b #s(literal -2 binary64)) (pow.f64 a #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 b a) #s(literal -1 binary64))) (pow.f64 b #s(literal -2 binary64))) (+.f64 (pow.f64 a #s(literal -3 binary64)) (pow.f64 b #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 a (/.f64 (+.f64 b a) b)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 b (/.f64 a (+.f64 b a))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 b (/.f64 a (+.f64 b a))))","(neg.f64 (/.f64 (neg.f64 (+.f64 b a)) (*.f64 b a)))","(neg.f64 (/.f64 (+.f64 b a) (*.f64 (neg.f64 b) a)))","(fma.f64 (pow.f64 b #s(literal -1/2 binary64)) (pow.f64 b #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (pow.f64 a #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1/2 binary64)) (pow.f64 b #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) a) (pow.f64 b #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) b) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (pow.f64 b #s(literal -1 binary64)) #s(literal 1 binary64) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal 1 binary64) (pow.f64 b #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 b #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 a #s(literal -1 binary64)) (pow.f64 b #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 b #s(literal -2 binary64)) (/.f64 (-.f64 a b) (*.f64 b a))) (/.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (-.f64 a b) (*.f64 b a))))","(exp.f64 (*.f64 (log.f64 (*.f64 b (/.f64 a (+.f64 b a)))) #s(literal -1 binary64)))","(+.f64 (pow.f64 b #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(+.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (pow.f64 (sqrt.f64 (+.f64 b a)) #s(literal 1 binary64)) (pow.f64 (sqrt.f64 (+.f64 b a)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (*.f64 (+.f64 b a) (-.f64 a b)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 a b) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (*.f64 (+.f64 b a) (-.f64 b a)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 b a) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (fma.f64 b b (*.f64 a (-.f64 a b))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (sqrt.f64 (+.f64 b a)) (sqrt.f64 (+.f64 b a)))","(*.f64 (*.f64 (+.f64 b a) (-.f64 a b)) (pow.f64 (-.f64 a b) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 b a) (-.f64 b a)) (pow.f64 (-.f64 b a) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (pow.f64 (fma.f64 b b (*.f64 a (-.f64 a b))) #s(literal -1 binary64)))","(pow.f64 (sqrt.f64 (+.f64 b a)) #s(literal 2 binary64))","(pow.f64 (/.f64 (-.f64 a b) (*.f64 (+.f64 b a) (-.f64 a b))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 b a) (*.f64 (+.f64 b a) (-.f64 b a))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b b (*.f64 a (-.f64 a b))) (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (+.f64 b a) #s(literal 1 binary64))","(/.f64 (neg.f64 (neg.f64 (*.f64 (+.f64 b a) (-.f64 a b)))) (neg.f64 (neg.f64 (-.f64 a b))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (+.f64 b a) (-.f64 b a)))) (neg.f64 (neg.f64 (-.f64 b a))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 b b (*.f64 a (-.f64 a b))))))","(/.f64 (exp.f64 (log.f64 (*.f64 (+.f64 b a) (-.f64 a b)))) (exp.f64 (log.f64 (-.f64 a b))))","(/.f64 (exp.f64 (log.f64 (*.f64 (+.f64 b a) (-.f64 b a)))) (exp.f64 (log.f64 (-.f64 b a))))","(/.f64 (exp.f64 (log.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))))) (exp.f64 (log.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)))))","(/.f64 (exp.f64 (log.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))))) (exp.f64 (log.f64 (fma.f64 b b (*.f64 a (-.f64 a b))))))","(/.f64 (neg.f64 (*.f64 (+.f64 b a) (-.f64 a b))) (neg.f64 (-.f64 a b)))","(/.f64 (neg.f64 (*.f64 (+.f64 b a) (-.f64 b a))) (neg.f64 (-.f64 b a)))","(/.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (fma.f64 b (-.f64 b a) (*.f64 a a))))","(/.f64 (neg.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))) (neg.f64 (fma.f64 b b (*.f64 a (-.f64 a b)))))","(/.f64 (*.f64 (+.f64 b a) (-.f64 a b)) (-.f64 a b))","(/.f64 (*.f64 (+.f64 b a) (-.f64 b a)) (-.f64 b a))","(/.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (fma.f64 b (-.f64 b a) (*.f64 a a)))","(/.f64 (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))) (fma.f64 b b (*.f64 a (-.f64 a b))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 a b) (*.f64 (+.f64 b a) (-.f64 a b)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 b a) (*.f64 (+.f64 b a) (-.f64 b a)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b b (*.f64 a (-.f64 a b))) (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 a b) (*.f64 (+.f64 b a) (-.f64 a b))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 b a) (*.f64 (+.f64 b a) (-.f64 b a))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b (-.f64 b a) (*.f64 a a)) (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b b (*.f64 a (-.f64 a b))) (+.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b #s(literal 3 binary64)))))","(fma.f64 #s(literal 1 binary64) b a)","(fma.f64 #s(literal 1 binary64) a b)","(fma.f64 b #s(literal 1 binary64) a)","(fma.f64 a #s(literal 1 binary64) b)","(-.f64 (/.f64 (*.f64 a a) (-.f64 a b)) (/.f64 (*.f64 b b) (-.f64 a b)))","(-.f64 (/.f64 (*.f64 b b) (-.f64 b a)) (/.f64 (*.f64 a a) (-.f64 b a)))","(exp.f64 (log.f64 (+.f64 b a)))","(+.f64 b a)","(+.f64 a b)","(log.f64 (exp.f64 (+.f64 b a)))","(*.f64 b a)","(*.f64 a b)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b))","(*.f64 (*.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) #s(literal 1 binary64)) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (neg.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a))) (/.f64 #s(literal -1 binary64) b))","(*.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) (pow.f64 b #s(literal -1 binary64)))","(*.f64 (pow.f64 b #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 b #s(literal -1 binary64)) #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b))","(pow.f64 (/.f64 (/.f64 b #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 b #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) #s(literal -1 binary64))) (neg.f64 (neg.f64 b)))","(/.f64 (neg.f64 (*.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) #s(literal 1 binary64))) (neg.f64 b))","(/.f64 (neg.f64 (neg.f64 (neg.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a))))) (neg.f64 (neg.f64 (neg.f64 b))))","(/.f64 (*.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) #s(literal -1 binary64)) (neg.f64 b))","(/.f64 (*.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) #s(literal 1 binary64)) b)","(/.f64 (neg.f64 (neg.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)))) (neg.f64 (neg.f64 b)))","(/.f64 (neg.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a))) (neg.f64 b))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 b #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)))))","(/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 b #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 b #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a))))","(neg.f64 (/.f64 (neg.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a))) b))","(neg.f64 (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) (neg.f64 b)))","(exp.f64 (*.f64 (log.f64 (/.f64 b #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)))) #s(literal -1 binary64)))","#s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a))","(*.f64 (neg.f64 b) (/.f64 #s(literal -1 binary64) a))","(*.f64 (pow.f64 a #s(literal -1 binary64)) b)","(*.f64 (/.f64 b a) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 b a))","(*.f64 b (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 a b) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 a b) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (neg.f64 b) #s(literal 1 binary64))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 b #s(literal -1 binary64))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 b))) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 (neg.f64 (neg.f64 b)) (neg.f64 (neg.f64 a)))","(/.f64 (*.f64 (neg.f64 b) #s(literal 1 binary64)) (neg.f64 a))","(/.f64 (*.f64 b #s(literal -1 binary64)) (neg.f64 a))","(/.f64 (neg.f64 b) (neg.f64 a))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 a b) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a b)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 a b))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a b) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 a b))","(/.f64 b a)","(neg.f64 (/.f64 (neg.f64 b) a))","(neg.f64 (/.f64 b (neg.f64 a)))","(exp.f64 (*.f64 (log.f64 (/.f64 a b)) #s(literal -1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":251.10693359375,"type":"rewrite"},{"compiler":[[17264,1383]],"memory":[[-1015568,33058560]],"time":40.76904296875,"type":"eval"},{"alts":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (+.f64 b a) (*.f64 b a)))","done",25.000744128617008,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a))","next",29.25755027928136,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64))) a))","next",0.15234375,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b))","done",37.43616408026957,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64))) b))","done",0.10546875,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","done",29.163799465689642,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","done",37.38168893579878,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(approx (* 0 eps) #s(literal 0 binary64))))","next",62.671268414817355,"binary64"]],"compiler":[[32,21],[36,23],[38,25],[50,32],[52,34],[28,20],[28,20],[74,44]],"count":[[350,8]],"kept":[{"done":[1,1],"fresh":[2,2],"new":[342,1],"picked":[5,4]}],"memory":[[1139872,19273456]],"min-error":[[0.0,"binary64"]],"time":13.843017578125,"type":"prune"},{"egraph":[[0,8328,171,0.087427768],[5,7530,189,0.015422091],[4,5645,213,0.014847664],[3,1374,233,0.016613399],[2,313,253,0.004787914],[1,122,257,0.000959668],[0,56,257,0.000558131],[0,52,263,0.000225114]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(approx (* 0 eps) #s(literal 0 binary64))))","#s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(approx (* 0 eps) #s(literal 0 binary64)))","#s(approx (* 0 eps) #s(literal 0 binary64))","#s(literal 0 binary64)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64))) a))","(/.f64 #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64))) a)","#s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64)))","(+.f64 (/.f64 a b) #s(literal 1 binary64))","(/.f64 a b)","a","b","#s(literal 1 binary64)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a))","(/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a)","#s(approx (/ (+ b a) b) (/.f64 a b))","(/.f64 a b)","a","b"]],"locations":[["(/.f64 a b)","cost-diff",0],["#s(approx (/ (+ b a) b) (/.f64 a b))","cost-diff",0],["(/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a)","cost-diff",0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a))","cost-diff",0],["(+.f64 (/.f64 a b) #s(literal 1 binary64))","cost-diff",0],["#s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64)))","cost-diff",0],["(/.f64 #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64))) a)","cost-diff",0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64))) a))","cost-diff",0],["#s(approx (* 0 eps) #s(literal 0 binary64))","cost-diff",0],["#s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(approx (* 0 eps) #s(literal 0 binary64)))","cost-diff",0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(approx (* 0 eps) #s(literal 0 binary64))))","cost-diff",0]],"memory":[[5643104,41820368]],"method":["egg-herbie"],"outputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(approx (* 0 eps) #s(literal 0 binary64))))","#s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(approx (* 0 eps) #s(literal 0 binary64)))","#s(approx (* 0 eps) #s(literal 0 binary64))","#s(literal 0 binary64)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64))) a))","(/.f64 #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64))) a)","#s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64)))","(+.f64 (/.f64 a b) #s(literal 1 binary64))","(/.f64 a b)","a","b","#s(literal 1 binary64)","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a))","(/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a)","#s(approx (/ (+ b a) b) (/.f64 a b))","(/.f64 a b)","a","b"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":232.2041015625,"type":"simplify"},{"compiler":[[161,42]],"locations":[["(/.f64 a b)","accuracy",0.0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a))","accuracy",0.0],["(/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a)","accuracy",0.15234375],["#s(approx (/ (+ b a) b) (/.f64 a b))","accuracy",28.99170141797537],["(+.f64 (/.f64 a b) #s(literal 1 binary64))","accuracy",0.0],["#s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64)))","accuracy",0.0],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64))) a))","accuracy",0.0],["(/.f64 #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64))) a)","accuracy",0.15234375],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(approx (* 0 eps) #s(literal 0 binary64))))","accuracy",0.0],["#s(approx (* 0 eps) #s(literal 0 binary64))","accuracy",0.0],["#s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(approx (* 0 eps) #s(literal 0 binary64)))","accuracy",62.671268414817355]],"memory":[[-11037664,30651392]],"mixsample":[[20.14892578125,"ival-div",0],[0.26123046875,"ival-true",0],[8.541259765625,"ival-add",0],[182.380126953125,"ival-mult",0],[6.686279296875,"ival-expm1",0],[0.67529296875,"exact",0],[0.135986328125,"ival-assert",0],[3.005615234375,"ival-pow2",0]],"outcomes":[[276.821044921875,0,"valid",256]],"time":298.4228515625,"type":"localize"},{"count":[[11,36]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(approx (* 0 eps) #s(literal 0 binary64))))","#s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(approx (* 0 eps) #s(literal 0 binary64)))","#s(approx (* 0 eps) #s(literal 0 binary64))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64))) a))","(/.f64 #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64))) a)","#s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64)))","(+.f64 (/.f64 a b) #s(literal 1 binary64))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a))","(/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a)","#s(approx (/ (+ b a) b) (/.f64 a b))","(/.f64 a b)"]],"memory":[[3813296,11911728]],"outputs":[["(/ 1 a)","(/ (+ 1 (* a (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (* a (- (* 1/6 (/ (* (pow eps 3) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/ (+ 1 (* eps (+ (* -1/2 b) (* 1/2 b)))) a)","(/ (+ 1 (+ (* eps (+ (* -1/2 b) (* 1/2 b))) (/ a b))) a)","(/ (+ 1 (/ a b)) a)","1","(+ 1 (/ a b))","(/ a b)","(/ (* eps (- (exp (* eps (+ a b))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/ 1 b)","(+ (/ 1 a) (+ (/ 1 b) (/ (* eps (+ (* -1/2 b) (* 1/2 b))) a)))","(+ (/ 1 a) (/ 1 b))","(* a (+ (/ 1 a) (/ 1 b)))","(/ (* eps (- (exp (* eps (- b (* -1 a)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(+ (* -1 (/ (- (* eps (+ (* -1/2 b) (* 1/2 b))) 1) a)) (/ 1 b))","(/ (+ 1 (* b (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (* b (- (* 1/6 (/ (* (pow eps 3) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/ (+ 1 (* eps (+ (* -1/2 a) (* 1/2 a)))) b)","(/ (+ 1 (+ (* eps (+ (* -1/2 a) (* 1/2 a))) (/ b a))) b)","(/ (+ 1 (/ b a)) b)","(/ (+ a b) b)","(+ (/ 1 a) (+ (/ 1 b) (/ (* eps (+ (* -1/2 a) (* 1/2 a))) b)))","(/ (* eps (- (exp (* eps (- a (* -1 b)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(+ (* -1 (/ (- (* eps (+ (* -1/2 a) (* 1/2 a))) 1) b)) (/ 1 a))","(/ (+ a b) (* a b))","(+ (* eps (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (+ (* 1/6 (/ (pow (+ a b) 3) (* a b))) (* eps (- (* 1/24 (/ (pow (+ a b) 4) (* a b))) (+ (/ (* (+ a b) (+ (* 1/24 (* a (pow b 4))) (+ (* 1/24 (* (pow a 4) b)) (+ (* 1/12 (* (pow a 2) (pow b 3))) (* 1/12 (* (pow a 3) (pow b 2))))))) (* (pow a 2) (pow b 2))) (+ (/ (* (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2))))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b))))) (* a b))))))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b))))) (+ (/ 1 a) (/ 1 b)))","0","(* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b)))))","(* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (+ (/ 1 (* a eps)) (/ 1 (* b eps))))))","(* -1 (* eps (+ (* -1 (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b))))) (* -1 (/ (+ (/ 1 a) (/ 1 b)) eps)))))"]],"series":[[2.443115234375,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (* 0 eps) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (+ (/ a b) 1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (/ a b))","eps","-inf"],[1.701904296875,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (* 0 eps) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (+ (/ a b) 1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (/ a b))","eps","inf"],[2.443115234375,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (* 0 eps) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (+ (/ a b) 1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (/ a b))","eps","0"],[2.9140625,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (* 0 eps) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (+ (/ a b) 1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (/ a b))","b","-inf"],[4.876953125,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (* 0 eps) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (+ (/ a b) 1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (/ a b))","b","inf"],[2.74609375,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (* 0 eps) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (+ (/ a b) 1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (/ a b))","b","0"],[4.669921875,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (* 0 eps) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (+ (/ a b) 1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (/ a b))","a","-inf"],[2.91796875,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (* 0 eps) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (+ (/ a b) 1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (/ a b))","a","inf"],[2.007080078125,"((/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (* 0 eps) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (+ (/ a b) 1) (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/ (/ (+ b a) b) a) (/ (+ b a) b) (/ a b))","a","0"]],"time":28.9970703125,"type":"series"},{"count":[[36,36]],"egraph":[[0,8523,1117,0.098059133],[2,2618,1227,0.032042207],[1,746,1363,0.008805111],[0,256,1444,0.00278406]],"inputs":[["(/ 1 a)","(/ (+ 1 (* a (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/ (+ 1 (* a (- (+ (* a (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (* a (- (* 1/6 (/ (* (pow eps 3) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/ (+ 1 (* eps (+ (* -1/2 b) (* 1/2 b)))) a)","(/ (+ 1 (+ (* eps (+ (* -1/2 b) (* 1/2 b))) (/ a b))) a)","(/ (+ 1 (/ a b)) a)","1","(+ 1 (/ a b))","(/ a b)","(/ (* eps (- (exp (* eps (+ a b))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/ 1 b)","(+ (/ 1 a) (+ (/ 1 b) (/ (* eps (+ (* -1/2 b) (* 1/2 b))) a)))","(+ (/ 1 a) (/ 1 b))","(* a (+ (/ 1 a) (/ 1 b)))","(/ (* eps (- (exp (* eps (- b (* -1 a)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(+ (* -1 (/ (- (* eps (+ (* -1/2 b) (* 1/2 b))) 1) a)) (/ 1 b))","(/ (+ 1 (* b (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/ (+ 1 (* b (- (+ (* b (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (* b (- (* 1/6 (/ (* (pow eps 3) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/ (+ 1 (* eps (+ (* -1/2 a) (* 1/2 a)))) b)","(/ (+ 1 (+ (* eps (+ (* -1/2 a) (* 1/2 a))) (/ b a))) b)","(/ (+ 1 (/ b a)) b)","(/ (+ a b) b)","(+ (/ 1 a) (+ (/ 1 b) (/ (* eps (+ (* -1/2 a) (* 1/2 a))) b)))","(/ (* eps (- (exp (* eps (- a (* -1 b)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(+ (* -1 (/ (- (* eps (+ (* -1/2 a) (* 1/2 a))) 1) b)) (/ 1 a))","(/ (+ a b) (* a b))","(+ (* eps (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (+ (* 1/6 (/ (pow (+ a b) 3) (* a b))) (* eps (- (* 1/24 (/ (pow (+ a b) 4) (* a b))) (+ (/ (* (+ a b) (+ (* 1/24 (* a (pow b 4))) (+ (* 1/24 (* (pow a 4) b)) (+ (* 1/12 (* (pow a 2) (pow b 3))) (* 1/12 (* (pow a 3) (pow b 2))))))) (* (pow a 2) (pow b 2))) (+ (/ (* (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2))))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b))))) (* a b))))))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(+ (* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b))))) (+ (/ 1 a) (/ 1 b)))","0","(* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b)))))","(* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (+ (/ 1 (* a eps)) (/ 1 (* b eps))))))","(* -1 (* eps (+ (* -1 (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b))))) (* -1 (/ (+ (/ 1 a) (/ 1 b)) eps)))))"]],"memory":[[-1809184,47832144]],"method":["egg-herbie"],"outputs":[["(/ 1 a)","(/.f64 #s(literal 1 binary64) a)","(/ (+ 1 (* a (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) a)","(/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))))) a #s(literal 1 binary64)) a)","(/ (+ 1 (* a (- (+ (* a (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))))))) a (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps)))))) a #s(literal 1 binary64)) a)","(/ (+ 1 (* a (- (+ (* a (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (* a (- (* 1/6 (/ (* (pow eps 3) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* b eps))) (- (exp (* b eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* b eps))) (- (exp (* b eps)) 1))) (* 1/2 eps)))) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/6 binary64)) #s(literal 1/24 binary64)) (neg.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps)))))) (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))))))) eps) #s(literal 1/2 binary64))))) a (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps)))))))) a (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 b) eps) (expm1.f64 (*.f64 b eps)))))) a #s(literal 1 binary64)) a)","(/ (+ 1 (* eps (+ (* -1/2 b) (* 1/2 b)))) a)","(/.f64 #s(literal 1 binary64) a)","(/ (+ 1 (+ (* eps (+ (* -1/2 b) (* 1/2 b))) (/ a b))) a)","(/.f64 (-.f64 (/.f64 a b) #s(literal -1 binary64)) a)","(/ (+ 1 (/ a b)) a)","(/.f64 (-.f64 (/.f64 a b) #s(literal -1 binary64)) a)","1","#s(literal 1 binary64)","(+ 1 (/ a b))","(-.f64 (/.f64 a b) #s(literal -1 binary64))","(/ a b)","(/.f64 a b)","(/ (* eps (- (exp (* eps (+ a b))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps) (*.f64 (expm1.f64 (*.f64 b eps)) (expm1.f64 (*.f64 a eps))))","(/ 1 b)","(/.f64 #s(literal 1 binary64) b)","(+ (/ 1 a) (+ (/ 1 b) (/ (* eps (+ (* -1/2 b) (* 1/2 b))) a)))","(-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b))","(+ (/ 1 a) (/ 1 b))","(-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b))","(* a (+ (/ 1 a) (/ 1 b)))","(-.f64 (/.f64 a b) #s(literal -1 binary64))","(/ (* eps (- (exp (* eps (- b (* -1 a)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps) (*.f64 (expm1.f64 (*.f64 b eps)) (expm1.f64 (*.f64 a eps))))","(+ (* -1 (/ (- (* eps (+ (* -1/2 b) (* 1/2 b))) 1) a)) (/ 1 b))","(-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b))","(/ (+ 1 (* b (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) b)","(/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))))) b #s(literal 1 binary64)) b)","(/ (+ 1 (* b (- (+ (* b (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))))))) b (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps)))))) b #s(literal 1 binary64)) b)","(/ (+ 1 (* b (- (+ (* b (- (+ (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (* b (- (* 1/6 (/ (* (pow eps 3) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/24 (pow eps 3)) (+ (* 1/6 (* (pow eps 2) (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps)))) (* 1/2 (* eps (- (* 1/2 (/ (* (pow eps 2) (exp (* a eps))) (- (exp (* a eps)) 1))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))))))))) (+ (* 1/6 (pow eps 2)) (* 1/2 (* eps (- (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1)) (* 1/2 eps))))))) (/ (* eps (exp (* a eps))) (- (exp (* a eps)) 1))) (* 1/2 eps)))) b)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/6 binary64)) #s(literal 1/24 binary64)) (neg.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps)))))) (*.f64 eps eps) (*.f64 (*.f64 (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))))))) eps) #s(literal 1/2 binary64))))) b (fma.f64 (*.f64 eps eps) (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps))) #s(literal 1/2 binary64)) #s(literal 1/6 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) eps) (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps)))))))) b (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 a eps)))))) b #s(literal 1 binary64)) b)","(/ (+ 1 (* eps (+ (* -1/2 a) (* 1/2 a)))) b)","(/.f64 #s(literal 1 binary64) b)","(/ (+ 1 (+ (* eps (+ (* -1/2 a) (* 1/2 a))) (/ b a))) b)","(/.f64 (-.f64 (/.f64 b a) #s(literal -1 binary64)) b)","(/ (+ 1 (/ b a)) b)","(/.f64 (-.f64 (/.f64 b a) #s(literal -1 binary64)) b)","(/ (+ a b) b)","(/.f64 (+.f64 b a) b)","(+ (/ 1 a) (+ (/ 1 b) (/ (* eps (+ (* -1/2 a) (* 1/2 a))) b)))","(-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b))","(/ (* eps (- (exp (* eps (- a (* -1 b)))) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (+.f64 b a) eps)) eps) (*.f64 (expm1.f64 (*.f64 b eps)) (expm1.f64 (*.f64 a eps))))","(+ (* -1 (/ (- (* eps (+ (* -1/2 a) (* 1/2 a))) 1) b)) (/ 1 a))","(-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b))","(/ (+ a b) (* a b))","(/.f64 (/.f64 (+.f64 b a) b) a)","(+ (* eps (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (*.f64 b b)) (/.f64 (/.f64 (+.f64 b a) a) a) (*.f64 (/.f64 #s(literal 1/2 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a))) eps (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (*.f64 b b)) (/.f64 (/.f64 (+.f64 b a) a) a) (fma.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/6 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) a)) (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 b #s(literal 3 binary64))) a (*.f64 b (fma.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) (*.f64 (*.f64 a a) b)) (/.f64 (+.f64 b a) b) (*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (*.f64 b b)) (/.f64 (/.f64 (+.f64 b a) a) a) (*.f64 (/.f64 #s(literal 1/2 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a))) (*.f64 (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) b) (/.f64 #s(literal 1/2 binary64) a))))) eps (*.f64 (/.f64 #s(literal 1/2 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a)))) eps (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b)))","(+ (* eps (- (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (* eps (- (+ (* 1/6 (/ (pow (+ a b) 3) (* a b))) (* eps (- (* 1/24 (/ (pow (+ a b) 4) (* a b))) (+ (/ (* (+ a b) (+ (* 1/24 (* a (pow b 4))) (+ (* 1/24 (* (pow a 4) b)) (+ (* 1/12 (* (pow a 2) (pow b 3))) (* 1/12 (* (pow a 3) (pow b 2))))))) (* (pow a 2) (pow b 2))) (+ (/ (* (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2))))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/6 (/ (pow (+ a b) 3) (* a b))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b))))) (* a b))))))) (+ (/ (* (+ a b) (+ (* 1/6 (* a (pow b 3))) (+ (* 1/6 (* (pow a 3) b)) (* 1/4 (* (pow a 2) (pow b 2)))))) (* (pow a 2) (pow b 2))) (/ (* (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b))) (- (* 1/2 (/ (pow (+ a b) 2) (* a b))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (* a b)))))) (/ (* (+ a b) (+ (* 1/2 (* a (pow b 2))) (* 1/2 (* (pow a 2) b)))) (* (pow a 2) (pow b 2))))) (+ (/ 1 a) (/ 1 b)))","(fma.f64 (fma.f64 (fma.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/24 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 4 binary64)) a)) (fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 (*.f64 a a) b) b) (+.f64 b a)) #s(literal 1/12 binary64) (*.f64 #s(literal 1/24 binary64) (fma.f64 (pow.f64 a #s(literal 4 binary64)) b (*.f64 (pow.f64 b #s(literal 4 binary64)) a)))) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 a a) b) b)) (fma.f64 (-.f64 (*.f64 (/.f64 #s(literal 1/6 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) a)) (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 b #s(literal 3 binary64))) a (*.f64 b (fma.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) (*.f64 (*.f64 a a) b)) (/.f64 (+.f64 b a) b) (*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (*.f64 b b)) (/.f64 (/.f64 (+.f64 b a) a) a) (*.f64 (/.f64 #s(literal 1/2 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a))) (*.f64 (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) b) (/.f64 #s(literal 1/2 binary64) a))))) (*.f64 (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) b) (/.f64 #s(literal 1/2 binary64) a)) (*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (*.f64 b b)) (/.f64 (/.f64 (+.f64 b a) a) a) (*.f64 (/.f64 #s(literal 1/2 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a))) (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 b #s(literal 3 binary64))) a (*.f64 b (fma.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) (*.f64 b a)))))) eps (-.f64 (*.f64 (/.f64 #s(literal 1/6 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 3 binary64)) a)) (fma.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) (pow.f64 b #s(literal 3 binary64))) a (*.f64 b (fma.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 a a)) b (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))))) (*.f64 (*.f64 a a) b)) (/.f64 (+.f64 b a) b) (*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (*.f64 b b)) (/.f64 (/.f64 (+.f64 b a) a) a) (*.f64 (/.f64 #s(literal 1/2 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a))) (*.f64 (/.f64 (*.f64 (*.f64 b a) (+.f64 b a)) b) (/.f64 #s(literal 1/2 binary64) a)))))) eps (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (*.f64 b b)) (/.f64 (/.f64 (+.f64 b a) a) a) (*.f64 (/.f64 #s(literal 1/2 binary64) b) (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) a)))) eps (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b)))","(+ (* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b))))) (+ (/ 1 a) (/ 1 b)))","(-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b))","0","#s(literal 0 binary64)","(* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b)))))","#s(literal 0 binary64)","(* eps (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (+ (* 1/2 (/ (pow (+ a b) 2) (* a b))) (+ (/ 1 (* a eps)) (/ 1 (* b eps))))))","(*.f64 (+.f64 (/.f64 (/.f64 #s(literal 1 binary64) b) eps) (/.f64 (/.f64 #s(literal 1 binary64) a) eps)) eps)","(* -1 (* eps (+ (* -1 (+ (* -1/2 (/ (pow (+ a b) 2) (* a b))) (* 1/2 (/ (pow (+ a b) 2) (* a b))))) (* -1 (/ (+ (/ 1 a) (/ 1 b)) eps)))))","(*.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) a) (/.f64 #s(literal -1 binary64) b)) eps) eps)"]],"stop":[["iter limit",1],["node limit",1]],"time":278.761962890625,"type":"simplify"},{"count":[[11,108]],"egraph":[[0,9074,222,0.08621246],[2,2743,244,0.037611213],[1,285,244,0.007921196],[0,56,248,0.001599336],[0,52,254,0.000223945]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(approx (* 0 eps) #s(literal 0 binary64))))","#s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(approx (* 0 eps) #s(literal 0 binary64)))","#s(approx (* 0 eps) #s(literal 0 binary64))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64))) a))","(/.f64 #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64))) a)","#s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64)))","(+.f64 (/.f64 a b) #s(literal 1 binary64))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a))","(/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a)","#s(approx (/ (+ b a) b) (/.f64 a b))","(/.f64 a b)"]],"memory":[[3911616,48210336]],"outputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(approx (* 0 eps) #s(literal 0 binary64))))","#s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(approx (* 0 eps) #s(literal 0 binary64)))","#s(approx (* 0 eps) #s(literal 0 binary64))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64))) a))","(*.f64 (*.f64 #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (neg.f64 #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64)))) (/.f64 #s(literal -1 binary64) a))","(*.f64 #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64))) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64))))","(*.f64 #s(literal 1 binary64) (/.f64 #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64))) a))","(pow.f64 (/.f64 (/.f64 a #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 a #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64))) #s(literal -1 binary64))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64))) #s(literal 1 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 (neg.f64 #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64)))))) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 (*.f64 #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 a))","(/.f64 (*.f64 #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64))) #s(literal 1 binary64)) a)","(/.f64 (neg.f64 (neg.f64 #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64))))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64)))) (neg.f64 a))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 a #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64)))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64))))))","(/.f64 #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64))) a)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 a #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 a #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64)))))","(neg.f64 (/.f64 (neg.f64 #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64)))) a))","(neg.f64 (/.f64 #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64))) (neg.f64 a)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 a)) (/.f64 #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64))) (neg.f64 a)))","(exp.f64 (*.f64 (log.f64 (/.f64 a #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64))))) #s(literal -1 binary64)))","#s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 (/.f64 a b) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (/.f64 a b) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (/.f64 a b) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (/.f64 a b) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 a b)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (/.f64 a b) #s(literal 1 binary64)) (-.f64 (pow.f64 (/.f64 a b) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (+.f64 (pow.f64 (/.f64 a b) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 a b)) (+.f64 (pow.f64 (/.f64 a b) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 a b) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (/.f64 a b))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 a b) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (-.f64 (/.f64 a b) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (/.f64 a b) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (/.f64 a b) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 a b)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 a b) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (/.f64 a b)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 a b) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 (/.f64 a b) #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (/.f64 a b) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 a (/.f64 a b)) a) b))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (/.f64 a b) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (/.f64 a b) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 a b))))","(/.f64 (-.f64 (pow.f64 (/.f64 a b) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 (/.f64 a b) #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 (/.f64 a b) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 a (/.f64 a b)) a) b)))","(/.f64 (+.f64 (pow.f64 (/.f64 a b) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (/.f64 a b) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 a b)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (/.f64 a b) #s(literal 1 binary64)) (-.f64 (pow.f64 (/.f64 a b) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (+.f64 (pow.f64 (/.f64 a b) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 a b)) (+.f64 (pow.f64 (/.f64 a b) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 a b) #s(literal 1 binary64)) (-.f64 (pow.f64 (/.f64 a b) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (/.f64 a b) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 a b)) (+.f64 (pow.f64 (/.f64 a b) #s(literal 3 binary64)) #s(literal 1 binary64))))","(fma.f64 (neg.f64 a) (/.f64 #s(literal -1 binary64) b) #s(literal 1 binary64))","(fma.f64 (/.f64 a b) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (pow.f64 b #s(literal -1 binary64)) a #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (/.f64 a b) #s(literal 1 binary64))","(fma.f64 a (pow.f64 b #s(literal -1 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (/.f64 a b))) (/.f64 (pow.f64 (/.f64 a b) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (/.f64 a b))))","(-.f64 (/.f64 (pow.f64 (/.f64 a b) #s(literal 2 binary64)) (-.f64 (/.f64 a b) #s(literal 1 binary64))) (pow.f64 (-.f64 (/.f64 a b) #s(literal 1 binary64)) #s(literal -1 binary64)))","(+.f64 (/.f64 a b) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (/.f64 a b))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a))","(*.f64 (*.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) #s(literal 1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (neg.f64 #s(approx (/ (+ b a) b) (/.f64 a b))) (/.f64 #s(literal -1 binary64) a))","(*.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) #s(approx (/ (+ b a) b) (/.f64 a b)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a))","(pow.f64 (/.f64 (/.f64 a #s(approx (/ (+ b a) b) (/.f64 a b))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 a #s(approx (/ (+ b a) b) (/.f64 a b))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) #s(literal -1 binary64))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) #s(literal 1 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 (neg.f64 #s(approx (/ (+ b a) b) (/.f64 a b))))) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 (*.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) #s(literal -1 binary64)) (neg.f64 a))","(/.f64 (*.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) #s(literal 1 binary64)) a)","(/.f64 (neg.f64 (neg.f64 #s(approx (/ (+ b a) b) (/.f64 a b)))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 #s(approx (/ (+ b a) b) (/.f64 a b))) (neg.f64 a))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 a #s(approx (/ (+ b a) b) (/.f64 a b))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a #s(approx (/ (+ b a) b) (/.f64 a b)))))","(/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 a #s(approx (/ (+ b a) b) (/.f64 a b))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a #s(approx (/ (+ b a) b) (/.f64 a b))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 a #s(approx (/ (+ b a) b) (/.f64 a b))))","(neg.f64 (/.f64 (neg.f64 #s(approx (/ (+ b a) b) (/.f64 a b))) a))","(neg.f64 (/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) (neg.f64 a)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 a)) (/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) (neg.f64 a)))","(exp.f64 (*.f64 (log.f64 (/.f64 a #s(approx (/ (+ b a) b) (/.f64 a b)))) #s(literal -1 binary64)))","#s(approx (/ (+ b a) b) (/.f64 a b))","(*.f64 (neg.f64 a) (/.f64 #s(literal -1 binary64) b))","(*.f64 (/.f64 a b) #s(literal 1 binary64))","(*.f64 (pow.f64 b #s(literal -1 binary64)) a)","(*.f64 #s(literal 1 binary64) (/.f64 a b))","(*.f64 a (pow.f64 b #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 b a) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 b a) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 a #s(literal -1 binary64))) (neg.f64 (neg.f64 b)))","(/.f64 (neg.f64 (*.f64 (neg.f64 a) #s(literal 1 binary64))) (neg.f64 (neg.f64 b)))","(/.f64 (neg.f64 (neg.f64 (neg.f64 a))) (neg.f64 (neg.f64 (neg.f64 b))))","(/.f64 (neg.f64 (neg.f64 a)) (neg.f64 (neg.f64 b)))","(/.f64 (*.f64 (neg.f64 a) #s(literal 1 binary64)) (neg.f64 b))","(/.f64 (*.f64 a #s(literal -1 binary64)) (neg.f64 b))","(/.f64 (neg.f64 a) (neg.f64 b))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 b a) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b a)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 b a))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b a) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 b a))","(/.f64 a b)","(neg.f64 (/.f64 (neg.f64 a) b))","(neg.f64 (/.f64 a (neg.f64 b)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 b)) (/.f64 a (neg.f64 b)))","(exp.f64 (*.f64 (log.f64 (/.f64 b a)) #s(literal -1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":243.078125,"type":"rewrite"},{"compiler":[[7785,733]],"memory":[[-8033248,16287552]],"time":47.427001953125,"type":"eval"},{"alts":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (+.f64 b a) (*.f64 b a)))","done",25.000744128617008,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a))","done",29.25755027928136,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64))) a))","done",0.15234375,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b))","done",37.43616408026957,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64))) b))","done",0.10546875,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","done",29.163799465689642,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","done",37.38168893579878,"binary64"],["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(approx (* 0 eps) #s(literal 0 binary64))))","done",62.671268414817355,"binary64"]],"compiler":[[642,146],[32,21],[36,23],[38,25],[50,32],[52,34],[28,20],[28,20],[74,44]],"count":[[168,8]],"kept":[{"done":[5,5],"fresh":[0,0],"new":[160,0],"picked":[3,3]}],"memory":[[8027712,16361632]],"min-error":[[0.0,"binary64"]],"time":14.2939453125,"type":"prune"},{"accuracy":[0.10546875],"baseline":[0.10546875],"branch":[["a",0.10546875,1,"binary64"],["b",0.10546875,1,"binary64"],["eps",0.10546875,1,"binary64"],["(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))",0.10546875,1,"binary64"]],"compiler":[[1,3],[1,3],[1,3],[24,17]],"count":[[16,1]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(approx (* 0 eps) #s(literal 0 binary64))))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (*.f64 #s(literal 0 binary64) eps)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (+.f64 b a) (*.f64 b a)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64))) b))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (/ (+ b a) b) (+.f64 (/.f64 a b) #s(literal 1 binary64))) a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (/.f64 (+.f64 b a) b) a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (fma.f64 (fma.f64 (*.f64 (*.f64 (*.f64 b a) (+.f64 b a)) #s(literal -1/2 binary64)) (/.f64 (+.f64 b a) (*.f64 (*.f64 (*.f64 b a) a) b)) (*.f64 (/.f64 (pow.f64 (+.f64 b a) #s(literal 2 binary64)) b) (/.f64 #s(literal 1/2 binary64) a))) eps (+.f64 (/.f64 #s(literal 1 binary64) b) (/.f64 #s(literal 1 binary64) a))))","(/.f64 (*.f64 (expm1.f64 (*.f64 eps (+.f64 b a))) eps) (*.f64 (expm1.f64 (*.f64 eps b)) (expm1.f64 (*.f64 eps a))))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (fma.f64 (*.f64 eps (+.f64 #s(literal -1/2 binary64) (/.f64 (pow.f64 (exp.f64 a) eps) (expm1.f64 (*.f64 eps a))))) b #s(literal 1 binary64)) b))","(/.f64 (*.f64 (/.f64 eps (expm1.f64 (*.f64 eps a))) (expm1.f64 (*.f64 eps (+.f64 b a)))) (expm1.f64 (*.f64 eps b)))","(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))","(/.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 eps b)) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 (*.f64 eps (+.f64 b a)) #s(literal 2 binary64))) eps)) (*.f64 (expm1.f64 (*.f64 eps a)) (-.f64 (pow.f64 (exp.f64 eps) (+.f64 b a)) #s(literal -1 binary64))))"]],"memory":[[-5918512,11812640]],"oracle":[64.0],"outputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64))) b))"]],"repr":["binary64"],"time":18.4619140625,"times":[[4.7099609375,"a"],[4.12109375,"b"],[4.2021484375,"eps"],[3.4931640625,"(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))"]],"type":"regimes"},{"accuracy":[11.14896787607932],"baseline":[25.000744128617008],"branch":[["a",11.14896787607932,3,"binary64"],["b",12.828402830397536,2,"binary64"],["eps",17.705687114069658,2,"binary64"],["(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))",25.000744128617008,1,"binary64"]],"compiler":[[1,3],[1,3],[1,3],[24,17]],"count":[[7,3]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(approx (* 0 eps) #s(literal 0 binary64))))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (*.f64 #s(literal 0 binary64) eps)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (+.f64 b a) (*.f64 b a)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (/.f64 b a)) b))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (/ (+ b a) b) (/.f64 a b)) a))"]],"memory":[[181904,8458160]],"oracle":[63.14018848223188],"outputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (+.f64 b a) (*.f64 b a)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))"]],"repr":["binary64"],"time":10.18505859375,"times":[[2.318115234375,"a"],[2.47900390625,"b"],[2.35986328125,"eps"],[1.9130859375,"(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))"]],"type":"regimes"},{"accuracy":[13.868609570978238],"baseline":[29.163799465689642],"branch":[["b",17.06919716113561,2,"binary64"],["a",13.868609570978238,2,"binary64"]],"compiler":[[1,3],[1,3]],"count":[[4,2]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(approx (* 0 eps) #s(literal 0 binary64))))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (*.f64 #s(literal 0 binary64) eps)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))"]],"memory":[[4014032,4014032]],"oracle":[63.14018848223188],"outputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))"]],"repr":["binary64"],"time":4.1279296875,"times":[[1.72802734375,"b"],[1.800048828125,"a"]],"type":"regimes"},{"accuracy":[37.38168893579876],"baseline":[37.38168893579878],"branch":[["(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))",37.38168893579878,1,"binary64"],["eps",37.38168893579878,1,"binary64"],["b",37.38168893579876,1,"binary64"],["a",37.38168893579879,1,"binary64"]],"compiler":[[24,17],[1,3],[1,3],[1,3]],"count":[[3,1]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(approx (* 0 eps) #s(literal 0 binary64))))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (*.f64 #s(literal 0 binary64) eps)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))"]],"memory":[[-1329840,6924624]],"oracle":[62.93497495379148],"outputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))"]],"repr":["binary64"],"time":6.940185546875,"times":[[1.287841796875,"(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))"],[1.494140625,"eps"],[1.52099609375,"b"],[1.649169921875,"a"]],"type":"regimes"},{"accuracy":[62.671268414817355],"baseline":[62.671268414817355],"branch":[["a",62.67126841481741,1,"binary64"],["eps",62.67126841481737,1,"binary64"],["(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))",62.671268414817355,1,"binary64"],["b",62.67126841481738,1,"binary64"]],"compiler":[[1,3],[1,3],[24,17],[1,3]],"count":[[2,1]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(approx (* 0 eps) #s(literal 0 binary64))))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) (*.f64 #s(literal 0 binary64) eps)))"]],"link":["."],"memory":[[-2009520,6299200]],"name":["expq3 (problem 3.4.2)"],"oracle":[62.671268414817355],"outputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(approx (* 0 eps) #s(literal 0 binary64))))"]],"repr":["binary64"],"time":5.82080078125,"times":[[1.22607421875,"a"],[1.239990234375,"eps"],[1.222900390625,"(/.f64 (*.f64 eps (-.f64 (exp.f64 (*.f64 (+.f64 a b) eps)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (*.f64 a eps)) #s(literal 1 binary64)) (-.f64 (exp.f64 (*.f64 b eps)) #s(literal 1 binary64))))"],[1.22705078125,"b"]],"type":"regimes"},{"bstep":[[11.47802734375,-9.199574657353431e-232,-2.2130600649298275e-232],[13.015869140625,-3.5240113920748885e-131,-3.864844960967728e-133]],"compiler":[[28,21],[28,21],[28,21],[28,21],[28,21],[28,21],[28,21],[28,21],[28,21],[28,21],[28,21],[28,21],[28,21],[32,22],[28,21],[32,22],[28,21],[32,22],[28,21],[32,22],[28,21],[32,22],[28,21],[32,22],[28,21],[32,22],[26,16],[1,3]],"memory":[[1140752,9564176]],"method":["binary-search","binary-search"],"mixsample":[[1.323974609375,"ival-div",0],[0.13330078125,"ival-true",0],[1.128173828125,"ival-add",0],[6.2109375,"ival-mult",0],[3.164794921875,"ival-expm1",0],[0.077880859375,"ival-assert",0]],"outcomes":[[17.307861328125,0,"valid",208]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":28.4501953125,"type":"bsearch"},{"bstep":[[0.866943359375,-9.199574657353431e-232,-2.2130600649298275e-232]],"compiler":[[28,21],[28,21],[28,21],[28,21],[28,21],[28,21],[28,21],[28,21],[28,21],[28,21],[28,21],[28,21],[26,16],[1,3]],"memory":[[597488,597488]],"method":["binary-search"],"stop":[["narrow-enough",1]],"time":1.31201171875,"type":"bsearch"},{"egraph":[[4,5762,292,0.02037649],[3,1502,298,0.018370528],[2,369,306,0.005053088],[1,152,308,0.001560896],[0,72,308,0.000985825]],"inputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64))) b))","(if (<=.f64 a #s(literal -2557336412418861/6393341031047152089869511126616404594173128996177860916959553453312761321102879990006386899074031556935325554936640763689877454191182408307282280448 binary64)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (+.f64 b a) (*.f64 b a))) (if (<=.f64 a #s(literal -6292727911774283/6991919901971426075297554671307333615898862102580725715195666431228287110681861367027657291461090911970058473930419853533788296083269867358507086435928852446414275954096487329654980776728266302794199220759703429559553357814144917874843453883416576 binary64)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))))","(if (<=.f64 a #s(literal -6292727911774283/6991919901971426075297554671307333615898862102580725715195666431228287110681861367027657291461090911970058473930419853533788296083269867358507086435928852446414275954096487329654980776728266302794199220759703429559553357814144917874843453883416576 binary64)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(approx (* 0 eps) #s(literal 0 binary64))))"]],"memory":[[-2833216,12970688]],"method":["egg-herbie"],"outputs":[["#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(approx (+ (* (* eps (+ -1/2 (/ (pow (exp a) eps) (- (exp (* eps a)) 1)))) b) 1) (+.f64 (/.f64 b a) #s(literal 1 binary64))) b))","(if (<=.f64 a #s(literal -2557336412418861/6393341031047152089869511126616404594173128996177860916959553453312761321102879990006386899074031556935325554936640763689877454191182408307282280448 binary64)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (+.f64 b a) (*.f64 b a))) (if (<=.f64 a #s(literal -6292727911774283/6991919901971426075297554671307333615898862102580725715195666431228287110681861367027657291461090911970058473930419853533788296083269867358507086435928852446414275954096487329654980776728266302794199220759703429559553357814144917874843453883416576 binary64)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))))","(if (<=.f64 a #s(literal -2557336412418861/6393341031047152089869511126616404594173128996177860916959553453312761321102879990006386899074031556935325554936640763689877454191182408307282280448 binary64)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 (+.f64 b a) (*.f64 b a))) (if (<=.f64 a #s(literal -6292727911774283/6991919901971426075297554671307333615898862102580725715195666431228287110681861367027657291461090911970058473930419853533788296083269867358507086435928852446414275954096487329654980776728266302794199220759703429559553357814144917874843453883416576 binary64)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (pow.f64 b #s(literal -1 binary64))) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (pow.f64 a #s(literal -1 binary64)))))","(if (<=.f64 a #s(literal -6292727911774283/6991919901971426075297554671307333615898862102580725715195666431228287110681861367027657291461090911970058473930419853533788296083269867358507086435928852446414275954096487329654980776728266302794199220759703429559553357814144917874843453883416576 binary64)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) b)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a)))","(if (<=.f64 a #s(literal -6292727911774283/6991919901971426075297554671307333615898862102580725715195666431228287110681861367027657291461090911970058473930419853533788296083269867358507086435928852446414275954096487329654980776728266302794199220759703429559553357814144917874843453883416576 binary64)) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (pow.f64 b #s(literal -1 binary64))) #s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (pow.f64 a #s(literal -1 binary64))))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (/.f64 #s(literal 1 binary64) a))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) (pow.f64 a #s(literal -1 binary64)))","#s(approx (/ (* eps (- (exp (* (+ a b) eps)) 1)) (* (- (exp (* a eps)) 1) (- (exp (* b eps)) 1))) #s(approx (+ (* (+ (* (* (* (* b a) (+ b a)) -1/2) (/ (+ b a) (* (* (* b a) a) b))) (* (/ (pow (+ b a) 2) b) (/ 1/2 a))) eps) (+ (/ 1 b) (/ 1 a))) #s(approx (* 0 eps) #s(literal 0 binary64))))"]],"stop":[["node limit",1]],"time":71.428955078125,"type":"simplify"},{"compiler":[[310,75]],"memory":[[1005856,1005856]],"stop":[["done",1]],"time":1.529052734375,"type":"soundness"},{"compiler":[[310,75],[310,75],[7,7],[7,7],[24,17],[24,17],[52,34],[52,34],[52,34],[52,34]],"memory":[[-523376,32131328]],"remove-preprocessing":[[],[],[],[],[],[]],"time":52.385986328125,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.016845703125,"type":"end"}]