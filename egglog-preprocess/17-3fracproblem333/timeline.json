[{"memory":[[19296,19296]],"time":0.0361328125,"type":"start"},{"compiler":[[20,13]],"memory":[[1153072,1153072]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.5,"unknown":0.00024414062500000005,"valid":0.499755859375}],[11,{"invalid":0.0,"precondition":0.5,"unknown":0.00048828125,"valid":0.49951171875}],[10,{"invalid":0.0,"precondition":0.5,"unknown":0.0009765625,"valid":0.4990234375}],[9,{"invalid":0.0,"precondition":0.5,"unknown":0.001953125,"valid":0.498046875}],[8,{"invalid":0.0,"precondition":0.5,"unknown":0.00390625,"valid":0.49609375}],[7,{"invalid":0.0,"precondition":0.5,"unknown":0.0078125,"valid":0.4921875}],[6,{"invalid":0.0,"precondition":0.5,"unknown":0.015625,"valid":0.484375}],[5,{"invalid":0.0,"precondition":0.5,"unknown":0.03125,"valid":0.46875}],[4,{"invalid":0.0,"precondition":0.5,"unknown":0.0625,"valid":0.4375}],[3,{"invalid":0.0,"precondition":0.5,"unknown":0.125,"valid":0.375}],[2,{"invalid":0.0,"precondition":0.5,"unknown":0.25,"valid":0.25}],[1,{"invalid":0.0,"precondition":0.5,"unknown":0.5,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.5,"unknown":0.5,"valid":0.0}]],"time":3.676025390625,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.5,"valid":0.5}],"memory":[[31970448,468439104]],"mixsample":[[220.21435546875,"ival-div",0],[286.791259765625,"adjust",800],[222.670654296875,"ival-div",400],[3.36181640625,"ival-sub",1600],[4.59326171875,"ival-assert",0],[10.020751953125,"ival-div",1600],[105.548583984375,"ival-sub",0],[93.39013671875,"ival-sub",400],[17.365966796875,"adjust",2000],[0.052978515625,"ival-div",2800],[152.599365234375,"ival-add",0],[70.3876953125,"ival-fabs",0],[57.585205078125,"ival-add",400],[0.00927734375,"ival-sub",2800],[28.343017578125,"ival->",0],[11.46630859375,"exact",0],[0.035888671875,"ival-add",800]],"outcomes":[[1393.938720703125,1,"valid",7301],[147.98974609375,2,"valid",530],[36.9365234375,0,"valid",425]],"time":2029.31494140625,"type":"sample"},{"compiler":[[15,10],[48,12],[48,12]],"confusion":[[86,0,0,170]],"explanations":[["+.f64","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","cancellation",86,0,[],[[]]]],"fperrors":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))",86,0,false,0,false],["(+.f64 x #s(literal 1 binary64))",0,0,false,0,false],["(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))",0,0,false,0,false],["(/.f64 #s(literal 2 binary64) x)",0,0,false,0,false],["(-.f64 x #s(literal 1 binary64))",0,0,false,0,false],["#s(literal 2 binary64)",0,0,false,0,false],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x))",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,86],[0,170]],"maybe-confusion":[[86,0,0,0,0,170]],"memory":[[-29658160,79910704]],"mixsample":[[14.115478515625,"adjust",800],[11.117431640625,"ival-div",0],[10.453857421875,"ival-add",0],[0.082763671875,"ival-sub",1600],[11.5751953125,"ival-div",400],[0.460205078125,"ival-div",1600],[0.22314453125,"ival-assert",0],[2.56201171875,"ival-add",400],[5.2998046875,"ival-sub",0],[0.48974609375,"ival-true",0],[4.595458984375,"ival-sub",400],[0.55859375,"exact",0],[0.963134765625,"adjust",2000]],"outcomes":[[77.08154296875,1,"valid",462],[8.0048828125,2,"valid",34],[1.2412109375,0,"valid",16]],"time":169.93408203125,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[15,10]],"egraph":[[0,592,15,0.002446381],[8,592,15,0.003724562],[7,521,15,0.004445302],[6,399,15,0.003991004],[5,248,15,0.002728176],[4,134,15,0.001564953],[3,74,15,0.000707452],[2,46,15,0.00031307],[1,28,15,0.000228574],[0,17,15,0.0002396],[0,10,15,0.000137731]],"inputs":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))"]],"memory":[[344272,16545840]],"method":["egg-herbie"],"outputs":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 (-.f64 (/.f64 #s(literal -2 binary64) x) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal -1 binary64)))) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64))))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[["(negabs x)"]],"time":174.3369140625,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[44400,44400]],"time":0.123046875,"type":"eval"},{"alts":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","next",19.118372823222444,"binary64"]],"compiler":[[15,10]],"memory":[[317840,317840]],"time":0.48291015625,"type":"prune"},{"egraph":[[0,592,46,0.002731903],[8,592,46,0.003722949],[7,521,46,0.004351809],[6,399,46,0.003494246],[5,248,46,0.002270334],[4,134,46,0.001270148],[3,74,46,0.00061032],[2,46,46,0.000303692],[1,28,46,0.000225763],[0,17,46,0.000241047],[0,10,46,0.000157356]],"inputs":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","#s(literal 1 binary64)","(+.f64 x #s(literal 1 binary64))","x","(/.f64 #s(literal 2 binary64) x)","#s(literal 2 binary64)","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","(-.f64 x #s(literal 1 binary64))"]],"locations":[["(+.f64 x #s(literal 1 binary64))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","cost-diff",0],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x))","cost-diff",0],["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","cost-diff",0]],"memory":[[2055152,2055152]],"method":["egg-herbie"],"outputs":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 (-.f64 (/.f64 #s(literal -2 binary64) x) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal -1 binary64)))) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x))","(-.f64 (/.f64 #s(literal -2 binary64) x) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal -1 binary64)))","#s(literal 1 binary64)","(+.f64 x #s(literal 1 binary64))","(-.f64 x #s(literal -1 binary64))","x","(/.f64 #s(literal 2 binary64) x)","#s(literal 2 binary64)","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","(-.f64 x #s(literal 1 binary64))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":28.80615234375,"type":"simplify"},{"compiler":[[48,12]],"locations":[["(-.f64 x #s(literal 1 binary64))","accuracy",0.0],["(+.f64 x #s(literal 1 binary64))","accuracy",0.0],["(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x))","accuracy",0.0078125],["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","accuracy",19.11039606865391]],"memory":[[-390256,16948608]],"mixsample":[[6.78271484375,"adjust",800],[5.052001953125,"ival-div",0],[3.711181640625,"ival-add",0],[0.037841796875,"ival-sub",1600],[7.0361328125,"ival-div",400],[0.242919921875,"ival-div",1600],[0.091552734375,"ival-assert",0],[1.364013671875,"ival-add",400],[2.326904296875,"ival-sub",0],[0.16015625,"ival-true",0],[2.14892578125,"ival-sub",400],[0.290283203125,"exact",0],[0.402587890625,"adjust",2000]],"outcomes":[[37.203369140625,1,"valid",231],[3.704345703125,2,"valid",17],[0.502197265625,0,"valid",8]],"time":55.673828125,"type":"localize"},{"count":[[5,37]],"inputs":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(-.f64 x #s(literal 1 binary64))"]],"memory":[[1224336,1224336]],"outputs":[["(/ -2 x)","(/ (- (* -2 (pow x 2)) 2) x)","(/ (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2) x)","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2)) 2) x)","(/ (- x 2) x)","(/ (- (* x (+ 1 (* -1 x))) 2) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 2) x)","1","(+ 1 (* -1 x))","(+ 1 (* x (- x 1)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(+ 1 x)","-1","(- x 1)","(/ 2 (pow x 3))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))) (pow x 3))","(/ -1 x)","(* -1 (/ (+ 1 (/ 1 x)) x))","(/ (- (/ 1 (pow x 2)) (+ 1 (/ 1 x))) x)","(/ (- (/ 1 (pow x 2)) (+ 1 (+ (/ 1 x) (/ 1 (pow x 3))))) x)","(/ 1 x)","(/ (- 1 (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","x","(* x (+ 1 (/ 1 x)))","(* x (- 1 (/ 1 x)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 2))) 2) (pow x 3)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 4))) (+ 2 (* 2 (/ 1 (pow x 2))))) (pow x 3)))","(* -1 (/ (+ 1 (* -1 (/ (- (/ 1 x) 1) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))) x))","(* -1 (/ (- (/ 1 x) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(* -1 (* x (- (/ 1 x) 1)))"]],"series":[[0.81103515625,"((+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (+ x 1)) (+ x 1) (- x 1))","x","-inf"],[0.886962890625,"((+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (+ x 1)) (+ x 1) (- x 1))","x","inf"],[0.68212890625,"((+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (+ x 1)) (+ x 1) (- x 1))","x","0"]],"time":2.794189453125,"type":"series"},{"count":[[37,36]],"egraph":[[0,8077,313,0.065552819],[4,6992,319,0.019085702],[3,2230,319,0.030187312],[2,701,332,0.007341697],[1,268,353,0.002160444],[0,102,373,0.000889252]],"inputs":[["(/ -2 x)","(/ (- (* -2 (pow x 2)) 2) x)","(/ (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2) x)","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2)) 2) x)","(/ (- x 2) x)","(/ (- (* x (+ 1 (* -1 x))) 2) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 2) x)","1","(+ 1 (* -1 x))","(+ 1 (* x (- x 1)))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(+ 1 x)","-1","(- x 1)","(/ 2 (pow x 3))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))) (pow x 3))","(/ -1 x)","(* -1 (/ (+ 1 (/ 1 x)) x))","(/ (- (/ 1 (pow x 2)) (+ 1 (/ 1 x))) x)","(/ (- (/ 1 (pow x 2)) (+ 1 (+ (/ 1 x) (/ 1 (pow x 3))))) x)","(/ 1 x)","(/ (- 1 (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","x","(* x (+ 1 (/ 1 x)))","(* x (- 1 (/ 1 x)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 2))) 2) (pow x 3)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 4))) (+ 2 (* 2 (/ 1 (pow x 2))))) (pow x 3)))","(* -1 (/ (+ 1 (* -1 (/ (- (/ 1 x) 1) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))) x))","(* -1 (/ (- (/ 1 x) 1) x))","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(* -1 (* x (- (/ 1 x) 1)))"]],"memory":[[-6272,31849968]],"method":["egg-herbie"],"outputs":[["(/ -2 x)","(/.f64 #s(literal -2 binary64) x)","(/ (- (* -2 (pow x 2)) 2) x)","(fma.f64 #s(literal -2 binary64) x (/.f64 #s(literal -2 binary64) x))","(/ (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2) x)","(fma.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) x) #s(literal -2 binary64) (/.f64 #s(literal -2 binary64) x))","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2)) 2) x)","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (fma.f64 (*.f64 x x) #s(literal -2 binary64) #s(literal -2 binary64))) x)","(/ (- x 2) x)","(/.f64 (-.f64 x #s(literal 2 binary64)) x)","(/ (- (* x (+ 1 (* -1 x))) 2) x)","(-.f64 (/.f64 (-.f64 x #s(literal 2 binary64)) x) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 2) x)","(fma.f64 (-.f64 x #s(literal 1 binary64)) x (/.f64 (-.f64 x #s(literal 2 binary64)) x))","1","#s(literal 1 binary64)","(+ 1 (* -1 x))","(-.f64 #s(literal 1 binary64) x)","(+ 1 (* x (- x 1)))","(fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (- (* x (+ 1 (* -1 x))) 1)))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) x))","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","-1","#s(literal -1 binary64)","(- x 1)","(-.f64 x #s(literal 1 binary64))","(/ 2 (pow x 3))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 3))","(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))) (pow x 3))","(/.f64 (-.f64 (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64)) (/.f64 (/.f64 #s(literal -2 binary64) x) x)) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))) (pow x 3))","(/.f64 (-.f64 (+.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 6 binary64))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 #s(literal -2 binary64) (/.f64 #s(literal 2 binary64) (*.f64 x x)))) (pow.f64 x #s(literal 3 binary64)))","(/ -1 x)","(/.f64 #s(literal -1 binary64) x)","(* -1 (/ (+ 1 (/ 1 x)) x))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)","(/ (- (/ 1 (pow x 2)) (+ 1 (/ 1 x))) x)","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)","(/ (- (/ 1 (pow x 2)) (+ 1 (+ (/ 1 x) (/ 1 (pow x 3))))) x)","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (- 1 (/ 1 x)) x)","(/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (/ 1 x)) x)","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x) #s(literal -1 binary64)) x)","(/ (- (+ 1 (/ 1 (pow x 2))) (+ (/ 1 x) (/ 1 (pow x 3)))) x)","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal -1 binary64)) x)","x","(* x (+ 1 (/ 1 x)))","(+.f64 #s(literal 1 binary64) x)","(* x (- 1 (/ 1 x)))","(-.f64 x #s(literal 1 binary64))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 2))) 2) (pow x 3)))","(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64))))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 4))) (+ 2 (* 2 (/ 1 (pow x 2))))) (pow x 3)))","(/.f64 (*.f64 (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (/ (+ 1 (* -1 (/ (- (/ 1 x) 1) x))) x))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))) x))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal 1 binary64)) x)","(* -1 (/ (- (/ 1 x) 1) x))","(/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x)","(* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x) #s(literal -1 binary64)) x)","(* -1 (/ (- (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x)) 1) x))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) x) x) #s(literal 1 binary64)) x) #s(literal -1 binary64)) x)","(* -1 (* x (- (/ 1 x) 1)))","(-.f64 x #s(literal 1 binary64))"]],"stop":[["iter limit",1],["node limit",1]],"time":211.263916015625,"type":"simplify"},{"count":[[5,441]],"egraph":[[0,8514,32,0.083495879],[2,1095,35,0.025265576],[1,94,35,0.005423741],[0,17,35,0.001078997],[0,10,35,0.000144927]],"inputs":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 x #s(literal 1 binary64))","(-.f64 x #s(literal 1 binary64))"]],"memory":[[3003696,69596640]],"outputs":[["(*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64))) (pow.f64 (+.f64 (/.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (fma.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (*.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (/.f64 #s(literal 2 binary64) x)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))) (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))) (fma.f64 (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))) (*.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))))))","(/.f64 (+.f64 (pow.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 3 binary64)) (*.f64 #s(literal -8 binary64) (pow.f64 x #s(literal -3 binary64)))) (fma.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (*.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (/.f64 #s(literal -2 binary64) x)))))","(/.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (*.f64 (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))))","(/.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (*.f64 (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)))) (neg.f64 (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))) (neg.f64 (neg.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (+.f64 (/.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64)))) (neg.f64 (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal -1 binary64)))) (neg.f64 (*.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal -1 binary64)))) (neg.f64 (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)))) (neg.f64 (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (+.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) x))","(/.f64 (fma.f64 #s(literal -1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (neg.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (neg.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -2 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 2 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64))) (+.f64 x #s(literal 1 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))))","(/.f64 (+.f64 x (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) x))","(/.f64 (fma.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (neg.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x)) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (neg.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x)) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -2 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (-.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 2 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x)) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64))) (+.f64 x #s(literal 1 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))))","(/.f64 (+.f64 x (*.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(/.f64 (fma.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x)) (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x)) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -2 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 2 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x)) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64))) (+.f64 x #s(literal 1 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))))","(/.f64 (fma.f64 (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 x #s(literal -1 binary64))) (*.f64 x (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) x) (*.f64 x (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) x) (*.f64 x (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)) #s(literal -1 binary64))) (*.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)) #s(literal 1 binary64))) (*.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)))) #s(literal -1 binary64))) (*.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)))) #s(literal 1 binary64))) (*.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)))) #s(literal 1 binary64))) (*.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)))) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (neg.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) #s(literal -1 binary64))) (*.f64 (neg.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (neg.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) #s(literal 1 binary64))) (*.f64 (neg.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) #s(literal -1 binary64))) (*.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (neg.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (neg.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (neg.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))) (-.f64 x #s(literal 1 binary64)) (*.f64 (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x)) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -2 binary64))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x)) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -2 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 2 binary64))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (-.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64))) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x)) #s(literal -1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x)) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64))) (+.f64 x #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64))) (+.f64 x #s(literal 1 binary64))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64))) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64))) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 1 binary64))) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) #s(literal -1 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)) (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) #s(literal 1 binary64))) (*.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) (-.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64))) (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (neg.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (/.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64))) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 1 binary64))) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal -1 binary64))) (*.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal -1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64))))))","(/.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64))) (+.f64 (/.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) (fma.f64 #s(literal -1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (fma.f64 #s(literal -1 binary64) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x)) (fma.f64 #s(literal -1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) (fma.f64 #s(literal 1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (fma.f64 #s(literal 1 binary64) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x)) (fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 x #s(literal 1 binary64))) (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (-.f64 x #s(literal 1 binary64))) (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64))))) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64))) (/.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64))) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))) (/.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64))) (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64))) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 x #s(literal 1 binary64))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64))) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 x #s(literal 1 binary64))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))) (/.f64 (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))) (/.f64 (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64))) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (pow.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64))) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 x #s(literal 1 binary64))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 x #s(literal 1 binary64))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(-.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))) (/.f64 (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)) (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))) (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))))","(-.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))) (/.f64 (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 3 binary64)) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))))","(-.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (/.f64 #s(literal 2 binary64) x))","(-.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (/.f64 #s(literal -2 binary64) x))","(+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(+.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (pow.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) (fma.f64 (/.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) (*.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (fma.f64 (/.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (/.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (*.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (/.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 x (*.f64 (+.f64 x #s(literal 1 binary64)) x)) #s(literal 3 binary64)) (pow.f64 (*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 x (*.f64 (+.f64 x #s(literal 1 binary64)) x)) (/.f64 x (*.f64 (+.f64 x #s(literal 1 binary64)) x)) (fma.f64 (*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (*.f64 (/.f64 x (*.f64 (+.f64 x #s(literal 1 binary64)) x)) (*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))))))","(/.f64 (fma.f64 #s(literal -8 binary64) (pow.f64 x #s(literal -3 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 #s(literal -2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (neg.f64 (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64)))) (neg.f64 x))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -2 binary64)))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (-.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 2 binary64)))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64))) (+.f64 x #s(literal 1 binary64)))) (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 #s(literal -2 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 (neg.f64 (neg.f64 x)) #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 x)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (neg.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 x)) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 x #s(literal 1 binary64)) (*.f64 (neg.f64 (neg.f64 x)) #s(literal 1 binary64))) (*.f64 (neg.f64 (neg.f64 x)) (+.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal -2 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal -1 binary64))) (*.f64 x (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal -2 binary64) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) x) (*.f64 x (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 x #s(literal 1 binary64)) x) (*.f64 (+.f64 x #s(literal 1 binary64)) x))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 (*.f64 x #s(literal 1/2 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 x #s(literal 1/2 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (*.f64 x #s(literal 1/2 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 x #s(literal 1/2 binary64)) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 x #s(literal 1/2 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 x #s(literal 1/2 binary64)) (+.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 2 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 (neg.f64 x) #s(literal -1 binary64))) (*.f64 (neg.f64 x) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal 2 binary64) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) (+.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 (neg.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (*.f64 x #s(literal 1/2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 (neg.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (*.f64 x #s(literal 1/2 binary64))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)) (*.f64 (neg.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (*.f64 x #s(literal 1/2 binary64))) (+.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 (neg.f64 x))))","(/.f64 (fma.f64 #s(literal -1 binary64) x (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x))","(/.f64 (fma.f64 #s(literal -1 binary64) (*.f64 x #s(literal 1/2 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 (*.f64 x #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 x)) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) #s(literal -2 binary64))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (neg.f64 (neg.f64 x))))","(/.f64 (+.f64 x (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) #s(literal -2 binary64))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) x))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64)) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) #s(literal -1 binary64))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (*.f64 x #s(literal 1/2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 x) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) #s(literal 2 binary64))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (neg.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (*.f64 x #s(literal 1/2 binary64))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) (neg.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 x)) (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 (neg.f64 x))))","(/.f64 (+.f64 x (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (+.f64 x #s(literal 1 binary64)) x))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 x) (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 (*.f64 x #s(literal 1/2 binary64))) (+.f64 x #s(literal 1 binary64))) (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))) x)","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))) (neg.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))))","(/.f64 (neg.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))) (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (-.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64))) (+.f64 x #s(literal 1 binary64))) (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64))))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)))))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))","(/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (*.f64 (+.f64 x #s(literal 1 binary64)) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 x (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x)) (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x) (-.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64))) (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x)) (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64))) (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64))) (+.f64 x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 #s(literal -2 binary64) x))","(fma.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64))) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 x #s(literal 1 binary64))) (/.f64 #s(literal -2 binary64) x))","(fma.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))) (/.f64 (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))) (/.f64 #s(literal -2 binary64) x))","(fma.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -2 binary64) x))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -2 binary64) x))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -2 binary64) x))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal -2 binary64) x))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)) (/.f64 #s(literal -2 binary64) x))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (/.f64 #s(literal -2 binary64) x))","(fma.f64 #s(literal -2 binary64) (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal -2 binary64) x))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 x #s(literal 1 binary64))) (/.f64 #s(literal -2 binary64) x))","(fma.f64 #s(literal 2 binary64) (neg.f64 (pow.f64 x #s(literal -1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64) (/.f64 #s(literal -2 binary64) x))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x))","(-.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x))) (/.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x))))","(-.f64 (/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x))) (/.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -2 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x))))","(-.f64 (/.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x)) (/.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x)))","(-.f64 (/.f64 (*.f64 #s(literal -1 binary64) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64)))) (/.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64)))))","(-.f64 (/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))) (/.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))))","(-.f64 (/.f64 (*.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64)))) (/.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64)))))","(-.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))))","(-.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (/.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)) (fma.f64 (/.f64 #s(literal 2 binary64) x) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))))","(-.f64 (/.f64 x (*.f64 (+.f64 x #s(literal 1 binary64)) x)) (*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))))","(-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))","(+.f64 (/.f64 #s(literal -2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x))","(*.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 x #s(literal 1 binary64))) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))) (/.f64 (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))))","(*.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 x #s(literal 1 binary64))))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(pow.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))","(/.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (neg.f64 (fma.f64 x x #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))","(neg.f64 (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))))","(-.f64 (/.f64 (/.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (fma.f64 x x #s(literal -1 binary64))))","(-.f64 (/.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))) (fma.f64 x x #s(literal -1 binary64))) (/.f64 (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(-.f64 (/.f64 x (fma.f64 x x #s(literal -1 binary64))) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(exp.f64 (neg.f64 (log1p.f64 x)))","(*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (-.f64 x #s(literal 1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))))","(*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64))","(pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (fma.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) #s(literal 1 binary64))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) x)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 x #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) x #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)))","(-.f64 (/.f64 (*.f64 x x) (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))))","(-.f64 (/.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(exp.f64 (log1p.f64 x))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) x)","(*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))))","(*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 (+.f64 x #s(literal 1 binary64)) (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))))","(pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 x #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (/.f64 x #s(literal 1 binary64)) (/.f64 x #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (*.f64 (/.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (fma.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))) (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))) (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))) (fma.f64 (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))) (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) (neg.f64 x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) #s(literal 1 binary64))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (*.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (-.f64 x #s(literal -1 binary64))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64)))))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1 binary64)))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 x #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) x #s(literal -1 binary64))","(-.f64 (/.f64 (*.f64 x x) (*.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))) (/.f64 #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))) (/.f64 #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))))","(-.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1 binary64))))))","(-.f64 (/.f64 (/.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64)) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(-.f64 (/.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))","(-.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))) (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 x #s(literal 1 binary64))","(exp.f64 (log.f64 (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(literal -1 binary64) x)","(+.f64 x #s(literal -1 binary64))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":342.635009765625,"type":"rewrite"},{"compiler":[[14474,1719]],"memory":[[6487216,44211056]],"time":57.876953125,"type":"eval"},{"alts":[["(/.f64 (fma.f64 (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) x) (*.f64 x (-.f64 x #s(literal 1 binary64))))","fresh",19.08257791124773,"binary64"],["(/.f64 (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))))","next",52.09229386171164,"binary64"],["(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x)))","fresh",51.55271882339056,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)))))","fresh",52.092293861715305,"binary64"],["(+.f64 (/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 x #s(literal 1 binary64)) x) (*.f64 (+.f64 x #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","fresh",53.51386727848258,"binary64"],["(+.f64 (/.f64 (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))) x) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","next",19.115635166926918,"binary64"],["(+.f64 (-.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","fresh",53.59151123443976,"binary64"],["(+.f64 (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","fresh",61.65574790049415,"binary64"],["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","next",19.416302398474528,"binary64"],["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","fresh",19.38380803420576,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","fresh",0.7699285793005082,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))","next",60.83974921498693,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))))","next",0.5100574736945012,"binary64"]],"compiler":[[22,11],[28,12],[28,12],[30,13],[18,10],[19,11],[18,11],[17,12],[23,16],[19,14],[21,15],[19,13],[33,23],[22,11],[28,12],[28,12],[30,13],[18,10],[19,11],[18,11],[17,12],[23,16],[19,14],[21,15],[19,13],[33,23]],"count":[[470,13]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[469,13],"picked":[1,0]}],"memory":[[-4098272,22903968]],"min-error":[[0.5100574736945012,"binary64"]],"time":22.881103515625,"type":"prune"},{"egraph":[[0,8241,289,0.102047007],[5,7451,303,0.02148591],[4,2459,303,0.030952297],[3,758,309,0.013932787],[2,269,309,0.003152342],[1,126,333,0.001464762],[0,70,333,0.001295609],[0,43,339,0.000549851]],"inputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))))","(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64)))","(-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","#s(literal 2 binary64)","(*.f64 x x)","x","#s(literal -2 binary64)","(pow.f64 x #s(literal 5 binary64))","#s(literal 5 binary64)","(/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))","(pow.f64 x #s(literal 3 binary64))","#s(literal 3 binary64)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))","(/.f64 #s(literal -2 binary64) x)","#s(literal -2 binary64)","x","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)","(-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","#s(literal 1 binary64)","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","(-.f64 x #s(literal 1 binary64))","(+.f64 (/.f64 (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))) x) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(/.f64 (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))) x)","(/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64)))","(-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))","x","(*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))","#s(literal 2 binary64)","(+.f64 x #s(literal 1 binary64))","#s(literal 1 binary64)","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","(-.f64 x #s(literal 1 binary64))","(/.f64 (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)))","(-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))","x","(*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))","#s(literal 2 binary64)","(+.f64 x #s(literal 1 binary64))","#s(literal 1 binary64)","(-.f64 x #s(literal 1 binary64))","(*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))","(*.f64 (+.f64 x #s(literal 1 binary64)) x)","(*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64)))"]],"locations":[["(*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))","cost-diff",1],["(fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)))","cost-diff",1],["(*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))","cost-diff",2],["(-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))","cost-diff",3],["(+.f64 (/.f64 (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))) x) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","cost-diff",0],["(*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))","cost-diff",1],["(/.f64 (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))) x)","cost-diff",1],["(-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))","cost-diff",3],["(-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64))","cost-diff",0],["(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)","cost-diff",0],["#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x))","cost-diff",0],["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","cost-diff",0],["(/.f64 #s(literal -2 binary64) x)","cost-diff",0],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))","cost-diff",0],["(-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64))","cost-diff",0],["(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64)))","cost-diff",0],["(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64))))","cost-diff",0],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))))","cost-diff",0]],"memory":[[7757136,43706432]],"method":["egg-herbie"],"outputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))))","(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64))))","(-.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64)))","(/.f64 (-.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64)))","(-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64))","(-.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal -2 binary64))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(/.f64 (/.f64 #s(literal 2 binary64) x) x)","#s(literal 2 binary64)","(*.f64 x x)","x","#s(literal -2 binary64)","(pow.f64 x #s(literal 5 binary64))","#s(literal 5 binary64)","(/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))","(pow.f64 x #s(literal 3 binary64))","#s(literal 3 binary64)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))","(/.f64 #s(literal -2 binary64) x)","#s(literal -2 binary64)","x","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) x) x)) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64))))","#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x))","#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) x) x))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)","(/.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) x) x)","(-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64))","(/.f64 (-.f64 #s(literal -1 binary64) x) x)","(/.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","#s(literal 1 binary64)","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","(-.f64 x #s(literal 1 binary64))","(+.f64 (/.f64 (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))) x) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 (/.f64 (-.f64 #s(literal -2 binary64) x) (fma.f64 x x x)) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64))))","(/.f64 (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))) x)","(/.f64 (-.f64 #s(literal -2 binary64) x) (fma.f64 x x x))","(/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64)))","(/.f64 (-.f64 #s(literal -2 binary64) x) (-.f64 x #s(literal -1 binary64)))","(-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))","(-.f64 #s(literal -2 binary64) x)","x","(*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))","(fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64))","#s(literal 2 binary64)","(+.f64 x #s(literal 1 binary64))","(-.f64 x #s(literal -1 binary64))","#s(literal 1 binary64)","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","(-.f64 x #s(literal 1 binary64))","(/.f64 (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))))","(/.f64 (/.f64 (fma.f64 x (-.f64 (-.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal -2 binary64))) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))","(fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)))","(fma.f64 x (-.f64 (-.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal -2 binary64)))","(-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))","(-.f64 #s(literal -2 binary64) x)","x","(*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))","(fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64))","#s(literal 2 binary64)","(+.f64 x #s(literal 1 binary64))","(-.f64 x #s(literal -1 binary64))","#s(literal 1 binary64)","(-.f64 x #s(literal 1 binary64))","(*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))","(fma.f64 x x x)","(*.f64 (+.f64 x #s(literal 1 binary64)) x)","(fma.f64 x x x)","(*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64)))","(*.f64 (fma.f64 x x x) (-.f64 x #s(literal 1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":288.078857421875,"type":"simplify"},{"compiler":[[305,39]],"locations":[["(*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))","accuracy",0.0],["(*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64)))","accuracy",0.09765625],["(/.f64 (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))))","accuracy",0.5139637236945012],["(fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)))","accuracy",61.508444313698575],["(+.f64 x #s(literal 1 binary64))","accuracy",0.0],["(*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))","accuracy",0.0],["(/.f64 (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))) x)","accuracy",0.015625],["(+.f64 (/.f64 (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))) x) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","accuracy",19.11039606865391],["(-.f64 x #s(literal 1 binary64))","accuracy",0.0],["(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)","accuracy",0.0078125],["#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x))","accuracy",0.262171431749646],["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","accuracy",19.11039606865391],["(/.f64 #s(literal -2 binary64) x)","accuracy",0.0],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))","accuracy",60.83974921498693],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))))","accuracy",0.0],["(/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))","accuracy",0.5100574736945012],["(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64)))","accuracy",0.7040051621802543],["(/.f64 #s(literal 2 binary64) (*.f64 x x))","accuracy",1.024693459032993]],"memory":[[-7977456,59191312]],"mixsample":[[0.547119140625,"ival-sub",1200],[0.53076171875,"ival-add",1200],[28.57177734375,"ival-div",0],[25.38525390625,"adjust",800],[2.185791015625,"ival-mult",1200],[0.711181640625,"ival-sub",1600],[58.728759765625,"ival-div",400],[0.490966796875,"ival-sub",2000],[1.392578125,"ival-mult",2000],[0.474609375,"ival-div",1600],[0.155029296875,"ival-assert",0],[10.203125,"ival-sub",0],[1.600341796875,"ival-sub",400],[1.789794921875,"adjust",2000],[17.689453125,"ival-pow",0],[0.364501953125,"ival-sub",2400],[1.290771484375,"ival-mult",800],[10.2822265625,"ival-add",0],[0.195556640625,"ival-mult",400],[0.697021484375,"ival-add",1600],[0.5205078125,"ival-sub",800],[12.56640625,"ival-mult",0],[1.78857421875,"ival-mult",1600],[0.452880859375,"ival-add",2000],[0.35546875,"ival-true",0],[0.66357421875,"ival-mult",2400],[0.257080078125,"ival-add",2400],[0.45458984375,"ival-add",800],[0.901123046875,"exact",0]],"outcomes":[[217.90966796875,1,"valid",236],[16.466796875,2,"valid",17],[0.8271484375,0,"valid",3]],"time":287.4140625,"type":"localize"},{"count":[[22,55]],"inputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))))","(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64)))","(-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))","(/.f64 #s(literal -2 binary64) x)","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)","(-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64))","(-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))","(/.f64 (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))) x)","(*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 (/.f64 (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))) x) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))","(fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))","(-.f64 x #s(literal 1 binary64))","(+.f64 x #s(literal 1 binary64))","(/.f64 (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))))","(*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64)))"]],"memory":[[343216,7793296]],"outputs":[["(/ -2 x)","(/ (- (* -2 (pow x 2)) 2) x)","(/ (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2) x)","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2)) 2) x)","(/ 2 (pow x 7))","(/ (+ 2 (* 2 (pow x 2))) (pow x 7))","(/ (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))) (pow x 7))","(/ 2 (pow x 2))","(/ (+ 2 (* 2 (pow x 2))) (pow x 2))","(/ (- x 2) x)","(/ (- (* x (+ 1 (* -1 x))) 2) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 2) x)","(/ -1 (pow x 2))","(/ (- (* -1 x) 1) (pow x 2))","(/ -1 x)","(/ (- (* -1 x) 1) x)","-2","(- (* -1 x) 2)","2","(+ 2 (* 2 x))","x","(* x (+ 1 x))","(/ -2 (pow x 3))","-1","(- x 1)","1","(+ 1 x)","(* -1 x)","(* x (- (pow x 2) 1))","(/ 2 (pow x 3))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))) (pow x 3))","(/ 2 (pow x 5))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 5))","(+ 2 (* 2 (/ 1 (pow x 2))))","(* -1 (/ (+ 1 (/ 1 x)) x))","(/ (- (/ 1 (pow x 2)) (+ 1 (/ 1 x))) x)","(/ (- (/ 1 (pow x 2)) (+ 1 (+ (/ 1 x) (/ 1 (pow x 3))))) x)","(* -1 (+ 1 (/ 1 x)))","(* -1 (* x (+ 1 (* 2 (/ 1 x)))))","(* 2 x)","(* x (+ 2 (* 2 (/ 1 x))))","(pow x 2)","(* (pow x 2) (+ 1 (/ 1 x)))","(* x (- 1 (/ 1 x)))","(* x (+ 1 (/ 1 x)))","(pow x 3)","(* (pow x 3) (- 1 (/ 1 (pow x 2))))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 2))) 2) (pow x 3)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 4))) (+ 2 (* 2 (/ 1 (pow x 2))))) (pow x 3)))","(* -1 (/ (+ 1 (* -1 (/ (- (/ 1 x) 1) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))) x))","(* -1 (* x (- (/ 1 x) 1)))","(* -1 (* (pow x 3) (- (/ 1 (pow x 2)) 1)))"]],"series":[[5.64404296875,"((+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/ -2 (pow x 3))) (/ (- (/ 2 (* x x)) -2) (pow x 5)) (- (/ 2 (* x x)) -2) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ -2 x) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ 1 (+ x 1)) (/ 2 x)) (/ (- (/ -1 x) 1) x) (- (/ -1 x) 1) (- x (* 2 (+ x 1))) (/ (/ (- x (* 2 (+ x 1))) (+ x 1)) x) (* 2 (+ x 1)) (+ (/ (/ (- x (* 2 (+ x 1))) (+ x 1)) x) (/ 1 (- x 1))) (* (* (+ x 1) x) 1) (+ (* (- x (* 2 (+ x 1))) (- x 1)) (* (* (+ x 1) x) 1)) (/ 2 (* x x)) (/ -2 (pow x 3)) (- x 1) (+ x 1) (/ (+ (* (- x (* 2 (+ x 1))) (- x 1)) (* (* (+ x 1) x) 1)) (* (* (+ x 1) x) (- x 1))) (* (* (+ x 1) x) (- x 1)))","x","-inf"],[6.376953125,"((+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/ -2 (pow x 3))) (/ (- (/ 2 (* x x)) -2) (pow x 5)) (- (/ 2 (* x x)) -2) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ -2 x) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ 1 (+ x 1)) (/ 2 x)) (/ (- (/ -1 x) 1) x) (- (/ -1 x) 1) (- x (* 2 (+ x 1))) (/ (/ (- x (* 2 (+ x 1))) (+ x 1)) x) (* 2 (+ x 1)) (+ (/ (/ (- x (* 2 (+ x 1))) (+ x 1)) x) (/ 1 (- x 1))) (* (* (+ x 1) x) 1) (+ (* (- x (* 2 (+ x 1))) (- x 1)) (* (* (+ x 1) x) 1)) (/ 2 (* x x)) (/ -2 (pow x 3)) (- x 1) (+ x 1) (/ (+ (* (- x (* 2 (+ x 1))) (- x 1)) (* (* (+ x 1) x) 1)) (* (* (+ x 1) x) (- x 1))) (* (* (+ x 1) x) (- x 1)))","x","inf"],[8.22509765625,"((+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/ -2 (pow x 3))) (/ (- (/ 2 (* x x)) -2) (pow x 5)) (- (/ 2 (* x x)) -2) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ -2 x) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ 1 (+ x 1)) (/ 2 x)) (/ (- (/ -1 x) 1) x) (- (/ -1 x) 1) (- x (* 2 (+ x 1))) (/ (/ (- x (* 2 (+ x 1))) (+ x 1)) x) (* 2 (+ x 1)) (+ (/ (/ (- x (* 2 (+ x 1))) (+ x 1)) x) (/ 1 (- x 1))) (* (* (+ x 1) x) 1) (+ (* (- x (* 2 (+ x 1))) (- x 1)) (* (* (+ x 1) x) 1)) (/ 2 (* x x)) (/ -2 (pow x 3)) (- x 1) (+ x 1) (/ (+ (* (- x (* 2 (+ x 1))) (- x 1)) (* (* (+ x 1) x) 1)) (* (* (+ x 1) x) (- x 1))) (* (* (+ x 1) x) (- x 1)))","x","0"]],"time":21.93896484375,"type":"series"},{"count":[[55,54]],"egraph":[[0,8361,370,0.085490677],[3,3599,382,0.032908195],[2,872,393,0.012541231],[1,332,411,0.004742693],[0,129,433,0.001786615]],"inputs":[["(/ -2 x)","(/ (- (* -2 (pow x 2)) 2) x)","(/ (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2) x)","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2)) 2) x)","(/ 2 (pow x 7))","(/ (+ 2 (* 2 (pow x 2))) (pow x 7))","(/ (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))) (pow x 7))","(/ 2 (pow x 2))","(/ (+ 2 (* 2 (pow x 2))) (pow x 2))","(/ (- x 2) x)","(/ (- (* x (+ 1 (* -1 x))) 2) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 2) x)","(/ -1 (pow x 2))","(/ (- (* -1 x) 1) (pow x 2))","(/ -1 x)","(/ (- (* -1 x) 1) x)","-2","(- (* -1 x) 2)","2","(+ 2 (* 2 x))","x","(* x (+ 1 x))","(/ -2 (pow x 3))","-1","(- x 1)","1","(+ 1 x)","(* -1 x)","(* x (- (pow x 2) 1))","(/ 2 (pow x 3))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))) (pow x 3))","(/ 2 (pow x 5))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 5))","(+ 2 (* 2 (/ 1 (pow x 2))))","(* -1 (/ (+ 1 (/ 1 x)) x))","(/ (- (/ 1 (pow x 2)) (+ 1 (/ 1 x))) x)","(/ (- (/ 1 (pow x 2)) (+ 1 (+ (/ 1 x) (/ 1 (pow x 3))))) x)","(* -1 (+ 1 (/ 1 x)))","(* -1 (* x (+ 1 (* 2 (/ 1 x)))))","(* 2 x)","(* x (+ 2 (* 2 (/ 1 x))))","(pow x 2)","(* (pow x 2) (+ 1 (/ 1 x)))","(* x (- 1 (/ 1 x)))","(* x (+ 1 (/ 1 x)))","(pow x 3)","(* (pow x 3) (- 1 (/ 1 (pow x 2))))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 2))) 2) (pow x 3)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 4))) (+ 2 (* 2 (/ 1 (pow x 2))))) (pow x 3)))","(* -1 (/ (+ 1 (* -1 (/ (- (/ 1 x) 1) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))) x))","(* -1 (* x (- (/ 1 x) 1)))","(* -1 (* (pow x 3) (- (/ 1 (pow x 2)) 1)))"]],"memory":[[-888368,36805600]],"method":["egg-herbie"],"outputs":[["(/ -2 x)","(/.f64 #s(literal -2 binary64) x)","(/ (- (* -2 (pow x 2)) 2) x)","(fma.f64 #s(literal -2 binary64) x (/.f64 #s(literal -2 binary64) x))","(/ (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2) x)","(fma.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) x) #s(literal -2 binary64) (/.f64 #s(literal -2 binary64) x))","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2)) 2) x)","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (fma.f64 (*.f64 x x) #s(literal -2 binary64) #s(literal -2 binary64))) x)","(/ 2 (pow x 7))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 7 binary64)))","(/ (+ 2 (* 2 (pow x 2))) (pow x 7))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 7 binary64))))","(/ (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))) (pow x 7))","(/.f64 (fma.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal 7 binary64)))","(/ 2 (pow x 2))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(/ (+ 2 (* 2 (pow x 2))) (pow x 2))","(*.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) x) (/.f64 #s(literal 2 binary64) x))","(/ (- x 2) x)","(/.f64 (-.f64 x #s(literal 2 binary64)) x)","(/ (- (* x (+ 1 (* -1 x))) 2) x)","(-.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) x))","(/ (- (* x (+ 1 (* x (- x 1)))) 2) x)","(-.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) x))","(/ -1 (pow x 2))","(/.f64 #s(literal -1 binary64) (*.f64 x x))","(/ (- (* -1 x) 1) (pow x 2))","(/.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) x) x)","(/ -1 x)","(/.f64 #s(literal -1 binary64) x)","(/ (- (* -1 x) 1) x)","(/.f64 (-.f64 #s(literal -1 binary64) x) x)","-2","#s(literal -2 binary64)","(- (* -1 x) 2)","(-.f64 #s(literal -2 binary64) x)","2","#s(literal 2 binary64)","(+ 2 (* 2 x))","(fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64))","x","(* x (+ 1 x))","(fma.f64 x x x)","(/ -2 (pow x 3))","(/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))","-1","#s(literal -1 binary64)","(- x 1)","(-.f64 x #s(literal 1 binary64))","1","#s(literal 1 binary64)","(+ 1 x)","(-.f64 x #s(literal -1 binary64))","(* -1 x)","(neg.f64 x)","(* x (- (pow x 2) 1))","(-.f64 (pow.f64 x #s(literal 3 binary64)) x)","(/ 2 (pow x 3))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 3))","(/.f64 (+.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal 2 binary64)) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))) (pow x 3))","(/.f64 (+.f64 (+.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 2 binary64)) (/.f64 #s(literal 2 binary64) (*.f64 x x))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))) (pow x 3))","(/.f64 (+.f64 (+.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 2 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) (/.f64 #s(literal 2 binary64) (*.f64 x x)))) (pow.f64 x #s(literal 3 binary64)))","(/ 2 (pow x 5))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 5))","(/.f64 (+.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal 2 binary64)) (pow.f64 x #s(literal 5 binary64)))","(+ 2 (* 2 (/ 1 (pow x 2))))","(+.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal 2 binary64))","(* -1 (/ (+ 1 (/ 1 x)) x))","(/.f64 (/.f64 (-.f64 #s(literal -1 binary64) x) x) x)","(/ (- (/ 1 (pow x 2)) (+ 1 (/ 1 x))) x)","(/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64)) (*.f64 x x))","(/ (- (/ 1 (pow x 2)) (+ 1 (+ (/ 1 x) (/ 1 (pow x 3))))) x)","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x)) x) #s(literal 1 binary64)) x)","(* -1 (+ 1 (/ 1 x)))","(/.f64 (-.f64 #s(literal -1 binary64) x) x)","(* -1 (* x (+ 1 (* 2 (/ 1 x)))))","(-.f64 #s(literal -2 binary64) x)","(* 2 x)","(*.f64 #s(literal 2 binary64) x)","(* x (+ 2 (* 2 (/ 1 x))))","(fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64))","(pow x 2)","(*.f64 x x)","(* (pow x 2) (+ 1 (/ 1 x)))","(fma.f64 x x x)","(* x (- 1 (/ 1 x)))","(-.f64 x #s(literal 1 binary64))","(* x (+ 1 (/ 1 x)))","(-.f64 x #s(literal -1 binary64))","(pow x 3)","(pow.f64 x #s(literal 3 binary64))","(* (pow x 3) (- 1 (/ 1 (pow x 2))))","(-.f64 (pow.f64 x #s(literal 3 binary64)) x)","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 2))) 2) (pow x 3)))","(-.f64 (/.f64 (+.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal 2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64))))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 4))) (+ 2 (* 2 (/ 1 (pow x 2))))) (pow x 3)))","(/.f64 (*.f64 (+.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (/ (+ 1 (* -1 (/ (- (/ 1 x) 1) x))) x))","(/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64)) (*.f64 x x))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))) x))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x)) x) #s(literal 1 binary64)) x)","(* -1 (* x (- (/ 1 x) 1)))","(-.f64 x #s(literal 1 binary64))","(* -1 (* (pow x 3) (- (/ 1 (pow x 2)) 1)))","(-.f64 (pow.f64 x #s(literal 3 binary64)) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":240.657958984375,"type":"simplify"},{"count":[[22,967]],"egraph":[[0,8603,218,0.065681785],[2,3481,237,0.037238765],[1,338,237,0.010695137],[0,70,251,0.002233035],[0,43,264,0.000394146]],"inputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))))","(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64)))","(-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))","(/.f64 #s(literal -2 binary64) x)","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)","(-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64))","(-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))","(/.f64 (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))) x)","(*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))","(+.f64 (/.f64 (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))) x) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))","(fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))","(-.f64 x #s(literal 1 binary64))","(+.f64 x #s(literal 1 binary64))","(/.f64 (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))))","(*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64)))"]],"memory":[[-2411152,67578016]],"outputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (fma.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -3 binary64)))))","(*.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (neg.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64)))) (pow.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -9 binary64)))) (pow.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal 8 binary64))))) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64))) (pow.f64 x #s(literal -8 binary64)))","(pow.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))) (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (neg.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -9 binary64))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 x #s(literal 8 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64))) (pow.f64 x #s(literal 5 binary64)))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (neg.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64)))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -9 binary64)))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal 8 binary64))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64))))) (neg.f64 (neg.f64 (pow.f64 x #s(literal 8 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 3 binary64))) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) #s(literal -2 binary64)))) (neg.f64 (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) #s(literal 2 binary64)))) (neg.f64 (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64))) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal 2 binary64)))) (neg.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64))) (pow.f64 x #s(literal 5 binary64)))) (neg.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal -2 binary64)))) (neg.f64 (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal 2 binary64)))) (neg.f64 (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64))) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64)))))","(/.f64 (/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64))) (pow.f64 x #s(literal 5 binary64))) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (neg.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64))))) (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -3 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (neg.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64))))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -9 binary64))))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -3 binary64))))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -9 binary64))))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal 8 binary64)))))))","(/.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64)))) (neg.f64 (pow.f64 x #s(literal 8 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 3 binary64))) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) #s(literal -2 binary64))) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) #s(literal 2 binary64))) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(/.f64 (-.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64))) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64))) (pow.f64 x #s(literal 5 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64))))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal -2 binary64))) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal 2 binary64))) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64))) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (neg.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64)))) (-.f64 (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -3 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (neg.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64)))) (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -9 binary64)))) (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -3 binary64)))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -9 binary64)))) (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal 8 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64))) (pow.f64 x #s(literal 8 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))) (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (neg.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -9 binary64)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 x #s(literal 8 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))) (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (neg.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -9 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 8 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64)))))","(fma.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -3 binary64))))","(fma.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -3 binary64))))","(fma.f64 (pow.f64 x #s(literal -5/2 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 5/2 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -3 binary64))))","(fma.f64 (pow.f64 x #s(literal -5 binary64)) (pow.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -3 binary64))))","(fma.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -3 binary64))))","(fma.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) #s(literal -1 binary64)) (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -3 binary64))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64))) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal -5 binary64)) (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -3 binary64))))","(fma.f64 #s(literal -2 binary64) (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -3 binary64)) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -3 binary64))))","(-.f64 (/.f64 (*.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64))) (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))) (/.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))))","(-.f64 (/.f64 (*.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64))) (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal 8 binary64)))))) (/.f64 (*.f64 (pow.f64 x #s(literal -9 binary64)) #s(literal -8 binary64)) (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal 8 binary64)))))))","(-.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 8 binary64))) (/.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal 8 binary64))))","(-.f64 (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64))) (fma.f64 #s(literal -2 binary64) (pow.f64 x #s(literal -5 binary64)) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))))","(-.f64 (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64))) (-.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64))) (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -3 binary64)))))","(-.f64 (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64))))","(+.f64 (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -3 binary64))) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(+.f64 (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -3 binary64))))","(*.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -5/2 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 5/2 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -5 binary64)) (pow.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal -5 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(pow.f64 (/.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal 5/2 binary64)))) (neg.f64 (pow.f64 x #s(literal 5/2 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)) (pow.f64 x #s(literal -5 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64)) (pow.f64 x #s(literal -5 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64))) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64))) #s(literal 2 binary64)))) (neg.f64 (fma.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64)) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64))))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 8 binary64) (pow.f64 (pow.f64 x #s(literal -7 binary64)) #s(literal 3 binary64))) (*.f64 #s(literal -8 binary64) (pow.f64 x #s(literal -15 binary64))))) (neg.f64 (+.f64 (pow.f64 (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64))))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))) (pow.f64 x #s(literal 5 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (pow.f64 x #s(literal 5 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64)))) (neg.f64 (pow.f64 x #s(literal 10 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (pow.f64 x #s(literal 5 binary64))))","(/.f64 (-.f64 (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (pow.f64 x #s(literal 5/2 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5/2 binary64)))) (pow.f64 x #s(literal 5/2 binary64)))","(/.f64 (-.f64 (neg.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x)) #s(literal 2 binary64)) (neg.f64 (pow.f64 x #s(literal 5 binary64))))","(/.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal 5/2 binary64))) (pow.f64 x #s(literal 5/2 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)) (pow.f64 x #s(literal -5 binary64))) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64)) (pow.f64 x #s(literal -5 binary64))) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64))) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64))) #s(literal 2 binary64))) (fma.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64)) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 8 binary64) (pow.f64 (pow.f64 x #s(literal -7 binary64)) #s(literal 3 binary64))) (*.f64 #s(literal -8 binary64) (pow.f64 x #s(literal -15 binary64)))) (+.f64 (pow.f64 (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))) (neg.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64))) (neg.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))) (neg.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64)))))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 5 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))) (pow.f64 x #s(literal 5 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (pow.f64 x #s(literal 5 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64))) (pow.f64 x #s(literal 10 binary64)))","(/.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)) (*.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64)) (*.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (neg.f64 (pow.f64 x #s(literal 5 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal 5 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 5 binary64))))","(neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (neg.f64 (pow.f64 x #s(literal 5 binary64)))))","(fma.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5/2 binary64))) (pow.f64 x #s(literal -9/2 binary64)) (neg.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64)))))","(fma.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (pow.f64 x #s(literal -5 binary64)) (neg.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64)))))","(fma.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64)) (neg.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64)))))","(-.f64 (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64))))","(exp.f64 (*.f64 (log.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(+.f64 (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64))) (neg.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64)))))","(*.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64)))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))) (neg.f64 (-.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)) (-.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal 2 binary64)))","(/.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)))","(/.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64)) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64)) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64))))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))","(fma.f64 #s(literal -2 binary64) (/.f64 (/.f64 #s(literal -1 binary64) x) x) #s(literal 2 binary64))","(fma.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 x #s(literal -1 binary64)) #s(literal 2 binary64))","(fma.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64))","(fma.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal 2 binary64))","(-.f64 (/.f64 (*.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64))) (/.f64 #s(literal 4 binary64) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64))))","(-.f64 (/.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64)) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64)))) (/.f64 #s(literal -8 binary64) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64)))))","(-.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal -2 binary64))","(+.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal 2 binary64))","(+.f64 #s(literal 2 binary64) (/.f64 (/.f64 #s(literal 2 binary64) x) x))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -2 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 2 binary64) x))","(*.f64 #s(literal -2 binary64) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 2 binary64) (/.f64 #s(literal -1 binary64) x))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -2 binary64) x))","(pow.f64 (/.f64 (*.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (neg.f64 (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))","(pow.f64 (*.f64 x #s(literal -1/2 binary64)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 x #s(literal -1/2 binary64))))","(/.f64 #s(literal -1 binary64) (*.f64 x #s(literal 1/2 binary64)))","(/.f64 #s(literal -2 binary64) (neg.f64 (neg.f64 x)))","(/.f64 #s(literal -2 binary64) x)","(/.f64 #s(literal 2 binary64) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 #s(literal 2 binary64) (neg.f64 x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 x #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 x #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1/2 binary64)))","(neg.f64 (/.f64 #s(literal 2 binary64) x))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal 2 binary64) x))","(exp.f64 (*.f64 (log.f64 (*.f64 x #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (pow.f64 (-.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (pow.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) #s(literal 2 binary64))) (+.f64 (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))) (neg.f64 (neg.f64 (-.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))))) (neg.f64 (neg.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (neg.f64 (-.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) #s(literal 2 binary64)) (/.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) (-.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)))) (neg.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (-.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (+.f64 (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) #s(literal 2 binary64)) (/.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) (-.f64 x #s(literal 1 binary64))))))","(/.f64 (+.f64 (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) #s(literal 2 binary64))) (+.f64 (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) #s(literal 2 binary64))) (+.f64 (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)))","(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)))","(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64) #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64))) #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)))","(-.f64 (/.f64 (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) #s(literal 2 binary64)) (-.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x))","(*.f64 (pow.f64 (/.f64 x (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (-.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)))","(*.f64 (neg.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64))) (/.f64 #s(literal -1 binary64) x))","(*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x))","(pow.f64 (/.f64 (/.f64 x (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 x (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (+.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (neg.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64)) (pow.f64 x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -6 binary64))) (pow.f64 x #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) x) #s(literal 2 binary64)) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) x) (pow.f64 x #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64))))) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)) x)))","(/.f64 (neg.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) x) x)) (*.f64 (neg.f64 x) x))","(/.f64 (-.f64 (neg.f64 (/.f64 #s(literal -1 binary64) x)) #s(literal -1 binary64)) (neg.f64 x))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (+.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)))","(/.f64 (*.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) #s(literal 1 binary64)) x)","(/.f64 (-.f64 (pow.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) x) #s(literal 2 binary64)) (pow.f64 x #s(literal -2 binary64))) (fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64)) (pow.f64 x #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -6 binary64))) (pow.f64 x #s(literal -3 binary64))) (+.f64 (pow.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) x) #s(literal 2 binary64)) (+.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) x) (pow.f64 x #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)))) (neg.f64 (neg.f64 x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 x (+.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 x (+.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x))","(/.f64 (*.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)) x))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal -1 binary64) x) x) x) (*.f64 x x))","(/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)) (*.f64 x (+.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) #s(literal 1 binary64)) (*.f64 x (+.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))))","(/.f64 (neg.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 x (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 x (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 x (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 x (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64))) x))","(neg.f64 (/.f64 (-.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64)) x))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x) (/.f64 #s(literal -1 binary64) x))","(fma.f64 (/.f64 #s(literal -1 binary64) x) (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) x))","(fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal -1 binary64) x))","(-.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) x) (pow.f64 x #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (/.f64 x (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)))) #s(literal -1 binary64)))","(+.f64 (/.f64 (/.f64 #s(literal -1 binary64) x) x) (/.f64 #s(literal -1 binary64) x))","(*.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)) (-.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))))","(/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)) (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal -2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)) (-.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)) (-.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) #s(literal 1 binary64))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64) #s(literal -1 binary64))","(fma.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64))","(expm1.f64 (*.f64 (log.f64 (*.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)))","(expm1.f64 (*.f64 (log.f64 (neg.f64 x)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 x #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64))) (pow.f64 (+.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (neg.f64 x) #s(literal -3 binary64)) (+.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x))) (pow.f64 (+.f64 (+.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal -1 binary64) x)) #s(literal -1 binary64)))","(-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64))","(+.f64 (/.f64 #s(literal -1 binary64) x) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) x))","(*.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64))) (pow.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (*.f64 x x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (*.f64 x x)))))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 x x (-.f64 (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64)) (*.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (*.f64 x x))))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64))) (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64))) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64)) (*.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))))))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 3 binary64))) (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (*.f64 x x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 3 binary64)))))","(fma.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 2 binary64) x)","(fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)","(fma.f64 #s(literal -1 binary64) (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) x)","(fma.f64 #s(literal -2 binary64) (+.f64 x #s(literal 1 binary64)) x)","(fma.f64 #s(literal 2 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x)","(fma.f64 x #s(literal 1 binary64) (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)))","(fma.f64 #s(literal 1 binary64) x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)))","(-.f64 (-.f64 x (*.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))","(-.f64 (/.f64 (*.f64 x x) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x)) (/.f64 (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x)))","(-.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (*.f64 x x))) (/.f64 (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 3 binary64)) (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (*.f64 x x))))","(-.f64 x (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)))","(+.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x)","(+.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)))","(*.f64 (pow.f64 (/.f64 x (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))))","(*.f64 (pow.f64 (/.f64 x (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64))) (pow.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (pow.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal -1 binary64) x))","(*.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) x))","(*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(pow.f64 (/.f64 (fma.f64 x x x) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) x) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) x)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (neg.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x x)))","(/.f64 (neg.f64 (*.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (pow.f64 x #s(literal -1 binary64)))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (pow.f64 x #s(literal -1 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64))))) (neg.f64 (neg.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -2 binary64)))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (-.f64 (neg.f64 x) (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)))) (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64))) (+.f64 x #s(literal 1 binary64)))) (neg.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (*.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x x)))","(/.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) x) (+.f64 x #s(literal 1 binary64)))","(/.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) #s(literal 1 binary64)) (fma.f64 x x x))","(/.f64 (*.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (pow.f64 x #s(literal -1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (pow.f64 x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64)))","(/.f64 (neg.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x))) (neg.f64 (*.f64 x (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x))) (neg.f64 (neg.f64 (fma.f64 x x x))))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64)))) (neg.f64 (*.f64 (fma.f64 x x x) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 x x x) (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (*.f64 x x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64)))) (neg.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64)))) (neg.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))))","(/.f64 (*.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) #s(literal 1 binary64)) x)","(/.f64 (*.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x))","(/.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) #s(literal 1 binary64)) (fma.f64 x x x))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (neg.f64 x)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (-.f64 (neg.f64 x) (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x))","(/.f64 (-.f64 (*.f64 #s(literal -1 binary64) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) (*.f64 x #s(literal 1/2 binary64))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (*.f64 (+.f64 x #s(literal 1 binary64)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 x #s(literal 1/2 binary64))) (+.f64 x #s(literal 1 binary64))) (*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 x #s(literal 1/2 binary64))))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64))) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64))) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 2 binary64))) (*.f64 (fma.f64 x x x) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x)))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x)))))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) #s(literal 3 binary64))) (*.f64 (fma.f64 x x x) (fma.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64) x) (*.f64 x x))))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (+.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)))","(/.f64 (/.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (+.f64 x #s(literal 1 binary64))) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (/.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (+.f64 x #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (*.f64 x (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (neg.f64 (fma.f64 x x x)))","(/.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (neg.f64 (neg.f64 x)))","(/.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) x)","(/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x))","(/.f64 (/.f64 #s(literal -1 binary64) x) (neg.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x x x) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))))","(/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x x) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (*.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) x))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)))","(neg.f64 (/.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (neg.f64 x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (/.f64 #s(literal -2 binary64) x))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)) (/.f64 #s(literal -2 binary64) x))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -2 binary64) x))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (/.f64 #s(literal -2 binary64) x))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (/.f64 #s(literal -2 binary64) x))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -2 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal -2 binary64) x))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 #s(literal -2 binary64) (pow.f64 x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 #s(literal 2 binary64) (/.f64 #s(literal -1 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64) (/.f64 #s(literal -2 binary64) x))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal -2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x))","(-.f64 (/.f64 (/.f64 x (+.f64 x #s(literal 1 binary64))) x) (/.f64 (/.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (+.f64 x #s(literal 1 binary64))) x))","(-.f64 (/.f64 x (fma.f64 x x x)) (/.f64 (fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64)) (fma.f64 x x x)))","(-.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))) (/.f64 (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))))","(-.f64 (/.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (/.f64 (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))))","(-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (/.f64 #s(literal -2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal -2 binary64) x))","(*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 2 binary64))","(*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 #s(literal 2 binary64) (fma.f64 x x #s(literal -1 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (neg.f64 (*.f64 #s(literal 2 binary64) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) #s(literal 4 binary64))) (neg.f64 (-.f64 (*.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 8 binary64))) (neg.f64 (+.f64 (pow.f64 (*.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))))))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 2 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 #s(literal 2 binary64) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 2 binary64) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) #s(literal 4 binary64)) (-.f64 (*.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))","(/.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 8 binary64)) (+.f64 (pow.f64 (*.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)) (-.f64 #s(literal 4 binary64) (*.f64 (*.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))))","(fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64))","(fma.f64 x #s(literal 2 binary64) #s(literal 2 binary64))","(+.f64 (*.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))","(+.f64 #s(literal 2 binary64) (*.f64 #s(literal 2 binary64) x))","(*.f64 (pow.f64 (/.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))) (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (pow.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)))","(*.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (pow.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))) (pow.f64 (neg.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) x) (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) #s(literal -1 binary64)))","(*.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (pow.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(pow.f64 (/.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (fma.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) x)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (+.f64 x #s(literal 1 binary64)))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x x)))","(/.f64 (neg.f64 (/.f64 (fma.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) x) x)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (pow.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)))) (neg.f64 (-.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64))) (pow.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)))) (neg.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) #s(literal 1 binary64))) (neg.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)))) (neg.f64 (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))) (neg.f64 (neg.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))))) (neg.f64 (neg.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))))) (neg.f64 (neg.f64 (neg.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) x))) (neg.f64 (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (*.f64 x (fma.f64 x x #s(literal -1 binary64))))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (*.f64 x (fma.f64 x x #s(literal -1 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64)))))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64)))))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64)))) (neg.f64 (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal -1 binary64)))) (neg.f64 (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (/.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (+.f64 x #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (neg.f64 x) #s(literal -1 binary64)))) (neg.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (/.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (neg.f64 x) #s(literal 1 binary64)))) (neg.f64 (*.f64 (neg.f64 x) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 x #s(literal -1 binary64)))) (neg.f64 (*.f64 x (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (fma.f64 x x x) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))) (neg.f64 (*.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)) (*.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (/.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (+.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)))) (neg.f64 (neg.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 x) (*.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)))))","(/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (+.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))","(/.f64 (/.f64 (fma.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) x) x) (-.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (pow.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)))","(/.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64))) (pow.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))))","(/.f64 (*.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) #s(literal 1 binary64)) (*.f64 x (fma.f64 x x #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64))) (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (neg.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)))) (neg.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)))) (neg.f64 (neg.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))))))","(/.f64 (neg.f64 (fma.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) x)) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) (neg.f64 (*.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (*.f64 x (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (*.f64 x (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64))) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 1 binary64))) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal -1 binary64))) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (/.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (+.f64 x #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (neg.f64 x) #s(literal -1 binary64))) (*.f64 (neg.f64 x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (/.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 x #s(literal -1 binary64))) (*.f64 x (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (fma.f64 x x x) #s(literal -1 binary64))) (neg.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)) (*.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (/.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (+.f64 x #s(literal 1 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (neg.f64 x)))","(/.f64 (+.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) x))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x))) (neg.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 x) (*.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (+.f64 x #s(literal 1 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))))","(/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (*.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))))","(/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64))))))","(/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))))","(/.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64))) (*.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))) (neg.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 (fma.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (*.f64 x (fma.f64 x x #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (fma.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (fma.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))) (*.f64 x (fma.f64 x x #s(literal -1 binary64)))))","(neg.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (neg.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (/.f64 x (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (/.f64 x (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64))) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64))) (pow.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (pow.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64))) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(-.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (/.f64 #s(literal 2 binary64) x))","(-.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (/.f64 #s(literal -2 binary64) x))","(+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(+.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(*.f64 (*.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) x)","(*.f64 (fma.f64 x x x) #s(literal 1 binary64))","(*.f64 (+.f64 x #s(literal 1 binary64)) x)","(*.f64 x (+.f64 x #s(literal 1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 x x x))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) x) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(fma.f64 (neg.f64 x) (neg.f64 x) x)","(fma.f64 (*.f64 x x) #s(literal 1 binary64) x)","(fma.f64 x x x)","(fma.f64 x #s(literal 1 binary64) (*.f64 x x))","(fma.f64 #s(literal 1 binary64) (*.f64 x x) x)","(fma.f64 #s(literal 1 binary64) x (*.f64 x x))","(+.f64 (*.f64 x x) x)","(+.f64 x (*.f64 x x))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (pow.f64 (-.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64))) (pow.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)))) (neg.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (*.f64 x (fma.f64 x x #s(literal -1 binary64))))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)))","(/.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (*.f64 x (fma.f64 x x #s(literal -1 binary64)))))))","(/.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)))))","(fma.f64 (*.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) x (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (fma.f64 x x x) #s(literal 1 binary64) (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))","(fma.f64 (+.f64 x #s(literal 1 binary64)) x (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x))","(fma.f64 x (+.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 #s(literal 1 binary64) (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))) (/.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))))","(+.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))","(+.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))","(*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal 2 binary64) x))","(*.f64 #s(literal -2 binary64) (/.f64 (/.f64 #s(literal -1 binary64) x) x))","(*.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -2 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 2 binary64) x) x))","(pow.f64 (/.f64 x (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (*.f64 x #s(literal 1/2 binary64)) x) #s(literal -1 binary64))","(pow.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal -1 binary64))","(/.f64 (/.f64 #s(literal -2 binary64) x) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (/.f64 #s(literal 2 binary64) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","(/.f64 #s(literal -2 binary64) (neg.f64 (neg.f64 (*.f64 (neg.f64 x) x))))","(/.f64 #s(literal -2 binary64) (*.f64 (neg.f64 x) x))","(/.f64 (/.f64 #s(literal 2 binary64) x) (neg.f64 (neg.f64 x)))","(/.f64 (/.f64 #s(literal 2 binary64) x) x)","(/.f64 #s(literal 2 binary64) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 x (/.f64 #s(literal 2 binary64) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(neg.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)))","(exp.f64 (*.f64 (log.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal -2 binary64) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (/.f64 (*.f64 x x) #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal -2 binary64) (pow.f64 x #s(literal -3 binary64)))","(*.f64 #s(literal 2 binary64) (pow.f64 (neg.f64 x) #s(literal -3 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64))))","(pow.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 x #s(literal 3/2 binary64)))","(/.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) x)","(/.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64))))","(/.f64 #s(literal -2 binary64) (neg.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))","(/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (neg.f64 x))","(/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 (neg.f64 x) x))","(/.f64 #s(literal 2 binary64) (neg.f64 (neg.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal 2 binary64) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64)))","(neg.f64 (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -3 binary64))))","(exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(pow.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) #s(literal 1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (*.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (-.f64 x #s(literal -1 binary64))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) (*.f64 x #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 x #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) x #s(literal -1 binary64))","(expm1.f64 (*.f64 (log.f64 x) #s(literal 1 binary64)))","(expm1.f64 (log.f64 x))","(-.f64 (/.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 (*.f64 x x) (+.f64 x #s(literal 1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))","(-.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64)))) (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)))","(-.f64 x #s(literal 1 binary64))","(exp.f64 (log.f64 (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(literal -1 binary64) x)","(+.f64 x #s(literal -1 binary64))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(pow.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) #s(literal 1 binary64))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 x x) x)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (+.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 x #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) x #s(literal 1 binary64))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(exp.f64 (log1p.f64 x))","(+.f64 x #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) x)","(*.f64 (pow.f64 (/.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))) (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))) (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (pow.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)))","(*.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (pow.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))) (pow.f64 (neg.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) x) (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) #s(literal -1 binary64)))","(*.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (pow.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(pow.f64 (/.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (fma.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) x)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (+.f64 x #s(literal 1 binary64)))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x x)))","(/.f64 (neg.f64 (/.f64 (fma.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) x) x)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (pow.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)))) (neg.f64 (-.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64))) (pow.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)))) (neg.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) #s(literal 1 binary64))) (neg.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)))) (neg.f64 (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))) (neg.f64 (neg.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))))) (neg.f64 (neg.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))))) (neg.f64 (neg.f64 (neg.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) x))) (neg.f64 (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (*.f64 x (fma.f64 x x #s(literal -1 binary64))))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (*.f64 x (fma.f64 x x #s(literal -1 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64)))))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64)))))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64)))))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64)))) (neg.f64 (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal -1 binary64)))) (neg.f64 (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (/.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (+.f64 x #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (neg.f64 x) #s(literal -1 binary64)))) (neg.f64 (*.f64 (neg.f64 x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (/.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (neg.f64 x) #s(literal 1 binary64)))) (neg.f64 (*.f64 (neg.f64 x) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 x #s(literal -1 binary64)))) (neg.f64 (*.f64 x (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (fma.f64 x x x) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))) (neg.f64 (*.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)) (*.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (/.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (+.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)))) (neg.f64 (neg.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 x) (*.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (+.f64 x #s(literal 1 binary64)))))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)))))","(/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (+.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))","(/.f64 (/.f64 (fma.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) x) x) (-.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (pow.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)))","(/.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64))) (pow.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))))","(/.f64 (*.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) #s(literal 1 binary64)) (*.f64 x (fma.f64 x x #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64))) (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))))","(/.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (+.f64 (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (neg.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)))) (neg.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)))) (neg.f64 (neg.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))))))","(/.f64 (neg.f64 (fma.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) x)) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) (neg.f64 (*.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (*.f64 x (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (*.f64 x (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64))) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 1 binary64))) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal -1 binary64))) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (/.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (+.f64 x #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (neg.f64 x) #s(literal -1 binary64))) (*.f64 (neg.f64 x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (/.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (neg.f64 x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 x #s(literal -1 binary64))) (*.f64 x (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (fma.f64 x x x) #s(literal -1 binary64))) (neg.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64))) (*.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)) (*.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (neg.f64 x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (/.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (+.f64 x #s(literal 1 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (neg.f64 x)))","(/.f64 (+.f64 (neg.f64 x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) x))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 x x x) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x))) (neg.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (neg.f64 x) (*.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (+.f64 x #s(literal 1 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (neg.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))))","(/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (*.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))))","(/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64))))))","(/.f64 (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))))","(/.f64 (+.f64 (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64))) (*.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))) (neg.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 (fma.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (*.f64 x (fma.f64 x x #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (fma.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (fma.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))) (*.f64 x (fma.f64 x x #s(literal -1 binary64)))))","(neg.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (neg.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (/.f64 x (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x))) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (/.f64 x (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (+.f64 x #s(literal 1 binary64))) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (+.f64 x #s(literal 1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64))) (pow.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (-.f64 (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 3 binary64))) (pow.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (neg.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal -1 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (pow.f64 x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64))) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 x #s(literal 1 binary64))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(-.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (/.f64 #s(literal 2 binary64) x))","(-.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (/.f64 #s(literal -2 binary64) x))","(+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(+.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 x #s(literal 1 binary64))) x)","(*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (+.f64 x #s(literal 1 binary64)))","(*.f64 (*.f64 x (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64))","(*.f64 (fma.f64 x x x) (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(*.f64 (fma.f64 x x x) (-.f64 x #s(literal 1 binary64)))","(*.f64 (+.f64 x #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))","(*.f64 x (fma.f64 x x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 x (fma.f64 x x #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) x))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) x))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x x))) (neg.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x x) (fma.f64 x x #s(literal -1 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x (+.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) x)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) (+.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (fma.f64 x x x) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 (fma.f64 x x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 x #s(literal 1 binary64))))","(fma.f64 (fma.f64 x x x) x (*.f64 (fma.f64 x x x) #s(literal -1 binary64)))","(fma.f64 x (fma.f64 x x x) (*.f64 #s(literal -1 binary64) (fma.f64 x x x)))","(+.f64 (*.f64 x (fma.f64 x x x)) (*.f64 #s(literal -1 binary64) (fma.f64 x x x)))","(+.f64 (*.f64 (fma.f64 x x x) x) (*.f64 (fma.f64 x x x) #s(literal -1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":314.01318359375,"type":"rewrite"},{"compiler":[[38945,3908]],"memory":[[11597680,100963680]],"time":145.179931640625,"type":"eval"},{"alts":[["(/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (*.f64 x (fma.f64 x x #s(literal -1 binary64))))","next",52.09229386172119,"binary64"],["(/.f64 (fma.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","fresh",19.08257791124773,"binary64"],["(/.f64 (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (/.f64 (*.f64 (fma.f64 x x x) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64))))","next",51.823695415758024,"binary64"],["(/.f64 (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) x) (-.f64 x #s(literal 1 binary64))))","fresh",52.09229386171164,"binary64"],["(/.f64 (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64)))))","fresh",52.09229386171164,"binary64"],["(/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) x (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))))","next",52.127911617064576,"binary64"],["(/.f64 (fma.f64 #s(approx (- x (* 2 (+ x 1))) #s(literal -2 binary64)) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))))","fresh",52.27387538909146,"binary64"],["(/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))","fresh",62.14946014572735,"binary64"],["(/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))","fresh",62.149460145730295,"binary64"],["(/.f64 (+.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))))","fresh",51.55271882339056,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)))))","fresh",52.092293861715305,"binary64"],["(+.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","fresh",53.51386727848258,"binary64"],["(+.f64 (/.f64 (/.f64 #s(approx (- x (* 2 (+ x 1))) (-.f64 #s(literal -2 binary64) x)) (+.f64 x #s(literal 1 binary64))) x) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","fresh",19.115635166926918,"binary64"],["(+.f64 (-.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","fresh",53.59151123443976,"binary64"],["(+.f64 (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","fresh",61.65574790049415,"binary64"],["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","done",19.416302398474528,"binary64"],["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","next",19.38380803420576,"binary64"],["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) #s(approx (/ (- (/ -1 x) 1) x) (/.f64 #s(literal -1 binary64) (*.f64 x x)))) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","fresh",60.22680536060774,"binary64"],["(*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64)))","fresh",62.149461148508344,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","fresh",0.7699285793005082,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))","done",60.83974921498693,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (neg.f64 x))))","fresh",0.1015625,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) x)))","fresh",0.09375,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x))))","fresh",0.0859375,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))))","next",0.01171875,"binary64"]],"compiler":[[21,12],[21,10],[32,16],[35,17],[33,16],[25,11],[30,16],[23,10],[23,10],[25,12],[30,13],[17,10],[23,16],[18,11],[17,12],[23,16],[19,14],[29,20],[28,13],[21,15],[19,13],[36,24],[35,22],[35,22],[33,23],[21,12],[21,10],[32,16],[35,17],[33,16],[25,11],[30,16],[23,10],[23,10],[25,12],[30,13],[17,10],[23,16],[18,11],[17,12],[19,14],[29,20],[28,13],[21,15],[36,24],[35,22],[35,22],[33,23]],"count":[[1204,25]],"kept":[{"done":[0,0],"fresh":[8,5],"new":[1191,18],"picked":[5,2]}],"memory":[[-2246560,56550288]],"min-error":[[0.0,"binary64"]],"time":48.388916015625,"type":"prune"},{"egraph":[[0,8947,260,0.104203273],[5,7153,264,0.022152776],[4,4287,276,0.022743561],[3,1215,301,0.01633603],[2,405,301,0.004394984],[1,167,321,0.001343686],[0,80,321,0.000808821],[0,47,396,0.000458078]],"inputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))))","(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)))","(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64)))","(-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","#s(literal 2 binary64)","(*.f64 x x)","x","#s(literal -2 binary64)","(pow.f64 x #s(literal 5 binary64))","#s(literal 5 binary64)","(*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))","(pow.f64 x #s(literal -3 binary64))","#s(literal -3 binary64)","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","#s(literal 1 binary64)","(-.f64 x #s(literal 1 binary64))","(/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (*.f64 x (fma.f64 x x #s(literal -1 binary64))))","(fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))","(fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)","(+.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","#s(literal -2 binary64)","(-.f64 x #s(literal 1 binary64))","(fma.f64 x x x)","(*.f64 x (fma.f64 x x #s(literal -1 binary64)))","(fma.f64 x x #s(literal -1 binary64))","#s(literal -1 binary64)","(/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) x (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (+.f64 x #s(literal 1 binary64)) x (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))","(+.f64 x #s(literal 1 binary64))","x","#s(literal 1 binary64)","(*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))","(fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)","#s(literal -2 binary64)","(-.f64 x #s(literal 1 binary64))","(*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64)))","(*.f64 (+.f64 x #s(literal 1 binary64)) x)","(/.f64 (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (/.f64 (*.f64 (fma.f64 x x x) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64))))","(fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)))","(-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))","x","(*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))","#s(literal 2 binary64)","(+.f64 x #s(literal 1 binary64))","#s(literal 1 binary64)","(-.f64 x #s(literal 1 binary64))","(*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))","(*.f64 (+.f64 x #s(literal 1 binary64)) x)","(/.f64 (*.f64 (fma.f64 x x x) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64)))","(*.f64 (fma.f64 x x x) (fma.f64 x x #s(literal -1 binary64)))","(fma.f64 x x x)","(fma.f64 x x #s(literal -1 binary64))","#s(literal -1 binary64)"]],"locations":[["(*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))","cost-diff",2],["(-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))","cost-diff",3],["(/.f64 (*.f64 (fma.f64 x x x) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64)))","cost-diff",8],["(fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)))","cost-diff",10],["(*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))","cost-diff",1],["(*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64)))","cost-diff",3],["(fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)","cost-diff",3],["(fma.f64 (+.f64 x #s(literal 1 binary64)) x (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))","cost-diff",10],["(/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (*.f64 x (fma.f64 x x #s(literal -1 binary64))))","cost-diff",0],["(*.f64 x (fma.f64 x x #s(literal -1 binary64)))","cost-diff",1],["(fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)","cost-diff",3],["(fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))","cost-diff",10],["(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","cost-diff",0],["(/.f64 #s(literal -1 binary64) x)","cost-diff",0],["#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x))","cost-diff",0],["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","cost-diff",0],["(-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64))","cost-diff",0],["(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64)))","cost-diff",0],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))))","cost-diff",0],["(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)))","cost-diff",1]],"memory":[[3658880,47283776]],"method":["egg-herbie"],"outputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64)))))","(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)))","(fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))))","(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64)))","(-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","#s(literal 2 binary64)","(*.f64 x x)","x","#s(literal -2 binary64)","(pow.f64 x #s(literal 5 binary64))","#s(literal 5 binary64)","(*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))","(pow.f64 x #s(literal -3 binary64))","#s(literal -3 binary64)","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64))))","#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) x)","#s(literal -1 binary64)","x","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","#s(literal 1 binary64)","(-.f64 x #s(literal 1 binary64))","(/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (*.f64 x (fma.f64 x x #s(literal -1 binary64))))","(/.f64 #s(literal 2 binary64) (-.f64 (pow.f64 x #s(literal 3 binary64)) x))","(fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))","#s(literal 2 binary64)","(fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)","(-.f64 #s(literal -2 binary64) x)","(+.f64 x #s(literal 1 binary64))","(-.f64 x #s(literal -1 binary64))","x","#s(literal 1 binary64)","#s(literal -2 binary64)","(-.f64 x #s(literal 1 binary64))","(fma.f64 x x x)","(*.f64 x (fma.f64 x x #s(literal -1 binary64)))","(-.f64 (pow.f64 x #s(literal 3 binary64)) x)","(fma.f64 x x #s(literal -1 binary64))","#s(literal -1 binary64)","(/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) x (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))))","(/.f64 #s(literal 2 binary64) (-.f64 (pow.f64 x #s(literal 3 binary64)) x))","(fma.f64 (+.f64 x #s(literal 1 binary64)) x (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))","#s(literal 2 binary64)","(+.f64 x #s(literal 1 binary64))","(-.f64 x #s(literal -1 binary64))","x","#s(literal 1 binary64)","(*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))","(fma.f64 (-.f64 #s(literal -1 binary64) x) x #s(literal 2 binary64))","(fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)","(-.f64 #s(literal -2 binary64) x)","#s(literal -2 binary64)","(-.f64 x #s(literal 1 binary64))","(*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64)))","(-.f64 (pow.f64 x #s(literal 3 binary64)) x)","(*.f64 (+.f64 x #s(literal 1 binary64)) x)","(fma.f64 x x x)","(/.f64 (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (/.f64 (*.f64 (fma.f64 x x x) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64))))","(/.f64 #s(literal 2 binary64) (-.f64 (pow.f64 x #s(literal 3 binary64)) x))","(fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)))","#s(literal 2 binary64)","(-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))","(-.f64 #s(literal -2 binary64) x)","x","(*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))","(fma.f64 #s(literal 2 binary64) x #s(literal 2 binary64))","#s(literal 2 binary64)","(+.f64 x #s(literal 1 binary64))","(-.f64 x #s(literal -1 binary64))","#s(literal 1 binary64)","(-.f64 x #s(literal 1 binary64))","(*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))","(fma.f64 x x x)","(*.f64 (+.f64 x #s(literal 1 binary64)) x)","(fma.f64 x x x)","(/.f64 (*.f64 (fma.f64 x x x) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64)))","(-.f64 (pow.f64 x #s(literal 3 binary64)) x)","(*.f64 (fma.f64 x x x) (fma.f64 x x #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) x) (-.f64 x #s(literal -1 binary64)))","(fma.f64 x x x)","(fma.f64 x x #s(literal -1 binary64))","#s(literal -1 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":278.468017578125,"type":"simplify"},{"compiler":[[399,45]],"locations":[["(*.f64 (fma.f64 x x x) (fma.f64 x x #s(literal -1 binary64)))","accuracy",0.109375],["(/.f64 (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (/.f64 (*.f64 (fma.f64 x x x) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64))))","accuracy",0.5139637236945012],["(/.f64 (*.f64 (fma.f64 x x x) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64)))","accuracy",5.7897784471719325],["(fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)))","accuracy",61.508444313698575],["(*.f64 (+.f64 x #s(literal 1 binary64)) x)","accuracy",0.0],["(*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64)))","accuracy",0.09765625],["(/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) x (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))))","accuracy",0.5139637236945012],["(fma.f64 (+.f64 x #s(literal 1 binary64)) x (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))","accuracy",62.44265529923531],["(+.f64 x #s(literal 1 binary64))","accuracy",0.0],["(*.f64 x (fma.f64 x x #s(literal -1 binary64)))","accuracy",0.09375],["(/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (*.f64 x (fma.f64 x x #s(literal -1 binary64))))","accuracy",0.5139637236945012],["(fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))","accuracy",61.508444313698575],["(/.f64 #s(literal -1 binary64) x)","accuracy",0.0],["(-.f64 x #s(literal 1 binary64))","accuracy",0.0],["#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x))","accuracy",0.5677284437438392],["(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","accuracy",19.11039606865391],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))))","accuracy",0.0],["(*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))","accuracy",0.01171875],["(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64)))","accuracy",0.7040051621802543],["(/.f64 #s(literal 2 binary64) (*.f64 x x))","accuracy",1.024693459032993]],"memory":[[-9058752,74086704]],"mixsample":[[0.4501953125,"ival-sub",1200],[0.8671875,"ival-add",1200],[25.6455078125,"ival-div",0],[25.654296875,"adjust",800],[2.0390625,"ival-mult",1200],[0.60888671875,"ival-sub",1600],[5.84423828125,"ival-div",400],[0.420166015625,"ival-sub",2000],[1.906494140625,"ival-mult",2000],[0.225341796875,"ival-div",1600],[0.117919921875,"ival-assert",0],[7.658935546875,"ival-sub",0],[1.2265625,"ival-sub",400],[1.572265625,"adjust",2000],[12.6181640625,"ival-pow",0],[0.19970703125,"ival-sub",2400],[1.666748046875,"ival-mult",800],[62.091796875,"ival-add",0],[0.23779296875,"ival-mult",400],[0.97314453125,"ival-add",1600],[0.3857421875,"ival-sub",800],[22.198486328125,"ival-mult",0],[2.31787109375,"ival-mult",1600],[0.81982421875,"ival-add",2000],[0.039794921875,"ival-add",400],[0.27001953125,"ival-true",0],[0.3779296875,"ival-add",2400],[0.919677734375,"ival-mult",2400],[0.748046875,"ival-add",800],[0.73779296875,"exact",0]],"outcomes":[[210.571533203125,1,"valid",236],[17.56591796875,2,"valid",17],[1.31201171875,0,"valid",3]],"time":284.251953125,"type":"localize"},{"count":[[27,72]],"inputs":[["(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))))","(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64)))","(-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) x)","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))","(fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)","(*.f64 x (fma.f64 x x #s(literal -1 binary64)))","(/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (*.f64 x (fma.f64 x x #s(literal -1 binary64))))","(fma.f64 (+.f64 x #s(literal 1 binary64)) x (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))","(*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64)))","(*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))","(fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)))","(/.f64 (*.f64 (fma.f64 x x x) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64)))","(-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))","(*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))","(-.f64 x #s(literal 1 binary64))","(+.f64 x #s(literal 1 binary64))","(/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) x (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))))","(*.f64 (+.f64 x #s(literal 1 binary64)) x)","(/.f64 (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (/.f64 (*.f64 (fma.f64 x x x) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64))))","(*.f64 (fma.f64 x x x) (fma.f64 x x #s(literal -1 binary64)))"]],"memory":[[1483088,9401840]],"outputs":[["(/ 2 (pow x 7))","(/ (+ 2 (* 2 (pow x 2))) (pow x 7))","(/ (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))) (pow x 7))","(/ -2 x)","(/ (- (* -2 (pow x 2)) 2) x)","(/ (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2) x)","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2)) 2) x)","(/ 2 (pow x 2))","(/ (+ 2 (* 2 (pow x 2))) (pow x 2))","(/ (- x 2) x)","(/ (- (* x (+ 1 (* -1 x))) 2) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 2) x)","(/ -1 x)","-1","(- (* -1 x) 1)","(- (* x (- (* -1 x) 1)) 1)","(- (* x (- (* x (- (* -1 x) 1)) 1)) 1)","2","-2","(- (* -1 x) 2)","(* -1 x)","(* x (- (pow x 2) 1))","(+ 2 (* -1 x))","(+ 2 (* x (- (* -1 x) 1)))","x","(* x (+ 1 x))","(/ -2 (pow x 3))","(- x 1)","1","(+ 1 x)","(* x (- (* -1 x) 1))","(* x (- (* x (- x 1)) 1))","(* x (- (* x (- (* x (+ 1 x)) 1)) 1))","(/ 2 (pow x 3))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))) (pow x 3))","(/ 2 (pow x 5))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 5))","(+ 2 (* 2 (/ 1 (pow x 2))))","(* -1 (/ (+ 1 (/ 1 x)) x))","(/ (- (/ 1 (pow x 2)) (+ 1 (/ 1 x))) x)","(/ (- (/ 1 (pow x 2)) (+ 1 (+ (/ 1 x) (/ 1 (pow x 3))))) x)","(/ 1 x)","(/ (+ 1 (/ 1 x)) x)","(/ (+ 1 (+ (/ 1 x) (/ 1 (pow x 2)))) x)","(/ (+ 1 (+ (/ 1 x) (+ (/ 1 (pow x 2)) (/ 1 (pow x 3))))) x)","(* -1 (* x (+ 1 (* 2 (/ 1 x)))))","(pow x 3)","(* (pow x 3) (- 1 (/ 1 (pow x 2))))","(* -1 (pow x 2))","(* -1 (* (pow x 2) (+ 1 (/ 1 x))))","(* (pow x 2) (- (/ 2 (pow x 2)) (+ 1 (/ 1 x))))","(pow x 2)","(* (pow x 2) (+ 1 (/ 1 x)))","(* x (- 1 (/ 1 x)))","(* x (+ 1 (/ 1 x)))","(pow x 4)","(* (pow x 4) (+ 1 (/ 1 x)))","(* (pow x 4) (- (+ 1 (/ 1 x)) (/ 1 (pow x 2))))","(* (pow x 4) (+ 1 (+ (* -1 (/ (+ 1 (/ 1 x)) (pow x 2))) (/ 1 x))))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 2))) 2) (pow x 3)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 4))) (+ 2 (* 2 (/ 1 (pow x 2))))) (pow x 3)))","(* -1 (/ (+ 1 (* -1 (/ (- (/ 1 x) 1) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))) x))","(* -1 (/ (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1) x))","(* -1 (/ (- (* -1 (/ (+ 1 (+ (/ 1 x) (/ 1 (pow x 2)))) x)) 1) x))","(* -1 (* (pow x 3) (- (/ 1 (pow x 2)) 1)))","(* (pow x 2) (- (* -1 (/ (- 1 (* 2 (/ 1 x))) x)) 1))","(* -1 (* x (- (/ 1 x) 1)))","(* (pow x 4) (+ 1 (* -1 (/ (- (/ 1 x) 1) x))))","(* (pow x 4) (+ 1 (* -1 (/ (- (+ (/ 1 x) (/ 1 (pow x 2))) 1) x))))"]],"series":[[7.465087890625,"((- (/ (- (/ 2 (* x x)) -2) (pow x 5)) (* (pow x -3) -2)) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ (- (/ 2 (* x x)) -2) (pow x 5)) (- (/ 2 (* x x)) -2) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ 1 (+ x 1)) (/ 2 x)) (/ -1 x) (/ 1 (- x 1)) (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) (+ (* (+ x 1) -2) x) (* x (+ (* x x) -1)) (/ (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) (* x (+ (* x x) -1))) (+ (* (+ x 1) x) (* (+ (* (+ x 1) -2) x) (- x 1))) (* (* (+ x 1) x) (- x 1)) (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* (- x (* 2 (+ x 1))) (- x 1)) (* (* (+ x 1) x) 1)) (/ (* (+ (* x x) x) (+ (* x x) -1)) (+ x 1)) (- x (* 2 (+ x 1))) (* (* (+ x 1) x) 1) (/ 2 (* x x)) (* (pow x -3) -2) (- x 1) (+ x 1) (/ (+ (* (+ x 1) x) (* (+ (* (+ x 1) -2) x) (- x 1))) (* (* (+ x 1) x) (- x 1))) (* (+ x 1) x) (/ (+ (* (- x (* 2 (+ x 1))) (- x 1)) (* (* (+ x 1) x) 1)) (/ (* (+ (* x x) x) (+ (* x x) -1)) (+ x 1))) (* (+ (* x x) x) (+ (* x x) -1)))","x","-inf"],[6.56005859375,"((- (/ (- (/ 2 (* x x)) -2) (pow x 5)) (* (pow x -3) -2)) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ (- (/ 2 (* x x)) -2) (pow x 5)) (- (/ 2 (* x x)) -2) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ 1 (+ x 1)) (/ 2 x)) (/ -1 x) (/ 1 (- x 1)) (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) (+ (* (+ x 1) -2) x) (* x (+ (* x x) -1)) (/ (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) (* x (+ (* x x) -1))) (+ (* (+ x 1) x) (* (+ (* (+ x 1) -2) x) (- x 1))) (* (* (+ x 1) x) (- x 1)) (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* (- x (* 2 (+ x 1))) (- x 1)) (* (* (+ x 1) x) 1)) (/ (* (+ (* x x) x) (+ (* x x) -1)) (+ x 1)) (- x (* 2 (+ x 1))) (* (* (+ x 1) x) 1) (/ 2 (* x x)) (* (pow x -3) -2) (- x 1) (+ x 1) (/ (+ (* (+ x 1) x) (* (+ (* (+ x 1) -2) x) (- x 1))) (* (* (+ x 1) x) (- x 1))) (* (+ x 1) x) (/ (+ (* (- x (* 2 (+ x 1))) (- x 1)) (* (* (+ x 1) x) 1)) (/ (* (+ (* x x) x) (+ (* x x) -1)) (+ x 1))) (* (+ (* x x) x) (+ (* x x) -1)))","x","inf"],[4.87890625,"((- (/ (- (/ 2 (* x x)) -2) (pow x 5)) (* (pow x -3) -2)) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ (- (/ 2 (* x x)) -2) (pow x 5)) (- (/ 2 (* x x)) -2) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ 1 (+ x 1)) (/ 2 x)) (/ -1 x) (/ 1 (- x 1)) (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) (+ (* (+ x 1) -2) x) (* x (+ (* x x) -1)) (/ (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) (* x (+ (* x x) -1))) (+ (* (+ x 1) x) (* (+ (* (+ x 1) -2) x) (- x 1))) (* (* (+ x 1) x) (- x 1)) (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* (- x (* 2 (+ x 1))) (- x 1)) (* (* (+ x 1) x) 1)) (/ (* (+ (* x x) x) (+ (* x x) -1)) (+ x 1)) (- x (* 2 (+ x 1))) (* (* (+ x 1) x) 1) (/ 2 (* x x)) (* (pow x -3) -2) (- x 1) (+ x 1) (/ (+ (* (+ x 1) x) (* (+ (* (+ x 1) -2) x) (- x 1))) (* (* (+ x 1) x) (- x 1))) (* (+ x 1) x) (/ (+ (* (- x (* 2 (+ x 1))) (- x 1)) (* (* (+ x 1) x) 1)) (/ (* (+ (* x x) x) (+ (* x x) -1)) (+ x 1))) (* (+ (* x x) x) (+ (* x x) -1)))","x","0"]],"time":20.51513671875,"type":"series"},{"count":[[72,71]],"egraph":[[0,8419,539,0.091796915],[3,4971,558,0.030062374],[2,1260,586,0.017161065],[1,462,618,0.004206538],[0,170,641,0.001544123]],"inputs":[["(/ 2 (pow x 7))","(/ (+ 2 (* 2 (pow x 2))) (pow x 7))","(/ (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))) (pow x 7))","(/ -2 x)","(/ (- (* -2 (pow x 2)) 2) x)","(/ (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2) x)","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2)) 2) x)","(/ 2 (pow x 2))","(/ (+ 2 (* 2 (pow x 2))) (pow x 2))","(/ (- x 2) x)","(/ (- (* x (+ 1 (* -1 x))) 2) x)","(/ (- (* x (+ 1 (* x (- x 1)))) 2) x)","(/ -1 x)","-1","(- (* -1 x) 1)","(- (* x (- (* -1 x) 1)) 1)","(- (* x (- (* x (- (* -1 x) 1)) 1)) 1)","2","-2","(- (* -1 x) 2)","(* -1 x)","(* x (- (pow x 2) 1))","(+ 2 (* -1 x))","(+ 2 (* x (- (* -1 x) 1)))","x","(* x (+ 1 x))","(/ -2 (pow x 3))","(- x 1)","1","(+ 1 x)","(* x (- (* -1 x) 1))","(* x (- (* x (- x 1)) 1))","(* x (- (* x (- (* x (+ 1 x)) 1)) 1))","(/ 2 (pow x 3))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))) (pow x 3))","(/ 2 (pow x 5))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 5))","(+ 2 (* 2 (/ 1 (pow x 2))))","(* -1 (/ (+ 1 (/ 1 x)) x))","(/ (- (/ 1 (pow x 2)) (+ 1 (/ 1 x))) x)","(/ (- (/ 1 (pow x 2)) (+ 1 (+ (/ 1 x) (/ 1 (pow x 3))))) x)","(/ 1 x)","(/ (+ 1 (/ 1 x)) x)","(/ (+ 1 (+ (/ 1 x) (/ 1 (pow x 2)))) x)","(/ (+ 1 (+ (/ 1 x) (+ (/ 1 (pow x 2)) (/ 1 (pow x 3))))) x)","(* -1 (* x (+ 1 (* 2 (/ 1 x)))))","(pow x 3)","(* (pow x 3) (- 1 (/ 1 (pow x 2))))","(* -1 (pow x 2))","(* -1 (* (pow x 2) (+ 1 (/ 1 x))))","(* (pow x 2) (- (/ 2 (pow x 2)) (+ 1 (/ 1 x))))","(pow x 2)","(* (pow x 2) (+ 1 (/ 1 x)))","(* x (- 1 (/ 1 x)))","(* x (+ 1 (/ 1 x)))","(pow x 4)","(* (pow x 4) (+ 1 (/ 1 x)))","(* (pow x 4) (- (+ 1 (/ 1 x)) (/ 1 (pow x 2))))","(* (pow x 4) (+ 1 (+ (* -1 (/ (+ 1 (/ 1 x)) (pow x 2))) (/ 1 x))))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 2))) 2) (pow x 3)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 4))) (+ 2 (* 2 (/ 1 (pow x 2))))) (pow x 3)))","(* -1 (/ (+ 1 (* -1 (/ (- (/ 1 x) 1) x))) x))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))) x))","(* -1 (/ (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1) x))","(* -1 (/ (- (* -1 (/ (+ 1 (+ (/ 1 x) (/ 1 (pow x 2)))) x)) 1) x))","(* -1 (* (pow x 3) (- (/ 1 (pow x 2)) 1)))","(* (pow x 2) (- (* -1 (/ (- 1 (* 2 (/ 1 x))) x)) 1))","(* -1 (* x (- (/ 1 x) 1)))","(* (pow x 4) (+ 1 (* -1 (/ (- (/ 1 x) 1) x))))","(* (pow x 4) (+ 1 (* -1 (/ (- (+ (/ 1 x) (/ 1 (pow x 2))) 1) x))))"]],"memory":[[7308064,43892304]],"method":["egg-herbie"],"outputs":[["(/ 2 (pow x 7))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 7 binary64)))","(/ (+ 2 (* 2 (pow x 2))) (pow x 7))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 7 binary64))))","(/ (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))) (pow x 7))","(/.f64 (fma.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal 7 binary64)))","(/ -2 x)","(/.f64 #s(literal -2 binary64) x)","(/ (- (* -2 (pow x 2)) 2) x)","(fma.f64 #s(literal -2 binary64) x (/.f64 #s(literal -2 binary64) x))","(/ (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2) x)","(*.f64 #s(literal -2 binary64) (fma.f64 x (fma.f64 x x #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) x)))","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2)) 2) x)","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (fma.f64 #s(literal -2 binary64) (*.f64 x x) #s(literal -2 binary64))) x)","(/ 2 (pow x 2))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(/ (+ 2 (* 2 (pow x 2))) (pow x 2))","(*.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) x) (/.f64 #s(literal 2 binary64) x))","(/ (- x 2) x)","(/.f64 (-.f64 x #s(literal 2 binary64)) x)","(/ (- (* x (+ 1 (* -1 x))) 2) x)","(-.f64 (-.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 2 binary64) x))","(/ (- (* x (+ 1 (* x (- x 1)))) 2) x)","(-.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) x))","(/ -1 x)","(/.f64 #s(literal -1 binary64) x)","-1","#s(literal -1 binary64)","(- (* -1 x) 1)","(-.f64 #s(literal -1 binary64) x)","(- (* x (- (* -1 x) 1)) 1)","(fma.f64 (-.f64 #s(literal -1 binary64) x) x #s(literal -1 binary64))","(- (* x (- (* x (- (* -1 x) 1)) 1)) 1)","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 #s(literal -1 binary64) x))","2","#s(literal 2 binary64)","-2","#s(literal -2 binary64)","(- (* -1 x) 2)","(-.f64 #s(literal -2 binary64) x)","(* -1 x)","(neg.f64 x)","(* x (- (pow x 2) 1))","(-.f64 (pow.f64 x #s(literal 3 binary64)) x)","(+ 2 (* -1 x))","(-.f64 #s(literal 2 binary64) x)","(+ 2 (* x (- (* -1 x) 1)))","(fma.f64 (-.f64 #s(literal -1 binary64) x) x #s(literal 2 binary64))","x","(* x (+ 1 x))","(fma.f64 x x x)","(/ -2 (pow x 3))","(/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))","(- x 1)","(-.f64 x #s(literal 1 binary64))","1","#s(literal 1 binary64)","(+ 1 x)","(-.f64 x #s(literal -1 binary64))","(* x (- (* -1 x) 1))","(*.f64 (-.f64 #s(literal -1 binary64) x) x)","(* x (- (* x (- x 1)) 1))","(*.f64 (fma.f64 (-.f64 x #s(literal 1 binary64)) x #s(literal -1 binary64)) x)","(* x (- (* x (- (* x (+ 1 x)) 1)) 1))","(*.f64 (*.f64 (-.f64 x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) x)","(/ 2 (pow x 3))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 3))","(/.f64 (+.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal 2 binary64)) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))) (pow x 3))","(/.f64 (+.f64 (+.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal 2 binary64)) (/.f64 #s(literal 2 binary64) (*.f64 x x))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))) (pow x 3))","(/.f64 (+.f64 (+.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 6 binary64))) #s(literal 2 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) (/.f64 #s(literal 2 binary64) (*.f64 x x)))) (pow.f64 x #s(literal 3 binary64)))","(/ 2 (pow x 5))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 5))","(/.f64 (+.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal 2 binary64)) (pow.f64 x #s(literal 5 binary64)))","(+ 2 (* 2 (/ 1 (pow x 2))))","(+.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal 2 binary64))","(* -1 (/ (+ 1 (/ 1 x)) x))","(/.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x)) x)","(/ (- (/ 1 (pow x 2)) (+ 1 (/ 1 x))) x)","(/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64)) (*.f64 x x))","(/ (- (/ 1 (pow x 2)) (+ 1 (+ (/ 1 x) (/ 1 (pow x 3))))) x)","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x)) x) #s(literal 1 binary64)) x)","(/ 1 x)","(/.f64 #s(literal 1 binary64) x)","(/ (+ 1 (/ 1 x)) x)","(/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)","(/ (+ 1 (+ (/ 1 x) (/ 1 (pow x 2)))) x)","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x) #s(literal -1 binary64)) x)","(/ (+ 1 (+ (/ 1 x) (+ (/ 1 (pow x 2)) (/ 1 (pow x 3))))) x)","(/.f64 (+.f64 (+.f64 (pow.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (*.f64 x x)))) x)","(* -1 (* x (+ 1 (* 2 (/ 1 x)))))","(-.f64 #s(literal -2 binary64) x)","(pow x 3)","(pow.f64 x #s(literal 3 binary64))","(* (pow x 3) (- 1 (/ 1 (pow x 2))))","(-.f64 (pow.f64 x #s(literal 3 binary64)) x)","(* -1 (pow x 2))","(*.f64 (neg.f64 x) x)","(* -1 (* (pow x 2) (+ 1 (/ 1 x))))","(*.f64 (-.f64 #s(literal -1 binary64) x) x)","(* (pow x 2) (- (/ 2 (pow x 2)) (+ 1 (/ 1 x))))","(fma.f64 (-.f64 #s(literal -1 binary64) x) x #s(literal 2 binary64))","(pow x 2)","(*.f64 x x)","(* (pow x 2) (+ 1 (/ 1 x)))","(fma.f64 x x x)","(* x (- 1 (/ 1 x)))","(-.f64 x #s(literal 1 binary64))","(* x (+ 1 (/ 1 x)))","(-.f64 x #s(literal -1 binary64))","(pow x 4)","(pow.f64 x #s(literal 4 binary64))","(* (pow x 4) (+ 1 (/ 1 x)))","(*.f64 (pow.f64 x #s(literal 3 binary64)) (-.f64 x #s(literal -1 binary64)))","(* (pow x 4) (- (+ 1 (/ 1 x)) (/ 1 (pow x 2))))","(*.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x))","(* (pow x 4) (+ 1 (+ (* -1 (/ (+ 1 (/ 1 x)) (pow x 2))) (/ 1 x))))","(fma.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x) x)) (pow.f64 x #s(literal 4 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 2))) 2) (pow x 3)))","(-.f64 (/.f64 (+.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal 2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64))))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 4))) (+ 2 (* 2 (/ 1 (pow x 2))))) (pow x 3)))","(/.f64 (*.f64 (+.f64 (/.f64 #s(literal 1 binary64) (*.f64 x x)) #s(literal 1 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -2 binary64))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (/ (+ 1 (* -1 (/ (- (/ 1 x) 1) x))) x))","(/.f64 (-.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) x) #s(literal 1 binary64)) (*.f64 x x))","(* -1 (/ (+ 1 (* -1 (/ (- (* -1 (/ (- (/ 1 x) 1) x)) 1) x))) x))","(/.f64 (-.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal 1 binary64)) x)) x) #s(literal 1 binary64)) x)","(* -1 (/ (- (* -1 (/ (+ 1 (/ 1 x)) x)) 1) x))","(/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x) #s(literal -1 binary64)) x)","(* -1 (/ (- (* -1 (/ (+ 1 (+ (/ 1 x) (/ 1 (pow x 2)))) x)) 1) x))","(/.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) x)) x)) x)","(* -1 (* (pow x 3) (- (/ 1 (pow x 2)) 1)))","(-.f64 (pow.f64 x #s(literal 3 binary64)) x)","(* (pow x 2) (- (* -1 (/ (- 1 (* 2 (/ 1 x))) x)) 1))","(fma.f64 (-.f64 #s(literal -1 binary64) x) x #s(literal 2 binary64))","(* -1 (* x (- (/ 1 x) 1)))","(-.f64 x #s(literal 1 binary64))","(* (pow x 4) (+ 1 (* -1 (/ (- (/ 1 x) 1) x))))","(*.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) x)) x))","(* (pow x 4) (+ 1 (* -1 (/ (- (+ (/ 1 x) (/ 1 (pow x 2))) 1) x))))","(*.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 (+.f64 (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) x)) x) #s(literal 1 binary64)) x))"]],"stop":[["iter limit",1],["node limit",1]],"time":272.77294921875,"type":"simplify"},{"count":[[27,1687]],"egraph":[[0,8597,256,0.083511779],[2,3670,268,0.040433081],[1,413,268,0.012483366],[0,80,286,0.002682969],[0,47,321,0.000458493]],"inputs":[["(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))))","(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64)))","(-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x))","(/.f64 #s(literal -1 binary64) x)","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))","(fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x)","(*.f64 x (fma.f64 x x #s(literal -1 binary64)))","(/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (*.f64 x (fma.f64 x x #s(literal -1 binary64))))","(fma.f64 (+.f64 x #s(literal 1 binary64)) x (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))","(*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64)))","(*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))","(fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)))","(/.f64 (*.f64 (fma.f64 x x x) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64)))","(-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64))))","(*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))","(-.f64 x #s(literal 1 binary64))","(+.f64 x #s(literal 1 binary64))","(/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) x (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))))","(*.f64 (+.f64 x #s(literal 1 binary64)) x)","(/.f64 (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (/.f64 (*.f64 (fma.f64 x x x) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64))))","(*.f64 (fma.f64 x x x) (fma.f64 x x #s(literal -1 binary64)))"]],"memory":[[-8132864,88152768]],"outputs":[["(*.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (neg.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64)))) (pow.f64 (fma.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal -9 binary64)) #s(literal 8 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (*.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))) (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (neg.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (*.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))))) (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal -9 binary64)) #s(literal 8 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (neg.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64)))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal -9 binary64)) #s(literal 8 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (*.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (neg.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64))))) (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (neg.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64))))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal -9 binary64)) #s(literal 8 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal -9 binary64)) #s(literal 8 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (*.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (neg.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64)))) (-.f64 (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (neg.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64)))) (fma.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal -9 binary64)) #s(literal 8 binary64))) (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (-.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal -9 binary64)) #s(literal 8 binary64))) (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (*.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))) (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (neg.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (*.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))))) (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal -9 binary64)) #s(literal 8 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))) (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (neg.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (*.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))))) (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal -9 binary64)) #s(literal 8 binary64)))))","(fma.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(fma.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(fma.f64 (pow.f64 x #s(literal -5/2 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 5/2 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(fma.f64 (neg.f64 (pow.f64 x #s(literal -3 binary64))) #s(literal -2 binary64) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 (pow.f64 x #s(literal -5 binary64)) (pow.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(fma.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(fma.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(fma.f64 #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal -5 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(fma.f64 #s(literal -2 binary64) (neg.f64 (pow.f64 x #s(literal -3 binary64))) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -3 binary64)) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(-.f64 (/.f64 (*.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64))) (fma.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)))) (/.f64 (*.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64)) (fma.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)))))","(-.f64 (/.f64 (*.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64))) (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (*.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))))) (/.f64 (*.f64 (pow.f64 x #s(literal -9 binary64)) #s(literal -8 binary64)) (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (*.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))))))","(-.f64 (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64))) (fma.f64 #s(literal -2 binary64) (pow.f64 x #s(literal -5 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))))","(-.f64 (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64))) (-.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64))))","(-.f64 (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)))","(+.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(+.f64 (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (fma.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64))))","(*.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -5/2 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 5/2 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -5 binary64)) (pow.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal -5 binary64)))","(pow.f64 (/.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal 5/2 binary64)))) (neg.f64 (pow.f64 x #s(literal 5/2 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)) (pow.f64 x #s(literal -5 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64)) (pow.f64 x #s(literal -5 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64))) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64))) #s(literal 2 binary64)))) (neg.f64 (fma.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64)) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64))))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 8 binary64) (pow.f64 (pow.f64 x #s(literal -7 binary64)) #s(literal 3 binary64))) (*.f64 #s(literal -8 binary64) (pow.f64 x #s(literal -15 binary64))))) (neg.f64 (+.f64 (pow.f64 (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64))))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))) (pow.f64 x #s(literal 5 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) (pow.f64 x #s(literal 5 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64)))) (neg.f64 (pow.f64 x #s(literal 10 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (pow.f64 x #s(literal 5 binary64))))","(/.f64 (-.f64 (/.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) (pow.f64 x #s(literal 5/2 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5/2 binary64)))) (pow.f64 x #s(literal 5/2 binary64)))","(/.f64 (-.f64 (neg.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x))) #s(literal 2 binary64)) (neg.f64 (pow.f64 x #s(literal 5 binary64))))","(/.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal 5/2 binary64))) (pow.f64 x #s(literal 5/2 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)) (pow.f64 x #s(literal -5 binary64))) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64)) (pow.f64 x #s(literal -5 binary64))) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64))) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64))) #s(literal 2 binary64))) (fma.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64)) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 8 binary64) (pow.f64 (pow.f64 x #s(literal -7 binary64)) #s(literal 3 binary64))) (*.f64 #s(literal -8 binary64) (pow.f64 x #s(literal -15 binary64)))) (+.f64 (pow.f64 (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64))) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))) (neg.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64))) (neg.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))) (neg.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64)))))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))) (pow.f64 x #s(literal 5 binary64))))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 5 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) (pow.f64 x #s(literal 5 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64))) (pow.f64 x #s(literal 10 binary64)))","(/.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)) (*.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64)) (*.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (neg.f64 (pow.f64 x #s(literal 5 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal 5 binary64)))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 5 binary64))))","(neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (neg.f64 (pow.f64 x #s(literal 5 binary64)))))","(fma.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5/2 binary64))) (pow.f64 x #s(literal -9/2 binary64)) (neg.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64)))))","(fma.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) (pow.f64 x #s(literal -5 binary64)) (neg.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64)))))","(fma.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64)) (neg.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64)))))","(-.f64 (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64))))","(exp.f64 (*.f64 (log.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(+.f64 (*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64))) (neg.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64)))))","(*.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64)))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)) (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal 2 binary64)))","(/.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)))","(/.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64)) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (-.f64 #s(literal 4 binary64) (*.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64)) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64) #s(literal 8 binary64))))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))","(fma.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 x #s(literal -1 binary64)) #s(literal 2 binary64))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal 2 binary64))","(fma.f64 #s(literal -2 binary64) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal -1 binary64)) #s(literal 2 binary64))","(fma.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64))","(-.f64 (/.f64 (/.f64 #s(literal 4 binary64) (pow.f64 x #s(literal 4 binary64))) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64))) (/.f64 #s(literal 4 binary64) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64))))","(-.f64 (/.f64 (/.f64 #s(literal 8 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64)))) (/.f64 #s(literal -8 binary64) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64)))))","(-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64))","(+.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal 2 binary64))","(+.f64 #s(literal 2 binary64) (/.f64 #s(literal 2 binary64) (*.f64 x x)))","(*.f64 (-.f64 (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (pow.f64 (-.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (pow.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(literal 2 binary64))) (+.f64 (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))) (neg.f64 (neg.f64 (-.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))))) (neg.f64 (neg.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (neg.f64 (-.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(literal 2 binary64)) (/.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (-.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)))) (neg.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (-.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (+.f64 (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(literal 2 binary64)) (/.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (-.f64 x #s(literal 1 binary64))))))","(/.f64 (+.f64 (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))) (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(literal 2 binary64))) (+.f64 (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(literal 2 binary64))) (+.f64 (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(literal 3 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)))","(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)))","(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) x) #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64) #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64))) #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)))","(-.f64 (/.f64 (pow.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) #s(literal 2 binary64)) (-.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","#s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -1 binary64) x))","(pow.f64 (neg.f64 x) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 x)))","(/.f64 #s(literal -1 binary64) x)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 #s(literal 1 binary64) (neg.f64 x))","(neg.f64 (pow.f64 x #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (neg.f64 x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) x))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64))))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))","(neg.f64 (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64))))","(exp.f64 (neg.f64 (log.f64 (-.f64 x #s(literal 1 binary64)))))","(*.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (pow.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (pow.f64 (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (*.f64 x x))) (neg.f64 (-.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) x)))","(/.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (*.f64 x x) (*.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (*.f64 x x)) (-.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) x))","(/.f64 (+.f64 (pow.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (*.f64 x x) (*.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)))) (neg.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))))","(fma.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x)) x (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) #s(literal -1 binary64)) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (neg.f64 x) (neg.f64 x) (+.f64 x (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))))","(fma.f64 (fma.f64 x x x) #s(literal 1 binary64) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))","(fma.f64 (+.f64 #s(literal 1 binary64) x) x (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (fma.f64 x x x))","(fma.f64 #s(literal 1 binary64) (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 #s(literal 1 binary64) (*.f64 x x) (+.f64 x (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))))","(fma.f64 #s(literal 1 binary64) x (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)))","(fma.f64 (*.f64 x x) #s(literal 1 binary64) (+.f64 x (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))))","(fma.f64 x (+.f64 #s(literal 1 binary64) x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 x #s(literal 1 binary64) (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)))","(fma.f64 x x (+.f64 x (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))) (/.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))) (/.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))))","(+.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) x) (*.f64 x x))","(+.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) x)","(+.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))","(+.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))","(+.f64 (*.f64 x x) (+.f64 x (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))))","(+.f64 x (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)))","(*.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) (pow.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (fma.f64 x #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (*.f64 x x)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x) (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (fma.f64 x #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (*.f64 x x)) (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x)))) (neg.f64 (neg.f64 (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 x #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (*.f64 x x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x))) (neg.f64 (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x x (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (fma.f64 x #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (*.f64 x x))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x))","(/.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x))))","(/.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (*.f64 x x)))","(/.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x) (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 x #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (*.f64 x x)) (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x) (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 x #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (*.f64 x x)) (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)))))","(fma.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 2 binary64) x)","(fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x)","(fma.f64 #s(literal -1 binary64) (fma.f64 x #s(literal 2 binary64) #s(literal 2 binary64)) x)","(fma.f64 #s(literal 1 binary64) x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)))","(fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x)","(fma.f64 x #s(literal 1 binary64) (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)))","(fma.f64 #s(literal 2 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x)","(-.f64 (-.f64 x (*.f64 x #s(literal 2 binary64))) #s(literal 2 binary64))","(-.f64 (/.f64 (*.f64 x x) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x)) (/.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x)))","(-.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x)) (/.f64 (*.f64 x x) (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x)))","(-.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 x #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (*.f64 x x))) (/.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 3 binary64)) (fma.f64 (fma.f64 x #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (*.f64 x x))))","(-.f64 x (fma.f64 x #s(literal 2 binary64) #s(literal 2 binary64)))","(+.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x)","(+.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)))","(*.f64 (pow.f64 (pow.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (+.f64 #s(literal 1 binary64) x)))","(*.f64 (pow.f64 (pow.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 x x x) (+.f64 #s(literal 1 binary64) x)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 (fma.f64 x x x) (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) x)","(*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (+.f64 #s(literal 1 binary64) x))","(*.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x x)) (/.f64 #s(literal -1 binary64) (+.f64 #s(literal 1 binary64) x)))","(*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) #s(literal 1 binary64))","(*.f64 (fma.f64 x x x) (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(*.f64 (fma.f64 x x x) (-.f64 x #s(literal 1 binary64)))","(*.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (pow.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)))","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(*.f64 x (fma.f64 x x #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x) #s(literal -1 binary64))","(pow.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) #s(literal 1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)) x)) (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 x #s(literal 1 binary64)))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (-.f64 x #s(literal 1 binary64)))) (neg.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) x))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) x))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x x))) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 x (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 x (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (neg.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) #s(literal -1 binary64))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (*.f64 x x))) (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x x)))) (neg.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64)))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (*.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (+.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))) (neg.f64 (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 x #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) x) (fma.f64 x x #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)) x) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (-.f64 x #s(literal 1 binary64))) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) x)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 x (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (fma.f64 x x #s(literal 1 binary64)))","(/.f64 (*.f64 x (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (*.f64 (fma.f64 x x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x)))","(/.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal 6 binary64)) (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x x))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 x x #s(literal -1 binary64))) (*.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (+.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x x)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) (+.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x))","(neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(fma.f64 (pow.f64 x #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)) (neg.f64 x))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64) (neg.f64 x))","(fma.f64 (fma.f64 x x x) x (neg.f64 (fma.f64 x x x)))","(fma.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 x x) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(fma.f64 (-.f64 x #s(literal 1 binary64)) x (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (-.f64 x #s(literal 1 binary64)) x (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 x x)))","(fma.f64 #s(literal -1 binary64) x (pow.f64 x #s(literal 3 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)) (neg.f64 x))","(fma.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(fma.f64 (*.f64 x x) x (neg.f64 x))","(fma.f64 x (fma.f64 x x x) (neg.f64 (fma.f64 x x x)))","(fma.f64 x (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 x (-.f64 x #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 x x)))","(fma.f64 x #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))","(fma.f64 x (*.f64 x x) (neg.f64 x))","(exp.f64 (*.f64 (log.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(+.f64 (*.f64 x (fma.f64 x x x)) (neg.f64 (fma.f64 x x x)))","(+.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(+.f64 (*.f64 (fma.f64 x x x) x) (neg.f64 (fma.f64 x x x)))","(+.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(+.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))))","(+.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 x x)))","(+.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x))","(+.f64 (neg.f64 x) (pow.f64 x #s(literal 3 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) x) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (fma.f64 x x #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) x) (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(*.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x x))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) x))","(*.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) #s(literal -1 binary64)) (pow.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) x))","(*.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) x) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (pow.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x) (pow.f64 (pow.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x) (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)))","(*.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64))) (pow.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))) (/.f64 #s(literal -1 binary64) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(*.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(pow.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) x)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x x)))","(/.f64 (neg.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (+.f64 #s(literal 1 binary64) x))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (+.f64 #s(literal 1 binary64) x))) (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x))) (neg.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x))) (neg.f64 (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x))) (neg.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x))) (neg.f64 (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x #s(literal -1 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (neg.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) #s(literal 1 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)))) (neg.f64 (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (+.f64 (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))) (neg.f64 (neg.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) x))) (neg.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -3 binary64))))))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x)))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -3 binary64))))))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64)))) (neg.f64 (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -3 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) #s(literal -1 binary64)))) (neg.f64 (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -3 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (neg.f64 (fma.f64 x x x)))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 (neg.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))","(/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (+.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) x)","(/.f64 (*.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (+.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x)) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x)) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x)) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x)) (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))","(/.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64))) (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (+.f64 (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)))) (neg.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) (neg.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (neg.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) x)) (neg.f64 (fma.f64 x x #s(literal -1 binary64))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 (*.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -3 binary64)))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)))))","(/.f64 (fma.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -3 binary64)))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64))) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 1 binary64))) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -3 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) #s(literal -1 binary64))) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -3 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (neg.f64 (fma.f64 x x x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))","(/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) x) (fma.f64 x x #s(literal -1 binary64)))","(/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))))","(/.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64))))))","(/.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64))) (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) x)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (*.f64 (-.f64 x #s(literal 1 binary64)) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) x) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64) (*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) x))","(fma.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) x (*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64)))","(fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (pow.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -3 binary64)))) (pow.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64))) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 #s(literal 1 binary64) x)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 #s(literal 1 binary64) x)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 #s(literal 1 binary64) (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (*.f64 x (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64)))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 x (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (*.f64 #s(literal 1 binary64) (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64)))))","(-.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (/.f64 #s(literal 2 binary64) x))","(-.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (/.f64 #s(literal -2 binary64) x))","(+.f64 (*.f64 #s(literal 1 binary64) (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64)))) (*.f64 x (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64)))))","(+.f64 (*.f64 x (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64)))) (*.f64 #s(literal 1 binary64) (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64)))))","(+.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64)) (*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) x))","(+.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) x) (*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64)))","(+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(+.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(*.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (pow.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (pow.f64 (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (*.f64 x x))) (neg.f64 (-.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) x)))","(/.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (*.f64 x x) (*.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (*.f64 x x)) (-.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) x))","(/.f64 (+.f64 (pow.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (*.f64 x x) (*.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)))) (neg.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))))","(fma.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x)) x (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) #s(literal -1 binary64)) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (neg.f64 x) (neg.f64 x) (+.f64 x (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))))","(fma.f64 (fma.f64 x x x) #s(literal 1 binary64) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))","(fma.f64 (+.f64 #s(literal 1 binary64) x) x (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (fma.f64 x x x))","(fma.f64 #s(literal 1 binary64) (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 #s(literal 1 binary64) (*.f64 x x) (+.f64 x (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))))","(fma.f64 #s(literal 1 binary64) x (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)))","(fma.f64 (*.f64 x x) #s(literal 1 binary64) (+.f64 x (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))))","(fma.f64 x (+.f64 #s(literal 1 binary64) x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 x #s(literal 1 binary64) (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)))","(fma.f64 x x (+.f64 x (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))) (/.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))) (/.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))))","(+.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) x) (*.f64 x x))","(+.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) x)","(+.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))","(+.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))","(+.f64 (*.f64 x x) (+.f64 x (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))))","(+.f64 x (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)))","(*.f64 (pow.f64 (pow.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (+.f64 #s(literal 1 binary64) x)))","(*.f64 (pow.f64 (pow.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 x x x) (+.f64 #s(literal 1 binary64) x)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 (fma.f64 x x x) (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) x)","(*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (+.f64 #s(literal 1 binary64) x))","(*.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x x)) (/.f64 #s(literal -1 binary64) (+.f64 #s(literal 1 binary64) x)))","(*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) #s(literal 1 binary64))","(*.f64 (fma.f64 x x x) (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(*.f64 (fma.f64 x x x) (-.f64 x #s(literal 1 binary64)))","(*.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (pow.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)))","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(*.f64 x (fma.f64 x x #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x) #s(literal -1 binary64))","(pow.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) #s(literal 1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)) x)) (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 x #s(literal 1 binary64)))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (-.f64 x #s(literal 1 binary64)))) (neg.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) x))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) x))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x x))) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 x (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 x (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (neg.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) #s(literal -1 binary64))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (*.f64 x x))) (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x x)))) (neg.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64)))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (*.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (+.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))) (neg.f64 (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 x #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) x) (fma.f64 x x #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)) x) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (-.f64 x #s(literal 1 binary64))) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) x)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 x (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (fma.f64 x x #s(literal 1 binary64)))","(/.f64 (*.f64 x (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (*.f64 (fma.f64 x x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x)))","(/.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal 6 binary64)) (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x x))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 x x #s(literal -1 binary64))) (*.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (+.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x x)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) (+.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x))","(neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(fma.f64 (pow.f64 x #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)) (neg.f64 x))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64) (neg.f64 x))","(fma.f64 (fma.f64 x x x) x (neg.f64 (fma.f64 x x x)))","(fma.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 x x) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(fma.f64 (-.f64 x #s(literal 1 binary64)) x (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (-.f64 x #s(literal 1 binary64)) x (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 x x)))","(fma.f64 #s(literal -1 binary64) x (pow.f64 x #s(literal 3 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)) (neg.f64 x))","(fma.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(fma.f64 (*.f64 x x) x (neg.f64 x))","(fma.f64 x (fma.f64 x x x) (neg.f64 (fma.f64 x x x)))","(fma.f64 x (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 x (-.f64 x #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 x x)))","(fma.f64 x #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))","(fma.f64 x (*.f64 x x) (neg.f64 x))","(exp.f64 (*.f64 (log.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(+.f64 (*.f64 x (fma.f64 x x x)) (neg.f64 (fma.f64 x x x)))","(+.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(+.f64 (*.f64 (fma.f64 x x x) x) (neg.f64 (fma.f64 x x x)))","(+.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(+.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))))","(+.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 x x)))","(+.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x))","(+.f64 (neg.f64 x) (pow.f64 x #s(literal 3 binary64)))","(*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))","(*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64)))) (neg.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (-.f64 x #s(literal 1 binary64)))) (neg.f64 (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 x #s(literal 1 binary64)))) (neg.f64 (fma.f64 (fma.f64 x #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (*.f64 x x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 x #s(literal 1 binary64)))) (neg.f64 (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x))) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (neg.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))))) (neg.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x)))) (neg.f64 (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (fma.f64 (fma.f64 x #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (*.f64 x x))))","(/.f64 (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (+.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (*.f64 (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x) (+.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (*.f64 x x)) (+.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (*.f64 (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) (+.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (fma.f64 (fma.f64 x #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (*.f64 x x)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))))) (neg.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x)))) (neg.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (fma.f64 x #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (*.f64 x x)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))))) (neg.f64 (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x)))) (neg.f64 (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (fma.f64 (fma.f64 x #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (*.f64 x x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64))) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (-.f64 x #s(literal 1 binary64))) (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x))","(/.f64 (*.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 x #s(literal 1 binary64))) (fma.f64 (fma.f64 x #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (*.f64 x x)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 x #s(literal 1 binary64))) (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x)) (+.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (fma.f64 x x #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)))) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x))","(/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x))) (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x))","(/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (fma.f64 x #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (*.f64 x x)))","(/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) (fma.f64 x x #s(literal -1 binary64))) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (+.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64))) (*.f64 (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x) (+.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x #s(literal -1 binary64))) (*.f64 (fma.f64 (fma.f64 x #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (*.f64 x x)) (+.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x #s(literal -1 binary64))) (*.f64 (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) (+.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 x #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (*.f64 x x)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)))) (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x)))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x))) (*.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x)))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 (fma.f64 x #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (*.f64 x x))))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (fma.f64 (fma.f64 x #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (*.f64 x x))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)))))","(fma.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) (-.f64 x #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) x (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) #s(literal -1 binary64)))","(fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(fma.f64 (-.f64 x #s(literal 1 binary64)) x (*.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (-.f64 x #s(literal 1 binary64)) x (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))))","(fma.f64 x (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (*.f64 #s(literal -1 binary64) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x)))","(fma.f64 x (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) (-.f64 x #s(literal 1 binary64))))","(fma.f64 x (-.f64 x #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))))","(+.f64 (*.f64 x (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x)) (*.f64 #s(literal -1 binary64) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x)))","(+.f64 (*.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(+.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) #s(literal -1 binary64)))","(+.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(+.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (*.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) (-.f64 x #s(literal 1 binary64))))","(+.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))))","(*.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (pow.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (pow.f64 (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (*.f64 x x))) (neg.f64 (-.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) x)))","(/.f64 (neg.f64 (+.f64 (pow.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (*.f64 x x) (*.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (*.f64 x x)) (-.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) x))","(/.f64 (+.f64 (pow.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) #s(literal 2 binary64)) (-.f64 (*.f64 x x) (*.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)))) (neg.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))))","(fma.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x)) x (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) #s(literal -1 binary64)) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (neg.f64 x) (neg.f64 x) (+.f64 x (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))))","(fma.f64 (fma.f64 x x x) #s(literal 1 binary64) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))","(fma.f64 (+.f64 #s(literal 1 binary64) x) x (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (fma.f64 x x x))","(fma.f64 #s(literal 1 binary64) (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 #s(literal 1 binary64) (*.f64 x x) (+.f64 x (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))))","(fma.f64 #s(literal 1 binary64) x (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)))","(fma.f64 (*.f64 x x) #s(literal 1 binary64) (+.f64 x (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))))","(fma.f64 x (+.f64 #s(literal 1 binary64) x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 x #s(literal 1 binary64) (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)))","(fma.f64 x x (+.f64 x (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))) (/.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))) (/.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))))","(+.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) x) (*.f64 x x))","(+.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) x)","(+.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))","(+.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))","(+.f64 (*.f64 x x) (+.f64 x (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))))","(+.f64 x (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (*.f64 x x)))","(*.f64 (pow.f64 (pow.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (+.f64 #s(literal 1 binary64) x)))","(*.f64 (pow.f64 (pow.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 x x x) (+.f64 #s(literal 1 binary64) x)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 (fma.f64 x x x) (exp.f64 (neg.f64 (log1p.f64 x)))))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) x)","(*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (+.f64 #s(literal 1 binary64) x))","(*.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x x)) (/.f64 #s(literal -1 binary64) (+.f64 #s(literal 1 binary64) x)))","(*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) #s(literal 1 binary64))","(*.f64 (fma.f64 x x x) (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(*.f64 (fma.f64 x x x) (-.f64 x #s(literal 1 binary64)))","(*.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (pow.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)))","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(*.f64 x (fma.f64 x x #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x) #s(literal -1 binary64))","(pow.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) #s(literal 1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)) x)) (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 x #s(literal 1 binary64)))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (-.f64 x #s(literal 1 binary64)))) (neg.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) x))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) x))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x x))) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 x (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 x (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (neg.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) #s(literal -1 binary64))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (*.f64 x x))) (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x))))))","(/.f64 (neg.f64 (neg.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x x)))) (neg.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64)))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (*.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (+.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))) (neg.f64 (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 x #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) x) (fma.f64 x x #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)) x) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (-.f64 x #s(literal 1 binary64))) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) x)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 x (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (fma.f64 x x #s(literal 1 binary64)))","(/.f64 (*.f64 x (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (*.f64 (fma.f64 x x x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x)))","(/.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal 6 binary64)) (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x)))))","(/.f64 (neg.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x x))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 x x #s(literal -1 binary64))) (*.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (+.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x x)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) (+.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x))","(neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(fma.f64 (pow.f64 x #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)) (neg.f64 x))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64) (neg.f64 x))","(fma.f64 (fma.f64 x x x) x (neg.f64 (fma.f64 x x x)))","(fma.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 x x) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(fma.f64 (-.f64 x #s(literal 1 binary64)) x (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 (-.f64 x #s(literal 1 binary64)) x (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 x x)))","(fma.f64 #s(literal -1 binary64) x (pow.f64 x #s(literal 3 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)) (neg.f64 x))","(fma.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(fma.f64 (*.f64 x x) x (neg.f64 x))","(fma.f64 x (fma.f64 x x x) (neg.f64 (fma.f64 x x x)))","(fma.f64 x (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))))","(fma.f64 x (-.f64 x #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 x x)))","(fma.f64 x #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))","(fma.f64 x (*.f64 x x) (neg.f64 x))","(exp.f64 (*.f64 (log.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x)) #s(literal -1 binary64)))","(+.f64 (*.f64 x (fma.f64 x x x)) (neg.f64 (fma.f64 x x x)))","(+.f64 (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(+.f64 (*.f64 (fma.f64 x x x) x) (neg.f64 (fma.f64 x x x)))","(+.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 x x)) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(+.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (*.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))))","(+.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 x x)))","(+.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x))","(+.f64 (neg.f64 x) (pow.f64 x #s(literal 3 binary64)))","(*.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) (pow.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (fma.f64 x #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (*.f64 x x)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x) (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (fma.f64 x #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (*.f64 x x)) (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x)))) (neg.f64 (neg.f64 (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 x #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (*.f64 x x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)))) (neg.f64 (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x))) (neg.f64 (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x x (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (fma.f64 x #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (*.f64 x x))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x))","(/.f64 (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x)) (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x))","(/.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x))))","(/.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (fma.f64 x #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (*.f64 x x)))","(/.f64 (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x) (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 x #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (*.f64 x x)) (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (-.f64 (*.f64 x x) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x) (-.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 x #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (*.f64 x x)) (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (-.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64))) (fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) #s(literal 8 binary64) (pow.f64 x #s(literal 3 binary64)))))","(fma.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal 2 binary64) x)","(fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x)","(fma.f64 #s(literal -1 binary64) (fma.f64 x #s(literal 2 binary64) #s(literal 2 binary64)) x)","(fma.f64 #s(literal 1 binary64) x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)))","(fma.f64 #s(literal -2 binary64) (+.f64 #s(literal 1 binary64) x) x)","(fma.f64 x #s(literal 1 binary64) (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)))","(fma.f64 #s(literal 2 binary64) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x)","(-.f64 (-.f64 x (*.f64 x #s(literal 2 binary64))) #s(literal 2 binary64))","(-.f64 (/.f64 (*.f64 x x) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x)) (/.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x)))","(-.f64 (/.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 2 binary64)) (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x)) (/.f64 (*.f64 x x) (-.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x)))","(-.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 (fma.f64 x #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (*.f64 x x))) (/.f64 (pow.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) #s(literal 3 binary64)) (fma.f64 (fma.f64 x #s(literal 2 binary64) #s(literal 2 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 2 binary64) x) (*.f64 x x))))","(-.f64 x (fma.f64 x #s(literal 2 binary64) #s(literal 2 binary64)))","(+.f64 (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)) x)","(+.f64 x (fma.f64 #s(literal -2 binary64) x #s(literal -2 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x)) x)","(*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 x x x) #s(literal 1 binary64))","(*.f64 (+.f64 #s(literal 1 binary64) x) x)","(*.f64 #s(literal 1 binary64) (fma.f64 x x x))","(*.f64 x (+.f64 #s(literal 1 binary64) x))","(pow.f64 (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64))) (neg.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (neg.f64 (*.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (-.f64 x (*.f64 x x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))) (neg.f64 (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (neg.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64)) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) x) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (*.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 x #s(literal 4 binary64))) (-.f64 x (*.f64 x x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (fma.f64 x x (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 x x (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 x #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))))","(fma.f64 (neg.f64 x) (neg.f64 x) x)","(fma.f64 #s(literal 1 binary64) (*.f64 x x) x)","(fma.f64 #s(literal 1 binary64) x (*.f64 x x))","(fma.f64 (*.f64 x x) #s(literal 1 binary64) x)","(fma.f64 x #s(literal 1 binary64) (*.f64 x x))","(fma.f64 x x x)","(-.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) x)) (/.f64 (*.f64 x x) (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(+.f64 (*.f64 x x) x)","(+.f64 x (*.f64 x x))","(*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal 2 binary64) x))","(*.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (*.f64 x x)))","(*.f64 #s(literal -2 binary64) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal -1 binary64)))","(*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -2 binary64)))","(pow.f64 (/.f64 x (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (*.f64 x #s(literal 1/2 binary64)) x) #s(literal -1 binary64))","(pow.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal -1 binary64))","(/.f64 (/.f64 #s(literal -2 binary64) x) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (/.f64 #s(literal 2 binary64) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","(/.f64 (/.f64 #s(literal 2 binary64) x) (neg.f64 (neg.f64 x)))","(/.f64 (/.f64 #s(literal 2 binary64) x) x)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 x (/.f64 #s(literal 2 binary64) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(/.f64 #s(literal -2 binary64) (neg.f64 (neg.f64 (*.f64 (neg.f64 x) x))))","(/.f64 #s(literal -2 binary64) (*.f64 (neg.f64 x) x))","(/.f64 #s(literal 2 binary64) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(neg.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)))","(exp.f64 (*.f64 (log.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal -2 binary64) (pow.f64 x #s(literal -3/2 binary64))) (pow.f64 x #s(literal -3/2 binary64)))","(*.f64 (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -2 binary64)))","(*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))","(*.f64 #s(literal -2 binary64) (pow.f64 x #s(literal -3 binary64)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))))","(*.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x)))","(*.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(pow.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))) #s(literal 1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64))) (neg.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) (neg.f64 x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (-.f64 x #s(literal -1 binary64))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) x))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) (neg.f64 x))))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))","(/.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) x #s(literal -1 binary64))","(fma.f64 x #s(literal 1 binary64) #s(literal -1 binary64))","(expm1.f64 (*.f64 (log.f64 x) #s(literal 1 binary64)))","(expm1.f64 (log.f64 x))","(-.f64 (/.f64 (*.f64 x x) (+.f64 #s(literal 1 binary64) x)) (exp.f64 (neg.f64 (log1p.f64 x))))","(-.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(-.f64 (/.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 x #s(literal 1 binary64))","(exp.f64 (log.f64 (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(literal -1 binary64) x)","(+.f64 x #s(literal -1 binary64))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) x))","(*.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(pow.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(pow.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64))) #s(literal 1 binary64))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (*.f64 (-.f64 x #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))))","(fma.f64 #s(literal 1 binary64) x #s(literal 1 binary64))","(fma.f64 x #s(literal 1 binary64) #s(literal 1 binary64))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(exp.f64 (log1p.f64 x))","(+.f64 #s(literal 1 binary64) x)","(+.f64 x #s(literal 1 binary64))","(*.f64 (pow.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) x) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (fma.f64 x x #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) x) (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(*.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x x))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) x))","(*.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) #s(literal -1 binary64)) (pow.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) x))","(*.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) x) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (pow.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x) (pow.f64 (pow.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x) (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)))","(*.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64))) (pow.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))) (/.f64 #s(literal -1 binary64) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(*.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(pow.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) x)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x x)))","(/.f64 (neg.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (+.f64 #s(literal 1 binary64) x))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (+.f64 #s(literal 1 binary64) x))) (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x))) (neg.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x))) (neg.f64 (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x))) (neg.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x))) (neg.f64 (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x #s(literal -1 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (neg.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) #s(literal 1 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)))) (neg.f64 (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (+.f64 (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))) (neg.f64 (neg.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) x))) (neg.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -3 binary64))))))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x)))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -3 binary64))))))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64)))) (neg.f64 (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -3 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) #s(literal -1 binary64)))) (neg.f64 (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -3 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (neg.f64 (fma.f64 x x x)))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 (neg.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))","(/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (+.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) x)","(/.f64 (*.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (+.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x)) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x)) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x)) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x)) (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))","(/.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64))) (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (+.f64 (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)))) (neg.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) (neg.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (neg.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) x)) (neg.f64 (fma.f64 x x #s(literal -1 binary64))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 (*.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -3 binary64)))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)))))","(/.f64 (fma.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -3 binary64)))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64))) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 1 binary64))) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -3 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) #s(literal -1 binary64))) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -3 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (neg.f64 (fma.f64 x x x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))","(/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) x) (fma.f64 x x #s(literal -1 binary64)))","(/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))))","(/.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64))))))","(/.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64))) (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) x)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (*.f64 (-.f64 x #s(literal 1 binary64)) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) x) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64) (*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) x))","(fma.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) x (*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64)))","(fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (pow.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -3 binary64)))) (pow.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64))) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 #s(literal 1 binary64) x)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 #s(literal 1 binary64) x)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 #s(literal 1 binary64) (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (*.f64 x (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64)))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 x (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (*.f64 #s(literal 1 binary64) (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64)))))","(-.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (/.f64 #s(literal 2 binary64) x))","(-.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (/.f64 #s(literal -2 binary64) x))","(+.f64 (*.f64 #s(literal 1 binary64) (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64)))) (*.f64 x (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64)))))","(+.f64 (*.f64 x (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64)))) (*.f64 #s(literal 1 binary64) (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64)))))","(+.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64)) (*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) x))","(+.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) x) (*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64)))","(+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(+.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(*.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x)) x)","(*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (pow.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (pow.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 x x x) #s(literal 1 binary64))","(*.f64 (+.f64 #s(literal 1 binary64) x) x)","(*.f64 #s(literal 1 binary64) (fma.f64 x x x))","(*.f64 x (+.f64 #s(literal 1 binary64) x))","(pow.f64 (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64))) (neg.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (neg.f64 (*.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (-.f64 x (*.f64 x x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))) (neg.f64 (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (neg.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64)) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) x) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (*.f64 x (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 x #s(literal 4 binary64))) (-.f64 x (*.f64 x x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (fma.f64 x x (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) (neg.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 x x (-.f64 (pow.f64 x #s(literal 4 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 x #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))))","(fma.f64 (neg.f64 x) (neg.f64 x) x)","(fma.f64 #s(literal 1 binary64) (*.f64 x x) x)","(fma.f64 #s(literal 1 binary64) x (*.f64 x x))","(fma.f64 (*.f64 x x) #s(literal 1 binary64) x)","(fma.f64 x #s(literal 1 binary64) (*.f64 x x))","(fma.f64 x x x)","(-.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) x)) (/.f64 (*.f64 x x) (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(+.f64 (*.f64 x x) x)","(+.f64 x (*.f64 x x))","(*.f64 (pow.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))","(*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) x) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (fma.f64 x x #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) x) (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(*.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x x))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) x))","(*.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) #s(literal 1 binary64)) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) #s(literal -1 binary64)) (pow.f64 (/.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))) #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) x))","(*.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) x) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (pow.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x) (pow.f64 (pow.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x) (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)))","(*.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64))) (pow.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))) (/.f64 #s(literal -1 binary64) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(*.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x))","(*.f64 (+.f64 #s(literal 1 binary64) x) (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)))","(*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (/.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(pow.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) x)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x x)))","(/.f64 (neg.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (+.f64 #s(literal 1 binary64) x))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (+.f64 #s(literal 1 binary64) x))) (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x x)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x))) (neg.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x))) (neg.f64 (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x))) (neg.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x))) (neg.f64 (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x #s(literal -1 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (neg.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) #s(literal 1 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)))) (neg.f64 (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (+.f64 (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)))) (neg.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))) (neg.f64 (neg.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) x))) (neg.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (neg.f64 (*.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -3 binary64))))))) (neg.f64 (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x)))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64)))))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -3 binary64))))))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64)))) (neg.f64 (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -3 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) #s(literal -1 binary64)))) (neg.f64 (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -3 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (neg.f64 (fma.f64 x x x)))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 (neg.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (exp.f64 (neg.f64 (log1p.f64 x)))))","(/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))","(/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (+.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) x)","(/.f64 (*.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (+.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x)) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x)) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x)) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x)) (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))","(/.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64))) (+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x))))","(/.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 3 binary64))) (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (+.f64 (pow.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 2 binary64)) (*.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)))) (neg.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) (neg.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64)))) (neg.f64 (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))) (neg.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) x)) (neg.f64 (fma.f64 x x #s(literal -1 binary64))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 (*.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))))","(/.f64 (*.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -3 binary64)))))) (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)))))","(/.f64 (fma.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x (*.f64 (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -3 binary64)))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64))) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal 1 binary64))) (*.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -3 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) #s(literal -1 binary64))) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -3 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)) (neg.f64 (fma.f64 x x x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (exp.f64 (neg.f64 (log1p.f64 x))))","(/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) x) (fma.f64 x x #s(literal -1 binary64)))","(/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64))) (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))))))","(/.f64 (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))) (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (fma.f64 (fma.f64 x x x) (-.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 3 binary64))) (*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (fma.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (-.f64 (*.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))))","(/.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64))))))","(/.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64))) (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))))","(/.f64 (neg.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal 1 binary64)) (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))) (-.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (/.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (-.f64 x #s(literal 1 binary64)))) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64))) (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -3 binary64)) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) x)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64)))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x #s(literal -1 binary64))) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (/.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (*.f64 (-.f64 x #s(literal 1 binary64)) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (/.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) x) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1/2 binary64)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1/2 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64) (*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) x))","(fma.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) x (*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64)))","(fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64)) (pow.f64 (/.f64 #s(literal 2 binary64) x) #s(literal 2 binary64))) (pow.f64 (+.f64 (/.f64 #s(literal 2 binary64) x) (exp.f64 (neg.f64 (log1p.f64 x)))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (-.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -3 binary64)))) (pow.f64 (+.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 4 binary64) (/.f64 #s(literal 2 binary64) (fma.f64 x x x))) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (pow.f64 (fma.f64 x x x) #s(literal -1 binary64)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (-.f64 x #s(literal 1 binary64))) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 #s(literal 1 binary64) x)) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (+.f64 #s(literal 1 binary64) x)) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) #s(literal 1 binary64) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 #s(literal 1 binary64) (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (*.f64 x (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64)))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(fma.f64 x (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (*.f64 #s(literal 1 binary64) (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64)))))","(-.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (/.f64 #s(literal 2 binary64) x))","(-.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) #s(literal 2 binary64)) (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) (/.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -2 binary64)) (-.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x)))) (/.f64 #s(literal -2 binary64) x))","(+.f64 (*.f64 #s(literal 1 binary64) (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64)))) (*.f64 x (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64)))))","(+.f64 (*.f64 x (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64)))) (*.f64 #s(literal 1 binary64) (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64)))))","(+.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64)) (*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) x))","(+.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) x) (*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) #s(literal 1 binary64)))","(+.f64 (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)))","(+.f64 (-.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (/.f64 #s(literal 2 binary64) x)) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (+.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (neg.f64 (-.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (-.f64 x #s(literal 1 binary64)) #s(literal -1 binary64)))))","(*.f64 (*.f64 (fma.f64 x x x) (+.f64 #s(literal 1 binary64) x)) (-.f64 x #s(literal 1 binary64)))","(*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) x)) x)","(*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 1 binary64)) (fma.f64 x x x))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x))","(*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) #s(literal 1 binary64))","(*.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (+.f64 #s(literal 1 binary64) x))","(*.f64 (fma.f64 x x x) (*.f64 #s(literal 1 binary64) (fma.f64 x x #s(literal -1 binary64))))","(*.f64 (fma.f64 x x x) (fma.f64 x x #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)))","(*.f64 x (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (fma.f64 x x x))) (neg.f64 (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)) (fma.f64 x x x))) (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x x) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x x) (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 #s(literal 1 binary64) x)) (neg.f64 (fma.f64 x x x)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 9 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 x x x)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 #s(literal 1 binary64) x)) (neg.f64 (fma.f64 x x x)))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (fma.f64 x x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)))) (neg.f64 (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 x x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)))) (neg.f64 (*.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))) (neg.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))) (neg.f64 (*.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 (-.f64 x #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (*.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)) (fma.f64 x x x)) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (*.f64 (fma.f64 x x x) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (fma.f64 x x #s(literal 1 binary64)))","(/.f64 (*.f64 (fma.f64 x x x) (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (pow.f64 (fma.f64 x x x) #s(literal 2 binary64))) (-.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 #s(literal 1 binary64) x)) (neg.f64 (fma.f64 x x x))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 9 binary64)) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (pow.f64 (neg.f64 (fma.f64 x x x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (fma.f64 x x x) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 #s(literal 1 binary64) x)) (neg.f64 (fma.f64 x x x))))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (fma.f64 x x #s(literal -1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64))) (*.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64))) (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64))) (*.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (fma.f64 x x #s(literal 1 binary64)) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x))) (*.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 (-.f64 x #s(literal 1 binary64)) x)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)) (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 x #s(literal 6 binary64)))) (*.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)) (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64)))))","(fma.f64 (pow.f64 (pow.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (+.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))))","(fma.f64 (pow.f64 (pow.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) (+.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)))","(fma.f64 (pow.f64 (pow.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))))","(fma.f64 (pow.f64 (pow.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)))","(fma.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))))","(fma.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)))","(fma.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))))","(fma.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)))","(fma.f64 (*.f64 (*.f64 x x) (+.f64 #s(literal 1 binary64) x)) x (neg.f64 (fma.f64 x x x)))","(fma.f64 (*.f64 (fma.f64 x x x) x) x (neg.f64 (fma.f64 x x x)))","(fma.f64 (neg.f64 (fma.f64 x x x)) #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 #s(literal 1 binary64) x)))","(fma.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64) (neg.f64 (fma.f64 x x x)))","(fma.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 x x x) (+.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))))","(fma.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 (fma.f64 x x x) (+.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)))","(fma.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 (fma.f64 x x x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))))","(fma.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 (fma.f64 x x x) (exp.f64 (neg.f64 (log1p.f64 x)))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)))","(fma.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(fma.f64 (fma.f64 x x #s(literal -1 binary64)) x (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))))","(fma.f64 (fma.f64 x x #s(literal -1 binary64)) x (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)))","(fma.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (+.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))))","(fma.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) x) (+.f64 #s(literal 1 binary64) x) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 #s(literal 1 binary64) x) (neg.f64 (fma.f64 x x x)))","(fma.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x x)) (/.f64 #s(literal -1 binary64) (+.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))))","(fma.f64 (*.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (fma.f64 x x x)) (/.f64 #s(literal -1 binary64) (+.f64 #s(literal 1 binary64) x)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)))","(fma.f64 (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)) x (*.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 #s(literal 1 binary64) x)))","(fma.f64 (neg.f64 x) (+.f64 #s(literal 1 binary64) x) (*.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 #s(literal 1 binary64) x)))","(fma.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))))","(fma.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)))","(fma.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) #s(literal 1 binary64) (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))))","(fma.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) #s(literal 1 binary64) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)))","(fma.f64 (fma.f64 x x x) (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))) (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))))","(fma.f64 (fma.f64 x x x) (*.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)))","(fma.f64 (fma.f64 x x x) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))))","(fma.f64 (fma.f64 x x x) (-.f64 x #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)))","(fma.f64 (fma.f64 x x x) #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 #s(literal 1 binary64) x)))","(fma.f64 (fma.f64 x x x) (*.f64 x x) (neg.f64 (fma.f64 x x x)))","(fma.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 (-.f64 x #s(literal 1 binary64)) x) (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))))","(fma.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 (-.f64 x #s(literal 1 binary64)) x) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)))","(fma.f64 (+.f64 #s(literal 1 binary64) x) (pow.f64 x #s(literal 3 binary64)) (neg.f64 (fma.f64 x x x)))","(fma.f64 (+.f64 #s(literal 1 binary64) x) (neg.f64 x) (*.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 #s(literal 1 binary64) x)))","(fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x) (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))))","(fma.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)))","(fma.f64 #s(literal -1 binary64) (fma.f64 x x x) (*.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 #s(literal 1 binary64) x)))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (pow.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (pow.f64 (pow.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))))","(fma.f64 (exp.f64 (neg.f64 (log1p.f64 x))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (fma.f64 x x x)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)))","(fma.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x x x)) (*.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 #s(literal 1 binary64) x)))","(fma.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 #s(literal 1 binary64) x)) (neg.f64 (fma.f64 x x x)))","(fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)))","(fma.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(fma.f64 (*.f64 x x) (fma.f64 x x x) (neg.f64 (fma.f64 x x x)))","(fma.f64 x (*.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 x x)) (neg.f64 (fma.f64 x x x)))","(fma.f64 x (*.f64 x (fma.f64 x x x)) (neg.f64 (fma.f64 x x x)))","(fma.f64 x (*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 #s(literal 1 binary64) x)))","(fma.f64 x (fma.f64 x x #s(literal -1 binary64)) (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))))","(fma.f64 x (fma.f64 x x #s(literal -1 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)))","(+.f64 (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(+.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(+.f64 (neg.f64 (fma.f64 x x x)) (*.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 #s(literal 1 binary64) x)))","(+.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) (+.f64 #s(literal 1 binary64) x)) (neg.f64 (fma.f64 x x x)))","(+.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (*.f64 (*.f64 x x) (fma.f64 x x #s(literal -1 binary64))))","(+.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) x) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (*.f64 x x)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":392.77587890625,"type":"rewrite"},{"compiler":[[51954,4624]],"memory":[[9350544,118249264]],"time":192.666015625,"type":"eval"},{"alts":[["(/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) (*.f64 x (fma.f64 x x #s(literal -1 binary64))))","next",0.5341587432313852,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","next",0.7699285793005082,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))","done",60.83974921498693,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (neg.f64 x))))","fresh",0.1015625,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) x)))","next",0.09375,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x))))","next",0.0859375,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))))","next",0.0234375,"binary64"]],"compiler":[[26,17],[21,15],[19,13],[36,24],[35,22],[35,22],[39,28],[26,17],[21,15],[36,24],[35,22],[35,22],[39,28]],"count":[[1480,7]],"kept":[{"done":[2,1],"fresh":[18,4],"new":[1455,2],"picked":[5,0]}],"memory":[[-2200496,56872448]],"min-error":[[0.0,"binary64"]],"time":36.132080078125,"type":"prune"},{"egraph":[[0,8110,338,0.077573464],[6,7816,340,0.014310836],[5,3959,340,0.034223826],[4,1579,360,0.016421454],[3,539,366,0.005703651],[2,219,372,0.001841882],[1,120,374,0.000859264],[0,72,374,0.000663456],[0,51,386,0.000406397]],"inputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))))","(-.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)))","#s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64))))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))","#s(literal 2 binary64)","(pow.f64 x #s(literal 5 binary64))","x","#s(literal 5 binary64)","(*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))","(pow.f64 x #s(literal -3 binary64))","#s(literal -3 binary64)","#s(literal -2 binary64)","(/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) (*.f64 x (fma.f64 x x #s(literal -1 binary64))))","#s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64))","#s(literal 2 binary64)","(*.f64 x (fma.f64 x x #s(literal -1 binary64)))","x","(fma.f64 x x #s(literal -1 binary64))","#s(literal -1 binary64)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","#s(literal 2 binary64)","(pow.f64 x #s(literal 3 binary64))","x","#s(literal 3 binary64)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x))))","(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x)))","(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64)))","(-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","#s(literal 2 binary64)","(*.f64 x x)","x","#s(literal -2 binary64)","(pow.f64 x #s(literal 5 binary64))","#s(literal 5 binary64)","(/.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x))","(/.f64 #s(literal -2 binary64) x)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) x)))","(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) x))","(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64)))","(-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","#s(literal 2 binary64)","(*.f64 x x)","x","#s(literal -2 binary64)","(pow.f64 x #s(literal 5 binary64))","#s(literal 5 binary64)","(/.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) x)","(/.f64 #s(literal -2 binary64) (*.f64 x x))"]],"locations":[["(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64)))","cost-diff",0],["(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) x))","cost-diff",0],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) x)))","cost-diff",0],["(/.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) x)","cost-diff",2],["(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64)))","cost-diff",0],["(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x)))","cost-diff",0],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x))))","cost-diff",0],["(/.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x))","cost-diff",2],["(pow.f64 x #s(literal 3 binary64))","cost-diff",0],["(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","cost-diff",0],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","cost-diff",0],["(fma.f64 x x #s(literal -1 binary64))","cost-diff",0],["#s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64))","cost-diff",0],["(/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) (*.f64 x (fma.f64 x x #s(literal -1 binary64))))","cost-diff",0],["(*.f64 x (fma.f64 x x #s(literal -1 binary64)))","cost-diff",1],["(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))","cost-diff",0],["#s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64))))","cost-diff",0],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))))","cost-diff",0],["(-.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)))","cost-diff",1]],"memory":[[7562928,36160624]],"method":["egg-herbie"],"outputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64))))))","(-.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)))","(fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))))","#s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64))))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))","#s(literal 2 binary64)","(pow.f64 x #s(literal 5 binary64))","x","#s(literal 5 binary64)","(*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))","(pow.f64 x #s(literal -3 binary64))","#s(literal -3 binary64)","#s(literal -2 binary64)","(/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) (*.f64 x (fma.f64 x x #s(literal -1 binary64))))","(/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) x))","#s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64))","#s(literal 2 binary64)","(*.f64 x (fma.f64 x x #s(literal -1 binary64)))","(-.f64 (pow.f64 x #s(literal 3 binary64)) x)","x","(fma.f64 x x #s(literal -1 binary64))","#s(literal -1 binary64)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","#s(literal 2 binary64)","(pow.f64 x #s(literal 3 binary64))","x","#s(literal 3 binary64)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))))","(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x)))","(-.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64)))","(/.f64 (-.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64)))","(-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64))","(-.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal -2 binary64))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(/.f64 (/.f64 #s(literal 2 binary64) x) x)","#s(literal 2 binary64)","(*.f64 x x)","x","#s(literal -2 binary64)","(pow.f64 x #s(literal 5 binary64))","#s(literal 5 binary64)","(/.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x))","(/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))","(/.f64 #s(literal -2 binary64) x)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) x)))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))))","(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) x))","(-.f64 (/.f64 (-.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64)))","(/.f64 (-.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64)))","(-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64))","(-.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(literal -2 binary64))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(/.f64 (/.f64 #s(literal 2 binary64) x) x)","#s(literal 2 binary64)","(*.f64 x x)","x","#s(literal -2 binary64)","(pow.f64 x #s(literal 5 binary64))","#s(literal 5 binary64)","(/.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) x)","(/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))","(/.f64 #s(literal -2 binary64) (*.f64 x x))","(/.f64 (/.f64 #s(literal -2 binary64) x) x)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":237.468017578125,"type":"simplify"},{"compiler":[[305,42]],"locations":[["(/.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) x)","accuracy",0.0703125],["(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64)))","accuracy",0.7040051621802543],["(/.f64 #s(literal 2 binary64) (*.f64 x x))","accuracy",1.024693459032993],["(/.f64 #s(literal -2 binary64) (*.f64 x x))","accuracy",1.024693459032993],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x))))","accuracy",0.0],["(/.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x))","accuracy",0.0859375],["(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64)))","accuracy",0.7040051621802543],["(/.f64 #s(literal 2 binary64) (*.f64 x x))","accuracy",1.024693459032993],["(pow.f64 x #s(literal 3 binary64))","accuracy",0.0],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","accuracy",0.259871105606007],["(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","accuracy",0.5100574736945012],["(fma.f64 x x #s(literal -1 binary64))","accuracy",0.0],["#s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64))","accuracy",0.0],["(*.f64 x (fma.f64 x x #s(literal -1 binary64)))","accuracy",0.09375],["(/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) (*.f64 x (fma.f64 x x #s(literal -1 binary64))))","accuracy",0.5139637236945012],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))))","accuracy",0.0],["(*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))","accuracy",0.01171875],["#s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64))))","accuracy",0.2614757919557579],["(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))","accuracy",0.7000989121802543]],"memory":[[-11028816,61136240]],"mixsample":[[0.224365234375,"ival-sub",1200],[0.829345703125,"ival-add",1200],[27.80615234375,"ival-div",0],[23.43994140625,"adjust",800],[0.82958984375,"ival-mult",1200],[0.31982421875,"ival-sub",1600],[5.60107421875,"ival-div",400],[0.196533203125,"ival-sub",2000],[0.698974609375,"ival-mult",2000],[0.24658203125,"ival-div",1600],[0.1220703125,"ival-assert",0],[10.21728515625,"ival-sub",0],[1.314208984375,"ival-sub",400],[1.698974609375,"adjust",2000],[22.876953125,"ival-pow",0],[0.1025390625,"ival-sub",2400],[0.675537109375,"ival-mult",800],[48.27783203125,"ival-add",0],[0.109130859375,"ival-mult",400],[0.94384765625,"ival-add",1600],[0.1943359375,"ival-sub",800],[10.36572265625,"ival-mult",0],[0.94287109375,"ival-mult",1600],[0.7666015625,"ival-add",2000],[0.0439453125,"ival-add",400],[0.227294921875,"ival-true",0],[0.383544921875,"ival-add",2400],[0.384521484375,"ival-mult",2400],[0.6865234375,"ival-add",800],[0.85009765625,"exact",0]],"outcomes":[[185.529052734375,1,"valid",236],[13.004150390625,2,"valid",17],[0.822998046875,0,"valid",3]],"time":237.866943359375,"type":"localize"},{"count":[[21,28]],"inputs":[["(-.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))))","#s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64))))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))","(*.f64 x (fma.f64 x x #s(literal -1 binary64)))","(/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) (*.f64 x (fma.f64 x x #s(literal -1 binary64))))","#s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64))","(fma.f64 x x #s(literal -1 binary64))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","(pow.f64 x #s(literal 3 binary64))","(/.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x))))","(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x)))","(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64)))","(/.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) x)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) x)))","(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) x))","(*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(/.f64 #s(literal -2 binary64) (*.f64 x x))"]],"memory":[[-267136,7516768]],"outputs":[["(/ 2 (pow x 7))","(/ (+ 2 (* 2 (pow x 2))) (pow x 7))","(/ (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))) (pow x 7))","(/ -2 x)","(/ (- (* -2 (pow x 2)) 2) x)","(/ (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2) x)","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2)) 2) x)","(/ 2 (pow x 5))","(* -1 x)","(* x (- (pow x 2) 1))","2","-1","(- (pow x 2) 1)","(/ 2 (pow x 3))","(pow x 3)","(/ -2 (pow x 3))","(/ 2 (pow x 2))","(/ -2 (pow x 2))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))) (pow x 3))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 5))","(* (pow x 3) (- 1 (/ 1 (pow x 2))))","(pow x 2)","(* (pow x 2) (- 1 (/ 1 (pow x 2))))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 2))) 2) (pow x 3)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 4))) (+ 2 (* 2 (/ 1 (pow x 2))))) (pow x 3)))","(* -1 (* (pow x 3) (- (/ 1 (pow x 2)) 1)))"]],"series":[[3.52197265625,"((- (/ (- (/ 2 (* x x)) -2) (pow x 5)) (* (pow x -3) -2)) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/ 2 (pow x 5)) (* x (+ (* x x) -1)) (/ (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) (* x (+ (* x x) -1))) (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) (+ (* x x) -1) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ 2 (pow x 3)) (pow x 3) (/ (/ -2 x) (* x x)) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/ (/ -2 x) (* x x))) (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/ (/ -2 (* x x)) x) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/ (/ -2 (* x x)) x)) (* (pow x -3) -2) (/ 2 (* x x)) (/ -2 (* x x)))","x","-inf"],[4.6591796875,"((- (/ (- (/ 2 (* x x)) -2) (pow x 5)) (* (pow x -3) -2)) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/ 2 (pow x 5)) (* x (+ (* x x) -1)) (/ (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) (* x (+ (* x x) -1))) (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) (+ (* x x) -1) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ 2 (pow x 3)) (pow x 3) (/ (/ -2 x) (* x x)) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/ (/ -2 x) (* x x))) (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/ (/ -2 (* x x)) x) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/ (/ -2 (* x x)) x)) (* (pow x -3) -2) (/ 2 (* x x)) (/ -2 (* x x)))","x","inf"],[3.217041015625,"((- (/ (- (/ 2 (* x x)) -2) (pow x 5)) (* (pow x -3) -2)) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/ 2 (pow x 5)) (* x (+ (* x x) -1)) (/ (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) (* x (+ (* x x) -1))) (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) (+ (* x x) -1) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/ 2 (pow x 3)) (pow x 3) (/ (/ -2 x) (* x x)) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/ (/ -2 x) (* x x))) (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/ (/ -2 (* x x)) x) (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (- (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/ (/ -2 (* x x)) x)) (* (pow x -3) -2) (/ 2 (* x x)) (/ -2 (* x x)))","x","0"]],"time":12.5439453125,"type":"series"},{"count":[[28,28]],"egraph":[[0,8298,215,0.078286987],[4,4631,223,0.030418363],[3,1380,225,0.019626252],[2,455,241,0.004250329],[1,153,248,0.001315381],[0,72,251,0.000523685]],"inputs":[["(/ 2 (pow x 7))","(/ (+ 2 (* 2 (pow x 2))) (pow x 7))","(/ (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))) (pow x 7))","(/ -2 x)","(/ (- (* -2 (pow x 2)) 2) x)","(/ (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2) x)","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2)) 2) x)","(/ 2 (pow x 5))","(* -1 x)","(* x (- (pow x 2) 1))","2","-1","(- (pow x 2) 1)","(/ 2 (pow x 3))","(pow x 3)","(/ -2 (pow x 3))","(/ 2 (pow x 2))","(/ -2 (pow x 2))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))) (pow x 3))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))) (pow x 3))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 5))","(* (pow x 3) (- 1 (/ 1 (pow x 2))))","(pow x 2)","(* (pow x 2) (- 1 (/ 1 (pow x 2))))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 2))) 2) (pow x 3)))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 4))) (+ 2 (* 2 (/ 1 (pow x 2))))) (pow x 3)))","(* -1 (* (pow x 3) (- (/ 1 (pow x 2)) 1)))"]],"memory":[[4882016,35421648]],"method":["egg-herbie"],"outputs":[["(/ 2 (pow x 7))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 7 binary64)))","(/ (+ 2 (* 2 (pow x 2))) (pow x 7))","(*.f64 (fma.f64 x x #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 7 binary64))))","(/ (+ 2 (* (pow x 2) (+ 2 (* 2 (pow x 2))))) (pow x 7))","(/.f64 (fma.f64 (fma.f64 x x (pow.f64 x #s(literal 4 binary64))) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal 7 binary64)))","(/ -2 x)","(/.f64 #s(literal -2 binary64) x)","(/ (- (* -2 (pow x 2)) 2) x)","(fma.f64 #s(literal -2 binary64) x (/.f64 #s(literal -2 binary64) x))","(/ (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2) x)","(fma.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) x) #s(literal -2 binary64) (/.f64 #s(literal -2 binary64) x))","(/ (- (* (pow x 2) (- (* (pow x 2) (- (* -2 (pow x 2)) 2)) 2)) 2) x)","(*.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (fma.f64 #s(literal -2 binary64) x (/.f64 #s(literal -2 binary64) x)))","(/ 2 (pow x 5))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))","(* -1 x)","(neg.f64 x)","(* x (- (pow x 2) 1))","(-.f64 (pow.f64 x #s(literal 3 binary64)) x)","2","#s(literal 2 binary64)","-1","#s(literal -1 binary64)","(- (pow x 2) 1)","(fma.f64 x x #s(literal -1 binary64))","(/ 2 (pow x 3))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","(pow x 3)","(pow.f64 x #s(literal 3 binary64))","(/ -2 (pow x 3))","(/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))","(/ 2 (pow x 2))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(/ -2 (pow x 2))","(/.f64 #s(literal -2 binary64) (*.f64 x x))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 3))","(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (/ 2 (pow x 4)))) (pow x 3))","(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64))))","(/ (+ 2 (+ (* 2 (/ 1 (pow x 2))) (+ (* 2 (/ 1 (pow x 6))) (/ 2 (pow x 4))))) (pow x 3))","(/.f64 (-.f64 (+.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 6 binary64))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 4 binary64)))) (-.f64 #s(literal -2 binary64) (/.f64 #s(literal 2 binary64) (*.f64 x x)))) (pow.f64 x #s(literal 3 binary64)))","(/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 5))","(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64)))","(* (pow x 3) (- 1 (/ 1 (pow x 2))))","(-.f64 (pow.f64 x #s(literal 3 binary64)) x)","(pow x 2)","(*.f64 x x)","(* (pow x 2) (- 1 (/ 1 (pow x 2))))","(fma.f64 x x #s(literal -1 binary64))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 2))) 2) (pow x 3)))","(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64))))","(* -1 (/ (- (* -1 (/ (+ 2 (* 2 (/ 1 (pow x 2)))) (pow x 4))) (+ 2 (* 2 (/ 1 (pow x 2))))) (pow x 3)))","(*.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64))) (-.f64 (/.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)))","(* -1 (* (pow x 3) (- (/ 1 (pow x 2)) 1)))","(-.f64 (pow.f64 x #s(literal 3 binary64)) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":216.14208984375,"type":"simplify"},{"count":[[21,682]],"egraph":[[0,8560,280,0.076163225],[2,3408,304,0.037531399],[1,351,304,0.010296893],[0,72,304,0.002198061],[0,51,316,0.000383358]],"inputs":[["(-.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))))","#s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64))))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))","(*.f64 x (fma.f64 x x #s(literal -1 binary64)))","(/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) (*.f64 x (fma.f64 x x #s(literal -1 binary64))))","#s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64))","(fma.f64 x x #s(literal -1 binary64))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","(pow.f64 x #s(literal 3 binary64))","(/.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x))))","(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x)))","(/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64)))","(/.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) x)","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) x)))","(-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) x))","(*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(/.f64 #s(literal -2 binary64) (*.f64 x x))"]],"memory":[[-6420624,56082096]],"outputs":[["(*.f64 (-.f64 (pow.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 2 binary64)) (/.f64 #s(literal 4 binary64) (pow.f64 x #s(literal 6 binary64)))) (pow.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64))))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal -9 binary64)) #s(literal -8 binary64))) (pow.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64))))) (pow.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64))))) (-.f64 (pow.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 2 binary64)) (/.f64 #s(literal 4 binary64) (pow.f64 x #s(literal 6 binary64))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64))))) (pow.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal -9 binary64)) #s(literal -8 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 2 binary64)) (/.f64 #s(literal 4 binary64) (pow.f64 x #s(literal 6 binary64)))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal -9 binary64)) #s(literal -8 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64))))) (pow.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 2 binary64)) (/.f64 #s(literal 4 binary64) (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (-.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 2 binary64)) (/.f64 #s(literal 4 binary64) (pow.f64 x #s(literal 6 binary64))))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal -9 binary64)) #s(literal -8 binary64)))) (neg.f64 (+.f64 (pow.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 2 binary64)) (-.f64 (/.f64 #s(literal 4 binary64) (pow.f64 x #s(literal 6 binary64))) (*.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal -9 binary64)) #s(literal -8 binary64)))) (neg.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64))))) (pow.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 2 binary64)) (/.f64 #s(literal 4 binary64) (pow.f64 x #s(literal 6 binary64)))) (-.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64))))","(/.f64 (-.f64 (pow.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 2 binary64)) (/.f64 #s(literal 4 binary64) (pow.f64 x #s(literal 6 binary64)))) (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64))))))","(/.f64 (-.f64 (pow.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal -9 binary64)) #s(literal -8 binary64))) (+.f64 (pow.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 2 binary64)) (-.f64 (/.f64 #s(literal 4 binary64) (pow.f64 x #s(literal 6 binary64))) (*.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal -9 binary64)) #s(literal -8 binary64))) (fma.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64))))) (pow.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64))))) (-.f64 (pow.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 2 binary64)) (/.f64 #s(literal 4 binary64) (pow.f64 x #s(literal 6 binary64)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64))))) (pow.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal -9 binary64)) #s(literal -8 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64))))) (-.f64 (pow.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 2 binary64)) (/.f64 #s(literal 4 binary64) (pow.f64 x #s(literal 6 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64))))) (pow.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal -9 binary64)) #s(literal -8 binary64)))))","(fma.f64 (neg.f64 (pow.f64 x #s(literal -3 binary64))) #s(literal -2 binary64) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))))","(fma.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) x) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal 2 binary64) x) x) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))))","(fma.f64 (/.f64 (/.f64 #s(literal -2 binary64) x) x) (neg.f64 (pow.f64 x #s(literal -1 binary64))) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))))","(fma.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (pow.f64 x #s(literal -1 binary64)) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))))","(fma.f64 (/.f64 #s(literal -2 binary64) x) (neg.f64 (pow.f64 x #s(literal -2 binary64))) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))))","(fma.f64 #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))))","(fma.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 x #s(literal -2 binary64)) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))))","(fma.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))))","(fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))))","(fma.f64 #s(literal -2 binary64) (pow.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))))","(fma.f64 #s(literal -2 binary64) (neg.f64 (pow.f64 x #s(literal -3 binary64))) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))))","(fma.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -3 binary64)) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))))","(-.f64 (/.f64 (pow.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))))) (/.f64 (/.f64 #s(literal 4 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))))))","(-.f64 (/.f64 (pow.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 3 binary64)) (fma.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64))))) (pow.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 2 binary64)))) (/.f64 (*.f64 (pow.f64 x #s(literal -9 binary64)) #s(literal -8 binary64)) (fma.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64))))) (pow.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) #s(literal 2 binary64)))))","(-.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)))","(+.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))))","(+.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64) #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64))))))","#s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64))))","(*.f64 (pow.f64 x #s(literal -5/2 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 5/2 binary64)) #s(literal 2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -5 binary64)) #s(literal 2 binary64))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64))))","(*.f64 #s(literal -2 binary64) (pow.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -5 binary64)))","(pow.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal 1/2 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5/2 binary64)))) (neg.f64 (pow.f64 x #s(literal 5/2 binary64))))","(/.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5/2 binary64))) (pow.f64 x #s(literal 5/2 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal 1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal 1/2 binary64)))","(/.f64 #s(literal -2 binary64) (neg.f64 (neg.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))))))","(/.f64 #s(literal -2 binary64) (neg.f64 (pow.f64 x #s(literal 5 binary64))))","(/.f64 #s(literal 2 binary64) (neg.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64)))))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))","(neg.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64))))","(exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) x)","(*.f64 (fma.f64 x x x) (-.f64 x #s(literal 1 binary64)))","(*.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(*.f64 x (fma.f64 x x #s(literal -1 binary64)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)) x)) (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (*.f64 x (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 x (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (*.f64 x x))) (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x))))))","(/.f64 (*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) x) (fma.f64 x x #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)) x) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (*.f64 x (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (fma.f64 x x #s(literal 1 binary64)))","(/.f64 (*.f64 x (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) (*.f64 x x)) (-.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x)))","(/.f64 (+.f64 (pow.f64 x #s(literal 9 binary64)) (pow.f64 (neg.f64 x) #s(literal 3 binary64))) (+.f64 (pow.f64 x #s(literal 6 binary64)) (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x)))))","(fma.f64 (pow.f64 x #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)) (neg.f64 x))","(fma.f64 (*.f64 x x) x (neg.f64 x))","(fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64) (neg.f64 x))","(fma.f64 #s(literal -1 binary64) x (pow.f64 x #s(literal 3 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)) (neg.f64 x))","(fma.f64 x (*.f64 x x) (neg.f64 x))","(fma.f64 x #s(literal -1 binary64) (pow.f64 x #s(literal 3 binary64)))","(+.f64 (neg.f64 x) (pow.f64 x #s(literal 3 binary64)))","(+.f64 (pow.f64 x #s(literal 3 binary64)) (neg.f64 x))","(*.f64 (/.f64 (/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) x) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (fma.f64 x x #s(literal 1 binary64)))","(*.f64 (/.f64 (/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) x) (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(*.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) (/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) x))","(*.f64 (/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) x) (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x) (pow.f64 (pow.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x) #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (neg.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64))) (pow.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)) #s(literal -1 binary64)))","(*.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) (/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal -1 binary64)) x))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) x) (fma.f64 x x #s(literal -1 binary64))))","(pow.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) x)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) x) (+.f64 #s(literal 1 binary64) x))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (neg.f64 (/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 (neg.f64 (neg.f64 (/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) x))) (neg.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))))","(/.f64 (/.f64 (/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) x) (+.f64 #s(literal 1 binary64) x)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64))) x)","(/.f64 (*.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 (neg.f64 (/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) x)) (neg.f64 (fma.f64 x x #s(literal -1 binary64))))","(/.f64 (neg.f64 (neg.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)))) (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x))))","(/.f64 (/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) x) (fma.f64 x x #s(literal -1 binary64)))","(/.f64 (neg.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x)))","(/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (neg.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64))) (*.f64 (fma.f64 x x #s(literal -1 binary64)) x)))","(neg.f64 (/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) (*.f64 (fma.f64 x x #s(literal -1 binary64)) (neg.f64 x))))","(exp.f64 (*.f64 (log.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 x #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64))))) #s(literal -1 binary64)))","#s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64))","(*.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)) #s(literal -1 binary64)))","(*.f64 (-.f64 x #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) x))","(*.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 x #s(literal 1 binary64)))","(pow.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)) (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64)))) (neg.f64 (-.f64 #s(literal -1 binary64) (*.f64 x x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal 1 binary64)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64)))) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 x x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))))","(/.f64 (neg.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 2 binary64))) (neg.f64 (fma.f64 x x #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) (neg.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (*.f64 x x)))))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (fma.f64 x x #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) x))","(/.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 x x (+.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 4 binary64))) (-.f64 #s(literal -1 binary64) (*.f64 x x)))","(/.f64 (-.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 x #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (*.f64 x x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x #s(literal 1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (pow.f64 (fma.f64 x x #s(literal -1 binary64)) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64)))","(/.f64 (*.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 #s(literal 1 binary64) x)))","(/.f64 (*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (fma.f64 x x (+.f64 #s(literal 1 binary64) x))))","(/.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (fma.f64 x x #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)) (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)) (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x #s(literal 1 binary64)) (-.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (neg.f64 x) x)) (+.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal -1 binary64))))","(fma.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 x x (neg.f64 x)) #s(literal -1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(fma.f64 (-.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 x x (neg.f64 x)) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(fma.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(fma.f64 (+.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 x (-.f64 x (*.f64 x x)) (pow.f64 x #s(literal 4 binary64))) #s(literal -1 binary64)) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(fma.f64 (neg.f64 x) (neg.f64 x) #s(literal -1 binary64))","(fma.f64 (*.f64 x x) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 (+.f64 #s(literal 1 binary64) x) x (*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(fma.f64 (+.f64 #s(literal 1 binary64) x) x (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (*.f64 x x) #s(literal -1 binary64))","(fma.f64 x (+.f64 #s(literal 1 binary64) x) (*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(fma.f64 x (+.f64 #s(literal 1 binary64) x) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(fma.f64 x x #s(literal -1 binary64))","(expm1.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)))","(-.f64 (/.f64 (pow.f64 x #s(literal 4 binary64)) (fma.f64 x x #s(literal 1 binary64))) (pow.f64 (fma.f64 x x #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (*.f64 x x) #s(literal 1 binary64))","(+.f64 (*.f64 x x) #s(literal -1 binary64))","(+.f64 (fma.f64 x x x) (*.f64 (+.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(+.f64 (fma.f64 x x x) (fma.f64 #s(literal -1 binary64) x #s(literal -1 binary64)))","(+.f64 #s(literal -1 binary64) (*.f64 x x))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(*.f64 (neg.f64 (pow.f64 x #s(literal -3 binary64))) #s(literal -2 binary64))","(*.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal 2 binary64) x) x))","(*.f64 (/.f64 (/.f64 #s(literal -2 binary64) x) x) (neg.f64 (pow.f64 x #s(literal -1 binary64))))","(*.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -2 binary64) x) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)))","(*.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 x #s(literal -2 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64))","(*.f64 #s(literal -2 binary64) (pow.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal -2 binary64) (neg.f64 (pow.f64 x #s(literal -3 binary64))))","(*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -3 binary64)))","(pow.f64 (*.f64 (*.f64 x #s(literal 1/2 binary64)) (*.f64 x x)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (neg.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (*.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) x) #s(literal -1 binary64))","(pow.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 x #s(literal 3/2 binary64)))","(/.f64 (/.f64 (/.f64 #s(literal -2 binary64) x) x) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (/.f64 (/.f64 #s(literal -2 binary64) x) x) (neg.f64 x))","(/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (neg.f64 (neg.f64 x)))","(/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) x)","(/.f64 (/.f64 #s(literal -2 binary64) x) (neg.f64 (neg.f64 (*.f64 (neg.f64 x) x))))","(/.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 (neg.f64 x) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64))))","(/.f64 #s(literal -1 binary64) (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64)))","(/.f64 (/.f64 #s(literal 2 binary64) x) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64)))","(/.f64 #s(literal -2 binary64) (neg.f64 (neg.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)))))","(/.f64 #s(literal -2 binary64) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(/.f64 #s(literal 2 binary64) (neg.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64)))","(neg.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)))","(-.f64 #s(literal 0 binary64) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal 3/2 binary64)) (pow.f64 x #s(literal 3/2 binary64)))","(*.f64 (*.f64 x x) x)","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 x #s(literal 3 binary64)))","(*.f64 x (*.f64 x x))","(pow.f64 (exp.f64 #s(literal 3 binary64)) (log.f64 x))","(pow.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 3/2 binary64))","(pow.f64 x #s(literal 3 binary64))","(exp.f64 (fma.f64 (log.f64 x) #s(literal 3/2 binary64) (*.f64 (log.f64 x) #s(literal 3/2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 3/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)) #s(literal 3/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 x #s(literal 3/2 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 x) #s(literal 3 binary64)))","(*.f64 (*.f64 #s(literal -2 binary64) (pow.f64 x #s(literal -3/2 binary64))) (pow.f64 x #s(literal -3/2 binary64)))","(*.f64 (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -2 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal -2 binary64) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -2 binary64) x) x))","(*.f64 (/.f64 (/.f64 #s(literal -2 binary64) x) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (pow.f64 (neg.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (/.f64 x (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)))","(*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))","(*.f64 #s(literal -2 binary64) (pow.f64 x #s(literal -3 binary64)))","(pow.f64 (/.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (neg.f64 (*.f64 (/.f64 (/.f64 #s(literal -2 binary64) x) x) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -2 binary64) x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) x))","(/.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 x #s(literal 3/2 binary64)))","(/.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) (neg.f64 (*.f64 x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) (neg.f64 (*.f64 (*.f64 x x) #s(literal -1/2 binary64))))","(/.f64 (*.f64 (/.f64 (/.f64 #s(literal -2 binary64) x) x) #s(literal 1 binary64)) x)","(/.f64 (*.f64 (/.f64 #s(literal -2 binary64) x) #s(literal 1 binary64)) (*.f64 x x))","(/.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 x #s(literal -1/2 binary64)))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (*.f64 x x) #s(literal -1/2 binary64)))","(/.f64 (/.f64 (/.f64 #s(literal -2 binary64) x) x) (neg.f64 (neg.f64 x)))","(/.f64 (/.f64 (/.f64 #s(literal -2 binary64) x) x) x)","(/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (neg.f64 x))","(/.f64 (/.f64 #s(literal -2 binary64) x) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64))))","(/.f64 (/.f64 #s(literal 2 binary64) x) (neg.f64 (neg.f64 (*.f64 (neg.f64 x) x))))","(/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 (neg.f64 x) x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -2 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64)))","(/.f64 #s(literal -2 binary64) (neg.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))","(/.f64 #s(literal 2 binary64) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(neg.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (fma.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64))))","(*.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (neg.f64 (/.f64 #s(literal 4 binary64) (pow.f64 x #s(literal 6 binary64))))) (pow.f64 (fma.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -9 binary64)))) (pow.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal 8 binary64))))) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) x) (*.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (pow.f64 x #s(literal -6 binary64)))","(*.f64 (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) x) x (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) x))) (pow.f64 x #s(literal -7 binary64)))","(pow.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))) (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (neg.f64 (/.f64 #s(literal 4 binary64) (pow.f64 x #s(literal 6 binary64)))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -9 binary64))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 x #s(literal 6 binary64)) (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) x) (*.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 x #s(literal 7 binary64)) (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) x) x (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) x)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) x) (*.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (pow.f64 x #s(literal 5 binary64)))) (neg.f64 x))","(/.f64 (neg.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) x) x (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) x))) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (neg.f64 (/.f64 #s(literal 4 binary64) (pow.f64 x #s(literal 6 binary64))))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -9 binary64)))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal 8 binary64))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) x) (*.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)))))) (neg.f64 (neg.f64 (pow.f64 x #s(literal 6 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) x) x (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) x))))) (neg.f64 (neg.f64 (pow.f64 x #s(literal 7 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal 2 binary64) x)))) (neg.f64 (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) (neg.f64 x)) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 #s(literal 2 binary64) x) x)))) (neg.f64 (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (neg.f64 x))))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) x) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 #s(literal -2 binary64) x) x)))) (neg.f64 (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) x)))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) (*.f64 x x)) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) x)))) (neg.f64 (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (*.f64 x x))))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64))) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64))) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) #s(literal -2 binary64)))) (neg.f64 (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 (pow.f64 x #s(literal 5 binary64)) (/.f64 #s(literal 2 binary64) x)))) (neg.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (neg.f64 x)) (*.f64 (pow.f64 x #s(literal 5 binary64)) (/.f64 (/.f64 #s(literal 2 binary64) x) x)))) (neg.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64))) (pow.f64 x #s(literal 5 binary64)))) (neg.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal 3 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64)))) (neg.f64 (pow.f64 x #s(literal 8 binary64))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (/.f64 #s(literal 2 binary64) x)))) (neg.f64 (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (/.f64 (/.f64 #s(literal 2 binary64) x) x)))) (neg.f64 (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (neg.f64 x))))","(/.f64 (neg.f64 (-.f64 x (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (/.f64 (/.f64 #s(literal -2 binary64) x) x)))) (neg.f64 (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) x)))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (/.f64 #s(literal -2 binary64) x)))) (neg.f64 (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 x x))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64))) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal -2 binary64)))) (neg.f64 (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (/.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) x) (*.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (pow.f64 x #s(literal 5 binary64))) x)","(/.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) x) x (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) x))) (pow.f64 x #s(literal 5 binary64))) (*.f64 x x))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (neg.f64 (/.f64 #s(literal 4 binary64) (pow.f64 x #s(literal 6 binary64)))))) (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (neg.f64 (/.f64 #s(literal 4 binary64) (pow.f64 x #s(literal 6 binary64)))))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -9 binary64))))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (-.f64 (/.f64 #s(literal 4 binary64) (pow.f64 x #s(literal 6 binary64))) (*.f64 (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -9 binary64))))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal 8 binary64)))))))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) x) (*.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))))) (neg.f64 (pow.f64 x #s(literal 6 binary64))))","(/.f64 (neg.f64 (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) x) x (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) x)))) (neg.f64 (pow.f64 x #s(literal 7 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal 2 binary64) x))) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) (neg.f64 x)) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 #s(literal 2 binary64) x) x))) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) x) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 #s(literal -2 binary64) x) x))) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) x))","(/.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) (*.f64 x x)) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) x))) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64))) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64))) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) #s(literal -2 binary64))) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 (pow.f64 x #s(literal 5 binary64)) (/.f64 #s(literal 2 binary64) x))) (*.f64 (pow.f64 x #s(literal 5 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (neg.f64 x)) (*.f64 (pow.f64 x #s(literal 5 binary64)) (/.f64 (/.f64 #s(literal 2 binary64) x) x))) (*.f64 (pow.f64 x #s(literal 5 binary64)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64))) (pow.f64 x #s(literal 5 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal 3 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64))) (pow.f64 x #s(literal 8 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (/.f64 #s(literal 2 binary64) x))) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (/.f64 (/.f64 #s(literal 2 binary64) x) x))) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (neg.f64 x)))","(/.f64 (-.f64 x (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (/.f64 (/.f64 #s(literal -2 binary64) x) x))) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) x))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (/.f64 #s(literal -2 binary64) x))) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64))) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal -2 binary64))) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (neg.f64 (/.f64 #s(literal 4 binary64) (pow.f64 x #s(literal 6 binary64))))) (-.f64 (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (neg.f64 (/.f64 #s(literal 4 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -9 binary64)))) (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (-.f64 (/.f64 #s(literal 4 binary64) (pow.f64 x #s(literal 6 binary64))) (*.f64 (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -9 binary64)))) (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal 8 binary64))))))","(/.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) x) (*.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (pow.f64 x #s(literal 6 binary64)))","(/.f64 (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) x) x (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) x))) (pow.f64 x #s(literal 7 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))) (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (neg.f64 (/.f64 #s(literal 4 binary64) (pow.f64 x #s(literal 6 binary64))))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -9 binary64)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 x #s(literal 6 binary64)) (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) x) (*.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 x #s(literal 7 binary64)) (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) x) x (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))) (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (neg.f64 (/.f64 #s(literal 4 binary64) (pow.f64 x #s(literal 6 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -9 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 6 binary64)) (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) x) (*.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 7 binary64)) (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) x) x (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) x)))))","(fma.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(fma.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(fma.f64 (pow.f64 x #s(literal -5/2 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 5/2 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(fma.f64 (neg.f64 (pow.f64 x #s(literal -3 binary64))) #s(literal -2 binary64) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 2 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) x) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 (pow.f64 x #s(literal -5 binary64)) (pow.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(fma.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal 2 binary64) x) x) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) (pow.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(fma.f64 (/.f64 (/.f64 #s(literal -2 binary64) x) x) (neg.f64 (pow.f64 x #s(literal -1 binary64))) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal -5 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(fma.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (pow.f64 x #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 (/.f64 #s(literal -2 binary64) x) (neg.f64 (pow.f64 x #s(literal -2 binary64))) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 x #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 #s(literal -2 binary64) (pow.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 #s(literal -2 binary64) (neg.f64 (pow.f64 x #s(literal -3 binary64))) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -3 binary64)) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(-.f64 (/.f64 (*.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64))) (fma.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)))) (/.f64 (/.f64 #s(literal 4 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)))))","(-.f64 (/.f64 (*.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64))) (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal 8 binary64)))))) (/.f64 (*.f64 (pow.f64 x #s(literal -9 binary64)) #s(literal -8 binary64)) (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal 8 binary64)))))))","(-.f64 (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) x) (pow.f64 x #s(literal 6 binary64))) (/.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal 6 binary64))))","(-.f64 (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 x #s(literal 7 binary64))) (/.f64 (*.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 5 binary64))) (pow.f64 x #s(literal 7 binary64))))","(-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 7 binary64))) (fma.f64 #s(literal -2 binary64) (pow.f64 x #s(literal -5 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))))","(-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 7 binary64))) (-.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64))))","(-.f64 (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)))","(+.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(+.f64 (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -5/2 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 5/2 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -5 binary64)) (pow.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) (pow.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal -5 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(pow.f64 (/.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal 5/2 binary64)))) (neg.f64 (pow.f64 x #s(literal 5/2 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)) (pow.f64 x #s(literal -5 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64)) (pow.f64 x #s(literal -5 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 7 binary64))) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64))) #s(literal 2 binary64)))) (neg.f64 (fma.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64)) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 7 binary64))) #s(literal 3 binary64)) (*.f64 #s(literal -8 binary64) (pow.f64 x #s(literal -15 binary64))))) (neg.f64 (+.f64 (pow.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 7 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64))) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 7 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64))))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)))) (neg.f64 (neg.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64)) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))) (pow.f64 x #s(literal 5 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (pow.f64 x #s(literal 5 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64)))) (neg.f64 (pow.f64 x #s(literal 10 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (pow.f64 x #s(literal 5 binary64))))","(/.f64 (-.f64 (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (pow.f64 x #s(literal 5/2 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5/2 binary64)))) (pow.f64 x #s(literal 5/2 binary64)))","(/.f64 (-.f64 (/.f64 (/.f64 #s(literal -2 binary64) x) x) #s(literal 2 binary64)) (neg.f64 (pow.f64 x #s(literal 5 binary64))))","(/.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal 5/2 binary64))) (pow.f64 x #s(literal 5/2 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)) (pow.f64 x #s(literal -5 binary64))) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)))","(/.f64 (*.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64)) (pow.f64 x #s(literal -5 binary64))) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 7 binary64))) #s(literal 2 binary64)) (pow.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64))) #s(literal 2 binary64))) (fma.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64)) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 7 binary64))) #s(literal 3 binary64)) (*.f64 #s(literal -8 binary64) (pow.f64 x #s(literal -15 binary64)))) (+.f64 (pow.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 7 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64))) #s(literal 2 binary64)) (*.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 7 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64))) (neg.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))) (neg.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64))) (neg.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))))))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))) (pow.f64 x #s(literal 5 binary64))))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 x #s(literal 5 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (pow.f64 x #s(literal 5 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64))) (pow.f64 x #s(literal 10 binary64)))","(/.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64)) (*.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64))))","(/.f64 (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64)) (*.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) (neg.f64 (pow.f64 x #s(literal 5 binary64))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal 5 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))))","(neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (neg.f64 (pow.f64 x #s(literal 5 binary64)))))","(fma.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5/2 binary64))) (pow.f64 x #s(literal -9/2 binary64)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64))))","(fma.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (pow.f64 x #s(literal -5 binary64)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64))))","(fma.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -7 binary64)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64))))","(-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 7 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64))))","(exp.f64 (*.f64 (log.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(+.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 7 binary64))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64))))","(*.f64 (*.f64 #s(literal -2 binary64) (pow.f64 x #s(literal -3/2 binary64))) (pow.f64 x #s(literal -3/2 binary64)))","(*.f64 (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -2 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal -2 binary64) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -2 binary64) x) x))","(*.f64 (/.f64 (/.f64 #s(literal -2 binary64) x) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (pow.f64 (neg.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (/.f64 x (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)))","(*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))","(*.f64 #s(literal -2 binary64) (pow.f64 x #s(literal -3 binary64)))","(pow.f64 (/.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (neg.f64 (*.f64 (/.f64 (/.f64 #s(literal -2 binary64) x) x) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -2 binary64) x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) x))","(/.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 x #s(literal 3/2 binary64)))","(/.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) (neg.f64 (*.f64 x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) (neg.f64 (*.f64 (*.f64 x x) #s(literal -1/2 binary64))))","(/.f64 (*.f64 (/.f64 (/.f64 #s(literal -2 binary64) x) x) #s(literal 1 binary64)) x)","(/.f64 (*.f64 (/.f64 #s(literal -2 binary64) x) #s(literal 1 binary64)) (*.f64 x x))","(/.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 x #s(literal -1/2 binary64)))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (*.f64 x x) #s(literal -1/2 binary64)))","(/.f64 (/.f64 (/.f64 #s(literal -2 binary64) x) x) (neg.f64 (neg.f64 x)))","(/.f64 (/.f64 (/.f64 #s(literal -2 binary64) x) x) x)","(/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (neg.f64 x))","(/.f64 (/.f64 #s(literal -2 binary64) x) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64))))","(/.f64 (/.f64 #s(literal 2 binary64) x) (neg.f64 (neg.f64 (*.f64 (neg.f64 x) x))))","(/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 (neg.f64 x) x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -2 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64)))","(/.f64 #s(literal -2 binary64) (neg.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))","(/.f64 #s(literal 2 binary64) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(neg.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (fma.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64))))","(*.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (neg.f64 (/.f64 #s(literal 4 binary64) (pow.f64 x #s(literal 6 binary64))))) (pow.f64 (fma.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -9 binary64)))) (pow.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal 8 binary64))))) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) x) (*.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (pow.f64 x #s(literal -6 binary64)))","(*.f64 (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) x) x (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) x))) (pow.f64 x #s(literal -7 binary64)))","(pow.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))) (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (neg.f64 (/.f64 #s(literal 4 binary64) (pow.f64 x #s(literal 6 binary64)))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -9 binary64))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 x #s(literal 6 binary64)) (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) x) (*.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 x #s(literal 7 binary64)) (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) x) x (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) x)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) x) (*.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (pow.f64 x #s(literal 5 binary64)))) (neg.f64 x))","(/.f64 (neg.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) x) x (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) x))) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (neg.f64 x) x))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (neg.f64 (/.f64 #s(literal 4 binary64) (pow.f64 x #s(literal 6 binary64))))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -9 binary64)))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal 8 binary64))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) x) (*.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)))))) (neg.f64 (neg.f64 (pow.f64 x #s(literal 6 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) x) x (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) x))))) (neg.f64 (neg.f64 (pow.f64 x #s(literal 7 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal 2 binary64) x)))) (neg.f64 (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) (neg.f64 x)) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 #s(literal 2 binary64) x) x)))) (neg.f64 (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (neg.f64 x))))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) x) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 #s(literal -2 binary64) x) x)))) (neg.f64 (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) x)))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) (*.f64 x x)) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) x)))) (neg.f64 (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (*.f64 x x))))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64))) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64))) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) #s(literal -2 binary64)))) (neg.f64 (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 (pow.f64 x #s(literal 5 binary64)) (/.f64 #s(literal 2 binary64) x)))) (neg.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (neg.f64 x)) (*.f64 (pow.f64 x #s(literal 5 binary64)) (/.f64 (/.f64 #s(literal 2 binary64) x) x)))) (neg.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) (neg.f64 x))))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64))) (pow.f64 x #s(literal 5 binary64)))) (neg.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal 3 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64)))) (neg.f64 (pow.f64 x #s(literal 8 binary64))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (/.f64 #s(literal 2 binary64) x)))) (neg.f64 (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (neg.f64 x) x))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (/.f64 (/.f64 #s(literal 2 binary64) x) x)))) (neg.f64 (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (neg.f64 x))))","(/.f64 (neg.f64 (-.f64 x (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (/.f64 (/.f64 #s(literal -2 binary64) x) x)))) (neg.f64 (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) x)))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (/.f64 #s(literal -2 binary64) x)))) (neg.f64 (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 x x))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64))) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal 1 binary64)))) (neg.f64 (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal -2 binary64)))) (neg.f64 (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 (/.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) x) (*.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (pow.f64 x #s(literal 5 binary64))) x)","(/.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) x) x (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) x))) (pow.f64 x #s(literal 5 binary64))) (*.f64 x x))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (neg.f64 (/.f64 #s(literal 4 binary64) (pow.f64 x #s(literal 6 binary64)))))) (neg.f64 (-.f64 (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (neg.f64 (/.f64 #s(literal 4 binary64) (pow.f64 x #s(literal 6 binary64)))))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -9 binary64))))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (-.f64 (/.f64 #s(literal 4 binary64) (pow.f64 x #s(literal 6 binary64))) (*.f64 (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -9 binary64))))) (neg.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal 8 binary64)))))))","(/.f64 (neg.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) x) (*.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))))) (neg.f64 (pow.f64 x #s(literal 6 binary64))))","(/.f64 (neg.f64 (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) x) x (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) x)))) (neg.f64 (pow.f64 x #s(literal 7 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal 2 binary64) x))) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) (neg.f64 x)) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 #s(literal 2 binary64) x) x))) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) x) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 #s(literal -2 binary64) x) x))) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) x))","(/.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) (*.f64 x x)) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) x))) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64))) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) #s(literal 1 binary64))) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) (pow.f64 x #s(literal 3 binary64))) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) #s(literal -2 binary64))) (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (neg.f64 x) x)) (*.f64 (pow.f64 x #s(literal 5 binary64)) (/.f64 #s(literal 2 binary64) x))) (*.f64 (pow.f64 x #s(literal 5 binary64)) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (neg.f64 x)) (*.f64 (pow.f64 x #s(literal 5 binary64)) (/.f64 (/.f64 #s(literal 2 binary64) x) x))) (*.f64 (pow.f64 x #s(literal 5 binary64)) (neg.f64 x)))","(/.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64))) (pow.f64 x #s(literal 5 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal 3 binary64))) (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64))) (pow.f64 x #s(literal 8 binary64)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (*.f64 (neg.f64 x) x)) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (/.f64 #s(literal 2 binary64) x))) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (neg.f64 x) x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (neg.f64 x)) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (/.f64 (/.f64 #s(literal 2 binary64) x) x))) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (neg.f64 x)))","(/.f64 (-.f64 x (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (/.f64 (/.f64 #s(literal -2 binary64) x) x))) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) x))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (/.f64 #s(literal -2 binary64) x))) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 x x)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64))) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 x #s(literal 3 binary64)) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal -2 binary64))) (*.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (pow.f64 x #s(literal 3 binary64))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (neg.f64 (/.f64 #s(literal 4 binary64) (pow.f64 x #s(literal 6 binary64))))) (-.f64 (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (neg.f64 (/.f64 #s(literal 4 binary64) (pow.f64 x #s(literal 6 binary64))))) (fma.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -9 binary64)))) (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (-.f64 (/.f64 #s(literal 4 binary64) (pow.f64 x #s(literal 6 binary64))) (*.f64 (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -9 binary64)))) (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal 8 binary64))))))","(/.f64 (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) x) (*.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)))) (pow.f64 x #s(literal 6 binary64)))","(/.f64 (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) x) x (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) x))) (pow.f64 x #s(literal 7 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))) (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (neg.f64 (/.f64 #s(literal 4 binary64) (pow.f64 x #s(literal 6 binary64))))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -9 binary64)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 x #s(literal 6 binary64)) (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) x) (*.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 x #s(literal 7 binary64)) (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) x) x (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))) (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (neg.f64 (/.f64 #s(literal 4 binary64) (pow.f64 x #s(literal 6 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal 8 binary64))))) (fma.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64)) (*.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -9 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 6 binary64)) (-.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) x) (*.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 7 binary64)) (fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) x) x (*.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) x)))))","(fma.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) #s(literal -4 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal -2 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(fma.f64 (pow.f64 (/.f64 (pow.f64 x #s(literal 5 binary64)) (fma.f64 #s(literal 8 binary64) (pow.f64 x #s(literal -6 binary64)) #s(literal 8 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -4 binary64)) #s(literal 4 binary64) (+.f64 (/.f64 #s(literal -4 binary64) (*.f64 x x)) #s(literal 4 binary64))) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(fma.f64 (pow.f64 x #s(literal -5/2 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 5/2 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(fma.f64 (neg.f64 (pow.f64 x #s(literal -3 binary64))) #s(literal -2 binary64) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 (pow.f64 x #s(literal -3/2 binary64)) (pow.f64 (/.f64 (pow.f64 x #s(literal 3/2 binary64)) #s(literal 2 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal 2 binary64) x) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 (pow.f64 x #s(literal -5 binary64)) (pow.f64 (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(fma.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(fma.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal 2 binary64) x) x) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) (pow.f64 (neg.f64 (pow.f64 x #s(literal 5 binary64))) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(fma.f64 (/.f64 (/.f64 #s(literal -2 binary64) x) x) (neg.f64 (pow.f64 x #s(literal -1 binary64))) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (pow.f64 x #s(literal -5 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(fma.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (pow.f64 x #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 (/.f64 #s(literal -2 binary64) x) (neg.f64 (pow.f64 x #s(literal -2 binary64))) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 #s(literal -1 binary64) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 x #s(literal -2 binary64)) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(fma.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 #s(literal -2 binary64) (pow.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64)) #s(literal -1 binary64)) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 #s(literal -2 binary64) (neg.f64 (pow.f64 x #s(literal -3 binary64))) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(fma.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -3 binary64)) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(-.f64 (/.f64 (*.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64))) (fma.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)))) (/.f64 (/.f64 #s(literal 4 binary64) (pow.f64 x #s(literal 6 binary64))) (fma.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)))))","(-.f64 (/.f64 (*.f64 (pow.f64 x #s(literal -15 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal 3 binary64))) (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal 8 binary64)))))) (/.f64 (*.f64 (pow.f64 x #s(literal -9 binary64)) #s(literal -8 binary64)) (fma.f64 (pow.f64 x #s(literal -10 binary64)) (pow.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64) #s(literal -2 binary64)) #s(literal 2 binary64)) (fma.f64 (pow.f64 x #s(literal -6 binary64)) #s(literal 4 binary64) (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal 8 binary64)))))))","(-.f64 (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) x) (pow.f64 x #s(literal 6 binary64))) (/.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 5 binary64)) #s(literal -2 binary64)) (pow.f64 x #s(literal -2 binary64))) (pow.f64 x #s(literal 6 binary64))))","(-.f64 (/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64)) (*.f64 x x)) (pow.f64 x #s(literal 7 binary64))) (/.f64 (*.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal 5 binary64))) (pow.f64 x #s(literal 7 binary64))))","(-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 7 binary64))) (fma.f64 #s(literal -2 binary64) (pow.f64 x #s(literal -5 binary64)) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))))","(-.f64 (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 7 binary64))) (-.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 5 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64))))","(-.f64 (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)))","(+.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)) (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))))","(+.f64 (*.f64 (pow.f64 x #s(literal -5 binary64)) (fma.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64) #s(literal 2 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(*.f64 (*.f64 #s(literal -2 binary64) (pow.f64 x #s(literal -3/2 binary64))) (pow.f64 x #s(literal -3/2 binary64)))","(*.f64 (pow.f64 x #s(literal -3/2 binary64)) (*.f64 (pow.f64 x #s(literal -3/2 binary64)) #s(literal -2 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) (/.f64 #s(literal -2 binary64) x))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 (/.f64 #s(literal -2 binary64) x) x))","(*.f64 (/.f64 (/.f64 #s(literal -2 binary64) x) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (pow.f64 (neg.f64 x) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 (/.f64 x (pow.f64 x #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal -2 binary64)))","(*.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)))","(*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))","(*.f64 #s(literal -2 binary64) (pow.f64 x #s(literal -3 binary64)))","(pow.f64 (/.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3/2 binary64)))) (neg.f64 (pow.f64 x #s(literal 3/2 binary64))))","(/.f64 (neg.f64 (*.f64 (/.f64 (/.f64 #s(literal -2 binary64) x) x) #s(literal 1 binary64))) (neg.f64 x))","(/.f64 (neg.f64 (*.f64 (/.f64 #s(literal -2 binary64) x) #s(literal 1 binary64))) (*.f64 (neg.f64 x) x))","(/.f64 (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3/2 binary64))) (pow.f64 x #s(literal 3/2 binary64)))","(/.f64 (neg.f64 (pow.f64 x #s(literal -2 binary64))) (neg.f64 (*.f64 x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (pow.f64 x #s(literal -1 binary64))) (neg.f64 (*.f64 (*.f64 x x) #s(literal -1/2 binary64))))","(/.f64 (*.f64 (/.f64 (/.f64 #s(literal -2 binary64) x) x) #s(literal 1 binary64)) x)","(/.f64 (*.f64 (/.f64 #s(literal -2 binary64) x) #s(literal 1 binary64)) (*.f64 x x))","(/.f64 (pow.f64 x #s(literal -2 binary64)) (*.f64 x #s(literal -1/2 binary64)))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (*.f64 (*.f64 x x) #s(literal -1/2 binary64)))","(/.f64 (/.f64 (/.f64 #s(literal -2 binary64) x) x) (neg.f64 (neg.f64 x)))","(/.f64 (/.f64 (/.f64 #s(literal -2 binary64) x) x) x)","(/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (neg.f64 (neg.f64 (neg.f64 x))))","(/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (neg.f64 x))","(/.f64 (/.f64 #s(literal -2 binary64) x) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64))))","(/.f64 (/.f64 #s(literal 2 binary64) x) (neg.f64 (neg.f64 (*.f64 (neg.f64 x) x))))","(/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 (neg.f64 x) x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal -2 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64)))","(/.f64 #s(literal -2 binary64) (neg.f64 (pow.f64 (neg.f64 x) #s(literal 3 binary64))))","(/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))","(/.f64 #s(literal 2 binary64) (pow.f64 (neg.f64 x) #s(literal 3 binary64)))","(neg.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal 2 binary64))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal 2 binary64) x))","(*.f64 #s(literal -1 binary64) (/.f64 (/.f64 #s(literal -2 binary64) x) x))","(*.f64 (/.f64 #s(literal 2 binary64) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 2 binary64) x) x))","(*.f64 #s(literal -2 binary64) (neg.f64 (pow.f64 x #s(literal -2 binary64))))","(*.f64 #s(literal -2 binary64) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal -1 binary64)))","(*.f64 #s(literal 2 binary64) (pow.f64 x #s(literal -2 binary64)))","(pow.f64 (/.f64 x (/.f64 #s(literal 2 binary64) x)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (neg.f64 (*.f64 (*.f64 x x) #s(literal -1/2 binary64))) #s(literal -1 binary64))","(pow.f64 (*.f64 (*.f64 x #s(literal 1/2 binary64)) x) #s(literal -1 binary64))","(pow.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal -1 binary64))","(/.f64 (/.f64 #s(literal -2 binary64) x) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (/.f64 #s(literal 2 binary64) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (*.f64 (*.f64 x x) #s(literal -1/2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","(/.f64 #s(literal -1 binary64) (*.f64 (*.f64 x x) #s(literal -1/2 binary64)))","(/.f64 (/.f64 #s(literal 2 binary64) x) (neg.f64 (neg.f64 x)))","(/.f64 (/.f64 #s(literal 2 binary64) x) x)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 x (/.f64 #s(literal 2 binary64) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 (*.f64 x x) #s(literal -1/2 binary64))))","(/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(/.f64 #s(literal -2 binary64) (neg.f64 (neg.f64 (*.f64 (neg.f64 x) x))))","(/.f64 #s(literal -2 binary64) (*.f64 (neg.f64 x) x))","(/.f64 #s(literal 2 binary64) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 #s(literal 2 binary64) (*.f64 x x))","(neg.f64 (/.f64 (/.f64 #s(literal -2 binary64) x) x))","(-.f64 #s(literal 0 binary64) (/.f64 (/.f64 #s(literal -2 binary64) x) x))","(exp.f64 (*.f64 (log.f64 (*.f64 (*.f64 x x) #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 x #s(literal -2 binary64)) #s(literal -2 binary64))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (/.f64 #s(literal -2 binary64) x))","(*.f64 (/.f64 #s(literal -2 binary64) x) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal -2 binary64) x) x))","(*.f64 #s(literal -2 binary64) (pow.f64 x #s(literal -2 binary64)))","(*.f64 #s(literal 2 binary64) (pow.f64 (*.f64 (neg.f64 x) x) #s(literal -1 binary64)))","(pow.f64 (*.f64 (*.f64 x #s(literal -1/2 binary64)) x) #s(literal -1 binary64))","(pow.f64 (/.f64 x (/.f64 #s(literal -2 binary64) x)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 (*.f64 x x) #s(literal -1/2 binary64)) #s(literal -1 binary64))","(/.f64 (/.f64 #s(literal -2 binary64) x) (neg.f64 (neg.f64 x)))","(/.f64 (/.f64 #s(literal -2 binary64) x) x)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (/.f64 #s(literal -2 binary64) x))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 (*.f64 x x) #s(literal -1/2 binary64))))","(/.f64 (/.f64 #s(literal 2 binary64) x) (neg.f64 x))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 (*.f64 x x) #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 x (/.f64 #s(literal -2 binary64) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 x x) #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 (*.f64 x x) #s(literal -1/2 binary64)))","(/.f64 #s(literal -2 binary64) (neg.f64 (*.f64 (neg.f64 x) x)))","(/.f64 #s(literal -2 binary64) (*.f64 x x))","(/.f64 #s(literal 2 binary64) (neg.f64 (neg.f64 (*.f64 (neg.f64 x) x))))","(/.f64 #s(literal 2 binary64) (*.f64 (neg.f64 x) x))","(neg.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x))","(exp.f64 (*.f64 (log.f64 (*.f64 (*.f64 x x) #s(literal -1/2 binary64))) #s(literal -1 binary64)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":321.321044921875,"type":"rewrite"},{"compiler":[[23233,2108]],"memory":[[3460560,48654656]],"time":76.119873046875,"type":"eval"},{"alts":[["(/.f64 (/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64))) x)","fresh",0.09765625,"binary64"],["(/.f64 (/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) x) (fma.f64 x x #s(literal -1 binary64)))","fresh",0.0859375,"binary64"],["(/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) (*.f64 x (fma.f64 x x #s(literal -1 binary64))))","done",0.5341587432313852,"binary64"],["(/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) (*.f64 x #s(approx (+ (* x x) -1) (*.f64 x x))))","fresh",0.7901235988373922,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) x))","fresh",0.3575273602521194,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x)))","fresh",0.345808605606007,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))","done",60.83974921498693,"binary64"],["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","fresh",0.271589855606007,"binary64"]],"compiler":[[1029,172],[26,17],[26,17],[26,17],[31,19],[23,15],[23,15],[19,13],[21,15]],"count":[[607,8]],"kept":[{"done":[1,1],"fresh":[1,0],"new":[600,6],"picked":[5,1]}],"memory":[[2611200,30021744]],"min-error":[[0.0,"binary64"]],"time":27.2890625,"type":"prune"},{"accuracy":[0.01171875],"baseline":[0.01171875],"branch":[["x",0.01171875,1,"binary64"],["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))",0.01171875,1,"binary64"]],"compiler":[[1,1],[15,10]],"count":[[40,1]],"inputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))","(/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) (*.f64 x #s(approx (+ (* x x) -1) (*.f64 x x))))","(/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) (*.f64 x (fma.f64 x x #s(literal -1 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x)))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(/.f64 (/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) x) (fma.f64 x x #s(literal -1 binary64)))","(/.f64 (/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64))) x)","(+.f64 (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) x))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) #s(approx (/ (- (/ -1 x) 1) x) (/.f64 #s(literal -1 binary64) (*.f64 x x)))) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 (/.f64 (/.f64 #s(approx (- x (* 2 (+ x 1))) (-.f64 #s(literal -2 binary64) x)) (+.f64 x #s(literal 1 binary64))) x) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 (/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 x #s(literal 1 binary64)) x) (*.f64 (+.f64 x #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (*.f64 x (fma.f64 x x #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(approx (- x (* 2 (+ x 1))) #s(literal -2 binary64)) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))))","(+.f64 (-.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(+.f64 (/.f64 (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))) x) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(/.f64 (+.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) x (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) x) (*.f64 x (-.f64 x #s(literal 1 binary64))))","(/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))","(/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)))))","(/.f64 (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (/.f64 (*.f64 (fma.f64 x x x) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64)))))","(/.f64 (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) x) (-.f64 x #s(literal 1 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) x)))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (neg.f64 x))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 #s(literal -2 binary64) (pow.f64 x #s(literal 3 binary64)))))"]],"memory":[[-4854896,11725936]],"oracle":[63.120450420000374],"outputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))))"]],"repr":["binary64"],"time":22.22509765625,"times":[[8.89306640625,"x"],[9.719970703125,"(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))"]],"type":"regimes"},{"accuracy":[0.0234375],"baseline":[0.0234375],"branch":[["x",0.0234375,1,"binary64"],["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))",0.0234375,1,"binary64"]],"compiler":[[1,1],[15,10]],"count":[[38,1]],"inputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))","(/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) (*.f64 x #s(approx (+ (* x x) -1) (*.f64 x x))))","(/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) (*.f64 x (fma.f64 x x #s(literal -1 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x)))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(/.f64 (/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) x) (fma.f64 x x #s(literal -1 binary64)))","(/.f64 (/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64))) x)","(+.f64 (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) x))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) #s(approx (/ (- (/ -1 x) 1) x) (/.f64 #s(literal -1 binary64) (*.f64 x x)))) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 (/.f64 (/.f64 #s(approx (- x (* 2 (+ x 1))) (-.f64 #s(literal -2 binary64) x)) (+.f64 x #s(literal 1 binary64))) x) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 (/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 x #s(literal 1 binary64)) x) (*.f64 (+.f64 x #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (*.f64 x (fma.f64 x x #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(approx (- x (* 2 (+ x 1))) #s(literal -2 binary64)) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))))","(+.f64 (-.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(+.f64 (/.f64 (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))) x) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(/.f64 (+.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) x (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) x) (*.f64 x (-.f64 x #s(literal 1 binary64))))","(/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))","(/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)))))","(/.f64 (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (/.f64 (*.f64 (fma.f64 x x x) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64)))))","(/.f64 (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) x) (-.f64 x #s(literal 1 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) x)))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (neg.f64 x))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))))"]],"memory":[[3399920,11029408]],"oracle":[63.120450420000374],"outputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))))"]],"repr":["binary64"],"time":19.558837890625,"times":[[9.826904296875,"x"],[7.346923828125,"(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))"]],"type":"regimes"},{"accuracy":[0.0859375],"baseline":[0.0859375],"branch":[["x",0.0859375,1,"binary64"],["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))",0.0859375,1,"binary64"]],"compiler":[[1,1],[15,10]],"count":[[37,1]],"inputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))","(/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) (*.f64 x #s(approx (+ (* x x) -1) (*.f64 x x))))","(/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) (*.f64 x (fma.f64 x x #s(literal -1 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x)))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(/.f64 (/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) x) (fma.f64 x x #s(literal -1 binary64)))","(/.f64 (/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) (fma.f64 x x #s(literal -1 binary64))) x)","(+.f64 (-.f64 #s(approx (/ 1 (+ x 1)) #s(literal 1 binary64)) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) x))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) #s(approx (/ (- (/ -1 x) 1) x) (/.f64 #s(literal -1 binary64) (*.f64 x x)))) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 (-.f64 (/.f64 #s(literal -1 binary64) x) #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (fma.f64 x x x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 (/.f64 (/.f64 #s(approx (- x (* 2 (+ x 1))) (-.f64 #s(literal -2 binary64) x)) (+.f64 x #s(literal 1 binary64))) x) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(+.f64 (/.f64 (fma.f64 #s(literal -2 binary64) (+.f64 x #s(literal 1 binary64)) x) (*.f64 (+.f64 x #s(literal 1 binary64)) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (*.f64 x (fma.f64 x x #s(literal -1 binary64))))","(/.f64 (fma.f64 #s(approx (- x (* 2 (+ x 1))) #s(literal -2 binary64)) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))))","(+.f64 (-.f64 (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) x))","(+.f64 (/.f64 (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))) x) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(/.f64 (+.f64 (fma.f64 x x x) (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) x (*.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (/.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (+.f64 x #s(literal 1 binary64))) (-.f64 x #s(literal 1 binary64)) x) (*.f64 x (-.f64 x #s(literal 1 binary64))))","(/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64))) (fma.f64 x x x))","(/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (fma.f64 #s(literal 1 binary64) (*.f64 (+.f64 x #s(literal 1 binary64)) x) (*.f64 (-.f64 x #s(literal 1 binary64)) (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))))) (*.f64 (-.f64 x #s(literal 1 binary64)) (*.f64 (+.f64 x #s(literal 1 binary64)) x)))","(/.f64 (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))))","(*.f64 (/.f64 (/.f64 (fma.f64 (fma.f64 (+.f64 x #s(literal 1 binary64)) #s(literal -2 binary64) x) (-.f64 x #s(literal 1 binary64)) (fma.f64 x x x)) (fma.f64 x x x)) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (-.f64 x #s(literal 1 binary64))) (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64)))))","(/.f64 (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (/.f64 (*.f64 (fma.f64 x x x) (fma.f64 x x #s(literal -1 binary64))) (+.f64 x #s(literal 1 binary64))))","(/.f64 (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) (/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal -1 binary64)))))","(/.f64 (fma.f64 (-.f64 x (*.f64 #s(literal 2 binary64) (+.f64 x #s(literal 1 binary64)))) (-.f64 x #s(literal 1 binary64)) (*.f64 (*.f64 (+.f64 x #s(literal 1 binary64)) x) #s(literal 1 binary64))) (*.f64 (*.f64 (/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64)))) x) (-.f64 x #s(literal 1 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal 2 binary64)))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 3 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 #s(literal -2 binary64) x) (*.f64 x x))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 #s(literal -2 binary64) (*.f64 x x)) x)))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (/.f64 (/.f64 (/.f64 #s(literal 2 binary64) x) x) (neg.f64 x))))"]],"memory":[[2951808,10846496]],"oracle":[63.120450420000374],"outputs":[["(/.f64 (/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) x) (fma.f64 x x #s(literal -1 binary64)))"]],"repr":["binary64"],"time":17.18701171875,"times":[[7.794189453125,"x"],[7.26904296875,"(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))"]],"type":"regimes"},{"accuracy":[0.345808605606007],"baseline":[0.345808605606007],"branch":[["x",0.345808605606007,1,"binary64"],["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))",0.345808605606007,1,"binary64"]],"compiler":[[1,1],[15,10]],"count":[[5,1]],"inputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))","(/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) (*.f64 x #s(approx (+ (* x x) -1) (*.f64 x x))))","(/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) (*.f64 x (fma.f64 x x #s(literal -1 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x)))","(+.f64 #s(approx (- (/ 1 (+ x 1)) (/ 2 x)) (/.f64 #s(literal -1 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))"]],"memory":[[-4747504,3536640]],"oracle":[60.83974921498693],"outputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x)))"]],"repr":["binary64"],"time":4.169189453125,"times":[[1.963134765625,"x"],[1.612060546875,"(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))"]],"type":"regimes"},{"accuracy":[0.5341587432313852],"baseline":[0.5341587432313852],"branch":[["x",0.5341587432313852,1,"binary64"],["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))",0.5341587432313852,1,"binary64"]],"compiler":[[1,1],[15,10]],"count":[[3,1]],"inputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))","(/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) (*.f64 x #s(approx (+ (* x x) -1) (*.f64 x x))))","(/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) (*.f64 x (fma.f64 x x #s(literal -1 binary64))))"]],"memory":[[3252128,3252128]],"oracle":[60.83974921498693],"outputs":[["(/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) (*.f64 x (fma.f64 x x #s(literal -1 binary64))))"]],"repr":["binary64"],"time":3.4580078125,"times":[[1.465087890625,"x"],[1.512939453125,"(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))"]],"type":"regimes"},{"accuracy":[0.7901235988373921],"baseline":[0.7901235988373922],"branch":[["x",0.7901235988373921,1,"binary64"],["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))",0.7901235988373922,1,"binary64"]],"compiler":[[1,1],[15,10]],"count":[[2,1]],"inputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))","(/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) (*.f64 x #s(approx (+ (* x x) -1) (*.f64 x x))))"]],"memory":[[2871488,2871488]],"oracle":[60.83974921498693],"outputs":[["(/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) (*.f64 x #s(approx (+ (* x x) -1) (*.f64 x x))))"]],"repr":["binary64"],"time":2.69482421875,"times":[[1.24609375,"x"],[1.073974609375,"(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))"]],"type":"regimes"},{"accuracy":[60.83974921498694],"baseline":[60.83974921498693],"branch":[["(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))",60.83974921498694,1,"binary64"],["x",60.83974921498694,1,"binary64"]],"compiler":[[15,10],[1,1]],"count":[[1,1]],"inputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))"]],"link":["."],"memory":[[-11851824,2730000]],"name":["3frac (problem 3.3.3)"],"oracle":[60.83974921498693],"outputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))"]],"repr":["binary64"],"time":4.0849609375,"times":[[0.941162109375,"(+.f64 (-.f64 (/.f64 #s(literal 1 binary64) (+.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 2 binary64) x)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))"],[2.6201171875,"x"]],"type":"regimes"},{"egraph":[[6,5115,185,0.029244598],[5,2639,185,0.019839307],[4,1306,197,0.008245354],[3,458,197,0.003861046],[2,158,197,0.001698979],[1,87,197,0.001389952],[0,52,197,0.000782749]],"inputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))))","(/.f64 (/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) x) (fma.f64 x x #s(literal -1 binary64)))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x)))","(/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) (*.f64 x (fma.f64 x x #s(literal -1 binary64))))","(/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) (*.f64 x #s(approx (+ (* x x) -1) (*.f64 x x))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))"]],"memory":[[3606304,11516272]],"method":["egg-herbie"],"outputs":[["#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 2 binary64) (*.f64 x x)) #s(literal -2 binary64)) (pow.f64 x #s(literal 5 binary64))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (-.f64 #s(approx (/ (- (/ 2 (* x x)) -2) (pow x 5)) (/.f64 #s(literal 2 binary64) (pow.f64 x #s(literal 5 binary64)))) (*.f64 (pow.f64 x #s(literal -3 binary64)) #s(literal -2 binary64))))","(/.f64 (/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) x) (fma.f64 x x #s(literal -1 binary64)))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 (/.f64 #s(literal 2 binary64) x) (*.f64 x x)))","(/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) (*.f64 x (fma.f64 x x #s(literal -1 binary64))))","(/.f64 #s(approx (+ (* (+ (* (+ x 1) -2) x) (- x 1)) (+ (* x x) x)) #s(literal 2 binary64)) (*.f64 x #s(approx (+ (* x x) -1) (*.f64 x x))))","#s(approx (+ (- (/ 1 (+ x 1)) (/ 2 x)) (/ 1 (- x 1))) (/.f64 #s(literal -2 binary64) x))"]],"stop":[["node limit",1]],"time":87.880126953125,"type":"simplify"},{"compiler":[[197,56]],"memory":[[1453296,1453296]],"stop":[["fuel",1]],"time":2.055908203125,"type":"soundness"},{"compiler":[[197,56],[197,56],[9,7],[9,7],[15,10],[15,10],[33,23],[33,23]],"memory":[[-3244272,29067968]],"remove-preprocessing":[["(negabs x)"],[],[],[],[],[],[],[]],"time":51.465087890625,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.01806640625,"type":"end"}]