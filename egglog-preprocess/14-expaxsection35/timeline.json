[{"memory":[[12464,12464]],"time":0.0458984375,"type":"start"},{"compiler":[[12,7]],"memory":[[-2422400,6196000]],"method":["search"],"sampling":[[12,{"invalid":0.21951203816570342,"precondition":0.0009763240814208984,"unknown":0.04585362575016916,"valid":0.7336580120027065}],[11,{"invalid":0.20487790228798985,"precondition":0.0009763240814208984,"unknown":0.06048776162788272,"valid":0.7336580120027065}],[10,{"invalid":0.19121937546879053,"precondition":0.0009763240814208984,"unknown":0.08975603338330984,"valid":0.7180482670664787}],[9,{"invalid":0.16390232183039188,"precondition":0.0009763240814208984,"unknown":0.11707308702170849,"valid":0.7180482670664787}],[8,{"invalid":0.1404877044260502,"precondition":0.0009763240814208984,"unknown":0.17170719429850578,"valid":0.6868287771940231}],[7,{"invalid":0.09365846961736679,"precondition":0.0009763240814208984,"unknown":0.21853642910718918,"valid":0.6868287771940231}],[6,{"invalid":0.062438979744911194,"precondition":0.0009763240814208984,"unknown":0.31219489872455597,"valid":0.6243897974491119}],[5,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.37463387846946716,"valid":0.6243897974491119}],[4,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.49951183795928955,"valid":0.49951183795928955}],[3,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.49951183795928955,"valid":0.49951183795928955}],[2,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.9990236759185791,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.9990236759185791,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.0009763240814208984,"unknown":0.9990236759185791,"valid":0.0}]],"time":47.054931640625,"type":"analyze"},{"bogosity":[{"invalid":0.2494723037676658,"precondition":0.0009763240814208984,"valid":0.7495513721509133}],"memory":[[13076464,180437904]],"mixsample":[[102.021728515625,"ival-mult",0],[32.69775390625,"ival->",0],[10.70166015625,"exact",0],[92.857421875,"ival-expm1",0],[4.721923828125,"ival-assert",0]],"outcomes":[[29.66259765625,0,"invalid",330],[439.229736328125,0,"valid",8256]],"time":758.157958984375,"type":"sample"},{"compiler":[[6,6],[18,8],[18,8]],"confusion":[[127,0,1,128]],"explanations":[["exp.f64","(exp.f64 (*.f64 a x))","sensitivity",1,0,[],[[1]]],["-.f64","(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","cancellation",127,0,[],[[]]]],"fperrors":[["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))",127,0,false,0,false],["(exp.f64 (*.f64 a x))",1,0,false,0,false],["a",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(*.f64 a x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,128],[0,128]],"maybe-confusion":[[127,0,0,1,0,128]],"memory":[[-3645216,31235296]],"mixsample":[[0.423095703125,"ival-true",0],[4.78955078125,"ival-exp",0],[4.265380859375,"ival-mult",0],[3.330322265625,"ival-expm1",0],[0.32666015625,"exact",0],[0.17724609375,"ival-assert",0]],"outcomes":[[27.4013671875,0,"valid",512]],"time":66.421142578125,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[6,6]],"egraph":[[0,20,4,0.000158534],[2,20,6,0.000110916],[1,17,6,0.000121203],[0,9,6,0.000198652],[0,6,6,9.2189e-5]],"inputs":[["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))"]],"memory":[[-753744,15247216]],"method":["egg-herbie"],"outputs":[["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","(expm1.f64 (*.f64 x a))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[["(sort a x)"]],"time":150.56103515625,"type":"preprocess"},{"compiler":[[0,2]],"memory":[[45904,45904]],"time":0.0888671875,"type":"eval"},{"alts":[["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","next",28.886876542253585,"binary64"]],"compiler":[[6,6]],"memory":[[307872,307872]],"time":0.650146484375,"type":"prune"},{"egraph":[[0,20,14,0.000142753],[2,20,16,0.000114068],[1,17,16,0.000117861],[0,9,16,0.000178903],[0,6,16,8.134e-5]],"inputs":[["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","(exp.f64 (*.f64 a x))","(*.f64 a x)","a","x","#s(literal 1 binary64)"]],"locations":[["(*.f64 a x)","cost-diff",0],["(exp.f64 (*.f64 a x))","cost-diff",0],["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","cost-diff",2]],"memory":[[524048,524048]],"method":["egg-herbie"],"outputs":[["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","(expm1.f64 (*.f64 x a))","(exp.f64 (*.f64 a x))","(pow.f64 (exp.f64 x) a)","(*.f64 a x)","(*.f64 x a)","a","x","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":5.705810546875,"type":"simplify"},{"compiler":[[18,8]],"locations":[["(*.f64 a x)","accuracy",0.0],["(exp.f64 (*.f64 a x))","accuracy",0.034119959454007184],["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","accuracy",28.882970292253585]],"memory":[[6686688,6686688]],"mixsample":[[0.140625,"ival-true",0],[2.068359375,"ival-exp",0],[1.94775390625,"ival-mult",0],[1.76171875,"ival-expm1",0],[0.126953125,"exact",0],[0.083984375,"ival-assert",0]],"outcomes":[[11.906982421875,0,"valid",256]],"time":16.97705078125,"type":"localize"},{"count":[[3,15]],"inputs":[["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","(exp.f64 (*.f64 a x))","(*.f64 a x)"]],"memory":[[-12058096,1670976]],"outputs":[["(* a x)","(* a (+ x (* 1/2 (* a (pow x 2)))))","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","1","(+ 1 (* a x))","(+ 1 (* a (+ x (* 1/2 (* a (pow x 2))))))","(+ 1 (* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))))","(- (exp (* a x)) 1)","(exp (* a x))","(* x (+ a (* 1/2 (* (pow a 2) x))))","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(+ 1 (* x (+ a (* 1/2 (* (pow a 2) x)))))","(+ 1 (* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2)))))))"]],"series":[[0.51806640625,"((- (exp (* a x)) 1) (exp (* a x)) (* a x))","x","-inf"],[0.431884765625,"((- (exp (* a x)) 1) (exp (* a x)) (* a x))","x","inf"],[0.821044921875,"((- (exp (* a x)) 1) (exp (* a x)) (* a x))","x","0"],[0.490966796875,"((- (exp (* a x)) 1) (exp (* a x)) (* a x))","a","-inf"],[0.613037109375,"((- (exp (* a x)) 1) (exp (* a x)) (* a x))","a","inf"],[1.690185546875,"((- (exp (* a x)) 1) (exp (* a x)) (* a x))","a","0"]],"time":7.2060546875,"type":"series"},{"count":[[15,15]],"egraph":[[0,7408,160,0.03849715],[26,7408,185,0.032906977],[25,6849,185,0.042343976],[24,6849,185,0.016320614],[23,6511,185,0.01988745],[22,6335,185,0.015118391],[21,6335,185,0.010416964],[20,6321,185,0.010198178],[19,6279,185,0.010013435],[18,6071,185,0.013620165],[17,4190,189,0.025873306],[16,4190,189,0.009879667],[15,4062,189,0.010247514],[14,4062,189,0.008631141],[13,4061,189,0.009389987],[12,3094,189,0.01106443],[11,2619,189,0.008475186],[10,1937,193,0.011901123],[9,1937,193,0.004937896],[8,1934,193,0.004898169],[7,1920,193,0.004710115],[6,1900,193,0.004982377],[5,1873,193,0.005294382],[4,1672,193,0.005234147],[3,1045,193,0.006475367],[2,526,193,0.003029367],[1,195,201,0.00153072],[0,63,201,0.00066627]],"inputs":[["(* a x)","(* a (+ x (* 1/2 (* a (pow x 2)))))","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","1","(+ 1 (* a x))","(+ 1 (* a (+ x (* 1/2 (* a (pow x 2))))))","(+ 1 (* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))))","(- (exp (* a x)) 1)","(exp (* a x))","(* x (+ a (* 1/2 (* (pow a 2) x))))","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(+ 1 (* x (+ a (* 1/2 (* (pow a 2) x)))))","(+ 1 (* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2)))))))"]],"memory":[[4205568,18723360]],"method":["egg-herbie"],"outputs":[["(* a x)","(*.f64 x a)","(* a (+ x (* 1/2 (* a (pow x 2)))))","(*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x)","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a))","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a))","1","#s(literal 1 binary64)","(+ 1 (* a x))","(fma.f64 x a #s(literal 1 binary64))","(+ 1 (* a (+ x (* 1/2 (* a (pow x 2))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))","(+ 1 (* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))))","(fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))","(- (exp (* a x)) 1)","(expm1.f64 (*.f64 x a))","(exp (* a x))","(pow.f64 (exp.f64 x) a)","(* x (+ a (* 1/2 (* (pow a 2) x))))","(*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x)","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a))","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a))","(+ 1 (* x (+ a (* 1/2 (* (pow a 2) x)))))","(fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))","(+ 1 (* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2)))))))","(fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))"]],"stop":[["iter limit",1],["saturated",1]],"time":409.80908203125,"type":"simplify"},{"count":[[3,111]],"egraph":[[0,1348,11,0.008113575],[2,152,13,0.003987978],[1,30,13,0.000716935],[0,9,13,0.000591897],[0,6,13,8.8975e-5]],"inputs":[["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","(exp.f64 (*.f64 a x))","(*.f64 a x)"]],"memory":[[-4487200,14065376]],"outputs":[["(*.f64 (/.f64 (expm1.f64 (*.f64 (*.f64 x a) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)))) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) a)))","(*.f64 (/.f64 (expm1.f64 (*.f64 (*.f64 x a) #s(literal 2 binary64))) (+.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64))) (fma.f64 (pow.f64 (exp.f64 x) a) (expm1.f64 (*.f64 x a)) #s(literal 1 binary64)))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a))) (-.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal 2 binary64)))) (-.f64 (expm1.f64 (*.f64 (*.f64 x a) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) a)))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a))) (+.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 6 binary64)))) (fma.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (-.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a))) (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 (*.f64 x a) #s(literal 2 binary64))) (expm1.f64 (*.f64 (*.f64 x a) #s(literal 2 binary64)))) (expm1.f64 (*.f64 x a)))","(*.f64 (+.f64 (pow.f64 (exp.f64 a) (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64)) (expm1.f64 (*.f64 a (*.f64 x #s(literal 1/2 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (expm1.f64 (*.f64 x a)))","(*.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)) (expm1.f64 (*.f64 (*.f64 x a) #s(literal 2 binary64))))","(*.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) (expm1.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a))))","(*.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 x a) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)))))","(*.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a)))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)))))","(*.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (/.f64 (expm1.f64 (*.f64 x a)) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 x a)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (expm1.f64 (*.f64 (*.f64 x a) #s(literal 2 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a))) (/.f64 #s(literal 1 binary64) (-.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a)))))","(*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 x a)))","(pow.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 x a))) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))) (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) #s(literal 1 binary64)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 x a)) #s(literal 3 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 x a)) #s(literal 3 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a)) #s(literal 3 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 6 binary64)) (+.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a))) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)))) (*.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)))) (*.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (fma.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (fma.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 x a) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 x a) #s(literal 2 binary64))) #s(literal 1 binary64)) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) #s(literal 1 binary64)) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 x a)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a))) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 x a)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 6 binary64)) (+.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a))) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a))) (-.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a)))","(/.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 x a)) #s(literal 3 binary64))) (*.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)))))","(/.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 x a)) #s(literal 3 binary64))) (*.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a))) (+.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64))))","(/.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 x a)) #s(literal 3 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) (+.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64))))","(/.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a)) #s(literal 3 binary64))) (*.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a))) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 6 binary64)) (+.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64)))))","(/.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a)) #s(literal 3 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 6 binary64)) (+.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 x a) #s(literal 2 binary64)))) (neg.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a)))) (neg.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))))","(/.f64 (expm1.f64 (*.f64 (*.f64 x a) #s(literal 2 binary64))) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 x a)))))","(/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (*.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a)))))","(/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a))) (-.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a))))","(/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)))","(/.f64 (expm1.f64 (*.f64 x a)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a))) (expm1.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 x a))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 x a))))","(neg.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 x a) #s(literal 2 binary64)))) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))))","(neg.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a)))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))))","(neg.f64 (/.f64 (expm1.f64 (*.f64 (*.f64 x a) #s(literal 2 binary64))) (neg.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)))))","(neg.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) (*.f64 x a))) (neg.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (-.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal 2 binary64)))) (-.f64 (expm1.f64 (*.f64 (*.f64 x a) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) a)) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 6 binary64)))) (fma.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (-.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a))) (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64))) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)))) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) a)) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (+.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64))) (fma.f64 (pow.f64 (exp.f64 x) a) (expm1.f64 (*.f64 x a)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (expm1.f64 (*.f64 (*.f64 x a) #s(literal 2 binary64)))) (expm1.f64 (*.f64 x a)) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 a) (*.f64 x #s(literal 1/2 binary64)))) (pow.f64 (exp.f64 a) (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 x) (/.f64 a #s(literal 2 binary64))) (pow.f64 (exp.f64 x) (/.f64 a #s(literal 2 binary64))) #s(literal -1 binary64))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) a) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3/2 binary64))) (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3/2 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 a) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (pow.f64 (exp.f64 a) (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 a) (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (exp.f64 a) (*.f64 x #s(literal 1/2 binary64))) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (/.f64 (pow.f64 (exp.f64 x) a) (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 x) a) (/.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) a) (/.f64 (pow.f64 (exp.f64 x) a) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64) #s(literal -1 binary64))","(expm1.f64 (*.f64 (log.f64 (exp.f64 x)) a))","(expm1.f64 (*.f64 x a))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (-.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a)))) (/.f64 #s(literal 1 binary64) (-.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) #s(literal 1 binary64)) (*.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a)))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 2 binary64) a)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a))","(+.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 a) (*.f64 x #s(literal 1/2 binary64)))) (pow.f64 (exp.f64 a) (*.f64 x #s(literal 1/2 binary64))))","(*.f64 (pow.f64 (exp.f64 x) (/.f64 a #s(literal 2 binary64))) (pow.f64 (exp.f64 x) (/.f64 a #s(literal 2 binary64))))","(*.f64 (pow.f64 (exp.f64 a) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (pow.f64 (exp.f64 a) (*.f64 x #s(literal 1/2 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (exp.f64 a) (*.f64 x #s(literal 1/2 binary64))) (pow.f64 (exp.f64 a) (*.f64 x #s(literal 1/2 binary64))))","(*.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) a))","(*.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64))","(pow.f64 (pow.f64 (exp.f64 a) (*.f64 x #s(literal 1/2 binary64))) #s(literal 2 binary64))","(pow.f64 (exp.f64 x) a)","(pow.f64 (pow.f64 (exp.f64 a) #s(literal 2 binary64)) (*.f64 x #s(literal 1/2 binary64)))","(pow.f64 (exp.f64 a) (*.f64 #s(literal 2 binary64) (*.f64 x #s(literal 1/2 binary64))))","(pow.f64 (exp.f64 a) (fma.f64 x #s(literal 1/2 binary64) (*.f64 x #s(literal 1/2 binary64))))","(pow.f64 (exp.f64 a) x)","(exp.f64 (*.f64 (log.f64 (exp.f64 x)) a))","(exp.f64 (*.f64 x a))","(*.f64 x a)","(*.f64 a (log.f64 (exp.f64 x)))","(*.f64 a x)","(fma.f64 x a #s(literal 0 binary64))","(fma.f64 a (log.f64 (exp.f64 x)) #s(literal 0 binary64))","(fma.f64 a x #s(literal 0 binary64))","(+.f64 (log.f64 (pow.f64 (exp.f64 a) (*.f64 x #s(literal 1/2 binary64)))) (log.f64 (pow.f64 (exp.f64 a) (*.f64 x #s(literal 1/2 binary64)))))","(+.f64 #s(literal 0 binary64) (*.f64 x a))","(+.f64 (*.f64 x a) #s(literal 0 binary64))","(log.f64 (pow.f64 (exp.f64 x) a))"]],"stop":[["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1]],"time":150.202880859375,"type":"rewrite"},{"compiler":[[2806,340]],"memory":[[4291184,12095456]],"time":14.886962890625,"type":"eval"},{"alts":[["(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 x a))))","fresh",0.5416603781410524,"binary64"],["(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))) #s(literal 1 binary64))","next",49.19468621724214,"binary64"],["(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","next",50.21324779694591,"binary64"],["(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","next",49.08004335184552,"binary64"],["(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","next",50.06914282029762,"binary64"],["(expm1.f64 (*.f64 x a))","next",0.01171875,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a)))","fresh",20.95639425523387,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))","fresh",20.3327796649213,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x))","fresh",24.051401752350614,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 x a))","fresh",20.43322806500351,"binary64"]],"compiler":[[8,7],[23,15],[18,12],[11,8],[8,7],[4,4],[27,18],[22,16],[17,12],[10,8],[8,7],[23,15],[18,12],[11,8],[8,7],[4,4],[27,18],[22,16],[17,12],[10,8]],"count":[[122,10]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[121,10],"picked":[1,0]}],"memory":[[153920,8371216]],"min-error":[[0.00390625,"binary64"]],"time":8.58203125,"type":"prune"},{"egraph":[[0,2212,212,0.010086269],[13,2212,212,0.00839144],[12,2061,212,0.010428378],[11,2061,212,0.004483138],[10,2061,212,0.005252683],[9,1951,212,0.005688097],[8,1811,212,0.005229678],[7,1739,212,0.006018934],[6,1669,212,0.006177153],[5,1433,212,0.00632263],[4,700,212,0.007937591],[3,310,212,0.002550624],[2,146,212,0.001023149],[1,87,212,0.000620481],[0,49,212,0.000540885],[0,27,212,0.000304632]],"inputs":[["(expm1.f64 (*.f64 x a))","(*.f64 x a)","x","a","(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (exp (* a x)) #s(literal 1 binary64))","#s(literal 1 binary64)","(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64)))","(fma.f64 x a #s(literal 1 binary64))","x","a","#s(literal 1 binary64)","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))","(fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a)","(*.f64 (*.f64 a a) x)","(*.f64 a a)","a","x","#s(literal 1/2 binary64)","#s(literal 1 binary64)","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))","(*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a)","(fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))","(*.f64 #s(literal 1/6 binary64) x)","#s(literal 1/6 binary64)","x","a","#s(literal 1/2 binary64)","#s(literal 1 binary64)","(*.f64 x a)"]],"locations":[["(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))","cost-diff",0],["(fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))","cost-diff",0],["#s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64)))","cost-diff",0],["(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))) #s(literal 1 binary64))","cost-diff",0],["(fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a)","cost-diff",0],["(fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))","cost-diff",0],["#s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64)))","cost-diff",0],["(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","cost-diff",0],["(fma.f64 x a #s(literal 1 binary64))","cost-diff",0],["#s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64)))","cost-diff",0],["(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","cost-diff",0],["#s(approx (exp (* a x)) #s(literal 1 binary64))","cost-diff",0],["(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","cost-diff",0],["(*.f64 x a)","cost-diff",0],["(expm1.f64 (*.f64 x a))","cost-diff",0]],"memory":[[-2148048,5974064]],"method":["egg-herbie"],"outputs":[["(expm1.f64 (*.f64 x a))","(expm1.f64 (*.f64 a x))","(*.f64 x a)","(*.f64 a x)","x","a","(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (exp (* a x)) #s(literal 1 binary64))","#s(literal 1 binary64)","(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","(-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64)))","#s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64)))","(fma.f64 x a #s(literal 1 binary64))","(fma.f64 a x #s(literal 1 binary64))","x","a","#s(literal 1 binary64)","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64)))","#s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))","(fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a)","(fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a)","(*.f64 (*.f64 a a) x)","(*.f64 a a)","a","x","#s(literal 1/2 binary64)","#s(literal 1 binary64)","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))) #s(literal 1 binary64))","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64)))","#s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))","(fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))","(*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a)","(fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))","(*.f64 #s(literal 1/6 binary64) x)","#s(literal 1/6 binary64)","x","a","#s(literal 1/2 binary64)","#s(literal 1 binary64)","(*.f64 x a)","(*.f64 a x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":102.178955078125,"type":"simplify"},{"compiler":[[155,27]],"locations":[["(*.f64 #s(literal 1/6 binary64) x)","accuracy",0.36328125],["(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))","accuracy",0.9769943978617663],["#s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64)))","accuracy",20.75658297412271],["(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))) #s(literal 1 binary64))","accuracy",28.882970292253585],["(fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))","accuracy",0.9530223460202432],["(*.f64 (*.f64 a a) x)","accuracy",6.9151278805471135],["#s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64)))","accuracy",20.740733824952912],["(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","accuracy",28.882970292253585],["(fma.f64 x a #s(literal 1 binary64))","accuracy",0.0],["#s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64)))","accuracy",20.808783279448807],["(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","accuracy",28.882970292253585],["#s(approx (exp (* a x)) #s(literal 1 binary64))","accuracy",20.848838020405665],["(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","accuracy",28.882970292253585],["(*.f64 x a)","accuracy",0.0],["(expm1.f64 (*.f64 x a))","accuracy",0.01171875]],"memory":[[1881456,26648368]],"mixsample":[[0.235595703125,"ival-true",0],[2.336669921875,"ival-exp",0],[7.08984375,"ival-add",0],[17.648193359375,"ival-mult",0],[3.567138671875,"const",0],[3.389892578125,"ival-expm1",0],[0.275390625,"exact",0],[0.11279296875,"ival-assert",0]],"outcomes":[[54.410888671875,0,"valid",256]],"time":74.56005859375,"type":"localize"},{"count":[[17,58]],"inputs":[["(expm1.f64 (*.f64 x a))","(*.f64 x a)","(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (exp (* a x)) #s(literal 1 binary64))","(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64)))","(fma.f64 x a #s(literal 1 binary64))","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))","(fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a)","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))","(*.f64 (*.f64 a a) x)","(*.f64 #s(literal 1/6 binary64) x)"]],"memory":[[-746848,6799808]],"outputs":[["(* a x)","(* a (+ x (* 1/2 (* a (pow x 2)))))","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","1","(+ 1 (* a x))","(+ 1 (* a (+ x (* 1/2 (* a (pow x 2))))))","(+ 1 (* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))))","a","(* a (+ 1 (* 1/2 (* a x))))","(+ 1 (* 1/2 (* a x)))","(+ 1 (* a (+ (* 1/6 (* a (pow x 2))) (* 1/2 x))))","(* (pow a 2) x)","(- (exp (* a x)) 1)","(exp (* a x))","(* a (+ x (/ 1 a)))","(* 1/2 (* (pow a 2) (pow x 2)))","(* (pow a 2) (+ (* 1/2 (pow x 2)) (/ x a)))","(* (pow a 2) (+ (* 1/2 (pow x 2)) (+ (/ 1 (pow a 2)) (/ x a))))","(* 1/2 (* (pow a 2) x))","(* (pow a 2) (+ (* 1/2 x) (/ 1 a)))","(* 1/6 (* (pow a 3) (pow x 3)))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (+ (* 1/2 (/ (pow x 2) a)) (/ x (pow a 2)))))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (+ (* 1/2 (/ (pow x 2) a)) (+ (/ 1 (pow a 3)) (/ x (pow a 2))))))","(* 1/6 (* (pow a 2) (pow x 2)))","(* (pow a 2) (+ (* 1/6 (pow x 2)) (* 1/2 (/ x a))))","(* (pow a 2) (+ (* 1/6 (pow x 2)) (+ (* 1/2 (/ x a)) (/ 1 (pow a 2)))))","(* -1 (* a (- (* -1 x) (/ 1 a))))","(* (pow a 2) (+ (* -1 (/ (- (* -1 x) (/ 1 a)) a)) (* 1/2 (pow x 2))))","(* -1 (* (pow a 3) (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/2 (pow x 2)) (/ x a)) a)) (* -1/6 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1 x) (/ 1 a)) a)) (* 1/2 (pow x 2))) a)) (* -1/6 (pow x 3)))))","(* (pow a 2) (+ (* -1 (/ (- (* -1/2 x) (/ 1 a)) a)) (* 1/6 (pow x 2))))","(* x (+ a (* 1/2 (* (pow a 2) x))))","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(+ 1 (* x (+ a (* 1/2 (* (pow a 2) x)))))","(+ 1 (* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2)))))))","(+ a (* 1/2 (* (pow a 2) x)))","(+ 1 (* x (+ (* 1/6 (* (pow a 2) x)) (* 1/2 a))))","(* 1/6 x)","(* x (+ a (/ 1 x)))","(* (pow x 2) (+ (* 1/2 (pow a 2)) (/ a x)))","(* (pow x 2) (+ (* 1/2 (pow a 2)) (+ (/ 1 (pow x 2)) (/ a x))))","(* x (+ (* 1/2 (pow a 2)) (/ a x)))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (* 1/2 (/ (pow a 2) x))))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (+ (* 1/2 (/ (pow a 2) x)) (/ a (pow x 2)))))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (+ (* 1/2 (/ (pow a 2) x)) (+ (/ 1 (pow x 3)) (/ a (pow x 2))))))","(* (pow x 2) (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))))","(* (pow x 2) (+ (* 1/6 (pow a 2)) (+ (* 1/2 (/ a x)) (/ 1 (pow x 2)))))","(* -1 (* x (- (* -1 a) (/ 1 x))))","(* (pow x 2) (+ (* -1 (/ (- (* -1 a) (/ 1 x)) x)) (* 1/2 (pow a 2))))","(* -1 (* x (+ (* -1 (/ a x)) (* -1/2 (pow a 2)))))","(* -1 (* (pow x 3) (+ (* -1/2 (/ (pow a 2) x)) (* -1/6 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/2 (pow a 2)) (/ a x)) x)) (* -1/6 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1 a) (/ 1 x)) x)) (* 1/2 (pow a 2))) x)) (* -1/6 (pow a 3)))))","(* (pow x 2) (+ (* -1 (/ (- (* -1/2 a) (/ 1 x)) x)) (* 1/6 (pow a 2))))"]],"series":[[2.587890625,"((- (exp (* x a)) 1) (* x a) (- (exp (* a x)) 1) (exp (* a x)) (- (exp (* a x)) 1) (exp (* a x)) (+ (* x a) 1) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (+ (* (* (* a a) x) 1/2) a) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* x a)) 1) (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* (* a a) x) (* 1/6 x))","x","-inf"],[3.97998046875,"((- (exp (* x a)) 1) (* x a) (- (exp (* a x)) 1) (exp (* a x)) (- (exp (* a x)) 1) (exp (* a x)) (+ (* x a) 1) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (+ (* (* (* a a) x) 1/2) a) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* x a)) 1) (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* (* a a) x) (* 1/6 x))","x","inf"],[2.55810546875,"((- (exp (* x a)) 1) (* x a) (- (exp (* a x)) 1) (exp (* a x)) (- (exp (* a x)) 1) (exp (* a x)) (+ (* x a) 1) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (+ (* (* (* a a) x) 1/2) a) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* x a)) 1) (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* (* a a) x) (* 1/6 x))","x","0"],[1.995849609375,"((- (exp (* x a)) 1) (* x a) (- (exp (* a x)) 1) (exp (* a x)) (- (exp (* a x)) 1) (exp (* a x)) (+ (* x a) 1) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (+ (* (* (* a a) x) 1/2) a) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* x a)) 1) (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* (* a a) x) (* 1/6 x))","a","-inf"],[1.955078125,"((- (exp (* x a)) 1) (* x a) (- (exp (* a x)) 1) (exp (* a x)) (- (exp (* a x)) 1) (exp (* a x)) (+ (* x a) 1) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (+ (* (* (* a a) x) 1/2) a) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* x a)) 1) (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* (* a a) x) (* 1/6 x))","a","inf"],[2.080078125,"((- (exp (* x a)) 1) (* x a) (- (exp (* a x)) 1) (exp (* a x)) (- (exp (* a x)) 1) (exp (* a x)) (+ (* x a) 1) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (+ (* (* (* a a) x) 1/2) a) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* x a)) 1) (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* (* a a) x) (* 1/6 x))","a","0"]],"time":16.489990234375,"type":"series"},{"count":[[58,57]],"egraph":[[0,8230,636,0.113766634],[3,6246,716,0.027158074],[2,2339,729,0.018876562],[1,707,777,0.007086109],[0,211,782,0.001968135]],"inputs":[["(* a x)","(* a (+ x (* 1/2 (* a (pow x 2)))))","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","1","(+ 1 (* a x))","(+ 1 (* a (+ x (* 1/2 (* a (pow x 2))))))","(+ 1 (* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))))","a","(* a (+ 1 (* 1/2 (* a x))))","(+ 1 (* 1/2 (* a x)))","(+ 1 (* a (+ (* 1/6 (* a (pow x 2))) (* 1/2 x))))","(* (pow a 2) x)","(- (exp (* a x)) 1)","(exp (* a x))","(* a (+ x (/ 1 a)))","(* 1/2 (* (pow a 2) (pow x 2)))","(* (pow a 2) (+ (* 1/2 (pow x 2)) (/ x a)))","(* (pow a 2) (+ (* 1/2 (pow x 2)) (+ (/ 1 (pow a 2)) (/ x a))))","(* 1/2 (* (pow a 2) x))","(* (pow a 2) (+ (* 1/2 x) (/ 1 a)))","(* 1/6 (* (pow a 3) (pow x 3)))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (+ (* 1/2 (/ (pow x 2) a)) (/ x (pow a 2)))))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (+ (* 1/2 (/ (pow x 2) a)) (+ (/ 1 (pow a 3)) (/ x (pow a 2))))))","(* 1/6 (* (pow a 2) (pow x 2)))","(* (pow a 2) (+ (* 1/6 (pow x 2)) (* 1/2 (/ x a))))","(* (pow a 2) (+ (* 1/6 (pow x 2)) (+ (* 1/2 (/ x a)) (/ 1 (pow a 2)))))","(* -1 (* a (- (* -1 x) (/ 1 a))))","(* (pow a 2) (+ (* -1 (/ (- (* -1 x) (/ 1 a)) a)) (* 1/2 (pow x 2))))","(* -1 (* (pow a 3) (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/2 (pow x 2)) (/ x a)) a)) (* -1/6 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1 x) (/ 1 a)) a)) (* 1/2 (pow x 2))) a)) (* -1/6 (pow x 3)))))","(* (pow a 2) (+ (* -1 (/ (- (* -1/2 x) (/ 1 a)) a)) (* 1/6 (pow x 2))))","(* x (+ a (* 1/2 (* (pow a 2) x))))","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(+ 1 (* x (+ a (* 1/2 (* (pow a 2) x)))))","(+ 1 (* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2)))))))","(+ a (* 1/2 (* (pow a 2) x)))","(+ 1 (* x (+ (* 1/6 (* (pow a 2) x)) (* 1/2 a))))","(* 1/6 x)","(* x (+ a (/ 1 x)))","(* (pow x 2) (+ (* 1/2 (pow a 2)) (/ a x)))","(* (pow x 2) (+ (* 1/2 (pow a 2)) (+ (/ 1 (pow x 2)) (/ a x))))","(* x (+ (* 1/2 (pow a 2)) (/ a x)))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (* 1/2 (/ (pow a 2) x))))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (+ (* 1/2 (/ (pow a 2) x)) (/ a (pow x 2)))))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (+ (* 1/2 (/ (pow a 2) x)) (+ (/ 1 (pow x 3)) (/ a (pow x 2))))))","(* (pow x 2) (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))))","(* (pow x 2) (+ (* 1/6 (pow a 2)) (+ (* 1/2 (/ a x)) (/ 1 (pow x 2)))))","(* -1 (* x (- (* -1 a) (/ 1 x))))","(* (pow x 2) (+ (* -1 (/ (- (* -1 a) (/ 1 x)) x)) (* 1/2 (pow a 2))))","(* -1 (* x (+ (* -1 (/ a x)) (* -1/2 (pow a 2)))))","(* -1 (* (pow x 3) (+ (* -1/2 (/ (pow a 2) x)) (* -1/6 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/2 (pow a 2)) (/ a x)) x)) (* -1/6 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1 a) (/ 1 x)) x)) (* 1/2 (pow a 2))) x)) (* -1/6 (pow a 3)))))","(* (pow x 2) (+ (* -1 (/ (- (* -1/2 a) (/ 1 x)) x)) (* 1/6 (pow a 2))))"]],"memory":[[3499248,45304192]],"method":["egg-herbie"],"outputs":[["(* a x)","(*.f64 a x)","(* a (+ x (* 1/2 (* a (pow x 2)))))","(*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x)","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a x) a)","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) a) #s(literal 1/24 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64))) a (*.f64 (*.f64 x x) #s(literal 1/2 binary64))) a x) a)","1","#s(literal 1 binary64)","(+ 1 (* a x))","(fma.f64 a x #s(literal 1 binary64))","(+ 1 (* a (+ x (* 1/2 (* a (pow x 2))))))","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) x #s(literal 1 binary64)) x) a #s(literal 1 binary64))","(+ 1 (* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a x) a #s(literal 1 binary64))","a","(* a (+ 1 (* 1/2 (* a x))))","(fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a)","(+ 1 (* 1/2 (* a x)))","(fma.f64 (*.f64 #s(literal 1/2 binary64) a) x #s(literal 1 binary64))","(+ 1 (* a (+ (* 1/6 (* a (pow x 2))) (* 1/2 x))))","(fma.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a #s(literal 1 binary64))","(* (pow a 2) x)","(*.f64 (*.f64 a a) x)","(- (exp (* a x)) 1)","(expm1.f64 (*.f64 a x))","(exp (* a x))","(pow.f64 (exp.f64 x) a)","(* a (+ x (/ 1 a)))","(fma.f64 a x #s(literal 1 binary64))","(* 1/2 (* (pow a 2) (pow x 2)))","(*.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) x)","(* (pow a 2) (+ (* 1/2 (pow x 2)) (/ x a)))","(*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x)","(* (pow a 2) (+ (* 1/2 (pow x 2)) (+ (/ 1 (pow a 2)) (/ x a))))","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) x #s(literal 1 binary64)) x) a #s(literal 1 binary64))","(* 1/2 (* (pow a 2) x))","(*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64))","(* (pow a 2) (+ (* 1/2 x) (/ 1 a)))","(fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a)","(* 1/6 (* (pow a 3) (pow x 3)))","(*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a))) (pow.f64 a #s(literal 3 binary64)))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (+ (* 1/2 (/ (pow x 2) a)) (/ x (pow a 2)))))","(*.f64 (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a)) (/.f64 (/.f64 x a) a)) (pow.f64 a #s(literal 3 binary64)))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (+ (* 1/2 (/ (pow x 2) a)) (+ (/ 1 (pow a 3)) (/ x (pow a 2))))))","(fma.f64 (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a)) (/.f64 (/.f64 x a) a)) (pow.f64 a #s(literal 3 binary64)) #s(literal 1 binary64))","(* 1/6 (* (pow a 2) (pow x 2)))","(*.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/6 binary64)) x)","(* (pow a 2) (+ (* 1/6 (pow x 2)) (* 1/2 (/ x a))))","(*.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a)","(* (pow a 2) (+ (* 1/6 (pow x 2)) (+ (* 1/2 (/ x a)) (/ 1 (pow a 2)))))","(fma.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a #s(literal 1 binary64))","(* -1 (* a (- (* -1 x) (/ 1 a))))","(fma.f64 a x #s(literal 1 binary64))","(* (pow a 2) (+ (* -1 (/ (- (* -1 x) (/ 1 a)) a)) (* 1/2 (pow x 2))))","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) x #s(literal 1 binary64)) x) a #s(literal 1 binary64))","(* -1 (* (pow a 3) (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3)))))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a))) (pow.f64 a #s(literal 3 binary64)))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/2 (pow x 2)) (/ x a)) a)) (* -1/6 (pow x 3)))))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a x) a)","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1 x) (/ 1 a)) a)) (* 1/2 (pow x 2))) a)) (* -1/6 (pow x 3)))))","(fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64)) (pow.f64 x #s(literal 3 binary64)) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) x #s(literal 1 binary64)) x) a #s(literal 1 binary64)))","(* (pow a 2) (+ (* -1 (/ (- (* -1/2 x) (/ 1 a)) a)) (* 1/6 (pow x 2))))","(fma.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a #s(literal 1 binary64))","(* x (+ a (* 1/2 (* (pow a 2) x))))","(*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x)","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a x) a)","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (pow.f64 a #s(literal 4 binary64)) (*.f64 x #s(literal 1/24 binary64)) (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))) x (*.f64 (*.f64 a a) #s(literal 1/2 binary64))) x a) x)","(+ 1 (* x (+ a (* 1/2 (* (pow a 2) x)))))","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) x #s(literal 1 binary64)) x) a #s(literal 1 binary64))","(+ 1 (* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2)))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a x) a #s(literal 1 binary64))","(+ a (* 1/2 (* (pow a 2) x)))","(fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a)","(+ 1 (* x (+ (* 1/6 (* (pow a 2) x)) (* 1/2 a))))","(fma.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a #s(literal 1 binary64))","(* 1/6 x)","(*.f64 #s(literal 1/6 binary64) x)","(* x (+ a (/ 1 x)))","(fma.f64 a x #s(literal 1 binary64))","(* (pow x 2) (+ (* 1/2 (pow a 2)) (/ a x)))","(*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x)","(* (pow x 2) (+ (* 1/2 (pow a 2)) (+ (/ 1 (pow x 2)) (/ a x))))","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) x #s(literal 1 binary64)) x) a #s(literal 1 binary64))","(* x (+ (* 1/2 (pow a 2)) (/ a x)))","(fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a)","(* (pow x 3) (+ (* 1/6 (pow a 3)) (* 1/2 (/ (pow a 2) x))))","(*.f64 (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (+ (* 1/2 (/ (pow a 2) x)) (/ a (pow x 2)))))","(*.f64 (fma.f64 (*.f64 a a) (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x)) (/.f64 (/.f64 a x) x)) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (+ (* 1/2 (/ (pow a 2) x)) (+ (/ 1 (pow x 3)) (/ a (pow x 2))))))","(fma.f64 (fma.f64 (*.f64 a a) (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x)) (/.f64 (/.f64 a x) x)) (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))","(* (pow x 2) (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))))","(*.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a)","(* (pow x 2) (+ (* 1/6 (pow a 2)) (+ (* 1/2 (/ a x)) (/ 1 (pow x 2)))))","(fma.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a #s(literal 1 binary64))","(* -1 (* x (- (* -1 a) (/ 1 x))))","(fma.f64 a x #s(literal 1 binary64))","(* (pow x 2) (+ (* -1 (/ (- (* -1 a) (/ 1 x)) x)) (* 1/2 (pow a 2))))","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) x #s(literal 1 binary64)) x) a #s(literal 1 binary64))","(* -1 (* x (+ (* -1 (/ a x)) (* -1/2 (pow a 2)))))","(fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a)","(* -1 (* (pow x 3) (+ (* -1/2 (/ (pow a 2) x)) (* -1/6 (pow a 3)))))","(*.f64 (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/2 (pow a 2)) (/ a x)) x)) (* -1/6 (pow a 3)))))","(*.f64 (-.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 a x)) x) (*.f64 #s(literal -1/6 binary64) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* -1 (/ (- (* -1 a) (/ 1 x)) x)) (* 1/2 (pow a 2))) x)) (* -1/6 (pow a 3)))))","(*.f64 (-.f64 (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) a (/.f64 (-.f64 a (/.f64 #s(literal -1 binary64) x)) x)) x) (*.f64 #s(literal -1/6 binary64) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 2) (+ (* -1 (/ (- (* -1/2 a) (/ 1 x)) x)) (* 1/6 (pow a 2))))","(fma.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a #s(literal 1 binary64))"]],"stop":[["iter limit",1],["node limit",1]],"time":347.541015625,"type":"simplify"},{"count":[[17,405]],"egraph":[[0,8086,177,0.092395784],[2,1532,177,0.026376731],[1,209,177,0.004913297],[0,49,177,0.001595325],[0,27,177,0.000306635]],"inputs":[["(expm1.f64 (*.f64 x a))","(*.f64 x a)","(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (exp (* a x)) #s(literal 1 binary64))","(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64)))","(fma.f64 x a #s(literal 1 binary64))","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))","(fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a)","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64)))","(fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))","(*.f64 (*.f64 a a) x)","(*.f64 #s(literal 1/6 binary64) x)"]],"memory":[[5004976,60098064]],"outputs":[["(*.f64 (/.f64 (+.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64)) (+.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64))) (/.f64 (expm1.f64 (*.f64 a x)) #s(literal 1 binary64)))","(*.f64 (expm1.f64 (*.f64 x (*.f64 #s(literal 2 binary64) a))) (pow.f64 (+.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 x (*.f64 a #s(literal 3 binary64)))) (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64)) (expm1.f64 (*.f64 x (*.f64 #s(literal 2 binary64) a)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a)) (expm1.f64 (*.f64 x (*.f64 a #s(literal 3 binary64))))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (+.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (+.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64))) (/.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (+.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64))) (fma.f64 (pow.f64 (+.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (+.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64))) (pow.f64 (+.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a))) (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a))) (fma.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a))) (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a)) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64)))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (*.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a)))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 x (*.f64 #s(literal 2 binary64) a))))) (neg.f64 (neg.f64 (+.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 x (*.f64 a #s(literal 3 binary64)))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (+.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a))) (+.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a))))","(/.f64 (-.f64 (*.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (+.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64))) (+.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64))) (pow.f64 (+.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a))) (*.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a)) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x (*.f64 #s(literal 2 binary64) a)))) (neg.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x (*.f64 #s(literal 2 binary64) a)))) (neg.f64 (+.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x (*.f64 a #s(literal 3 binary64))))) (neg.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x (*.f64 a #s(literal 3 binary64))))) (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a))))","(/.f64 (expm1.f64 (*.f64 x (*.f64 #s(literal 2 binary64) a))) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)))","(/.f64 (expm1.f64 (*.f64 x (*.f64 #s(literal 2 binary64) a))) (+.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64)) (expm1.f64 (*.f64 x (*.f64 #s(literal 2 binary64) a))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a)) (expm1.f64 (*.f64 x (*.f64 a #s(literal 3 binary64)))))))","(/.f64 (expm1.f64 (*.f64 x (*.f64 a #s(literal 3 binary64)))) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)))))","(/.f64 (expm1.f64 (*.f64 x (*.f64 a #s(literal 3 binary64)))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64)) (expm1.f64 (*.f64 x (*.f64 #s(literal 2 binary64) a)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a)) (expm1.f64 (*.f64 x (*.f64 a #s(literal 3 binary64))))))","(fma.f64 (pow.f64 (exp.f64 x) (/.f64 a #s(literal 2 binary64))) (pow.f64 (exp.f64 x) (/.f64 a #s(literal 2 binary64))) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 a) (/.f64 x #s(literal 2 binary64))) (pow.f64 (exp.f64 a) (/.f64 x #s(literal 2 binary64))) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))","(expm1.f64 (*.f64 a x))","(-.f64 (/.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (-.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (+.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64))) (pow.f64 (+.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a))) (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) a)) #s(literal -1 binary64)))","(-.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64))","(+.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a))","(+.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 a x))","(*.f64 (*.f64 a x) #s(literal 1 binary64))","(*.f64 a (*.f64 x #s(literal 1 binary64)))","(*.f64 a x)","(*.f64 x (*.f64 a #s(literal 1 binary64)))","(*.f64 x a)","(fma.f64 #s(literal 1 binary64) (*.f64 a x) #s(literal 0 binary64))","(fma.f64 (*.f64 a x) #s(literal 1 binary64) #s(literal 0 binary64))","(fma.f64 a (*.f64 x #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 a x #s(literal 0 binary64))","(fma.f64 x (*.f64 a #s(literal 1 binary64)) #s(literal 0 binary64))","(fma.f64 x a #s(literal 0 binary64))","(+.f64 (log.f64 (pow.f64 (exp.f64 x) (/.f64 a #s(literal 2 binary64)))) (log.f64 (pow.f64 (exp.f64 x) (/.f64 a #s(literal 2 binary64)))))","(+.f64 (log.f64 (pow.f64 (exp.f64 a) (/.f64 x #s(literal 2 binary64)))) (log.f64 (pow.f64 (exp.f64 a) (/.f64 x #s(literal 2 binary64)))))","(+.f64 #s(literal 0 binary64) (*.f64 a x))","(+.f64 (*.f64 a x) #s(literal 0 binary64))","(log.f64 (pow.f64 (exp.f64 x) a))","(*.f64 (/.f64 (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))) (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))) (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))) (fma.f64 (pow.f64 (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))) (pow.f64 (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)))) (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)))) (fma.f64 (pow.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)))) (pow.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal -1 binary64) #s(approx (exp (* a x)) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 2 binary64)))) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 3 binary64)))) (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))) (pow.f64 (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)))) (*.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))) (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))) (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))) (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64))))","(fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))) (pow.f64 (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64)))) (pow.f64 (fma.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(approx (exp (* a x)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64)))","(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","(+.f64 #s(literal -1 binary64) #s(approx (exp (* a x)) #s(literal 1 binary64)))","(+.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal -1 binary64))","(*.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) #s(approx (exp (* a x)) #s(literal 1 binary64)))","#s(approx (exp (* a x)) #s(literal 1 binary64))","(*.f64 (/.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))) (/.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))) (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))) (fma.f64 (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))) (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)))) (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)))) (fma.f64 (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)))) (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 #s(literal -1 binary64) #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)))) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)))) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))) (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)))) (*.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))))","(fma.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))) (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64)))) (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(-.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))","(+.f64 #s(literal -1 binary64) #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))))","(+.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal -1 binary64))","(*.f64 #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) #s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64))))","#s(approx (exp (* a x)) (fma.f64 a x #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 a x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 a x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 a x #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 a x)) (+.f64 (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (fma.f64 a x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 a x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (fma.f64 a x #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (fma.f64 a x #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 a x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 a x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (fma.f64 a x #s(literal -1 binary64))) (pow.f64 (fma.f64 a x #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 a x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 a x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 a x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 a x) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 a x #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 a x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)))) (fma.f64 a x #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 a x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 a x))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 6 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 a x) #s(literal 3 binary64)))) (-.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 a x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (fma.f64 a x #s(literal -1 binary64))) (*.f64 (fma.f64 a x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 a x #s(literal -1 binary64)) (fma.f64 a x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 a x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 a x #s(literal -1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 a x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 a x))))","(/.f64 (-.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 a x #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 a x #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 a x)) (+.f64 (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 a x))))","(/.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 a x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 a x #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 a x)) (+.f64 (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(fma.f64 #s(literal 1 binary64) (*.f64 a x) #s(literal 1 binary64))","(fma.f64 (*.f64 a x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 a (*.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 a x #s(literal 1 binary64))","(fma.f64 x (*.f64 a #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 x a #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 a x))) (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 a x))))","(-.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (fma.f64 a x #s(literal -1 binary64))) (pow.f64 (fma.f64 a x #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 #s(literal 1 binary64) (*.f64 a x))","(+.f64 (*.f64 a x) #s(literal 1 binary64))","(*.f64 (/.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64))) (/.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64))) (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64))) (fma.f64 (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64))) (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (fma.f64 (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 #s(literal -1 binary64) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)))) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64))) (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64))) (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (*.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))))","(fma.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64))) (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","(+.f64 #s(literal -1 binary64) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))))","(+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))","(*.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))))","#s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x)) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)))) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 6 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x)) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x)) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) (*.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 1 binary64))","(fma.f64 x (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 x (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x))","(*.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 a) a)) (pow.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) #s(literal 1/8 binary64) (pow.f64 a #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 a (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x))))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 a) a))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 a (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x))))) (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) #s(literal 1/8 binary64) (pow.f64 a #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 a a) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) (fma.f64 (/.f64 (*.f64 a a) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) (/.f64 (*.f64 a a) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) (/.f64 (*.f64 a a) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))))))","(/.f64 (neg.f64 (-.f64 (*.f64 a a) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))) (neg.f64 (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 a) a)))) (neg.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) #s(literal 1/8 binary64) (pow.f64 a #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 a (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x))))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 a a)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 6 binary64)) (pow.f64 a #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 4 binary64)) (+.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) #s(literal 2 binary64)))) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 6 binary64)) (pow.f64 a #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))) (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 a (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)))))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 9 binary64)) (pow.f64 a #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 6 binary64)) (-.f64 (pow.f64 a #s(literal 6 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) #s(literal 3 binary64)))) (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 a (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) (*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) (*.f64 a a))) (*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)))","(/.f64 (-.f64 (*.f64 a a) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64))) (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 a) a))) (neg.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) #s(literal 1/8 binary64) (pow.f64 a #s(literal 3 binary64)))) (neg.f64 (fma.f64 a a (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) #s(literal 1/8 binary64) (pow.f64 a #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 a (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)))))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 a) a)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 a) a)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 a (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x))))) (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) #s(literal 1/8 binary64) (pow.f64 a #s(literal 3 binary64))))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) #s(literal 1/8 binary64) (pow.f64 a #s(literal 3 binary64))) (fma.f64 a a (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))))","(/.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) #s(literal 1/8 binary64) (pow.f64 a #s(literal 3 binary64))) (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 a (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 a) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) #s(literal 1/4 binary64) (*.f64 a (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x))))) (fma.f64 (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) #s(literal 1/8 binary64) (pow.f64 a #s(literal 3 binary64)))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 a a)) x a)","(fma.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 a x) a)","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 a a) a)","(fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a)","(fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a)","(fma.f64 (*.f64 a a) (*.f64 #s(literal 1/2 binary64) x) a)","(fma.f64 a (*.f64 (*.f64 a x) #s(literal 1/2 binary64)) a)","(fma.f64 a (*.f64 a (*.f64 #s(literal 1/2 binary64) x)) a)","(fma.f64 x (*.f64 (*.f64 a a) #s(literal 1/2 binary64)) a)","(-.f64 (/.f64 (*.f64 a a) (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)))) (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)))))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) (/.f64 (*.f64 a a) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)))","(+.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)","(+.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)))","(*.f64 (/.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64))) (/.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64)) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64))) (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64))) (fma.f64 (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64))) (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64)))) (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64)))) (fma.f64 (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64)))) (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 #s(literal -1 binary64) #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64)))) (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 3 binary64)))) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64))) (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64))) (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64)))) (*.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64)) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64)) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))))","(fma.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal -1 binary64))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal -1 binary64))))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64))) (pow.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64)))) (pow.f64 (+.f64 (+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64))","(+.f64 #s(literal -1 binary64) #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))))","(+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal -1 binary64))","(*.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))))","#s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 2 binary64)))) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 2 binary64)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 6 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 3 binary64)))) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal -1 binary64))) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal -1 binary64)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal -1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x)) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 2 binary64))) (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x #s(literal 1 binary64))","(fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) x) (*.f64 a #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) x) a #s(literal 1 binary64))","(fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 1 binary64))","(fma.f64 (*.f64 a x) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 a x) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 a (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) x) #s(literal 1 binary64))","(fma.f64 x (*.f64 a (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x))) (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x))","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x)) (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 3 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)))) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 6 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 3 binary64)))) (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64))) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64)) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x)) (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x)) (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a #s(literal 1 binary64))","(fma.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) a #s(literal 1 binary64))","(fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) (*.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 a x) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 1 binary64))","(fma.f64 (*.f64 a x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) #s(literal 1 binary64))","(fma.f64 a (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) #s(literal 1 binary64))","(fma.f64 x (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 x (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x))) (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x))","(*.f64 (*.f64 a a) x)","(*.f64 (*.f64 a x) a)","(*.f64 a (*.f64 a x))","(*.f64 x (*.f64 a a))","(*.f64 #s(literal 1/6 binary64) x)","(*.f64 x #s(literal 1/6 binary64))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":262.81103515625,"type":"rewrite"},{"compiler":[[19616,1846]],"memory":[[-1445760,46582688]],"time":78.9619140625,"type":"eval"},{"alts":[["(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 x a))))","next",0.5416603781410524,"binary64"],["(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))) #s(literal 1 binary64))","done",49.19468621724214,"binary64"],["(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a x) a) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","next",49.894035542386035,"binary64"],["(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","done",49.08004335184552,"binary64"],["(-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) x))) #s(literal 1 binary64))","next",61.25065934079225,"binary64"],["(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","done",50.06914282029762,"binary64"],["(expm1.f64 (*.f64 x a))","done",0.01171875,"binary64"],["#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x))","next",24.051401752350614,"binary64"],["#s(approx (- (exp (* x a)) 1) (*.f64 a x))","next",20.43322806500351,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a)))","fresh",20.95639425523387,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))","fresh",20.3327796649213,"binary64"]],"compiler":[[8,7],[23,15],[18,12],[11,8],[30,21],[8,7],[4,4],[17,12],[10,8],[27,18],[22,16],[8,7],[18,12],[30,21],[17,12],[10,8],[27,18],[22,16]],"count":[[464,11]],"kept":[{"done":[0,0],"fresh":[5,3],"new":[454,4],"picked":[5,4]}],"memory":[[5097584,21770256]],"min-error":[[0.00390625,"binary64"]],"time":15.052001953125,"type":"prune"},{"egraph":[[0,309,245,0.002455136],[9,309,245,0.001744348],[8,306,245,0.00176842],[7,300,245,0.001967605],[6,245,245,0.001352067],[5,236,245,0.001041594],[4,221,245,0.001019919],[3,199,245,0.000992674],[2,147,245,0.000827258],[1,91,245,0.000610389],[0,56,245,0.00062233],[0,36,252,0.000331371]],"inputs":[["(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 x a))))","#s(literal 1 binary64)","(/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 x a)))","(expm1.f64 (*.f64 x a))","(*.f64 x a)","x","a","#s(approx (- (exp (* x a)) 1) (*.f64 a x))","(*.f64 a x)","a","x","#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x))","(*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x)","(fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a)","(*.f64 (*.f64 a a) x)","(*.f64 a a)","a","x","#s(literal 1/2 binary64)","(-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) x))) #s(literal 1 binary64))","#s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) x)))","#s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) x))","(*.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) x)","(*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64))","(*.f64 (*.f64 a a) x)","(*.f64 a a)","a","x","#s(literal 1/2 binary64)","#s(literal 1 binary64)","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a x) a) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a x) a) #s(literal 1/2 binary64) a) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (*.f64 (*.f64 a x) a) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))","(fma.f64 (*.f64 (*.f64 a x) a) #s(literal 1/2 binary64) a)","(*.f64 (*.f64 a x) a)","(*.f64 a x)","a","x","#s(literal 1/2 binary64)","#s(literal 1 binary64)"]],"locations":[["(fma.f64 (*.f64 (*.f64 a x) a) #s(literal 1/2 binary64) a)","cost-diff",0],["(fma.f64 (fma.f64 (*.f64 (*.f64 a x) a) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))","cost-diff",0],["#s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a x) a) #s(literal 1/2 binary64) a) x #s(literal 1 binary64)))","cost-diff",0],["(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a x) a) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","cost-diff",0],["(*.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) x)","cost-diff",0],["#s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) x))","cost-diff",0],["#s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) x)))","cost-diff",0],["(-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) x))) #s(literal 1 binary64))","cost-diff",0],["(*.f64 (*.f64 a a) x)","cost-diff",0],["(fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a)","cost-diff",0],["(*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x)","cost-diff",0],["#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x))","cost-diff",0],["(*.f64 a x)","cost-diff",0],["#s(approx (- (exp (* x a)) 1) (*.f64 a x))","cost-diff",0],["(*.f64 x a)","cost-diff",0],["(expm1.f64 (*.f64 x a))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 x a)))","cost-diff",0],["(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 x a))))","cost-diff",4]],"memory":[[-15873472,2193776]],"method":["egg-herbie"],"outputs":[["(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 x a))))","(expm1.f64 (*.f64 a x))","#s(literal 1 binary64)","(/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 x a)))","(/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 a x)))","(expm1.f64 (*.f64 x a))","(expm1.f64 (*.f64 a x))","(*.f64 x a)","(*.f64 a x)","x","a","#s(approx (- (exp (* x a)) 1) (*.f64 a x))","(*.f64 a x)","a","x","#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x))","#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x))","(*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x)","(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x)","(fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a)","(fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a)","(*.f64 (*.f64 a a) x)","(*.f64 a a)","a","x","#s(literal 1/2 binary64)","(-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) x))) #s(literal 1 binary64))","(-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) x))) #s(literal 1 binary64))","#s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) x)))","#s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) x)))","#s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) x))","#s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) x))","(*.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) x)","(*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) x)","(*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64))","(*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x))","(*.f64 (*.f64 a a) x)","(*.f64 a a)","a","x","#s(literal 1/2 binary64)","#s(literal 1 binary64)","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a x) a) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a x) a) #s(literal 1/2 binary64) a) x #s(literal 1 binary64)))","#s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (*.f64 (*.f64 a x) a) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))","(fma.f64 (*.f64 (*.f64 a x) a) #s(literal 1/2 binary64) a)","(fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a)","(*.f64 (*.f64 a x) a)","(*.f64 (*.f64 a a) x)","(*.f64 a x)","a","x","#s(literal 1/2 binary64)","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":64.7021484375,"type":"simplify"},{"compiler":[[175,25]],"locations":[["(*.f64 (*.f64 a x) a)","accuracy",0.109375],["(fma.f64 (fma.f64 (*.f64 (*.f64 a x) a) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))","accuracy",0.9530223460202432],["#s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a x) a) #s(literal 1/2 binary64) a) x #s(literal 1 binary64)))","accuracy",20.740733824952912],["(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a x) a) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","accuracy",28.882970292253585],["(*.f64 (*.f64 a a) x)","accuracy",6.9151278805471135],["#s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) x)))","accuracy",20.740733824952912],["(-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) x))) #s(literal 1 binary64))","accuracy",28.882970292253585],["#s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) x))","accuracy",41.96735506981745],["(fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a)","accuracy",0.0078125],["(*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x)","accuracy",0.9608348460202432],["(*.f64 (*.f64 a a) x)","accuracy",6.9151278805471135],["#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x))","accuracy",21.046146920636087],["(*.f64 a x)","accuracy",0.0],["#s(approx (- (exp (* x a)) 1) (*.f64 a x))","accuracy",20.43322806500351],["(*.f64 x a)","accuracy",0.0],["(expm1.f64 (*.f64 x a))","accuracy",0.01171875],["(/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 x a)))","accuracy",0.12109375],["(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 x a))))","accuracy",0.5878716086041683]],"memory":[[2341952,26279168]],"mixsample":[[4.9599609375,"ival-div",0],[0.312255859375,"ival-true",0],[2.84619140625,"ival-exp",0],[5.51220703125,"ival-add",0],[19.014404296875,"ival-mult",0],[0.373779296875,"exact",0],[4.32373046875,"ival-expm1",0],[0.135986328125,"ival-assert",0]],"outcomes":[[60.388916015625,0,"valid",256]],"time":84.5439453125,"type":"localize"},{"count":[[19,38]],"inputs":[["(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 x a))))","(/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 x a)))","(expm1.f64 (*.f64 x a))","(*.f64 x a)","#s(approx (- (exp (* x a)) 1) (*.f64 a x))","(*.f64 a x)","#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x))","(*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x)","(fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a)","(*.f64 (*.f64 a a) x)","(-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) x))) #s(literal 1 binary64))","#s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) x)))","#s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) x))","(*.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) x)","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a x) a) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a x) a) #s(literal 1/2 binary64) a) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (*.f64 (*.f64 a x) a) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))","(fma.f64 (*.f64 (*.f64 a x) a) #s(literal 1/2 binary64) a)","(*.f64 (*.f64 a x) a)"]],"memory":[[-1232288,7749808]],"outputs":[["(* a x)","(* a (+ x (* 1/2 (* a (pow x 2)))))","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","(/ 1 (* a x))","(/ (+ (* -1/2 a) (/ 1 x)) a)","(/ (+ (* a (- (* -1 (* a (+ (* -1/4 x) (* 1/6 x)))) 1/2)) (/ 1 x)) a)","(/ (+ (* a (- (* a (- (* -1 (* a (+ (* -1/2 (* x (+ (* -1/4 x) (* 1/6 x)))) (+ (* -1/12 (pow x 2)) (* 1/24 (pow x 2)))))) (+ (* -1/4 x) (* 1/6 x)))) 1/2)) (/ 1 x)) a)","a","(* a (+ 1 (* 1/2 (* a x))))","(* (pow a 2) x)","1","(+ 1 (* a x))","(+ 1 (* a (+ x (* 1/2 (* a (pow x 2))))))","(+ 1 (* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))))","(* 1/2 (* (pow a 2) (pow x 2)))","(- (exp (* a x)) 1)","(/ 1 (- (exp (* a x)) 1))","(* (pow a 2) (+ (* 1/2 (pow x 2)) (/ x a)))","(* 1/2 (* (pow a 2) x))","(* (pow a 2) (+ (* 1/2 x) (/ 1 a)))","(exp (* a x))","(* (pow a 2) (+ (* 1/2 (pow x 2)) (+ (/ 1 (pow a 2)) (/ x a))))","(* (pow a 2) (+ (* -1 (/ (- (* -1 x) (/ 1 a)) a)) (* 1/2 (pow x 2))))","(* x (+ a (* 1/2 (* (pow a 2) x))))","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(/ (+ (* -1/2 x) (/ 1 a)) x)","(/ (+ (* x (- (* -1 (* x (+ (* -1/4 a) (* 1/6 a)))) 1/2)) (/ 1 a)) x)","(/ (+ (* x (- (* x (- (* -1 (* x (+ (* -1/2 (* a (+ (* -1/4 a) (* 1/6 a)))) (+ (* -1/12 (pow a 2)) (* 1/24 (pow a 2)))))) (+ (* -1/4 a) (* 1/6 a)))) 1/2)) (/ 1 a)) x)","(+ a (* 1/2 (* (pow a 2) x)))","(+ 1 (* x (+ a (* 1/2 (* (pow a 2) x)))))","(+ 1 (* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2)))))))","(* (pow x 2) (+ (* 1/2 (pow a 2)) (/ a x)))","(* x (+ (* 1/2 (pow a 2)) (/ a x)))","(* (pow x 2) (+ (* 1/2 (pow a 2)) (+ (/ 1 (pow x 2)) (/ a x))))","(* -1 (* x (+ (* -1 (/ a x)) (* -1/2 (pow a 2)))))","(* (pow x 2) (+ (* -1 (/ (- (* -1 a) (/ 1 x)) x)) (* 1/2 (pow a 2))))"]],"series":[[7.87109375,"((/ 1 (/ 1 (- (exp (* x a)) 1))) (/ 1 (- (exp (* x a)) 1)) (- (exp (* x a)) 1) (* x a) (- (exp (* x a)) 1) (* a x) (- (exp (* x a)) 1) (* (+ (* (* (* a a) x) 1/2) a) x) (+ (* (* (* a a) x) 1/2) a) (* (* a a) x) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (* (* (* (* a a) x) 1/2) x) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (* a x) a) 1/2) a) x) 1) (+ (* (* (* a x) a) 1/2) a) (* (* a x) a))","x","-inf"],[4.7919921875,"((/ 1 (/ 1 (- (exp (* x a)) 1))) (/ 1 (- (exp (* x a)) 1)) (- (exp (* x a)) 1) (* x a) (- (exp (* x a)) 1) (* a x) (- (exp (* x a)) 1) (* (+ (* (* (* a a) x) 1/2) a) x) (+ (* (* (* a a) x) 1/2) a) (* (* a a) x) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (* (* (* (* a a) x) 1/2) x) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (* a x) a) 1/2) a) x) 1) (+ (* (* (* a x) a) 1/2) a) (* (* a x) a))","x","inf"],[2.009033203125,"((/ 1 (/ 1 (- (exp (* x a)) 1))) (/ 1 (- (exp (* x a)) 1)) (- (exp (* x a)) 1) (* x a) (- (exp (* x a)) 1) (* a x) (- (exp (* x a)) 1) (* (+ (* (* (* a a) x) 1/2) a) x) (+ (* (* (* a a) x) 1/2) a) (* (* a a) x) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (* (* (* (* a a) x) 1/2) x) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (* a x) a) 1/2) a) x) 1) (+ (* (* (* a x) a) 1/2) a) (* (* a x) a))","x","0"],[2.97900390625,"((/ 1 (/ 1 (- (exp (* x a)) 1))) (/ 1 (- (exp (* x a)) 1)) (- (exp (* x a)) 1) (* x a) (- (exp (* x a)) 1) (* a x) (- (exp (* x a)) 1) (* (+ (* (* (* a a) x) 1/2) a) x) (+ (* (* (* a a) x) 1/2) a) (* (* a a) x) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (* (* (* (* a a) x) 1/2) x) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (* a x) a) 1/2) a) x) 1) (+ (* (* (* a x) a) 1/2) a) (* (* a x) a))","a","-inf"],[2.52099609375,"((/ 1 (/ 1 (- (exp (* x a)) 1))) (/ 1 (- (exp (* x a)) 1)) (- (exp (* x a)) 1) (* x a) (- (exp (* x a)) 1) (* a x) (- (exp (* x a)) 1) (* (+ (* (* (* a a) x) 1/2) a) x) (+ (* (* (* a a) x) 1/2) a) (* (* a a) x) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (* (* (* (* a a) x) 1/2) x) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (* a x) a) 1/2) a) x) 1) (+ (* (* (* a x) a) 1/2) a) (* (* a x) a))","a","inf"],[2.63916015625,"((/ 1 (/ 1 (- (exp (* x a)) 1))) (/ 1 (- (exp (* x a)) 1)) (- (exp (* x a)) 1) (* x a) (- (exp (* x a)) 1) (* a x) (- (exp (* x a)) 1) (* (+ (* (* (* a a) x) 1/2) a) x) (+ (* (* (* a a) x) 1/2) a) (* (* a a) x) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (* (* (* (* a a) x) 1/2) x) (- (exp (* a x)) 1) (exp (* a x)) (+ (* (+ (* (* (* a x) a) 1/2) a) x) 1) (+ (* (* (* a x) a) 1/2) a) (* (* a x) a))","a","0"]],"time":24.72998046875,"type":"series"},{"count":[[38,37]],"egraph":[[0,8238,377,0.082627452],[3,4689,429,0.031280489],[2,1545,429,0.017613762],[1,514,433,0.005643897],[0,163,437,0.001638453]],"inputs":[["(* a x)","(* a (+ x (* 1/2 (* a (pow x 2)))))","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","(/ 1 (* a x))","(/ (+ (* -1/2 a) (/ 1 x)) a)","(/ (+ (* a (- (* -1 (* a (+ (* -1/4 x) (* 1/6 x)))) 1/2)) (/ 1 x)) a)","(/ (+ (* a (- (* a (- (* -1 (* a (+ (* -1/2 (* x (+ (* -1/4 x) (* 1/6 x)))) (+ (* -1/12 (pow x 2)) (* 1/24 (pow x 2)))))) (+ (* -1/4 x) (* 1/6 x)))) 1/2)) (/ 1 x)) a)","a","(* a (+ 1 (* 1/2 (* a x))))","(* (pow a 2) x)","1","(+ 1 (* a x))","(+ 1 (* a (+ x (* 1/2 (* a (pow x 2))))))","(+ 1 (* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))))","(* 1/2 (* (pow a 2) (pow x 2)))","(- (exp (* a x)) 1)","(/ 1 (- (exp (* a x)) 1))","(* (pow a 2) (+ (* 1/2 (pow x 2)) (/ x a)))","(* 1/2 (* (pow a 2) x))","(* (pow a 2) (+ (* 1/2 x) (/ 1 a)))","(exp (* a x))","(* (pow a 2) (+ (* 1/2 (pow x 2)) (+ (/ 1 (pow a 2)) (/ x a))))","(* (pow a 2) (+ (* -1 (/ (- (* -1 x) (/ 1 a)) a)) (* 1/2 (pow x 2))))","(* x (+ a (* 1/2 (* (pow a 2) x))))","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(/ (+ (* -1/2 x) (/ 1 a)) x)","(/ (+ (* x (- (* -1 (* x (+ (* -1/4 a) (* 1/6 a)))) 1/2)) (/ 1 a)) x)","(/ (+ (* x (- (* x (- (* -1 (* x (+ (* -1/2 (* a (+ (* -1/4 a) (* 1/6 a)))) (+ (* -1/12 (pow a 2)) (* 1/24 (pow a 2)))))) (+ (* -1/4 a) (* 1/6 a)))) 1/2)) (/ 1 a)) x)","(+ a (* 1/2 (* (pow a 2) x)))","(+ 1 (* x (+ a (* 1/2 (* (pow a 2) x)))))","(+ 1 (* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2)))))))","(* (pow x 2) (+ (* 1/2 (pow a 2)) (/ a x)))","(* x (+ (* 1/2 (pow a 2)) (/ a x)))","(* (pow x 2) (+ (* 1/2 (pow a 2)) (+ (/ 1 (pow x 2)) (/ a x))))","(* -1 (* x (+ (* -1 (/ a x)) (* -1/2 (pow a 2)))))","(* (pow x 2) (+ (* -1 (/ (- (* -1 a) (/ 1 x)) x)) (* 1/2 (pow a 2))))"]],"memory":[[6986128,39215168]],"method":["egg-herbie"],"outputs":[["(* a x)","(*.f64 a x)","(* a (+ x (* 1/2 (* a (pow x 2)))))","(*.f64 (*.f64 x (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64))) a)","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a x) a)","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) a) #s(literal 1/24 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64))) a (*.f64 (*.f64 x x) #s(literal 1/2 binary64))) a x) a)","(/ 1 (* a x))","(/.f64 #s(literal 1 binary64) (*.f64 a x))","(/ (+ (* -1/2 a) (/ 1 x)) a)","(/.f64 (fma.f64 #s(literal -1/2 binary64) a (/.f64 #s(literal 1 binary64) x)) a)","(/ (+ (* a (- (* -1 (* a (+ (* -1/4 x) (* 1/6 x)))) 1/2)) (/ 1 x)) a)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) a (/.f64 #s(literal 1 binary64) x)) a)","(/ (+ (* a (- (* a (- (* -1 (* a (+ (* -1/2 (* x (+ (* -1/4 x) (* 1/6 x)))) (+ (* -1/12 (pow x 2)) (* 1/24 (pow x 2)))))) (+ (* -1/4 x) (* 1/6 x)))) 1/2)) (/ 1 x)) a)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) a (/.f64 #s(literal 1 binary64) x)) a)","a","(* a (+ 1 (* 1/2 (* a x))))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) a)","(* (pow a 2) x)","(*.f64 (*.f64 a a) x)","1","#s(literal 1 binary64)","(+ 1 (* a x))","(fma.f64 a x #s(literal 1 binary64))","(+ 1 (* a (+ x (* 1/2 (* a (pow x 2))))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x) a #s(literal 1 binary64))","(+ 1 (* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2)))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a x) a #s(literal 1 binary64))","(* 1/2 (* (pow a 2) (pow x 2)))","(*.f64 (*.f64 (*.f64 (*.f64 a a) #s(literal 1/2 binary64)) x) x)","(- (exp (* a x)) 1)","(expm1.f64 (*.f64 a x))","(/ 1 (- (exp (* a x)) 1))","(/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 a x)))","(* (pow a 2) (+ (* 1/2 (pow x 2)) (/ x a)))","(*.f64 (*.f64 x (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64))) a)","(* 1/2 (* (pow a 2) x))","(*.f64 (*.f64 (*.f64 a a) #s(literal 1/2 binary64)) x)","(* (pow a 2) (+ (* 1/2 x) (/ 1 a)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) a)","(exp (* a x))","(pow.f64 (exp.f64 x) a)","(* (pow a 2) (+ (* 1/2 (pow x 2)) (+ (/ 1 (pow a 2)) (/ x a))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x) a #s(literal 1 binary64))","(* (pow a 2) (+ (* -1 (/ (- (* -1 x) (/ 1 a)) a)) (* 1/2 (pow x 2))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x) a #s(literal 1 binary64))","(* x (+ a (* 1/2 (* (pow a 2) x))))","(*.f64 (*.f64 x (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64))) a)","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) x) #s(literal 1/6 binary64) (*.f64 (*.f64 a a) #s(literal 1/2 binary64))) x a) x)","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) x) #s(literal 1/24 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))) x (*.f64 (*.f64 a a) #s(literal 1/2 binary64))) x a) x)","(/ (+ (* -1/2 x) (/ 1 a)) x)","(/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal 1 binary64) a)) x)","(/ (+ (* x (- (* -1 (* x (+ (* -1/4 a) (* 1/6 a)))) 1/2)) (/ 1 a)) x)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal 1 binary64) a)) x)","(/ (+ (* x (- (* x (- (* -1 (* x (+ (* -1/2 (* a (+ (* -1/4 a) (* 1/6 a)))) (+ (* -1/12 (pow a 2)) (* 1/24 (pow a 2)))))) (+ (* -1/4 a) (* 1/6 a)))) 1/2)) (/ 1 a)) x)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal 1 binary64) a)) x)","(+ a (* 1/2 (* (pow a 2) x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) a)","(+ 1 (* x (+ a (* 1/2 (* (pow a 2) x)))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x) a #s(literal 1 binary64))","(+ 1 (* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2)))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) x) #s(literal 1/6 binary64) (*.f64 (*.f64 a a) #s(literal 1/2 binary64))) x a) x #s(literal 1 binary64))","(* (pow x 2) (+ (* 1/2 (pow a 2)) (/ a x)))","(*.f64 (*.f64 x (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64))) a)","(* x (+ (* 1/2 (pow a 2)) (/ a x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) a)","(* (pow x 2) (+ (* 1/2 (pow a 2)) (+ (/ 1 (pow x 2)) (/ a x))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x) a #s(literal 1 binary64))","(* -1 (* x (+ (* -1 (/ a x)) (* -1/2 (pow a 2)))))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) a)","(* (pow x 2) (+ (* -1 (/ (- (* -1 a) (/ 1 x)) x)) (* 1/2 (pow a 2))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 a x) #s(literal 1 binary64)) x) a #s(literal 1 binary64))"]],"stop":[["iter limit",1],["node limit",1]],"time":266.097900390625,"type":"simplify"},{"count":[[19,892]],"egraph":[[0,8302,200,0.085646677],[2,903,200,0.02666705],[1,185,208,0.003540446],[0,56,208,0.0015318],[0,36,215,0.000320693]],"inputs":[["(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 x a))))","(/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 x a)))","(expm1.f64 (*.f64 x a))","(*.f64 x a)","#s(approx (- (exp (* x a)) 1) (*.f64 a x))","(*.f64 a x)","#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x))","(*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x)","(fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a)","(*.f64 (*.f64 a a) x)","(-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) x))) #s(literal 1 binary64))","#s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) x)))","#s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) x))","(*.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) x)","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a x) a) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a x) a) #s(literal 1/2 binary64) a) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (*.f64 (*.f64 a x) a) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))","(fma.f64 (*.f64 (*.f64 a x) a) #s(literal 1/2 binary64) a)","(*.f64 (*.f64 a x) a)"]],"memory":[[-1192512,74709824]],"outputs":[["(*.f64 (/.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a))) (neg.f64 (expm1.f64 (*.f64 a x))))","(*.f64 (/.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) (+.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64))) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (neg.f64 (expm1.f64 (*.f64 a x)))))","(*.f64 (/.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (exp.f64 x) a) (expm1.f64 (*.f64 a x)))))","(*.f64 (/.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) (-.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal 2 binary64)))) (-.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) a)))","(*.f64 (/.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 6 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal 3 binary64)))) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) (*.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (-.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a)))))","(*.f64 (/.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64)))) (expm1.f64 (*.f64 a x)))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal 1/2 binary64))) (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal 1/2 binary64)))","(*.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 1/2 binary64) a)) #s(literal 1 binary64)) (expm1.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (expm1.f64 (*.f64 a x)))","(*.f64 (pow.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal 1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal 1/2 binary64)) (*.f64 (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal 1/2 binary64)) (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal 1/2 binary64)))","(*.f64 (neg.f64 (expm1.f64 (*.f64 a x))) #s(literal -1 binary64))","(*.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)) (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))))","(*.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))))","(*.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))))","(*.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)))))","(*.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 a x)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (/.f64 (expm1.f64 (*.f64 a x)) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))))","(*.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) (*.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) (*.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 x) a)))))","(*.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (expm1.f64 (*.f64 a x))) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (expm1.f64 (*.f64 a x))))","(*.f64 (expm1.f64 (*.f64 a x)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 a x)))","(pow.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal -1 binary64)) (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal -1 binary64))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (expm1.f64 (*.f64 a x)) #s(literal 1 binary64))","(/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) #s(literal -1 binary64))) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)))","(/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)))","(/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal -1/2 binary64))) (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal -1/2 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 a x)) #s(literal 3 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 a x)) #s(literal 3 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 3 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))))))","(/.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64)))) #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)))","(/.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 x) a))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))))) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))))) (fma.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))))) (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (/.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)))) (*.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)))) (*.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (/.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (/.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (fma.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (fma.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64)))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (neg.f64 (pow.f64 (exp.f64 x) a)))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 a x)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a))) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 a x)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 a x))) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a)) (-.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a)))","(/.f64 (expm1.f64 (*.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 3 binary64))) (*.f64 (-.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 x) a))) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64)))))))","(/.f64 (expm1.f64 (*.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 3 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64)))))))","(/.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 a x)) #s(literal 3 binary64))) (*.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a)))))","(/.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 a x)) #s(literal 3 binary64))) (*.f64 (-.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 x) a))) (+.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64))))","(/.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 a x)) #s(literal 3 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) (+.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64)))) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64)))) (fma.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)))) (*.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 x) a)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))))","(/.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) (*.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))))","(/.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)))","(/.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) (*.f64 #s(literal -1 binary64) (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)))))","(/.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) (*.f64 #s(literal 1 binary64) (-.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 x) a)))))","(/.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)))))","(/.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) (-.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 x) a))))","(/.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 a x))))","(/.f64 (expm1.f64 (*.f64 a x)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 x) a))) (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (expm1.f64 (*.f64 a x))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (-.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal 2 binary64)))) (-.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) a)) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 6 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal 3 binary64)))) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) (*.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (-.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a)))) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (-.f64 #s(literal 1 binary64) (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a))) (neg.f64 (expm1.f64 (*.f64 a x))) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (+.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64))) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (neg.f64 (expm1.f64 (*.f64 a x)))) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (exp.f64 x) a) (expm1.f64 (*.f64 a x)))) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64)))) (expm1.f64 (*.f64 a x)) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) (*.f64 #s(literal 1/2 binary64) a))) (pow.f64 (exp.f64 x) (*.f64 #s(literal 1/2 binary64) a)) #s(literal -1 binary64))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) a) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (pow.f64 (exp.f64 x) a) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (neg.f64 (pow.f64 (exp.f64 x) a)) #s(literal -1 binary64) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 1/2 binary64) a)) (*.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 1/2 binary64) a)) #s(literal 1 binary64)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 1/2 binary64) a)) (pow.f64 (exp.f64 x) (*.f64 #s(literal 1/2 binary64) a)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (exp.f64 x) a)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))","(expm1.f64 (*.f64 a x))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (-.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 x) a)))) (/.f64 #s(literal 1 binary64) (-.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 x) a)))))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (neg.f64 (expm1.f64 (*.f64 a x))))","(-.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64))","(exp.f64 (*.f64 (log.f64 (expm1.f64 (*.f64 a x))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (expm1.f64 (*.f64 a x))))","(+.f64 (neg.f64 (neg.f64 (pow.f64 (exp.f64 x) a))) #s(literal -1 binary64))","(+.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (exp.f64 x) a))) #s(literal -1 binary64))","(+.f64 (*.f64 (neg.f64 (pow.f64 (exp.f64 x) a)) #s(literal -1 binary64)) #s(literal -1 binary64))","(+.f64 (/.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a))","(+.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))","(*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (-.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) #s(literal 1 binary64))) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 a x)) #s(literal 3 binary64)))) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a))))","(*.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))))) (fma.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal 1 binary64) (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))))) (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))))","(*.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 a x)) #s(literal 3 binary64)))) (+.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) (expm1.f64 (*.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 3 binary64)))) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))))))","(*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64)))) (fma.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal -1/2 binary64))) (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal -1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal -1 binary64)) (-.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 x) a))))","(*.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal -1 binary64)) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal -1/2 binary64)) (*.f64 (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal -1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal -1/2 binary64)) (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal -1/2 binary64)))","(*.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 a x))) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (pow.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 a x))) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 a x))))","(*.f64 (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal -1 binary64)))","(pow.f64 (*.f64 (expm1.f64 (*.f64 a x)) (expm1.f64 (*.f64 a x))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal -1 binary64)) #s(literal 1 binary64))","(pow.f64 (expm1.f64 (*.f64 a x)) #s(literal -1 binary64))","(/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal 1/2 binary64))) (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal 1/2 binary64)))","(/.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a))) (neg.f64 (expm1.f64 (*.f64 a x))))","(/.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) #s(literal -1 binary64)) (+.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64))) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (neg.f64 (expm1.f64 (*.f64 a x)))))","(/.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) #s(literal -1 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (exp.f64 x) a) (expm1.f64 (*.f64 a x)))))","(/.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) #s(literal -1 binary64)) (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64)))) (expm1.f64 (*.f64 a x)))","(/.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal 2 binary64)))) (-.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) a)))","(/.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal -1 binary64)) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 6 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal 3 binary64)))) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) (*.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (-.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a)))))","(/.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (expm1.f64 (*.f64 a x)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a))) (*.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) (neg.f64 (expm1.f64 (*.f64 a x)))))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64))) (*.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (neg.f64 (expm1.f64 (*.f64 a x))))))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))))) (*.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) (+.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (exp.f64 x) a) (expm1.f64 (*.f64 a x))))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal 2 binary64)))) (*.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) (-.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) a))))","(/.f64 (*.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 6 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal 3 binary64)))) (*.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) (*.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (-.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a))))))","(/.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)))","(/.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a)) (*.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) (neg.f64 (expm1.f64 (*.f64 a x)))))","(/.f64 (-.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal 2 binary64))) (*.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) (-.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) a))))","(/.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (neg.f64 (expm1.f64 (*.f64 a x))))))","(/.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64)))) (*.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) (+.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (exp.f64 x) a) (expm1.f64 (*.f64 a x))))))","(/.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 6 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal 3 binary64))) (*.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) (*.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (-.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))))","(/.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) (*.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) (expm1.f64 (*.f64 a x))))","(/.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))))","(/.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 a x))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (expm1.f64 (*.f64 a x))))","(/.f64 (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal -1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 a x)))","(neg.f64 (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 a x))))","(fma.f64 (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) #s(literal 1 binary64))) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (*.f64 (pow.f64 (exp.f64 x) a) (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(fma.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 a x)) #s(literal 3 binary64)))) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a))) (*.f64 (pow.f64 (exp.f64 x) a) (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) a) (*.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(fma.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) a)))","(fma.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal -1 binary64)) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (*.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) a)))","(fma.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (*.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a)))","(fma.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (*.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))))","(fma.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (pow.f64 (exp.f64 x) a) (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(fma.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) a) (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (pow.f64 (exp.f64 x) a) (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 a x))))","(exp.f64 (*.f64 (neg.f64 (log.f64 (expm1.f64 (*.f64 a x)))) #s(literal 1 binary64)))","(exp.f64 (neg.f64 (log.f64 (expm1.f64 (*.f64 a x)))))","(+.f64 (*.f64 (pow.f64 (exp.f64 x) a) (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) #s(literal -1 binary64))) (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(+.f64 (*.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal -1 binary64))) (*.f64 (pow.f64 (exp.f64 x) a) (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(+.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal -1 binary64))) (*.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(+.f64 (*.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal -1 binary64))) (*.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal -1 binary64))))","(+.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) a)) (*.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(+.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) a)))","(+.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal -1 binary64)) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64))) (*.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) a)))","(+.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (*.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a)))","(+.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal -1 binary64)) (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a)) (*.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))))","(+.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (pow.f64 (exp.f64 x) a) (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a))) (neg.f64 (expm1.f64 (*.f64 a x))))","(*.f64 (/.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) (+.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64))) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (neg.f64 (expm1.f64 (*.f64 a x)))))","(*.f64 (/.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (exp.f64 x) a) (expm1.f64 (*.f64 a x)))))","(*.f64 (/.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) (-.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal 2 binary64)))) (-.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) a)))","(*.f64 (/.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 6 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal 3 binary64)))) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) (*.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (-.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a)))))","(*.f64 (/.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64)))) (expm1.f64 (*.f64 a x)))","(*.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal 1/2 binary64))) (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal 1/2 binary64)))","(*.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 1/2 binary64) a)) #s(literal 1 binary64)) (expm1.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x)))","(*.f64 (/.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (expm1.f64 (*.f64 a x)))","(*.f64 (pow.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)) (pow.f64 (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal 1/2 binary64)) #s(literal 1 binary64)) (pow.f64 (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal 1/2 binary64)) (*.f64 (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal 1/2 binary64)) (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal 1/2 binary64)))","(*.f64 (neg.f64 (expm1.f64 (*.f64 a x))) #s(literal -1 binary64))","(*.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)) (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))))","(*.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))))","(*.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))))","(*.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)))))","(*.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (*.f64 (expm1.f64 (*.f64 a x)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (/.f64 (expm1.f64 (*.f64 a x)) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))))","(*.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) (*.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) (*.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 x) a)))))","(*.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (pow.f64 (neg.f64 (expm1.f64 (*.f64 a x))) #s(literal 1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (expm1.f64 (*.f64 a x))))","(*.f64 (expm1.f64 (*.f64 a x)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 a x)))","(pow.f64 (*.f64 (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal -1 binary64)) (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal -1 binary64))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (expm1.f64 (*.f64 a x)) #s(literal 1 binary64))","(/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) #s(literal -1 binary64))) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)))","(/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)))","(/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal -1/2 binary64))) (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal -1/2 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 a x)) #s(literal 3 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 a x)) #s(literal 3 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64)))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 3 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))))))","(/.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64)))) #s(literal 1 binary64)) (fma.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)))","(/.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)))) #s(literal 1 binary64)) (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 x) a))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))))) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))))) (fma.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))))) (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (/.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)))) (*.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)))) (*.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (/.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (/.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (fma.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (fma.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64)))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (neg.f64 (pow.f64 (exp.f64 x) a)))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 a x)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a))) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 a x)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 a x))) #s(literal -1 binary64))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a)) (-.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a)))","(/.f64 (expm1.f64 (*.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 3 binary64))) (*.f64 (-.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 x) a))) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64)))))))","(/.f64 (expm1.f64 (*.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 3 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64)))))))","(/.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 a x)) #s(literal 3 binary64))) (*.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a)))))","(/.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 a x)) #s(literal 3 binary64))) (*.f64 (-.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 x) a))) (+.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64))))","(/.f64 (expm1.f64 (*.f64 (*.f64 #s(literal 2 binary64) (*.f64 a x)) #s(literal 3 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) (+.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64)))) (*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64)))) (fma.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)))) (*.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 x) a)))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))))","(/.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) (*.f64 #s(literal -1 binary64) (fma.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))))","(/.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)))","(/.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) (*.f64 #s(literal -1 binary64) (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)))))","(/.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) (*.f64 #s(literal 1 binary64) (-.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 x) a)))))","(/.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)))))","(/.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) (-.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 x) a))))","(/.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (expm1.f64 (*.f64 a x))))","(/.f64 (expm1.f64 (*.f64 a x)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 x) a))) (expm1.f64 (*.f64 (*.f64 a x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (expm1.f64 (*.f64 a x))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (-.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal 2 binary64)))) (-.f64 (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) a)) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 6 binary64)) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal 3 binary64)))) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) a) #s(literal 4 binary64)) (*.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (-.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a)))) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (-.f64 #s(literal 1 binary64) (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a))) (neg.f64 (expm1.f64 (*.f64 a x))) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (+.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) #s(literal 1 binary64))) (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (neg.f64 (expm1.f64 (*.f64 a x)))) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))))) (+.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (exp.f64 x) a) (expm1.f64 (*.f64 a x)))) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (expm1.f64 (*.f64 (*.f64 a x) #s(literal 2 binary64)))) (expm1.f64 (*.f64 a x)) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) (*.f64 #s(literal 1/2 binary64) a))) (pow.f64 (exp.f64 x) (*.f64 #s(literal 1/2 binary64) a)) #s(literal -1 binary64))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) a) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (pow.f64 (exp.f64 x) a) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (neg.f64 (pow.f64 (exp.f64 x) a)) #s(literal -1 binary64) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 1/2 binary64) a)) (*.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 1/2 binary64) a)) #s(literal 1 binary64)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 1/2 binary64) a)) (pow.f64 (exp.f64 x) (*.f64 #s(literal 1/2 binary64) a)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (exp.f64 x) a)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))","(expm1.f64 (*.f64 a x))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (-.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 x) a)))) (/.f64 #s(literal 1 binary64) (-.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) #s(literal 1 binary64)) (neg.f64 (pow.f64 (exp.f64 x) a)))))","(-.f64 (/.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) #s(literal 1 binary64)) (/.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (neg.f64 (expm1.f64 (*.f64 a x))))","(-.f64 (pow.f64 (exp.f64 x) a) #s(literal 1 binary64))","(exp.f64 (*.f64 (log.f64 (expm1.f64 (*.f64 a x))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (expm1.f64 (*.f64 a x))))","(+.f64 (neg.f64 (neg.f64 (pow.f64 (exp.f64 x) a))) #s(literal -1 binary64))","(+.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (exp.f64 x) a))) #s(literal -1 binary64))","(+.f64 (*.f64 (neg.f64 (pow.f64 (exp.f64 x) a)) #s(literal -1 binary64)) #s(literal -1 binary64))","(+.f64 (/.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) (*.f64 a #s(literal 3 binary64))) (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64))) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) a) (pow.f64 (exp.f64 x) a)) #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) a))","(+.f64 (pow.f64 (exp.f64 x) a) #s(literal -1 binary64))","(*.f64 a x)","(*.f64 x a)","(fma.f64 a x #s(literal 0 binary64))","(fma.f64 x a #s(literal 0 binary64))","(+.f64 (log.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 1/2 binary64) a))) (log.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 1/2 binary64) a))))","(+.f64 #s(literal 0 binary64) (*.f64 a x))","(+.f64 (*.f64 a x) #s(literal 0 binary64))","(log.f64 (pow.f64 (exp.f64 x) a))","#s(approx (- (exp (* x a)) 1) (*.f64 a x))","(*.f64 a x)","(*.f64 x a)","(fma.f64 a x #s(literal 0 binary64))","(fma.f64 x a #s(literal 0 binary64))","(+.f64 (log.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 1/2 binary64) a))) (log.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 1/2 binary64) a))))","(+.f64 #s(literal 0 binary64) (*.f64 a x))","(+.f64 (*.f64 a x) #s(literal 0 binary64))","(log.f64 (pow.f64 (exp.f64 x) a))","#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x))","(*.f64 (/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a)) x) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) (*.f64 a (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a))))","(*.f64 (/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a)) x) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a))) (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a))","(*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))) x) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 4 binary64)) (pow.f64 (fma.f64 a a (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))))) #s(literal 2 binary64)))) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (fma.f64 a a (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64)))))))","(*.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))) x) (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 6 binary64)) (pow.f64 (fma.f64 a a (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))))) #s(literal 3 binary64)))) (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 4 binary64)) (*.f64 (fma.f64 a a (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))))) (-.f64 (fma.f64 a a (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64))))))","(*.f64 (/.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a))) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) (*.f64 a (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a))))","(*.f64 (/.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a))) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a))) (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a))","(*.f64 (/.f64 (*.f64 x (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 4 binary64)) (pow.f64 (fma.f64 a a (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))))) #s(literal 2 binary64)))) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (fma.f64 a a (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64)))))))","(*.f64 (/.f64 (*.f64 x (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 6 binary64)) (pow.f64 (fma.f64 a a (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))))) #s(literal 3 binary64)))) (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 4 binary64)) (*.f64 (fma.f64 a a (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))))) (-.f64 (fma.f64 a a (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64))))))","(*.f64 (*.f64 #s(literal 1 binary64) x) (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a)) x) (pow.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))) x) (pow.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a))) (pow.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) #s(literal -1 binary64)))","(*.f64 (*.f64 x (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a)) (*.f64 (pow.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) #s(literal -1 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))) #s(literal -1 binary64)) x))","(*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 1 binary64))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x)","(*.f64 a (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x))","(*.f64 a (+.f64 x (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x)))","(*.f64 x (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a))","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x))","(/.f64 (*.f64 (fma.f64 a a (*.f64 #s(literal -1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)))) x) (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x))))","(/.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a))) x) (neg.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)))","(/.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) x) (neg.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64))))))","(/.f64 (*.f64 x (fma.f64 a a (*.f64 #s(literal -1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64))))) (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x))))","(/.f64 (*.f64 x (neg.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a)))) (neg.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)))","(/.f64 (*.f64 x (neg.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))))) (neg.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64))))))","(/.f64 (*.f64 #s(literal 1 binary64) x) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a)))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))) (pow.f64 (*.f64 a x) #s(literal 2 binary64))) (-.f64 (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)) (*.f64 a x)))","(/.f64 (-.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) (-.f64 (*.f64 a x) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))","(/.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 a x) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)) (-.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)) (*.f64 a x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 3 binary64)) (pow.f64 (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))) (*.f64 (*.f64 a x) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a)) x)) (neg.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))) x)) (neg.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a)))) (neg.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)))","(/.f64 (neg.f64 (*.f64 x (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))))) (neg.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64))))))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a)) x)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))) x)) (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 x (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a)))) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 x (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))))) (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a)) x) #s(literal 1 binary64)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))","(/.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))) x) #s(literal 1 binary64)) (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a))) #s(literal 1 binary64)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))","(/.f64 (*.f64 (*.f64 x (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) #s(literal 1 binary64)) (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a)) x) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))","(/.f64 (*.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))) x) (fma.f64 a a (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64)))))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))) x) (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))))","(/.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a))) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))","(/.f64 (*.f64 x (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 a a (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64)))))))","(/.f64 (*.f64 x (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) (*.f64 x (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))) (*.f64 x (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))))))","(fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 a x)) a (*.f64 a x))","(fma.f64 (*.f64 x x) (*.f64 (*.f64 #s(literal 1/2 binary64) a) a) (*.f64 a x))","(fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) (*.f64 a a) (*.f64 a x))","(fma.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x) a (*.f64 a x))","(fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) (*.f64 a x) (*.f64 a x))","(fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) a) (*.f64 x x) (*.f64 a x))","(fma.f64 (*.f64 (*.f64 a x) x) (*.f64 #s(literal 1/2 binary64) a) (*.f64 a x))","(fma.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64) (*.f64 a x))","(fma.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 (*.f64 a x) x) (*.f64 a x))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 (*.f64 a a) x) (*.f64 a x))","(fma.f64 (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64) (*.f64 (*.f64 a x) #s(literal 1 binary64)))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) x (*.f64 a x))","(fma.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 a x))","(fma.f64 (*.f64 (*.f64 a a) x) (*.f64 #s(literal 1/2 binary64) x) (*.f64 a x))","(fma.f64 (*.f64 a a) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) (*.f64 a x))","(fma.f64 (*.f64 a x) (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) (*.f64 a x))","(fma.f64 (*.f64 a x) #s(literal 1 binary64) (*.f64 (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(fma.f64 a (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x) (*.f64 a x))","(fma.f64 a x (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))","(fma.f64 x (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) (*.f64 a x))","(fma.f64 x a (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))","(fma.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)) (*.f64 #s(literal 1 binary64) (*.f64 a x)))","(fma.f64 #s(literal 1 binary64) (*.f64 a x) (*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))","(+.f64 (*.f64 (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 a x) #s(literal 1 binary64)))","(+.f64 (*.f64 (*.f64 a x) #s(literal 1 binary64)) (*.f64 (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(+.f64 (*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))) (*.f64 #s(literal 1 binary64) (*.f64 a x)))","(+.f64 (*.f64 #s(literal 1 binary64) (*.f64 a x)) (*.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))","(+.f64 (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)) (*.f64 a x))","(+.f64 (*.f64 a x) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a)) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) (*.f64 a (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 4 binary64)) (pow.f64 (fma.f64 a a (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))))) #s(literal 2 binary64)))) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (fma.f64 a a (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64)))))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 6 binary64)) (pow.f64 (fma.f64 a a (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))))) #s(literal 3 binary64)))) (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 4 binary64)) (*.f64 (fma.f64 a a (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))))) (-.f64 (fma.f64 a a (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64))))))","(*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a)) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a))) (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) x #s(literal 1 binary64)) a)","(*.f64 (fma.f64 a a (*.f64 #s(literal -1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)))))","(*.f64 (pow.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a)))","(*.f64 (pow.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))) #s(literal -1 binary64)) (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))))))","(*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a)) (*.f64 (pow.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a)) (pow.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) #s(literal -1 binary64)))","(*.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) (pow.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))) #s(literal -1 binary64))))","(*.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 a a (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))))))))","(*.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))) (pow.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) (*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) (pow.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) #s(literal -1 binary64))))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a)) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (pow.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) #s(literal -1 binary64))) (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) (*.f64 a a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 6 binary64)) (pow.f64 a #s(literal 6 binary64))) (pow.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (pow.f64 (*.f64 (*.f64 x (pow.f64 a #s(literal 3 binary64))) #s(literal 1/2 binary64)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 6 binary64)) (pow.f64 a #s(literal 6 binary64))) (pow.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))) #s(literal -1 binary64))) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 9 binary64)) (pow.f64 a #s(literal 9 binary64))) (pow.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 6 binary64)) (pow.f64 a #s(literal 6 binary64))) (*.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 x (pow.f64 a #s(literal 3 binary64))) #s(literal 3 binary64)))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))) (*.f64 (/.f64 (*.f64 a a) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) (/.f64 (*.f64 a a) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)))) (+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) (/.f64 (*.f64 a a) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 a a) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) (fma.f64 (/.f64 (*.f64 a a) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) (/.f64 (*.f64 a a) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) (/.f64 (*.f64 a a) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))))))","(/.f64 (neg.f64 (fma.f64 a a (*.f64 #s(literal -1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64))))) (neg.f64 (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a)))) (neg.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))))))","(/.f64 (*.f64 (fma.f64 a a (*.f64 #s(literal -1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)))) #s(literal 1 binary64)) (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x))))","(/.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a))) #s(literal 1 binary64)) (neg.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)))","(/.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) #s(literal 1 binary64)) (neg.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a)) #s(literal 1 binary64)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))","(/.f64 (*.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 a a (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64)))))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) (*.f64 a a)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 6 binary64)) (pow.f64 a #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (pow.f64 (*.f64 (*.f64 x (pow.f64 a #s(literal 3 binary64))) #s(literal 1/2 binary64)) #s(literal 2 binary64))) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 6 binary64)) (pow.f64 a #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))) (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64))))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 9 binary64)) (pow.f64 a #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 6 binary64)) (pow.f64 a #s(literal 6 binary64))) (*.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 x (pow.f64 a #s(literal 3 binary64))) #s(literal 3 binary64)))) (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) (*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) (*.f64 a a))) (*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) (*.f64 a a))))","(/.f64 (fma.f64 a a (*.f64 #s(literal -1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)))) (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 6 binary64)) (pow.f64 a #s(literal 6 binary64))) (*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) (+.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (pow.f64 (*.f64 (*.f64 x (pow.f64 a #s(literal 3 binary64))) #s(literal 1/2 binary64)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 6 binary64)) (pow.f64 a #s(literal 6 binary64))) (*.f64 (fma.f64 a a (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64)))))) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 6 binary64)) (pow.f64 a #s(literal 6 binary64))) (*.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 9 binary64)) (pow.f64 a #s(literal 9 binary64))) (*.f64 (fma.f64 a a (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64)))))) (-.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 6 binary64)) (pow.f64 a #s(literal 6 binary64))) (*.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 x (pow.f64 a #s(literal 3 binary64))) #s(literal 3 binary64))))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 9 binary64)) (pow.f64 a #s(literal 9 binary64))) (*.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))) (-.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 6 binary64)) (pow.f64 a #s(literal 6 binary64))) (*.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 x (pow.f64 a #s(literal 3 binary64))) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a))) (neg.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (neg.f64 (fma.f64 a a (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (neg.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))","(/.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))) (fma.f64 a a (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64)))))))","(/.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))) (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x))) (fma.f64 a a (*.f64 #s(literal -1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 a a (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64)))))) (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a)))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a))) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)))","(neg.f64 (/.f64 (neg.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64))))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a)) (neg.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))))","(neg.f64 (/.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))) (neg.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))))))","(fma.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) (*.f64 a (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a))) (neg.f64 (/.f64 (*.f64 a a) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))))","(fma.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a))) (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) (neg.f64 (/.f64 (*.f64 a a) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))))","(fma.f64 (pow.f64 a #s(literal 1/2 binary64)) (pow.f64 a #s(literal 1/2 binary64)) (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)))","(fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a a)","(fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) a) x a)","(fma.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 a x) a)","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 a a) a)","(fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) #s(literal -1 binary64)) (neg.f64 (/.f64 (*.f64 a a) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))))","(fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a)","(fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a)","(fma.f64 (*.f64 a a) (*.f64 #s(literal 1/2 binary64) x) a)","(fma.f64 (*.f64 a x) (*.f64 #s(literal 1/2 binary64) a) a)","(fma.f64 a (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a)","(fma.f64 x (*.f64 (*.f64 #s(literal 1/2 binary64) a) a) a)","(-.f64 (/.f64 (*.f64 a a) (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)))) (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)))))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) (/.f64 (*.f64 a a) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)))","(+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) (neg.f64 (/.f64 (*.f64 a a) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))))","(+.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)","(+.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)))","(*.f64 (*.f64 a a) x)","(*.f64 (*.f64 a x) a)","(*.f64 a (*.f64 a x))","(*.f64 x (*.f64 a a))","(*.f64 (/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))))","(*.f64 (/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))))))","(*.f64 (/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 1 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 4 binary64)) (pow.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)) #s(literal 2 binary64)))) (-.f64 (*.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 1 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 6 binary64)) (pow.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)) #s(literal 3 binary64)))) (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 4 binary64)) (*.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)) (-.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64))))))","(*.f64 (/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(literal 1 binary64))) (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)) (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64))) (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)))))","(*.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64)))))","(*.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)) (*.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64))))))","(*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64))) (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64))) (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 9 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64))) (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)))) (*.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64))) (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64)))) (*.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64))) (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64))) (fma.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64))) (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64))) (fma.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) (*.f64 #s(literal -1 binary64) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)))) (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)))) (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64))) (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)) (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 9 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)))) (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64))))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 9 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64)) (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64))))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)) (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)))) (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64)) (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 1 binary64)))))","(/.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)))) (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 1 binary64))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(literal 1 binary64))) (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64))))","(neg.f64 (/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)))))","(neg.f64 (/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)) #s(literal 1 binary64)) (neg.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64)))))","(fma.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)) (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 4 binary64)) (pow.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)) #s(literal 2 binary64)))) (-.f64 (*.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 1 binary64))) #s(literal 1 binary64)) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)) (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 6 binary64)) (pow.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)) #s(literal 3 binary64)))) (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 4 binary64)) (*.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)) (-.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64))))) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) (neg.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))))) (neg.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 1 binary64)))) (neg.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) (-.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(literal 1 binary64))) (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64))) (/.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)) (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 1 binary64))","(+.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64))) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 2 binary64)) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))) #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 #s(literal -1 binary64) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))))","(+.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64))","(*.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))))","#s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))))","#s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))","(*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 a x)) a)","(*.f64 (*.f64 x x) (*.f64 (*.f64 #s(literal 1/2 binary64) a) a))","(*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) (*.f64 a a))","(*.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x) a)","(*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) (*.f64 a x))","(*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) a) (*.f64 x x))","(*.f64 (*.f64 (*.f64 a x) x) (*.f64 #s(literal 1/2 binary64) a))","(*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(*.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 (*.f64 a x) x))","(*.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 (*.f64 a a) x))","(*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) x)","(*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)))","(*.f64 (*.f64 (*.f64 a a) x) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 (*.f64 a a) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","(*.f64 (*.f64 a x) (*.f64 (*.f64 #s(literal 1/2 binary64) a) x))","(*.f64 a (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x))","(*.f64 x (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)))","(*.f64 (/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))))))","(*.f64 (/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 4 binary64)) (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 2 binary64)))) (-.f64 (*.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 6 binary64)) (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 3 binary64)))) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 4 binary64)) (*.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)) (-.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(*.f64 (/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)))","(*.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(*.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64)))))","(*.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))))))","(*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 9 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64))) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)))) (*.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64))) (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64)))) (*.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))) (fma.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64))) (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64))) (fma.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 #s(literal -1 binary64) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)))) (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 9 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)))) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64))))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 9 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64)) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64))))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)))) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64)) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)))))","(/.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)))) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64))))","(neg.f64 (/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(neg.f64 (/.f64 (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (neg.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64)))))","(fma.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 4 binary64)) (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 2 binary64)))) (-.f64 (*.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64))) #s(literal 1 binary64)) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 6 binary64)) (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 3 binary64)))) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 4 binary64)) (*.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)) (-.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64))))) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) (neg.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))))) (neg.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)))) (neg.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))) (/.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","(+.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64))) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 #s(literal -1 binary64) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))))","(+.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))","(*.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) #s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))))","#s(approx (exp (* a x)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x))))","(*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 1 binary64)))","(*.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 4 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x))))","(*.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x)) #s(literal 3 binary64)))) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 4 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x)) (-.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64))))))","(*.f64 (/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)))) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x))))","(*.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x)) #s(literal -1 binary64)) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)))))","(*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x)))))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64))))))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) #s(literal -1 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x)) #s(literal -1 binary64))) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 9 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x)) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x)))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)))) (*.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64))) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x)))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) (+.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)))) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 9 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 9 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)))) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64))))","(neg.f64 (/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)))))","(neg.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x)))))","(fma.f64 (/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a)) x) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) (*.f64 a (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a))) #s(literal 1 binary64))","(fma.f64 (/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a)) x) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a))) (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) #s(literal 1 binary64))","(fma.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))) x) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 4 binary64)) (pow.f64 (fma.f64 a a (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))))) #s(literal 2 binary64)))) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (fma.f64 a a (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64)))))) #s(literal 1 binary64))","(fma.f64 (/.f64 (*.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))) x) (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 6 binary64)) (pow.f64 (fma.f64 a a (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))))) #s(literal 3 binary64)))) (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 4 binary64)) (*.f64 (fma.f64 a a (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))))) (-.f64 (fma.f64 a a (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64))))) #s(literal 1 binary64))","(fma.f64 (/.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a))) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) (*.f64 a (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a))) #s(literal 1 binary64))","(fma.f64 (/.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a))) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a))) (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) #s(literal 1 binary64))","(fma.f64 (/.f64 (*.f64 x (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 4 binary64)) (pow.f64 (fma.f64 a a (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))))) #s(literal 2 binary64)))) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (fma.f64 a a (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64)))))) #s(literal 1 binary64))","(fma.f64 (/.f64 (*.f64 x (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 6 binary64)) (pow.f64 (fma.f64 a a (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))))) #s(literal 3 binary64)))) (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 4 binary64)) (*.f64 (fma.f64 a a (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))))) (-.f64 (fma.f64 a a (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64))))) #s(literal 1 binary64))","(fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 1 binary64)) (neg.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64)) (neg.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 a x)) a (fma.f64 a x #s(literal 1 binary64)))","(fma.f64 (*.f64 #s(literal 1 binary64) x) (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) #s(literal 1 binary64))","(fma.f64 (*.f64 x x) (*.f64 (*.f64 #s(literal 1/2 binary64) a) a) (fma.f64 a x #s(literal 1 binary64)))","(fma.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a)) x) (pow.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))) x) (pow.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a))) (pow.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 x (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) (*.f64 a a) (fma.f64 a x #s(literal 1 binary64)))","(fma.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x) a (fma.f64 a x #s(literal 1 binary64)))","(fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) (*.f64 a x) (fma.f64 a x #s(literal 1 binary64)))","(fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) a) (*.f64 x x) (fma.f64 a x #s(literal 1 binary64)))","(fma.f64 (*.f64 (*.f64 a x) x) (*.f64 #s(literal 1/2 binary64) a) (fma.f64 a x #s(literal 1 binary64)))","(fma.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64) (fma.f64 a x #s(literal 1 binary64)))","(fma.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 (*.f64 a x) x) (fma.f64 a x #s(literal 1 binary64)))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 (*.f64 a a) x) (fma.f64 a x #s(literal 1 binary64)))","(fma.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a)) (*.f64 (pow.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) #s(literal -1 binary64)) x) #s(literal 1 binary64))","(fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))) #s(literal -1 binary64)) x) #s(literal 1 binary64))","(fma.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) x (fma.f64 a x #s(literal 1 binary64)))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (fma.f64 a x #s(literal 1 binary64)))","(fma.f64 (*.f64 (*.f64 a a) x) (*.f64 #s(literal 1/2 binary64) x) (fma.f64 a x #s(literal 1 binary64)))","(fma.f64 (*.f64 a a) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) (fma.f64 a x #s(literal 1 binary64)))","(fma.f64 (*.f64 a x) (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) (fma.f64 a x #s(literal 1 binary64)))","(fma.f64 a (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x) #s(literal 1 binary64))","(fma.f64 a (+.f64 x (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x)) #s(literal 1 binary64))","(fma.f64 a (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x) (fma.f64 a x #s(literal 1 binary64)))","(fma.f64 a x (fma.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal 1 binary64)))","(fma.f64 x (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) (fma.f64 a x #s(literal 1 binary64)))","(fma.f64 x (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) #s(literal 1 binary64))","(fma.f64 x a (fma.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (+.f64 #s(literal 1 binary64) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64))) (*.f64 a x))","(+.f64 (+.f64 #s(literal 1 binary64) (*.f64 a x)) (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)))","(+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64))) (neg.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64)) (fma.f64 a x #s(literal 1 binary64)))","(+.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x) #s(literal 1 binary64))","(+.f64 (*.f64 a x) (fma.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal 1/2 binary64) #s(literal 1 binary64)))","(+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) x))","(*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a)) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) (*.f64 a (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 4 binary64)) (pow.f64 (fma.f64 a a (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))))) #s(literal 2 binary64)))) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (fma.f64 a a (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64)))))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 6 binary64)) (pow.f64 (fma.f64 a a (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))))) #s(literal 3 binary64)))) (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 4 binary64)) (*.f64 (fma.f64 a a (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))))) (-.f64 (fma.f64 a a (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64))))))","(*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a)) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a))) (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) x #s(literal 1 binary64)) a)","(*.f64 (fma.f64 a a (*.f64 #s(literal -1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)))))","(*.f64 (pow.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) #s(literal -1 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a)))","(*.f64 (pow.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))) #s(literal -1 binary64)) (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))))))","(*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a)) (*.f64 (pow.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a)) (pow.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) #s(literal -1 binary64)))","(*.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))) (*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) (pow.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))) #s(literal -1 binary64))))","(*.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 a a (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))))))))","(*.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))) (pow.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) (*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) (pow.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) #s(literal -1 binary64))))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a)) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (pow.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) #s(literal -1 binary64))) (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) (*.f64 a a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 6 binary64)) (pow.f64 a #s(literal 6 binary64))) (pow.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (pow.f64 (*.f64 (*.f64 x (pow.f64 a #s(literal 3 binary64))) #s(literal 1/2 binary64)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 6 binary64)) (pow.f64 a #s(literal 6 binary64))) (pow.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))) #s(literal -1 binary64))) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 9 binary64)) (pow.f64 a #s(literal 9 binary64))) (pow.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))) #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 6 binary64)) (pow.f64 a #s(literal 6 binary64))) (*.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 x (pow.f64 a #s(literal 3 binary64))) #s(literal 3 binary64)))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))) (*.f64 (/.f64 (*.f64 a a) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) (/.f64 (*.f64 a a) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)))) (+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) (/.f64 (*.f64 a a) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 a a) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) (fma.f64 (/.f64 (*.f64 a a) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) (/.f64 (*.f64 a a) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) (/.f64 (*.f64 a a) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))))))","(/.f64 (neg.f64 (fma.f64 a a (*.f64 #s(literal -1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64))))) (neg.f64 (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a)))) (neg.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))))))","(/.f64 (*.f64 (fma.f64 a a (*.f64 #s(literal -1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)))) #s(literal 1 binary64)) (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x))))","(/.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a))) #s(literal 1 binary64)) (neg.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)))","(/.f64 (*.f64 (neg.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) #s(literal 1 binary64)) (neg.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a)) #s(literal 1 binary64)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))","(/.f64 (*.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 a a (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64)))))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) (*.f64 a a)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 6 binary64)) (pow.f64 a #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (pow.f64 (*.f64 (*.f64 x (pow.f64 a #s(literal 3 binary64))) #s(literal 1/2 binary64)) #s(literal 2 binary64))) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 6 binary64)) (pow.f64 a #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))) (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64))))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 9 binary64)) (pow.f64 a #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 6 binary64)) (pow.f64 a #s(literal 6 binary64))) (*.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 x (pow.f64 a #s(literal 3 binary64))) #s(literal 3 binary64)))) (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) (*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) (*.f64 a a))) (*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) (*.f64 a a))))","(/.f64 (fma.f64 a a (*.f64 #s(literal -1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)))) (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 6 binary64)) (pow.f64 a #s(literal 6 binary64))) (*.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) (+.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 4 binary64)) (pow.f64 a #s(literal 4 binary64))) (pow.f64 (*.f64 (*.f64 x (pow.f64 a #s(literal 3 binary64))) #s(literal 1/2 binary64)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 6 binary64)) (pow.f64 a #s(literal 6 binary64))) (*.f64 (fma.f64 a a (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64)))))) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 6 binary64)) (pow.f64 a #s(literal 6 binary64))) (*.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 9 binary64)) (pow.f64 a #s(literal 9 binary64))) (*.f64 (fma.f64 a a (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64)))))) (-.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 6 binary64)) (pow.f64 a #s(literal 6 binary64))) (*.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 x (pow.f64 a #s(literal 3 binary64))) #s(literal 3 binary64))))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 9 binary64)) (pow.f64 a #s(literal 9 binary64))) (*.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))) (-.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 6 binary64)) (pow.f64 a #s(literal 6 binary64))) (*.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 x (pow.f64 a #s(literal 3 binary64))) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a))) (neg.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (neg.f64 (fma.f64 a a (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (neg.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))","(/.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))) (fma.f64 a a (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64)))))))","(/.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))) (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x))) (fma.f64 a a (*.f64 #s(literal -1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 a a (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) (*.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64)))))) (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a)))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a))) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)))","(neg.f64 (/.f64 (neg.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64))))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a)) (neg.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))))","(neg.f64 (/.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64))) (neg.f64 (fma.f64 a a (fma.f64 #s(literal -1/2 binary64) (*.f64 x (pow.f64 a #s(literal 3 binary64))) (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)))))))","(fma.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 3 binary64)) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (*.f64 a a) x) #s(literal 2 binary64)) (*.f64 a (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a))) (neg.f64 (/.f64 (*.f64 a a) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))))","(fma.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (*.f64 a a))) (fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a) (neg.f64 (/.f64 (*.f64 a a) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))))","(fma.f64 (pow.f64 a #s(literal 1/2 binary64)) (pow.f64 a #s(literal 1/2 binary64)) (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)))","(fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a a)","(fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) a) x a)","(fma.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 a x) a)","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 a a) a)","(fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a) #s(literal -1 binary64)) (neg.f64 (/.f64 (*.f64 a a) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))))","(fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x) a)","(fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a)","(fma.f64 (*.f64 a a) (*.f64 #s(literal 1/2 binary64) x) a)","(fma.f64 (*.f64 a x) (*.f64 #s(literal 1/2 binary64) a) a)","(fma.f64 a (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a)","(fma.f64 x (*.f64 (*.f64 #s(literal 1/2 binary64) a) a) a)","(-.f64 (/.f64 (*.f64 a a) (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)))) (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)))))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) (/.f64 (*.f64 a a) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)))","(+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)) (neg.f64 (/.f64 (*.f64 a a) (-.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a))))","(+.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)) a)","(+.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 a a) x)))","(*.f64 (*.f64 a a) x)","(*.f64 (*.f64 a x) a)","(*.f64 a (*.f64 a x))","(*.f64 x (*.f64 a a))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":298.93603515625,"type":"rewrite"},{"compiler":[[32101,2243]],"memory":[[8520128,68227424]],"time":88.9150390625,"type":"eval"},{"alts":[["(pow.f64 (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal 1/2 binary64)) #s(literal 2 binary64))","fresh",40.60775375976844,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 x a))))","done",0.5416603781410524,"binary64"],["(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal 1 binary64) a)) x)))","next",20.706009276772882,"binary64"],["(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal 1 binary64) a)) x)))","next",17.990075870670548,"binary64"],["(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 #s(literal 1 binary64) (*.f64 a x))))","fresh",20.95859967360768,"binary64"],["(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))) #s(literal 1 binary64))","done",49.19468621724214,"binary64"],["(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a x) a) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","done",49.894035542386035,"binary64"],["(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","done",49.08004335184552,"binary64"],["(-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) x))) #s(literal 1 binary64))","done",61.25065934079225,"binary64"],["(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","done",50.06914282029762,"binary64"],["(expm1.f64 (*.f64 x a))","done",0.01171875,"binary64"],["#s(approx (- (exp (* x a)) 1) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) (*.f64 a x) (*.f64 a x)))","next",21.09555066455171,"binary64"],["#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) x #s(literal 1 binary64)) a) x))","fresh",21.053501133546145,"binary64"],["#s(approx (- (exp (* x a)) 1) (*.f64 a (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x)))","next",21.05779511473008,"binary64"],["#s(approx (- (exp (* x a)) 1) (*.f64 a x))","done",20.43322806500351,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a)))","fresh",20.95639425523387,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))","next",20.3327796649213,"binary64"]],"compiler":[[8,8],[8,7],[24,17],[19,14],[16,12],[23,15],[18,12],[11,8],[30,21],[8,7],[4,4],[19,12],[17,13],[17,12],[10,8],[27,18],[22,16],[8,8],[24,17],[19,14],[16,12],[19,12],[17,13],[17,12],[27,18],[22,16]],"count":[[717,17]],"kept":[{"done":[4,4],"fresh":[2,2],"new":[706,7],"picked":[5,4]}],"memory":[[-3504224,32432784]],"min-error":[[0.0,"binary64"]],"time":20.8271484375,"type":"prune"},{"egraph":[[0,2715,290,0.007729062],[14,2715,304,0.009050059],[13,2551,304,0.009402914],[12,2551,304,0.003559218],[11,2542,304,0.003688158],[10,2502,304,0.004095389],[9,2244,304,0.010099523],[8,2212,304,0.005788944],[7,2012,304,0.006854327],[6,1596,304,0.005848764],[5,1116,304,0.004085076],[4,755,304,0.003664925],[3,399,304,0.002872368],[2,219,304,0.00153194],[1,122,304,0.000855054],[0,66,304,0.000644922],[0,39,308,0.000400199]],"inputs":[["(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal 1 binary64) a)) x)))","#s(literal 1 binary64)","#s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal 1 binary64) a)) x))","(/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal 1 binary64) a)) x)","(fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal 1 binary64) a))","#s(literal -1/2 binary64)","x","(/.f64 #s(literal 1 binary64) a)","a","#s(approx (- (exp (* x a)) 1) (*.f64 a (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x)))","(*.f64 a (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x))","a","(fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x)","(*.f64 (*.f64 #s(literal 1/2 binary64) a) x)","(*.f64 #s(literal 1/2 binary64) a)","#s(literal 1/2 binary64)","x","#s(approx (- (exp (* x a)) 1) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) (*.f64 a x) (*.f64 a x)))","(fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) (*.f64 a x) (*.f64 a x))","(*.f64 (*.f64 #s(literal 1/2 binary64) a) x)","(*.f64 #s(literal 1/2 binary64) a)","#s(literal 1/2 binary64)","a","x","(*.f64 a x)","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))","(*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a))","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))","(*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a)","(fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))","(*.f64 #s(literal 1/6 binary64) x)","#s(literal 1/6 binary64)","x","a","#s(literal 1/2 binary64)","#s(literal 1 binary64)","(*.f64 x a)","(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal 1 binary64) a)) x)))","#s(literal 1 binary64)","#s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal 1 binary64) a)) x))","(/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal 1 binary64) a)) x)","(fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal 1 binary64) a))","(fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64))","#s(literal 1/12 binary64)","(*.f64 a x)","a","x","#s(literal -1/2 binary64)","(/.f64 #s(literal 1 binary64) a)"]],"locations":[["(fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal 1 binary64) a))","cost-diff",0],["(/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal 1 binary64) a)) x)","cost-diff",0],["#s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal 1 binary64) a)) x))","cost-diff",0],["(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal 1 binary64) a)) x)))","cost-diff",0],["(*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a)","cost-diff",0],["(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))","cost-diff",0],["(*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a))","cost-diff",0],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))","cost-diff",0],["(*.f64 #s(literal 1/2 binary64) a)","cost-diff",0],["(*.f64 (*.f64 #s(literal 1/2 binary64) a) x)","cost-diff",0],["#s(approx (- (exp (* x a)) 1) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) (*.f64 a x) (*.f64 a x)))","cost-diff",0],["(fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) (*.f64 a x) (*.f64 a x))","cost-diff",2],["(*.f64 (*.f64 #s(literal 1/2 binary64) a) x)","cost-diff",0],["(fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x)","cost-diff",0],["(*.f64 a (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x))","cost-diff",0],["#s(approx (- (exp (* x a)) 1) (*.f64 a (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x)))","cost-diff",0],["(fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal 1 binary64) a))","cost-diff",0],["(/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal 1 binary64) a)) x)","cost-diff",0],["#s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal 1 binary64) a)) x))","cost-diff",0],["(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal 1 binary64) a)) x)))","cost-diff",0]],"memory":[[-2324528,5718928]],"method":["egg-herbie"],"outputs":[["(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal 1 binary64) a)) x)))","#s(literal 1 binary64)","#s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal 1 binary64) a)) x))","(/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal 1 binary64) a)) x)","(fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal 1 binary64) a))","#s(literal -1/2 binary64)","x","(/.f64 #s(literal 1 binary64) a)","a","#s(approx (- (exp (* x a)) 1) (*.f64 a (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x)))","#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x) a))","(*.f64 a (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x))","(*.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x) a)","a","(fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x)","(*.f64 (*.f64 #s(literal 1/2 binary64) a) x)","(*.f64 #s(literal 1/2 binary64) a)","#s(literal 1/2 binary64)","x","#s(approx (- (exp (* x a)) 1) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) (*.f64 a x) (*.f64 a x)))","#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x) a))","(fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) (*.f64 a x) (*.f64 a x))","(*.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x) a)","(*.f64 (*.f64 #s(literal 1/2 binary64) a) x)","(*.f64 #s(literal 1/2 binary64) a)","#s(literal 1/2 binary64)","a","x","(*.f64 a x)","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))","#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) x) a))","(*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a))","(*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) x) a)","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))","(*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a)","(fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))","(*.f64 #s(literal 1/6 binary64) x)","#s(literal 1/6 binary64)","x","a","#s(literal 1/2 binary64)","#s(literal 1 binary64)","(*.f64 x a)","(*.f64 a x)","(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal 1 binary64) a)) x)))","#s(literal 1 binary64)","#s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal 1 binary64) a)) x))","(/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal 1 binary64) a)) x)","(fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal 1 binary64) a))","(fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64))","#s(literal 1/12 binary64)","(*.f64 a x)","a","x","#s(literal -1/2 binary64)","(/.f64 #s(literal 1 binary64) a)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":104.074951171875,"type":"simplify"},{"compiler":[[240,38]],"locations":[["(fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64))","accuracy",0.09375],["(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal 1 binary64) a)) x)))","accuracy",0.5878716086041683],["(/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal 1 binary64) a)) x)","accuracy",4.8101654310719315],["#s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal 1 binary64) a)) x))","accuracy",20.026230808625012],["(*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a))","accuracy",0.0546875],["(*.f64 #s(literal 1/6 binary64) x)","accuracy",0.36328125],["(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))","accuracy",0.9769943978617663],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))","accuracy",20.32273164663939],["(*.f64 a x)","accuracy",0.0],["(*.f64 #s(literal 1/2 binary64) a)","accuracy",0.0],["(fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) (*.f64 a x) (*.f64 a x))","accuracy",5.658535009768443],["#s(approx (- (exp (* x a)) 1) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) (*.f64 a x) (*.f64 a x)))","accuracy",21.046146920636087],["(*.f64 #s(literal 1/2 binary64) a)","accuracy",0.0],["(fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x)","accuracy",0.0546875],["(*.f64 a (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x))","accuracy",1.461823336913925],["#s(approx (- (exp (* x a)) 1) (*.f64 a (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x)))","accuracy",21.046146920636087],["(fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal 1 binary64) a))","accuracy",0.01171875],["(/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal 1 binary64) a)) x)","accuracy",0.125],["(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal 1 binary64) a)) x)))","accuracy",0.5878716086041683],["#s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal 1 binary64) a)) x))","accuracy",17.36826711727]],"memory":[[876160,37425488]],"mixsample":[[9.92333984375,"ival-div",0],[0.257080078125,"ival-true",0],[11.48193359375,"ival-add",0],[24.98388671875,"ival-mult",0],[7.170166015625,"const",0],[0.477294921875,"exact",0],[3.88330078125,"ival-expm1",0],[0.153076171875,"ival-assert",0]],"outcomes":[[85.843017578125,0,"valid",256]],"time":114.10693359375,"type":"localize"},{"count":[[22,85]],"inputs":[["(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal 1 binary64) a)) x)))","#s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal 1 binary64) a)) x))","(/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal 1 binary64) a)) x)","(fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal 1 binary64) a))","#s(approx (- (exp (* x a)) 1) (*.f64 a (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x)))","(*.f64 a (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x))","(fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x)","(*.f64 (*.f64 #s(literal 1/2 binary64) a) x)","(fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) (*.f64 a x) (*.f64 a x))","#s(approx (- (exp (* x a)) 1) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) (*.f64 a x) (*.f64 a x)))","(*.f64 #s(literal 1/2 binary64) a)","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))","(*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a))","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))","(*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a)","(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal 1 binary64) a)) x)))","#s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal 1 binary64) a)) x))","(/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal 1 binary64) a)) x)","(fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal 1 binary64) a))","(*.f64 a x)","(*.f64 #s(literal 1/6 binary64) x)","(fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64))"]],"memory":[[-6179984,11101968]],"outputs":[["(* a x)","(* a (+ x (* 1/2 (* a (pow x 2)))))","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","(/ 1 (* a x))","(/ (+ (* -1/2 a) (/ 1 x)) a)","(/ (+ (* a (- (* -1 (* a (+ (* -1/4 x) (* 1/6 x)))) 1/2)) (/ 1 x)) a)","(/ (+ (* a (- (* a (- (* -1 (* a (+ (* -1/2 (* x (+ (* -1/4 x) (* 1/6 x)))) (+ (* -1/12 (pow x 2)) (* 1/24 (pow x 2)))))) (+ (* -1/4 x) (* 1/6 x)))) 1/2)) (/ 1 x)) a)","(/ 1 a)","(/ (+ 1 (* -1/2 (* a x))) a)","x","(+ x (* 1/2 (* a (pow x 2))))","(* 1/2 (* a x))","(* 1/2 a)","1","(+ 1 (* 1/2 (* a x)))","(+ 1 (* a (+ (* 1/6 (* a (pow x 2))) (* 1/2 x))))","(* a (+ 1/2 (* 1/6 (* a x))))","(/ (+ (* a (- (* 1/12 (* a x)) 1/2)) (/ 1 x)) a)","(/ (+ 1 (* a (+ (* -1/2 x) (* 1/12 (* a (pow x 2)))))) a)","-1/2","(- (* 1/12 (* a x)) 1/2)","(- (exp (* a x)) 1)","(/ 1 (- (exp (* a x)) 1))","(- (/ 1 (* a x)) 1/2)","(* -1/2 x)","(+ (* -1/2 x) (/ 1 a))","(* 1/2 (* (pow a 2) (pow x 2)))","(* (pow a 2) (+ (* 1/2 (pow x 2)) (/ x a)))","(* 1/2 (* a (pow x 2)))","(* a (+ (* 1/2 (pow x 2)) (/ x a)))","(* 1/6 (* (pow a 3) (pow x 3)))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (+ (* 1/2 (/ (pow x 2) a)) (/ x (pow a 2)))))","(* 1/6 (* (pow a 2) (pow x 2)))","(* (pow a 2) (+ (* 1/6 (pow x 2)) (* 1/2 (/ x a))))","(* (pow a 2) (+ (* 1/6 (pow x 2)) (+ (* 1/2 (/ x a)) (/ 1 (pow a 2)))))","(* 1/6 (* (pow a 2) x))","(* (pow a 2) (+ (* 1/6 x) (* 1/2 (/ 1 a))))","(* 1/12 (* a x))","(* a (- (* 1/12 x) (* 1/2 (/ 1 a))))","(* a (- (+ (* 1/12 x) (/ 1 (* (pow a 2) x))) (* 1/2 (/ 1 a))))","(* 1/12 (* a (pow x 2)))","(* a (+ (* -1/2 (/ x a)) (* 1/12 (pow x 2))))","(* a (+ (* -1/2 (/ x a)) (+ (* 1/12 (pow x 2)) (/ 1 (pow a 2)))))","(* -1 (* a (+ (* -1 (/ x a)) (* -1/2 (pow x 2)))))","(* -1 (* (pow a 3) (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/2 (pow x 2)) (/ x a)) a)) (* -1/6 (pow x 3)))))","(* (pow a 2) (+ (* -1 (/ (- (* -1/2 x) (/ 1 a)) a)) (* 1/6 (pow x 2))))","(* -1 (* a (+ (* -1/12 x) (* 1/2 (/ 1 a)))))","(* -1 (* a (+ (* -1 (/ (- (/ 1 (* a x)) 1/2) a)) (* -1/12 x))))","(* -1 (* a (+ (* -1/12 (pow x 2)) (* 1/2 (/ x a)))))","(* -1 (* a (+ (* -1 (/ (+ (* -1/2 x) (/ 1 a)) a)) (* -1/12 (pow x 2)))))","(* x (+ a (* 1/2 (* (pow a 2) x))))","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(/ (+ (* -1/2 x) (/ 1 a)) x)","(/ (+ (* x (- (* -1 (* x (+ (* -1/4 a) (* 1/6 a)))) 1/2)) (/ 1 a)) x)","(/ (+ (* x (- (* x (- (* -1 (* x (+ (* -1/2 (* a (+ (* -1/4 a) (* 1/6 a)))) (+ (* -1/12 (pow a 2)) (* 1/24 (pow a 2)))))) (+ (* -1/4 a) (* 1/6 a)))) 1/2)) (/ 1 a)) x)","(* x (+ 1 (* 1/2 (* a x))))","(+ 1 (* x (+ (* 1/6 (* (pow a 2) x)) (* 1/2 a))))","(+ (* 1/6 (* (pow a 2) x)) (* 1/2 a))","(/ (+ (* x (- (* 1/12 (* a x)) 1/2)) (/ 1 a)) x)","(+ (* x (- (* 1/12 (* a x)) 1/2)) (/ 1 a))","(* 1/6 x)","(* x (- (/ 1 (* a x)) 1/2))","(* (pow x 2) (+ (* 1/2 (pow a 2)) (/ a x)))","(* (pow x 2) (+ (* 1/2 a) (/ 1 x)))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (* 1/2 (/ (pow a 2) x))))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (+ (* 1/2 (/ (pow a 2) x)) (/ a (pow x 2)))))","(* (pow x 2) (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))))","(* (pow x 2) (+ (* 1/6 (pow a 2)) (+ (* 1/2 (/ a x)) (/ 1 (pow x 2)))))","(* x (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))))","(* x (- (* 1/12 a) (* 1/2 (/ 1 x))))","(* x (- (+ (* 1/12 a) (/ 1 (* a (pow x 2)))) (* 1/2 (/ 1 x))))","(* (pow x 2) (- (* 1/12 a) (* 1/2 (/ 1 x))))","(* (pow x 2) (- (+ (* 1/12 a) (/ 1 (* a (pow x 2)))) (* 1/2 (/ 1 x))))","(* -1 (* x (- 1/2 (/ 1 (* a x)))))","(* -1 (* (pow x 3) (+ (* -1/2 (/ (pow a 2) x)) (* -1/6 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/2 (pow a 2)) (/ a x)) x)) (* -1/6 (pow a 3)))))","(* (pow x 2) (+ (* -1 (/ (- (* -1/2 a) (/ 1 x)) x)) (* 1/6 (pow a 2))))","(* -1 (* x (+ (* -1/2 (/ a x)) (* -1/6 (pow a 2)))))","(* -1 (* x (+ (* -1/12 a) (* 1/2 (/ 1 x)))))","(* -1 (* x (+ (* -1 (/ (- (/ 1 (* a x)) 1/2) x)) (* -1/12 a))))","(* (pow x 2) (+ (* -1 (/ (- 1/2 (/ 1 (* a x))) x)) (* 1/12 a)))"]],"series":[[5.89892578125,"((/ 1 (/ 1 (- (exp (* x a)) 1))) (/ 1 (- (exp (* x a)) 1)) (/ (+ (* -1/2 x) (/ 1 a)) x) (+ (* -1/2 x) (/ 1 a)) (- (exp (* x a)) 1) (* a (+ (* (* (* 1/2 a) x) x) x)) (+ (* (* (* 1/2 a) x) x) x) (* (* 1/2 a) x) (+ (* (* (* 1/2 a) x) (* a x)) (* a x)) (- (exp (* x a)) 1) (* 1/2 a) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* x a)) (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* (+ (* (* 1/6 x) a) 1/2) a) (/ 1 (/ 1 (- (exp (* x a)) 1))) (/ 1 (- (exp (* x a)) 1)) (/ (+ (* (+ (* 1/12 (* a x)) -1/2) x) (/ 1 a)) x) (+ (* (+ (* 1/12 (* a x)) -1/2) x) (/ 1 a)) (* a x) (* 1/6 x) (+ (* 1/12 (* a x)) -1/2))","x","-inf"],[3.888916015625,"((/ 1 (/ 1 (- (exp (* x a)) 1))) (/ 1 (- (exp (* x a)) 1)) (/ (+ (* -1/2 x) (/ 1 a)) x) (+ (* -1/2 x) (/ 1 a)) (- (exp (* x a)) 1) (* a (+ (* (* (* 1/2 a) x) x) x)) (+ (* (* (* 1/2 a) x) x) x) (* (* 1/2 a) x) (+ (* (* (* 1/2 a) x) (* a x)) (* a x)) (- (exp (* x a)) 1) (* 1/2 a) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* x a)) (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* (+ (* (* 1/6 x) a) 1/2) a) (/ 1 (/ 1 (- (exp (* x a)) 1))) (/ 1 (- (exp (* x a)) 1)) (/ (+ (* (+ (* 1/12 (* a x)) -1/2) x) (/ 1 a)) x) (+ (* (+ (* 1/12 (* a x)) -1/2) x) (/ 1 a)) (* a x) (* 1/6 x) (+ (* 1/12 (* a x)) -1/2))","x","inf"],[4.079833984375,"((/ 1 (/ 1 (- (exp (* x a)) 1))) (/ 1 (- (exp (* x a)) 1)) (/ (+ (* -1/2 x) (/ 1 a)) x) (+ (* -1/2 x) (/ 1 a)) (- (exp (* x a)) 1) (* a (+ (* (* (* 1/2 a) x) x) x)) (+ (* (* (* 1/2 a) x) x) x) (* (* 1/2 a) x) (+ (* (* (* 1/2 a) x) (* a x)) (* a x)) (- (exp (* x a)) 1) (* 1/2 a) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* x a)) (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* (+ (* (* 1/6 x) a) 1/2) a) (/ 1 (/ 1 (- (exp (* x a)) 1))) (/ 1 (- (exp (* x a)) 1)) (/ (+ (* (+ (* 1/12 (* a x)) -1/2) x) (/ 1 a)) x) (+ (* (+ (* 1/12 (* a x)) -1/2) x) (/ 1 a)) (* a x) (* 1/6 x) (+ (* 1/12 (* a x)) -1/2))","x","0"],[5.744140625,"((/ 1 (/ 1 (- (exp (* x a)) 1))) (/ 1 (- (exp (* x a)) 1)) (/ (+ (* -1/2 x) (/ 1 a)) x) (+ (* -1/2 x) (/ 1 a)) (- (exp (* x a)) 1) (* a (+ (* (* (* 1/2 a) x) x) x)) (+ (* (* (* 1/2 a) x) x) x) (* (* 1/2 a) x) (+ (* (* (* 1/2 a) x) (* a x)) (* a x)) (- (exp (* x a)) 1) (* 1/2 a) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* x a)) (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* (+ (* (* 1/6 x) a) 1/2) a) (/ 1 (/ 1 (- (exp (* x a)) 1))) (/ 1 (- (exp (* x a)) 1)) (/ (+ (* (+ (* 1/12 (* a x)) -1/2) x) (/ 1 a)) x) (+ (* (+ (* 1/12 (* a x)) -1/2) x) (/ 1 a)) (* a x) (* 1/6 x) (+ (* 1/12 (* a x)) -1/2))","a","-inf"],[3.607177734375,"((/ 1 (/ 1 (- (exp (* x a)) 1))) (/ 1 (- (exp (* x a)) 1)) (/ (+ (* -1/2 x) (/ 1 a)) x) (+ (* -1/2 x) (/ 1 a)) (- (exp (* x a)) 1) (* a (+ (* (* (* 1/2 a) x) x) x)) (+ (* (* (* 1/2 a) x) x) x) (* (* 1/2 a) x) (+ (* (* (* 1/2 a) x) (* a x)) (* a x)) (- (exp (* x a)) 1) (* 1/2 a) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* x a)) (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* (+ (* (* 1/6 x) a) 1/2) a) (/ 1 (/ 1 (- (exp (* x a)) 1))) (/ 1 (- (exp (* x a)) 1)) (/ (+ (* (+ (* 1/12 (* a x)) -1/2) x) (/ 1 a)) x) (+ (* (+ (* 1/12 (* a x)) -1/2) x) (/ 1 a)) (* a x) (* 1/6 x) (+ (* 1/12 (* a x)) -1/2))","a","inf"],[4.93603515625,"((/ 1 (/ 1 (- (exp (* x a)) 1))) (/ 1 (- (exp (* x a)) 1)) (/ (+ (* -1/2 x) (/ 1 a)) x) (+ (* -1/2 x) (/ 1 a)) (- (exp (* x a)) 1) (* a (+ (* (* (* 1/2 a) x) x) x)) (+ (* (* (* 1/2 a) x) x) x) (* (* 1/2 a) x) (+ (* (* (* 1/2 a) x) (* a x)) (* a x)) (- (exp (* x a)) 1) (* 1/2 a) (- (exp (* a x)) 1) (* (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* x a)) (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (* (+ (* (* 1/6 x) a) 1/2) a) (/ 1 (/ 1 (- (exp (* x a)) 1))) (/ 1 (- (exp (* x a)) 1)) (/ (+ (* (+ (* 1/12 (* a x)) -1/2) x) (/ 1 a)) x) (+ (* (+ (* 1/12 (* a x)) -1/2) x) (/ 1 a)) (* a x) (* 1/6 x) (+ (* 1/12 (* a x)) -1/2))","a","0"]],"time":30.029052734375,"type":"series"},{"count":[[85,84]],"egraph":[[0,8118,868,0.097007414],[2,3314,968,0.028002363],[1,1008,1034,0.01010354],[0,301,1061,0.003280104]],"inputs":[["(* a x)","(* a (+ x (* 1/2 (* a (pow x 2)))))","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","(/ 1 (* a x))","(/ (+ (* -1/2 a) (/ 1 x)) a)","(/ (+ (* a (- (* -1 (* a (+ (* -1/4 x) (* 1/6 x)))) 1/2)) (/ 1 x)) a)","(/ (+ (* a (- (* a (- (* -1 (* a (+ (* -1/2 (* x (+ (* -1/4 x) (* 1/6 x)))) (+ (* -1/12 (pow x 2)) (* 1/24 (pow x 2)))))) (+ (* -1/4 x) (* 1/6 x)))) 1/2)) (/ 1 x)) a)","(/ 1 a)","(/ (+ 1 (* -1/2 (* a x))) a)","x","(+ x (* 1/2 (* a (pow x 2))))","(* 1/2 (* a x))","(* 1/2 a)","1","(+ 1 (* 1/2 (* a x)))","(+ 1 (* a (+ (* 1/6 (* a (pow x 2))) (* 1/2 x))))","(* a (+ 1/2 (* 1/6 (* a x))))","(/ (+ (* a (- (* 1/12 (* a x)) 1/2)) (/ 1 x)) a)","(/ (+ 1 (* a (+ (* -1/2 x) (* 1/12 (* a (pow x 2)))))) a)","-1/2","(- (* 1/12 (* a x)) 1/2)","(- (exp (* a x)) 1)","(/ 1 (- (exp (* a x)) 1))","(- (/ 1 (* a x)) 1/2)","(* -1/2 x)","(+ (* -1/2 x) (/ 1 a))","(* 1/2 (* (pow a 2) (pow x 2)))","(* (pow a 2) (+ (* 1/2 (pow x 2)) (/ x a)))","(* 1/2 (* a (pow x 2)))","(* a (+ (* 1/2 (pow x 2)) (/ x a)))","(* 1/6 (* (pow a 3) (pow x 3)))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (+ (* 1/2 (/ (pow x 2) a)) (/ x (pow a 2)))))","(* 1/6 (* (pow a 2) (pow x 2)))","(* (pow a 2) (+ (* 1/6 (pow x 2)) (* 1/2 (/ x a))))","(* (pow a 2) (+ (* 1/6 (pow x 2)) (+ (* 1/2 (/ x a)) (/ 1 (pow a 2)))))","(* 1/6 (* (pow a 2) x))","(* (pow a 2) (+ (* 1/6 x) (* 1/2 (/ 1 a))))","(* 1/12 (* a x))","(* a (- (* 1/12 x) (* 1/2 (/ 1 a))))","(* a (- (+ (* 1/12 x) (/ 1 (* (pow a 2) x))) (* 1/2 (/ 1 a))))","(* 1/12 (* a (pow x 2)))","(* a (+ (* -1/2 (/ x a)) (* 1/12 (pow x 2))))","(* a (+ (* -1/2 (/ x a)) (+ (* 1/12 (pow x 2)) (/ 1 (pow a 2)))))","(* -1 (* a (+ (* -1 (/ x a)) (* -1/2 (pow x 2)))))","(* -1 (* (pow a 3) (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3)))))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/2 (pow x 2)) (/ x a)) a)) (* -1/6 (pow x 3)))))","(* (pow a 2) (+ (* -1 (/ (- (* -1/2 x) (/ 1 a)) a)) (* 1/6 (pow x 2))))","(* -1 (* a (+ (* -1/12 x) (* 1/2 (/ 1 a)))))","(* -1 (* a (+ (* -1 (/ (- (/ 1 (* a x)) 1/2) a)) (* -1/12 x))))","(* -1 (* a (+ (* -1/12 (pow x 2)) (* 1/2 (/ x a)))))","(* -1 (* a (+ (* -1 (/ (+ (* -1/2 x) (/ 1 a)) a)) (* -1/12 (pow x 2)))))","(* x (+ a (* 1/2 (* (pow a 2) x))))","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(/ (+ (* -1/2 x) (/ 1 a)) x)","(/ (+ (* x (- (* -1 (* x (+ (* -1/4 a) (* 1/6 a)))) 1/2)) (/ 1 a)) x)","(/ (+ (* x (- (* x (- (* -1 (* x (+ (* -1/2 (* a (+ (* -1/4 a) (* 1/6 a)))) (+ (* -1/12 (pow a 2)) (* 1/24 (pow a 2)))))) (+ (* -1/4 a) (* 1/6 a)))) 1/2)) (/ 1 a)) x)","(* x (+ 1 (* 1/2 (* a x))))","(+ 1 (* x (+ (* 1/6 (* (pow a 2) x)) (* 1/2 a))))","(+ (* 1/6 (* (pow a 2) x)) (* 1/2 a))","(/ (+ (* x (- (* 1/12 (* a x)) 1/2)) (/ 1 a)) x)","(+ (* x (- (* 1/12 (* a x)) 1/2)) (/ 1 a))","(* 1/6 x)","(* x (- (/ 1 (* a x)) 1/2))","(* (pow x 2) (+ (* 1/2 (pow a 2)) (/ a x)))","(* (pow x 2) (+ (* 1/2 a) (/ 1 x)))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (* 1/2 (/ (pow a 2) x))))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (+ (* 1/2 (/ (pow a 2) x)) (/ a (pow x 2)))))","(* (pow x 2) (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))))","(* (pow x 2) (+ (* 1/6 (pow a 2)) (+ (* 1/2 (/ a x)) (/ 1 (pow x 2)))))","(* x (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))))","(* x (- (* 1/12 a) (* 1/2 (/ 1 x))))","(* x (- (+ (* 1/12 a) (/ 1 (* a (pow x 2)))) (* 1/2 (/ 1 x))))","(* (pow x 2) (- (* 1/12 a) (* 1/2 (/ 1 x))))","(* (pow x 2) (- (+ (* 1/12 a) (/ 1 (* a (pow x 2)))) (* 1/2 (/ 1 x))))","(* -1 (* x (- 1/2 (/ 1 (* a x)))))","(* -1 (* (pow x 3) (+ (* -1/2 (/ (pow a 2) x)) (* -1/6 (pow a 3)))))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/2 (pow a 2)) (/ a x)) x)) (* -1/6 (pow a 3)))))","(* (pow x 2) (+ (* -1 (/ (- (* -1/2 a) (/ 1 x)) x)) (* 1/6 (pow a 2))))","(* -1 (* x (+ (* -1/2 (/ a x)) (* -1/6 (pow a 2)))))","(* -1 (* x (+ (* -1/12 a) (* 1/2 (/ 1 x)))))","(* -1 (* x (+ (* -1 (/ (- (/ 1 (* a x)) 1/2) x)) (* -1/12 a))))","(* (pow x 2) (+ (* -1 (/ (- 1/2 (/ 1 (* a x))) x)) (* 1/12 a)))"]],"memory":[[7218384,46355120]],"method":["egg-herbie"],"outputs":[["(* a x)","(*.f64 a x)","(* a (+ x (* 1/2 (* a (pow x 2)))))","(*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) x #s(literal 1 binary64)) x) a)","(* a (+ x (* a (+ (* 1/6 (* a (pow x 3))) (* 1/2 (pow x 2))))))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a x) a)","(* a (+ x (* a (+ (* 1/2 (pow x 2)) (* a (+ (* 1/24 (* a (pow x 4))) (* 1/6 (pow x 3))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) a) #s(literal 1/24 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64))) a (*.f64 (*.f64 x x) #s(literal 1/2 binary64))) a x) a)","(/ 1 (* a x))","(/.f64 #s(literal 1 binary64) (*.f64 a x))","(/ (+ (* -1/2 a) (/ 1 x)) a)","(/.f64 (fma.f64 #s(literal -1/2 binary64) a (/.f64 #s(literal 1 binary64) x)) a)","(/ (+ (* a (- (* -1 (* a (+ (* -1/4 x) (* 1/6 x)))) 1/2)) (/ 1 x)) a)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) a (/.f64 #s(literal 1 binary64) x)) a)","(/ (+ (* a (- (* a (- (* -1 (* a (+ (* -1/2 (* x (+ (* -1/4 x) (* 1/6 x)))) (+ (* -1/12 (pow x 2)) (* 1/24 (pow x 2)))))) (+ (* -1/4 x) (* 1/6 x)))) 1/2)) (/ 1 x)) a)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (neg.f64 a) (*.f64 x (fma.f64 x #s(literal -1/24 binary64) (*.f64 (*.f64 #s(literal -1/12 binary64) x) #s(literal -1/2 binary64)))) (*.f64 #s(literal 1/12 binary64) x)) a #s(literal -1/2 binary64)) a (/.f64 #s(literal 1 binary64) x)) a)","(/ 1 a)","(/.f64 #s(literal 1 binary64) a)","(/ (+ 1 (* -1/2 (* a x))) a)","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) a #s(literal 1 binary64)) a)","x","(+ x (* 1/2 (* a (pow x 2))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) x #s(literal 1 binary64)) x)","(* 1/2 (* a x))","(*.f64 #s(literal 1/2 binary64) (*.f64 a x))","(* 1/2 a)","(*.f64 #s(literal 1/2 binary64) a)","1","#s(literal 1 binary64)","(+ 1 (* 1/2 (* a x)))","(fma.f64 (*.f64 #s(literal 1/2 binary64) a) x #s(literal 1 binary64))","(+ 1 (* a (+ (* 1/6 (* a (pow x 2))) (* 1/2 x))))","(fma.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a #s(literal 1 binary64))","(* a (+ 1/2 (* 1/6 (* a x))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64)) a)","(/ (+ (* a (- (* 1/12 (* a x)) 1/2)) (/ 1 x)) a)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) a (/.f64 #s(literal 1 binary64) x)) a)","(/ (+ 1 (* a (+ (* -1/2 x) (* 1/12 (* a (pow x 2)))))) a)","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) a #s(literal 1 binary64)) a)","-1/2","#s(literal -1/2 binary64)","(- (* 1/12 (* a x)) 1/2)","(fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64))","(- (exp (* a x)) 1)","(expm1.f64 (*.f64 a x))","(/ 1 (- (exp (* a x)) 1))","(/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 a x)))","(- (/ 1 (* a x)) 1/2)","(-.f64 (/.f64 #s(literal 1 binary64) (*.f64 a x)) #s(literal 1/2 binary64))","(* -1/2 x)","(*.f64 #s(literal -1/2 binary64) x)","(+ (* -1/2 x) (/ 1 a))","(fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal 1 binary64) a))","(* 1/2 (* (pow a 2) (pow x 2)))","(*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 a x)) x) a)","(* (pow a 2) (+ (* 1/2 (pow x 2)) (/ x a)))","(*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x (/.f64 x a)) a) a)","(* 1/2 (* a (pow x 2)))","(*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 a x)) x)","(* a (+ (* 1/2 (pow x 2)) (/ x a)))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x (/.f64 x a)) a)","(* 1/6 (* (pow a 3) (pow x 3)))","(*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64)) (pow.f64 x #s(literal 3 binary64)))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (* 1/2 (/ (pow x 2) a))))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a))) (pow.f64 a #s(literal 3 binary64)))","(* (pow a 3) (+ (* 1/6 (pow x 3)) (+ (* 1/2 (/ (pow x 2) a)) (/ x (pow a 2)))))","(*.f64 (fma.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a)) (/.f64 (/.f64 x a) a)) (pow.f64 a #s(literal 3 binary64)))","(* 1/6 (* (pow a 2) (pow x 2)))","(*.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/6 binary64)) x)","(* (pow a 2) (+ (* 1/6 (pow x 2)) (* 1/2 (/ x a))))","(*.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a)","(* (pow a 2) (+ (* 1/6 (pow x 2)) (+ (* 1/2 (/ x a)) (/ 1 (pow a 2)))))","(fma.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a #s(literal 1 binary64))","(* 1/6 (* (pow a 2) x))","(*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/6 binary64))","(* (pow a 2) (+ (* 1/6 x) (* 1/2 (/ 1 a))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64)) a)","(* 1/12 (* a x))","(*.f64 #s(literal 1/12 binary64) (*.f64 a x))","(* a (- (* 1/12 x) (* 1/2 (/ 1 a))))","(fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64))","(* a (- (+ (* 1/12 x) (/ 1 (* (pow a 2) x))) (* 1/2 (/ 1 a))))","(fma.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) a) x)) a #s(literal -1/2 binary64))","(* 1/12 (* a (pow x 2)))","(*.f64 #s(literal 1/12 binary64) (*.f64 (*.f64 x x) a))","(* a (+ (* -1/2 (/ x a)) (* 1/12 (pow x 2))))","(*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x)","(* a (+ (* -1/2 (/ x a)) (+ (* 1/12 (pow x 2)) (/ 1 (pow a 2)))))","(fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal 1 binary64) a))","(* -1 (* a (+ (* -1 (/ x a)) (* -1/2 (pow x 2)))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x (/.f64 x a)) a)","(* -1 (* (pow a 3) (+ (* -1/2 (/ (pow x 2) a)) (* -1/6 (pow x 3)))))","(*.f64 (*.f64 (*.f64 x x) (fma.f64 #s(literal 1/6 binary64) x (/.f64 #s(literal 1/2 binary64) a))) (pow.f64 a #s(literal 3 binary64)))","(* -1 (* (pow a 3) (+ (* -1 (/ (+ (* 1/2 (pow x 2)) (/ x a)) a)) (* -1/6 (pow x 3)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/6 binary64) (pow.f64 x #s(literal 3 binary64)) (/.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x (/.f64 x a)) (neg.f64 a)))) (pow.f64 a #s(literal 3 binary64)))","(* (pow a 2) (+ (* -1 (/ (- (* -1/2 x) (/ 1 a)) a)) (* 1/6 (pow x 2))))","(*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) x (/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a)) (neg.f64 a))) a) a)","(* -1 (* a (+ (* -1/12 x) (* 1/2 (/ 1 a)))))","(fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64))","(* -1 (* a (+ (* -1 (/ (- (/ 1 (* a x)) 1/2) a)) (* -1/12 x))))","(fma.f64 (fma.f64 #s(literal 1/12 binary64) x (/.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) a) x)) a #s(literal -1/2 binary64))","(* -1 (* a (+ (* -1/12 (pow x 2)) (* 1/2 (/ x a)))))","(*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x)","(* -1 (* a (+ (* -1 (/ (+ (* -1/2 x) (/ 1 a)) a)) (* -1/12 (pow x 2)))))","(*.f64 (neg.f64 a) (fma.f64 #s(literal -1/12 binary64) (*.f64 x x) (/.f64 (fma.f64 #s(literal 1/2 binary64) x (/.f64 #s(literal -1 binary64) a)) a)))","(* x (+ a (* 1/2 (* (pow a 2) x))))","(*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) x #s(literal 1 binary64)) x) a)","(* x (+ a (* x (+ (* 1/6 (* (pow a 3) x)) (* 1/2 (pow a 2))))))","(*.f64 (fma.f64 (*.f64 (*.f64 x x) (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a x) a)","(* x (+ a (* x (+ (* 1/2 (pow a 2)) (* x (+ (* 1/24 (* (pow a 4) x)) (* 1/6 (pow a 3))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) x) #s(literal 1/24 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/6 binary64))) x (*.f64 (*.f64 a a) #s(literal 1/2 binary64))) x a) x)","(/ (+ (* -1/2 x) (/ 1 a)) x)","(/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal 1 binary64) a)) x)","(/ (+ (* x (- (* -1 (* x (+ (* -1/4 a) (* 1/6 a)))) 1/2)) (/ 1 a)) x)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal 1 binary64) a)) x)","(/ (+ (* x (- (* x (- (* -1 (* x (+ (* -1/2 (* a (+ (* -1/4 a) (* 1/6 a)))) (+ (* -1/12 (pow a 2)) (* 1/24 (pow a 2)))))) (+ (* -1/4 a) (* 1/6 a)))) 1/2)) (/ 1 a)) x)","(/.f64 (fma.f64 (fma.f64 (fma.f64 (neg.f64 x) (*.f64 a (fma.f64 a #s(literal -1/24 binary64) (*.f64 (*.f64 #s(literal -1/12 binary64) a) #s(literal -1/2 binary64)))) (*.f64 #s(literal 1/12 binary64) a)) x #s(literal -1/2 binary64)) x (/.f64 #s(literal 1 binary64) a)) x)","(* x (+ 1 (* 1/2 (* a x))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) x #s(literal 1 binary64)) x)","(+ 1 (* x (+ (* 1/6 (* (pow a 2) x)) (* 1/2 a))))","(fma.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a #s(literal 1 binary64))","(+ (* 1/6 (* (pow a 2) x)) (* 1/2 a))","(*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64)) a)","(/ (+ (* x (- (* 1/12 (* a x)) 1/2)) (/ 1 a)) x)","(/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal 1 binary64) a)) x)","(+ (* x (- (* 1/12 (* a x)) 1/2)) (/ 1 a))","(fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal 1 binary64) a))","(* 1/6 x)","(*.f64 #s(literal 1/6 binary64) x)","(* x (- (/ 1 (* a x)) 1/2))","(fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal 1 binary64) a))","(* (pow x 2) (+ (* 1/2 (pow a 2)) (/ a x)))","(*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) x #s(literal 1 binary64)) x) a)","(* (pow x 2) (+ (* 1/2 a) (/ 1 x)))","(*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) x #s(literal 1 binary64)) x)","(* (pow x 3) (+ (* 1/6 (pow a 3)) (* 1/2 (/ (pow a 2) x))))","(*.f64 (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 3) (+ (* 1/6 (pow a 3)) (+ (* 1/2 (/ (pow a 2) x)) (/ a (pow x 2)))))","(*.f64 (fma.f64 (*.f64 a a) (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x)) (/.f64 (/.f64 a x) x)) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 2) (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))))","(*.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a)","(* (pow x 2) (+ (* 1/6 (pow a 2)) (+ (* 1/2 (/ a x)) (/ 1 (pow x 2)))))","(fma.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a #s(literal 1 binary64))","(* x (+ (* 1/6 (pow a 2)) (* 1/2 (/ a x))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64)) a)","(* x (- (* 1/12 a) (* 1/2 (/ 1 x))))","(fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64))","(* x (- (+ (* 1/12 a) (/ 1 (* a (pow x 2)))) (* 1/2 (/ 1 x))))","(fma.f64 (fma.f64 #s(literal 1/12 binary64) a (/.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x) a)) x #s(literal -1/2 binary64))","(* (pow x 2) (- (* 1/12 a) (* 1/2 (/ 1 x))))","(*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x)","(* (pow x 2) (- (+ (* 1/12 a) (/ 1 (* a (pow x 2)))) (* 1/2 (/ 1 x))))","(fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal 1 binary64) a))","(* -1 (* x (- 1/2 (/ 1 (* a x)))))","(fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal 1 binary64) a))","(* -1 (* (pow x 3) (+ (* -1/2 (/ (pow a 2) x)) (* -1/6 (pow a 3)))))","(*.f64 (*.f64 (*.f64 a a) (fma.f64 #s(literal 1/6 binary64) a (/.f64 #s(literal 1/2 binary64) x))) (pow.f64 x #s(literal 3 binary64)))","(* -1 (* (pow x 3) (+ (* -1 (/ (+ (* 1/2 (pow a 2)) (/ a x)) x)) (* -1/6 (pow a 3)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/6 binary64) (pow.f64 a #s(literal 3 binary64)) (/.f64 (fma.f64 (*.f64 a a) #s(literal 1/2 binary64) (/.f64 a x)) (neg.f64 x)))) (pow.f64 x #s(literal 3 binary64)))","(* (pow x 2) (+ (* -1 (/ (- (* -1/2 a) (/ 1 x)) x)) (* 1/6 (pow a 2))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) a (/.f64 #s(literal 1 binary64) x)) x (*.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/6 binary64)) x))","(* -1 (* x (+ (* -1/2 (/ a x)) (* -1/6 (pow a 2)))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64)) a)","(* -1 (* x (+ (* -1/12 a) (* 1/2 (/ 1 x)))))","(fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64))","(* -1 (* x (+ (* -1 (/ (- (/ 1 (* a x)) 1/2) x)) (* -1/12 a))))","(fma.f64 (fma.f64 #s(literal 1/12 binary64) a (/.f64 (/.f64 (/.f64 #s(literal 1 binary64) x) x) a)) x #s(literal -1/2 binary64))","(* (pow x 2) (+ (* -1 (/ (- 1/2 (/ 1 (* a x))) x)) (* 1/12 a)))","(fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal 1 binary64) a))"]],"stop":[["iter limit",1],["node limit",1]],"time":249.4169921875,"type":"simplify"},{"count":[[22,672]],"egraph":[[0,8543,244,0.085701948],[2,1711,258,0.032175365],[1,266,258,0.005861473],[0,66,258,0.001977319],[0,39,262,0.000392699]],"inputs":[["(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal 1 binary64) a)) x)))","#s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal 1 binary64) a)) x))","(/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal 1 binary64) a)) x)","(fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal 1 binary64) a))","#s(approx (- (exp (* x a)) 1) (*.f64 a (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x)))","(*.f64 a (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x))","(fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x)","(*.f64 (*.f64 #s(literal 1/2 binary64) a) x)","(fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) (*.f64 a x) (*.f64 a x))","#s(approx (- (exp (* x a)) 1) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) (*.f64 a x) (*.f64 a x)))","(*.f64 #s(literal 1/2 binary64) a)","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))","(*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a))","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))","(*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a)","(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal 1 binary64) a)) x)))","#s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal 1 binary64) a)) x))","(/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal 1 binary64) a)) x)","(fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal 1 binary64) a))","(*.f64 a x)","(*.f64 #s(literal 1/6 binary64) x)","(fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64))"]],"memory":[[-5641744,63471312]],"outputs":[["(*.f64 (pow.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) x)) #s(literal -1/2 binary64)) (pow.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) x)) #s(literal -1/2 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) x))))","(*.f64 (pow.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) x)) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) x)) #s(literal -1 binary64)))","(pow.f64 (exp.f64 (log.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) x)))) #s(literal -1 binary64))","(pow.f64 (*.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) x)) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) x))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) x)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) x)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) x))))","(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) x)))","(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) x))))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) x))))","(exp.f64 (*.f64 (log.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) x))) #s(literal -1 binary64)))","(*.f64 (neg.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) x))) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) x))))","(*.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) x)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) x)))","(pow.f64 (pow.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) x)) #s(literal 1 binary64))","#s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) x))","(/.f64 (neg.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) x))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) x)) #s(literal -1 binary64))))","(/.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) x)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) x)) #s(literal -1 binary64)))","(neg.f64 (neg.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) x))))","(-.f64 #s(literal 0 binary64) (/.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) x)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (neg.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) x))))","(exp.f64 (neg.f64 (*.f64 (log.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) x))) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 #s(literal -1/2 binary64) x) a))) x) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 #s(literal -1/2 binary64) x) a)))))","(*.f64 (pow.f64 (/.f64 x (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (pow.f64 a #s(literal -2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 #s(literal -1/2 binary64) x) a))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (pow.f64 a #s(literal -2 binary64))) x) (pow.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a)) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64))) x) (pow.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 #s(literal -1/2 binary64) x) a))) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (pow.f64 a #s(literal -2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a)) x)))","(*.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (pow.f64 a #s(literal -2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 x (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a)))))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))))","(*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 #s(literal -1/2 binary64) x) a))) x)))","(*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 x (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 #s(literal -1/2 binary64) x) a))))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64)))) (/.f64 #s(literal -1 binary64) x))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 x (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64)))))))","(*.f64 #s(literal -1 binary64) (/.f64 (neg.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64)))) x))","(*.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) x) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a)) (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) x))","(pow.f64 (/.f64 x (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (pow.f64 a #s(literal -2 binary64))) x)) (neg.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a))))","(/.f64 (neg.f64 (/.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64))) x)) (neg.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 #s(literal -1/2 binary64) x) a)))))","(/.f64 (/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (pow.f64 a #s(literal -2 binary64))) x) (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a)))","(/.f64 (/.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64))) x) (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 #s(literal -1/2 binary64) x) a))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (pow.f64 a #s(literal -2 binary64)))) (neg.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a)) x)))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (pow.f64 a #s(literal -2 binary64)))) (neg.f64 (*.f64 x (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a)))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64)))) (neg.f64 (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 #s(literal -1/2 binary64) x) a))) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64)))) (neg.f64 (*.f64 x (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 #s(literal -1/2 binary64) x) a))))))","(/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (pow.f64 a #s(literal -2 binary64))) (*.f64 x (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a))))","(/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (pow.f64 a #s(literal -2 binary64))) (*.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a)) x))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) #s(literal -1 binary64)))","(/.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64))) (*.f64 x (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 #s(literal -1/2 binary64) x) a)))))","(/.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64))) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 #s(literal -1/2 binary64) x) a))) x))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64)))) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))))))","(/.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) x)","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a)) (/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (pow.f64 a #s(literal -2 binary64))) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 #s(literal -1/2 binary64) x) a))) (/.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64))) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a)) x) (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (pow.f64 a #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 #s(literal -1/2 binary64) x) a))) x) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a))) (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (pow.f64 a #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 #s(literal -1/2 binary64) x) a)))) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 x (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 x (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64)))) x))","(-.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (*.f64 x (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a)))) (/.f64 (pow.f64 a #s(literal -2 binary64)) (*.f64 x (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a)))))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (/.f64 (neg.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64)))) x))","(-.f64 (/.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a))) x) (/.f64 (/.f64 (pow.f64 a #s(literal -2 binary64)) (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a))) x))","(-.f64 #s(literal 0 binary64) (/.f64 (neg.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64)))) x))","(exp.f64 (*.f64 (log.f64 (/.f64 x (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (*.f64 #s(literal 1/4 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 #s(literal -1/2 binary64) x))))","(*.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (pow.f64 a #s(literal -2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a)))))","(*.f64 (neg.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 #s(literal -1/2 binary64) x) a))))))","(*.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (pow.f64 a #s(literal -2 binary64))) (pow.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 a #s(literal -2 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (/.f64 (*.f64 #s(literal -1/2 binary64) x) a)))))","(*.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64))) (pow.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 #s(literal -1/2 binary64) x) a))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64)))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))))","(pow.f64 (pow.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 a #s(literal -2 binary64)) (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a))) (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a))) (fma.f64 (/.f64 (pow.f64 a #s(literal -2 binary64)) (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a))) (/.f64 (pow.f64 a #s(literal -2 binary64)) (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a))) (*.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a))) (/.f64 (pow.f64 a #s(literal -2 binary64)) (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (*.f64 #s(literal 1/4 binary64) (*.f64 x x)))) (neg.f64 (-.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 #s(literal -1/2 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (pow.f64 a #s(literal -2 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 #s(literal -1/2 binary64) x) a))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a))) (*.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a)) (pow.f64 a #s(literal -2 binary64)))) (*.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a)) (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a))))","(/.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (*.f64 #s(literal 1/4 binary64) (*.f64 x x))) (-.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 #s(literal -1/2 binary64) x)))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (pow.f64 a #s(literal -2 binary64)))) (neg.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 a #s(literal -2 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (/.f64 (*.f64 #s(literal -1/2 binary64) x) a)))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64)))) (neg.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 #s(literal -1/2 binary64) x) a)))))","(/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (pow.f64 a #s(literal -2 binary64))) (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a)))","(/.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64))) (+.f64 (pow.f64 a #s(literal -2 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (/.f64 (*.f64 #s(literal -1/2 binary64) x) a))))","(/.f64 (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64))) (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 #s(literal -1/2 binary64) x) a))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 #s(literal -1/2 binary64) x)) (-.f64 (pow.f64 a #s(literal -2 binary64)) (*.f64 #s(literal 1/4 binary64) (*.f64 x x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 a #s(literal -2 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (/.f64 (*.f64 #s(literal -1/2 binary64) x) a))) (fma.f64 #s(literal -1/8 binary64) (pow.f64 x #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64))) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64)))))","(fma.f64 (pow.f64 a #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1/2 binary64)) (*.f64 #s(literal -1/2 binary64) x))","(fma.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (pow.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 a #s(literal -2 binary64)) (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a)))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) a) (*.f64 #s(literal -1/2 binary64) x))","(fma.f64 (*.f64 #s(literal -1/2 binary64) x) #s(literal 1 binary64) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 #s(literal -1/2 binary64) x))","(fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64)))","(fma.f64 x #s(literal -1/2 binary64) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 a #s(literal -1 binary64)) (*.f64 #s(literal -1/2 binary64) x))","(-.f64 (/.f64 (pow.f64 a #s(literal -2 binary64)) (-.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 #s(literal -1/2 binary64) x))) (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (-.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 #s(literal -1/2 binary64) x))))","(-.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a))) (/.f64 (pow.f64 a #s(literal -2 binary64)) (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a))))","(-.f64 #s(literal 0 binary64) (neg.f64 (fma.f64 #s(literal -1/2 binary64) x (pow.f64 a #s(literal -1 binary64)))))","(-.f64 (*.f64 #s(literal -1/2 binary64) x) (/.f64 #s(literal -1 binary64) a))","(+.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a))) (neg.f64 (/.f64 (pow.f64 a #s(literal -2 binary64)) (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal -1 binary64) a)))))","(+.f64 (*.f64 #s(literal -1/2 binary64) x) (pow.f64 a #s(literal -1 binary64)))","(+.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 #s(literal -1/2 binary64) x))","#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x) a))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x) a) x) (/.f64 (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))","(*.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) a) (pow.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x (neg.f64 x)) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) a) (pow.f64 (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x)))) #s(literal -1 binary64)))","(*.f64 (*.f64 a (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) (pow.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x (neg.f64 x)) #s(literal -1 binary64)))","(*.f64 (*.f64 a (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x)))) #s(literal -1 binary64)))","(*.f64 (*.f64 a (fma.f64 (*.f64 a x) #s(literal 1/2 binary64) #s(literal 1 binary64))) x)","(*.f64 (*.f64 (fma.f64 (*.f64 a x) #s(literal 1/2 binary64) #s(literal 1 binary64)) a) x)","(*.f64 (-.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 (*.f64 a x) (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))))))","(*.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))) (pow.f64 (*.f64 a x) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 a x) #s(literal 6 binary64)) (pow.f64 (*.f64 a x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64)) (*.f64 (*.f64 a x) (-.f64 (*.f64 a x) (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)))))))))","(*.f64 (fma.f64 (*.f64 a x) #s(literal 1/2 binary64) #s(literal 1 binary64)) (*.f64 a x))","(*.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))) (pow.f64 (*.f64 a x) #s(literal 2 binary64))) (pow.f64 (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 a x) #s(literal 6 binary64)) (pow.f64 (*.f64 a x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))) (*.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))) (*.f64 a x))))))","(*.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 a x) #s(literal 6 binary64)) (pow.f64 (*.f64 a x) #s(literal 3 binary64))) (pow.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64)) (*.f64 (*.f64 a x) (-.f64 (*.f64 a x) (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)))))) #s(literal -1 binary64)))","(*.f64 (*.f64 a x) (fma.f64 (*.f64 a x) #s(literal 1/2 binary64) #s(literal 1 binary64)))","(*.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x) a)","(*.f64 a (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x))","(*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a a))","(*.f64 x (+.f64 a (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a)))","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x) a))","(pow.f64 (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x) a)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a)))) (/.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a)))) (fma.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a)))) (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a)))) (*.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a)))) (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) a)) (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) a)) (neg.f64 (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x))))))","(/.f64 (neg.f64 (*.f64 a (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)))) (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 a (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))))) (neg.f64 (-.f64 (*.f64 a x) (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))) (pow.f64 (*.f64 a x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 a x) #s(literal 6 binary64)) (pow.f64 (*.f64 a x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64)) (*.f64 (*.f64 a x) (-.f64 (*.f64 a x) (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)))))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a)))) (*.f64 (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))) (pow.f64 (*.f64 a x) #s(literal 2 binary64)))) (*.f64 (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a)))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) a) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x (neg.f64 x)))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) a) (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x)))))","(/.f64 (*.f64 a (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x (neg.f64 x)))","(/.f64 (*.f64 a (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x)))))","(/.f64 (-.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64)))) (-.f64 (*.f64 a x) (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))) (pow.f64 (*.f64 a x) #s(literal 2 binary64)))) (neg.f64 (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 a x) #s(literal 6 binary64)) (pow.f64 (*.f64 a x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))) (*.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))) (*.f64 a x))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 a x) #s(literal 6 binary64)) (pow.f64 (*.f64 a x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64)) (*.f64 (*.f64 a x) (-.f64 (*.f64 a x) (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))))))))","(/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))) (pow.f64 (*.f64 a x) #s(literal 2 binary64))) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))","(/.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 a x) #s(literal 6 binary64)) (pow.f64 (*.f64 a x) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))) (*.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))) (*.f64 a x)))))","(/.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 a x) #s(literal 6 binary64)) (pow.f64 (*.f64 a x) #s(literal 3 binary64))) (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64)) (*.f64 (*.f64 a x) (-.f64 (*.f64 a x) (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x) a))))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x) (pow.f64 a #s(literal -1 binary64)))","(/.f64 a (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x (neg.f64 x)) (*.f64 (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x)))) (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x (neg.f64 x)) (*.f64 a (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x)))) (*.f64 a (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 a x) (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)))) (-.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))) (*.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))) (*.f64 a x)))) (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 a x) #s(literal 6 binary64)) (pow.f64 (*.f64 a x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x) a)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x) a)))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))) (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a)) x) (/.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))) (neg.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))) (*.f64 (*.f64 #s(literal 1/2 binary64) a) x)) x) (/.f64 (*.f64 a x) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))) (neg.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))) (*.f64 #s(literal 1/2 binary64) a)) x) (/.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))) (neg.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))))","(fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a) #s(literal 2 binary64)) x) (/.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))) (neg.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))))","(fma.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) x) (/.f64 (pow.f64 (*.f64 (*.f64 x x) a) #s(literal 2 binary64)) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))) (neg.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))))","(fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) #s(literal 2 binary64)) x) (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))) (neg.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))))","(fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a) x) (/.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)))) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))) (neg.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))) (*.f64 a x)) x) (/.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))) (neg.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))))","(fma.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) x) (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))) (neg.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))) x) (/.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))) (neg.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))))","(fma.f64 (/.f64 (*.f64 a x) x) (/.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)))) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))) (neg.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x) (/.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))) (*.f64 a x)) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))) (neg.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) a) x) (/.f64 (*.f64 (*.f64 (*.f64 x x) a) (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)))) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))) (neg.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))))","(fma.f64 (*.f64 a (*.f64 #s(literal 1/2 binary64) a)) (*.f64 x x) (*.f64 a x))","(fma.f64 (*.f64 (*.f64 a x) (*.f64 #s(literal 1/2 binary64) a)) x (*.f64 a x))","(fma.f64 (*.f64 (*.f64 x x) a) (*.f64 #s(literal 1/2 binary64) a) (*.f64 a x))","(fma.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a) x (*.f64 a x))","(fma.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))) (pow.f64 (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))))","(fma.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x) a (*.f64 a x))","(fma.f64 (*.f64 a x) (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) (*.f64 a x))","(fma.f64 (*.f64 a x) #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))))","(fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) (*.f64 a x) (*.f64 a x))","(fma.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 (*.f64 x x) a) (*.f64 a x))","(fma.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 a x))","(fma.f64 a (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x) (*.f64 a x))","(fma.f64 a x (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))))","(fma.f64 x (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a) (*.f64 a x))","(fma.f64 x a (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))))","(fma.f64 #s(literal 1 binary64) (*.f64 a x) (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 (*.f64 a x) (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))))) (/.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))) (-.f64 (*.f64 a x) (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))))))","(-.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a)))) (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a)))))","(+.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a)))) (neg.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))))","(+.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))) (*.f64 a x))","(+.f64 (*.f64 a x) (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))))","(*.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 x (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x (neg.f64 x)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x)))))))","(*.f64 (fma.f64 (*.f64 a x) #s(literal 1/2 binary64) #s(literal 1 binary64)) x)","(*.f64 (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (pow.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x (neg.f64 x)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 1/2 binary64) a) (pow.f64 x #s(literal 3 binary64)))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x)))) #s(literal -1 binary64)))","(*.f64 x (fma.f64 (*.f64 a x) #s(literal 1/2 binary64) #s(literal 1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x (neg.f64 x))) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x (neg.f64 x))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x (neg.f64 x))) (/.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x (neg.f64 x))) (fma.f64 (/.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x (neg.f64 x))) (/.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x (neg.f64 x))) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x (neg.f64 x))) (/.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x (neg.f64 x)))))))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 x (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x (neg.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x)))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x (neg.f64 x))) (*.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x (neg.f64 x)) (*.f64 x x))) (*.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x (neg.f64 x)) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x (neg.f64 x))))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x) #s(literal 2 binary64))) (-.f64 x (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x (neg.f64 x))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x x (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 1/2 binary64) a) (pow.f64 x #s(literal 3 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x))))))","(/.f64 (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x (neg.f64 x)))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 1/2 binary64) a) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x)) (-.f64 (*.f64 x x) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal 1/2 binary64) a) (pow.f64 x #s(literal 3 binary64))))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x)))","(fma.f64 (*.f64 x #s(literal 1/2 binary64)) (*.f64 a x) x)","(fma.f64 (*.f64 x x) (*.f64 #s(literal 1/2 binary64) a) x)","(fma.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x (neg.f64 x)) #s(literal -1 binary64)) (neg.f64 (/.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x (neg.f64 x)))))","(fma.f64 #s(literal -1 binary64) (neg.f64 x) (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x))","(fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x)","(fma.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 x x) x)","(fma.f64 #s(literal 1/2 binary64) (*.f64 a (*.f64 x x)) x)","(fma.f64 #s(literal 1/2 binary64) (*.f64 (*.f64 x x) a) x)","(fma.f64 a (*.f64 #s(literal 1/2 binary64) (*.f64 x x)) x)","(fma.f64 x (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x)","(fma.f64 x #s(literal 1 binary64) (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x))) (/.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x) #s(literal 2 binary64)) (-.f64 x (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x (neg.f64 x))) (/.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x (neg.f64 x))))","(+.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x (neg.f64 x))) (neg.f64 (/.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x (neg.f64 x)))))","(+.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x) x)","(+.f64 x (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x))","(*.f64 (*.f64 #s(literal 1/2 binary64) x) a)","(*.f64 (*.f64 x #s(literal 1/2 binary64)) a)","(*.f64 (*.f64 a x) #s(literal 1/2 binary64))","(*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) #s(literal 1 binary64))","(*.f64 (*.f64 #s(literal 1/2 binary64) a) x)","(*.f64 #s(literal 1/2 binary64) (*.f64 a x))","(*.f64 a (*.f64 #s(literal 1/2 binary64) x))","(*.f64 x (*.f64 #s(literal 1/2 binary64) a))","(/.f64 (*.f64 #s(literal 1/2 binary64) x) (pow.f64 a #s(literal -1 binary64)))","(/.f64 (*.f64 x #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x) a) x) (/.f64 (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))","(*.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) a) (pow.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x (neg.f64 x)) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) a) (pow.f64 (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x)))) #s(literal -1 binary64)))","(*.f64 (*.f64 a (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) (pow.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x (neg.f64 x)) #s(literal -1 binary64)))","(*.f64 (*.f64 a (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (pow.f64 (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x)))) #s(literal -1 binary64)))","(*.f64 (*.f64 a (fma.f64 (*.f64 a x) #s(literal 1/2 binary64) #s(literal 1 binary64))) x)","(*.f64 (*.f64 (fma.f64 (*.f64 a x) #s(literal 1/2 binary64) #s(literal 1 binary64)) a) x)","(*.f64 (-.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 (*.f64 a x) (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))))))","(*.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))) (pow.f64 (*.f64 a x) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 a x) #s(literal 6 binary64)) (pow.f64 (*.f64 a x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64)) (*.f64 (*.f64 a x) (-.f64 (*.f64 a x) (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)))))))))","(*.f64 (fma.f64 (*.f64 a x) #s(literal 1/2 binary64) #s(literal 1 binary64)) (*.f64 a x))","(*.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))) (pow.f64 (*.f64 a x) #s(literal 2 binary64))) (pow.f64 (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 a x) #s(literal 6 binary64)) (pow.f64 (*.f64 a x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))) (*.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))) (*.f64 a x))))))","(*.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 a x) #s(literal 6 binary64)) (pow.f64 (*.f64 a x) #s(literal 3 binary64))) (pow.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64)) (*.f64 (*.f64 a x) (-.f64 (*.f64 a x) (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)))))) #s(literal -1 binary64)))","(*.f64 (*.f64 a x) (fma.f64 (*.f64 a x) #s(literal 1/2 binary64) #s(literal 1 binary64)))","(*.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x) a)","(*.f64 a (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x))","(*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a a))","(*.f64 x (+.f64 a (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a)))","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x) a))","(pow.f64 (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x) a)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a)))) (/.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a)))) (fma.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a)))) (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a)))) (*.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a)))) (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) a)) (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) a)) (neg.f64 (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x))))))","(/.f64 (neg.f64 (*.f64 a (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)))) (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x (neg.f64 x))))","(/.f64 (neg.f64 (*.f64 a (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))))) (neg.f64 (-.f64 (*.f64 a x) (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))) (pow.f64 (*.f64 a x) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 a x) #s(literal 6 binary64)) (pow.f64 (*.f64 a x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64)) (*.f64 (*.f64 a x) (-.f64 (*.f64 a x) (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)))))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a)))) (*.f64 (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))) (pow.f64 (*.f64 a x) #s(literal 2 binary64)))) (*.f64 (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a)))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) a) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x (neg.f64 x)))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) a) (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x)))))","(/.f64 (*.f64 a (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x (neg.f64 x)))","(/.f64 (*.f64 a (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x)))))","(/.f64 (-.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64)))) (-.f64 (*.f64 a x) (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))) (pow.f64 (*.f64 a x) #s(literal 2 binary64)))) (neg.f64 (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a)))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 a x) #s(literal 6 binary64)) (pow.f64 (*.f64 a x) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))) (*.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))) (*.f64 a x))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 a x) #s(literal 6 binary64)) (pow.f64 (*.f64 a x) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64)) (*.f64 (*.f64 a x) (-.f64 (*.f64 a x) (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))))))))","(/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))) (pow.f64 (*.f64 a x) #s(literal 2 binary64))) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))","(/.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 a x) #s(literal 6 binary64)) (pow.f64 (*.f64 a x) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))) (*.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))) (*.f64 a x)))))","(/.f64 (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 a x) #s(literal 6 binary64)) (pow.f64 (*.f64 a x) #s(literal 3 binary64))) (fma.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64)) (*.f64 (*.f64 a x) (-.f64 (*.f64 a x) (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x) a))))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x) (pow.f64 a #s(literal -1 binary64)))","(/.f64 a (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x (neg.f64 x)) (*.f64 (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x)))) (*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x (neg.f64 x)) (*.f64 a (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x)))) (*.f64 a (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 a x) (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)))) (-.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))) (*.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))) (*.f64 a x)))) (fma.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 a x) #s(literal 6 binary64)) (pow.f64 (*.f64 a x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x) a)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x) a)))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))) (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a)) x) (/.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))) (neg.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))) (*.f64 (*.f64 #s(literal 1/2 binary64) a) x)) x) (/.f64 (*.f64 a x) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))) (neg.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))) (*.f64 #s(literal 1/2 binary64) a)) x) (/.f64 (*.f64 (*.f64 x x) a) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))) (neg.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))))","(fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a) #s(literal 2 binary64)) x) (/.f64 (*.f64 x x) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))) (neg.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))))","(fma.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) x) (/.f64 (pow.f64 (*.f64 (*.f64 x x) a) #s(literal 2 binary64)) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))) (neg.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))))","(fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) #s(literal 2 binary64)) x) (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))) (neg.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))))","(fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a) x) (/.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)))) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))) (neg.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))) (*.f64 a x)) x) (/.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))) (neg.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))))","(fma.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) x) (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))) (neg.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))) x) (/.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))) (neg.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))))","(fma.f64 (/.f64 (*.f64 a x) x) (/.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)))) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))) (neg.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))))","(fma.f64 (/.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x) (/.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))) (*.f64 a x)) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))) (neg.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))))","(fma.f64 (/.f64 (*.f64 #s(literal 1/2 binary64) a) x) (/.f64 (*.f64 (*.f64 (*.f64 x x) a) (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)))) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))) (neg.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))))","(fma.f64 (*.f64 a (*.f64 #s(literal 1/2 binary64) a)) (*.f64 x x) (*.f64 a x))","(fma.f64 (*.f64 (*.f64 a x) (*.f64 #s(literal 1/2 binary64) a)) x (*.f64 a x))","(fma.f64 (*.f64 (*.f64 x x) a) (*.f64 #s(literal 1/2 binary64) a) (*.f64 a x))","(fma.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a) x (*.f64 a x))","(fma.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))) (pow.f64 (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))))","(fma.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x) a (*.f64 a x))","(fma.f64 (*.f64 a x) (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) (*.f64 a x))","(fma.f64 (*.f64 a x) #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))))","(fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) (*.f64 a x) (*.f64 a x))","(fma.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 (*.f64 x x) a) (*.f64 a x))","(fma.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 a x))","(fma.f64 a (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x) (*.f64 a x))","(fma.f64 a x (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))))","(fma.f64 x (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a) (*.f64 a x))","(fma.f64 x a (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))))","(fma.f64 #s(literal 1 binary64) (*.f64 a x) (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))))","(-.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 (*.f64 a x) (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))))) (/.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))) (-.f64 (*.f64 a x) (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))))))","(-.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a)))) (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a)))))","(+.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 a x) #s(literal 4 binary64))) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a)))) (neg.f64 (/.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) a (neg.f64 a))))))","(+.f64 (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))) (*.f64 a x))","(+.f64 (*.f64 a x) (*.f64 #s(literal 1/2 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64))))","#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x) a))","(*.f64 #s(literal 1/2 binary64) a)","(*.f64 a #s(literal 1/2 binary64))","(/.f64 (neg.f64 a) #s(literal -2 binary64))","(/.f64 #s(literal 1/2 binary64) (pow.f64 a #s(literal -1 binary64)))","(/.f64 a #s(literal 2 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 2 binary64) a))","#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 a x)) (pow.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 a x)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x)) #s(literal -1 binary64)))","(*.f64 (*.f64 (*.f64 a x) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (*.f64 a x) (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x)) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) a) x)","(*.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) x) a)","(*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 a x))","(*.f64 (*.f64 a x) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)))","(*.f64 a (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) x))","(*.f64 x (*.f64 a (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) (*.f64 a x)) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) (*.f64 a x))) (pow.f64 (*.f64 a x) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) (*.f64 a x)) (*.f64 a x)))","(/.f64 (-.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) (*.f64 a x)) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) (*.f64 a x)))) (-.f64 (*.f64 a x) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) (*.f64 a x))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 a x) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x)) (*.f64 (*.f64 a x) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x))) (pow.f64 (*.f64 a x) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 a x) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x)) (*.f64 a x)))","(/.f64 (-.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 a x) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x)) (*.f64 (*.f64 a x) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x)))) (-.f64 (*.f64 a x) (*.f64 (*.f64 a x) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) (*.f64 a x)) #s(literal 3 binary64)) (pow.f64 (*.f64 a x) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) (*.f64 a x)) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) (*.f64 a x)) (-.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) (*.f64 a x)) (*.f64 a x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) (*.f64 a x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) (*.f64 a x)) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) (*.f64 a x))) (*.f64 (*.f64 a x) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) (*.f64 a x))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 a x) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x)) #s(literal 3 binary64)) (pow.f64 (*.f64 a x) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 a x) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x)) (*.f64 (*.f64 a x) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x)) (-.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 a x) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x)) (*.f64 a x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 a x) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 a x) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (*.f64 a x) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x)) (*.f64 (*.f64 a x) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x))) (*.f64 (*.f64 a x) (*.f64 (*.f64 a x) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 a x))) (neg.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 a x))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x))))","(/.f64 (neg.f64 (*.f64 (*.f64 a x) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (*.f64 a x) (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 a x)) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 a x)) (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x)))","(/.f64 (*.f64 (*.f64 a x) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64)))","(/.f64 (*.f64 (*.f64 a x) (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x)))","(/.f64 (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) x) (pow.f64 a #s(literal -1 binary64)))","(/.f64 (*.f64 a x) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 a x))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 a x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64)) (*.f64 (*.f64 a x) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x)) (*.f64 (*.f64 a x) (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)))))","(fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) (*.f64 a x) (*.f64 a x))","(fma.f64 (*.f64 a x) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) (*.f64 a x))","(fma.f64 (*.f64 a x) #s(literal 1 binary64) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) (*.f64 a x)))","(fma.f64 (*.f64 a x) #s(literal 1 binary64) (*.f64 (*.f64 a x) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x)))","(fma.f64 a x (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) (*.f64 a x)))","(fma.f64 a x (*.f64 (*.f64 a x) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x)))","(fma.f64 x a (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) (*.f64 a x)))","(fma.f64 x a (*.f64 (*.f64 a x) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x)))","(fma.f64 #s(literal 1 binary64) (*.f64 a x) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) (*.f64 a x)))","(fma.f64 #s(literal 1 binary64) (*.f64 a x) (*.f64 (*.f64 a x) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x)))","(+.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) (*.f64 a x)) (*.f64 a x))","(+.f64 (*.f64 (*.f64 a x) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x)) (*.f64 a x))","(+.f64 (*.f64 a x) (*.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) (*.f64 a x)))","(+.f64 (*.f64 a x) (*.f64 (*.f64 a x) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64)))))","(*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x)))))","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x)))))","(*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64))) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64)) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x))) (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal -1/4 binary64)) (*.f64 a x)) (pow.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 1/8 binary64)) (*.f64 a x)) (pow.f64 (fma.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) x) a) #s(literal 1/2 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) a #s(literal 1 binary64))","(fma.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))) a #s(literal 1 binary64))","(fma.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 a x) #s(literal 1 binary64))","(fma.f64 (*.f64 a x) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) #s(literal 1 binary64))","(fma.f64 a (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) x) #s(literal 1 binary64))","(fma.f64 x (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x))) (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 2 binary64)) (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64))) (neg.f64 (pow.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x))","(*.f64 (*.f64 (fma.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal -1/4 binary64)) a) (pow.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 1/8 binary64)) a) (pow.f64 (fma.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) x) a) #s(literal 1/2 binary64)))) #s(literal -1 binary64)))","(*.f64 (*.f64 a (fma.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal -1/4 binary64))) (pow.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 a (fma.f64 #s(literal 1/216 binary64) (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 1/8 binary64))) (pow.f64 (fma.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) x) a) #s(literal 1/2 binary64)))) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) #s(literal 1 binary64))","(*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a)","(*.f64 a (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) x) a) a) (*.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) x) a) a)) (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64))) (-.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) x) a) a) (*.f64 #s(literal 1/2 binary64) a)))","(/.f64 (-.f64 (*.f64 (*.f64 a (*.f64 (*.f64 #s(literal 1/6 binary64) x) a)) (*.f64 a (*.f64 (*.f64 #s(literal 1/6 binary64) x) a))) (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64))) (-.f64 (*.f64 a (*.f64 (*.f64 #s(literal 1/6 binary64) x) a)) (*.f64 #s(literal 1/2 binary64) a)))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) x) a) a) (*.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) x) a) a))) (-.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) x) a) a)))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (*.f64 (*.f64 a (*.f64 (*.f64 #s(literal 1/6 binary64) x) a)) (*.f64 a (*.f64 (*.f64 #s(literal 1/6 binary64) x) a)))) (-.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 a (*.f64 (*.f64 #s(literal 1/6 binary64) x) a))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) x) a) a) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) x) a) a) (*.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) x) a) a) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) x) a) a) (*.f64 #s(literal 1/2 binary64) a)))))","(/.f64 (+.f64 (pow.f64 (*.f64 a (*.f64 (*.f64 #s(literal 1/6 binary64) x) a)) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 3 binary64))) (fma.f64 (*.f64 a (*.f64 (*.f64 #s(literal 1/6 binary64) x) a)) (*.f64 a (*.f64 (*.f64 #s(literal 1/6 binary64) x) a)) (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (*.f64 (*.f64 a (*.f64 (*.f64 #s(literal 1/6 binary64) x) a)) (*.f64 #s(literal 1/2 binary64) a)))))","(/.f64 (fma.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) x) a) a) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) x) a) a) (*.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) x) a) a)) (*.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) x) a) a)))))","(/.f64 (fma.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal 1/8 binary64) (pow.f64 (*.f64 a (*.f64 (*.f64 #s(literal 1/6 binary64) x) a)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) a) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 a (*.f64 (*.f64 #s(literal 1/6 binary64) x) a)) (*.f64 a (*.f64 (*.f64 #s(literal 1/6 binary64) x) a))) (*.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 a (*.f64 (*.f64 #s(literal 1/6 binary64) x) a))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal -1/4 binary64)) a)) (neg.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 1/8 binary64)) a)) (neg.f64 (fma.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) x) a) #s(literal 1/2 binary64))))))","(/.f64 (neg.f64 (*.f64 a (fma.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal -1/4 binary64)))) (neg.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (*.f64 a (fma.f64 #s(literal 1/216 binary64) (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 1/8 binary64)))) (neg.f64 (fma.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) x) a) #s(literal 1/2 binary64))))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal -1/4 binary64)) a) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal -1/2 binary64)))","(/.f64 (*.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 1/8 binary64)) a) (fma.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) x) a) #s(literal 1/2 binary64)))))","(/.f64 (*.f64 a (fma.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal -1/4 binary64))) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal -1/2 binary64)))","(/.f64 (*.f64 a (fma.f64 #s(literal 1/216 binary64) (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 1/8 binary64))) (fma.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) x) a) #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(/.f64 a (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal -1/4 binary64)) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) x) a) #s(literal 1/2 binary64)))) (*.f64 (fma.f64 #s(literal 1/216 binary64) (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 1/8 binary64)) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal -1/2 binary64)) (*.f64 a (fma.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal -1/4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) x) a) #s(literal 1/2 binary64)))) (*.f64 a (fma.f64 #s(literal 1/216 binary64) (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal 1/8 binary64)))))","(fma.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) x) a) a (*.f64 #s(literal 1/2 binary64) a))","(fma.f64 #s(literal 1/2 binary64) a (*.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) x) a) a))","(fma.f64 #s(literal 1/2 binary64) a (*.f64 a (*.f64 (*.f64 #s(literal 1/6 binary64) x) a)))","(fma.f64 a (*.f64 (*.f64 #s(literal 1/6 binary64) x) a) (*.f64 #s(literal 1/2 binary64) a))","(fma.f64 a #s(literal 1/2 binary64) (*.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) x) a) a))","(fma.f64 a #s(literal 1/2 binary64) (*.f64 a (*.f64 (*.f64 #s(literal 1/6 binary64) x) a)))","(+.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) x) a) a) (*.f64 #s(literal 1/2 binary64) a))","(+.f64 (*.f64 a (*.f64 (*.f64 #s(literal 1/6 binary64) x) a)) (*.f64 #s(literal 1/2 binary64) a))","(+.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 (*.f64 (*.f64 #s(literal 1/6 binary64) x) a) a))","(+.f64 (*.f64 #s(literal 1/2 binary64) a) (*.f64 a (*.f64 (*.f64 #s(literal 1/6 binary64) x) a)))","(*.f64 (pow.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) x)) #s(literal -1/2 binary64)) (pow.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) x)) #s(literal -1/2 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) x))))","(*.f64 (pow.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) x)) #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) x)) #s(literal -1 binary64)))","(pow.f64 (exp.f64 (log.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) x)))) #s(literal -1 binary64))","(pow.f64 (*.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) x)) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) x))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) x)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) x)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) x))))","(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) x)))","(neg.f64 (/.f64 #s(literal -1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) x))))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) x))))","(exp.f64 (*.f64 (log.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) x))) #s(literal -1 binary64)))","(*.f64 (neg.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) x))) #s(literal -1 binary64))","(*.f64 #s(literal -1 binary64) (neg.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) x))))","(*.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) x)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) x)))","(pow.f64 (pow.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) x)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) x)) #s(literal 1 binary64))","#s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) x))","(/.f64 (neg.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) x))) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) x)) #s(literal -1 binary64))))","(/.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) x)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) x)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) x)) #s(literal -1 binary64)))","(neg.f64 (neg.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) x))))","(-.f64 #s(literal 0 binary64) (/.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) x)) #s(literal -1 binary64)))","(-.f64 #s(literal 0 binary64) (neg.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) x))))","(exp.f64 (neg.f64 (*.f64 (log.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) x))) #s(literal -1 binary64))))","(*.f64 (/.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) a)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64))) x) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) a)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)))))","(*.f64 (pow.f64 (/.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (pow.f64 a #s(literal -2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 x (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) a)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (pow.f64 a #s(literal -2 binary64))) x) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a)) #s(literal -1 binary64)))","(*.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64))) x) (pow.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) a)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (pow.f64 a #s(literal -2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a)) x)))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (pow.f64 a #s(literal -2 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 x (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a)))))","(*.f64 (pow.f64 x #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) a)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64))) x)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64))) (/.f64 #s(literal 1 binary64) (*.f64 x (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) a)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64))))))","(*.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64)))) (/.f64 #s(literal -1 binary64) x))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal 1 binary64) (neg.f64 (/.f64 x (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64)))))))","(*.f64 #s(literal -1 binary64) (/.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64)))) x))","(*.f64 (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) x) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a)) (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) (pow.f64 x #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) x))","(pow.f64 (/.f64 x (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (pow.f64 a #s(literal -2 binary64))) x)) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a))))","(/.f64 (neg.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64))) x)) (neg.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) a)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)))))","(/.f64 (/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (pow.f64 a #s(literal -2 binary64))) x) (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a)))","(/.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64))) x) (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) a)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (pow.f64 a #s(literal -2 binary64)))) (neg.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (pow.f64 a #s(literal -2 binary64)))) (neg.f64 (*.f64 x (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64)))) (neg.f64 (*.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) a)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64))) x)))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64)))) (neg.f64 (*.f64 x (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) a)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (pow.f64 a #s(literal -2 binary64))) (*.f64 x (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (pow.f64 a #s(literal -2 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a)) x))","(/.f64 (pow.f64 x #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) #s(literal -1 binary64)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64))) (*.f64 x (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) a)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64))) (*.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) a)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64))) x))","(/.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64)))) (neg.f64 x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 x (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))))))","(/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) x)","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a)) (/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (pow.f64 a #s(literal -2 binary64))) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) a)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64))) (/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64))) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a)) x) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (pow.f64 a #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) a)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64))) x) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a))) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (pow.f64 a #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 x (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) a)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)))) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 x (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64)))))))","(/.f64 #s(literal 1 binary64) (/.f64 x (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64)))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64)))) x))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 x (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a)))) (/.f64 (pow.f64 a #s(literal -2 binary64)) (*.f64 x (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a)))))","(-.f64 (/.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a))) x) (/.f64 (/.f64 (pow.f64 a #s(literal -2 binary64)) (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a))) x))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 x)) (/.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64)))) x))","(-.f64 #s(literal 0 binary64) (/.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64)))) x))","(exp.f64 (*.f64 (log.f64 (/.f64 x (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (pow.f64 a #s(literal -2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a)))))","(*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) a)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64))))))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (pow.f64 a #s(literal -2 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 a #s(literal -2 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (/.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) a)))))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64))) (pow.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) a)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))))","(pow.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 a #s(literal -2 binary64)) (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a))) (fma.f64 (/.f64 (pow.f64 a #s(literal -2 binary64)) (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a))) (/.f64 (pow.f64 a #s(literal -2 binary64)) (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a))) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a))) (/.f64 (pow.f64 a #s(literal -2 binary64)) (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a)))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (pow.f64 a #s(literal -2 binary64))))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64))))) (neg.f64 (neg.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) a)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a)) (pow.f64 a #s(literal -2 binary64)))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a)) (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a))))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal -1/4 binary64)) x) (neg.f64 a) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64)) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64)) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal -1/4 binary64)) x) a (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64)) a))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal -1/8 binary64)) x) (neg.f64 a) (*.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 a x) #s(literal -1/24 binary64)))) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 a x) #s(literal -1/24 binary64)))) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal -1/8 binary64)) x) a (*.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 a x) #s(literal -1/24 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 a x) #s(literal -1/24 binary64)))) a))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 1/144 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal -1/4 binary64))) (neg.f64 a) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64)) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64)) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 1/144 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal -1/4 binary64))) a (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64)) a))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal -1/8 binary64))) (neg.f64 a) (*.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 a x) #s(literal -1/24 binary64)))) #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 a x) #s(literal -1/24 binary64)))) (neg.f64 a)))","(/.f64 (fma.f64 (*.f64 x (fma.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal -1/8 binary64))) a (*.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 a x) #s(literal -1/24 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 a x) #s(literal -1/24 binary64)))) a))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64)) (*.f64 (neg.f64 a) (*.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal -1/4 binary64)) x))) (*.f64 (neg.f64 a) (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 #s(literal 1/144 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 a x) #s(literal -1/24 binary64)))) (*.f64 (neg.f64 a) (*.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal -1/8 binary64)) x))) (*.f64 (neg.f64 a) (fma.f64 #s(literal 1/144 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 a x) #s(literal -1/24 binary64))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64)) (*.f64 (neg.f64 a) (*.f64 x (fma.f64 #s(literal 1/144 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal -1/4 binary64))))) (*.f64 (neg.f64 a) (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 #s(literal -1 binary64) (fma.f64 #s(literal 1/144 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 a x) #s(literal -1/24 binary64)))) (*.f64 (neg.f64 a) (*.f64 x (fma.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal -1/8 binary64))))) (*.f64 (neg.f64 a) (fma.f64 #s(literal 1/144 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 a x) #s(literal -1/24 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64)) (*.f64 a (*.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal -1/4 binary64)) x))) (*.f64 a (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/144 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 a x) #s(literal -1/24 binary64)))) (*.f64 a (*.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal -1/8 binary64)) x))) (*.f64 a (fma.f64 #s(literal 1/144 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 a x) #s(literal -1/24 binary64))))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64)) (*.f64 a (*.f64 x (fma.f64 #s(literal 1/144 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal -1/4 binary64))))) (*.f64 a (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64))))","(/.f64 (fma.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/144 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 a x) #s(literal -1/24 binary64)))) (*.f64 a (*.f64 x (fma.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal -1/8 binary64))))) (*.f64 a (fma.f64 #s(literal 1/144 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 a x) #s(literal -1/24 binary64))))))","(/.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64))) (-.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (pow.f64 a #s(literal -2 binary64)))) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64)))) (neg.f64 (+.f64 (pow.f64 a #s(literal -2 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (/.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) a)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64)))) (neg.f64 (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) a)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (pow.f64 a #s(literal -2 binary64))) (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a)))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64))) (+.f64 (pow.f64 a #s(literal -2 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (/.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) a))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64))) (+.f64 (-.f64 (pow.f64 a #s(literal -2 binary64)) (/.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) a)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x)) (-.f64 (pow.f64 a #s(literal -2 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 a #s(literal -2 binary64)) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (/.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) a))) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 3 binary64)) (pow.f64 a #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64))) #s(literal -1 binary64)))","(neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64)))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal -1/4 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal -1/8 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 a x) #s(literal -1/24 binary64)))) #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (*.f64 x (fma.f64 #s(literal 1/144 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal -1/4 binary64))) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (*.f64 x (fma.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal -1/8 binary64))) (pow.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 a x) #s(literal -1/24 binary64)))) #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (pow.f64 a #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1/2 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x))","(fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 a #s(literal -2 binary64)) (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a)))))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) a) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 1 binary64) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x))","(fma.f64 x (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (pow.f64 a #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x))","(-.f64 (/.f64 (pow.f64 a #s(literal -2 binary64)) (-.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (-.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a))) (/.f64 (pow.f64 a #s(literal -2 binary64)) (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a))))","(-.f64 #s(literal 0 binary64) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (pow.f64 a #s(literal -1 binary64)))))","(-.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) (/.f64 #s(literal -1 binary64) a))","(+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a))) (neg.f64 (/.f64 (pow.f64 a #s(literal -2 binary64)) (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal -1 binary64) a)))))","(+.f64 (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x) (pow.f64 a #s(literal -1 binary64)))","(+.f64 (pow.f64 a #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x))","(*.f64 (*.f64 a x) #s(literal 1 binary64))","(*.f64 a x)","(*.f64 x a)","(*.f64 #s(literal 1 binary64) (*.f64 a x))","(/.f64 x (pow.f64 a #s(literal -1 binary64)))","(fma.f64 (*.f64 a x) #s(literal 1 binary64) #s(literal 0 binary64))","(fma.f64 a x #s(literal 0 binary64))","(fma.f64 x a #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 a x) #s(literal 0 binary64))","(+.f64 (log.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 1/2 binary64) a))) (log.f64 (pow.f64 (exp.f64 x) (*.f64 #s(literal 1/2 binary64) a))))","(+.f64 (log.f64 (pow.f64 (exp.f64 a) (*.f64 x #s(literal 1/2 binary64)))) (log.f64 (pow.f64 (exp.f64 a) (*.f64 x #s(literal 1/2 binary64)))))","(+.f64 #s(literal 0 binary64) (*.f64 a x))","(+.f64 (*.f64 a x) #s(literal 0 binary64))","(log.f64 (pow.f64 (exp.f64 x) a))","(*.f64 #s(literal 1/6 binary64) x)","(*.f64 x #s(literal 1/6 binary64))","(*.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 a x)) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 1/12 binary64) (*.f64 a x)))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal -1/4 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64)))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal -1/8 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 a x) #s(literal -1/24 binary64)))))))","(*.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal -1/4 binary64)) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal -1/8 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 a x)) #s(literal 2 binary64)) (*.f64 (*.f64 a x) #s(literal -1/24 binary64))))))","(*.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal -1/8 binary64)) (pow.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 a x) #s(literal -1/24 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 a x)) #s(literal 2 binary64)) (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 a x)) #s(literal 2 binary64)) (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64))) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 a x)) #s(literal 2 binary64)) (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64))) (fma.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64))) (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 a x)) #s(literal 2 binary64)) (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 a x)) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 1/12 binary64) (*.f64 a x)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal -1/4 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal -1/8 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 a x) #s(literal -1/24 binary64)))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 a x)) #s(literal 2 binary64)) (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64)) (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 a x)) #s(literal 2 binary64))) (-.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 1/12 binary64) (*.f64 a x))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal -1/4 binary64))) (neg.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal -1/8 binary64))) (neg.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 a x)) #s(literal 2 binary64)) (*.f64 (*.f64 a x) #s(literal -1/24 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal -1/8 binary64))) (neg.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 a x) #s(literal -1/24 binary64))))))","(/.f64 (fma.f64 #s(literal 1/144 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) #s(literal -1/4 binary64)) (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64)))","(/.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal -1/8 binary64)) (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 a x)) #s(literal 2 binary64)) (*.f64 (*.f64 a x) #s(literal -1/24 binary64)))))","(/.f64 (fma.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal -1/8 binary64)) (fma.f64 #s(literal 1/144 binary64) (pow.f64 (*.f64 a x) #s(literal 2 binary64)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 a x) #s(literal -1/24 binary64)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 1/12 binary64) (*.f64 a x))) (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 a x)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 a x)) #s(literal 2 binary64)) (*.f64 (*.f64 a x) #s(literal -1/24 binary64)))) (fma.f64 #s(literal 1/1728 binary64) (pow.f64 (*.f64 a x) #s(literal 3 binary64)) #s(literal -1/8 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64))))","(fma.f64 (*.f64 #s(literal 1/12 binary64) x) a #s(literal -1/2 binary64))","(fma.f64 (*.f64 #s(literal 1/12 binary64) a) x #s(literal -1/2 binary64))","(fma.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 a x)) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64)))))","(fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64))","(fma.f64 (*.f64 a x) #s(literal 1/12 binary64) #s(literal -1/2 binary64))","(fma.f64 a (*.f64 x #s(literal 1/12 binary64)) #s(literal -1/2 binary64))","(fma.f64 x (*.f64 #s(literal 1/12 binary64) a) #s(literal -1/2 binary64))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 1/12 binary64) (*.f64 a x)))) (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 a x)) #s(literal 2 binary64)) (-.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 1/12 binary64) (*.f64 a x)))))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 a x)) #s(literal 2 binary64)) (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64))))","(+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 a x)) #s(literal 2 binary64)) (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64))) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal 1/2 binary64)))))","(+.f64 (*.f64 #s(literal 1/12 binary64) (*.f64 a x)) #s(literal -1/2 binary64))","(+.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 1/12 binary64) (*.f64 a x)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":341.251953125,"type":"rewrite"},{"compiler":[[23305,2844]],"memory":[[4146352,66054976]],"time":98.72509765625,"type":"eval"},{"alts":[["(pow.f64 (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal 1/2 binary64)) #s(literal 2 binary64))","fresh",40.60775375976844,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 x a))))","done",0.5416603781410524,"binary64"],["(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal 1 binary64) a)) x)))","done",20.706009276772882,"binary64"],["(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 #s(approx (+ (* (+ (* 1/12 (* a x)) -1/2) x) (/ 1 a)) (*.f64 #s(literal 1/12 binary64) (*.f64 (*.f64 x x) a))) x)))","fresh",61.822436421669984,"binary64"],["(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 #s(approx (+ (* -1/2 x) (/ 1 a)) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) a #s(literal 1 binary64)) a)) x)))","fresh",19.079765448923947,"binary64"],["(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 #s(approx (+ (* -1/2 x) (/ 1 a)) (*.f64 #s(literal -1/2 binary64) x)) x)))","fresh",58.39792225062501,"binary64"],["(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) #s(approx (/ (+ (* (+ (* 1/12 (* a x)) -1/2) x) (/ 1 a)) x) (*.f64 #s(literal 1/12 binary64) (*.f64 a x)))))","fresh",61.435250575576354,"binary64"],["(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) #s(approx (/ (+ (* -1/2 x) (/ 1 a)) x) (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 a x)) #s(literal 1/2 binary64)))))","fresh",17.89794710488935,"binary64"],["(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a x) a) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","done",49.894035542386035,"binary64"],["(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","done",49.08004335184552,"binary64"],["(-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) x))) #s(literal 1 binary64))","done",61.25065934079225,"binary64"],["(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","done",50.06914282029762,"binary64"],["(expm1.f64 (*.f64 x a))","done",0.01171875,"binary64"],["#s(approx (- (exp (* x a)) 1) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) (*.f64 a x) (*.f64 a x)))","done",21.09555066455171,"binary64"],["#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 a x) #s(literal 1/2 binary64) #s(literal 1 binary64)) (*.f64 a x)))","fresh",21.04614692364237,"binary64"],["#s(approx (- (exp (* x a)) 1) (*.f64 a (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x)))","done",21.05779511473008,"binary64"],["#s(approx (- (exp (* x a)) 1) (*.f64 a #s(approx (+ (* (* (* 1/2 a) x) x) x) (*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 a x)) x))))","fresh",50.415441402600685,"binary64"],["#s(approx (- (exp (* x a)) 1) (*.f64 a x))","done",20.43322806500351,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 a x) #s(literal 1 binary64)) (*.f64 x a)))","fresh",20.32273164663939,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a)))","fresh",20.95639425523387,"binary64"],["#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (*.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a)) (*.f64 x a)))","fresh",49.777829710005655,"binary64"]],"compiler":[[596,166],[8,8],[8,7],[24,17],[34,24],[29,20],[24,18],[32,23],[28,20],[18,12],[11,8],[30,21],[8,7],[4,4],[19,12],[17,12],[17,12],[26,18],[10,8],[22,16],[27,18],[35,24]],"count":[[705,21]],"kept":[{"done":[8,7],"fresh":[4,2],"new":[688,9],"picked":[5,3]}],"memory":[[-97616,36031488]],"min-error":[[0.0,"binary64"]],"time":28.7109375,"type":"prune"},{"accuracy":[0.01171875],"baseline":[0.01171875],"branch":[["a",0.01171875,1,"binary64"],["x",0.01171875,1,"binary64"],["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))",0.01171875,1,"binary64"],["(exp.f64 (*.f64 a x))",0.01171875,1,"binary64"],["(*.f64 a x)",0.01171875,1,"binary64"]],"compiler":[[1,2],[1,2],[6,6],[4,4],[3,3]],"count":[[31,1]],"inputs":[["(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (- (exp (* a x)) 1) (*.f64 x a))","#s(approx (- (exp (* x a)) 1) (*.f64 a x))","(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (exp (* x a)) 1) (*.f64 a #s(approx (+ (* (* (* 1/2 a) x) x) x) (*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 a x)) x))))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x))","#s(approx (- (exp (* x a)) 1) (*.f64 a (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x)))","#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) x #s(literal 1 binary64)) a) x))","#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 a x) #s(literal 1/2 binary64) #s(literal 1 binary64)) (*.f64 a x)))","#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x))","(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) #s(approx (/ (+ (* (+ (* 1/12 (* a x)) -1/2) x) (/ 1 a)) x) (*.f64 #s(literal 1/12 binary64) (*.f64 a x)))))","(-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) x))) #s(literal 1 binary64))","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a x) a) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (exp (* x a)) 1) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) (*.f64 a x) (*.f64 a x)))","(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 #s(literal 1 binary64) (*.f64 a x))))","(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 #s(approx (+ (* -1/2 x) (/ 1 a)) (*.f64 #s(literal -1/2 binary64) x)) x)))","(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) #s(approx (/ (+ (* -1/2 x) (/ 1 a)) x) (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 a x)) #s(literal 1/2 binary64)))))","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (*.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a)) (*.f64 x a)))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 a x) #s(literal 1 binary64)) (*.f64 x a)))","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 #s(approx (+ (* (+ (* 1/12 (* a x)) -1/2) x) (/ 1 a)) (*.f64 #s(literal 1/12 binary64) (*.f64 (*.f64 x x) a))) x)))","(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal 1 binary64) a)) x)))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a)))","(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 #s(approx (+ (* -1/2 x) (/ 1 a)) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) a #s(literal 1 binary64)) a)) x)))","(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal 1 binary64) a)) x)))","(expm1.f64 (*.f64 x a))","(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (expm1.f64 (*.f64 x a))))","(pow.f64 (pow.f64 (expm1.f64 (*.f64 a x)) #s(literal 1/2 binary64)) #s(literal 2 binary64))"]],"memory":[[5124880,21089536]],"oracle":[63.58823158405782],"outputs":[["(expm1.f64 (*.f64 x a))"]],"repr":["binary64"],"time":43.386962890625,"times":[[7.217041015625,"a"],[9.052001953125,"x"],[8.52197265625,"(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))"],[8.8671875,"(exp.f64 (*.f64 a x))"],[7.049072265625,"(*.f64 a x)"]],"type":"regimes"},{"accuracy":[17.897947104889347],"baseline":[17.89794710488935],"branch":[["a",17.89794710488935,1,"binary64"],["x",17.89794710488935,1,"binary64"],["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))",17.89794710488935,1,"binary64"],["(exp.f64 (*.f64 a x))",17.897947104889347,1,"binary64"],["(*.f64 a x)",17.897947104889347,1,"binary64"]],"compiler":[[1,2],[1,2],[6,6],[4,4],[3,3]],"count":[[27,1]],"inputs":[["(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (- (exp (* a x)) 1) (*.f64 x a))","#s(approx (- (exp (* x a)) 1) (*.f64 a x))","(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (exp (* x a)) 1) (*.f64 a #s(approx (+ (* (* (* 1/2 a) x) x) x) (*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 a x)) x))))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x))","#s(approx (- (exp (* x a)) 1) (*.f64 a (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x)))","#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) x #s(literal 1 binary64)) a) x))","#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 a x) #s(literal 1/2 binary64) #s(literal 1 binary64)) (*.f64 a x)))","#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x))","(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) #s(approx (/ (+ (* (+ (* 1/12 (* a x)) -1/2) x) (/ 1 a)) x) (*.f64 #s(literal 1/12 binary64) (*.f64 a x)))))","(-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) x))) #s(literal 1 binary64))","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a x) a) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (exp (* x a)) 1) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) (*.f64 a x) (*.f64 a x)))","(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 #s(literal 1 binary64) (*.f64 a x))))","(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 #s(approx (+ (* -1/2 x) (/ 1 a)) (*.f64 #s(literal -1/2 binary64) x)) x)))","(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) #s(approx (/ (+ (* -1/2 x) (/ 1 a)) x) (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 a x)) #s(literal 1/2 binary64)))))","#s(approx (- (exp (* a x)) 1) (*.f64 #s(approx (+ (* (* (+ (* (* 1/6 x) a) 1/2) a) x) 1) (*.f64 (*.f64 x (fma.f64 (*.f64 #s(literal 1/6 binary64) a) x #s(literal 1/2 binary64))) a)) (*.f64 x a)))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a)))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) (*.f64 a x) #s(literal 1 binary64)) (*.f64 x a)))","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/6 binary64) x) a #s(literal 1/2 binary64)) a) x #s(literal 1 binary64)) (*.f64 x a) #s(literal 1 binary64))) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 #s(approx (+ (* (+ (* 1/12 (* a x)) -1/2) x) (/ 1 a)) (*.f64 #s(literal 1/12 binary64) (*.f64 (*.f64 x x) a))) x)))","(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 #s(literal -1/2 binary64) x (/.f64 #s(literal 1 binary64) a)) x)))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/24 binary64) x) a #s(literal 1/6 binary64)) (*.f64 x a) #s(literal 1/2 binary64)) x) a #s(literal 1 binary64)) (*.f64 x a)))","(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 #s(approx (+ (* -1/2 x) (/ 1 a)) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) x) a #s(literal 1 binary64)) a)) x)))","(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) (*.f64 a x) #s(literal -1/2 binary64)) x (/.f64 #s(literal 1 binary64) a)) x)))"]],"memory":[[-8455872,19244128]],"oracle":[63.02722931063774],"outputs":[["(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) #s(approx (/ (+ (* -1/2 x) (/ 1 a)) x) (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 a x)) #s(literal 1/2 binary64)))))"]],"repr":["binary64"],"time":47.64892578125,"times":[[8.408203125,"a"],[7.4130859375,"x"],[7.179931640625,"(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))"],[6.950927734375,"(exp.f64 (*.f64 a x))"],[7.529052734375,"(*.f64 a x)"]],"type":"regimes"},{"accuracy":[17.335366016264118],"baseline":[20.43322806500351],"branch":[["a",20.433228065003505,1,"binary64"],["x",20.433228065003505,1,"binary64"],["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))",17.335366016264118,2,"binary64"],["(exp.f64 (*.f64 a x))",17.335366016264118,2,"binary64"],["(*.f64 a x)",17.335366016264118,2,"binary64"]],"compiler":[[1,2],[1,2],[6,6],[4,4],[3,3]],"count":[[17,2]],"inputs":[["(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (- (exp (* a x)) 1) (*.f64 x a))","#s(approx (- (exp (* x a)) 1) (*.f64 a x))","(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (exp (* x a)) 1) (*.f64 a #s(approx (+ (* (* (* 1/2 a) x) x) x) (*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 a x)) x))))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x))","#s(approx (- (exp (* x a)) 1) (*.f64 a (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x)))","#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) x #s(literal 1 binary64)) a) x))","#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 a x) #s(literal 1/2 binary64) #s(literal 1 binary64)) (*.f64 a x)))","#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x))","(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) #s(approx (/ (+ (* (+ (* 1/12 (* a x)) -1/2) x) (/ 1 a)) x) (*.f64 #s(literal 1/12 binary64) (*.f64 a x)))))","(-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) x))) #s(literal 1 binary64))","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a x) a) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (exp (* x a)) 1) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) (*.f64 a x) (*.f64 a x)))","(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 #s(literal 1 binary64) (*.f64 a x))))","(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 #s(approx (+ (* -1/2 x) (/ 1 a)) (*.f64 #s(literal -1/2 binary64) x)) x)))"]],"memory":[[6367424,14460448]],"oracle":[62.98769953365995],"outputs":[["(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 #s(approx (+ (* -1/2 x) (/ 1 a)) (*.f64 #s(literal -1/2 binary64) x)) x)))","#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 a x) #s(literal 1/2 binary64) #s(literal 1 binary64)) (*.f64 a x)))"]],"repr":["binary64"],"time":28.31103515625,"times":[[5.463134765625,"a"],[5.681884765625,"x"],[5.0029296875,"(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))"],[3.833984375,"(exp.f64 (*.f64 a x))"],[6.33203125,"(*.f64 a x)"]],"type":"regimes"},{"accuracy":[20.433228065003505],"baseline":[20.43322806500351],"branch":[["a",20.433228065003505,1,"binary64"],["x",20.433228065003505,1,"binary64"],["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))",20.43322806500351,1,"binary64"],["(exp.f64 (*.f64 a x))",20.43322806500351,1,"binary64"],["(*.f64 a x)",20.433228065003508,1,"binary64"]],"compiler":[[1,2],[1,2],[6,6],[4,4],[3,3]],"count":[[16,1]],"inputs":[["(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (- (exp (* a x)) 1) (*.f64 x a))","#s(approx (- (exp (* x a)) 1) (*.f64 a x))","(-.f64 #s(approx (exp (* a x)) (fma.f64 x a #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (exp (* x a)) 1) (*.f64 a #s(approx (+ (* (* (* 1/2 a) x) x) x) (*.f64 (*.f64 #s(literal 1/2 binary64) (*.f64 a x)) x))))","#s(approx (- (exp (* a x)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x))","#s(approx (- (exp (* x a)) 1) (*.f64 a (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) x x)))","#s(approx (- (exp (* x a)) 1) (*.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) a) x #s(literal 1 binary64)) a) x))","#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 a x) #s(literal 1/2 binary64) #s(literal 1 binary64)) (*.f64 a x)))","#s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x))","(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) #s(approx (/ (+ (* (+ (* 1/12 (* a x)) -1/2) x) (/ 1 a)) x) (*.f64 #s(literal 1/12 binary64) (*.f64 a x)))))","(-.f64 #s(approx (exp (* a x)) #s(approx (+ (* (+ (* (* (* a a) x) 1/2) a) x) 1) (*.f64 (*.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64)) x))) #s(literal 1 binary64))","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a a) x) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","(-.f64 #s(approx (exp (* a x)) (fma.f64 (fma.f64 (*.f64 (*.f64 a x) a) #s(literal 1/2 binary64) a) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (exp (* x a)) 1) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) a) x) (*.f64 a x) (*.f64 a x)))","(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 #s(literal 1 binary64) (*.f64 a x))))"]],"memory":[[-3661664,13891200]],"oracle":[62.97106522275011],"outputs":[["#s(approx (- (exp (* a x)) 1) (*.f64 x a))"]],"repr":["binary64"],"time":22.344970703125,"times":[[4.055908203125,"a"],[4.094970703125,"x"],[3.700927734375,"(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))"],[3.929931640625,"(exp.f64 (*.f64 a x))"],[4.72900390625,"(*.f64 a x)"]],"type":"regimes"},{"accuracy":[50.06914282029755],"baseline":[50.06914282029762],"branch":[["(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))",50.0691428202977,1,"binary64"],["(exp.f64 (*.f64 a x))",50.0691428202977,1,"binary64"],["(*.f64 a x)",50.069142820297714,1,"binary64"],["a",50.069142820297664,1,"binary64"],["x",50.06914282029755,1,"binary64"]],"compiler":[[6,6],[4,4],[3,3],[1,2],[1,2]],"count":[[1,1]],"inputs":[["(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))"]],"link":["."],"memory":[[-1616032,6723648]],"name":["expax (section 3.5)"],"oracle":[50.06914282029762],"outputs":[["(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))"]],"repr":["binary64"],"time":5.858154296875,"times":[[0.947998046875,"(-.f64 (exp.f64 (*.f64 a x)) #s(literal 1 binary64))"],[0.9150390625,"(exp.f64 (*.f64 a x))"],[1.1201171875,"(*.f64 a x)"],[1.046875,"a"],[1.06298828125,"x"]],"type":"regimes"},{"bstep":[[0.198974609375,-15.459339425312157,-4.239847744084807e-5]],"compiler":[[6,6],[3,3]],"memory":[[186640,186640]],"method":["left-value"],"time":0.64794921875,"type":"bsearch"},{"egraph":[[9,4740,97,0.036704437],[8,1734,97,0.017325211],[7,694,97,0.008242334],[6,222,97,0.003698947],[5,139,97,0.001298191],[4,101,97,0.001292776],[3,78,97,0.000929868],[2,65,97,0.000721697],[1,58,97,0.000680796],[0,38,97,0.000613227]],"inputs":[["(expm1.f64 (*.f64 x a))","(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) #s(approx (/ (+ (* -1/2 x) (/ 1 a)) x) (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 a x)) #s(literal 1/2 binary64)))))","(if (<=.f64 (*.f64 a x) #s(literal -10 binary64)) (/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 #s(approx (+ (* -1/2 x) (/ 1 a)) (*.f64 #s(literal -1/2 binary64) x)) x))) #s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 a x) #s(literal 1/2 binary64) #s(literal 1 binary64)) (*.f64 a x))))","#s(approx (- (exp (* a x)) 1) (*.f64 x a))","(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))"]],"memory":[[4129456,12398448]],"method":["egg-herbie"],"outputs":[["(expm1.f64 (*.f64 x a))","(/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) #s(approx (/ (+ (* -1/2 x) (/ 1 a)) x) (-.f64 (/.f64 #s(literal 1 binary64) (*.f64 a x)) #s(literal 1/2 binary64)))))","(pow.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) #s(approx (/ (+ (* -1/2 x) (/ 1 a)) x) (-.f64 (pow.f64 (*.f64 a x) #s(literal -1 binary64)) #s(literal 1/2 binary64)))) #s(literal -1 binary64))","(if (<=.f64 (*.f64 a x) #s(literal -10 binary64)) (/.f64 #s(literal 1 binary64) #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 #s(approx (+ (* -1/2 x) (/ 1 a)) (*.f64 #s(literal -1/2 binary64) x)) x))) #s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 a x) #s(literal 1/2 binary64) #s(literal 1 binary64)) (*.f64 a x))))","(if (<=.f64 (*.f64 a x) #s(literal -10 binary64)) (pow.f64 #s(approx (/ 1 (- (exp (* x a)) 1)) (/.f64 #s(approx (+ (* -1/2 x) (/ 1 a)) (*.f64 #s(literal -1/2 binary64) x)) x)) #s(literal -1 binary64)) #s(approx (- (exp (* x a)) 1) (*.f64 (fma.f64 (*.f64 a x) #s(literal 1/2 binary64) #s(literal 1 binary64)) (*.f64 a x))))","#s(approx (- (exp (* a x)) 1) (*.f64 x a))","#s(approx (- (exp (* x a)) 1) (*.f64 x a))","(-.f64 #s(approx (exp (* a x)) #s(literal 1 binary64)) #s(literal 1 binary64))"]],"stop":[["node limit",1]],"time":96.320068359375,"type":"simplify"},{"compiler":[[97,40]],"memory":[[-7622928,1195760]],"stop":[["fuel",1]],"time":9.64794921875,"type":"soundness"},{"compiler":[[97,40],[97,40],[4,4],[4,4],[6,6],[6,6],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4]],"memory":[[5927760,29164640]],"remove-preprocessing":[["(sort a x)"],[],["(sort a x)"],[],["(sort a x)"],[]],"time":46.259033203125,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.02197265625,"type":"end"}]