[{"memory":[[16976,16976]],"time":0.06591796875,"type":"start"},{"compiler":[[17,12]],"memory":[[4869664,105365872]],"method":["search"],"sampling":[[12,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[11,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[10,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[9,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[8,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[7,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[6,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[5,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[4,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[3,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[2,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.501171875,"unknown":0.498828125,"valid":0.0}]],"time":670.80712890625,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.501171875,"valid":0.498828125}],"memory":[[-27912416,550466160]],"mixsample":[[249.252685546875,"adjust",800],[156.68212890625,"ival-div",0],[0.023681640625,"ival-div",400],[0.017822265625,"ival-sub",2000],[4.98779296875,"ival-assert",0],[369.463134765625,"ival-sub",0],[74.480712890625,"ival-tan",0],[22.58203125,"ival-and",0],[0.042236328125,"ival-sub",400],[299.990966796875,"const",0],[218.62451171875,"ival-tan",400],[2630.953857421875,"ival-sin",1600],[137.844970703125,"adjust",2000],[4465.3310546875,"ival-tan",1600],[0.016845703125,"ival-sub",800],[262.57958984375,"ival-sin",400],[526.12841796875,"ival-tan",3600],[100.904052734375,"ival-sin",0],[0.010009765625,"ival-div",800],[28.494140625,"adjust",2800],[0.01318359375,"ival-div",2000],[689.43310546875,"ival-sin",3600],[66.259521484375,"ival-<=",0]],"outcomes":[[803.69580078125,1,"valid",2480],[8100.182861328125,2,"valid",4489],[1853.77001953125,3,"valid",1142],[21.119384765625,0,"valid",145]],"time":11548.6669921875,"type":"sample"},{"compiler":[[9,6],[24,8],[24,8]],"confusion":[[255,0,1,0]],"explanations":[["-.f64","(-.f64 eps (sin.f64 eps))","cancellation",104,0,[],[[1]]],["-.f64","(-.f64 eps (tan.f64 eps))","cancellation",104,0,[],[[2]]],["/.f64","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","u/u",152,0,[["(-.f64 eps (sin.f64 eps))","underflow",152],["(-.f64 eps (tan.f64 eps))","underflow",152]],[[]]]],"fperrors":[["(-.f64 eps (tan.f64 eps))",104,0,false,0,false],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))",153,0,false,1,[1.8864424254862543e-107]],["(-.f64 eps (sin.f64 eps))",104,0,false,0,false],["(tan.f64 eps)",0,0,false,0,false],["eps",0,0,false,0,false],["(sin.f64 eps)",0,0,false,0,false]],"freqs":[[2,104],[1,152]],"maybe-confusion":[[255,0,0,1,0,0]],"memory":[[-7617296,59466208]],"mixsample":[[7.97900390625,"ival-div",0],[244.648193359375,"ival-tan",1600],[12.22705078125,"adjust",800],[0.0107421875,"ival-sub",800],[21.414306640625,"ival-tan",3600],[14.826171875,"ival-sin",400],[4.8720703125,"ival-sin",0],[0.248291015625,"ival-assert",0],[18.580810546875,"ival-sub",0],[1.5205078125,"adjust",2800],[0.700927734375,"ival-true",0],[4.815185546875,"ival-tan",0],[37.423583984375,"ival-sin",3600],[139.69287109375,"ival-sin",1600],[14.724609375,"ival-tan",400],[6.210205078125,"adjust",2000]],"outcomes":[[46.248779296875,1,"valid",184],[423.94091796875,2,"valid",256],[91.528564453125,3,"valid",68],[0.384033203125,0,"valid",4]],"time":640.031005859375,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[9,6]],"egraph":[[0,999,9,0.00375314],[10,999,9,0.00651304],[9,998,9,0.005324038],[8,983,9,0.005876729],[7,645,9,0.007359191],[6,328,9,0.003537523],[5,153,9,0.001861187],[4,79,9,0.000749316],[3,45,9,0.000472005],[2,28,9,0.00020918],[1,18,9,0.000167725],[0,11,9,0.000152506],[0,6,9,0.000112161]],"inputs":[["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))"]],"memory":[[7279632,15529344]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","(/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (tan.f64 eps) eps))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[["(abs eps)"]],"time":221.675048828125,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[41072,41072]],"time":0.156005859375,"type":"eval"},{"alts":[["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","next",63.00481528870159,"binary64"]],"compiler":[[9,6]],"memory":[[266304,266304]],"time":1.018798828125,"type":"prune"},{"egraph":[[0,999,22,0.003276982],[10,999,22,0.004546931],[9,998,22,0.004636682],[8,983,22,0.005833613],[7,645,22,0.010927319],[6,328,22,0.006648997],[5,153,22,0.003691641],[4,79,22,0.001199489],[3,45,22,0.000600795],[2,28,22,0.000363075],[1,18,22,0.000301117],[0,11,22,0.000288463],[0,6,22,0.000194741]],"inputs":[["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","(-.f64 eps (sin.f64 eps))","eps","(sin.f64 eps)","(-.f64 eps (tan.f64 eps))","(tan.f64 eps)"]],"locations":[["(-.f64 eps (tan.f64 eps))","cost-diff",0],["(sin.f64 eps)","cost-diff",0],["(-.f64 eps (sin.f64 eps))","cost-diff",0],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","cost-diff",0]],"memory":[[-6216352,1782992]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","(/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (tan.f64 eps) eps))","(-.f64 eps (sin.f64 eps))","eps","(sin.f64 eps)","(-.f64 eps (tan.f64 eps))","(tan.f64 eps)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":62.6201171875,"type":"simplify"},{"compiler":[[24,8]],"locations":[["(sin.f64 eps)","accuracy",0.0],["(-.f64 eps (tan.f64 eps))","accuracy",23.261446332302498],["(-.f64 eps (sin.f64 eps))","accuracy",23.266088068161107],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","accuracy",37.944970319704304]],"memory":[[-1390224,15707712]],"mixsample":[[4.688232421875,"ival-div",0],[130.84619140625,"ival-tan",1600],[7.01171875,"adjust",800],[0.005859375,"ival-sub",800],[11.9208984375,"ival-tan",3600],[9.017578125,"ival-sin",400],[3.13427734375,"ival-sin",0],[0.1611328125,"ival-assert",0],[12.22119140625,"ival-sub",0],[0.740234375,"adjust",2800],[0.300537109375,"ival-true",0],[2.0673828125,"ival-tan",0],[20.010986328125,"ival-sin",3600],[76.43701171875,"ival-sin",1600],[8.012939453125,"ival-tan",400],[3.50537109375,"adjust",2000]],"outcomes":[[26.112060546875,1,"valid",92],[235.3271484375,2,"valid",128],[50.771728515625,3,"valid",34],[0.2490234375,0,"valid",2]],"time":329.222900390625,"type":"localize"},{"count":[[4,28]],"inputs":[["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","(-.f64 eps (sin.f64 eps))","(sin.f64 eps)","(-.f64 eps (tan.f64 eps))"]],"memory":[[1483232,1483232]],"outputs":[["-1/2","(- (* 9/40 (pow eps 2)) 1/2)","(- (* (pow eps 2) (+ 9/40 (* -27/2800 (pow eps 2)))) 1/2)","(- (* (pow eps 2) (+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))) 1/2)","(* 1/6 (pow eps 3))","(* (pow eps 3) (+ 1/6 (* -1/120 (pow eps 2))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* (pow eps 2) (+ 1/5040 (* -1/362880 (pow eps 2)))) 1/120))))","eps","(* eps (+ 1 (* -1/6 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(* -1/3 (pow eps 3))","(* (pow eps 3) (- (* -2/15 (pow eps 2)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* -17/315 (pow eps 2)) 2/15)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -62/2835 (pow eps 2)) 17/315)) 2/15)) 1/3))","1","(- (+ 1 (* -1 (/ (sin eps) eps))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (pow (sin eps) 2) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 3) (pow (cos eps) 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))))","(* eps (+ 1 (* -1 (/ (sin eps) eps))))","(sin eps)","(* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps))))))","(+ 1 (* -1 (/ (- (sin eps) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (cos eps)))) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (* -1 (/ (* (pow (sin eps) 2) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (pow (cos eps) 2)))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(* -1 (* eps (- (/ (sin eps) eps) 1)))","(* -1 (* eps (- (/ (sin eps) (* eps (cos eps))) 1)))"]],"series":[[1.4150390625,"((/ (- eps (sin eps)) (- eps (tan eps))) (- eps (sin eps)) (sin eps) (- eps (tan eps)))","eps","-inf"],[1.72802734375,"((/ (- eps (sin eps)) (- eps (tan eps))) (- eps (sin eps)) (sin eps) (- eps (tan eps)))","eps","inf"],[1.4599609375,"((/ (- eps (sin eps)) (- eps (tan eps))) (- eps (sin eps)) (sin eps) (- eps (tan eps)))","eps","0"]],"time":5.14111328125,"type":"series"},{"count":[[28,27]],"egraph":[[0,8263,341,0.091383399],[3,5663,369,0.028355283],[2,1323,408,0.025384373],[1,422,433,0.004776586],[0,148,465,0.001779023]],"inputs":[["-1/2","(- (* 9/40 (pow eps 2)) 1/2)","(- (* (pow eps 2) (+ 9/40 (* -27/2800 (pow eps 2)))) 1/2)","(- (* (pow eps 2) (+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))) 1/2)","(* 1/6 (pow eps 3))","(* (pow eps 3) (+ 1/6 (* -1/120 (pow eps 2))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120))))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* (pow eps 2) (+ 1/5040 (* -1/362880 (pow eps 2)))) 1/120))))","eps","(* eps (+ 1 (* -1/6 (pow eps 2))))","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(* -1/3 (pow eps 3))","(* (pow eps 3) (- (* -2/15 (pow eps 2)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* -17/315 (pow eps 2)) 2/15)) 1/3))","(* (pow eps 3) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -62/2835 (pow eps 2)) 17/315)) 2/15)) 1/3))","1","(- (+ 1 (* -1 (/ (sin eps) eps))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (pow (sin eps) 2) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 3) (pow (cos eps) 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))))","(* eps (+ 1 (* -1 (/ (sin eps) eps))))","(sin eps)","(* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps))))))","(+ 1 (* -1 (/ (- (sin eps) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (cos eps)))) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (* -1 (/ (* (pow (sin eps) 2) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (pow (cos eps) 2)))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(* -1 (* eps (- (/ (sin eps) eps) 1)))","(* -1 (* eps (- (/ (sin eps) (* eps (cos eps))) 1)))"]],"memory":[[4545696,42604608]],"method":["egg-herbie"],"outputs":[["-1/2","#s(literal -1/2 binary64)","(- (* 9/40 (pow eps 2)) 1/2)","(fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64))","(- (* (pow eps 2) (+ 9/40 (* -27/2800 (pow eps 2)))) 1/2)","(fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(- (* (pow eps 2) (+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))) 1/2)","(fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(* 1/6 (pow eps 3))","(*.f64 (pow.f64 eps #s(literal 3 binary64)) #s(literal 1/6 binary64))","(* (pow eps 3) (+ 1/6 (* -1/120 (pow eps 2))))","(*.f64 (fma.f64 #s(literal -1/120 binary64) (*.f64 eps eps) #s(literal 1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* 1/5040 (pow eps 2)) 1/120))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/5040 binary64) (*.f64 eps eps) #s(literal -1/120 binary64)) (*.f64 eps eps) #s(literal 1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (+ 1/6 (* (pow eps 2) (- (* (pow eps 2) (+ 1/5040 (* -1/362880 (pow eps 2)))) 1/120))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/362880 binary64) (*.f64 eps eps) #s(literal 1/5040 binary64)) (*.f64 eps eps) #s(literal -1/120 binary64)) (*.f64 eps eps) #s(literal 1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)))","eps","(* eps (+ 1 (* -1/6 (pow eps 2))))","(fma.f64 #s(literal -1/6 binary64) (pow.f64 eps #s(literal 3 binary64)) eps)","(* eps (+ 1 (* (pow eps 2) (- (* 1/120 (pow eps 2)) 1/6))))","(fma.f64 (fma.f64 #s(literal 1/120 binary64) (*.f64 eps eps) #s(literal -1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)) eps)","(* eps (+ 1 (* (pow eps 2) (- (* (pow eps 2) (+ 1/120 (* -1/5040 (pow eps 2)))) 1/6))))","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/5040 binary64) (*.f64 eps eps) #s(literal 1/120 binary64)) (*.f64 eps eps) #s(literal -1/6 binary64)) (pow.f64 eps #s(literal 3 binary64)) eps)","(* -1/3 (pow eps 3))","(*.f64 #s(literal -1/3 binary64) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (- (* -2/15 (pow eps 2)) 1/3))","(*.f64 (fma.f64 #s(literal -2/15 binary64) (*.f64 eps eps) #s(literal -1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (- (* (pow eps 2) (- (* -17/315 (pow eps 2)) 2/15)) 1/3))","(*.f64 (fma.f64 (fma.f64 #s(literal -17/315 binary64) (*.f64 eps eps) #s(literal -2/15 binary64)) (*.f64 eps eps) #s(literal -1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","(* (pow eps 3) (- (* (pow eps 2) (- (* (pow eps 2) (- (* -62/2835 (pow eps 2)) 17/315)) 2/15)) 1/3))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -62/2835 binary64) (*.f64 eps eps) #s(literal -17/315 binary64)) (*.f64 eps eps) #s(literal -2/15 binary64)) (*.f64 eps eps) #s(literal -1/3 binary64)) (pow.f64 eps #s(literal 3 binary64)))","1","#s(literal 1 binary64)","(- (+ 1 (* -1 (/ (sin eps) eps))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(fma.f64 (/.f64 (sin.f64 eps) eps) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 eps))) #s(literal 1 binary64))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(fma.f64 (/.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps) (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps))) #s(literal 1 binary64))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (pow (sin eps) 2) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 3) (pow (cos eps) 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))))","(-.f64 (fma.f64 (/.f64 (/.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (cos.f64 eps)) (*.f64 eps eps)) (+.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) eps) (cos.f64 eps)) (sin.f64 eps)) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps))) (-.f64 (/.f64 (sin.f64 eps) eps) #s(literal 1 binary64)))","(* eps (+ 1 (* -1 (/ (sin eps) eps))))","(fma.f64 (sin.f64 eps) #s(literal -1 binary64) eps)","(sin eps)","(sin.f64 eps)","(* eps (+ 1 (* -1 (/ (sin eps) (* eps (cos eps))))))","(-.f64 eps (/.f64 (sin.f64 eps) (cos.f64 eps)))","(+ 1 (* -1 (/ (- (sin eps) (/ (sin eps) (cos eps))) eps)))","(fma.f64 (/.f64 (sin.f64 eps) eps) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 eps))) #s(literal 1 binary64))","(+ 1 (* -1 (/ (- (+ (sin eps) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (cos eps)))) (/ (sin eps) (cos eps))) eps)))","(fma.f64 (/.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps) (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps))) #s(literal 1 binary64))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (* -1 (/ (* (pow (sin eps) 2) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (pow (cos eps) 2)))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps) (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (+.f64 (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) #s(literal 1 binary64))) (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps)))) eps))","(* -1 (* eps (- (/ (sin eps) eps) 1)))","(fma.f64 (sin.f64 eps) #s(literal -1 binary64) eps)","(* -1 (* eps (- (/ (sin eps) (* eps (cos eps))) 1)))","(-.f64 eps (/.f64 (sin.f64 eps) (cos.f64 eps)))"]],"stop":[["iter limit",1],["node limit",1]],"time":257.239990234375,"type":"simplify"},{"count":[[4,419]],"egraph":[[0,8306,19,0.056641403],[3,5978,19,0.04170122],[2,409,19,0.017024021],[1,51,19,0.001544956],[0,11,19,0.000674067],[0,6,19,0.000105629]],"inputs":[["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","(-.f64 eps (sin.f64 eps))","(sin.f64 eps)","(-.f64 eps (tan.f64 eps))"]],"memory":[[-597504,49799824]],"outputs":[["(*.f64 (/.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 eps (tan.f64 eps))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) (fma.f64 (sin.f64 eps) (-.f64 (sin.f64 eps) eps) (*.f64 eps eps)))","(*.f64 (/.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 eps (tan.f64 eps))) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (-.f64 eps (sin.f64 eps)))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (-.f64 eps (tan.f64 eps))) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps)) #s(literal 2 binary64)))) (-.f64 (*.f64 eps eps) (*.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (-.f64 eps (tan.f64 eps))) (+.f64 (pow.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)))) (fma.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps)) (-.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps)) (*.f64 eps eps)) (pow.f64 eps #s(literal 4 binary64))))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (*.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (tan.f64 eps) eps))) (neg.f64 (+.f64 (tan.f64 eps) eps)))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))))","(*.f64 (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 (+.f64 (tan.f64 eps) eps)))","(*.f64 (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))))","(*.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))) (+.f64 (tan.f64 eps) eps))","(*.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)))","(*.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sin.f64 eps) eps)) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps)) #s(literal -1/2 binary64)) (pow.f64 (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps)) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) #s(literal 1 binary64)) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)))","(*.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (-.f64 eps (tan.f64 eps))) (/.f64 (-.f64 eps (sin.f64 eps)) (+.f64 (sin.f64 eps) eps)))","(*.f64 (/.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) (-.f64 eps (tan.f64 eps))) (/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (pow.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (pow.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (/.f64 (pow.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64))))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (+.f64 (tan.f64 eps) eps))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)))","(*.f64 (pow.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (tan.f64 eps) eps) (-.f64 eps (sin.f64 eps))))","(*.f64 (pow.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) (-.f64 eps (sin.f64 eps))))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 eps (tan.f64 eps))) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (-.f64 eps (tan.f64 eps))) (pow.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)) (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -2 binary64))) (pow.f64 (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (sin.f64 eps) eps))","(*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (-.f64 eps (sin.f64 eps)))","(*.f64 (-.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 3 binary64)) (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -3 binary64))) (pow.f64 (fma.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (-.f64 eps (tan.f64 eps)) eps (*.f64 (-.f64 (tan.f64 eps) eps) (sin.f64 eps))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -2 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 eps (tan.f64 eps))))","(*.f64 (+.f64 (sin.f64 eps) eps) (/.f64 (-.f64 eps (sin.f64 eps)) (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 eps (tan.f64 eps)))))","(*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)))","(*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 eps (tan.f64 eps))) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (/.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (-.f64 eps (tan.f64 eps))))","(*.f64 (+.f64 (tan.f64 eps) eps) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (tan.f64 eps) eps)))","(*.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) (/.f64 (-.f64 eps (sin.f64 eps)) (*.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) (-.f64 eps (tan.f64 eps)))))","(*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (pow.f64 (*.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) (-.f64 eps (tan.f64 eps))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64)) (-.f64 eps (tan.f64 eps))))","(*.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))))","(*.f64 (-.f64 (sin.f64 eps) eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (tan.f64 eps) eps)) #s(literal 1 binary64))","(*.f64 (-.f64 eps (sin.f64 eps)) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)))","(pow.f64 (*.f64 (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps)) (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps))) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (+.f64 (sin.f64 eps) eps) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 eps (tan.f64 eps)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (-.f64 eps (tan.f64 eps)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (-.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)) (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64))) (-.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 3 binary64)) (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -3 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (fma.f64 (-.f64 eps (tan.f64 eps)) eps (*.f64 (-.f64 (tan.f64 eps) eps) (sin.f64 eps)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps)) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (tan.f64 eps) eps)) #s(literal 1 binary64))","(/.f64 (/.f64 (fma.f64 (-.f64 eps (tan.f64 eps)) eps (*.f64 (-.f64 (tan.f64 eps) eps) (sin.f64 eps))) (-.f64 eps (tan.f64 eps))) (-.f64 eps (tan.f64 eps)))","(/.f64 (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps))","(/.f64 (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) #s(literal -1 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","(/.f64 (/.f64 (-.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (-.f64 eps (tan.f64 eps)))","(/.f64 (*.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (sin.f64 eps) eps)) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (+.f64 (sin.f64 eps) eps))","(/.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","(/.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (neg.f64 (+.f64 (sin.f64 eps) eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (neg.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(/.f64 (*.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (sin.f64 eps) eps)) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64))) (neg.f64 (+.f64 (sin.f64 eps) eps)))","(/.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64))) (neg.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(/.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (fma.f64 (tan.f64 eps) (-.f64 (tan.f64 eps) eps) (*.f64 eps eps)))","(/.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (-.f64 eps (tan.f64 eps)))","(/.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) #s(literal 2 binary64)))) (-.f64 (*.f64 eps eps) (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps))))","(/.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (+.f64 (pow.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)))) (fma.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) (-.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) (*.f64 eps eps)) (pow.f64 eps #s(literal 4 binary64))))","(/.f64 (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (sin.f64 eps) eps))) (neg.f64 (+.f64 (sin.f64 eps) eps)))","(/.f64 (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 eps (tan.f64 eps)))) (+.f64 (sin.f64 eps) eps))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (-.f64 eps (tan.f64 eps)))) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)) (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -2 binary64)))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 3 binary64)) (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -3 binary64)))) (fma.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64))))","(/.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (-.f64 eps (tan.f64 eps)) eps (*.f64 (-.f64 (tan.f64 eps) eps) (sin.f64 eps)))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (sin.f64 eps) eps) #s(literal 1 binary64)) (-.f64 (tan.f64 eps) eps))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sin.f64 eps) eps)) (-.f64 (tan.f64 eps) eps))","(/.f64 (-.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)) (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64))) (-.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(/.f64 (+.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 3 binary64)) (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)) (-.f64 (pow.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (*.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))))","(/.f64 (neg.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 eps (tan.f64 eps)))) (neg.f64 (+.f64 (sin.f64 eps) eps)))","(/.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (-.f64 eps (tan.f64 eps)))) (neg.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)) (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -2 binary64)))) (neg.f64 (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 3 binary64)) (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -3 binary64)))) (neg.f64 (fma.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (-.f64 eps (tan.f64 eps)) eps (*.f64 (-.f64 (tan.f64 eps) eps) (sin.f64 eps)))) (neg.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (fma.f64 (tan.f64 eps) (-.f64 (tan.f64 eps) eps) (*.f64 eps eps))))","(/.f64 (*.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 eps (tan.f64 eps))))","(/.f64 (*.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) #s(literal 2 binary64)))) (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (-.f64 (*.f64 eps eps) (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)))))","(/.f64 (*.f64 (-.f64 eps (sin.f64 eps)) (+.f64 (pow.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)))) (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (fma.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) (-.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) (*.f64 eps eps)) (pow.f64 eps #s(literal 4 binary64)))))","(/.f64 (*.f64 #s(literal -1 binary64) (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (sin.f64 eps) eps))) (*.f64 (-.f64 (tan.f64 eps) eps) (neg.f64 (+.f64 (sin.f64 eps) eps))))","(/.f64 (*.f64 #s(literal -1 binary64) (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))))) (*.f64 (-.f64 (tan.f64 eps) eps) (neg.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (sin.f64 eps) eps))) (*.f64 (-.f64 eps (tan.f64 eps)) (neg.f64 (+.f64 (sin.f64 eps) eps))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))))) (*.f64 (-.f64 eps (tan.f64 eps)) (neg.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))))","(/.f64 (*.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (sin.f64 eps) eps)) #s(literal -1 binary64)) (*.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) (-.f64 (tan.f64 eps) eps)))","(/.f64 (*.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (sin.f64 eps) eps)) #s(literal 1 binary64)) (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (tan.f64 eps) eps)))","(/.f64 (*.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (sin.f64 eps) eps)) #s(literal 1 binary64)) (*.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) (-.f64 eps (tan.f64 eps))))","(/.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) #s(literal -1 binary64)) (*.f64 (neg.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (-.f64 (tan.f64 eps) eps)))","(/.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) (-.f64 (tan.f64 eps) eps)))","(/.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) #s(literal 1 binary64)) (*.f64 (neg.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (-.f64 eps (tan.f64 eps))))","(/.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (tan.f64 eps) eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) (-.f64 (tan.f64 eps) eps)))","(/.f64 (-.f64 (*.f64 (neg.f64 eps) (-.f64 (tan.f64 eps) eps)) (*.f64 (-.f64 (tan.f64 eps) eps) (neg.f64 (sin.f64 eps)))) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (neg.f64 eps) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (*.f64 (-.f64 (tan.f64 eps) eps) #s(literal 1 binary64))) (*.f64 (-.f64 (tan.f64 eps) eps) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))","(/.f64 (-.f64 (*.f64 (neg.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (-.f64 (tan.f64 eps) eps) (sin.f64 eps))) (*.f64 (-.f64 (tan.f64 eps) eps) (-.f64 eps (tan.f64 eps))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 (tan.f64 eps) eps)) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (neg.f64 (sin.f64 eps)))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (-.f64 (tan.f64 eps) eps)))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) #s(literal 1 binary64))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))","(/.f64 (-.f64 (-.f64 eps (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (sin.f64 eps))) (*.f64 (/.f64 (-.f64 eps (tan.f64 eps)) eps) (-.f64 eps (tan.f64 eps))))","(/.f64 (-.f64 (*.f64 eps (-.f64 (tan.f64 eps) eps)) (*.f64 (-.f64 eps (tan.f64 eps)) (neg.f64 (sin.f64 eps)))) (*.f64 (-.f64 eps (tan.f64 eps)) (-.f64 (tan.f64 eps) eps)))","(/.f64 (-.f64 (*.f64 eps (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))) (-.f64 eps (tan.f64 eps))) (*.f64 (-.f64 eps (tan.f64 eps)) (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps))))","(/.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (-.f64 eps (sin.f64 eps))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) (-.f64 eps (sin.f64 eps))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))","(/.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(/.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64)))","(/.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 eps (tan.f64 eps))) (+.f64 (sin.f64 eps) eps))","(/.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (-.f64 eps (tan.f64 eps))) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","(/.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) (*.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 eps (tan.f64 eps))) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)) (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -2 binary64))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)))","(/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (*.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 eps (tan.f64 eps))) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (*.f64 (*.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) (-.f64 eps (tan.f64 eps))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 (sin.f64 eps) #s(literal 9 binary64))) (*.f64 (*.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) (-.f64 eps (tan.f64 eps))) (+.f64 (pow.f64 eps #s(literal 6 binary64)) (+.f64 (pow.f64 (*.f64 (sin.f64 eps) eps) #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 3 binary64)) (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -3 binary64))) (fma.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64))))","(/.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (sin.f64 eps) eps)) (neg.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 eps (tan.f64 eps)))))","(/.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (sin.f64 eps) eps)) (*.f64 (-.f64 (tan.f64 eps) eps) (+.f64 (sin.f64 eps) eps)))","(/.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (sin.f64 eps) eps)) (*.f64 (-.f64 eps (tan.f64 eps)) (neg.f64 (+.f64 (sin.f64 eps) eps))))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) (neg.f64 (*.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) (-.f64 eps (tan.f64 eps)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) (*.f64 (-.f64 (tan.f64 eps) eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) (*.f64 (-.f64 eps (tan.f64 eps)) (neg.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))))","(/.f64 (fma.f64 (-.f64 eps (tan.f64 eps)) eps (*.f64 (-.f64 (tan.f64 eps) eps) (sin.f64 eps))) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)))","(/.f64 #s(literal -1 binary64) (*.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64)) (-.f64 (tan.f64 eps) eps)))","(/.f64 #s(literal -1 binary64) (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 eps (sin.f64 eps))))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (*.f64 (-.f64 (tan.f64 eps) eps) (neg.f64 (+.f64 (sin.f64 eps) eps))))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (*.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) (-.f64 (tan.f64 eps) eps)))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 eps (tan.f64 eps))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sin.f64 eps) eps) (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 eps (tan.f64 eps)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (-.f64 eps (tan.f64 eps)))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (-.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)) (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64))) (-.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 3 binary64)) (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64)) (fma.f64 (-.f64 eps (tan.f64 eps)) eps (*.f64 (-.f64 (tan.f64 eps) eps) (sin.f64 eps)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps)))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (*.f64 (-.f64 (tan.f64 eps) eps) (neg.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (*.f64 (neg.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (-.f64 (tan.f64 eps) eps)))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (*.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) (-.f64 eps (tan.f64 eps))))","(/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 (tan.f64 eps) eps))","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))","(neg.f64 (/.f64 #s(literal -1 binary64) (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps))))","(neg.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 eps (tan.f64 eps)))))","(neg.f64 (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 eps (tan.f64 eps))))","(fma.f64 (/.f64 (neg.f64 eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 (+.f64 (tan.f64 eps) eps)) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (neg.f64 (sin.f64 eps))))","(fma.f64 (/.f64 (neg.f64 eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 (+.f64 (tan.f64 eps) eps)) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(fma.f64 (/.f64 (neg.f64 eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 (+.f64 (tan.f64 eps) eps)) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(fma.f64 (/.f64 (neg.f64 eps) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (neg.f64 (sin.f64 eps))))","(fma.f64 (/.f64 (neg.f64 eps) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(fma.f64 (/.f64 (neg.f64 eps) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(fma.f64 (/.f64 eps (*.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (tan.f64 eps) eps))) (neg.f64 (+.f64 (tan.f64 eps) eps)) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (neg.f64 (sin.f64 eps))))","(fma.f64 (/.f64 eps (*.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (tan.f64 eps) eps))) (neg.f64 (+.f64 (tan.f64 eps) eps)) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(fma.f64 (/.f64 eps (*.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (tan.f64 eps) eps))) (neg.f64 (+.f64 (tan.f64 eps) eps)) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(fma.f64 (/.f64 eps (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (neg.f64 (sin.f64 eps))))","(fma.f64 (/.f64 eps (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(fma.f64 (/.f64 eps (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(fma.f64 (neg.f64 (/.f64 (sin.f64 eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))) (+.f64 (tan.f64 eps) eps) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(fma.f64 (neg.f64 (/.f64 (sin.f64 eps) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(fma.f64 (/.f64 eps #s(literal 1 binary64)) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (neg.f64 (sin.f64 eps))))","(fma.f64 (/.f64 eps #s(literal 1 binary64)) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(fma.f64 (/.f64 eps #s(literal 1 binary64)) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(fma.f64 (*.f64 eps #s(literal 1 binary64)) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (neg.f64 (sin.f64 eps))))","(fma.f64 (*.f64 eps #s(literal 1 binary64)) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(fma.f64 (*.f64 eps #s(literal 1 binary64)) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(fma.f64 (/.f64 (sin.f64 eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (neg.f64 (+.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(fma.f64 (/.f64 (sin.f64 eps) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(fma.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps))","(fma.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps)))","(fma.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 (tan.f64 eps) eps)))","(fma.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 eps eps)))","(fma.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 eps eps) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps))))","(fma.f64 (/.f64 eps (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (+.f64 (tan.f64 eps) eps) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (neg.f64 (sin.f64 eps))))","(fma.f64 (/.f64 eps (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (+.f64 (tan.f64 eps) eps) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(fma.f64 (/.f64 eps (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (+.f64 (tan.f64 eps) eps) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(fma.f64 (/.f64 eps (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (neg.f64 (sin.f64 eps))))","(fma.f64 (/.f64 eps (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(fma.f64 (/.f64 eps (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(fma.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 (*.f64 (tan.f64 eps) eps) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))))","(fma.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (neg.f64 (sin.f64 eps)) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(fma.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) eps (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (neg.f64 (sin.f64 eps))))","(fma.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) eps (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(fma.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) eps (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(fma.f64 (neg.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (neg.f64 (sin.f64 eps))))","(fma.f64 (neg.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(fma.f64 (neg.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(fma.f64 #s(literal -1 binary64) (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(fma.f64 (+.f64 (tan.f64 eps) eps) (/.f64 eps (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (neg.f64 (sin.f64 eps))))","(fma.f64 (+.f64 (tan.f64 eps) eps) (/.f64 eps (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(fma.f64 (+.f64 (tan.f64 eps) eps) (/.f64 eps (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(fma.f64 (neg.f64 (sin.f64 eps)) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(fma.f64 #s(literal 1 binary64) (/.f64 eps (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (neg.f64 (sin.f64 eps))))","(fma.f64 #s(literal 1 binary64) (/.f64 eps (-.f64 eps (tan.f64 eps))) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(fma.f64 #s(literal 1 binary64) (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(fma.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) (/.f64 eps (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (neg.f64 (sin.f64 eps))))","(fma.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) (/.f64 eps (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(fma.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) (/.f64 eps (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(fma.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 (*.f64 eps eps) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))))","(fma.f64 (*.f64 eps eps) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))))","(fma.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 1 binary64) (*.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 1 binary64)))","(fma.f64 (tan.f64 eps) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 eps (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(fma.f64 (sin.f64 eps) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(fma.f64 eps (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (tan.f64 eps) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(fma.f64 eps (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (neg.f64 (sin.f64 eps))))","(fma.f64 eps (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(fma.f64 eps (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(-.f64 (/.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps))) (/.f64 (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -2 binary64)) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps))))","(-.f64 (/.f64 (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 3 binary64)) (fma.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)))) (/.f64 (pow.f64 (/.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) #s(literal -3 binary64)) (fma.f64 (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (+.f64 (sin.f64 eps) eps)) (pow.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 2 binary64)))))","(-.f64 (/.f64 (*.f64 (-.f64 eps (tan.f64 eps)) eps) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64))) (/.f64 (*.f64 (-.f64 eps (tan.f64 eps)) (sin.f64 eps)) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 2 binary64))))","(-.f64 (/.f64 (*.f64 eps eps) (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 eps (tan.f64 eps)))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 eps (tan.f64 eps)))))","(-.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (*.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) (-.f64 eps (tan.f64 eps)))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (*.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) (-.f64 eps (tan.f64 eps)))))","(-.f64 (/.f64 #s(literal 0 binary64) (-.f64 (tan.f64 eps) eps)) (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 eps (tan.f64 eps))))","(-.f64 (/.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) (-.f64 eps (tan.f64 eps))) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)) (-.f64 eps (tan.f64 eps))))","(-.f64 (/.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (-.f64 eps (tan.f64 eps))) (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (-.f64 eps (tan.f64 eps))))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 (sin.f64 eps) eps) (-.f64 eps (tan.f64 eps))))","(-.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 eps (tan.f64 eps))))","(exp.f64 (*.f64 (log.f64 (/.f64 (-.f64 (tan.f64 eps) eps) (-.f64 (sin.f64 eps) eps))) #s(literal -1 binary64)))","(+.f64 (*.f64 (tan.f64 eps) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))) (*.f64 eps (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(+.f64 (*.f64 eps (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))) (*.f64 (tan.f64 eps) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))))","(+.f64 (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))) (*.f64 (*.f64 (tan.f64 eps) eps) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))))","(+.f64 (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))) (*.f64 (*.f64 eps eps) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))))","(+.f64 (*.f64 (*.f64 eps eps) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))) (*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))))","(+.f64 (*.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) #s(literal 1 binary64)) (*.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) #s(literal 1 binary64)))","(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps)) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps))","(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) eps) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (tan.f64 eps)))","(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 (tan.f64 eps) eps)))","(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps))) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 eps eps)))","(+.f64 (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 eps eps)) (*.f64 (/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps))))","(+.f64 (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (neg.f64 (sin.f64 eps))) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(+.f64 (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)) (/.f64 eps (-.f64 eps (tan.f64 eps))))","(+.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (*.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) (neg.f64 (sin.f64 eps))))","(+.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (*.f64 #s(literal 1 binary64) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps))))","(+.f64 (/.f64 eps (-.f64 eps (tan.f64 eps))) (/.f64 (sin.f64 eps) (-.f64 (tan.f64 eps) eps)))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps)) #s(literal 2 binary64)))) (-.f64 (*.f64 eps eps) (*.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps))))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)))) (fma.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps)) (-.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps)) (*.f64 eps eps)) (pow.f64 eps #s(literal 4 binary64))))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (-.f64 eps (sin.f64 eps)))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) (fma.f64 (sin.f64 eps) (-.f64 (sin.f64 eps) eps) (*.f64 eps eps)))","(*.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(*.f64 (pow.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))))","(*.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (sin.f64 eps) eps)) (pow.f64 (neg.f64 (+.f64 (sin.f64 eps) eps)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) (pow.f64 (neg.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 (sin.f64 eps) eps))","(*.f64 (+.f64 (sin.f64 eps) eps) (*.f64 (-.f64 eps (sin.f64 eps)) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (+.f64 (sin.f64 eps) eps) (/.f64 (-.f64 eps (sin.f64 eps)) (+.f64 (sin.f64 eps) eps)))","(*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (*.f64 (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 eps (sin.f64 eps)))","(*.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) (*.f64 (-.f64 eps (sin.f64 eps)) (pow.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64))))","(*.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) (/.f64 (-.f64 eps (sin.f64 eps)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (pow.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64)))","(*.f64 (-.f64 eps (sin.f64 eps)) #s(literal 1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal 1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64))) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64))) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (pow.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 (sin.f64 eps) #s(literal 9 binary64))) (pow.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64))) (+.f64 (pow.f64 eps #s(literal 6 binary64)) (+.f64 (pow.f64 (*.f64 (sin.f64 eps) eps) #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)) #s(literal 2 binary64))) (fma.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps)) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) #s(literal 2 binary64))) (+.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))))","(/.f64 (-.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (neg.f64 (sin.f64 eps)) eps))","(/.f64 (-.f64 (pow.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)) #s(literal 2 binary64)) (*.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))))))","(/.f64 (neg.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (sin.f64 eps) eps))) (neg.f64 (neg.f64 (+.f64 (sin.f64 eps) eps))))","(/.f64 (neg.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (sin.f64 eps) eps))) (+.f64 (sin.f64 eps) eps))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))))) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","(/.f64 (*.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (sin.f64 eps) eps)) #s(literal 1 binary64)) (neg.f64 (+.f64 (sin.f64 eps) eps)))","(/.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) #s(literal 1 binary64)) (neg.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 (sin.f64 eps) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 eps #s(literal 6 binary64)) (+.f64 (pow.f64 (*.f64 (sin.f64 eps) eps) #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64)))) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (+.f64 (sin.f64 eps) eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (+.f64 (sin.f64 eps) eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(/.f64 (-.f64 (*.f64 (*.f64 eps eps) (+.f64 (sin.f64 eps) eps)) (*.f64 (+.f64 (sin.f64 eps) eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (*.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (sin.f64 eps) #s(literal 4 binary64))) (*.f64 (+.f64 (sin.f64 eps) eps) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (*.f64 (+.f64 (sin.f64 eps) eps) (fma.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))) (*.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 (sin.f64 eps) #s(literal 9 binary64))) (*.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) (+.f64 (pow.f64 eps #s(literal 6 binary64)) (+.f64 (pow.f64 (*.f64 (sin.f64 eps) eps) #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 6 binary64))))))","(/.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (-.f64 (sin.f64 eps) eps)) (neg.f64 (+.f64 (sin.f64 eps) eps)))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (neg.f64 (neg.f64 (+.f64 (sin.f64 eps) eps))))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64))) (+.f64 (sin.f64 eps) eps))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (fma.f64 (sin.f64 eps) (sin.f64 eps) (-.f64 (*.f64 eps eps) (*.f64 (neg.f64 (sin.f64 eps)) eps))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (neg.f64 (neg.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64))) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))","(neg.f64 (-.f64 (sin.f64 eps) eps))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps)) #s(literal 2 binary64)))) (-.f64 (*.f64 eps eps) (*.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)))) (fma.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps)) (-.f64 (*.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps)) (*.f64 eps eps)) (pow.f64 eps #s(literal 4 binary64))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))))","(fma.f64 (/.f64 (*.f64 eps eps) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (sin.f64 eps) #s(literal 3 binary64)))) (fma.f64 (sin.f64 eps) (-.f64 (sin.f64 eps) eps) (*.f64 eps eps)) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (/.f64 (*.f64 eps eps) (-.f64 (*.f64 eps eps) (pow.f64 (sin.f64 eps) #s(literal 2 binary64)))) (-.f64 eps (sin.f64 eps)) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (pow.f64 eps #s(literal 3/2 binary64)) (/.f64 (pow.f64 eps #s(literal 3/2 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))))","(fma.f64 #s(literal -1 binary64) (sin.f64 eps) eps)","(fma.f64 (*.f64 eps eps) (/.f64 eps (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))))","(fma.f64 (*.f64 eps eps) (pow.f64 (+.f64 (sin.f64 eps) eps) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))))","(fma.f64 (sin.f64 eps) #s(literal -1 binary64) eps)","(fma.f64 eps (/.f64 (*.f64 eps eps) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))))","(fma.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps)) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(-.f64 (+.f64 eps #s(literal 0 binary64)) (sin.f64 eps))","(-.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps)))","(-.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))))","(-.f64 #s(literal 0 binary64) (-.f64 (sin.f64 eps) eps))","(-.f64 eps (sin.f64 eps))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 eps (sin.f64 eps)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (neg.f64 (neg.f64 eps)) (neg.f64 (sin.f64 eps)))","(+.f64 (*.f64 eps (/.f64 eps (+.f64 (sin.f64 eps) eps))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) (+.f64 (sin.f64 eps) eps))))","(+.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps))) (neg.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (sin.f64 eps) eps) (sin.f64 eps) (*.f64 eps eps)))))","(+.f64 (neg.f64 (sin.f64 eps)) eps)","(+.f64 eps (neg.f64 (sin.f64 eps)))","(*.f64 #s(literal -1 binary64) (neg.f64 (sin.f64 eps)))","(*.f64 #s(literal 1 binary64) (sin.f64 eps))","(neg.f64 (neg.f64 (sin.f64 eps)))","(sin.f64 eps)","(-.f64 #s(literal 0 binary64) (neg.f64 (sin.f64 eps)))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) #s(literal 2 binary64)))) (-.f64 (*.f64 eps eps) (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps))))","(*.f64 (/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)))) (fma.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) (-.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) (*.f64 eps eps)) (pow.f64 eps #s(literal 4 binary64))))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (-.f64 eps (tan.f64 eps)))","(*.f64 (/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (fma.f64 (tan.f64 eps) (-.f64 (tan.f64 eps) eps) (*.f64 eps eps)))","(*.f64 (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(*.f64 (pow.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))","(*.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (tan.f64 eps) eps)) (pow.f64 (neg.f64 (+.f64 (tan.f64 eps) eps)) #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (pow.f64 (neg.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 (tan.f64 eps) eps))","(*.f64 (+.f64 (tan.f64 eps) eps) (*.f64 (-.f64 eps (tan.f64 eps)) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))))","(*.f64 (+.f64 (tan.f64 eps) eps) (/.f64 (-.f64 eps (tan.f64 eps)) (+.f64 (tan.f64 eps) eps)))","(*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (/.f64 (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 eps (tan.f64 eps)))","(*.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) (*.f64 (-.f64 eps (tan.f64 eps)) (pow.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64))))","(*.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) (/.f64 (-.f64 eps (tan.f64 eps)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))))","(*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (pow.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64)))","(*.f64 (-.f64 eps (tan.f64 eps)) #s(literal 1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal 1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64))) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (pow.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64))) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 (tan.f64 eps) #s(literal 9 binary64))) (pow.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64))) (+.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (pow.f64 (*.f64 (tan.f64 eps) eps) #s(literal 3 binary64))))","(/.f64 (-.f64 (pow.f64 (*.f64 eps (/.f64 eps (+.f64 (tan.f64 eps) eps))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps)) #s(literal 2 binary64))) (fma.f64 eps (/.f64 eps (+.f64 (tan.f64 eps) eps)) (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) #s(literal 2 binary64))) (+.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)))))","(/.f64 (-.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (*.f64 eps eps)) (-.f64 (neg.f64 (tan.f64 eps)) eps))","(/.f64 (-.f64 (pow.f64 (*.f64 eps (/.f64 eps (+.f64 (tan.f64 eps) eps))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 eps (/.f64 eps (+.f64 (tan.f64 eps) eps))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps)) #s(literal 2 binary64)) (*.f64 (*.f64 eps (/.f64 eps (+.f64 (tan.f64 eps) eps))) (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)))))))","(/.f64 (neg.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (tan.f64 eps) eps))) (neg.f64 (neg.f64 (+.f64 (tan.f64 eps) eps))))","(/.f64 (neg.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (tan.f64 eps) eps))) (+.f64 (tan.f64 eps) eps))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))))) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (+.f64 (tan.f64 eps) eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64))) (+.f64 (tan.f64 eps) eps)))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 (tan.f64 eps) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (pow.f64 (*.f64 (tan.f64 eps) eps) #s(literal 3 binary64))) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))))","(/.f64 (*.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) #s(literal 1 binary64)) (+.f64 (tan.f64 eps) eps))","(/.f64 (*.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)))","(/.f64 (-.f64 (*.f64 (*.f64 eps eps) (+.f64 (tan.f64 eps) eps)) (*.f64 (+.f64 (tan.f64 eps) eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) (*.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (tan.f64 eps) #s(literal 4 binary64))) (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 9 binary64)) (pow.f64 (tan.f64 eps) #s(literal 9 binary64))) (*.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) (+.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (pow.f64 (*.f64 (tan.f64 eps) eps) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (*.f64 (+.f64 (tan.f64 eps) eps) (fma.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (fma.f64 eps eps (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (pow.f64 eps #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (tan.f64 eps) #s(literal 6 binary64))) (*.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))))","(/.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (tan.f64 eps) eps)) (*.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (tan.f64 eps) eps))))","(/.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (-.f64 (tan.f64 eps) eps)) (neg.f64 (+.f64 (tan.f64 eps) eps)))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (*.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))))","(/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (*.f64 #s(literal 1 binary64) (+.f64 (tan.f64 eps) eps)))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (neg.f64 (neg.f64 (+.f64 (tan.f64 eps) eps))))","(/.f64 (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64))) (+.f64 (tan.f64 eps) eps))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (*.f64 #s(literal 1 binary64) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (fma.f64 (tan.f64 eps) (tan.f64 eps) (-.f64 (*.f64 eps eps) (*.f64 (neg.f64 (tan.f64 eps)) eps))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (neg.f64 (neg.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)))))","(/.f64 (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64))) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)))","(/.f64 (-.f64 (tan.f64 eps) eps) #s(literal -1 binary64))","(/.f64 (-.f64 eps (tan.f64 eps)) #s(literal 1 binary64))","(neg.f64 (-.f64 (tan.f64 eps) eps))","(fma.f64 (/.f64 (*.f64 eps eps) (-.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (tan.f64 eps) #s(literal 3 binary64)))) (fma.f64 (tan.f64 eps) (-.f64 (tan.f64 eps) eps) (*.f64 eps eps)) (neg.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps))))","(fma.f64 (/.f64 (*.f64 eps eps) (-.f64 (*.f64 eps eps) (pow.f64 (tan.f64 eps) #s(literal 2 binary64)))) (-.f64 eps (tan.f64 eps)) (neg.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps))))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (-.f64 (pow.f64 eps #s(literal 4 binary64)) (pow.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) #s(literal 2 binary64)))) (-.f64 (*.f64 eps eps) (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps))) (neg.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)))))","(fma.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (+.f64 (pow.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)))) (fma.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) (-.f64 (*.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps)) (*.f64 eps eps)) (pow.f64 eps #s(literal 4 binary64))) (neg.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)))))","(fma.f64 (pow.f64 eps #s(literal 3/2 binary64)) (/.f64 (pow.f64 eps #s(literal 3/2 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) (neg.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)))))","(fma.f64 #s(literal -1 binary64) (tan.f64 eps) eps)","(fma.f64 (neg.f64 (sin.f64 eps)) (pow.f64 (cos.f64 eps) #s(literal -1 binary64)) eps)","(fma.f64 (*.f64 eps eps) (/.f64 eps (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) (neg.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)))))","(fma.f64 (*.f64 eps eps) (pow.f64 (+.f64 (tan.f64 eps) eps) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps))))","(fma.f64 (pow.f64 eps #s(literal 3 binary64)) (pow.f64 (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)))))","(fma.f64 (tan.f64 eps) #s(literal -1 binary64) eps)","(fma.f64 (sin.f64 eps) (neg.f64 (pow.f64 (cos.f64 eps) #s(literal -1 binary64))) eps)","(fma.f64 (sin.f64 eps) (pow.f64 (neg.f64 (cos.f64 eps)) #s(literal -1 binary64)) eps)","(fma.f64 eps (/.f64 (*.f64 eps eps) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) (neg.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)))))","(fma.f64 eps (/.f64 eps (+.f64 (tan.f64 eps) eps)) (neg.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps))))","(-.f64 (+.f64 eps #s(literal 0 binary64)) (tan.f64 eps))","(-.f64 (/.f64 (*.f64 eps (/.f64 eps (+.f64 (tan.f64 eps) eps))) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps)) #s(literal 1 binary64)))","(-.f64 (/.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) #s(literal 1 binary64)) (/.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) #s(literal 1 binary64)))","(-.f64 (/.f64 eps #s(literal 1 binary64)) (/.f64 (tan.f64 eps) #s(literal 1 binary64)))","(-.f64 (*.f64 eps (/.f64 eps (+.f64 (tan.f64 eps) eps))) (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps)))","(-.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))))","(-.f64 #s(literal 0 binary64) (-.f64 (tan.f64 eps) eps))","(-.f64 eps (tan.f64 eps))","(exp.f64 (*.f64 (*.f64 (log.f64 (-.f64 eps (tan.f64 eps))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 eps (tan.f64 eps)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (neg.f64 (neg.f64 eps)) (neg.f64 (tan.f64 eps)))","(+.f64 (*.f64 eps (/.f64 eps (+.f64 (tan.f64 eps) eps))) (neg.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 2 binary64)) (+.f64 (tan.f64 eps) eps))))","(+.f64 (/.f64 (pow.f64 eps #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps))) (neg.f64 (/.f64 (pow.f64 (tan.f64 eps) #s(literal 3 binary64)) (fma.f64 (+.f64 (tan.f64 eps) eps) (tan.f64 eps) (*.f64 eps eps)))))","(+.f64 (neg.f64 (tan.f64 eps)) eps)","(+.f64 eps (neg.f64 (tan.f64 eps)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":233.623046875,"type":"rewrite"},{"compiler":[[11420,1220]],"memory":[[4844928,25964816]],"time":36.137939453125,"type":"eval"},{"alts":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","next",0.0,"binary64"],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","next",0.014872480164287515,"binary64"],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","next",0.08511301468640456,"binary64"],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))","next",0.4627130724049391,"binary64"]],"compiler":[[26,15],[21,13],[16,11],[11,8]],"count":[[443,4]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[442,4],"picked":[1,0]}],"memory":[[-2352560,17006752]],"min-error":[[0.0,"binary64"]],"time":9.342041015625,"type":"prune"},{"egraph":[[0,5875,152,0.033769631],[20,5875,152,0.047019747],[19,5869,152,0.055890307],[18,5869,152,0.04072852],[17,5869,152,0.038860976],[16,5869,152,0.031414323],[15,5853,152,0.034810239],[14,5745,152,0.036819326],[13,5722,152,0.030913498],[12,5706,152,0.021273743],[11,5675,152,0.0185484],[10,5587,152,0.022656154],[9,5092,152,0.023165186],[8,3973,152,0.020500644],[7,1867,152,0.015092629],[6,1278,152,0.007239358],[5,787,152,0.007303152],[4,455,152,0.002690417],[3,229,152,0.001600683],[2,111,152,0.000866169],[1,65,152,0.000533924],[0,34,152,0.00039789],[0,21,152,0.000267814]],"inputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))","#s(literal -1/2 binary64)","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","(fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64))","(*.f64 eps eps)","eps","#s(literal 9/40 binary64)","#s(literal -1/2 binary64)","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","(fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64))","#s(literal -27/2800 binary64)","(*.f64 eps eps)","eps","#s(literal 9/40 binary64)","#s(literal -1/2 binary64)","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64))","(fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64))","#s(literal 27/112000 binary64)","(*.f64 eps eps)","eps","#s(literal -27/2800 binary64)","#s(literal 9/40 binary64)","#s(literal -1/2 binary64)"]],"locations":[["(fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64))","cost-diff",0],["(fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64))","cost-diff",0],["(fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","cost-diff",0],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","cost-diff",0],["(*.f64 eps eps)","cost-diff",0],["(fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64))","cost-diff",0],["(fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","cost-diff",0],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","cost-diff",0],["(*.f64 eps eps)","cost-diff",0],["(fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64))","cost-diff",0],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","cost-diff",0],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))","cost-diff",0]],"memory":[[-71408,14964592]],"method":["egg-herbie"],"outputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))","#s(literal -1/2 binary64)","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)))","(fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64))","(fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal -1/2 binary64))","(*.f64 eps eps)","eps","#s(literal 9/40 binary64)","#s(literal -1/2 binary64)","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","(fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64))","#s(literal -27/2800 binary64)","(*.f64 eps eps)","eps","#s(literal 9/40 binary64)","#s(literal -1/2 binary64)","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64))","(fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64))","#s(literal 27/112000 binary64)","(*.f64 eps eps)","eps","#s(literal -27/2800 binary64)","#s(literal 9/40 binary64)","#s(literal -1/2 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":563.286865234375,"type":"simplify"},{"compiler":[[126,25]],"locations":[["(*.f64 eps eps)","accuracy",0.0],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","accuracy",0.0],["(fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64))","accuracy",0.00390625],["(fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64))","accuracy",0.015625],["(fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","accuracy",0.0],["(*.f64 eps eps)","accuracy",0.0],["(fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64))","accuracy",0.00390625],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","accuracy",0.014872480164287515],["(fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64))","accuracy",0.0],["(*.f64 eps eps)","accuracy",0.0],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","accuracy",0.08511301468640456],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))","accuracy",0.4627130724049391]],"memory":[[-3193872,44496848]],"mixsample":[[4.0283203125,"ival-div",0],[15.688232421875,"adjust",800],[0.123291015625,"ival-assert",0],[9.04296875,"ival-sub",0],[1.992431640625,"ival-tan",0],[17.89794921875,"const",0],[6.36083984375,"ival-tan",400],[69.462646484375,"ival-sin",1600],[9.279541015625,"adjust",2000],[119.031005859375,"ival-tan",1600],[17.369384765625,"ival-add",0],[20.389404296875,"ival-mult",0],[8.04150390625,"ival-sin",400],[10.795166015625,"ival-tan",3600],[3.08837890625,"ival-sin",0],[1.96630859375,"adjust",2800],[0.27783203125,"ival-true",0],[18.6923828125,"ival-sin",3600],[0.2548828125,"exact",0]],"outcomes":[[49.559814453125,1,"valid",92],[258.7392578125,2,"valid",128],[59.8994140625,3,"valid",34],[0.477783203125,0,"valid",2]],"time":483.9501953125,"type":"localize"},{"count":[[11,33]],"inputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","(fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64))","(*.f64 eps eps)","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","(fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64))","(fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64))"]],"memory":[[2935536,2935536]],"outputs":[["-1/2","(- (* 9/40 (pow eps 2)) 1/2)","(- (* (pow eps 2) (+ 9/40 (* -27/2800 (pow eps 2)))) 1/2)","(- (* (pow eps 2) (+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))) 1/2)","(pow eps 2)","9/40","(+ 9/40 (* -27/2800 (pow eps 2)))","(+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))","-27/2800","(- (* 27/112000 (pow eps 2)) 27/2800)","1","(- (+ 1 (* -1 (/ (sin eps) eps))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (pow (sin eps) 2) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 3) (pow (cos eps) 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))))","(* 9/40 (pow eps 2))","(* (pow eps 2) (- 9/40 (* 1/2 (/ 1 (pow eps 2)))))","(* -27/2800 (pow eps 4))","(* (pow eps 4) (- (* 9/40 (/ 1 (pow eps 2))) 27/2800))","(* (pow eps 4) (- (* 9/40 (/ 1 (pow eps 2))) (+ 27/2800 (/ 1/2 (pow eps 4)))))","(* -27/2800 (pow eps 2))","(* (pow eps 2) (- (* 9/40 (/ 1 (pow eps 2))) 27/2800))","(* 27/112000 (pow eps 6))","(* (pow eps 6) (- 27/112000 (* 27/2800 (/ 1 (pow eps 2)))))","(* (pow eps 6) (- (+ 27/112000 (/ 9/40 (pow eps 4))) (* 27/2800 (/ 1 (pow eps 2)))))","(* (pow eps 6) (- (+ 27/112000 (/ 9/40 (pow eps 4))) (+ (* 27/2800 (/ 1 (pow eps 2))) (* 1/2 (/ 1 (pow eps 6))))))","(* 27/112000 (pow eps 4))","(* (pow eps 4) (- 27/112000 (* 27/2800 (/ 1 (pow eps 2)))))","(* (pow eps 4) (- (+ 27/112000 (/ 9/40 (pow eps 4))) (* 27/2800 (/ 1 (pow eps 2)))))","(* 27/112000 (pow eps 2))","(* (pow eps 2) (- 27/112000 (* 27/2800 (/ 1 (pow eps 2)))))","(+ 1 (* -1 (/ (- (sin eps) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (cos eps)))) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (* -1 (/ (* (pow (sin eps) 2) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (pow (cos eps) 2)))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))"]],"series":[[1.486083984375,"((/ (- eps (sin eps)) (- eps (tan eps))) (/ (- eps (sin eps)) (- eps (tan eps))) (+ (* (* eps eps) 9/40) -1/2) (* eps eps) (/ (- eps (sin eps)) (- eps (tan eps))) (+ (* (+ (* -27/2800 (* eps eps)) 9/40) (* eps eps)) -1/2) (+ (* -27/2800 (* eps eps)) 9/40) (/ (- eps (sin eps)) (- eps (tan eps))) (+ (* (+ (* (+ (* 27/112000 (* eps eps)) -27/2800) (* eps eps)) 9/40) (* eps eps)) -1/2) (+ (* (+ (* 27/112000 (* eps eps)) -27/2800) (* eps eps)) 9/40) (+ (* 27/112000 (* eps eps)) -27/2800))","eps","-inf"],[2.08203125,"((/ (- eps (sin eps)) (- eps (tan eps))) (/ (- eps (sin eps)) (- eps (tan eps))) (+ (* (* eps eps) 9/40) -1/2) (* eps eps) (/ (- eps (sin eps)) (- eps (tan eps))) (+ (* (+ (* -27/2800 (* eps eps)) 9/40) (* eps eps)) -1/2) (+ (* -27/2800 (* eps eps)) 9/40) (/ (- eps (sin eps)) (- eps (tan eps))) (+ (* (+ (* (+ (* 27/112000 (* eps eps)) -27/2800) (* eps eps)) 9/40) (* eps eps)) -1/2) (+ (* (+ (* 27/112000 (* eps eps)) -27/2800) (* eps eps)) 9/40) (+ (* 27/112000 (* eps eps)) -27/2800))","eps","inf"],[1.552001953125,"((/ (- eps (sin eps)) (- eps (tan eps))) (/ (- eps (sin eps)) (- eps (tan eps))) (+ (* (* eps eps) 9/40) -1/2) (* eps eps) (/ (- eps (sin eps)) (- eps (tan eps))) (+ (* (+ (* -27/2800 (* eps eps)) 9/40) (* eps eps)) -1/2) (+ (* -27/2800 (* eps eps)) 9/40) (/ (- eps (sin eps)) (- eps (tan eps))) (+ (* (+ (* (+ (* 27/112000 (* eps eps)) -27/2800) (* eps eps)) 9/40) (* eps eps)) -1/2) (+ (* (+ (* 27/112000 (* eps eps)) -27/2800) (* eps eps)) 9/40) (+ (* 27/112000 (* eps eps)) -27/2800))","eps","0"]],"time":6.019775390625,"type":"series"},{"count":[[33,33]],"egraph":[[0,8496,365,0.095867852],[3,4142,381,0.028173887],[2,1018,402,0.018069864],[1,320,427,0.00315137],[0,112,446,0.001159446]],"inputs":[["-1/2","(- (* 9/40 (pow eps 2)) 1/2)","(- (* (pow eps 2) (+ 9/40 (* -27/2800 (pow eps 2)))) 1/2)","(- (* (pow eps 2) (+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))) 1/2)","(pow eps 2)","9/40","(+ 9/40 (* -27/2800 (pow eps 2)))","(+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))","-27/2800","(- (* 27/112000 (pow eps 2)) 27/2800)","1","(- (+ 1 (* -1 (/ (sin eps) eps))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (pow (sin eps) 2) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 3) (pow (cos eps) 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))))","(* 9/40 (pow eps 2))","(* (pow eps 2) (- 9/40 (* 1/2 (/ 1 (pow eps 2)))))","(* -27/2800 (pow eps 4))","(* (pow eps 4) (- (* 9/40 (/ 1 (pow eps 2))) 27/2800))","(* (pow eps 4) (- (* 9/40 (/ 1 (pow eps 2))) (+ 27/2800 (/ 1/2 (pow eps 4)))))","(* -27/2800 (pow eps 2))","(* (pow eps 2) (- (* 9/40 (/ 1 (pow eps 2))) 27/2800))","(* 27/112000 (pow eps 6))","(* (pow eps 6) (- 27/112000 (* 27/2800 (/ 1 (pow eps 2)))))","(* (pow eps 6) (- (+ 27/112000 (/ 9/40 (pow eps 4))) (* 27/2800 (/ 1 (pow eps 2)))))","(* (pow eps 6) (- (+ 27/112000 (/ 9/40 (pow eps 4))) (+ (* 27/2800 (/ 1 (pow eps 2))) (* 1/2 (/ 1 (pow eps 6))))))","(* 27/112000 (pow eps 4))","(* (pow eps 4) (- 27/112000 (* 27/2800 (/ 1 (pow eps 2)))))","(* (pow eps 4) (- (+ 27/112000 (/ 9/40 (pow eps 4))) (* 27/2800 (/ 1 (pow eps 2)))))","(* 27/112000 (pow eps 2))","(* (pow eps 2) (- 27/112000 (* 27/2800 (/ 1 (pow eps 2)))))","(+ 1 (* -1 (/ (- (sin eps) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (cos eps)))) (/ (sin eps) (cos eps))) eps)))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (* -1 (/ (* (pow (sin eps) 2) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (pow (cos eps) 2)))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))"]],"memory":[[4069824,48777216]],"method":["egg-herbie"],"outputs":[["-1/2","#s(literal -1/2 binary64)","(- (* 9/40 (pow eps 2)) 1/2)","(fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64))","(- (* (pow eps 2) (+ 9/40 (* -27/2800 (pow eps 2)))) 1/2)","(fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(- (* (pow eps 2) (+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))) 1/2)","(fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(pow eps 2)","(*.f64 eps eps)","9/40","#s(literal 9/40 binary64)","(+ 9/40 (* -27/2800 (pow eps 2)))","(fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64))","(+ 9/40 (* (pow eps 2) (- (* 27/112000 (pow eps 2)) 27/2800)))","(fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64))","-27/2800","#s(literal -27/2800 binary64)","(- (* 27/112000 (pow eps 2)) 27/2800)","(fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64))","1","#s(literal 1 binary64)","(- (+ 1 (* -1 (/ (sin eps) eps))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(fma.f64 (/.f64 (sin.f64 eps) eps) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 eps))) #s(literal 1 binary64))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))) (* -1 (/ (sin eps) (* eps (cos eps)))))","(fma.f64 (/.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps) (-.f64 #s(literal -1 binary64) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps))) #s(literal 1 binary64))","(- (+ 1 (+ (* -1 (/ (sin eps) eps)) (/ (* (pow (sin eps) 2) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 3) (pow (cos eps) 2))))) (+ (* -1 (/ (sin eps) (* eps (cos eps)))) (* -1 (/ (* (sin eps) (- (* -1 (sin eps)) (* -1 (/ (sin eps) (cos eps))))) (* (pow eps 2) (cos eps))))))","(-.f64 #s(literal 1 binary64) (-.f64 (/.f64 (sin.f64 eps) eps) (fma.f64 (/.f64 (/.f64 (-.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (sin.f64 eps)) (cos.f64 eps)) (*.f64 eps eps)) (+.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 eps) #s(literal 2 binary64)) eps) (cos.f64 eps)) (sin.f64 eps)) (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)))))","(* 9/40 (pow eps 2))","(*.f64 (*.f64 eps eps) #s(literal 9/40 binary64))","(* (pow eps 2) (- 9/40 (* 1/2 (/ 1 (pow eps 2)))))","(fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64))","(* -27/2800 (pow eps 4))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal -27/2800 binary64))","(* (pow eps 4) (- (* 9/40 (/ 1 (pow eps 2))) 27/2800))","(*.f64 (-.f64 (/.f64 #s(literal 9/40 binary64) (*.f64 eps eps)) #s(literal 27/2800 binary64)) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (- (* 9/40 (/ 1 (pow eps 2))) (+ 27/2800 (/ 1/2 (pow eps 4)))))","(*.f64 (-.f64 (-.f64 (/.f64 #s(literal 9/40 binary64) (*.f64 eps eps)) #s(literal 27/2800 binary64)) (/.f64 #s(literal 1/2 binary64) (pow.f64 eps #s(literal 4 binary64)))) (pow.f64 eps #s(literal 4 binary64)))","(* -27/2800 (pow eps 2))","(*.f64 #s(literal -27/2800 binary64) (*.f64 eps eps))","(* (pow eps 2) (- (* 9/40 (/ 1 (pow eps 2))) 27/2800))","(fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64))","(* 27/112000 (pow eps 6))","(*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 27/112000 binary64))","(* (pow eps 6) (- 27/112000 (* 27/2800 (/ 1 (pow eps 2)))))","(*.f64 (-.f64 #s(literal 27/112000 binary64) (/.f64 #s(literal 27/2800 binary64) (*.f64 eps eps))) (pow.f64 eps #s(literal 6 binary64)))","(* (pow eps 6) (- (+ 27/112000 (/ 9/40 (pow eps 4))) (* 27/2800 (/ 1 (pow eps 2)))))","(*.f64 (-.f64 (+.f64 (/.f64 #s(literal 9/40 binary64) (pow.f64 eps #s(literal 4 binary64))) #s(literal 27/112000 binary64)) (/.f64 #s(literal 27/2800 binary64) (*.f64 eps eps))) (pow.f64 eps #s(literal 6 binary64)))","(* (pow eps 6) (- (+ 27/112000 (/ 9/40 (pow eps 4))) (+ (* 27/2800 (/ 1 (pow eps 2))) (* 1/2 (/ 1 (pow eps 6))))))","(*.f64 (-.f64 (-.f64 (+.f64 (/.f64 #s(literal 9/40 binary64) (pow.f64 eps #s(literal 4 binary64))) #s(literal 27/112000 binary64)) (/.f64 #s(literal 27/2800 binary64) (*.f64 eps eps))) (/.f64 #s(literal 1/2 binary64) (pow.f64 eps #s(literal 6 binary64)))) (pow.f64 eps #s(literal 6 binary64)))","(* 27/112000 (pow eps 4))","(*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 27/112000 binary64))","(* (pow eps 4) (- 27/112000 (* 27/2800 (/ 1 (pow eps 2)))))","(*.f64 (-.f64 #s(literal 27/112000 binary64) (/.f64 #s(literal 27/2800 binary64) (*.f64 eps eps))) (pow.f64 eps #s(literal 4 binary64)))","(* (pow eps 4) (- (+ 27/112000 (/ 9/40 (pow eps 4))) (* 27/2800 (/ 1 (pow eps 2)))))","(*.f64 (-.f64 (+.f64 (/.f64 #s(literal 9/40 binary64) (pow.f64 eps #s(literal 4 binary64))) #s(literal 27/112000 binary64)) (/.f64 #s(literal 27/2800 binary64) (*.f64 eps eps))) (pow.f64 eps #s(literal 4 binary64)))","(* 27/112000 (pow eps 2))","(*.f64 #s(literal 27/112000 binary64) (*.f64 eps eps))","(* (pow eps 2) (- 27/112000 (* 27/2800 (/ 1 (pow eps 2)))))","(fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64))","(+ 1 (* -1 (/ (- (sin eps) (/ (sin eps) (cos eps))) eps)))","(fma.f64 (/.f64 (sin.f64 eps) eps) (-.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) (cos.f64 eps))) #s(literal 1 binary64))","(+ 1 (* -1 (/ (- (+ (sin eps) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (cos eps)))) (/ (sin eps) (cos eps))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (*.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) (-.f64 (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) #s(literal -1 binary64))) eps))","(+ 1 (* -1 (/ (- (+ (sin eps) (* -1 (/ (- (* -1 (/ (* (pow (sin eps) 2) (- (sin eps) (/ (sin eps) (cos eps)))) (* eps (pow (cos eps) 2)))) (/ (* (sin eps) (- (sin eps) (/ (sin eps) (cos eps)))) (cos eps))) eps))) (/ (sin eps) (cos eps))) eps)))","(-.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (/.f64 (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps))) eps) (*.f64 (/.f64 (sin.f64 eps) (cos.f64 eps)) (+.f64 (/.f64 (/.f64 (sin.f64 eps) eps) (cos.f64 eps)) #s(literal 1 binary64))) (-.f64 (sin.f64 eps) (/.f64 (sin.f64 eps) (cos.f64 eps)))) eps))"]],"stop":[["iter limit",1],["node limit",1]],"time":258.744140625,"type":"simplify"},{"count":[[11,244]],"egraph":[[0,8531,133,0.077615508],[2,1313,133,0.03361292],[1,171,133,0.006194871],[0,34,133,0.001640945],[0,21,133,0.000257381]],"inputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","(fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64))","(*.f64 eps eps)","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","(fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64))","(fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64))"]],"memory":[[-5914592,51960208]],"outputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)))","(*.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 9/40 binary64) (*.f64 eps eps)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64) #s(literal -1/4 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 729/64000 binary64) #s(literal -1/8 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -9/80 binary64)))))))","(*.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64) #s(literal -1/4 binary64)) (pow.f64 (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)))","(*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 729/64000 binary64) #s(literal -1/8 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64)) (*.f64 (*.f64 eps eps) #s(literal -9/80 binary64))))))","(*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 729/64000 binary64) #s(literal -1/8 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -9/80 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal -1/2 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64)) (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal 1/2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal 1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64)) (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal 1/2 binary64))) (/.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64)) (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal 1/2 binary64))) (fma.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal 1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal 1/2 binary64))) (*.f64 (/.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64)) (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal 1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64)))) (neg.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 9/40 binary64) (*.f64 eps eps)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64) #s(literal -1/4 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 729/64000 binary64) #s(literal -1/8 binary64)))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -9/80 binary64)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 9/40 binary64) (*.f64 eps eps)) #s(literal 4 binary64)) #s(literal 1/16 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64) #s(literal 1/4 binary64)) (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal 1/2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 9/40 binary64) (*.f64 eps eps)) #s(literal 6 binary64)) #s(literal 1/64 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 #s(literal 9/40 binary64) (*.f64 eps eps)) #s(literal 4 binary64)) (+.f64 #s(literal 1/16 binary64) (*.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64)) #s(literal 1/4 binary64)))) (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal 1/2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 9/40 binary64) (*.f64 eps eps)) #s(literal 6 binary64)) #s(literal 1/64 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 729/64000 binary64)) #s(literal -1/8 binary64)) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -9/80 binary64))))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 3 binary64)) #s(literal 387420489/262144000000000 binary64) #s(literal -1/512 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 3 binary64)) #s(literal 531441/4096000000 binary64) (-.f64 #s(literal 1/64 binary64) (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -729/512000 binary64)))) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -9/80 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64)) (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal 1/2 binary64))) (*.f64 (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)) (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal 1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64))) (-.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 9/40 binary64) (*.f64 eps eps))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64) #s(literal -1/4 binary64))) (neg.f64 (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal 1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 729/64000 binary64) #s(literal -1/8 binary64))) (neg.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64)) (*.f64 (*.f64 eps eps) #s(literal -9/80 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 729/64000 binary64) #s(literal -1/8 binary64))) (neg.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -9/80 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64) #s(literal -1/4 binary64)) (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal 1/2 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 9/40 binary64) (*.f64 eps eps))) (-.f64 #s(literal 1/4 binary64) (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal -1/2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64)) (*.f64 (*.f64 eps eps) #s(literal -9/80 binary64)))) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 729/64000 binary64) #s(literal -1/8 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 729/64000 binary64) #s(literal -1/8 binary64)) (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64)) (*.f64 (*.f64 eps eps) #s(literal -9/80 binary64)))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 729/64000 binary64) #s(literal -1/8 binary64)) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 eps eps) #s(literal -9/80 binary64)))))","(fma.f64 (*.f64 #s(literal 9/40 binary64) eps) eps #s(literal -1/2 binary64))","(fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal -1/2 binary64))","(fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64))","(fma.f64 eps (*.f64 #s(literal 9/40 binary64) eps) #s(literal -1/2 binary64))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 9/40 binary64) (*.f64 eps eps)))) (/.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64)) (-.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 9/40 binary64) (*.f64 eps eps)))))","(-.f64 (/.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64)) (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal 1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 9/40 binary64) (*.f64 eps eps) #s(literal 1/2 binary64))))","(+.f64 (*.f64 #s(literal 9/40 binary64) (*.f64 eps eps)) #s(literal -1/2 binary64))","(+.f64 #s(literal -1/2 binary64) (*.f64 #s(literal 9/40 binary64) (*.f64 eps eps)))","(*.f64 (exp.f64 (log.f64 eps)) (exp.f64 (log.f64 eps)))","(*.f64 eps eps)","(pow.f64 (exp.f64 (log.f64 eps)) #s(literal 2 binary64))","(pow.f64 (*.f64 eps eps) #s(literal 1 binary64))","(pow.f64 eps #s(literal 2 binary64))","(exp.f64 (*.f64 (log.f64 eps) #s(literal 2 binary64)))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","(*.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64)))))))","(*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","(*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64)))))))","(*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64)) (pow.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))) (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))) (fma.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))) (*.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64)))) (neg.f64 (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps) #s(literal 4 binary64)) #s(literal 1/16 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps) #s(literal 6 binary64)) #s(literal 1/64 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps) #s(literal 4 binary64)) (+.f64 #s(literal 1/16 binary64) (*.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) #s(literal 1/4 binary64)))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps) #s(literal 6 binary64)) #s(literal 1/64 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64))) #s(literal -1/8 binary64)) (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64))))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps) #s(literal 9 binary64)) #s(literal -1/512 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps) #s(literal 6 binary64)) (-.f64 #s(literal 1/64 binary64) (*.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal -1/2 binary64)) #s(literal 3 binary64))))) (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (-.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64))) (neg.f64 (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64))) (neg.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps)) (-.f64 #s(literal 1/4 binary64) (*.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64))))) (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64)) (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64))))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64)) (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64)))))","(fma.f64 (*.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64) #s(literal -81/1600 binary64)) (*.f64 eps eps)) (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal -9/40 binary64)) #s(literal -1 binary64)) #s(literal -1/2 binary64))","(fma.f64 (*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -19683/21952000000 binary64) #s(literal 729/64000 binary64)) (*.f64 eps eps)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64) (-.f64 #s(literal 81/1600 binary64) (*.f64 (*.f64 eps eps) #s(literal -243/112000 binary64)))) #s(literal -1 binary64)) #s(literal -1/2 binary64))","(fma.f64 (*.f64 (*.f64 eps eps) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64) #s(literal -81/1600 binary64))) (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal -9/40 binary64)) #s(literal -1 binary64)) #s(literal -1/2 binary64))","(fma.f64 (*.f64 (*.f64 eps eps) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -19683/21952000000 binary64) #s(literal 729/64000 binary64))) (pow.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64) (-.f64 #s(literal 81/1600 binary64) (*.f64 (*.f64 eps eps) #s(literal -243/112000 binary64)))) #s(literal -1 binary64)) #s(literal -1/2 binary64))","(fma.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps #s(literal -1/2 binary64))","(fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(fma.f64 (*.f64 eps eps) (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal -1/2 binary64))","(fma.f64 eps (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) #s(literal -1/2 binary64))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps))) (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (-.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps))))","(-.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))))","(+.f64 (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps) #s(literal -1/2 binary64))","(+.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps))","(*.f64 (-.f64 #s(literal 81/1600 binary64) (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 9/40 binary64) (*.f64 #s(literal -27/2800 binary64) (*.f64 eps eps)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64) #s(literal -81/1600 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal -9/40 binary64)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -19683/21952000000 binary64) #s(literal 729/64000 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64) (-.f64 #s(literal 81/1600 binary64) (*.f64 (*.f64 eps eps) #s(literal -243/112000 binary64)))))))","(*.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64) #s(literal -81/1600 binary64)) (pow.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal -9/40 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)))","(*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -19683/21952000000 binary64) #s(literal 729/64000 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 81/1600 binary64) (-.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64)) (*.f64 (*.f64 eps eps) #s(literal -243/112000 binary64))))))","(*.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -19683/21952000000 binary64) #s(literal 729/64000 binary64)) (pow.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64) (-.f64 #s(literal 81/1600 binary64) (*.f64 (*.f64 eps eps) #s(literal -243/112000 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64)) (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal -9/40 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 81/1600 binary64) (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal -9/40 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64)) (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal -9/40 binary64))) (/.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64)) (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal -9/40 binary64))) (fma.f64 (/.f64 #s(literal 81/1600 binary64) (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal -9/40 binary64))) (/.f64 #s(literal 81/1600 binary64) (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal -9/40 binary64))) (*.f64 (/.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64)) (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal -9/40 binary64))) (/.f64 #s(literal 81/1600 binary64) (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal -9/40 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 81/1600 binary64) (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64)))) (neg.f64 (-.f64 #s(literal 9/40 binary64) (*.f64 #s(literal -27/2800 binary64) (*.f64 eps eps)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64) #s(literal -81/1600 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal -9/40 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -19683/21952000000 binary64) #s(literal 729/64000 binary64)))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64) (-.f64 #s(literal 81/1600 binary64) (*.f64 (*.f64 eps eps) #s(literal -243/112000 binary64)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal -27/2800 binary64) (*.f64 eps eps)) #s(literal 4 binary64)) #s(literal 6561/2560000 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64) #s(literal 81/1600 binary64)) (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal -9/40 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal -27/2800 binary64) (*.f64 eps eps)) #s(literal 6 binary64)) #s(literal 531441/4096000000 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 #s(literal -27/2800 binary64) (*.f64 eps eps)) #s(literal 4 binary64)) (+.f64 #s(literal 6561/2560000 binary64) (*.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64)) #s(literal 81/1600 binary64)))) (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal -9/40 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal -27/2800 binary64) (*.f64 eps eps)) #s(literal 6 binary64)) #s(literal 531441/4096000000 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -19683/21952000000 binary64)) #s(literal 729/64000 binary64)) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64) (-.f64 #s(literal 81/1600 binary64) (*.f64 (*.f64 eps eps) #s(literal -243/112000 binary64))))))","(/.f64 (*.f64 (fma.f64 (pow.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 3 binary64)) #s(literal -7625597484987/10578455953408000000000000000000 binary64) #s(literal 387420489/262144000000000 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 3 binary64)) #s(literal 387420489/481890304000000000000 binary64) (-.f64 #s(literal 531441/4096000000 binary64) (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -14348907/1404928000000000 binary64)))) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64) (-.f64 #s(literal 81/1600 binary64) (*.f64 (*.f64 eps eps) #s(literal -243/112000 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64)) (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal -9/40 binary64))) (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal -9/40 binary64)) #s(literal 81/1600 binary64))) (*.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal -9/40 binary64)) (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal -9/40 binary64))))","(/.f64 (-.f64 #s(literal 81/1600 binary64) (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64))) (-.f64 #s(literal 9/40 binary64) (*.f64 #s(literal -27/2800 binary64) (*.f64 eps eps))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64) #s(literal -81/1600 binary64))) (neg.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal -9/40 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -19683/21952000000 binary64) #s(literal 729/64000 binary64))) (neg.f64 (+.f64 #s(literal 81/1600 binary64) (-.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64)) (*.f64 (*.f64 eps eps) #s(literal -243/112000 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -19683/21952000000 binary64) #s(literal 729/64000 binary64))) (neg.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64) (-.f64 #s(literal 81/1600 binary64) (*.f64 (*.f64 eps eps) #s(literal -243/112000 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64) #s(literal -81/1600 binary64)) (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal -9/40 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 9/40 binary64) (*.f64 #s(literal -27/2800 binary64) (*.f64 eps eps))) (-.f64 #s(literal 81/1600 binary64) (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 81/1600 binary64) (-.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64)) (*.f64 (*.f64 eps eps) #s(literal -243/112000 binary64)))) (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -19683/21952000000 binary64) #s(literal 729/64000 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -19683/21952000000 binary64) #s(literal 729/64000 binary64)) (+.f64 #s(literal 81/1600 binary64) (-.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64)) (*.f64 (*.f64 eps eps) #s(literal -243/112000 binary64)))))","(/.f64 (fma.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -19683/21952000000 binary64) #s(literal 729/64000 binary64)) (fma.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64) (-.f64 #s(literal 81/1600 binary64) (*.f64 (*.f64 eps eps) #s(literal -243/112000 binary64)))))","(fma.f64 (*.f64 #s(literal -27/2800 binary64) eps) eps #s(literal 9/40 binary64))","(fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64))","(fma.f64 (*.f64 eps eps) #s(literal -27/2800 binary64) #s(literal 9/40 binary64))","(fma.f64 eps (*.f64 #s(literal -27/2800 binary64) eps) #s(literal 9/40 binary64))","(-.f64 (/.f64 #s(literal 81/1600 binary64) (-.f64 #s(literal 9/40 binary64) (*.f64 #s(literal -27/2800 binary64) (*.f64 eps eps)))) (/.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64)) (-.f64 #s(literal 9/40 binary64) (*.f64 #s(literal -27/2800 binary64) (*.f64 eps eps)))))","(-.f64 (/.f64 (*.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64)) (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal -9/40 binary64))) (/.f64 #s(literal 81/1600 binary64) (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal -9/40 binary64))))","(+.f64 (*.f64 #s(literal -27/2800 binary64) (*.f64 eps eps)) #s(literal 9/40 binary64))","(+.f64 #s(literal 9/40 binary64) (*.f64 #s(literal -27/2800 binary64) (*.f64 eps eps)))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","(*.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64)))))))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64)))))))","(*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64)) (pow.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))) (/.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))) (fma.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))) (*.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64)))) (neg.f64 (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps) #s(literal 4 binary64)) #s(literal 1/16 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps) #s(literal 6 binary64)) #s(literal 1/64 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps) #s(literal 4 binary64)) (+.f64 #s(literal 1/16 binary64) (*.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) #s(literal 1/4 binary64)))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps) #s(literal 6 binary64)) #s(literal 1/64 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64))) #s(literal -1/8 binary64)) (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64))))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps) #s(literal 9 binary64)) #s(literal -1/512 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps) #s(literal 6 binary64)) (-.f64 #s(literal 1/64 binary64) (*.f64 (pow.f64 eps #s(literal 6 binary64)) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal -1/2 binary64)) #s(literal 3 binary64))))) (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (-.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64))) (neg.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -1/4 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps)) (-.f64 #s(literal 1/4 binary64) (*.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64))))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64)) (+.f64 #s(literal 1/4 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64))))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal -1/8 binary64)) (-.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) (*.f64 eps #s(literal -1/2 binary64)))))","(fma.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -81/1600 binary64)) (*.f64 eps eps)) (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal -9/40 binary64)) #s(literal -1 binary64)) #s(literal -1/2 binary64))","(fma.f64 (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 729/64000 binary64)) (*.f64 eps eps)) (pow.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) eps) (*.f64 #s(literal 9/40 binary64) eps))) #s(literal -1 binary64)) #s(literal -1/2 binary64))","(fma.f64 (*.f64 (*.f64 eps eps) (fma.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -81/1600 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal -9/40 binary64)) #s(literal -1 binary64)) #s(literal -1/2 binary64))","(fma.f64 (*.f64 (*.f64 eps eps) (fma.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 729/64000 binary64))) (pow.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) eps) (*.f64 #s(literal 9/40 binary64) eps))) #s(literal -1 binary64)) #s(literal -1/2 binary64))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps #s(literal -1/2 binary64))","(fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64))","(fma.f64 (*.f64 eps eps) (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal -1/2 binary64))","(fma.f64 eps (*.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) #s(literal -1/2 binary64))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps))) (/.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (-.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps))))","(-.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal 1/2 binary64))))","(+.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps) #s(literal -1/2 binary64))","(+.f64 #s(literal -1/2 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) eps) eps))","(*.f64 (-.f64 #s(literal 81/1600 binary64) (*.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 9/40 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) eps) eps))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -81/1600 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal -9/40 binary64)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 729/64000 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) eps) (*.f64 #s(literal 9/40 binary64) eps))))))","(*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -81/1600 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal -9/40 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)))","(*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 729/64000 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 81/1600 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) eps) (*.f64 #s(literal 9/40 binary64) eps))))))","(*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 729/64000 binary64)) (pow.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) eps) (*.f64 #s(literal 9/40 binary64) eps))) #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal -9/40 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 81/1600 binary64) (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal -9/40 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal -9/40 binary64))) (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal -9/40 binary64))) (fma.f64 (/.f64 #s(literal 81/1600 binary64) (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal -9/40 binary64))) (/.f64 #s(literal 81/1600 binary64) (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal -9/40 binary64))) (*.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal -9/40 binary64))) (/.f64 #s(literal 81/1600 binary64) (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal -9/40 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 81/1600 binary64) (*.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal 9/40 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) eps) eps))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -81/1600 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal -9/40 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 729/64000 binary64)))) (neg.f64 (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) eps) (*.f64 #s(literal 9/40 binary64) eps))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) eps) eps) #s(literal 4 binary64)) #s(literal 6561/2560000 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64)) (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal -9/40 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) eps) eps) #s(literal 6 binary64)) #s(literal 531441/4096000000 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) eps) eps) #s(literal 4 binary64)) (+.f64 #s(literal 6561/2560000 binary64) (*.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) #s(literal 81/1600 binary64)))) (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal -9/40 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) eps) eps) #s(literal 6 binary64)) #s(literal 531441/4096000000 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64))) #s(literal 729/64000 binary64)) (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) eps) (*.f64 #s(literal 9/40 binary64) eps)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) eps) eps) #s(literal 9 binary64)) #s(literal 387420489/262144000000000 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) eps) eps) #s(literal 6 binary64)) (-.f64 #s(literal 531441/4096000000 binary64) (*.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 3 binary64)) (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 729/64000 binary64))))) (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) eps) (*.f64 #s(literal 9/40 binary64) eps)))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal -9/40 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal -9/40 binary64)) #s(literal 81/1600 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal -9/40 binary64)) (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal -9/40 binary64))))","(/.f64 (-.f64 #s(literal 81/1600 binary64) (*.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)))) (-.f64 #s(literal 9/40 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) eps) eps)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -81/1600 binary64))) (neg.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal -9/40 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 729/64000 binary64))) (neg.f64 (+.f64 #s(literal 81/1600 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) eps) (*.f64 #s(literal 9/40 binary64) eps))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 729/64000 binary64))) (neg.f64 (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) eps) (*.f64 #s(literal 9/40 binary64) eps)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal -81/1600 binary64)) (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal -9/40 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 9/40 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) eps) eps)) (-.f64 #s(literal 81/1600 binary64) (*.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 81/1600 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) eps) (*.f64 #s(literal 9/40 binary64) eps)))) (fma.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 729/64000 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 729/64000 binary64)) (+.f64 #s(literal 81/1600 binary64) (-.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) eps) (*.f64 #s(literal 9/40 binary64) eps)))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 3 binary64)) (pow.f64 eps #s(literal 6 binary64)) #s(literal 729/64000 binary64)) (-.f64 (fma.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64)) #s(literal 81/1600 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) eps) (*.f64 #s(literal 9/40 binary64) eps))))","(fma.f64 (*.f64 (fma.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -729/7840000 binary64)) (*.f64 eps eps)) (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal 27/2800 binary64)) #s(literal -1 binary64)) #s(literal 9/40 binary64))","(fma.f64 (*.f64 (fma.f64 #s(literal 19683/1404928000000000 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -19683/21952000000 binary64)) (*.f64 eps eps)) (pow.f64 (fma.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 729/7840000 binary64) (*.f64 (*.f64 eps eps) #s(literal -729/313600000 binary64)))) #s(literal -1 binary64)) #s(literal 9/40 binary64))","(fma.f64 (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -729/7840000 binary64))) (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal 27/2800 binary64)) #s(literal -1 binary64)) #s(literal 9/40 binary64))","(fma.f64 (*.f64 (*.f64 eps eps) (fma.f64 #s(literal 19683/1404928000000000 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -19683/21952000000 binary64))) (pow.f64 (fma.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 729/7840000 binary64) (*.f64 (*.f64 eps eps) #s(literal -729/313600000 binary64)))) #s(literal -1 binary64)) #s(literal 9/40 binary64))","(fma.f64 (*.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) eps) eps #s(literal 9/40 binary64))","(fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64))","(fma.f64 (*.f64 eps eps) (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 9/40 binary64))","(fma.f64 eps (*.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) eps) #s(literal 9/40 binary64))","(-.f64 (/.f64 #s(literal 81/1600 binary64) (-.f64 #s(literal 9/40 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) eps) eps))) (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (-.f64 #s(literal 9/40 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) eps) eps))))","(-.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) #s(literal 2 binary64)) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal -9/40 binary64))) (/.f64 #s(literal 81/1600 binary64) (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal -9/40 binary64))))","(+.f64 (*.f64 (*.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) eps) eps) #s(literal 9/40 binary64))","(+.f64 #s(literal 9/40 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) eps) eps))","(*.f64 (-.f64 #s(literal 729/7840000 binary64) (*.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal -27/2800 binary64) (*.f64 #s(literal 27/112000 binary64) (*.f64 eps eps)))))","(*.f64 (neg.f64 (fma.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -729/7840000 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal 27/2800 binary64)))))","(*.f64 (neg.f64 (fma.f64 #s(literal 19683/1404928000000000 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -19683/21952000000 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 729/7840000 binary64) (*.f64 (*.f64 eps eps) #s(literal -729/313600000 binary64)))))))","(*.f64 (fma.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -729/7840000 binary64)) (pow.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal 27/2800 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)))","(*.f64 (fma.f64 #s(literal 19683/1404928000000000 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -19683/21952000000 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 729/7840000 binary64) (-.f64 (*.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 eps eps) #s(literal -729/313600000 binary64))))))","(*.f64 (fma.f64 #s(literal 19683/1404928000000000 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -19683/21952000000 binary64)) (pow.f64 (fma.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 729/7840000 binary64) (*.f64 (*.f64 eps eps) #s(literal -729/313600000 binary64)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal 27/2800 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 729/7840000 binary64) (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal 27/2800 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal 27/2800 binary64))) (/.f64 (*.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal 27/2800 binary64))) (fma.f64 (/.f64 #s(literal 729/7840000 binary64) (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal 27/2800 binary64))) (/.f64 #s(literal 729/7840000 binary64) (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal 27/2800 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal 27/2800 binary64))) (/.f64 #s(literal 729/7840000 binary64) (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal 27/2800 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 729/7840000 binary64) (*.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64))))) (neg.f64 (-.f64 #s(literal -27/2800 binary64) (*.f64 #s(literal 27/112000 binary64) (*.f64 eps eps)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -729/7840000 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal 27/2800 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 19683/1404928000000000 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -19683/21952000000 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 729/7840000 binary64) (*.f64 (*.f64 eps eps) #s(literal -729/313600000 binary64)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 27/112000 binary64) (*.f64 eps eps)) #s(literal 4 binary64)) #s(literal 531441/61465600000000 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal 729/7840000 binary64)) (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal 27/2800 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 27/112000 binary64) (*.f64 eps eps)) #s(literal 6 binary64)) #s(literal 387420489/481890304000000000000 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 #s(literal 27/112000 binary64) (*.f64 eps eps)) #s(literal 4 binary64)) (+.f64 #s(literal 531441/61465600000000 binary64) (*.f64 (*.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64))) #s(literal 729/7840000 binary64)))) (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal 27/2800 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 27/112000 binary64) (*.f64 eps eps)) #s(literal 6 binary64)) #s(literal 387420489/481890304000000000000 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (*.f64 #s(literal 19683/1404928000000000 binary64) (pow.f64 eps #s(literal 6 binary64))) #s(literal -19683/21952000000 binary64)) (fma.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 729/7840000 binary64) (*.f64 (*.f64 eps eps) #s(literal -729/313600000 binary64))))))","(/.f64 (*.f64 (fma.f64 #s(literal 7625597484987/2773078757450186752000000000000000000000000000 binary64) (pow.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal 3 binary64)) #s(literal -7625597484987/10578455953408000000000000000000 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 387420489/1973822685184000000000000000000 binary64) (pow.f64 (pow.f64 eps #s(literal 4 binary64)) #s(literal 3 binary64)) (-.f64 #s(literal 387420489/481890304000000000000 binary64) (*.f64 (pow.f64 eps #s(literal 6 binary64)) #s(literal -387420489/30840979456000000000000000 binary64)))) (fma.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 729/7840000 binary64) (*.f64 (*.f64 eps eps) #s(literal -729/313600000 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal 27/2800 binary64))) (*.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal 27/2800 binary64)) #s(literal 729/7840000 binary64))) (*.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal 27/2800 binary64)) (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal 27/2800 binary64))))","(/.f64 (-.f64 #s(literal 729/7840000 binary64) (*.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64)))) (-.f64 #s(literal -27/2800 binary64) (*.f64 #s(literal 27/112000 binary64) (*.f64 eps eps))))","(/.f64 (neg.f64 (fma.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -729/7840000 binary64))) (neg.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal 27/2800 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 19683/1404928000000000 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -19683/21952000000 binary64))) (neg.f64 (+.f64 #s(literal 729/7840000 binary64) (-.f64 (*.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 eps eps) #s(literal -729/313600000 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 19683/1404928000000000 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -19683/21952000000 binary64))) (neg.f64 (fma.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 729/7840000 binary64) (*.f64 (*.f64 eps eps) #s(literal -729/313600000 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)))))","(/.f64 (fma.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64)) #s(literal -729/7840000 binary64)) (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal 27/2800 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -27/2800 binary64) (*.f64 #s(literal 27/112000 binary64) (*.f64 eps eps))) (-.f64 #s(literal 729/7840000 binary64) (*.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 729/7840000 binary64) (-.f64 (*.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 eps eps) #s(literal -729/313600000 binary64)))) (fma.f64 #s(literal 19683/1404928000000000 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -19683/21952000000 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64))))","(/.f64 (fma.f64 #s(literal 19683/1404928000000000 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -19683/21952000000 binary64)) (+.f64 #s(literal 729/7840000 binary64) (-.f64 (*.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64))) (*.f64 (*.f64 eps eps) #s(literal -729/313600000 binary64)))))","(/.f64 (fma.f64 #s(literal 19683/1404928000000000 binary64) (pow.f64 eps #s(literal 6 binary64)) #s(literal -19683/21952000000 binary64)) (fma.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64)) (-.f64 #s(literal 729/7840000 binary64) (*.f64 (*.f64 eps eps) #s(literal -729/313600000 binary64)))))","(fma.f64 (*.f64 #s(literal 27/112000 binary64) eps) eps #s(literal -27/2800 binary64))","(fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64))","(fma.f64 (*.f64 eps eps) #s(literal 27/112000 binary64) #s(literal -27/2800 binary64))","(fma.f64 eps (*.f64 #s(literal 27/112000 binary64) eps) #s(literal -27/2800 binary64))","(-.f64 (/.f64 #s(literal 729/7840000 binary64) (-.f64 #s(literal -27/2800 binary64) (*.f64 #s(literal 27/112000 binary64) (*.f64 eps eps)))) (/.f64 (*.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64))) (-.f64 #s(literal -27/2800 binary64) (*.f64 #s(literal 27/112000 binary64) (*.f64 eps eps)))))","(-.f64 (/.f64 (*.f64 #s(literal 729/12544000000 binary64) (pow.f64 eps #s(literal 4 binary64))) (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal 27/2800 binary64))) (/.f64 #s(literal 729/7840000 binary64) (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal 27/2800 binary64))))","(+.f64 (*.f64 #s(literal 27/112000 binary64) (*.f64 eps eps)) #s(literal -27/2800 binary64))","(+.f64 #s(literal -27/2800 binary64) (*.f64 #s(literal 27/112000 binary64) (*.f64 eps eps)))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":312.446044921875,"type":"rewrite"},{"compiler":[[11991,1342]],"memory":[[3281120,34838688]],"time":48.68798828125,"type":"eval"},{"alts":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","done",0.0,"binary64"],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","done",0.014872480164287515,"binary64"],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","done",0.08511301468640456,"binary64"],["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))","done",0.4627130724049391,"binary64"]],"compiler":[[83,26],[26,15],[21,13],[16,11],[11,8]],"count":[[310,4]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[306,0],"picked":[4,4]}],"memory":[[-2703728,12861248]],"min-error":[[0.0,"binary64"]],"time":6.9150390625,"type":"prune"},{"accuracy":[0.0],"baseline":[0.0],"branch":[["eps",0.0,1,"binary64"],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))",0.0,1,"binary64"]],"compiler":[[1,1],[9,6]],"count":[[5,1]],"inputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))"]],"memory":[[3449680,3449680]],"oracle":[63.11189176494188],"outputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))"]],"repr":["binary64"],"time":3.958984375,"times":[[1.989990234375,"eps"],[1.4248046875,"(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))"]],"type":"regimes"},{"accuracy":[0.014872480164287515],"baseline":[0.014872480164287515],"branch":[["eps",0.014872480164287515,1,"binary64"],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))",0.014872480164287515,1,"binary64"]],"compiler":[[1,1],[9,6]],"count":[[3,1]],"inputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))"]],"memory":[[-5251152,3015648]],"oracle":[0.4627130724049391],"outputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))"]],"repr":["binary64"],"time":3.77392578125,"times":[[2.064208984375,"eps"],[1.265869140625,"(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))"]],"type":"regimes"},{"accuracy":[0.08511301468640456],"baseline":[0.08511301468640456],"branch":[["eps",0.08511301468640456,1,"binary64"],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))",0.08511301468640456,1,"binary64"]],"compiler":[[1,1],[9,6]],"count":[[2,1]],"inputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))"]],"memory":[[2786272,2786272]],"oracle":[0.4627130724049391],"outputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))"]],"repr":["binary64"],"time":3.035888671875,"times":[[1.5380859375,"eps"],[1.115966796875,"(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))"]],"type":"regimes"},{"accuracy":[0.462713072404939],"baseline":[0.4627130724049391],"branch":[["eps",0.462713072404939,1,"binary64"],["(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))",0.462713072404939,1,"binary64"]],"compiler":[[1,1],[9,6]],"count":[[1,1]],"inputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))"]],"link":["."],"memory":[[2624608,2624608]],"name":["sintan (problem 3.4.5)"],"oracle":[0.4627130724049391],"outputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))"]],"repr":["binary64"],"time":2.376220703125,"times":[[1.06396484375,"eps"],[0.963134765625,"(/.f64 (-.f64 eps (sin.f64 eps)) (-.f64 eps (tan.f64 eps)))"]],"type":"regimes"},{"egraph":[[8,5536,74,0.029445661],[7,1549,74,0.0279211],[6,431,74,0.00691642],[5,176,74,0.001979578],[4,93,74,0.000871563],[3,55,74,0.000574644],[2,38,74,0.000464285],[1,28,74,0.000380471],[0,21,74,0.00039621]],"inputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))"]],"memory":[[-266224,9863104]],"method":["egg-herbie"],"outputs":[["#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 (fma.f64 #s(literal 27/112000 binary64) (*.f64 eps eps) #s(literal -27/2800 binary64)) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (fma.f64 #s(literal -27/2800 binary64) (*.f64 eps eps) #s(literal 9/40 binary64)) (*.f64 eps eps) #s(literal -1/2 binary64)))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) (fma.f64 (*.f64 eps eps) #s(literal 9/40 binary64) #s(literal -1/2 binary64)))","#s(approx (/ (- eps (sin eps)) (- eps (tan eps))) #s(literal -1/2 binary64))"]],"stop":[["node limit",1]],"time":87.518798828125,"type":"simplify"},{"compiler":[[74,21]],"memory":[[-7567264,699088]],"stop":[["done",1]],"time":6.287109375,"type":"soundness"},{"compiler":[[74,21],[74,21],[7,6],[7,6],[9,6],[9,6],[26,15],[26,15]],"memory":[[5839296,21452336]],"remove-preprocessing":[["(abs eps)"],[],[],[],[]],"time":36.924072265625,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.02197265625,"type":"end"}]