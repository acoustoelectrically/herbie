[{"memory":[[18576,18576]],"time":0.033935546875,"type":"start"},{"compiler":[[19,12]],"memory":[[84912,84912]],"method":["search"],"sampling":[[1,{"invalid":0.0,"precondition":0.7628198006136451,"unknown":0.0,"valid":0.23718019938635493}],[0,{"invalid":0.0,"precondition":0.7628198006136451,"unknown":0.23718019938635493,"valid":0.0}]],"time":0.4150390625,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.7628198006136451,"valid":0.23718019938635493}],"memory":[[-100804344,474000912]],"mixsample":[[10.631103515625,"ival-add",1200],[17.2138671875,"ival-sub",1200],[293.12744140625,"adjust",800],[26.7861328125,"ival-mult",1200],[149.11865234375,"ival-log",2800],[161.63671875,"ival-log1p",2800],[32.07861328125,"ival-mult",2000],[25.887451171875,"ival-mult",2800],[4.441162109375,"ival-assert",0],[136.5087890625,"ival-sub",0],[11.03515625,"ival-sub",400],[123.801025390625,"ival-log1p",1600],[109.569091796875,"ival-log",1600],[89.010498046875,"ival-log1p",1200],[135.51611328125,"ival-log",2000],[78.254150390625,"ival-log",1200],[57.723876953125,"ival-add",0],[11.8994140625,"ival-add",1600],[314.4951171875,"ival-mult",0],[18.95654296875,"ival-sub",800],[150.523193359375,"ival-log1p",2000],[8.98095703125,"ival-add",2800],[31.056884765625,"ival-mult",1600],[13.759765625,"ival-add",2000],[183.664794921875,"ival-log1p",2400],[126.056396484375,"ival-log",0],[170.92431640625,"ival-log1p",0],[13.141357421875,"ival-add",2400],[34.380859375,"ival-mult",2400],[28.752197265625,"ival->",0],[12.97705078125,"exact",0],[171.974853515625,"ival-log",2400]],"outcomes":[[3071.382568359375,1,"valid",8256]],"time":3502.85693359375,"type":"sample"},{"compiler":[[15,9],[53,11],[53,11]],"confusion":[[256,0,0,0]],"explanations":[["-.f64","(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))","nan-rescue",3,0,[["(*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64))))","overflow",3],["(*.f64 n (log.f64 n))","overflow",3]],[[1]]],["-.f64","(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))","cancellation",253,0,[],[[1]]]],"fperrors":[["(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))",256,0,false,0,false],["n",0,0,false,0,false],["(*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64))))",0,0,false,0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(+.f64 n #s(literal 1 binary64))",0,0,false,0,false],["(log.f64 n)",0,0,false,0,false],["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))",0,0,false,0,false],["(*.f64 n (log.f64 n))",0,0,false,0,false],["(log.f64 (+.f64 n #s(literal 1 binary64)))",0,0,false,0,false]],"freqs":[[1,256]],"maybe-confusion":[[256,0,0,0,0,0]],"memory":[[-8454496,78508640]],"mixsample":[[0.5986328125,"ival-add",1200],[0.92333984375,"ival-sub",1200],[15.6884765625,"adjust",800],[1.623291015625,"ival-mult",1200],[9.1181640625,"ival-log",2800],[9.03173828125,"ival-log1p",2800],[1.484130859375,"ival-mult",2000],[1.38720703125,"ival-mult",2800],[0.23046875,"ival-assert",0],[7.807373046875,"ival-sub",0],[0.517333984375,"ival-sub",400],[6.616943359375,"ival-log1p",1600],[6.61328125,"ival-log",1600],[5.579345703125,"ival-log1p",1200],[6.952392578125,"ival-log",2000],[5.619140625,"ival-log",1200],[2.9287109375,"ival-add",0],[7.110107421875,"ival-mult",0],[0.5361328125,"ival-add",1600],[0.8955078125,"ival-sub",800],[7.074951171875,"ival-log1p",2000],[0.460205078125,"ival-add",2800],[1.477294921875,"ival-mult",1600],[0.476318359375,"ival-add",2000],[9.5234375,"ival-log1p",2400],[7.94677734375,"ival-log",0],[0.5517578125,"ival-true",0],[8.6328125,"ival-log1p",0],[0.557373046875,"ival-add",2400],[1.783203125,"ival-mult",2400],[0.38037109375,"exact",0],[9.214599609375,"ival-log",2400]],"outcomes":[[164.46875,1,"valid",512]],"time":256.136962890625,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[15,9]],"egraph":[[0,1670,11,0.008167586],[9,1670,15,0.011206902],[8,1638,15,0.011897811],[7,1344,15,0.014389535],[6,891,15,0.009025789],[5,499,15,0.004007974],[4,258,15,0.002020998],[3,123,15,0.001026335],[2,59,15,0.000550518],[1,31,15,0.000281088],[0,16,15,0.000260514],[0,9,15,0.00014172]],"inputs":[["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))"]],"memory":[[1935616,17809616]],"method":["egg-herbie"],"outputs":[["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(fma.f64 (-.f64 (log1p.f64 n) (log.f64 n)) n (-.f64 (log1p.f64 n) #s(literal 1 binary64)))"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[[]],"time":231.698974609375,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[43648,43648]],"time":0.215087890625,"type":"eval"},{"alts":[["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","next",63.01601884390108,"binary64"]],"compiler":[[15,9]],"memory":[[343216,343216]],"time":0.68701171875,"type":"prune"},{"egraph":[[0,1670,39,0.008405873],[9,1670,51,0.009877211],[8,1638,51,0.010618206],[7,1344,51,0.013511219],[6,891,51,0.009337408],[5,499,51,0.003819954],[4,258,51,0.001934108],[3,123,51,0.000954977],[2,59,51,0.000464995],[1,31,51,0.000328924],[0,16,51,0.000313029],[0,9,51,0.000131935]],"inputs":[["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))","(*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64))))","(+.f64 n #s(literal 1 binary64))","n","#s(literal 1 binary64)","(log.f64 (+.f64 n #s(literal 1 binary64)))","(*.f64 n (log.f64 n))","(log.f64 n)"]],"locations":[["(*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64))))","cost-diff",0],["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","cost-diff",0],["(log.f64 (+.f64 n #s(literal 1 binary64)))","cost-diff",2],["(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))","cost-diff",2]],"memory":[[-3258176,4692176]],"method":["egg-herbie"],"outputs":[["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(fma.f64 (-.f64 (log1p.f64 n) (log.f64 n)) n (-.f64 (log1p.f64 n) #s(literal 1 binary64)))","(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))","(fma.f64 (-.f64 (log1p.f64 n) (log.f64 n)) n (log1p.f64 n))","(*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64))))","(fma.f64 (log1p.f64 n) n (log1p.f64 n))","(+.f64 n #s(literal 1 binary64))","(-.f64 n #s(literal -1 binary64))","n","#s(literal 1 binary64)","(log.f64 (+.f64 n #s(literal 1 binary64)))","(log1p.f64 n)","(*.f64 n (log.f64 n))","(*.f64 (log.f64 n) n)","(log.f64 n)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":86.4599609375,"type":"simplify"},{"compiler":[[53,11]],"locations":[["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","accuracy",0.0078125],["(*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64))))","accuracy",0.2734375],["(*.f64 n (log.f64 n))","accuracy",0.2734375],["(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))","accuracy",62.009831525671295]],"memory":[[-103632,17379456]],"mixsample":[[0.44921875,"ival-add",1200],[0.558837890625,"ival-sub",1200],[9.528564453125,"adjust",800],[1.048583984375,"ival-mult",1200],[5.019287109375,"ival-log",2800],[5.482177734375,"ival-log1p",2800],[0.77392578125,"ival-mult",2000],[0.8955078125,"ival-mult",2800],[0.141357421875,"ival-assert",0],[5.516357421875,"ival-sub",0],[0.479248046875,"ival-sub",400],[4.163818359375,"ival-log1p",1600],[3.656494140625,"ival-log",1600],[3.637451171875,"ival-log1p",1200],[3.645751953125,"ival-log",2000],[3.033935546875,"ival-log",1200],[1.862060546875,"ival-add",0],[3.89404296875,"ival-mult",0],[0.40283203125,"ival-add",1600],[0.51025390625,"ival-sub",800],[4.06396484375,"ival-log1p",2000],[0.320068359375,"ival-add",2800],[0.926513671875,"ival-mult",1600],[0.2998046875,"ival-add",2000],[5.407470703125,"ival-log1p",2400],[3.83740234375,"ival-log",0],[0.239013671875,"ival-true",0],[5.365966796875,"ival-log1p",0],[0.353759765625,"ival-add",2400],[0.94482421875,"ival-mult",2400],[0.220947265625,"exact",0],[4.928955078125,"ival-log",2400]],"outcomes":[[103.734375,1,"valid",256]],"time":117.05615234375,"type":"localize"},{"count":[[5,46]],"inputs":[["(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))","(log.f64 (+.f64 n #s(literal 1 binary64)))","(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64))))","(*.f64 n (log.f64 n))"]],"memory":[[2167888,25672288]],"outputs":[["(* n (- 1 (log n)))","(* n (- (+ 1 (* 1/2 n)) (log n)))","(* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n)))","(* n (- (+ 1 (* n (+ 1/2 (* n (- (* 1/12 n) 1/6))))) (log n)))","n","(* n (+ 1 (* -1/2 n)))","(* n (+ 1 (* n (- (* 1/3 n) 1/2))))","(* n (+ 1 (* n (- (* n (+ 1/3 (* -1/4 n))) 1/2))))","-1","(- (* n (- 1 (log n))) 1)","(- (* n (- (+ 1 (* 1/2 n)) (log n))) 1)","(- (* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n))) 1)","(* n (+ 1 (* 1/2 n)))","(* n (+ 1 (* n (+ 1/2 (* -1/6 n)))))","(* n (+ 1 (* n (+ 1/2 (* n (- (* 1/12 n) 1/6))))))","(* n (log n))","(+ 1 (* -1 (log (/ 1 n))))","(+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))) (/ 1/6 (pow n 2)))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3)))))) (/ 1/6 (pow n 2)))","(* -1 (log (/ 1 n)))","(+ (* -1 (log (/ 1 n))) (/ 1 n))","(- (+ (* -1 (log (/ 1 n))) (/ 1 n)) (/ 1/2 (pow n 2)))","(- (+ (* -1 (log (/ 1 n))) (+ (/ 1 n) (* 1/3 (/ 1 (pow n 3))))) (/ 1/2 (pow n 2)))","(+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))","(- (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))) (/ 1/6 (pow n 2)))","(- (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3))))) (/ 1/6 (pow n 2)))","(* -1 (* n (log (/ 1 n))))","(* n (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (/ 1 n))))","(* n (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (+ (/ 1/2 (pow n 2)) (/ 1 n)))))","(* n (- (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (+ (/ 1/2 (pow n 2)) (/ 1 n)))) (* 1/6 (/ 1 (pow n 3)))))","(+ 1 (+ (log -1) (* -1 (log (/ -1 n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n)))))","(+ (log -1) (* -1 (log (/ -1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (/ 1 n)))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/2 (/ 1 n)) 1) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 n)) 1/2) n)) 1) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n))))","(* n (+ (log -1) (* -1 (log (/ -1 n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))) n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))) n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))) n)))))"]],"series":[[18.565185546875,"((- (* (+ n 1) (log (+ n 1))) (* n (log n))) (log (+ n 1)) (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (* (+ n 1) (log (+ n 1))) (* n (log n)))","n","-inf"],[8.610107421875,"((- (* (+ n 1) (log (+ n 1))) (* n (log n))) (log (+ n 1)) (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (* (+ n 1) (log (+ n 1))) (* n (log n)))","n","inf"],[43.739990234375,"((- (* (+ n 1) (log (+ n 1))) (* n (log n))) (log (+ n 1)) (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (* (+ n 1) (log (+ n 1))) (* n (log n)))","n","0"]],"time":71.65283203125,"type":"series"},{"count":[[46,45]],"egraph":[[0,8301,517,0.094919787],[3,4960,546,0.029744017],[2,1424,562,0.018849178],[1,486,587,0.004709058],[0,154,649,0.001510511]],"inputs":[["(* n (- 1 (log n)))","(* n (- (+ 1 (* 1/2 n)) (log n)))","(* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n)))","(* n (- (+ 1 (* n (+ 1/2 (* n (- (* 1/12 n) 1/6))))) (log n)))","n","(* n (+ 1 (* -1/2 n)))","(* n (+ 1 (* n (- (* 1/3 n) 1/2))))","(* n (+ 1 (* n (- (* n (+ 1/3 (* -1/4 n))) 1/2))))","-1","(- (* n (- 1 (log n))) 1)","(- (* n (- (+ 1 (* 1/2 n)) (log n))) 1)","(- (* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n))) 1)","(* n (+ 1 (* 1/2 n)))","(* n (+ 1 (* n (+ 1/2 (* -1/6 n)))))","(* n (+ 1 (* n (+ 1/2 (* n (- (* 1/12 n) 1/6))))))","(* n (log n))","(+ 1 (* -1 (log (/ 1 n))))","(+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))) (/ 1/6 (pow n 2)))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3)))))) (/ 1/6 (pow n 2)))","(* -1 (log (/ 1 n)))","(+ (* -1 (log (/ 1 n))) (/ 1 n))","(- (+ (* -1 (log (/ 1 n))) (/ 1 n)) (/ 1/2 (pow n 2)))","(- (+ (* -1 (log (/ 1 n))) (+ (/ 1 n) (* 1/3 (/ 1 (pow n 3))))) (/ 1/2 (pow n 2)))","(+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))","(- (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))) (/ 1/6 (pow n 2)))","(- (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3))))) (/ 1/6 (pow n 2)))","(* -1 (* n (log (/ 1 n))))","(* n (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (/ 1 n))))","(* n (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (+ (/ 1/2 (pow n 2)) (/ 1 n)))))","(* n (- (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (+ (/ 1/2 (pow n 2)) (/ 1 n)))) (* 1/6 (/ 1 (pow n 3)))))","(+ 1 (+ (log -1) (* -1 (log (/ -1 n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n)))))","(+ (log -1) (* -1 (log (/ -1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (/ 1 n)))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/2 (/ 1 n)) 1) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 n)) 1/2) n)) 1) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n))))","(* n (+ (log -1) (* -1 (log (/ -1 n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))) n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))) n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))) n)))))"]],"memory":[[5545296,36946528]],"method":["egg-herbie"],"outputs":[["(* n (- 1 (log n)))","(fma.f64 (neg.f64 n) (log.f64 n) n)","(* n (- (+ 1 (* 1/2 n)) (log n)))","(*.f64 (-.f64 (fma.f64 #s(literal 1/2 binary64) n #s(literal 1 binary64)) (log.f64 n)) n)","(* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n)))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) n #s(literal 1/2 binary64)) n (-.f64 #s(literal 1 binary64) (log.f64 n))) n)","(* n (- (+ 1 (* n (+ 1/2 (* n (- (* 1/12 n) 1/6))))) (log n)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) n #s(literal -1/6 binary64)) n #s(literal 1/2 binary64)) n (-.f64 #s(literal 1 binary64) (log.f64 n))) n)","n","(* n (+ 1 (* -1/2 n)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) n #s(literal 1 binary64)) n)","(* n (+ 1 (* n (- (* 1/3 n) 1/2))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/3 binary64) n #s(literal -1/2 binary64)) n #s(literal 1 binary64)) n)","(* n (+ 1 (* n (- (* n (+ 1/3 (* -1/4 n))) 1/2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal -1/4 binary64) n #s(literal 1/3 binary64)) n #s(literal -1/2 binary64)) n #s(literal 1 binary64)) n)","-1","#s(literal -1 binary64)","(- (* n (- 1 (log n))) 1)","(fma.f64 (-.f64 #s(literal 1 binary64) (log.f64 n)) n #s(literal -1 binary64))","(- (* n (- (+ 1 (* 1/2 n)) (log n))) 1)","(fma.f64 (-.f64 (fma.f64 #s(literal 1/2 binary64) n #s(literal 1 binary64)) (log.f64 n)) n #s(literal -1 binary64))","(- (* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n))) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) n #s(literal 1/2 binary64)) n (-.f64 #s(literal 1 binary64) (log.f64 n))) n #s(literal -1 binary64))","(* n (+ 1 (* 1/2 n)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) n #s(literal 1 binary64)) n)","(* n (+ 1 (* n (+ 1/2 (* -1/6 n)))))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) n #s(literal 1/2 binary64)) n #s(literal 1 binary64)) n)","(* n (+ 1 (* n (+ 1/2 (* n (- (* 1/12 n) 1/6))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) n #s(literal -1/6 binary64)) n #s(literal 1/2 binary64)) n #s(literal 1 binary64)) n)","(* n (log n))","(*.f64 (log.f64 n) n)","(+ 1 (* -1 (log (/ 1 n))))","(+.f64 (log.f64 n) #s(literal 1 binary64))","(+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))))","(+.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1 binary64)) (log.f64 n))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))) (/ 1/6 (pow n 2)))","(-.f64 (+.f64 (log.f64 n) #s(literal 1 binary64)) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) n))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3)))))) (/ 1/6 (pow n 2)))","(+.f64 (-.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) n) #s(literal 1/6 binary64)) n)) n)) (log.f64 n))","(* -1 (log (/ 1 n)))","(log.f64 n)","(+ (* -1 (log (/ 1 n))) (/ 1 n))","(+.f64 (log.f64 n) (/.f64 #s(literal 1 binary64) n))","(- (+ (* -1 (log (/ 1 n))) (/ 1 n)) (/ 1/2 (pow n 2)))","(-.f64 (log.f64 n) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1 binary64)) n))","(- (+ (* -1 (log (/ 1 n))) (+ (/ 1 n) (* 1/3 (/ 1 (pow n 3))))) (/ 1/2 (pow n 2)))","(+.f64 (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) n) #s(literal 1/2 binary64)) n) #s(literal -1 binary64)) n) (log.f64 n))","(+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))","(+.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))","(- (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))) (/ 1/6 (pow n 2)))","(-.f64 (log.f64 n) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) n))","(- (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3))))) (/ 1/6 (pow n 2)))","(+.f64 (/.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) n) #s(literal 1/6 binary64)) n) #s(literal -1/2 binary64)) n) (log.f64 n))","(* -1 (* n (log (/ 1 n))))","(*.f64 (log.f64 n) n)","(* n (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (/ 1 n))))","(fma.f64 (log.f64 n) n (+.f64 (log.f64 n) #s(literal 1 binary64)))","(* n (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (+ (/ 1/2 (pow n 2)) (/ 1 n)))))","(fma.f64 (log.f64 n) n (fma.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) n (+.f64 (log.f64 n) #s(literal 1 binary64))))","(* n (- (+ (* -1 (log (/ 1 n))) (+ (* -1 (/ (log (/ 1 n)) n)) (+ (/ 1/2 (pow n 2)) (/ 1 n)))) (* 1/6 (/ 1 (pow n 3)))))","(fma.f64 (/.f64 #s(literal -1/6 binary64) (pow.f64 n #s(literal 3 binary64))) n (fma.f64 (log.f64 n) n (fma.f64 (/.f64 (/.f64 #s(literal 1/2 binary64) n) n) n (+.f64 (log.f64 n) #s(literal 1 binary64)))))","(+ 1 (+ (log -1) (* -1 (log (/ -1 n)))))","(-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n)))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n)))))","(+.f64 (+.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n)))))","(-.f64 (-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n))) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) n))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n)))))","(-.f64 (-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n))) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) n) #s(literal 1/6 binary64)) n)) n))","(+ (log -1) (* -1 (log (/ -1 n))))","(-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n)))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (/ 1 n)))","(-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) n)) (log.f64 (/.f64 #s(literal -1 binary64) n)))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/2 (/ 1 n)) 1) n))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (/.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1 binary64)) n)) (log.f64 (/.f64 #s(literal -1 binary64) n)))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/3 (/ 1 n)) 1/2) n)) 1) n))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (/.f64 (-.f64 #s(literal -1 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/3 binary64) n) #s(literal 1/2 binary64)) n)) n)) (log.f64 (/.f64 #s(literal -1 binary64) n)))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))","(+.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 (/.f64 #s(literal -1 binary64) n))) (log.f64 #s(literal -1 binary64)))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n))) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) n))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n))))","(-.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n))) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) n) #s(literal 1/6 binary64)) n)) n))","(* n (+ (log -1) (* -1 (log (/ -1 n)))))","(*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n))) n)","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (* -1 (log (/ -1 n))))) n)))))","(fma.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n))) n (-.f64 (+.f64 (log.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))) n)))))","(-.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n))) n) (-.f64 (+.f64 (/.f64 #s(literal -1/2 binary64) n) #s(literal -1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n)))))","(* -1 (* n (+ (* -1 (+ (log -1) (* -1 (log (/ -1 n))))) (* -1 (/ (+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))) n)))))","(-.f64 (*.f64 (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n))) n) (-.f64 (-.f64 (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) n) #s(literal 1 binary64)) (-.f64 (log.f64 #s(literal -1 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) n)))))"]],"stop":[["iter limit",1],["node limit",1]],"time":376.30908203125,"type":"simplify"},{"count":[[5,431]],"egraph":[[0,8430,35,0.109070289],[2,520,44,0.077759412],[1,66,44,0.006846841],[0,16,44,0.001204406],[0,9,44,0.000223063]],"inputs":[["(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))","(log.f64 (+.f64 n #s(literal 1 binary64)))","(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))","(*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64))))","(*.f64 n (log.f64 n))"]],"memory":[[-2843136,61993936]],"outputs":[["(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)))) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (*.f64 (*.f64 (log.f64 n) n) (-.f64 (*.f64 (log.f64 n) n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64))) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) #s(literal 2 binary64)))) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (*.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))))))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 6 binary64)) (pow.f64 (*.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) #s(literal 3 binary64)))) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (-.f64 (*.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))))))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)))) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))","(*.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)))) (pow.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64)) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))))","(*.f64 (pow.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))))))","(*.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))) (*.f64 (pow.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))) (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n n)) (neg.f64 (log.f64 n))))))","(*.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 4 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 4 binary64))) (pow.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64))) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 6 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 6 binary64))) (pow.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 4 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 4 binary64))) (pow.f64 (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n n)) (log.f64 n)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 6 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 6 binary64))) (pow.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) #s(literal -1 binary64))) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 9 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 9 binary64))) (pow.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 6 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 6 binary64))) (pow.f64 (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n n)) (log.f64 n)) #s(literal 3 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))))) (*.f64 (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))))) (+.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))))) (*.f64 (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))))) (+.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) (-.f64 (*.f64 (neg.f64 n) (log.f64 n)) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (fma.f64 (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (*.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))) (fma.f64 (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))) (*.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))))))))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (*.f64 (*.f64 (neg.f64 n) (log.f64 n)) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))))))","(/.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)))) #s(literal 1 binary64)) (neg.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))))","(/.f64 (*.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)))) #s(literal 1 binary64)) (neg.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))))) (neg.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))))","(/.f64 (*.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)))) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)))) (-.f64 (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))) (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n n)) (neg.f64 (log.f64 n)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)))) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 4 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 6 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 4 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 4 binary64))) (pow.f64 (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n n)) (log.f64 n)) #s(literal 2 binary64))) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 6 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64))) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 9 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 6 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 6 binary64))) (pow.f64 (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n n)) (log.f64 n)) #s(literal 3 binary64))) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (*.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)))) (pow.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))) (*.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) #s(literal 2 binary64)))","(/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 6 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 6 binary64))) (*.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (+.f64 (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 4 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 4 binary64))) (pow.f64 (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n n)) (log.f64 n)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 6 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 6 binary64))) (*.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 4 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 4 binary64))) (*.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 9 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 9 binary64))) (*.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) (+.f64 (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 6 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 6 binary64))) (pow.f64 (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n n)) (log.f64 n)) #s(literal 3 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))) (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n n)) (neg.f64 (log.f64 n))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64))) (-.f64 (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))) (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n n)) (neg.f64 (log.f64 n)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64))) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))) (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n n)) (neg.f64 (log.f64 n)))) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)))) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)))) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))) (neg.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64))) (neg.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))))))","(fma.f64 (/.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (log1p.f64 n)) (-.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (+.f64 #s(literal 1 binary64) n) n #s(literal 1 binary64)) (*.f64 (neg.f64 n) (log.f64 n)))","(fma.f64 (/.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (log1p.f64 n)) (fma.f64 n n #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) n) (*.f64 (neg.f64 n) (log.f64 n)))","(fma.f64 (/.f64 (*.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)) (log1p.f64 n)) (-.f64 (pow.f64 n #s(literal 4 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) n) #s(literal 2 binary64)))) (+.f64 (fma.f64 n n #s(literal -1 binary64)) n) (*.f64 (neg.f64 n) (log.f64 n)))","(fma.f64 (/.f64 (*.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)) (log1p.f64 n)) (+.f64 (pow.f64 n #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) n) #s(literal 3 binary64)))) (+.f64 (pow.f64 n #s(literal 4 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) n) (-.f64 (-.f64 #s(literal 1 binary64) n) (*.f64 n n)))) (*.f64 (neg.f64 n) (log.f64 n)))","(fma.f64 (/.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (-.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (+.f64 #s(literal 1 binary64) n) n #s(literal 1 binary64)) (*.f64 (neg.f64 n) (log.f64 n)))","(fma.f64 (/.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (fma.f64 n n #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) n) (*.f64 (neg.f64 n) (log.f64 n)))","(fma.f64 (/.f64 (*.f64 (log1p.f64 n) (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 (pow.f64 n #s(literal 4 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) n) #s(literal 2 binary64)))) (+.f64 (fma.f64 n n #s(literal -1 binary64)) n) (*.f64 (neg.f64 n) (log.f64 n)))","(fma.f64 (/.f64 (*.f64 (log1p.f64 n) (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 (pow.f64 n #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) n) #s(literal 3 binary64)))) (+.f64 (pow.f64 n #s(literal 4 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) n) (-.f64 (-.f64 #s(literal 1 binary64) n) (*.f64 n n)))) (*.f64 (neg.f64 n) (log.f64 n)))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) #s(literal 2 binary64)))) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (*.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))))) (neg.f64 (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 6 binary64)) (pow.f64 (*.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) #s(literal 3 binary64)))) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (-.f64 (*.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))))) (neg.f64 (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))))))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)))) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (*.f64 (*.f64 (log.f64 n) n) (-.f64 (*.f64 (log.f64 n) n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))) (neg.f64 (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))))))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)))) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (neg.f64 (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))))))","(fma.f64 (*.f64 (neg.f64 (log.f64 n)) #s(literal 1 binary64)) n (*.f64 #s(literal 1 binary64) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))","(fma.f64 (*.f64 (neg.f64 (log.f64 n)) #s(literal 1 binary64)) n (*.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 (*.f64 (neg.f64 (log.f64 n)) #s(literal 1 binary64)) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))","(fma.f64 (*.f64 (log.f64 n) #s(literal -1 binary64)) n (*.f64 #s(literal 1 binary64) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))","(fma.f64 (*.f64 (log.f64 n) #s(literal -1 binary64)) n (*.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 (*.f64 (log.f64 n) #s(literal -1 binary64)) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))","(fma.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (log1p.f64 n)) (pow.f64 (-.f64 n #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 n) (log.f64 n)))","(fma.f64 (*.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)) (log1p.f64 n)) (pow.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) #s(literal -1 binary64)) (*.f64 (neg.f64 n) (log.f64 n)))","(fma.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (pow.f64 (-.f64 n #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (neg.f64 n) (log.f64 n)))","(fma.f64 (*.f64 (log1p.f64 n) (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) #s(literal -1 binary64)) (*.f64 (neg.f64 n) (log.f64 n)))","(fma.f64 (*.f64 (log1p.f64 n) n) #s(literal 1 binary64) (-.f64 (log1p.f64 n) (*.f64 (log.f64 n) n)))","(fma.f64 (*.f64 (log1p.f64 n) n) #s(literal 1 binary64) (+.f64 (log1p.f64 n) (*.f64 (neg.f64 n) (log.f64 n))))","(fma.f64 (neg.f64 (log.f64 n)) n (*.f64 #s(literal 1 binary64) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))","(fma.f64 (neg.f64 (log.f64 n)) n (*.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 (neg.f64 (log.f64 n)) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))","(fma.f64 (neg.f64 n) (log.f64 n) (*.f64 #s(literal 1 binary64) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))","(fma.f64 (neg.f64 n) (log.f64 n) (*.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))","(fma.f64 (fma.f64 n n #s(literal -1 binary64)) (*.f64 (pow.f64 (-.f64 n #s(literal 1 binary64)) #s(literal -1 binary64)) (log1p.f64 n)) (*.f64 (neg.f64 n) (log.f64 n)))","(fma.f64 (*.f64 (neg.f64 n) (log.f64 n)) #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))","(fma.f64 (*.f64 (neg.f64 n) (log.f64 n)) #s(literal 1 binary64) (*.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 (*.f64 (neg.f64 n) (log.f64 n)) #s(literal 1 binary64) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))","(fma.f64 #s(literal -1 binary64) (*.f64 (log.f64 n) n) (*.f64 #s(literal 1 binary64) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))","(fma.f64 #s(literal -1 binary64) (*.f64 (log.f64 n) n) (*.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 #s(literal -1 binary64) (*.f64 (log.f64 n) n) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))","(fma.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))))))","(fma.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))))))","(fma.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) #s(literal -1 binary64)) (log1p.f64 n)) (*.f64 (neg.f64 n) (log.f64 n)))","(fma.f64 (log.f64 n) (neg.f64 n) (*.f64 #s(literal 1 binary64) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))","(fma.f64 (log.f64 n) (neg.f64 n) (*.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 (log.f64 n) (neg.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))","(fma.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64) (*.f64 (neg.f64 n) (log.f64 n)))","(fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (*.f64 (neg.f64 n) (log.f64 n)))","(fma.f64 (log1p.f64 n) #s(literal 1 binary64) (-.f64 (*.f64 n (log1p.f64 n)) (*.f64 (log.f64 n) n)))","(fma.f64 (log1p.f64 n) #s(literal 1 binary64) (-.f64 (*.f64 (log1p.f64 n) n) (*.f64 (log.f64 n) n)))","(fma.f64 (log1p.f64 n) #s(literal 1 binary64) (fma.f64 n (log1p.f64 n) (*.f64 (neg.f64 n) (log.f64 n))))","(fma.f64 (log1p.f64 n) #s(literal 1 binary64) (fma.f64 (log1p.f64 n) n (*.f64 (neg.f64 n) (log.f64 n))))","(fma.f64 (log1p.f64 n) n (-.f64 (log1p.f64 n) (*.f64 (log.f64 n) n)))","(fma.f64 (log1p.f64 n) n (+.f64 (log1p.f64 n) (*.f64 (neg.f64 n) (log.f64 n))))","(fma.f64 (+.f64 #s(literal 1 binary64) n) (log1p.f64 n) (*.f64 (neg.f64 n) (log.f64 n)))","(fma.f64 #s(literal 1 binary64) (*.f64 n (log1p.f64 n)) (-.f64 (log1p.f64 n) (*.f64 (log.f64 n) n)))","(fma.f64 #s(literal 1 binary64) (*.f64 n (log1p.f64 n)) (+.f64 (log1p.f64 n) (*.f64 (neg.f64 n) (log.f64 n))))","(fma.f64 #s(literal 1 binary64) (*.f64 (neg.f64 n) (log.f64 n)) (*.f64 #s(literal 1 binary64) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))","(fma.f64 #s(literal 1 binary64) (*.f64 (neg.f64 n) (log.f64 n)) (*.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) (*.f64 (neg.f64 n) (log.f64 n)) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))","(fma.f64 #s(literal 1 binary64) (fma.f64 (log1p.f64 n) n (log1p.f64 n)) (*.f64 (neg.f64 n) (log.f64 n)))","(fma.f64 #s(literal 1 binary64) (log1p.f64 n) (-.f64 (*.f64 n (log1p.f64 n)) (*.f64 (log.f64 n) n)))","(fma.f64 #s(literal 1 binary64) (log1p.f64 n) (-.f64 (*.f64 (log1p.f64 n) n) (*.f64 (log.f64 n) n)))","(fma.f64 #s(literal 1 binary64) (log1p.f64 n) (fma.f64 n (log1p.f64 n) (*.f64 (neg.f64 n) (log.f64 n))))","(fma.f64 #s(literal 1 binary64) (log1p.f64 n) (fma.f64 (log1p.f64 n) n (*.f64 (neg.f64 n) (log.f64 n))))","(fma.f64 n (*.f64 #s(literal 1 binary64) (neg.f64 (log.f64 n))) (*.f64 #s(literal 1 binary64) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))","(fma.f64 n (*.f64 #s(literal 1 binary64) (neg.f64 (log.f64 n))) (*.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 n (*.f64 #s(literal 1 binary64) (neg.f64 (log.f64 n))) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))","(fma.f64 n (neg.f64 (log.f64 n)) (*.f64 #s(literal 1 binary64) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))","(fma.f64 n (neg.f64 (log.f64 n)) (*.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 n (neg.f64 (log.f64 n)) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))","(fma.f64 n (log1p.f64 n) (-.f64 (log1p.f64 n) (*.f64 (log.f64 n) n)))","(fma.f64 n (log1p.f64 n) (+.f64 (log1p.f64 n) (*.f64 (neg.f64 n) (log.f64 n))))","(-.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 0 binary64)) (*.f64 (log.f64 n) n))","(-.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))) (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))))","(-.f64 #s(literal 0 binary64) (-.f64 (*.f64 (log.f64 n) n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))","(-.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) (*.f64 (log.f64 n) n))","(+.f64 (fma.f64 (neg.f64 (log.f64 n)) n (*.f64 n (log1p.f64 n))) (log1p.f64 n))","(+.f64 (fma.f64 (neg.f64 (log.f64 n)) n (log1p.f64 n)) (*.f64 n (log1p.f64 n)))","(+.f64 (fma.f64 (neg.f64 (log.f64 n)) n (log1p.f64 n)) (*.f64 (log1p.f64 n) n))","(+.f64 (fma.f64 (neg.f64 (log.f64 n)) n (*.f64 (log1p.f64 n) n)) (log1p.f64 n))","(+.f64 (*.f64 #s(literal 1 binary64) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (*.f64 (neg.f64 n) (log.f64 n)))","(+.f64 (*.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)) (*.f64 (neg.f64 n) (log.f64 n)))","(+.f64 (*.f64 n (log1p.f64 n)) (-.f64 (log1p.f64 n) (*.f64 (log.f64 n) n)))","(+.f64 (*.f64 n (log1p.f64 n)) (+.f64 (log1p.f64 n) (*.f64 (neg.f64 n) (log.f64 n))))","(+.f64 (*.f64 (log1p.f64 n) n) (-.f64 (log1p.f64 n) (*.f64 (log.f64 n) n)))","(+.f64 (*.f64 (log1p.f64 n) n) (+.f64 (log1p.f64 n) (*.f64 (neg.f64 n) (log.f64 n))))","(+.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (neg.f64 (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))))))","(+.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))) (neg.f64 (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))))))","(+.f64 (*.f64 (neg.f64 n) (log.f64 n)) (*.f64 #s(literal 1 binary64) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))","(+.f64 (*.f64 (neg.f64 n) (log.f64 n)) (*.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(+.f64 (*.f64 (neg.f64 n) (log.f64 n)) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))","(+.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) (*.f64 (neg.f64 n) (log.f64 n)))","(+.f64 (log1p.f64 n) (-.f64 (*.f64 n (log1p.f64 n)) (*.f64 (log.f64 n) n)))","(+.f64 (log1p.f64 n) (-.f64 (*.f64 (log1p.f64 n) n) (*.f64 (log.f64 n) n)))","(+.f64 (log1p.f64 n) (fma.f64 n (log1p.f64 n) (*.f64 (neg.f64 n) (log.f64 n))))","(+.f64 (log1p.f64 n) (fma.f64 (log1p.f64 n) n (*.f64 (neg.f64 n) (log.f64 n))))","(*.f64 (log1p.f64 n) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (log1p.f64 n))","(log1p.f64 n)","(/.f64 (-.f64 (*.f64 (log.f64 (fma.f64 n n #s(literal -1 binary64))) (log.f64 (fma.f64 n n #s(literal -1 binary64)))) (*.f64 (log.f64 (-.f64 n #s(literal 1 binary64))) (log.f64 (-.f64 n #s(literal 1 binary64))))) (+.f64 (log.f64 (fma.f64 n n #s(literal -1 binary64))) (log.f64 (-.f64 n #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (log1p.f64 (pow.f64 n #s(literal 3 binary64))) (log1p.f64 (pow.f64 n #s(literal 3 binary64)))) (*.f64 (log1p.f64 (fma.f64 #s(literal -1 binary64) n (*.f64 n n))) (log1p.f64 (fma.f64 #s(literal -1 binary64) n (*.f64 n n))))) (+.f64 (log1p.f64 (pow.f64 n #s(literal 3 binary64))) (log1p.f64 (fma.f64 #s(literal -1 binary64) n (*.f64 n n)))))","(/.f64 (-.f64 (pow.f64 (log.f64 (fma.f64 n n #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (log.f64 (-.f64 n #s(literal 1 binary64))) #s(literal 3 binary64))) (fma.f64 (log.f64 (fma.f64 n n #s(literal -1 binary64))) (log.f64 (fma.f64 n n #s(literal -1 binary64))) (fma.f64 (log.f64 (-.f64 n #s(literal 1 binary64))) (log.f64 (-.f64 n #s(literal 1 binary64))) (*.f64 (log.f64 (fma.f64 n n #s(literal -1 binary64))) (log.f64 (-.f64 n #s(literal 1 binary64)))))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 (pow.f64 n #s(literal 3 binary64))) #s(literal 3 binary64)) (pow.f64 (log1p.f64 (fma.f64 #s(literal -1 binary64) n (*.f64 n n))) #s(literal 3 binary64))) (fma.f64 (log1p.f64 (pow.f64 n #s(literal 3 binary64))) (log1p.f64 (pow.f64 n #s(literal 3 binary64))) (fma.f64 (log1p.f64 (fma.f64 #s(literal -1 binary64) n (*.f64 n n))) (log1p.f64 (fma.f64 #s(literal -1 binary64) n (*.f64 n n))) (*.f64 (log1p.f64 (pow.f64 n #s(literal 3 binary64))) (log1p.f64 (fma.f64 #s(literal -1 binary64) n (*.f64 n n)))))))","(neg.f64 (log.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) n))))","(-.f64 (log1p.f64 (*.f64 (neg.f64 n) n)) (log1p.f64 (neg.f64 n)))","(-.f64 (log.f64 (neg.f64 (fma.f64 n n #s(literal -1 binary64)))) (log.f64 (fma.f64 #s(literal -1 binary64) n #s(literal 1 binary64))))","(-.f64 (log.f64 (neg.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)))) (log.f64 (neg.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)))))","(-.f64 (log.f64 (fma.f64 n n #s(literal -1 binary64))) (log.f64 (-.f64 n #s(literal 1 binary64))))","(-.f64 (log1p.f64 (pow.f64 n #s(literal 3 binary64))) (log1p.f64 (*.f64 n (-.f64 n #s(literal 1 binary64)))))","(-.f64 (log1p.f64 (pow.f64 n #s(literal 3 binary64))) (log1p.f64 (fma.f64 #s(literal -1 binary64) n (*.f64 n n))))","(-.f64 #s(literal 0 binary64) (log.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) n))))","(+.f64 (log.f64 (fma.f64 n n #s(literal -1 binary64))) (neg.f64 (log.f64 (-.f64 n #s(literal 1 binary64)))))","(+.f64 (log.f64 (fma.f64 n n #s(literal -1 binary64))) (log.f64 (pow.f64 (-.f64 n #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (log1p.f64 (pow.f64 n #s(literal 3 binary64))) (neg.f64 (log1p.f64 (fma.f64 #s(literal -1 binary64) n (*.f64 n n)))))","(+.f64 (log1p.f64 (pow.f64 n #s(literal 3 binary64))) (log.f64 (pow.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) #s(literal -1 binary64))))","(log.f64 (+.f64 #s(literal 1 binary64) n))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64))))))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 4 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal 2 binary64)))) (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 6 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal 3 binary64)))) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 4 binary64)) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) (-.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64))))))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64))))","(*.f64 (/.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)))) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (fma.f64 (log.f64 n) n #s(literal 1 binary64)))))","(*.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (*.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) (+.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))))))","(*.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) #s(literal -1 binary64)) (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))))))","(*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64))) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64))))))","(*.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64))))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64)))) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64))) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64))) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) #s(literal -1 binary64))) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 9 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) #s(literal -1 binary64))) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)))) (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))))) (*.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)))) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64))))) (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))))) (*.f64 (pow.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64))))) (pow.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))) (-.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)))) (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)))) (fma.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)))) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64))))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64))))) (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64))))) (fma.f64 (pow.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64))))) (pow.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (*.f64 #s(literal -1 binary64) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))))))","(/.f64 (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (-.f64 (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))) (*.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) #s(literal 2 binary64)))) (neg.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (fma.f64 (log.f64 n) n #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (*.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) (+.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)))) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)))) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)))) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64))))) (*.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) #s(literal 1 binary64))) (*.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (log1p.f64 n)) (fma.f64 (log.f64 n) n #s(literal -1 binary64))) (*.f64 (-.f64 n #s(literal 1 binary64)) (-.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) #s(literal 1 binary64)))) (*.f64 (-.f64 n #s(literal 1 binary64)) (fma.f64 (log.f64 n) n #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (log1p.f64 n)) (-.f64 (+.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (log.f64 n) n))) (*.f64 (-.f64 n #s(literal 1 binary64)) (+.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) #s(literal 1 binary64)))) (*.f64 (-.f64 n #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (log.f64 n) n))))","(/.f64 (-.f64 (*.f64 (*.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)) (log1p.f64 n)) (fma.f64 (log.f64 n) n #s(literal -1 binary64))) (*.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) (-.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) #s(literal 1 binary64)))) (*.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) (fma.f64 (log.f64 n) n #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)) (log1p.f64 n)) (-.f64 (+.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (log.f64 n) n))) (*.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) (+.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) #s(literal 1 binary64)))) (*.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) (-.f64 (+.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (log.f64 n) n))))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (fma.f64 (log.f64 n) n #s(literal -1 binary64))) (*.f64 (-.f64 n #s(literal 1 binary64)) (-.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) #s(literal 1 binary64)))) (*.f64 (-.f64 n #s(literal 1 binary64)) (fma.f64 (log.f64 n) n #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (-.f64 (+.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (log.f64 n) n))) (*.f64 (-.f64 n #s(literal 1 binary64)) (+.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) #s(literal 1 binary64)))) (*.f64 (-.f64 n #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (log.f64 n) n))))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 n) (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (log.f64 n) n #s(literal -1 binary64))) (*.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) (-.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) #s(literal 1 binary64)))) (*.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) (fma.f64 (log.f64 n) n #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 n) (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 (+.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (log.f64 n) n))) (*.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) (+.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) #s(literal 1 binary64)))) (*.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) (-.f64 (+.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (log.f64 n) n))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) #s(literal 2 binary64))) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (fma.f64 (log.f64 n) n #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (*.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) (+.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64)))) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 9 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64)))) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 9 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))))","(/.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64))) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (fma.f64 (log.f64 n) n #s(literal 1 binary64))) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (*.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) (+.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64)))) (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64))))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64)) (neg.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))))))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 4 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal 2 binary64)))) (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)))) (neg.f64 (pow.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 6 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal 3 binary64)))) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 4 binary64)) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) (-.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64))))) (neg.f64 (pow.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (neg.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (neg.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)))) (+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64))))) (neg.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (-.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64))) (neg.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64))))","(fma.f64 (/.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (log1p.f64 n)) (-.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (+.f64 #s(literal 1 binary64) n) n #s(literal 1 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))","(fma.f64 (/.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (log1p.f64 n)) (fma.f64 n n #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) n) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))","(fma.f64 (/.f64 (*.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)) (log1p.f64 n)) (-.f64 (pow.f64 n #s(literal 4 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) n) #s(literal 2 binary64)))) (+.f64 (fma.f64 n n #s(literal -1 binary64)) n) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))","(fma.f64 (/.f64 (*.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)) (log1p.f64 n)) (+.f64 (pow.f64 n #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) n) #s(literal 3 binary64)))) (+.f64 (pow.f64 n #s(literal 4 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) n) (-.f64 (-.f64 #s(literal 1 binary64) n) (*.f64 n n)))) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))","(fma.f64 (/.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (-.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (+.f64 #s(literal 1 binary64) n) n #s(literal 1 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))","(fma.f64 (/.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (fma.f64 n n #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) n) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))","(fma.f64 (/.f64 (*.f64 (log1p.f64 n) (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 (pow.f64 n #s(literal 4 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) n) #s(literal 2 binary64)))) (+.f64 (fma.f64 n n #s(literal -1 binary64)) n) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))","(fma.f64 (/.f64 (*.f64 (log1p.f64 n) (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 (pow.f64 n #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) n) #s(literal 3 binary64)))) (+.f64 (pow.f64 n #s(literal 4 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) n) (-.f64 (-.f64 #s(literal 1 binary64) n) (*.f64 n n)))) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))","(fma.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)))) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (*.f64 (*.f64 (log.f64 n) n) (-.f64 (*.f64 (log.f64 n) n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))) #s(literal -1 binary64))","(fma.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64))) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 4 binary64)) (pow.f64 (*.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) #s(literal 2 binary64)))) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (*.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))))) #s(literal -1 binary64))","(fma.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 6 binary64)) (pow.f64 (*.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) #s(literal 3 binary64)))) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (-.f64 (*.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))))) #s(literal -1 binary64))","(fma.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)))) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64))","(fma.f64 (*.f64 (neg.f64 (log.f64 n)) #s(literal 1 binary64)) n (-.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 (*.f64 (neg.f64 (log.f64 n)) #s(literal 1 binary64)) n (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64)))","(fma.f64 (*.f64 (log.f64 n) #s(literal -1 binary64)) n (-.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 (*.f64 (log.f64 n) #s(literal -1 binary64)) n (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64)))","(fma.f64 (/.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)))) (/.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 1 binary64)) (neg.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64))))","(fma.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)))) (pow.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (log1p.f64 n)) (pow.f64 (-.f64 n #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))","(fma.f64 (*.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)) (log1p.f64 n)) (pow.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) #s(literal -1 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))","(fma.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (pow.f64 (-.f64 n #s(literal 1 binary64)) #s(literal -1 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))","(fma.f64 (*.f64 (log1p.f64 n) (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) #s(literal -1 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))","(fma.f64 (*.f64 (log1p.f64 n) n) #s(literal 1 binary64) (-.f64 (log1p.f64 n) (fma.f64 (log.f64 n) n #s(literal 1 binary64))))","(fma.f64 (*.f64 (log1p.f64 n) n) #s(literal 1 binary64) (+.f64 (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))))","(fma.f64 (neg.f64 (log.f64 n)) n (-.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 (neg.f64 (log.f64 n)) n (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64)))","(fma.f64 (pow.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64)) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))) #s(literal -1 binary64))","(fma.f64 (pow.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64))) #s(literal -1 binary64))","(fma.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))))) #s(literal -1 binary64))","(fma.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))))) #s(literal -1 binary64))","(fma.f64 (neg.f64 n) (log.f64 n) (-.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64)))","(fma.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64))) #s(literal -1 binary64))","(fma.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))) (*.f64 (pow.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(fma.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))) (pow.f64 (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (fma.f64 n n #s(literal -1 binary64)) (*.f64 (pow.f64 (-.f64 n #s(literal 1 binary64)) #s(literal -1 binary64)) (log1p.f64 n)) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))","(fma.f64 (*.f64 (neg.f64 n) (log.f64 n)) #s(literal 1 binary64) (-.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 (*.f64 (neg.f64 n) (log.f64 n)) #s(literal 1 binary64) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (fma.f64 (log.f64 n) n #s(literal 1 binary64)) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))","(fma.f64 #s(literal -1 binary64) (*.f64 (log.f64 n) n) (-.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 #s(literal -1 binary64) (*.f64 (log.f64 n) n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64)))","(fma.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) #s(literal -1 binary64))) #s(literal -1 binary64))","(fma.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(fma.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64))) (*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n n)) (neg.f64 (log.f64 n))))) #s(literal -1 binary64))","(fma.f64 (-.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))","(fma.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) (pow.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) #s(literal -1 binary64))))","(fma.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) #s(literal -1 binary64)) (log1p.f64 n)) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))","(fma.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 (log.f64 n) (neg.f64 n) (-.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 (log.f64 n) (neg.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64)))","(fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))","(fma.f64 (log1p.f64 n) #s(literal 1 binary64) (-.f64 (*.f64 n (log1p.f64 n)) (fma.f64 (log.f64 n) n #s(literal 1 binary64))))","(fma.f64 (log1p.f64 n) #s(literal 1 binary64) (-.f64 (*.f64 (log1p.f64 n) n) (fma.f64 (log.f64 n) n #s(literal 1 binary64))))","(fma.f64 (log1p.f64 n) #s(literal 1 binary64) (fma.f64 n (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))))","(fma.f64 (log1p.f64 n) #s(literal 1 binary64) (fma.f64 (log1p.f64 n) n (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))))","(fma.f64 (log1p.f64 n) n (-.f64 (log1p.f64 n) (fma.f64 (log.f64 n) n #s(literal 1 binary64))))","(fma.f64 (log1p.f64 n) n (+.f64 (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))))","(fma.f64 (+.f64 #s(literal 1 binary64) n) (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (*.f64 n (log1p.f64 n)) (-.f64 (log1p.f64 n) (fma.f64 (log.f64 n) n #s(literal 1 binary64))))","(fma.f64 #s(literal 1 binary64) (*.f64 n (log1p.f64 n)) (+.f64 (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (*.f64 (neg.f64 n) (log.f64 n)) (-.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) (*.f64 (neg.f64 n) (log.f64 n)) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) (log1p.f64 n) (-.f64 (*.f64 n (log1p.f64 n)) (fma.f64 (log.f64 n) n #s(literal 1 binary64))))","(fma.f64 #s(literal 1 binary64) (log1p.f64 n) (-.f64 (*.f64 (log1p.f64 n) n) (fma.f64 (log.f64 n) n #s(literal 1 binary64))))","(fma.f64 #s(literal 1 binary64) (log1p.f64 n) (fma.f64 n (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (log1p.f64 n) (fma.f64 (log1p.f64 n) n (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))))","(fma.f64 n (*.f64 #s(literal 1 binary64) (neg.f64 (log.f64 n))) (-.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 n (*.f64 #s(literal 1 binary64) (neg.f64 (log.f64 n))) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64)))","(fma.f64 n (neg.f64 (log.f64 n)) (-.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(fma.f64 n (neg.f64 (log.f64 n)) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64)))","(fma.f64 n (log1p.f64 n) (-.f64 (log1p.f64 n) (fma.f64 (log.f64 n) n #s(literal 1 binary64))))","(fma.f64 n (log1p.f64 n) (+.f64 (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))))","(-.f64 (-.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)) (*.f64 (log.f64 n) n))","(-.f64 (+.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))))) (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))))","(-.f64 (+.f64 #s(literal -1 binary64) (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64))))) (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))))","(-.f64 (+.f64 #s(literal -1 binary64) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (*.f64 (log.f64 n) n))","(-.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (fma.f64 (log.f64 n) n #s(literal 1 binary64)))) (/.f64 (pow.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) #s(literal 2 binary64)) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (fma.f64 (log.f64 n) n #s(literal 1 binary64)))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (*.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) (+.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))))) (/.f64 (pow.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) #s(literal 3 binary64)) (+.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (*.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) (+.f64 (fma.f64 (log.f64 n) n #s(literal 1 binary64)) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (+.f64 (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) (-.f64 (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 2 binary64)) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n)))) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))) (+.f64 (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))) #s(literal 1 binary64)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))) (-.f64 (/.f64 (pow.f64 (*.f64 (log.f64 n) n) #s(literal 3 binary64)) (fma.f64 (*.f64 (log.f64 n) n) (fma.f64 (log.f64 n) n (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (pow.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)))) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64))))) (pow.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) #s(literal -1 binary64)))","(-.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 1 binary64))","(-.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) (fma.f64 (log.f64 n) n #s(literal 1 binary64)))","(+.f64 (+.f64 #s(literal -1 binary64) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) (*.f64 (neg.f64 n) (log.f64 n)))","(+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)) (fma.f64 (log1p.f64 n) n (log1p.f64 n)))","(+.f64 (*.f64 n (log1p.f64 n)) (-.f64 (log1p.f64 n) (fma.f64 (log.f64 n) n #s(literal 1 binary64))))","(+.f64 (*.f64 n (log1p.f64 n)) (+.f64 (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))))","(+.f64 (*.f64 (log1p.f64 n) n) (-.f64 (log1p.f64 n) (fma.f64 (log.f64 n) n #s(literal 1 binary64))))","(+.f64 (*.f64 (log1p.f64 n) n) (+.f64 (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64)))) (neg.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal 1 binary64))) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 3 binary64)) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64))))) (neg.f64 (pow.f64 (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) (+.f64 (fma.f64 (neg.f64 n) (log.f64 n) #s(literal 1 binary64)) (pow.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal 2 binary64)))) #s(literal -1 binary64))))","(+.f64 (*.f64 (neg.f64 n) (log.f64 n)) (-.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) #s(literal 1 binary64)))","(+.f64 (*.f64 (neg.f64 n) (log.f64 n)) (fma.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n) #s(literal -1 binary64)))","(+.f64 #s(literal -1 binary64) (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))))","(+.f64 (fma.f64 (neg.f64 n) (log.f64 n) (fma.f64 (log1p.f64 n) n (log1p.f64 n))) #s(literal -1 binary64))","(+.f64 (fma.f64 (log1p.f64 n) n (log1p.f64 n)) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64)))","(+.f64 (log1p.f64 n) (-.f64 (*.f64 n (log1p.f64 n)) (fma.f64 (log.f64 n) n #s(literal 1 binary64))))","(+.f64 (log1p.f64 n) (-.f64 (*.f64 (log1p.f64 n) n) (fma.f64 (log.f64 n) n #s(literal 1 binary64))))","(+.f64 (log1p.f64 n) (fma.f64 n (log1p.f64 n) (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))))","(+.f64 (log1p.f64 n) (fma.f64 (log1p.f64 n) n (fma.f64 (neg.f64 n) (log.f64 n) #s(literal -1 binary64))))","(*.f64 (/.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (log1p.f64 n)) (-.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (+.f64 #s(literal 1 binary64) n) n #s(literal 1 binary64)))","(*.f64 (/.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (log1p.f64 n)) (fma.f64 n n #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) n))","(*.f64 (/.f64 (*.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)) (log1p.f64 n)) (-.f64 (pow.f64 n #s(literal 4 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) n) #s(literal 2 binary64)))) (+.f64 (fma.f64 n n #s(literal -1 binary64)) n))","(*.f64 (/.f64 (*.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)) (log1p.f64 n)) (+.f64 (pow.f64 n #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) n) #s(literal 3 binary64)))) (+.f64 (pow.f64 n #s(literal 4 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) n) (-.f64 (-.f64 #s(literal 1 binary64) n) (*.f64 n n)))))","(*.f64 (/.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (-.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (+.f64 #s(literal 1 binary64) n) n #s(literal 1 binary64)))","(*.f64 (/.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (fma.f64 n n #s(literal -1 binary64))) (+.f64 #s(literal 1 binary64) n))","(*.f64 (/.f64 (*.f64 (log1p.f64 n) (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (-.f64 (pow.f64 n #s(literal 4 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) n) #s(literal 2 binary64)))) (+.f64 (fma.f64 n n #s(literal -1 binary64)) n))","(*.f64 (/.f64 (*.f64 (log1p.f64 n) (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 (pow.f64 n #s(literal 6 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) n) #s(literal 3 binary64)))) (+.f64 (pow.f64 n #s(literal 4 binary64)) (*.f64 (-.f64 #s(literal 1 binary64) n) (-.f64 (-.f64 #s(literal 1 binary64) n) (*.f64 n n)))))","(*.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (log1p.f64 n)) (pow.f64 (-.f64 n #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)) (log1p.f64 n)) (pow.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) #s(literal -1 binary64)))","(*.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (pow.f64 (-.f64 n #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (log1p.f64 n) (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) #s(literal -1 binary64)))","(*.f64 (fma.f64 n n #s(literal -1 binary64)) (*.f64 (pow.f64 (-.f64 n #s(literal 1 binary64)) #s(literal -1 binary64)) (log1p.f64 n)))","(*.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)) (*.f64 (pow.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) #s(literal -1 binary64)) (log1p.f64 n)))","(*.f64 (log1p.f64 n) (+.f64 #s(literal 1 binary64) n))","(*.f64 (+.f64 #s(literal 1 binary64) n) (log1p.f64 n))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 n n)) (log1p.f64 n)) (-.f64 #s(literal 1 binary64) n))","(/.f64 (*.f64 (neg.f64 (fma.f64 n n #s(literal -1 binary64))) (log1p.f64 n)) (fma.f64 #s(literal -1 binary64) n #s(literal 1 binary64)))","(/.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (log1p.f64 n)) (neg.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n))))","(/.f64 (*.f64 (log1p.f64 n) (-.f64 #s(literal 1 binary64) (*.f64 n n))) (-.f64 #s(literal 1 binary64) n))","(/.f64 (*.f64 (log1p.f64 n) (neg.f64 (fma.f64 n n #s(literal -1 binary64)))) (fma.f64 #s(literal -1 binary64) n #s(literal 1 binary64)))","(/.f64 (*.f64 (log1p.f64 n) (neg.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n))))","(/.f64 (-.f64 (pow.f64 (log1p.f64 n) #s(literal 2 binary64)) (*.f64 (*.f64 n (log1p.f64 n)) (*.f64 n (log1p.f64 n)))) (-.f64 (log1p.f64 n) (*.f64 n (log1p.f64 n))))","(/.f64 (-.f64 (*.f64 (*.f64 n (log1p.f64 n)) (*.f64 n (log1p.f64 n))) (pow.f64 (log1p.f64 n) #s(literal 2 binary64))) (-.f64 (*.f64 n (log1p.f64 n)) (log1p.f64 n)))","(/.f64 (-.f64 (pow.f64 (log1p.f64 n) #s(literal 2 binary64)) (*.f64 (*.f64 (log1p.f64 n) n) (*.f64 (log1p.f64 n) n))) (-.f64 (log1p.f64 n) (*.f64 (log1p.f64 n) n)))","(/.f64 (-.f64 (*.f64 (*.f64 (log1p.f64 n) n) (*.f64 (log1p.f64 n) n)) (pow.f64 (log1p.f64 n) #s(literal 2 binary64))) (-.f64 (*.f64 (log1p.f64 n) n) (log1p.f64 n)))","(/.f64 (+.f64 (pow.f64 (log1p.f64 n) #s(literal 3 binary64)) (pow.f64 (*.f64 n (log1p.f64 n)) #s(literal 3 binary64))) (fma.f64 (log1p.f64 n) (log1p.f64 n) (-.f64 (*.f64 (*.f64 n (log1p.f64 n)) (*.f64 n (log1p.f64 n))) (*.f64 (log1p.f64 n) (*.f64 n (log1p.f64 n))))))","(/.f64 (+.f64 (pow.f64 (*.f64 n (log1p.f64 n)) #s(literal 3 binary64)) (pow.f64 (log1p.f64 n) #s(literal 3 binary64))) (fma.f64 (*.f64 n (log1p.f64 n)) (*.f64 n (log1p.f64 n)) (-.f64 (pow.f64 (log1p.f64 n) #s(literal 2 binary64)) (*.f64 (*.f64 n (log1p.f64 n)) (log1p.f64 n)))))","(/.f64 (+.f64 (pow.f64 (log1p.f64 n) #s(literal 3 binary64)) (pow.f64 (*.f64 (log1p.f64 n) n) #s(literal 3 binary64))) (fma.f64 (log1p.f64 n) (log1p.f64 n) (-.f64 (*.f64 (*.f64 (log1p.f64 n) n) (*.f64 (log1p.f64 n) n)) (*.f64 (log1p.f64 n) (*.f64 (log1p.f64 n) n)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (log1p.f64 n) n) #s(literal 3 binary64)) (pow.f64 (log1p.f64 n) #s(literal 3 binary64))) (fma.f64 (*.f64 (log1p.f64 n) n) (*.f64 (log1p.f64 n) n) (-.f64 (pow.f64 (log1p.f64 n) #s(literal 2 binary64)) (*.f64 (*.f64 (log1p.f64 n) n) (log1p.f64 n)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (log1p.f64 n))) (fma.f64 #s(literal -1 binary64) n #s(literal 1 binary64)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)) (log1p.f64 n))) (neg.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n))))","(/.f64 (neg.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64)))) (fma.f64 #s(literal -1 binary64) n #s(literal 1 binary64)))","(/.f64 (neg.f64 (*.f64 (log1p.f64 n) (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n))))","(/.f64 (*.f64 (fma.f64 n n #s(literal -1 binary64)) (log1p.f64 n)) (-.f64 n #s(literal 1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)) (log1p.f64 n)) (+.f64 #s(literal 1 binary64) (*.f64 n (-.f64 n #s(literal 1 binary64)))))","(/.f64 (*.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)) (log1p.f64 n)) (fma.f64 n n (-.f64 #s(literal 1 binary64) n)))","(/.f64 (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64))) (-.f64 n #s(literal 1 binary64)))","(/.f64 (*.f64 (log1p.f64 n) (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 #s(literal 1 binary64) (*.f64 n (-.f64 n #s(literal 1 binary64)))))","(/.f64 (*.f64 (log1p.f64 n) (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 n n (-.f64 #s(literal 1 binary64) n)))","(/.f64 (log1p.f64 n) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) n)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 n #s(literal 1 binary64)) (*.f64 (fma.f64 n n #s(literal -1 binary64)) (log1p.f64 n))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) (*.f64 (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)) (log1p.f64 n))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 n #s(literal 1 binary64)) (*.f64 (log1p.f64 n) (fma.f64 n n #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 n n (-.f64 #s(literal 1 binary64) n)) (*.f64 (log1p.f64 n) (+.f64 (pow.f64 n #s(literal 3 binary64)) #s(literal 1 binary64)))))","(fma.f64 (*.f64 (log1p.f64 n) n) #s(literal 1 binary64) (log1p.f64 n))","(fma.f64 (log1p.f64 n) #s(literal 1 binary64) (*.f64 n (log1p.f64 n)))","(fma.f64 (log1p.f64 n) #s(literal 1 binary64) (*.f64 (log1p.f64 n) n))","(fma.f64 (log1p.f64 n) n (log1p.f64 n))","(fma.f64 #s(literal 1 binary64) (*.f64 n (log1p.f64 n)) (log1p.f64 n))","(fma.f64 #s(literal 1 binary64) (log1p.f64 n) (*.f64 n (log1p.f64 n)))","(fma.f64 #s(literal 1 binary64) (log1p.f64 n) (*.f64 (log1p.f64 n) n))","(fma.f64 n (log1p.f64 n) (log1p.f64 n))","(+.f64 (*.f64 n (log1p.f64 n)) (log1p.f64 n))","(+.f64 (*.f64 (log1p.f64 n) n) (log1p.f64 n))","(+.f64 (log1p.f64 n) (*.f64 n (log1p.f64 n)))","(+.f64 (log1p.f64 n) (*.f64 (log1p.f64 n) n))","(*.f64 (*.f64 (log.f64 n) #s(literal 1 binary64)) n)","(*.f64 (*.f64 (log.f64 n) n) #s(literal 1 binary64))","(*.f64 (log.f64 n) n)","(*.f64 #s(literal 1 binary64) (*.f64 (log.f64 n) n))","(*.f64 n (*.f64 #s(literal 1 binary64) (log.f64 n)))","(*.f64 n (*.f64 (log.f64 n) #s(literal 1 binary64)))","(*.f64 n (log.f64 n))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":377.635009765625,"type":"rewrite"},{"compiler":[[15955,1503]],"memory":[[8721824,45447520]],"time":65.468017578125,"type":"eval"},{"alts":[["(-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64))","next",0.0078125,"binary64"],["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n)))","next",0.0,"binary64"],["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))","next",63.004360901867955,"binary64"]],"compiler":[[20,13],[22,14],[17,11]],"count":[[477,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[476,3],"picked":[1,0]}],"memory":[[1427040,18063856]],"min-error":[[0.0,"binary64"]],"time":7.31396484375,"type":"prune"},{"egraph":[[0,1832,83,0.008783291],[12,1832,99,0.013046747],[11,1817,99,0.013720169],[10,1783,99,0.017577272],[9,1742,99,0.016073665],[8,1661,99,0.015446612],[7,1343,99,0.012658767],[6,898,99,0.009662657],[5,507,99,0.004256644],[4,271,99,0.002954062],[3,137,99,0.001006441],[2,70,99,0.000704479],[1,41,99,0.000343394],[0,24,99,0.000361112],[0,19,99,0.00017349]],"inputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))","#s(literal -1 binary64)","#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n)))","(+.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))","(/.f64 #s(literal 1/2 binary64) n)","#s(literal 1/2 binary64)","n","(log.f64 n)","(-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))","(+.f64 (log.f64 n) #s(literal 1 binary64))","(log.f64 n)","n","#s(literal 1 binary64)"]],"locations":[["(log.f64 n)","cost-diff",0],["(+.f64 (log.f64 n) #s(literal 1 binary64))","cost-diff",0],["#s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))","cost-diff",0],["(-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64))","cost-diff",0],["(log.f64 n)","cost-diff",0],["(/.f64 #s(literal 1/2 binary64) n)","cost-diff",0],["(+.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))","cost-diff",0],["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n)))","cost-diff",0],["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))","cost-diff",0]],"memory":[[-5828240,5181104]],"method":["egg-herbie"],"outputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))","#s(literal -1 binary64)","#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n)))","#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (-.f64 (log.f64 n) (/.f64 #s(literal -1/2 binary64) n)))","(+.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))","(-.f64 (log.f64 n) (/.f64 #s(literal -1/2 binary64) n))","(/.f64 #s(literal 1/2 binary64) n)","#s(literal 1/2 binary64)","n","(log.f64 n)","(-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64))","(-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (-.f64 (log.f64 n) #s(literal -1 binary64))) #s(literal 1 binary64))","#s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))","#s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (-.f64 (log.f64 n) #s(literal -1 binary64)))","(+.f64 (log.f64 n) #s(literal 1 binary64))","(-.f64 (log.f64 n) #s(literal -1 binary64))","(log.f64 n)","n","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":142.4150390625,"type":"simplify"},{"compiler":[[82,16]],"locations":[["(+.f64 (log.f64 n) #s(literal 1 binary64))","accuracy",0.0],["(log.f64 n)","accuracy",0.0],["#s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))","accuracy",0.0],["(-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64))","accuracy",0.0078125],["(/.f64 #s(literal 1/2 binary64) n)","accuracy",0.0],["(+.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))","accuracy",0.0],["(log.f64 n)","accuracy",0.0],["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n)))","accuracy",0.0],["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))","accuracy",63.004360901867955]],"memory":[[6309104,22202016]],"mixsample":[[0.492431640625,"ival-sub",1200],[11.923583984375,"adjust",800],[2.135009765625,"ival-div",0],[0.909912109375,"ival-mult",1200],[4.736328125,"ival-log",2800],[0.1298828125,"ival-assert",0],[4.53564453125,"ival-sub",0],[3.3701171875,"ival-log",1600],[0.30322265625,"ival-sub",400],[3.440673828125,"ival-log1p",1200],[6.955322265625,"ival-add",0],[2.8544921875,"ival-log",1200],[0.492919921875,"ival-sub",800],[0.856201171875,"ival-mult",1600],[5.185302734375,"ival-log1p",0],[1.06787109375,"ival-mult",2400],[0.339599609375,"ival-add",2400],[5.123046875,"ival-log",2400],[0.3974609375,"ival-add",1200],[0.890625,"ival-mult",2000],[5.13427734375,"ival-log1p",2800],[0.82568359375,"ival-mult",2800],[3.92236328125,"ival-log1p",1600],[3.66748046875,"ival-log",2000],[3.776123046875,"ival-mult",0],[0.3251953125,"ival-add",1600],[4.0078125,"ival-log1p",2000],[0.277099609375,"ival-add",2800],[0.290283203125,"ival-add",2000],[5.411865234375,"ival-log1p",2400],[0.2421875,"ival-true",0],[3.9091796875,"ival-log",0],[0.53271484375,"exact",0]],"outcomes":[[107.310791015625,1,"valid",256]],"time":124.77685546875,"type":"localize"},{"count":[[8,28]],"inputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))","#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n)))","(+.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))","(/.f64 #s(literal 1/2 binary64) n)","(log.f64 n)","(-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))","(+.f64 (log.f64 n) #s(literal 1 binary64))"]],"memory":[[-13398640,18058192]],"outputs":[["-1","(- (* n (- 1 (log n))) 1)","(- (* n (- (+ 1 (* 1/2 n)) (log n))) 1)","(- (* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n))) 1)","(/ 1/2 n)","(/ (+ 1/2 (* n (log n))) n)","(log n)","(* n (- 1 (log n)))","(* n (- (+ 1 (* 1/2 n)) (log n)))","(* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n)))","(* n (- (+ 1 (* n (+ 1/2 (* n (- (* 1/12 n) 1/6))))) (log n)))","(+ 1 (log n))","(* -1 (log (/ 1 n)))","(+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))","(- (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))) (/ 1/6 (pow n 2)))","(- (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3))))) (/ 1/6 (pow n 2)))","(+ 1 (* -1 (log (/ 1 n))))","(+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))) (/ 1/6 (pow n 2)))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3)))))) (/ 1/6 (pow n 2)))","(+ (log -1) (* -1 (log (/ -1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n))))","(+ 1 (+ (log -1) (* -1 (log (/ -1 n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n)))))"]],"series":[[9.240966796875,"((- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (+ (/ 1/2 n) (log n)) (/ 1/2 n) (log n) (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+ (log n) 1))","n","-inf"],[45.68994140625,"((- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (+ (/ 1/2 n) (log n)) (/ 1/2 n) (log n) (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+ (log n) 1))","n","inf"],[9.64013671875,"((- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (+ (/ 1/2 n) (log n)) (/ 1/2 n) (log n) (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+ (log n) 1))","n","0"]],"time":66.531005859375,"type":"series"},{"count":[[28,28]],"egraph":[[0,8159,265,0.078583547],[5,6967,278,0.025231646],[4,4520,278,0.02738544],[3,1586,286,0.01835204],[2,555,290,0.005130039],[1,216,300,0.001740136],[0,83,324,0.000779135]],"inputs":[["-1","(- (* n (- 1 (log n))) 1)","(- (* n (- (+ 1 (* 1/2 n)) (log n))) 1)","(- (* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n))) 1)","(/ 1/2 n)","(/ (+ 1/2 (* n (log n))) n)","(log n)","(* n (- 1 (log n)))","(* n (- (+ 1 (* 1/2 n)) (log n)))","(* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n)))","(* n (- (+ 1 (* n (+ 1/2 (* n (- (* 1/12 n) 1/6))))) (log n)))","(+ 1 (log n))","(* -1 (log (/ 1 n)))","(+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))","(- (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))) (/ 1/6 (pow n 2)))","(- (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3))))) (/ 1/6 (pow n 2)))","(+ 1 (* -1 (log (/ 1 n))))","(+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))) (/ 1/6 (pow n 2)))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3)))))) (/ 1/6 (pow n 2)))","(+ (log -1) (* -1 (log (/ -1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n))))","(+ 1 (+ (log -1) (* -1 (log (/ -1 n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n)))))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n)))))"]],"memory":[[2059776,34545504]],"method":["egg-herbie"],"outputs":[["-1","#s(literal -1 binary64)","(- (* n (- 1 (log n))) 1)","(fma.f64 (-.f64 #s(literal 1 binary64) (log.f64 n)) n #s(literal -1 binary64))","(- (* n (- (+ 1 (* 1/2 n)) (log n))) 1)","(fma.f64 (fma.f64 #s(literal 1/2 binary64) n (-.f64 #s(literal 1 binary64) (log.f64 n))) n #s(literal -1 binary64))","(- (* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n))) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) n #s(literal 1/2 binary64)) n (-.f64 #s(literal 1 binary64) (log.f64 n))) n #s(literal -1 binary64))","(/ 1/2 n)","(/.f64 #s(literal 1/2 binary64) n)","(/ (+ 1/2 (* n (log n))) n)","(/.f64 (fma.f64 (log.f64 n) n #s(literal 1/2 binary64)) n)","(log n)","(log.f64 n)","(* n (- 1 (log n)))","(*.f64 (-.f64 #s(literal 1 binary64) (log.f64 n)) n)","(* n (- (+ 1 (* 1/2 n)) (log n)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) n (-.f64 #s(literal 1 binary64) (log.f64 n))) n)","(* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n)))","(*.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) n #s(literal 1/2 binary64)) n (-.f64 #s(literal 1 binary64) (log.f64 n))) n)","(* n (- (+ 1 (* n (+ 1/2 (* n (- (* 1/12 n) 1/6))))) (log n)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/12 binary64) n #s(literal -1/6 binary64)) n #s(literal 1/2 binary64)) n (-.f64 #s(literal 1 binary64) (log.f64 n))) n)","(+ 1 (log n))","(+.f64 (log.f64 n) #s(literal 1 binary64))","(* -1 (log (/ 1 n)))","(log.f64 n)","(+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))","(-.f64 (log.f64 n) (/.f64 #s(literal -1/2 binary64) n))","(- (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))) (/ 1/6 (pow n 2)))","(-.f64 (log.f64 n) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) n))","(- (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3))))) (/ 1/6 (pow n 2)))","(-.f64 (log.f64 n) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) n) #s(literal 1/6 binary64)) n)) n))","(+ 1 (* -1 (log (/ 1 n))))","(+.f64 (log.f64 n) #s(literal 1 binary64))","(+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))))","(-.f64 (+.f64 (log.f64 n) #s(literal 1 binary64)) (/.f64 #s(literal -1/2 binary64) n))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))) (/ 1/6 (pow n 2)))","(-.f64 (+.f64 (log.f64 n) #s(literal 1 binary64)) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) n))","(- (+ 1 (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3)))))) (/ 1/6 (pow n 2)))","(-.f64 (+.f64 (log.f64 n) #s(literal 1 binary64)) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) n) #s(literal 1/6 binary64)) n)) n))","(+ (log -1) (* -1 (log (/ -1 n))))","(+.f64 (log.f64 (neg.f64 n)) (log.f64 #s(literal -1 binary64)))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))","(-.f64 (+.f64 (log.f64 (neg.f64 n)) (log.f64 #s(literal -1 binary64))) (/.f64 #s(literal -1/2 binary64) n))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))","(-.f64 (+.f64 (log.f64 (neg.f64 n)) (log.f64 #s(literal -1 binary64))) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) n))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n))))","(-.f64 (+.f64 (log.f64 (neg.f64 n)) (log.f64 #s(literal -1 binary64))) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) n) #s(literal 1/6 binary64)) n)) n))","(+ 1 (+ (log -1) (* -1 (log (/ -1 n)))))","(+.f64 (+.f64 (log.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) (log.f64 (neg.f64 n)))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n)))))","(-.f64 (+.f64 (+.f64 (log.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) (log.f64 (neg.f64 n))) (/.f64 #s(literal -1/2 binary64) n))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n)))))","(-.f64 (+.f64 (+.f64 (log.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) (log.f64 (neg.f64 n))) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) n))","(+ 1 (+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n)))))","(-.f64 (+.f64 (+.f64 (log.f64 #s(literal -1 binary64)) #s(literal 1 binary64)) (log.f64 (neg.f64 n))) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) n) #s(literal 1/6 binary64)) n)) n))"]],"stop":[["iter limit",1],["node limit",1]],"time":248.41015625,"type":"simplify"},{"count":[[8,158]],"egraph":[[0,8311,82,0.089286018],[2,932,92,0.028189549],[1,113,92,0.003443532],[0,24,92,0.000917109],[0,19,92,0.000166474]],"inputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))","#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n)))","(+.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))","(/.f64 #s(literal 1/2 binary64) n)","(log.f64 n)","(-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))","(+.f64 (log.f64 n) #s(literal 1 binary64))"]],"memory":[[6197888,50473456]],"outputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))","#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (-.f64 (log.f64 n) (/.f64 #s(literal -1/2 binary64) n)))","(*.f64 (fma.f64 (log.f64 n) (log.f64 n) (*.f64 #s(literal -1/4 binary64) (pow.f64 n #s(literal -2 binary64)))) (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 n) (/.f64 #s(literal 1/2 binary64) n))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 2 binary64)) (pow.f64 (log.f64 n) #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/8 binary64) (pow.f64 (log.f64 n) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (log.f64 n) (-.f64 (log.f64 n) (/.f64 #s(literal 1/2 binary64) n)))))))","(*.f64 (-.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 2 binary64)) (pow.f64 (log.f64 n) #s(literal 2 binary64))) (pow.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/8 binary64) (pow.f64 (log.f64 n) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 n) (log.f64 n) (*.f64 (/.f64 #s(literal 1/2 binary64) n) (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))))))","(*.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/8 binary64) (pow.f64 (log.f64 n) #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (log.f64 n) (-.f64 (log.f64 n) (/.f64 #s(literal 1/2 binary64) n)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 (log.f64 n) (/.f64 #s(literal -1/2 binary64) n)))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 n) (/.f64 #s(literal -1/2 binary64) n))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 2 binary64)) (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))) (/.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 2 binary64)) (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n)))) (*.f64 (/.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))) (/.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))))) (+.f64 (/.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 2 binary64)) (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))) (/.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 2 binary64)) (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 2 binary64)) (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))) (/.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 2 binary64)) (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))) (fma.f64 (/.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))) (/.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))) (*.f64 (/.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 2 binary64)) (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))) (/.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n)))))))","(/.f64 (neg.f64 (fma.f64 (log.f64 n) (log.f64 n) (*.f64 #s(literal -1/4 binary64) (pow.f64 n #s(literal -2 binary64))))) (neg.f64 (-.f64 (log.f64 n) (/.f64 #s(literal 1/2 binary64) n))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 2 binary64)) (pow.f64 (log.f64 n) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/8 binary64) (pow.f64 (log.f64 n) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (log.f64 n) (-.f64 (log.f64 n) (/.f64 #s(literal 1/2 binary64) n)))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 2 binary64)) (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))) (*.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n)) (pow.f64 (log.f64 n) #s(literal 2 binary64)))) (*.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n)) (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))))","(/.f64 (fma.f64 (log.f64 n) (log.f64 n) (*.f64 #s(literal -1/4 binary64) (pow.f64 n #s(literal -2 binary64)))) (-.f64 (log.f64 n) (/.f64 #s(literal 1/2 binary64) n)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 2 binary64)) (pow.f64 (log.f64 n) #s(literal 2 binary64)))) (neg.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/8 binary64) (pow.f64 (log.f64 n) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (log.f64 n) (log.f64 n) (*.f64 (/.f64 #s(literal 1/2 binary64) n) (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/8 binary64) (pow.f64 (log.f64 n) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (log.f64 n) (-.f64 (log.f64 n) (/.f64 #s(literal 1/2 binary64) n))))))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 2 binary64)) (pow.f64 (log.f64 n) #s(literal 2 binary64))) (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n)))","(/.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/8 binary64) (pow.f64 (log.f64 n) #s(literal 3 binary64))) (fma.f64 (log.f64 n) (log.f64 n) (*.f64 (/.f64 #s(literal 1/2 binary64) n) (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n)))))","(/.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/8 binary64) (pow.f64 (log.f64 n) #s(literal 3 binary64))) (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (log.f64 n) (-.f64 (log.f64 n) (/.f64 #s(literal 1/2 binary64) n)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 n) (/.f64 #s(literal -1/2 binary64) n)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (log.f64 n) (/.f64 #s(literal 1/2 binary64) n)) (fma.f64 (log.f64 n) (log.f64 n) (*.f64 #s(literal -1/4 binary64) (pow.f64 n #s(literal -2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (log.f64 n) (log.f64 n) (*.f64 (/.f64 #s(literal 1/2 binary64) n) (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n)))) (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/8 binary64) (pow.f64 (log.f64 n) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 n) (/.f64 #s(literal -1/2 binary64) n))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 (log.f64 n) (/.f64 #s(literal -1/2 binary64) n))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 2 binary64)) (pow.f64 (log.f64 n) #s(literal 2 binary64)))) (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/8 binary64) (pow.f64 (log.f64 n) #s(literal 3 binary64)))) (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (log.f64 n) (-.f64 (log.f64 n) (/.f64 #s(literal 1/2 binary64) n))))))","(neg.f64 (/.f64 (-.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 2 binary64)) (pow.f64 (log.f64 n) #s(literal 2 binary64))) (neg.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n)))))","(neg.f64 (/.f64 (fma.f64 (pow.f64 n #s(literal -3 binary64)) #s(literal 1/8 binary64) (pow.f64 (log.f64 n) #s(literal 3 binary64))) (neg.f64 (fma.f64 (pow.f64 n #s(literal -2 binary64)) #s(literal 1/4 binary64) (*.f64 (log.f64 n) (-.f64 (log.f64 n) (/.f64 #s(literal 1/2 binary64) n)))))))","(fma.f64 (pow.f64 (*.f64 n #s(literal 2 binary64)) #s(literal -1/2 binary64)) (pow.f64 (*.f64 n #s(literal 2 binary64)) #s(literal -1/2 binary64)) (log.f64 n))","(fma.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/2 binary64) (log.f64 n))","(fma.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 2 binary64)) (pow.f64 (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n)))))","(fma.f64 #s(literal -1/2 binary64) (/.f64 #s(literal -1 binary64) n) (log.f64 n))","(fma.f64 (log.f64 n) #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) n))","(fma.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1 binary64) (log.f64 n))","(fma.f64 #s(literal 1/2 binary64) (pow.f64 n #s(literal -1 binary64)) (log.f64 n))","(fma.f64 #s(literal -1 binary64) (/.f64 #s(literal -1/2 binary64) n) (log.f64 n))","(fma.f64 #s(literal 1 binary64) (log.f64 n) (/.f64 #s(literal 1/2 binary64) n))","(fma.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))","(-.f64 (/.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (-.f64 (log.f64 n) (/.f64 #s(literal 1/2 binary64) n))) (/.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 2 binary64)) (-.f64 (log.f64 n) (/.f64 #s(literal 1/2 binary64) n))))","(-.f64 (/.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 2 binary64)) (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))) (/.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))))","(-.f64 (log.f64 n) (/.f64 #s(literal -1/2 binary64) n))","(+.f64 (/.f64 (pow.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 2 binary64)) (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))) (neg.f64 (/.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (-.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n)))))","(+.f64 (log.f64 n) (/.f64 #s(literal 1/2 binary64) n))","(+.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n))","(*.f64 (pow.f64 (*.f64 n #s(literal 2 binary64)) #s(literal -1/2 binary64)) (pow.f64 (*.f64 n #s(literal 2 binary64)) #s(literal -1/2 binary64)))","(*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/2 binary64))","(*.f64 #s(literal -1/2 binary64) (/.f64 #s(literal -1 binary64) n))","(*.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1 binary64))","(*.f64 #s(literal 1/2 binary64) (pow.f64 n #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1/2 binary64) n))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) n))","(pow.f64 (*.f64 n #s(literal 2 binary64)) #s(literal -1 binary64))","(/.f64 #s(literal -1/2 binary64) (neg.f64 n))","(/.f64 #s(literal 1/2 binary64) n)","(/.f64 #s(literal -1 binary64) (*.f64 n #s(literal -2 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 n #s(literal 2 binary64)))","(neg.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) n) #s(literal 1 binary64)))","(neg.f64 (/.f64 #s(literal -1/2 binary64) n))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1/2 binary64) n))","(exp.f64 (*.f64 (log.f64 (*.f64 n #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (log.f64 n) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (log.f64 n))","(fma.f64 (log.f64 n) #s(literal 1 binary64) #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) (log.f64 n) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (log.f64 n))","(+.f64 (log.f64 n) #s(literal 0 binary64))","(log.f64 n)","(*.f64 (/.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))) (/.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)))))","(*.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64)))))","(*.f64 (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))))))","(*.f64 (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)))) (*.f64 (pow.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64))) (/.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64)))) (*.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))) (fma.f64 (pow.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64))) (/.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64))) (fma.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 #s(literal -1 binary64) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)))) (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))))","(neg.f64 (/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64))))","(neg.f64 (/.f64 (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (neg.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)))))","(neg.f64 (/.f64 (-.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (neg.f64 (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64)))))","(fma.f64 (/.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))) (/.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))","(-.f64 (/.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64))) (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64)))","(-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64))","(+.f64 (/.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64))) (neg.f64 (pow.f64 (+.f64 (+.f64 (pow.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 2 binary64)) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))) #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))","(+.f64 #s(literal -1 binary64) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))))","(*.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))))","#s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (log.f64 n) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (log.f64 n))))","(*.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (log.f64 n) #s(literal 2 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 (log.f64 n) #s(literal -1 binary64) #s(literal 1 binary64))))","(*.f64 (neg.f64 (+.f64 (pow.f64 (log.f64 n) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (log.f64 n) (log.f64 n) (-.f64 #s(literal 1 binary64) (log.f64 n))))))","(*.f64 (fma.f64 (log.f64 n) (log.f64 n) #s(literal -1 binary64)) (pow.f64 (-.f64 (log.f64 n) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (log.f64 n) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (log.f64 n) #s(literal 2 binary64))) (log.f64 n))))","(*.f64 (+.f64 (pow.f64 (log.f64 n) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (log.f64 n) (log.f64 n) (-.f64 #s(literal 1 binary64) (log.f64 n))) #s(literal -1 binary64)))","(*.f64 (+.f64 (log.f64 n) #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (+.f64 (log.f64 n) #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (-.f64 (log.f64 n) #s(literal 1 binary64))) (/.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (-.f64 (log.f64 n) #s(literal 1 binary64)))) (*.f64 (pow.f64 (-.f64 (log.f64 n) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (log.f64 n) #s(literal 1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (-.f64 (log.f64 n) #s(literal 1 binary64))) (pow.f64 (-.f64 (log.f64 n) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (-.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 (log.f64 n) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (-.f64 (log.f64 n) #s(literal 1 binary64))) (/.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (-.f64 (log.f64 n) #s(literal 1 binary64))) (fma.f64 (pow.f64 (-.f64 (log.f64 n) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (log.f64 n) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (-.f64 (log.f64 n) #s(literal 1 binary64))) (pow.f64 (-.f64 (log.f64 n) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (log.f64 n) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (log.f64 n))))","(/.f64 (neg.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (log.f64 n) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (log.f64 n) #s(literal -1 binary64) #s(literal 1 binary64))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (log.f64 n) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (log.f64 n) (log.f64 n) (-.f64 #s(literal 1 binary64) (log.f64 n))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (-.f64 (log.f64 n) #s(literal 1 binary64))) (*.f64 (-.f64 (log.f64 n) #s(literal 1 binary64)) #s(literal 1 binary64))) (*.f64 (-.f64 (log.f64 n) #s(literal 1 binary64)) (-.f64 (log.f64 n) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (log.f64 n) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (log.f64 n)))","(/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (log.f64 n) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (log.f64 n) #s(literal -1 binary64) #s(literal 1 binary64)))","(/.f64 (neg.f64 (+.f64 (pow.f64 (log.f64 n) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (log.f64 n) #s(literal 2 binary64))) (log.f64 n))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (log.f64 n) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (log.f64 n) (log.f64 n) (-.f64 #s(literal 1 binary64) (log.f64 n)))))","(/.f64 (fma.f64 (log.f64 n) (log.f64 n) #s(literal -1 binary64)) (-.f64 (log.f64 n) #s(literal 1 binary64)))","(/.f64 (+.f64 (pow.f64 (log.f64 n) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (log.f64 n) #s(literal 2 binary64))) (log.f64 n)))","(/.f64 (+.f64 (pow.f64 (log.f64 n) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (log.f64 n) (log.f64 n) (-.f64 #s(literal 1 binary64) (log.f64 n))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 (log.f64 n) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (log.f64 n)) (-.f64 #s(literal 1 binary64) (pow.f64 (log.f64 n) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 #s(literal 1 binary64) (pow.f64 (log.f64 n) #s(literal 2 binary64))) (log.f64 n)) (+.f64 (pow.f64 (log.f64 n) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (+.f64 (log.f64 n) #s(literal 1 binary64))))","(neg.f64 (/.f64 (fma.f64 #s(literal -1 binary64) (pow.f64 (log.f64 n) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 (log.f64 n) #s(literal 1 binary64))))","(neg.f64 (/.f64 (neg.f64 (+.f64 (pow.f64 (log.f64 n) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (log.f64 n) (log.f64 n) (-.f64 #s(literal 1 binary64) (log.f64 n)))))","(neg.f64 (/.f64 (fma.f64 (log.f64 n) (log.f64 n) #s(literal -1 binary64)) (fma.f64 (log.f64 n) #s(literal -1 binary64) #s(literal 1 binary64))))","(neg.f64 (/.f64 (+.f64 (pow.f64 (log.f64 n) #s(literal 3 binary64)) #s(literal 1 binary64)) (neg.f64 (fma.f64 (log.f64 n) (log.f64 n) (-.f64 #s(literal 1 binary64) (log.f64 n))))))","(fma.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (pow.f64 (-.f64 (log.f64 n) #s(literal 1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 (log.f64 n) #s(literal 1 binary64)) #s(literal -1 binary64))))","(fma.f64 (log.f64 n) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (log.f64 n) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (log.f64 n))) (/.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (log.f64 n))))","(-.f64 (/.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (-.f64 (log.f64 n) #s(literal 1 binary64))) (pow.f64 (-.f64 (log.f64 n) #s(literal 1 binary64)) #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 (log.f64 n) #s(literal 2 binary64)) (-.f64 (log.f64 n) #s(literal 1 binary64))) (neg.f64 (pow.f64 (-.f64 (log.f64 n) #s(literal 1 binary64)) #s(literal -1 binary64))))","(+.f64 (log.f64 n) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (log.f64 n))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":239.125,"type":"rewrite"},{"compiler":[[8079,648]],"memory":[[-890448,18786768]],"time":23.056884765625,"type":"eval"},{"alts":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))","next",0.0,"binary64"],["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n)))","next",60.823851362145476,"binary64"],["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))","done",63.004360901867955,"binary64"]],"compiler":[[18,11],[26,16],[17,11]],"count":[[194,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[191,2],"picked":[3,1]}],"memory":[[-140800,7834288]],"min-error":[[0.0,"binary64"]],"time":3.89794921875,"type":"prune"},{"egraph":[[0,1786,54,0.008084946],[12,1786,62,0.01101922],[11,1771,62,0.012083539],[10,1744,62,0.012650918],[9,1720,62,0.011347305],[8,1649,62,0.011793634],[7,1338,62,0.012048426],[6,891,62,0.008807061],[5,499,62,0.004369258],[4,261,62,0.002176496],[3,127,62,0.000918356],[2,63,62,0.00044331],[1,35,62,0.00026973],[0,19,62,0.000279561],[0,17,62,0.000126374]],"inputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n)))","#s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n))","(/.f64 #s(literal 1/2 binary64) n)","#s(literal 1/2 binary64)","n","#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))","(log.f64 n)","n"]],"locations":[["(log.f64 n)","cost-diff",0],["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))","cost-diff",0],["(/.f64 #s(literal 1/2 binary64) n)","cost-diff",0],["#s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n))","cost-diff",0],["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n)))","cost-diff",0]],"memory":[[-3237776,4909840]],"method":["egg-herbie"],"outputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n)))","#s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n))","(/.f64 #s(literal 1/2 binary64) n)","#s(literal 1/2 binary64)","n","#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))","(log.f64 n)","n"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":114.402099609375,"type":"simplify"},{"compiler":[[46,14]],"locations":[["(log.f64 n)","accuracy",0.0],["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))","accuracy",0.0],["(/.f64 #s(literal 1/2 binary64) n)","accuracy",0.0],["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n)))","accuracy",0.0],["#s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n))","accuracy",60.823851362145476]],"memory":[[-2218976,18280304]],"mixsample":[[0.48046875,"ival-sub",1200],[9.391845703125,"adjust",800],[1.955322265625,"ival-div",0],[0.893310546875,"ival-mult",1200],[4.420654296875,"ival-log",2800],[0.109619140625,"ival-assert",0],[70.3857421875,"ival-sub",0],[2.998779296875,"ival-log",1600],[0.26318359375,"ival-sub",400],[2.945556640625,"ival-log1p",1200],[5.4521484375,"ival-add",0],[2.67822265625,"ival-log",1200],[0.443115234375,"ival-sub",800],[0.703857421875,"ival-mult",1600],[4.502685546875,"ival-log1p",0],[0.833984375,"ival-mult",2400],[0.284912109375,"ival-add",2400],[4.41796875,"ival-log",2400],[0.4375,"ival-add",1200],[0.65625,"ival-mult",2000],[4.8173828125,"ival-log1p",2800],[0.68359375,"ival-mult",2800],[3.46630859375,"ival-log1p",1600],[3.275146484375,"ival-log",2000],[3.4287109375,"ival-mult",0],[0.28173828125,"ival-add",1600],[3.6259765625,"ival-log1p",2000],[0.272216796875,"ival-add",2800],[0.253662109375,"ival-add",2000],[4.836669921875,"ival-log1p",2400],[0.19384765625,"ival-true",0],[10.26806640625,"ival-log",0],[0.31884765625,"exact",0]],"outcomes":[[162.79736328125,1,"valid",256]],"time":174.693115234375,"type":"localize"},{"count":[[5,15]],"inputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n)))","#s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n))","(/.f64 #s(literal 1/2 binary64) n)","#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))","(log.f64 n)"]],"memory":[[1121728,17608208]],"outputs":[["-1","(- (* n (- 1 (log n))) 1)","(- (* n (- (+ 1 (* 1/2 n)) (log n))) 1)","(- (* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n))) 1)","(/ 1/2 n)","(/ (+ 1/2 (* n (log n))) n)","(log n)","(* -1 (log (/ 1 n)))","(+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))","(- (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))) (/ 1/6 (pow n 2)))","(- (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3))))) (/ 1/6 (pow n 2)))","(+ (log -1) (* -1 (log (/ -1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n))))"]],"series":[[10.282958984375,"((- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (+ (/ 1/2 n) (log n)) (/ 1/2 n) (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log n))","n","-inf"],[10.18798828125,"((- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (+ (/ 1/2 n) (log n)) (/ 1/2 n) (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log n))","n","inf"],[7.62890625,"((- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (+ (/ 1/2 n) (log n)) (/ 1/2 n) (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log n))","n","0"]],"time":28.626953125,"type":"series"},{"count":[[15,15]],"egraph":[[0,8061,122,0.067926821],[8,7997,128,0.009703445],[7,7559,128,0.021379546],[6,6370,128,0.032463197],[5,5106,132,0.027759173],[4,2667,132,0.030691655],[3,983,136,0.011312842],[2,387,138,0.004546343],[1,164,143,0.001479659],[0,65,153,0.000663211]],"inputs":[["-1","(- (* n (- 1 (log n))) 1)","(- (* n (- (+ 1 (* 1/2 n)) (log n))) 1)","(- (* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n))) 1)","(/ 1/2 n)","(/ (+ 1/2 (* n (log n))) n)","(log n)","(* -1 (log (/ 1 n)))","(+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))","(- (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))) (/ 1/6 (pow n 2)))","(- (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3))))) (/ 1/6 (pow n 2)))","(+ (log -1) (* -1 (log (/ -1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n))))"]],"memory":[[477152,31349728]],"method":["egg-herbie"],"outputs":[["-1","#s(literal -1 binary64)","(- (* n (- 1 (log n))) 1)","(fma.f64 (-.f64 #s(literal 1 binary64) (log.f64 n)) n #s(literal -1 binary64))","(- (* n (- (+ 1 (* 1/2 n)) (log n))) 1)","(fma.f64 (fma.f64 #s(literal 1/2 binary64) n (-.f64 #s(literal 1 binary64) (log.f64 n))) n #s(literal -1 binary64))","(- (* n (- (+ 1 (* n (+ 1/2 (* -1/6 n)))) (log n))) 1)","(fma.f64 (fma.f64 (fma.f64 #s(literal -1/6 binary64) n #s(literal 1/2 binary64)) n (-.f64 #s(literal 1 binary64) (log.f64 n))) n #s(literal -1 binary64))","(/ 1/2 n)","(/.f64 #s(literal 1/2 binary64) n)","(/ (+ 1/2 (* n (log n))) n)","(-.f64 (log.f64 n) (/.f64 #s(literal -1/2 binary64) n))","(log n)","(log.f64 n)","(* -1 (log (/ 1 n)))","(log.f64 n)","(+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n)))","(-.f64 (log.f64 n) (/.f64 #s(literal -1/2 binary64) n))","(- (+ (* -1 (log (/ 1 n))) (* 1/2 (/ 1 n))) (/ 1/6 (pow n 2)))","(-.f64 (log.f64 n) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) n))","(- (+ (* -1 (log (/ 1 n))) (+ (* 1/2 (/ 1 n)) (* 1/12 (/ 1 (pow n 3))))) (/ 1/6 (pow n 2)))","(-.f64 (log.f64 n) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) n) #s(literal 1/6 binary64)) n)) n))","(+ (log -1) (* -1 (log (/ -1 n))))","(+.f64 (log.f64 (neg.f64 n)) (log.f64 #s(literal -1 binary64)))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* 1/2 (/ 1 n))))","(-.f64 (+.f64 (log.f64 (neg.f64 n)) (log.f64 #s(literal -1 binary64))) (/.f64 #s(literal -1/2 binary64) n))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* 1/6 (/ 1 n)) 1/2) n))))","(-.f64 (+.f64 (log.f64 (neg.f64 n)) (log.f64 #s(literal -1 binary64))) (/.f64 (-.f64 (/.f64 #s(literal 1/6 binary64) n) #s(literal 1/2 binary64)) n))","(+ (log -1) (+ (* -1 (log (/ -1 n))) (* -1 (/ (- (* -1 (/ (- (* 1/12 (/ 1 n)) 1/6) n)) 1/2) n))))","(-.f64 (+.f64 (log.f64 (neg.f64 n)) (log.f64 #s(literal -1 binary64))) (/.f64 (-.f64 #s(literal -1/2 binary64) (/.f64 (-.f64 (/.f64 #s(literal 1/12 binary64) n) #s(literal 1/6 binary64)) n)) n))"]],"stop":[["iter limit",1],["node limit",1]],"time":297.343994140625,"type":"simplify"},{"count":[[5,25]],"egraph":[[0,8433,53,0.096408188],[2,731,59,0.034599648],[1,89,59,0.002988012],[0,19,59,0.00090943],[0,17,59,0.000113764]],"inputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n)))","#s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n))","(/.f64 #s(literal 1/2 binary64) n)","#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))","(log.f64 n)"]],"memory":[[2910720,46277248]],"outputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n)))","#s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n))","(*.f64 (pow.f64 (*.f64 n #s(literal 2 binary64)) #s(literal -1/2 binary64)) (pow.f64 (*.f64 n #s(literal 2 binary64)) #s(literal -1/2 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1/2 binary64) n))","(*.f64 (pow.f64 n #s(literal -1 binary64)) #s(literal 1/2 binary64))","(*.f64 #s(literal -1/2 binary64) (*.f64 (/.f64 #s(literal -1 binary64) n) #s(literal 1 binary64)))","(*.f64 #s(literal -1/2 binary64) (/.f64 #s(literal -1 binary64) n))","(*.f64 (/.f64 #s(literal 1/2 binary64) n) #s(literal 1 binary64))","(*.f64 #s(literal 1/2 binary64) (pow.f64 n #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal 1/2 binary64) n))","(pow.f64 (*.f64 n #s(literal 2 binary64)) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (*.f64 n #s(literal -2 binary64)))","(/.f64 #s(literal -1/2 binary64) (neg.f64 n))","(/.f64 #s(literal 1/2 binary64) n)","(/.f64 #s(literal 1 binary64) (*.f64 n #s(literal 2 binary64)))","(neg.f64 (*.f64 (/.f64 #s(literal -1/2 binary64) n) #s(literal 1 binary64)))","(neg.f64 (/.f64 #s(literal -1/2 binary64) n))","(-.f64 #s(literal 0 binary64) (/.f64 #s(literal -1/2 binary64) n))","(exp.f64 (*.f64 (log.f64 (*.f64 n #s(literal 2 binary64))) #s(literal -1 binary64)))","#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))","(*.f64 #s(literal 1 binary64) (log.f64 n))","(fma.f64 #s(literal 1 binary64) (log.f64 n) #s(literal 0 binary64))","(+.f64 #s(literal 0 binary64) (log.f64 n))","(+.f64 (log.f64 n) #s(literal 0 binary64))","(log.f64 n)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":332.913818359375,"type":"rewrite"},{"compiler":[[987,133]],"memory":[[3380448,3380448]],"time":3.88720703125,"type":"eval"},{"alts":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))","done",0.0,"binary64"],["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n)))","done",60.823851362145476,"binary64"],["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))","done",63.004360901867955,"binary64"]],"compiler":[[118,32],[18,11],[26,16],[17,11]],"count":[[41,3]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[38,0],"picked":[2,2]}],"memory":[[-4552576,3393136]],"min-error":[[0.0,"binary64"]],"time":4.223876953125,"type":"prune"},{"accuracy":[0.0],"baseline":[0.0],"branch":[["n",0.0,1,"binary64"],["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))",0.0,1,"binary64"],["(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))",0.0,1,"binary64"]],"compiler":[[1,1],[15,9],[13,8]],"count":[[6,1]],"inputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))","#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n)))","#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))","(-.f64 #s(approx (- (* (+ n 1) (log (+ n 1))) (* n (log n))) (+.f64 (log.f64 n) #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (+.f64 (/.f64 #s(literal 1/2 binary64) n) (log.f64 n)))","(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))"]],"memory":[[5098464,5098464]],"oracle":[63.01601884390108],"outputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))"]],"repr":["binary64"],"time":6.18798828125,"times":[[2.09521484375,"n"],[1.653076171875,"(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))"],[1.764892578125,"(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))"]],"type":"regimes"},{"accuracy":[60.823851362145476],"baseline":[60.823851362145476],"branch":[["n",60.82385136214552,1,"binary64"],["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))",60.823851362145476,1,"binary64"],["(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))",60.823851362145476,1,"binary64"]],"compiler":[[1,1],[15,9],[13,8]],"count":[[2,1]],"inputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))","#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n)))"]],"memory":[[-4193648,4049920]],"oracle":[63.004360901867955],"outputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n)))"]],"repr":["binary64"],"time":4.380126953125,"times":[[1.251953125,"n"],[1.120849609375,"(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))"],[1.413818359375,"(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))"]],"type":"regimes"},{"accuracy":[63.00436090186792],"baseline":[63.004360901867955],"branch":[["n",63.00436090186792,1,"binary64"],["(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))",63.004360901867955,1,"binary64"],["(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))",63.004360901867955,1,"binary64"]],"compiler":[[1,1],[15,9],[13,8]],"count":[[1,1]],"inputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))"]],"link":["."],"memory":[[3817216,3817216]],"name":["logs (example 3.8)"],"oracle":[63.004360901867955],"outputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))"]],"repr":["binary64"],"time":3.453857421875,"times":[[1.01611328125,"n"],[0.925048828125,"(-.f64 (-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n))) #s(literal 1 binary64))"],[0.94287109375,"(-.f64 (*.f64 (+.f64 n #s(literal 1 binary64)) (log.f64 (+.f64 n #s(literal 1 binary64)))) (*.f64 n (log.f64 n)))"]],"type":"regimes"},{"egraph":[[8,7992,61,0.033773764],[7,4426,61,0.051722593],[6,1840,61,0.020723678],[5,761,61,0.011347793],[4,348,61,0.003171579],[3,158,61,0.001048951],[2,64,61,0.000583137],[1,34,61,0.000325651],[0,19,61,0.000305644]],"inputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))","#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n)))","#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))"]],"memory":[[-9997216,9928608]],"method":["egg-herbie"],"outputs":[["#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) (log.f64 n))","#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(approx (+ (/ 1/2 n) (log n)) (/.f64 #s(literal 1/2 binary64) n)))","#s(approx (- (- (* (+ n 1) (log (+ n 1))) (* n (log n))) 1) #s(literal -1 binary64))"]],"stop":[["node limit",1]],"time":152.982177734375,"type":"simplify"},{"compiler":[[61,20]],"memory":[[610592,610592]],"stop":[["done",1]],"time":0.83984375,"type":"soundness"},{"compiler":[[61,20],[61,20],[24,17],[24,17],[15,9],[15,9]],"memory":[[5410928,21289168]],"remove-preprocessing":[[],[],[],[]],"time":33.60693359375,"type":"preprocess"},{"memory":[[2256,2256]],"time":0.01611328125,"type":"end"}]