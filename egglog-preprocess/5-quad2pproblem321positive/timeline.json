[{"memory":[[16416,16416]],"time":0.041015625,"type":"start"},{"compiler":[[15,12]],"memory":[[4209344,37373136]],"method":["search"],"sampling":[[12,{"invalid":0.15065800012661157,"precondition":0.0014641286106780171,"unknown":0.24232047269555324,"valid":0.6055573985671572}],[11,{"invalid":0.12969264735818342,"precondition":0.0014641286106780171,"unknown":0.28181334651515044,"valid":0.5870298775159881}],[10,{"invalid":0.11116512630701436,"precondition":0.0014641286106780171,"unknown":0.3529980326591158,"valid":0.5343727124231918}],[9,{"invalid":0.08191114569990532,"precondition":0.0014641286106780171,"unknown":0.4173567899947557,"valid":0.499267935694661}],[8,{"invalid":0.054607430466603546,"precondition":0.0014641286106780171,"unknown":0.4602626282185156,"valid":0.48366581270420284}],[7,{"invalid":0.04680636897137447,"precondition":0.0014641286106780171,"unknown":0.5460743046660355,"valid":0.40565519775191206}],[6,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.6240849196183262,"valid":0.37445095177099574}],[5,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.6240849196183262,"valid":0.37445095177099574}],[4,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.7489019035419915,"valid":0.2496339678473305}],[3,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[2,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[1,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}],[0,{"invalid":0.0,"precondition":0.0014641286106780171,"unknown":0.998535871389322,"valid":0.0}]],"time":276.569091796875,"type":"analyze"},{"bogosity":[{"infinite":0.06290910009687237,"invalid":0.25550650028806554,"precondition":0.0014641286106780171,"valid":0.6801202710043841}],"memory":[[16417808,380201200]],"mixsample":[[8.1591796875,"ival-sub",1200],[0.24462890625,"ival-sub",4800],[137.071044921875,"ival-div",0],[74.89208984375,"adjust",800],[5.231201171875,"ival-mult",1200],[3.29052734375,"ival-sub",1600],[5.052490234375,"ival-assert",0],[0.019775390625,"ival-sub",3600],[0.5849609375,"ival-sqrt",4800],[13.952880859375,"ival-sqrt",1200],[67.84521484375,"ival-sub",0],[99.862060546875,"ival-sqrt",0],[5.20068359375,"ival-sub",400],[0.01708984375,"ival-sqrt",2800],[6.263916015625,"ival-mult",800],[103.318603515625,"ival-add",0],[0.63720703125,"ival-sub",4400],[6.547607421875,"ival-sub",800],[0.924560546875,"ival-mult",1600],[3.329833984375,"adjust",2800],[0.044921875,"ival-sqrt",3600],[0.31298828125,"ival-sub",4000],[7.841796875,"ival-sqrt",400],[6.132080078125,"ival-sqrt",2000],[0.171142578125,"ival-mult",2000],[11.120361328125,"ival-sqrt",800],[3.25537109375,"ival-sub",2000],[0.746337890625,"ival-sqrt",4000],[1.4658203125,"ival-sqrt",4400],[29.669921875,"adjust",2000],[3.894775390625,"ival-sub",2400],[177.747802734375,"ival-mult",0],[5.4521484375,"ival-sqrt",1600],[6.70751953125,"ival-mult",400],[0.052734375,"ival-div",800],[9.790771484375,"ival-true",0],[7.264404296875,"ival-sqrt",2400],[0.009033203125,"ival-sub",2800],[0.03515625,"ival-add",800],[74.92236328125,"ival-neg",0]],"outcomes":[[245.698974609375,1,"valid",1338],[306.728271484375,2,"valid",1191],[120.7197265625,0,"invalid",1165],[58.02294921875,3,"valid",188],[539.69873046875,0,"valid",5539]],"time":1752.31591796875,"type":"sample"},{"compiler":[[13,10],[52,12],[52,12]],"confusion":[[108,0,25,123]],"explanations":[["/.f64","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","o/n",1,0,[["(*.f64 b_2 b_2)","overflow",78],["(+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","overflow",1],["(*.f64 a c)","overflow",19],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","overflow",90]],[[]]],["sqrt.f64","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","uflow-rescue",2,0,[["(*.f64 b_2 b_2)","underflow",36],["(*.f64 a c)","underflow",42],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","underflow",2]],[[1,2]]],["-.f64","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","nan-rescue",4,0,[["(*.f64 b_2 b_2)","overflow",78],["(*.f64 a c)","overflow",19]],[[1,2,1]]],["/.f64","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","u/n",16,0,[["(*.f64 b_2 b_2)","underflow",36],["(+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","underflow",33],["(*.f64 a c)","underflow",42],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","underflow",2]],[[]]],["+.f64","(+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","cancellation",51,0,[],[[1]]],["sqrt.f64","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","oflow-rescue",90,0,[["(*.f64 b_2 b_2)","overflow",78],["(*.f64 a c)","overflow",19],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","overflow",90]],[[1,2]]]],"fperrors":[["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))",4,0,false,0,false],["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))",92,0,false,0,false],["(+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))",51,0,false,0,false],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",17,0,false,0,false],["(*.f64 b_2 b_2)",0,0,false,0,false],["a",0,0,false,0,false],["(neg.f64 b_2)",0,0,false,0,false],["b_2",0,0,false,0,false],["(*.f64 a c)",0,0,false,0,false],["c",0,0,false,0,false]],"freqs":[[3,1],[2,29],[1,103],[0,123]],"maybe-confusion":[[108,0,0,25,0,123]],"memory":[[-6120480,66334448]],"mixsample":[[0.41552734375,"ival-sub",1200],[6.936279296875,"ival-div",0],[4.551025390625,"adjust",800],[0.027099609375,"ival-sub",4800],[0.1904296875,"ival-mult",1200],[0.22216796875,"ival-sub",1600],[0.241943359375,"ival-assert",0],[0.677001953125,"ival-sqrt",1200],[5.83642578125,"ival-sub",0],[0.051025390625,"ival-sqrt",4800],[0.313232421875,"ival-sub",400],[4.720458984375,"ival-sqrt",0],[4.825439453125,"ival-add",0],[0.60546875,"ival-mult",800],[0.01904296875,"ival-sqrt",2800],[0.044677734375,"ival-sub",4400],[0.358642578125,"ival-sub",800],[0.093017578125,"ival-mult",1600],[0.283203125,"adjust",2800],[0.010009765625,"ival-sub",4000],[0.510986328125,"ival-sqrt",400],[0.491455078125,"ival-sqrt",2000],[0.53369140625,"ival-sqrt",800],[0.194580078125,"ival-sub",2000],[0.02392578125,"ival-sqrt",4000],[0.12744140625,"ival-sqrt",4400],[1.868896484375,"adjust",2000],[0.36767578125,"ival-sub",2400],[8.574951171875,"ival-mult",0],[0.402587890625,"ival-sqrt",1600],[0.350830078125,"ival-mult",400],[0.01416015625,"ival-div",800],[0.6005859375,"ival-true",0],[0.578369140625,"ival-sqrt",2400],[0.010009765625,"ival-sub",2800],[0.02099609375,"ival-add",800],[2.822509765625,"ival-neg",0]],"outcomes":[[11.69873046875,1,"valid",64],[23.998291015625,2,"valid",88],[4.910888671875,3,"valid",14],[36.399169921875,0,"valid",346]],"time":175.046142578125,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[13,10]],"egraph":[[0,986,12,0.003359308],[12,986,12,0.006478687],[11,985,12,0.007184761],[10,974,12,0.007221161],[9,942,12,0.006846978],[8,828,12,0.007183779],[7,475,12,0.004961137],[6,322,12,0.003047281],[5,189,12,0.001934975],[4,113,12,0.001089179],[3,74,12,0.000764919],[2,45,12,0.000339183],[1,28,12,0.000226747],[0,17,13,0.000280948],[0,10,13,0.000216483]],"inputs":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"]],"memory":[[152208,17526928]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2) a)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[[]],"time":242.139892578125,"type":"preprocess"},{"compiler":[[0,3]],"memory":[[50624,50624]],"time":0.1181640625,"type":"eval"},{"alts":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","next",26.038966591759444,"binary64"]],"compiler":[[13,10]],"memory":[[338176,338176]],"time":0.719970703125,"type":"prune"},{"egraph":[[0,986,48,0.003204836],[12,986,48,0.005020428],[11,985,48,0.005304735],[10,974,48,0.005583242],[9,942,48,0.006769158],[8,828,48,0.006702023],[7,475,48,0.004307358],[6,322,48,0.00266527],[5,189,48,0.001636165],[4,113,48,0.000959487],[3,74,48,0.000516112],[2,45,48,0.000358472],[1,28,48,0.00024225],[0,17,50,0.000251523],[0,10,50,0.000139574]],"inputs":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(neg.f64 b_2)","b_2","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","(*.f64 b_2 b_2)","(*.f64 a c)","a","c"]],"locations":[["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","cost-diff",0],["(neg.f64 b_2)","cost-diff",0],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","cost-diff",0],["(+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","cost-diff",1]],"memory":[[-5688528,2206464]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2) a)","(+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(-.f64 (sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))) b_2)","(neg.f64 b_2)","b_2","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(sqrt.f64 (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","(fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))","(*.f64 b_2 b_2)","(*.f64 a c)","(*.f64 c a)","a","c"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":62.059814453125,"type":"simplify"},{"compiler":[[52,12]],"locations":[["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","accuracy",0.7968750000000001],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","accuracy",3.8930608616335354],["(+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","accuracy",11.996429556286323],["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","accuracy",21.41609059268961]],"memory":[[5371296,13343536]],"mixsample":[[0.21826171875,"ival-sub",1200],[3.04150390625,"ival-div",0],[1.811767578125,"adjust",800],[0.009765625,"ival-sub",4800],[0.099365234375,"ival-mult",1200],[0.0859375,"ival-sub",1600],[0.11572265625,"ival-assert",0],[0.314208984375,"ival-sqrt",1200],[1.41455078125,"ival-sub",0],[0.013916015625,"ival-sqrt",4800],[0.140869140625,"ival-sub",400],[2.19287109375,"ival-sqrt",0],[2.12890625,"ival-add",0],[0.23681640625,"ival-mult",800],[0.010009765625,"ival-sqrt",2800],[0.019775390625,"ival-sub",4400],[0.159423828125,"ival-sub",800],[0.044189453125,"ival-mult",1600],[0.176025390625,"adjust",2800],[0.008056640625,"ival-sub",4000],[0.230224609375,"ival-sqrt",400],[0.19970703125,"ival-sqrt",2000],[0.25634765625,"ival-sqrt",800],[0.0986328125,"ival-sub",2000],[0.02294921875,"ival-sqrt",4000],[0.061279296875,"ival-sqrt",4400],[0.853759765625,"adjust",2000],[0.12109375,"ival-sub",2400],[3.67333984375,"ival-mult",0],[0.160888671875,"ival-sqrt",1600],[0.1533203125,"ival-mult",400],[0.006103515625,"ival-div",800],[0.34130859375,"ival-true",0],[0.205322265625,"ival-sqrt",2400],[0.0048828125,"ival-sub",2800],[0.010986328125,"ival-add",800],[1.4296875,"ival-neg",0]],"outcomes":[[5.320556640625,1,"valid",32],[10.240966796875,2,"valid",44],[2.30908203125,3,"valid",7],[15.3984375,0,"valid",173]],"time":43.791015625,"type":"localize"},{"count":[[5,98]],"inputs":[["(+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(neg.f64 b_2)","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))"]],"memory":[[-833888,7113424]],"outputs":[["(* -1/2 (/ (* a c) b_2))","(* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5)))))))))","(* -1/2 (/ c b_2))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))))))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a c))","(* a (- (/ (pow b_2 2) a) c))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(- (pow b_2 2) (* a c))","(/ (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2)","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* -2 b_2)","(* -1 (* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -2 (/ b_2 a))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a)))))))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3)))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5)))))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow a 3) (pow b_2 5)))))))))","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))) (* -1/16 (/ (pow a 2) (pow b_2 5))))))) (* 1/2 (/ 1 b_2))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (- (/ (pow b_2 2) c) a))","(* -1 (* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))"]],"series":[[2.573974609375,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","c","-inf"],[2.114990234375,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","c","inf"],[2.3359375,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","c","0"],[1.204833984375,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","b_2","-inf"],[2.405029296875,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","b_2","inf"],[1.6669921875,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","b_2","0"],[3.925048828125,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","a","-inf"],[2.39697265625,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","a","inf"],[1.468017578125,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)))","a","0"]],"time":22.321044921875,"type":"series"},{"count":[[98,97]],"egraph":[[0,8048,2611,0.101141955],[2,5550,2747,0.035052305],[1,1606,2798,0.016939352],[0,508,2832,0.00571508]],"inputs":[["(* -1/2 (/ (* a c) b_2))","(* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5)))))))))","(* -1/2 (/ c b_2))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))))))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a c))","(* a (- (/ (pow b_2 2) a) c))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(- (pow b_2 2) (* a c))","(/ (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2)","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* -2 b_2)","(* -1 (* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -2 (/ b_2 a))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a)))))))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3)))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5)))))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow a 3) (pow b_2 5)))))))))","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))) (* -1/16 (/ (pow a 2) (pow b_2 5))))))) (* 1/2 (/ 1 b_2))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (- (/ (pow b_2 2) c) a))","(* -1 (* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))"]],"memory":[[375392,49020368]],"method":["egg-herbie"],"outputs":[["(* -1/2 (/ (* a c) b_2))","(*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)","(* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a)","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 a #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a)","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5)))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 #s(literal 5/64 binary64) b_2)) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 5 binary64)))) a (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a)","(* -1/2 (/ c b_2))","(*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(fma.f64 (*.f64 #s(literal -1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))","(fma.f64 (fma.f64 (*.f64 a #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 #s(literal 5/64 binary64) b_2)) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 5 binary64)))) a (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 a #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a b_2)","(pow b_2 2)","(*.f64 b_2 b_2)","(+ (* -1 (* a c)) (pow b_2 2))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(* (sqrt (* a c)) (sqrt -1))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a)))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a)) a)","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(*.f64 (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a))) a)","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a)))) a)","(* (sqrt (/ c a)) (sqrt -1))","(*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a)))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))) a)","(* -1 (* a c))","(*.f64 (neg.f64 a) c)","(* a (- (/ (pow b_2 2) a) c))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a)))","(* -1 (* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 a)))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (-.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (neg.f64 b_2)) a)))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (+.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2)) (*.f64 #s(literal -1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b_2 #s(literal 4 binary64)))))) a) b_2) a)))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(neg.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(neg.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) b_2) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(neg.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 b_2 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal 1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2))))) a)) a)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) #s(literal 1/2 binary64)) (*.f64 b_2 b_2) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) #s(literal 1/2 binary64)) (*.f64 b_2 b_2) (sqrt.f64 (/.f64 c a))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) #s(literal 1/16 binary64)) (pow.f64 b_2 #s(literal 6 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) #s(literal 1/2 binary64)) (*.f64 b_2 b_2) (sqrt.f64 (/.f64 c a))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a)) (neg.f64 b_2))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) #s(literal -1 binary64)) b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) b_2 #s(literal -1 binary64)) b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -1 binary64) a)) b_2 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) b_2 (/.f64 #s(literal -1 binary64) a)) b_2 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(* -1 b_2)","(neg.f64 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(fma.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 b_2 (/.f64 b_2 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64))) (*.f64 b_2 b_2) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a))))","(- (pow b_2 2) (* a c))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(/ (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2)))) b_2)","(/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) b_2) (*.f64 (*.f64 c a) #s(literal -1/2 binary64))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))))) b_2)","(/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) b_2) (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (*.f64 c a) #s(literal -1/2 binary64)))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2)","(/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (/.f64 #s(literal 5/64 binary64) (pow.f64 b_2 #s(literal 6 binary64))) (*.f64 c a)) (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) b_2)))) b_2)","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2)","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2)","(/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (fma.f64 (*.f64 (*.f64 a a) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 #s(literal -1/2 binary64) c))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2)","(/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 #s(literal 5/64 binary64) a) c) (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (/.f64 (*.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(*.f64 (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64)) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64))) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 (/.f64 c b_2) b_2) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) a) a) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) b_2 b_2)","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)","(* -2 b_2)","(*.f64 #s(literal -2 binary64) b_2)","(* -1 (* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal -1/2 binary64) #s(literal 2 binary64)))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal -1/2 binary64) #s(literal 2 binary64))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(*.f64 (neg.f64 b_2) (+.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal -1/2 binary64) #s(literal 2 binary64))) (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))))))","(* -2 (/ b_2 a))","(*.f64 #s(literal -2 binary64) (/.f64 b_2 a))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a)))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 c b_2) (fma.f64 (*.f64 (*.f64 c c) (/.f64 a (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal -1/8 binary64) (/.f64 #s(literal 2 binary64) a))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 c b_2) (fma.f64 (*.f64 #s(literal -1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 4 binary64)))) (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1/16 binary64) (/.f64 #s(literal 2 binary64) a)))))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64)))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(neg.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 (/.f64 c b_2) b_2) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) a) a) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) b_2 b_2))","(* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3)))))","(*.f64 (fma.f64 (*.f64 c #s(literal -1/8 binary64)) (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c)","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 a a) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c)","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow a 3) (pow b_2 5)))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal -1/16 binary64) (*.f64 (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 5/64 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 c b_2)) #s(literal -1/2 binary64))) c (/.f64 (*.f64 (*.f64 a a) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c)","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (*.f64 c #s(literal -1/8 binary64)) (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 #s(literal -1/2 binary64) b_2)) c)","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (fma.f64 (*.f64 c #s(literal -1/16 binary64)) (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 5 binary64)))) (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64))) c (/.f64 #s(literal -1/2 binary64) b_2)) c)","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))) (* -1/16 (/ (pow a 2) (pow b_2 5))))))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 5/64 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 c b_2)) (/.f64 (*.f64 (*.f64 a a) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 5 binary64)))) c (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64))) c (/.f64 #s(literal -1/2 binary64) b_2)) c)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(fma.f64 (fma.f64 (*.f64 c #s(literal -1/8 binary64)) (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c b_2)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 a a) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c b_2)","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 (neg.f64 c))) c)","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 (neg.f64 c)))) c)","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 (neg.f64 c))))) c)","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) (*.f64 c a))) c)","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) (*.f64 c a)))) c)","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) (*.f64 c a))))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))) c)","(* c (- (/ (pow b_2 2) c) a))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 c)) a) c)","(* -1 (* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (neg.f64 b_2)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (+.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (*.f64 b_2 b_2)) (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))))))) c) b_2) c)) (neg.f64 c))","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 c) a)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (/.f64 (neg.f64 b_2) a)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 c a))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (+.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 b_2)) (*.f64 #s(literal -1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b_2 #s(literal 4 binary64)))))) c) (/.f64 b_2 a)) c)) (neg.f64 c))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) #s(literal 1/2 binary64)) (*.f64 b_2 b_2) (sqrt.f64 (/.f64 a c)))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) #s(literal 1/2 binary64)) (*.f64 b_2 b_2) (sqrt.f64 (/.f64 a c))))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) #s(literal 1/16 binary64)) (pow.f64 b_2 #s(literal 6 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) #s(literal 1/2 binary64)) (*.f64 b_2 b_2) (sqrt.f64 (/.f64 a c))))) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 c)) a) c)"]],"stop":[["iter limit",1],["node limit",1]],"time":314.671142578125,"type":"simplify"},{"count":[[5,449]],"egraph":[[0,8644,34,0.045916561],[3,5920,38,0.050650596],[2,463,38,0.017453274],[1,64,39,0.0018687],[0,17,41,0.000732162],[0,10,41,0.000134226]],"inputs":[["(+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(neg.f64 b_2)","(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))"]],"memory":[[-12689136,42197936]],"outputs":[["(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64))) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (fma.f64 (fma.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 b_2 #s(literal 4 binary64))))","(*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1 binary64)) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)))","(*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (pow.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)) (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))","(*.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64))))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(*.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (pow.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64))))","(*.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2)))))","(*.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (neg.f64 (pow.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64))))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal 1 binary64))","(pow.f64 (/.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (neg.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal 1 binary64))","(/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)))","(/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (pow.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)))","(/.f64 (*.f64 (pow.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64)) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64))) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64))) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 b_2 #s(literal 4 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64))) (pow.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64))) (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))","(/.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 9/2 binary64)) (pow.f64 b_2 #s(literal 9 binary64))) (pow.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) #s(literal 2 binary64)) (pow.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) #s(literal 2 binary64))) (fma.f64 b_2 (/.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (+.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 #s(literal 0 binary64) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) #s(literal 3 binary64)) (pow.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) #s(literal 2 binary64)) (*.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))))))","(/.f64 (*.f64 (pow.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal 3 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 b_2 #s(literal 4 binary64))) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 9/2 binary64)) (pow.f64 b_2 #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2)))) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))))","(/.f64 (-.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) b_2) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(/.f64 (-.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2)))","(/.f64 (-.f64 (*.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) b_2) (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)) (*.f64 b_2 b_2))) (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)) b_2))","(/.f64 (-.f64 (*.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 b_2 b_2)) (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)) (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)) (*.f64 b_2 b_2)))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a))) (*.f64 b_2 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))) (*.f64 b_2 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a))))","(/.f64 (-.f64 (*.f64 (pow.f64 b_2 #s(literal 3 binary64)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (*.f64 (pow.f64 b_2 #s(literal 3 binary64)) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a))) (*.f64 (*.f64 b_2 b_2) (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))) (*.f64 (*.f64 b_2 b_2) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a))))","(/.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) b_2 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2))) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(/.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 b_2)))","(/.f64 (fma.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) b_2 (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)) (*.f64 b_2 b_2))) (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)) b_2))","(/.f64 (fma.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 b_2 b_2) (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)) (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)) (*.f64 b_2 b_2)))","(/.f64 (fma.f64 (*.f64 b_2 b_2) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(/.f64 (fma.f64 (*.f64 b_2 b_2) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)) (*.f64 b_2 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))) (*.f64 b_2 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a))))","(/.f64 (fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 b_2 b_2))) (*.f64 (*.f64 b_2 b_2) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)) (*.f64 (*.f64 b_2 b_2) (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))) (*.f64 (*.f64 b_2 b_2) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a))))","(/.f64 (pow.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64))) (*.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))))","(/.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 9/2 binary64)) (pow.f64 b_2 #s(literal 9 binary64))) (*.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64)))))","(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))))","(neg.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(fma.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))))","(fma.f64 (/.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (neg.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))))","(fma.f64 (neg.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) b_2)","(fma.f64 (pow.f64 b_2 #s(literal 1/2 binary64)) (pow.f64 b_2 #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)))","(fma.f64 (pow.f64 b_2 #s(literal 1/2 binary64)) (pow.f64 b_2 #s(literal 1/2 binary64)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(fma.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) (neg.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64))) b_2)","(fma.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) b_2)","(fma.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)) #s(literal -1 binary64)) b_2)","(fma.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/2 binary64)) b_2)","(fma.f64 #s(literal -1 binary64) (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) (neg.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)","(fma.f64 #s(literal -1 binary64) b_2 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(fma.f64 #s(literal 1 binary64) (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) (neg.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))))","(fma.f64 #s(literal 1 binary64) b_2 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)))","(fma.f64 #s(literal 1 binary64) b_2 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (*.f64 b_2 b_2) #s(literal -1 binary64)) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (*.f64 b_2 b_2) #s(literal -1 binary64)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(fma.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64) b_2)","(fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)) b_2)","(fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1/2 binary64)) b_2)","(fma.f64 (*.f64 b_2 b_2) (pow.f64 b_2 #s(literal -1 binary64)) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)))","(fma.f64 (*.f64 b_2 b_2) (pow.f64 b_2 #s(literal -1 binary64)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(fma.f64 (*.f64 b_2 b_2) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)) (neg.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))))","(fma.f64 b_2 (/.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) (neg.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))))","(fma.f64 b_2 #s(literal -1 binary64) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)))","(fma.f64 b_2 #s(literal -1 binary64) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(fma.f64 b_2 #s(literal 1 binary64) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)))","(fma.f64 b_2 #s(literal 1 binary64) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(-.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 0 binary64)) b_2)","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2)))) (/.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2)))))","(-.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)))","(-.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)))","(-.f64 #s(literal 0 binary64) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)","(-.f64 b_2 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(exp.f64 (*.f64 (log.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64))) #s(literal -1 binary64)))","(+.f64 (-.f64 #s(literal 0 binary64) (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)))","(+.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)) b_2)","(+.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 0 binary64)) b_2)","(+.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) (neg.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))))","(+.f64 #s(literal 0 binary64) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(+.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)","(+.f64 b_2 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)))","(+.f64 b_2 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) a) (pow.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64))) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) a) (+.f64 (pow.f64 (fma.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (fma.f64 (fma.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 b_2 #s(literal 4 binary64))))","(*.f64 (pow.f64 (/.f64 a (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 a (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) #s(literal -1/2 binary64)) (pow.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) #s(literal -1/2 binary64)))","(*.f64 (/.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) a) (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2)))))","(*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1 binary64)) (/.f64 (pow.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) a) (pow.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -1 binary64) a) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)) (neg.f64 a)))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64))))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a) #s(literal -1 binary64)))","(*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)) a))","(*.f64 #s(literal -1 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a))","(*.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) a)))","(*.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 (pow.f64 a #s(literal -1 binary64)) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2)))))","(*.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)) (neg.f64 a)))","(*.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (pow.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 (*.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) a) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 (pow.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)) a))","(*.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a) (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)))","(*.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a) #s(literal 1 binary64))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a)))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (/.f64 #s(literal -1 binary64) a))","(*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (pow.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a)) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) a)) #s(literal -1 binary64))","(pow.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) #s(literal -1 binary64))","(pow.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a) #s(literal 1 binary64))","(/.f64 (pow.f64 (/.f64 a (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(/.f64 (pow.f64 (/.f64 a (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1 binary64)) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))))","(/.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)) a)","(/.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 #s(literal -1 binary64) a)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 #s(literal -1 binary64) a)) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(/.f64 (*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) a)) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))))","(/.f64 (neg.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(/.f64 (neg.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) a)) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))))","(/.f64 (*.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 a)))","(/.f64 (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))","(/.f64 (/.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) a) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))))","(/.f64 (pow.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64)) (*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64))) (*.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64))) (*.f64 (*.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) a) (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))))","(/.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 9/2 binary64)) (pow.f64 b_2 #s(literal 9 binary64))) (*.f64 (*.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) a) (fma.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 6 binary64)))))","(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a)))","(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (neg.f64 a) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)))","(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (neg.f64 a)))","(/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a))","(/.f64 #s(literal -1 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)))","(/.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (/.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) a)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) a)))","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)))","(/.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (neg.f64 (*.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) a)))","(/.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (neg.f64 a) (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 a)))","(/.f64 (-.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 (fma.f64 b_2 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (fma.f64 c a (*.f64 b_2 b_2))) a))","(/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (neg.f64 a))","(/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a)","(neg.f64 (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (pow.f64 a #s(literal -1 binary64)) b_2))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) b_2 (*.f64 (pow.f64 a #s(literal -1 binary64)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(fma.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 a #s(literal -1 binary64)) (*.f64 b_2 (pow.f64 a #s(literal -1 binary64))))","(fma.f64 b_2 (pow.f64 a #s(literal -1 binary64)) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 a #s(literal -1 binary64))))","(-.f64 (/.f64 (*.f64 b_2 b_2) (*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a)) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a)))","(-.f64 (/.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) a) (/.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) a))","(-.f64 (/.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) a) (/.f64 b_2 a))","(-.f64 (/.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) (neg.f64 a)) (/.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)) (neg.f64 a)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 a)) (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a))","(-.f64 (/.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 a)) (/.f64 b_2 (neg.f64 a)))","(-.f64 (/.f64 #s(literal 0 binary64) a) (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a))","(-.f64 #s(literal 0 binary64) (/.f64 (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) a))","(exp.f64 (*.f64 (log.f64 (/.f64 a (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2))) #s(literal -1 binary64)))","(+.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 a #s(literal -1 binary64))) (*.f64 b_2 (pow.f64 a #s(literal -1 binary64))))","(+.f64 (*.f64 b_2 (pow.f64 a #s(literal -1 binary64))) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (pow.f64 a #s(literal -1 binary64))))","(+.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (*.f64 (pow.f64 a #s(literal -1 binary64)) b_2))","(+.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) b_2) (*.f64 (pow.f64 a #s(literal -1 binary64)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(*.f64 (pow.f64 b_2 #s(literal 1/2 binary64)) (pow.f64 b_2 #s(literal 1/2 binary64)))","(*.f64 #s(literal -1 binary64) b_2)","(*.f64 #s(literal 1 binary64) b_2)","(*.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (*.f64 b_2 b_2) #s(literal -1 binary64)))","(*.f64 (*.f64 b_2 b_2) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 b_2 #s(literal -1 binary64))","(*.f64 b_2 #s(literal 1 binary64))","(pow.f64 (pow.f64 b_2 #s(literal 1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (/.f64 b_2 (*.f64 b_2 b_2)) #s(literal -1 binary64))","(pow.f64 (/.f64 (*.f64 b_2 b_2) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1 binary64))","(pow.f64 b_2 #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 b_2 (*.f64 b_2 b_2)))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 b_2 b_2) (pow.f64 b_2 #s(literal 3 binary64))))","(/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (-.f64 (*.f64 b_2 b_2) #s(literal 0 binary64))))","(/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (*.f64 b_2 b_2))","(/.f64 (*.f64 b_2 b_2) b_2)","(neg.f64 b_2)","(fma.f64 (pow.f64 b_2 #s(literal 1/2 binary64)) (pow.f64 b_2 #s(literal 1/2 binary64)) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) b_2 #s(literal 0 binary64))","(fma.f64 #s(literal 1 binary64) b_2 #s(literal 0 binary64))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 (*.f64 b_2 b_2) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (*.f64 b_2 b_2) (pow.f64 b_2 #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 b_2 #s(literal -1 binary64) #s(literal 0 binary64))","(fma.f64 b_2 #s(literal 1 binary64) #s(literal 0 binary64))","(-.f64 (/.f64 #s(literal 0 binary64) b_2) b_2)","(-.f64 (/.f64 #s(literal 0 binary64) (*.f64 b_2 b_2)) b_2)","(-.f64 #s(literal 0 binary64) b_2)","(exp.f64 (*.f64 (*.f64 (log.f64 b_2) #s(literal 1 binary64)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (log.f64 b_2) #s(literal 1 binary64)))","(+.f64 #s(literal 0 binary64) b_2)","(+.f64 b_2 #s(literal 0 binary64))","b_2","(*.f64 (neg.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64)))","(*.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) (neg.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64))))","(*.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64)))","(*.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)) #s(literal -1 binary64)))","(*.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/2 binary64)))","(*.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)))","(*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1/2 binary64)))","(pow.f64 (/.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64))","(pow.f64 (/.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)) (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1 binary64))","(pow.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1/2 binary64)) #s(literal -1 binary64))","(pow.f64 (-.f64 (pow.f64 b_2 #s(literal 8 binary64)) (pow.f64 (*.f64 c a) #s(literal 4 binary64))) #s(literal 1/8 binary64))","(pow.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1 binary64))","(pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/2 binary64))","(/.f64 (-.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 0 binary64)) (-.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 0 binary64)))","(/.f64 (+.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) #s(literal 0 binary64)) (+.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 #s(literal 0 binary64) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 0 binary64)))))","(/.f64 (neg.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (neg.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a))))","(/.f64 (neg.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)))","(/.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (neg.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a))))","(/.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)))","(/.f64 #s(literal 1 binary64) (/.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (fma.f64 c a (*.f64 b_2 b_2))))","(/.f64 #s(literal 1 binary64) (/.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)) (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1/2 binary64)))","(/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(neg.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(fma.f64 (neg.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) #s(literal 0 binary64))","(fma.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) (neg.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64))) #s(literal 0 binary64))","(fma.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) #s(literal 0 binary64))","(fma.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/2 binary64)) #s(literal 0 binary64))","(fma.f64 #s(literal -1 binary64) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 0 binary64))","(fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal -1 binary64)) #s(literal 0 binary64))","(fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1/2 binary64)) #s(literal 0 binary64))","(sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))","(-.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(fabs.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1/4 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))) #s(literal 1/2 binary64)) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 2 binary64)) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1 binary64)) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))) #s(literal 1/4 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(+.f64 #s(literal 0 binary64) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(+.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 0 binary64))","(*.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 2 binary64))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))","(*.f64 (/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 12 binary64)))) (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) (-.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) (pow.f64 b_2 #s(literal 4 binary64))) (pow.f64 b_2 #s(literal 8 binary64))))","(*.f64 (/.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)))","(*.f64 (/.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))) (fma.f64 c a (*.f64 b_2 b_2)))","(*.f64 (/.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))","(*.f64 (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (pow.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64)))","(*.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) (*.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))))","(*.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))","(*.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)))","(*.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (neg.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64))))","(*.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) (fma.f64 c a (*.f64 b_2 b_2)))","(*.f64 #s(literal 1 binary64) (fma.f64 c a (*.f64 b_2 b_2)))","(*.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))))","(*.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (neg.f64 (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64))))","(*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (fma.f64 c a (*.f64 b_2 b_2))))","(*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64))))","(pow.f64 (/.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (neg.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64))) #s(literal -1 binary64))","(pow.f64 (-.f64 (pow.f64 b_2 #s(literal 8 binary64)) (pow.f64 (*.f64 c a) #s(literal 4 binary64))) #s(literal 1/4 binary64))","(pow.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1/4 binary64)) #s(literal 4 binary64))","(pow.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64))","(pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 1 binary64))","(/.f64 (/.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)))","(/.f64 (/.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 8 binary64)) (pow.f64 (*.f64 c a) #s(literal 4 binary64))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64))) (+.f64 (pow.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 8 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64))) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 18 binary64)) (pow.f64 (*.f64 c a) #s(literal 9 binary64))) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64))) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 12 binary64))))","(/.f64 (*.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)))","(/.f64 (*.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (fma.f64 c a (*.f64 b_2 b_2))) (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))","(/.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)))","(/.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64))) (+.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal 2 binary64)) (pow.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal 2 binary64))) (+.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))))","(/.f64 (-.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 c a (*.f64 b_2 b_2)))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal 3 binary64)) (pow.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal 2 binary64)) (*.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 8 binary64)) (pow.f64 (*.f64 c a) #s(literal 4 binary64))) #s(literal 1 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 8 binary64))) (fma.f64 c a (*.f64 b_2 b_2))))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 18 binary64)) (pow.f64 (*.f64 c a) #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 12 binary64))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))))","(/.f64 (pow.f64 (hypot.f64 (pow.f64 (*.f64 c a) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 2 binary64)) (pow.f64 (hypot.f64 (*.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2) (*.f64 c a)) #s(literal 2 binary64)))","(/.f64 (*.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))","(/.f64 (*.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) #s(literal 1 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))","(/.f64 (-.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (pow.f64 (*.f64 c a) #s(literal 2 binary64)))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (*.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 2 binary64)))","(/.f64 (hypot.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (hypot.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) (pow.f64 b_2 #s(literal 4 binary64))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 8 binary64)) (pow.f64 (*.f64 c a) #s(literal 4 binary64))) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3 binary64)))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (+.f64 (pow.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) #s(literal 2 binary64)) (pow.f64 b_2 #s(literal 8 binary64)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 12 binary64)) (pow.f64 (*.f64 c a) #s(literal 6 binary64))) (*.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 18 binary64)) (pow.f64 (*.f64 c a) #s(literal 9 binary64))) (*.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (pow.f64 b_2 #s(literal 12 binary64)))))","(/.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))","(/.f64 #s(literal -1 binary64) (neg.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64))))","(/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (+.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (-.f64 (pow.f64 b_2 #s(literal 4 binary64)) (*.f64 (*.f64 (*.f64 c a) b_2) b_2))))","(/.f64 (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))","(/.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 3/2 binary64)) (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(neg.f64 (fma.f64 c a (*.f64 b_2 b_2)))","(fma.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal 2 binary64))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))))","(fma.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (+.f64 (pow.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 12 binary64)))) (fma.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) (-.f64 (*.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a)) (pow.f64 b_2 #s(literal 4 binary64))) (pow.f64 b_2 #s(literal 8 binary64))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))))","(fma.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (-.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 c a) #s(literal 3 binary64)))) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))))","(fma.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))) (fma.f64 c a (*.f64 b_2 b_2)) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))))","(fma.f64 (*.f64 c #s(literal -1 binary64)) a (*.f64 b_2 b_2))","(fma.f64 (exp.f64 (log.f64 b_2)) (exp.f64 (log.f64 b_2)) (*.f64 (neg.f64 (neg.f64 c)) a))","(fma.f64 (exp.f64 (log.f64 b_2)) (exp.f64 (log.f64 b_2)) (*.f64 #s(literal 1 binary64) (*.f64 c a)))","(fma.f64 (exp.f64 (log.f64 b_2)) (exp.f64 (log.f64 b_2)) (*.f64 (neg.f64 c) (neg.f64 a)))","(fma.f64 (exp.f64 (log.f64 b_2)) (exp.f64 (log.f64 b_2)) (*.f64 (neg.f64 a) (neg.f64 c)))","(fma.f64 (exp.f64 (log.f64 b_2)) (exp.f64 (log.f64 b_2)) (neg.f64 (*.f64 (neg.f64 a) c)))","(fma.f64 (exp.f64 (log.f64 b_2)) (exp.f64 (log.f64 b_2)) (*.f64 (neg.f64 a) c))","(fma.f64 (exp.f64 (log.f64 b_2)) (exp.f64 (log.f64 b_2)) (*.f64 c a))","(fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))","(fma.f64 #s(literal -1 binary64) (*.f64 c a) (*.f64 b_2 b_2))","(fma.f64 #s(literal -1 binary64) (*.f64 b_2 b_2) (*.f64 (neg.f64 (neg.f64 c)) a))","(fma.f64 #s(literal -1 binary64) (*.f64 b_2 b_2) (*.f64 #s(literal 1 binary64) (*.f64 c a)))","(fma.f64 #s(literal -1 binary64) (*.f64 b_2 b_2) (*.f64 (neg.f64 c) (neg.f64 a)))","(fma.f64 #s(literal -1 binary64) (*.f64 b_2 b_2) (*.f64 (neg.f64 a) (neg.f64 c)))","(fma.f64 #s(literal -1 binary64) (*.f64 b_2 b_2) (neg.f64 (*.f64 (neg.f64 a) c)))","(fma.f64 #s(literal -1 binary64) (*.f64 b_2 b_2) (*.f64 (neg.f64 a) c))","(fma.f64 #s(literal -1 binary64) (*.f64 b_2 b_2) (*.f64 c a))","(fma.f64 #s(literal 1 binary64) (*.f64 b_2 b_2) (*.f64 (neg.f64 (neg.f64 c)) a))","(fma.f64 #s(literal 1 binary64) (*.f64 b_2 b_2) (*.f64 #s(literal 1 binary64) (*.f64 c a)))","(fma.f64 #s(literal 1 binary64) (*.f64 b_2 b_2) (*.f64 (neg.f64 c) (neg.f64 a)))","(fma.f64 #s(literal 1 binary64) (*.f64 b_2 b_2) (*.f64 (neg.f64 a) (neg.f64 c)))","(fma.f64 #s(literal 1 binary64) (*.f64 b_2 b_2) (neg.f64 (*.f64 (neg.f64 a) c)))","(fma.f64 #s(literal 1 binary64) (*.f64 b_2 b_2) (*.f64 (neg.f64 a) c))","(fma.f64 #s(literal 1 binary64) (*.f64 b_2 b_2) (*.f64 c a))","(fma.f64 (pow.f64 b_2 #s(literal 4 binary64)) (/.f64 (*.f64 b_2 b_2) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))))","(fma.f64 (pow.f64 b_2 #s(literal 4 binary64)) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))))","(fma.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1 binary64)) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))))","(fma.f64 (pow.f64 b_2 #s(literal 3 binary64)) (/.f64 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(fma.f64 (*.f64 c a) #s(literal -1 binary64) (*.f64 b_2 b_2))","(fma.f64 c (neg.f64 a) (*.f64 b_2 b_2))","(fma.f64 c a (*.f64 b_2 b_2))","(fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))","(fma.f64 a c (*.f64 b_2 b_2))","(fma.f64 (*.f64 b_2 b_2) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))))","(fma.f64 (*.f64 b_2 b_2) (/.f64 (*.f64 b_2 b_2) (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))))","(fma.f64 (*.f64 b_2 b_2) #s(literal -1 binary64) (*.f64 (neg.f64 (neg.f64 c)) a))","(fma.f64 (*.f64 b_2 b_2) #s(literal -1 binary64) (*.f64 #s(literal 1 binary64) (*.f64 c a)))","(fma.f64 (*.f64 b_2 b_2) #s(literal -1 binary64) (*.f64 (neg.f64 c) (neg.f64 a)))","(fma.f64 (*.f64 b_2 b_2) #s(literal -1 binary64) (*.f64 (neg.f64 a) (neg.f64 c)))","(fma.f64 (*.f64 b_2 b_2) #s(literal -1 binary64) (neg.f64 (*.f64 (neg.f64 a) c)))","(fma.f64 (*.f64 b_2 b_2) #s(literal -1 binary64) (*.f64 (neg.f64 a) c))","(fma.f64 (*.f64 b_2 b_2) #s(literal -1 binary64) (*.f64 c a))","(fma.f64 (*.f64 b_2 b_2) #s(literal 1 binary64) (*.f64 (neg.f64 (neg.f64 c)) a))","(fma.f64 (*.f64 b_2 b_2) #s(literal 1 binary64) (*.f64 #s(literal 1 binary64) (*.f64 c a)))","(fma.f64 (*.f64 b_2 b_2) #s(literal 1 binary64) (*.f64 (neg.f64 c) (neg.f64 a)))","(fma.f64 (*.f64 b_2 b_2) #s(literal 1 binary64) (*.f64 (neg.f64 a) (neg.f64 c)))","(fma.f64 (*.f64 b_2 b_2) #s(literal 1 binary64) (neg.f64 (*.f64 (neg.f64 a) c)))","(fma.f64 (*.f64 b_2 b_2) #s(literal 1 binary64) (*.f64 (neg.f64 a) c))","(fma.f64 (*.f64 b_2 b_2) #s(literal 1 binary64) (*.f64 c a))","(fma.f64 b_2 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))))","(fma.f64 b_2 b_2 (*.f64 (neg.f64 (neg.f64 c)) a))","(fma.f64 b_2 b_2 (*.f64 #s(literal 1 binary64) (*.f64 c a)))","(fma.f64 b_2 b_2 (*.f64 (neg.f64 c) (neg.f64 a)))","(fma.f64 b_2 b_2 (*.f64 (neg.f64 a) (neg.f64 c)))","(fma.f64 b_2 b_2 (neg.f64 (*.f64 (neg.f64 a) c)))","(fma.f64 b_2 b_2 (*.f64 (neg.f64 a) c))","(fma.f64 b_2 b_2 (*.f64 c a))","(sqrt.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64)))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2))))","(-.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))))","(-.f64 #s(literal 0 binary64) (fma.f64 c a (*.f64 b_2 b_2)))","(-.f64 (*.f64 (neg.f64 a) c) (*.f64 b_2 b_2))","(-.f64 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 a) c))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(fabs.f64 (fma.f64 c a (*.f64 b_2 b_2)))","(hypot.f64 (pow.f64 (*.f64 c a) #s(literal 1 binary64)) (*.f64 b_2 b_2))","(hypot.f64 (*.f64 (neg.f64 a) c) (*.f64 b_2 b_2))","(hypot.f64 (*.f64 c a) (*.f64 b_2 b_2))","(hypot.f64 (*.f64 b_2 b_2) (pow.f64 (*.f64 c a) #s(literal 1 binary64)))","(hypot.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 a) c))","(hypot.f64 (*.f64 b_2 b_2) (*.f64 c a))","(exp.f64 (*.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))) #s(literal 1/2 binary64)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 2 binary64)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1 binary64)) #s(literal 1 binary64)))","(exp.f64 (*.f64 (neg.f64 (log.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (fma.f64 c a (*.f64 b_2 b_2))) #s(literal 1 binary64)))","(exp.f64 (log.f64 (fma.f64 c a (*.f64 b_2 b_2))))","(+.f64 (-.f64 (*.f64 b_2 b_2) #s(literal 0 binary64)) (*.f64 c a))","(+.f64 (neg.f64 (*.f64 (neg.f64 a) c)) (*.f64 b_2 b_2))","(+.f64 (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (fma.f64 c a (*.f64 b_2 b_2))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 2 binary64)) (fma.f64 c a (*.f64 b_2 b_2)))))","(+.f64 (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64)))) (neg.f64 (/.f64 (pow.f64 (*.f64 c a) #s(literal 3 binary64)) (fma.f64 (fma.f64 c a (*.f64 b_2 b_2)) (*.f64 c a) (pow.f64 b_2 #s(literal 4 binary64))))))","(+.f64 (*.f64 (neg.f64 a) c) (*.f64 b_2 b_2))","(+.f64 (*.f64 c a) (*.f64 b_2 b_2))","(+.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 (neg.f64 c)) a))","(+.f64 (*.f64 b_2 b_2) (*.f64 #s(literal 1 binary64) (*.f64 c a)))","(+.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 c) (neg.f64 a)))","(+.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 a) (neg.f64 c)))","(+.f64 (*.f64 b_2 b_2) (neg.f64 (*.f64 (neg.f64 a) c)))","(+.f64 (*.f64 b_2 b_2) (*.f64 (neg.f64 a) c))","(+.f64 (*.f64 b_2 b_2) (*.f64 c a))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":215.56689453125,"type":"rewrite"},{"compiler":[[15289,2194]],"memory":[[5797712,44438272]],"time":73.52294921875,"type":"eval"},{"alts":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64))))) a)","fresh",45.38974994417073,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","done",26.038966591759444,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))) a)","next",34.68842044464588,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","fresh",38.860972444426615,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","fresh",44.14285504496095,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2))) a)","next",55.865902732609655,"binary64"],["(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","next",45.97452960547499,"binary64"],["(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a)","next",42.53498675472983,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2))","fresh",43.20354069000524,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","fresh",41.79988412130958,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","next",42.299528834231644,"binary64"]],"compiler":[[16,12],[13,10],[27,18],[18,13],[17,12],[22,15],[21,15],[17,13],[30,20],[19,14],[19,14],[16,12],[27,18],[18,13],[17,12],[22,15],[21,15],[17,13],[30,20],[19,14],[19,14]],"count":[[544,11]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[543,10],"picked":[1,1]}],"memory":[[-2451696,24452288]],"min-error":[[3.6776330620847673,"binary64"]],"time":24.150146484375,"type":"prune"},{"egraph":[[0,8147,312,0.043031231],[7,7706,312,0.012835181],[6,4505,312,0.032551896],[5,2821,312,0.019325399],[4,1100,312,0.016299185],[3,380,346,0.006355318],[2,176,346,0.001554345],[1,103,346,0.001055185],[0,65,355,0.000636635],[0,41,355,0.000507081]],"inputs":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))) a)","(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))))","(neg.f64 b_2)","b_2","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2)","(-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2))","#s(literal 1 binary64)","(/.f64 (/.f64 (*.f64 c a) b_2) b_2)","(/.f64 (*.f64 c a) b_2)","(*.f64 c a)","c","a","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","(*.f64 #s(literal -2 binary64) (/.f64 b_2 a))","#s(literal -2 binary64)","(/.f64 b_2 a)","b_2","a","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a)","#s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2))","(*.f64 #s(literal -2 binary64) b_2)","#s(literal -2 binary64)","b_2","a","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","#s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c))","(*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)","(*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))","(/.f64 a b_2)","a","b_2","#s(literal -1/2 binary64)","c","(/.f64 (+.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2))) a)","(+.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)))","(neg.f64 b_2)","b_2","#s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2))","(fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)","(*.f64 #s(literal -1/2 binary64) a)","#s(literal -1/2 binary64)","a","(/.f64 c b_2)","c"]],"locations":[["#s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2))","cost-diff",0],["(neg.f64 b_2)","cost-diff",0],["(/.f64 (+.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2))) a)","cost-diff",0],["(+.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)))","cost-diff",1],["(*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))","cost-diff",0],["(*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)","cost-diff",0],["#s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c))","cost-diff",0],["(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","cost-diff",0],["(*.f64 #s(literal -2 binary64) b_2)","cost-diff",0],["#s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2))","cost-diff",0],["(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a)","cost-diff",0],["(/.f64 b_2 a)","cost-diff",0],["(*.f64 #s(literal -2 binary64) (/.f64 b_2 a))","cost-diff",0],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","cost-diff",0],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))) a)","cost-diff",0],["(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))))","cost-diff",1],["(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)","cost-diff",2],["(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2)","cost-diff",4]],"memory":[[-4198896,19727840]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))) a)","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) b_2) a)","(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))))","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) b_2)","(neg.f64 b_2)","b_2","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))","#s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)","(fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2)","(-.f64 b_2 (/.f64 (*.f64 c a) b_2))","(-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2))","#s(literal 1 binary64)","(/.f64 (/.f64 (*.f64 c a) b_2) b_2)","(/.f64 (*.f64 c a) b_2)","(*.f64 c a)","c","a","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(*.f64 #s(literal -2 binary64) (/.f64 b_2 a))","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","#s(literal -2 binary64)","(/.f64 b_2 a)","b_2","a","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a)","#s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2))","(*.f64 #s(literal -2 binary64) b_2)","#s(literal -2 binary64)","b_2","a","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c)) a)","#s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c))","#s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c))","(*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)","(*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c)","(*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))","(*.f64 #s(literal -1/2 binary64) (/.f64 a b_2))","(/.f64 a b_2)","a","b_2","#s(literal -1/2 binary64)","c","(/.f64 (+.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2))) a)","(/.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2) a)","(+.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)))","(-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2)","(neg.f64 b_2)","b_2","#s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2))","#s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2))","(fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)","(fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)","(*.f64 #s(literal -1/2 binary64) a)","#s(literal -1/2 binary64)","a","(/.f64 c b_2)","c"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":200.77490234375,"type":"simplify"},{"compiler":[[245,31]],"locations":[["(fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)","accuracy",2.375374649262505],["(/.f64 (+.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2))) a)","accuracy",3.8930608616335354],["(+.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)))","accuracy",11.996429556286323],["#s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2))","accuracy",42.083416146073056],["(*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))","accuracy",0.00390625],["(*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)","accuracy",3.339231116162351],["(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","accuracy",3.8930608616335354],["#s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c))","accuracy",41.732047153022776],["(*.f64 #s(literal -2 binary64) b_2)","accuracy",0.0],["(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a)","accuracy",3.8930608616335354],["#s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2))","accuracy",42.38383319816969],["(/.f64 b_2 a)","accuracy",0.0],["(*.f64 #s(literal -2 binary64) (/.f64 b_2 a))","accuracy",0.0078125],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","accuracy",42.299528834231644],["(/.f64 (*.f64 c a) b_2)","accuracy",4.320667673012375],["(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2)","accuracy",5.19417137125897],["(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))))","accuracy",11.996429556286323],["(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))","accuracy",21.41609059268961]],"memory":[[417584,36716128]],"mixsample":[[0.203125,"ival-sub",1200],[13.7236328125,"ival-div",0],[3.738037109375,"adjust",800],[0.010986328125,"ival-sub",4800],[0.091796875,"ival-mult",1200],[0.093505859375,"ival-sub",1600],[0.122802734375,"ival-assert",0],[0.3701171875,"ival-sqrt",1200],[2.7392578125,"ival-sub",0],[0.012939453125,"ival-sqrt",4800],[0.14208984375,"ival-sub",400],[2.39697265625,"ival-sqrt",0],[0.017578125,"ival-sub",4400],[3.53515625,"ival-add",0],[0.254638671875,"ival-mult",800],[0.010986328125,"ival-sqrt",2800],[0.160888671875,"ival-sub",800],[0.042236328125,"ival-mult",1600],[0.212158203125,"adjust",2800],[0.7080078125,"ival-sub",4000],[0.23779296875,"ival-sqrt",400],[0.2275390625,"ival-sqrt",2000],[0.394775390625,"ival-sqrt",800],[0.139404296875,"ival-sub",2000],[0.030029296875,"ival-sqrt",4000],[0.053955078125,"ival-sqrt",4400],[1.937255859375,"adjust",2000],[0.176513671875,"ival-sub",2400],[20.276123046875,"ival-mult",0],[0.177001953125,"ival-sqrt",1600],[0.161376953125,"ival-mult",400],[0.007080078125,"ival-div",800],[0.27197265625,"ival-true",0],[0.2236328125,"ival-sqrt",2400],[0.005126953125,"ival-sub",2800],[0.010009765625,"ival-add",800],[0.52978515625,"exact",0],[1.651611328125,"ival-neg",0]],"outcomes":[[12.856201171875,1,"valid",32],[24.54052734375,2,"valid",44],[41.58349609375,3,"valid",7],[48.235595703125,0,"valid",173]],"time":156.01708984375,"type":"localize"},{"count":[[21,115]],"inputs":[["(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2)","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)","(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))) a)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","(*.f64 #s(literal -2 binary64) (/.f64 b_2 a))","(/.f64 b_2 a)","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a)","#s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2))","(*.f64 #s(literal -2 binary64) b_2)","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","#s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c))","(*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)","(*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))","(+.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)))","(/.f64 (+.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2))) a)","(neg.f64 b_2)","#s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2))","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))","(/.f64 (*.f64 c a) b_2)","(fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)"]],"memory":[[-797904,14204512]],"outputs":[["b_2","(+ b_2 (* -1 (/ (* a c) b_2)))","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(* -1/2 (/ (* a c) b_2))","(* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5)))))))))","(* -1/2 (/ c b_2))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))))))","(* -2 (/ b_2 a))","(/ b_2 a)","(* -1/2 (/ a b_2))","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(/ (* a c) b_2)","(* -1 (/ (* a c) b_2))","(* a (+ (* -1 (/ c b_2)) (/ b_2 a)))","(* -1 (* a c))","(* a (+ (* -1 c) (/ (pow b_2 2) a)))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* a (+ (* -1/2 (/ c b_2)) (/ b_2 a)))","(* -1 (* a (+ (* -1 (/ b_2 a)) (/ c b_2))))","(* -1 (* a (+ c (* -1 (/ (pow b_2 2) a)))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1 (/ b_2 a)) (* 1/2 (/ c b_2)))))","(/ (+ (* -1 (* a c)) (pow b_2 2)) b_2)","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(* -2 b_2)","(* -1 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(/ (+ (* -1/2 (* a c)) (pow b_2 2)) b_2)","(* b_2 (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(/ (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2)","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* -1 (* b_2 (- (/ (* a c) (pow b_2 2)) 1)))","(* -1 (* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a)))))))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 (* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 1)))","(* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3)))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5)))))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow a 3) (pow b_2 5)))))))))","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))) (* -1/16 (/ (pow a 2) (pow b_2 5))))))) (* 1/2 (/ 1 b_2))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(* c (+ (* -1 (/ a b_2)) (/ b_2 c)))","(* c (+ (* -1 a) (/ (pow b_2 2) c)))","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (+ (* -1/2 (/ a b_2)) (/ b_2 c)))","(* -1 (* c (+ (* -1 (/ b_2 c)) (/ a b_2))))","(* -1 (* c (+ a (* -1 (/ (pow b_2 2) c)))))","(* -1 (* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1 (/ b_2 c)) (* 1/2 (/ a b_2)))))"]],"series":[[3.83203125,"((* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (* (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) b_2) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -2 (/ b_2 a)) (/ b_2 a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* -2 b_2) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (* (/ a b_2) -1/2) c) (* (/ a b_2) -1/2) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (sqrt (- (* b_2 b_2) (* a c))) (/ (* c a) b_2) (+ (* (* -1/2 a) (/ c b_2)) b_2))","c","-inf"],[2.00390625,"((* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (* (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) b_2) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -2 (/ b_2 a)) (/ b_2 a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* -2 b_2) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (* (/ a b_2) -1/2) c) (* (/ a b_2) -1/2) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (sqrt (- (* b_2 b_2) (* a c))) (/ (* c a) b_2) (+ (* (* -1/2 a) (/ c b_2)) b_2))","c","inf"],[2.059814453125,"((* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (* (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) b_2) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -2 (/ b_2 a)) (/ b_2 a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* -2 b_2) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (* (/ a b_2) -1/2) c) (* (/ a b_2) -1/2) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (sqrt (- (* b_2 b_2) (* a c))) (/ (* c a) b_2) (+ (* (* -1/2 a) (/ c b_2)) b_2))","c","0"],[3.640869140625,"((* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (* (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) b_2) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -2 (/ b_2 a)) (/ b_2 a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* -2 b_2) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (* (/ a b_2) -1/2) c) (* (/ a b_2) -1/2) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (sqrt (- (* b_2 b_2) (* a c))) (/ (* c a) b_2) (+ (* (* -1/2 a) (/ c b_2)) b_2))","b_2","-inf"],[3.737060546875,"((* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (* (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) b_2) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -2 (/ b_2 a)) (/ b_2 a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* -2 b_2) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (* (/ a b_2) -1/2) c) (* (/ a b_2) -1/2) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (sqrt (- (* b_2 b_2) (* a c))) (/ (* c a) b_2) (+ (* (* -1/2 a) (/ c b_2)) b_2))","b_2","inf"],[5.56591796875,"((* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (* (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) b_2) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -2 (/ b_2 a)) (/ b_2 a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* -2 b_2) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (* (/ a b_2) -1/2) c) (* (/ a b_2) -1/2) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (sqrt (- (* b_2 b_2) (* a c))) (/ (* c a) b_2) (+ (* (* -1/2 a) (/ c b_2)) b_2))","b_2","0"],[7.448974609375,"((* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (* (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) b_2) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -2 (/ b_2 a)) (/ b_2 a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* -2 b_2) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (* (/ a b_2) -1/2) c) (* (/ a b_2) -1/2) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (sqrt (- (* b_2 b_2) (* a c))) (/ (* c a) b_2) (+ (* (* -1/2 a) (/ c b_2)) b_2))","a","-inf"],[2.7900390625,"((* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (* (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) b_2) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -2 (/ b_2 a)) (/ b_2 a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* -2 b_2) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (* (/ a b_2) -1/2) c) (* (/ a b_2) -1/2) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (sqrt (- (* b_2 b_2) (* a c))) (/ (* c a) b_2) (+ (* (* -1/2 a) (/ c b_2)) b_2))","a","inf"],[3.43896484375,"((* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (* (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) b_2) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* -2 (/ b_2 a)) (/ b_2 a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* -2 b_2) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (* (/ a b_2) -1/2) c) (* (/ a b_2) -1/2) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (sqrt (- (* b_2 b_2) (* a c))) (/ (* c a) b_2) (+ (* (* -1/2 a) (/ c b_2)) b_2))","a","0"]],"time":37.474853515625,"type":"series"},{"count":[[115,114]],"egraph":[[0,8083,2789,0.101995782],[2,5981,2928,0.026998849],[1,1742,2955,0.019626609],[0,544,3004,0.004961717]],"inputs":[["b_2","(+ b_2 (* -1 (/ (* a c) b_2)))","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(* -1/2 (/ (* a c) b_2))","(* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5)))))))))","(* -1/2 (/ c b_2))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))))))","(* -2 (/ b_2 a))","(/ b_2 a)","(* -1/2 (/ a b_2))","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(/ (* a c) b_2)","(* -1 (/ (* a c) b_2))","(* a (+ (* -1 (/ c b_2)) (/ b_2 a)))","(* -1 (* a c))","(* a (+ (* -1 c) (/ (pow b_2 2) a)))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* a (+ (* -1/2 (/ c b_2)) (/ b_2 a)))","(* -1 (* a (+ (* -1 (/ b_2 a)) (/ c b_2))))","(* -1 (* a (+ c (* -1 (/ (pow b_2 2) a)))))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* -1 (/ b_2 a)) (* 1/2 (/ c b_2)))))","(/ (+ (* -1 (* a c)) (pow b_2 2)) b_2)","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(* -2 b_2)","(* -1 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(/ (+ (* -1/2 (* a c)) (pow b_2 2)) b_2)","(* b_2 (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(/ (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2)","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* -1 (* b_2 (- (/ (* a c) (pow b_2 2)) 1)))","(* -1 (* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a)))))))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 (* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 1)))","(* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3)))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5)))))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow a 3) (pow b_2 5)))))))))","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))) (* -1/16 (/ (pow a 2) (pow b_2 5))))))) (* 1/2 (/ 1 b_2))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(* c (+ (* -1 (/ a b_2)) (/ b_2 c)))","(* c (+ (* -1 a) (/ (pow b_2 2) c)))","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (+ (* -1/2 (/ a b_2)) (/ b_2 c)))","(* -1 (* c (+ (* -1 (/ b_2 c)) (/ a b_2))))","(* -1 (* c (+ a (* -1 (/ (pow b_2 2) c)))))","(* -1 (* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ (* -1 (/ b_2 c)) (* 1/2 (/ a b_2)))))"]],"memory":[[1057024,49918080]],"method":["egg-herbie"],"outputs":[["b_2","(+ b_2 (* -1 (/ (* a c) b_2)))","(-.f64 b_2 (/.f64 (*.f64 a c) b_2))","(pow b_2 2)","(*.f64 b_2 b_2)","(+ (* -1 (* a c)) (pow b_2 2))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(* -1/2 (/ (* a c) b_2))","(*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)","(* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a)","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 a #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a)","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5)))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 #s(literal 5/64 binary64) b_2)) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 5 binary64)))) a (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a)","(* -1/2 (/ c b_2))","(*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(fma.f64 (*.f64 #s(literal -1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))","(fma.f64 (fma.f64 (*.f64 a #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 #s(literal 5/64 binary64) b_2)) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 5 binary64)))) a (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(* -2 (/ b_2 a))","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(/ b_2 a)","(/.f64 b_2 a)","(* -1/2 (/ a b_2))","(*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 a #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a b_2)","(/ (* a c) b_2)","(/.f64 (*.f64 a c) b_2)","(* -1 (/ (* a c) b_2))","(*.f64 (neg.f64 a) (/.f64 c b_2))","(* a (+ (* -1 (/ c b_2)) (/ b_2 a)))","(*.f64 (-.f64 (/.f64 b_2 a) (/.f64 c b_2)) a)","(* -1 (* a c))","(*.f64 (neg.f64 a) c)","(* a (+ (* -1 c) (/ (pow b_2 2) a)))","(*.f64 (fma.f64 b_2 (/.f64 b_2 a) (neg.f64 c)) a)","(* (sqrt (* a c)) (sqrt -1))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 a c)))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a)) a)","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(*.f64 (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a))) a)","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(*.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/8 binary64) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a)))) a)","(* (sqrt (/ c a)) (sqrt -1))","(*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a)))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(fma.f64 (/.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/8 binary64) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/8 binary64) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/8 binary64) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))) a)","(* a (+ (* -1/2 (/ c b_2)) (/ b_2 a)))","(*.f64 (fma.f64 (/.f64 c b_2) #s(literal -1/2 binary64) (/.f64 b_2 a)) a)","(* -1 (* a (+ (* -1 (/ b_2 a)) (/ c b_2))))","(*.f64 (-.f64 (/.f64 b_2 a) (/.f64 c b_2)) a)","(* -1 (* a (+ c (* -1 (/ (pow b_2 2) a)))))","(*.f64 (fma.f64 b_2 (/.f64 b_2 a) (neg.f64 c)) a)","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 a c)))","(* -1 (* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 a)))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (-.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (neg.f64 b_2)) a)))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)))) a) b_2) a)))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(neg.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(neg.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) b_2) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(neg.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 b_2 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)))) a)) a)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))))","(* -1 (* a (+ (* -1 (/ b_2 a)) (* 1/2 (/ c b_2)))))","(*.f64 (neg.f64 a) (fma.f64 #s(literal 1/2 binary64) (/.f64 c b_2) (/.f64 (neg.f64 b_2) a)))","(/ (+ (* -1 (* a c)) (pow b_2 2)) b_2)","(/.f64 (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)) b_2)","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 a c)) (neg.f64 b_2))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) #s(literal -1 binary64)) b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 a c))))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) b_2 #s(literal -1 binary64)) b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 a c))))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -1 binary64) a)) b_2 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) b_2 (/.f64 #s(literal -1 binary64) a)) b_2 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(* -2 b_2)","(*.f64 #s(literal -2 binary64) b_2)","(* -1 b_2)","(neg.f64 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 a c))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(fma.f64 (*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) b_2) b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 a c))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 b_2 (/.f64 b_2 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/8 binary64))) (*.f64 b_2 b_2) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 a c))))","(/ (+ (* -1/2 (* a c)) (pow b_2 2)) b_2)","(/.f64 (fma.f64 #s(literal -1/2 binary64) (*.f64 a c) (*.f64 b_2 b_2)) b_2)","(* b_2 (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(*.f64 (fma.f64 (neg.f64 a) (/.f64 (/.f64 c b_2) b_2) #s(literal 1 binary64)) b_2)","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(*.f64 (fma.f64 (neg.f64 a) (/.f64 (/.f64 c b_2) b_2) #s(literal 1 binary64)) (*.f64 b_2 b_2))","(/ (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2)))) b_2)","(/.f64 (fma.f64 (*.f64 (/.f64 (*.f64 c c) b_2) #s(literal -1/8 binary64)) (/.f64 (*.f64 a a) b_2) (*.f64 #s(literal -1/2 binary64) (*.f64 a c))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))))) b_2)","(/.f64 (fma.f64 (*.f64 (/.f64 (*.f64 c c) b_2) #s(literal -1/8 binary64)) (/.f64 (*.f64 a a) b_2) (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 #s(literal -1/2 binary64) (*.f64 a c)))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2)","(/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 a c (*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (/.f64 #s(literal 5/64 binary64) (pow.f64 b_2 #s(literal 6 binary64))))) (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (*.f64 (/.f64 (*.f64 c c) b_2) #s(literal -1/8 binary64)) (/.f64 (*.f64 a a) b_2)))) b_2)","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(/.f64 (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/8 binary64)) (/.f64 (*.f64 c c) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2)","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2)","(/.f64 (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/8 binary64)) (/.f64 (*.f64 c c) b_2) (fma.f64 (*.f64 (*.f64 a a) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 #s(literal -1/2 binary64) c))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2)","(/.f64 (fma.f64 #s(literal -1/2 binary64) (+.f64 c (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) a) (/.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) #s(literal 5/64 binary64)) (pow.f64 b_2 #s(literal 6 binary64))))) (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/8 binary64)) (/.f64 (*.f64 c c) b_2) (/.f64 (*.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(*.f64 (fma.f64 (/.f64 (/.f64 (*.f64 a c) b_2) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64)) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (/.f64 (*.f64 a c) b_2) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64))) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 (/.f64 c b_2) b_2) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) a) a) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) b_2 b_2)","(* -1 (* b_2 (- (/ (* a c) (pow b_2 2)) 1)))","(*.f64 (fma.f64 (neg.f64 a) (/.f64 (/.f64 c b_2) b_2) #s(literal 1 binary64)) b_2)","(* -1 (* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 (*.f64 a c) b_2) b_2) #s(literal -1/2 binary64) #s(literal 2 binary64)))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (/.f64 (*.f64 a c) b_2) b_2) #s(literal -1/2 binary64) #s(literal 2 binary64))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(*.f64 (neg.f64 b_2) (+.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (/.f64 (*.f64 a c) b_2) b_2) #s(literal -1/2 binary64) #s(literal 2 binary64))) (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a)))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 c b_2) (fma.f64 (*.f64 (*.f64 c c) (/.f64 a (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal -1/8 binary64) (/.f64 #s(literal 2 binary64) a))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 c b_2) (fma.f64 (*.f64 #s(literal -1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 4 binary64)))) (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1/16 binary64) (/.f64 #s(literal 2 binary64) a)))))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 (*.f64 a c) b_2) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64)))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (/.f64 (*.f64 a c) b_2) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(neg.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 (/.f64 c b_2) b_2) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) a) a) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) b_2 b_2))","(* -1 (* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 1)))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 (*.f64 a c) b_2) b_2) #s(literal 1/2 binary64) #s(literal -1 binary64)))","(* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3)))))","(*.f64 (fma.f64 (*.f64 c #s(literal -1/8 binary64)) (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c)","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 a a) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c)","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow a 3) (pow b_2 5)))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal -1/16 binary64) (*.f64 (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 5/64 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 c b_2)) #s(literal -1/2 binary64))) c (/.f64 (*.f64 (*.f64 a a) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c)","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (*.f64 c #s(literal -1/8 binary64)) (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 #s(literal -1/2 binary64) b_2)) c)","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (fma.f64 (*.f64 c #s(literal -1/16 binary64)) (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 5 binary64)))) (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64))) c (/.f64 #s(literal -1/2 binary64) b_2)) c)","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))) (* -1/16 (/ (pow a 2) (pow b_2 5))))))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 5/64 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 c b_2)) (/.f64 (*.f64 (*.f64 a a) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 5 binary64)))) c (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64))) c (/.f64 #s(literal -1/2 binary64) b_2)) c)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(fma.f64 (fma.f64 (*.f64 c #s(literal -1/8 binary64)) (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c b_2)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 a a) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c b_2)","(* c (+ (* -1 (/ a b_2)) (/ b_2 c)))","(*.f64 (-.f64 (/.f64 b_2 c) (/.f64 a b_2)) c)","(* c (+ (* -1 a) (/ (pow b_2 2) c)))","(*.f64 (fma.f64 b_2 (/.f64 b_2 c) (neg.f64 a)) c)","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 (neg.f64 c))) c)","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 (neg.f64 c)))) c)","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(*.f64 (fma.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b_2 #s(literal 4 binary64))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 (neg.f64 c))))) c)","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 (neg.f64 c)) a)) c)","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 (neg.f64 c)) a))) c)","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b_2 #s(literal 4 binary64))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 (neg.f64 c)) a)))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b_2 #s(literal 4 binary64))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b_2 #s(literal 4 binary64))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/8 binary64) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))) c)","(* c (+ (* -1/2 (/ a b_2)) (/ b_2 c)))","(*.f64 (fma.f64 (/.f64 a b_2) #s(literal -1/2 binary64) (/.f64 b_2 c)) c)","(* -1 (* c (+ (* -1 (/ b_2 c)) (/ a b_2))))","(*.f64 (-.f64 (/.f64 b_2 c) (/.f64 a b_2)) c)","(* -1 (* c (+ a (* -1 (/ (pow b_2 2) c)))))","(*.f64 (fma.f64 b_2 (/.f64 b_2 c) (neg.f64 a)) c)","(* -1 (* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (neg.f64 b_2)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)))) c) b_2) c)) (neg.f64 c))","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 c) a)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (/.f64 (neg.f64 b_2) a)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 a c))) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)))) c) (/.f64 b_2 a)) c)) (neg.f64 c))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ b_2 c)) (* 1/2 (/ a b_2)))))","(*.f64 (fma.f64 #s(literal 1/2 binary64) (/.f64 a b_2) (/.f64 b_2 (neg.f64 c))) (neg.f64 c))"]],"stop":[["iter limit",1],["node limit",1]],"time":305.080078125,"type":"simplify"},{"count":[[21,401]],"egraph":[[0,8136,277,0.070304293],[2,1562,277,0.030185076],[1,228,277,0.005469672],[0,65,286,0.001832637],[0,41,286,0.000399524]],"inputs":[["(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2)","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)","(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))) a)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","(*.f64 #s(literal -2 binary64) (/.f64 b_2 a))","(/.f64 b_2 a)","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a)","#s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2))","(*.f64 #s(literal -2 binary64) b_2)","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","#s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c))","(*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)","(*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))","(+.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)))","(/.f64 (+.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2))) a)","(neg.f64 b_2)","#s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2))","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))","(/.f64 (*.f64 c a) b_2)","(fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)"]],"memory":[[9351888,55013472]],"outputs":[["(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))) b_2)","(*.f64 b_2 (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (/.f64 (/.f64 b_2 c) a) b_2) #s(literal -2 binary64))) b_2)) (neg.f64 (fma.f64 (/.f64 c b_2) (/.f64 a b_2) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (/.f64 (/.f64 b_2 c) a) b_2) #s(literal -3 binary64))) b_2)) (neg.f64 (fma.f64 (*.f64 (/.f64 c b_2) (/.f64 a b_2)) (fma.f64 (/.f64 c b_2) (/.f64 a b_2) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 b_2 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (/.f64 (/.f64 b_2 c) a) b_2) #s(literal -2 binary64))))) (neg.f64 (fma.f64 (/.f64 c b_2) (/.f64 a b_2) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 b_2 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (/.f64 (/.f64 b_2 c) a) b_2) #s(literal -3 binary64))))) (neg.f64 (fma.f64 (*.f64 (/.f64 c b_2) (/.f64 a b_2)) (fma.f64 (/.f64 c b_2) (/.f64 a b_2) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (/.f64 (/.f64 b_2 c) a) b_2) #s(literal -2 binary64))) b_2) (fma.f64 (/.f64 c b_2) (/.f64 a b_2) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (/.f64 (/.f64 b_2 c) a) b_2) #s(literal -3 binary64))) b_2) (fma.f64 (*.f64 (/.f64 c b_2) (/.f64 a b_2)) (fma.f64 (/.f64 c b_2) (/.f64 a b_2) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 b_2 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (/.f64 (/.f64 b_2 c) a) b_2) #s(literal -2 binary64)))) (fma.f64 (/.f64 c b_2) (/.f64 a b_2) #s(literal 1 binary64)))","(/.f64 (*.f64 b_2 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (/.f64 (/.f64 b_2 c) a) b_2) #s(literal -3 binary64)))) (fma.f64 (*.f64 (/.f64 c b_2) (/.f64 a b_2)) (fma.f64 (/.f64 c b_2) (/.f64 a b_2) #s(literal 1 binary64)) #s(literal 1 binary64)))","(fma.f64 b_2 #s(literal 1 binary64) (*.f64 b_2 (/.f64 (*.f64 (neg.f64 c) a) (*.f64 b_2 b_2))))","(fma.f64 #s(literal 1 binary64) b_2 (*.f64 (/.f64 (*.f64 (neg.f64 c) a) (*.f64 b_2 b_2)) b_2))","(+.f64 (*.f64 #s(literal 1 binary64) b_2) (*.f64 (/.f64 (*.f64 (neg.f64 c) a) (*.f64 b_2 b_2)) b_2))","(+.f64 (*.f64 b_2 #s(literal 1 binary64)) (*.f64 b_2 (/.f64 (*.f64 (neg.f64 c) a) (*.f64 b_2 b_2))))","(*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))) b_2) b_2)","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))) (*.f64 b_2 b_2))","(*.f64 b_2 (*.f64 (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))) b_2))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (/.f64 (/.f64 b_2 c) a) b_2) #s(literal -2 binary64))) (*.f64 b_2 b_2))) (neg.f64 (fma.f64 (/.f64 c b_2) (/.f64 a b_2) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (/.f64 (/.f64 b_2 c) a) b_2) #s(literal -3 binary64))) (*.f64 b_2 b_2))) (neg.f64 (fma.f64 (*.f64 (/.f64 c b_2) (/.f64 a b_2)) (fma.f64 (/.f64 c b_2) (/.f64 a b_2) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (/.f64 (/.f64 b_2 c) a) b_2) #s(literal -2 binary64))) (*.f64 b_2 b_2)) (fma.f64 (/.f64 c b_2) (/.f64 a b_2) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (/.f64 (/.f64 b_2 c) a) b_2) #s(literal -3 binary64))) (*.f64 b_2 b_2)) (fma.f64 (*.f64 (/.f64 c b_2) (/.f64 a b_2)) (fma.f64 (/.f64 c b_2) (/.f64 a b_2) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) (pow.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) #s(literal 3/2 binary64))) (pow.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))) (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))))) (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) (*.f64 b_2 b_2))) (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) (neg.f64 b_2))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))))) (neg.f64 (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))))))))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))))))","(/.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) (neg.f64 b_2)))","(/.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))) (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) #s(literal 3/2 binary64)))) (neg.f64 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) (-.f64 (*.f64 b_2 b_2) (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) (neg.f64 b_2))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))))))))","(/.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))) (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))))) (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) #s(literal 3/2 binary64))))))","(/.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) #s(literal 3/2 binary64))) (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) (-.f64 (*.f64 b_2 b_2) (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) (neg.f64 b_2)))))","(/.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) #s(literal 3/2 binary64))) (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))) (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))))) (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) #s(literal 3/2 binary64)))))","(fma.f64 (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))) (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))) (neg.f64 b_2))","(fma.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) #s(literal 1/4 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) #s(literal 1/4 binary64)) (neg.f64 b_2))","(fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))))","(fma.f64 b_2 #s(literal -1 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))))","(-.f64 (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) (neg.f64 b_2))) (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) (neg.f64 b_2))))","(-.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) #s(literal 0 binary64)) b_2)","(-.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))))) (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))))))","(-.f64 #s(literal 0 binary64) (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))))","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2)","(+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) (neg.f64 b_2))","(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))))","(*.f64 (pow.f64 (/.f64 a (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))) #s(literal -1 binary64)) (pow.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 a (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) #s(literal 3/2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))))) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2))","(*.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2)) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2) (pow.f64 a #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2) a))","(pow.f64 (/.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) (pow.f64 a #s(literal -1 binary64)))) (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) #s(literal 3/2 binary64))) (pow.f64 a #s(literal -1 binary64)))) (neg.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2) #s(literal 1 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2)))) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))) a)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) #s(literal 3/2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))))) a)))","(/.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) (pow.f64 a #s(literal -1 binary64))) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))))","(/.f64 (*.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) #s(literal 3/2 binary64))) (pow.f64 a #s(literal -1 binary64))) (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2) #s(literal 1 binary64)) a)","(/.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))) (neg.f64 (*.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) #s(literal 3/2 binary64)))) (neg.f64 (*.f64 a (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))))))))","(/.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) #s(literal 1 binary64)) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))) a))","(/.f64 (*.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) #s(literal 3/2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))))) a))","(/.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) (*.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2))))","(/.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) #s(literal 3/2 binary64))) (*.f64 a (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))))))))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2)) (neg.f64 a))","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2) a)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2)))","(neg.f64 (/.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2)) a))","(neg.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2) (neg.f64 a)))","(-.f64 (/.f64 (*.f64 b_2 b_2) (*.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))))) (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) (*.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))))))","(-.f64 (/.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) #s(literal 0 binary64)) a) (/.f64 b_2 a))","(-.f64 (/.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))))) a) (/.f64 (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))))) a))","(-.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) a) (/.f64 b_2 a))","(-.f64 (/.f64 #s(literal 0 binary64) a) (/.f64 (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))) a))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 a)) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2) (neg.f64 a)))","(exp.f64 (*.f64 (log.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2))) #s(literal -1 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 b_2 a) #s(literal -2 binary64)))","(*.f64 (*.f64 #s(literal -2 binary64) b_2) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(*.f64 #s(literal -2 binary64) (/.f64 b_2 a))","(*.f64 b_2 (/.f64 #s(literal -2 binary64) a))","(*.f64 b_2 (*.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal -2 binary64)))","(pow.f64 (/.f64 a (*.f64 #s(literal -2 binary64) b_2)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (neg.f64 b_2) #s(literal -2 binary64))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 #s(literal -2 binary64) (neg.f64 b_2))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (neg.f64 (*.f64 #s(literal -2 binary64) b_2))) (neg.f64 (neg.f64 a)))","(/.f64 (*.f64 (neg.f64 b_2) #s(literal -2 binary64)) (neg.f64 a))","(/.f64 (*.f64 #s(literal -2 binary64) (neg.f64 b_2)) (neg.f64 a))","(/.f64 (neg.f64 (*.f64 #s(literal -2 binary64) b_2)) (neg.f64 a))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (*.f64 #s(literal -2 binary64) b_2))))","(/.f64 #s(literal 2 binary64) (neg.f64 (/.f64 a b_2)))","(/.f64 (*.f64 #s(literal -2 binary64) b_2) a)","(/.f64 #s(literal -2 binary64) (/.f64 a b_2))","(/.f64 #s(literal 1 binary64) (/.f64 a (*.f64 #s(literal -2 binary64) b_2)))","(*.f64 (pow.f64 (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 (pow.f64 (pow.f64 b_2 #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (pow.f64 (neg.f64 a) #s(literal -1 binary64)) (pow.f64 (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (neg.f64 a) #s(literal -1 binary64)) (neg.f64 b_2))","(*.f64 #s(literal -1 binary64) (/.f64 b_2 (neg.f64 a)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 b_2 #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) b_2)","(*.f64 (neg.f64 b_2) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 b_2 (pow.f64 a #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 b_2 a))","(pow.f64 (/.f64 (/.f64 a b_2) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 a b_2) #s(literal -1 binary64))","(pow.f64 (/.f64 b_2 a) #s(literal 1 binary64))","(/.f64 (neg.f64 (*.f64 b_2 #s(literal 1 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (pow.f64 a #s(literal -1 binary64))) (neg.f64 (pow.f64 b_2 #s(literal -1 binary64))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 b_2))) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 (-.f64 (*.f64 #s(literal 0 binary64) (neg.f64 a)) (*.f64 (neg.f64 a) b_2)) (*.f64 (neg.f64 a) (neg.f64 a)))","(/.f64 (*.f64 b_2 #s(literal 1 binary64)) a)","(/.f64 (neg.f64 (neg.f64 b_2)) (neg.f64 (neg.f64 a)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 a b_2) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a b_2)))","(/.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 b_2 #s(literal -1 binary64)))","(/.f64 (neg.f64 b_2) (neg.f64 a))","(/.f64 b_2 a)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 a b_2))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a b_2) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 a b_2))","(neg.f64 (/.f64 (neg.f64 b_2) a))","(neg.f64 (/.f64 b_2 (neg.f64 a)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 a)) (/.f64 b_2 (neg.f64 a)))","(exp.f64 (*.f64 (log.f64 (/.f64 a b_2)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)))","(*.f64 (neg.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2))) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a))","(pow.f64 (/.f64 (/.f64 a #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 a #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) #s(literal 1 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 (neg.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2))))) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 (*.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) #s(literal 1 binary64)) a)","(/.f64 (neg.f64 (neg.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)))) (neg.f64 (neg.f64 a)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 a #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)))))","(/.f64 (neg.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2))) (neg.f64 a))","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 a #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 a #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2))))","(neg.f64 (/.f64 (neg.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2))) a))","(neg.f64 (/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) (neg.f64 a)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 a)) (/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) (neg.f64 a)))","(exp.f64 (*.f64 (log.f64 (/.f64 a #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)))) #s(literal -1 binary64)))","#s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2))","(*.f64 #s(literal -2 binary64) b_2)","(*.f64 b_2 #s(literal -2 binary64))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c)))","(*.f64 (neg.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c))) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c)) a))","(pow.f64 (/.f64 (/.f64 a #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 a #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c)) #s(literal 1 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 (neg.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c))))) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 (*.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c)) #s(literal 1 binary64)) a)","(/.f64 (neg.f64 (neg.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c)))) (neg.f64 (neg.f64 a)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 a #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c)))))","(/.f64 (neg.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c))) (neg.f64 a))","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c)) a)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 a #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 a #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c))))","(neg.f64 (/.f64 (neg.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c))) a))","(neg.f64 (/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c)) (neg.f64 a)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 a)) (/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c)) (neg.f64 a)))","(exp.f64 (*.f64 (log.f64 (/.f64 a #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c)))) #s(literal -1 binary64)))","#s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c))","(*.f64 (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)) a)","(*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) a) c) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2))","(*.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a))","(*.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2))","(*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c)","(*.f64 #s(literal -1/2 binary64) (*.f64 (/.f64 c b_2) a))","(*.f64 (/.f64 a b_2) (*.f64 #s(literal -1/2 binary64) c))","(*.f64 (*.f64 (/.f64 c b_2) a) #s(literal -1/2 binary64))","(*.f64 a (*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (*.f64 #s(literal -1/2 binary64) c)))","(*.f64 a (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","(*.f64 c (*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (*.f64 #s(literal -1/2 binary64) a)))","(*.f64 c (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)))","(pow.f64 (/.f64 b_2 (*.f64 (*.f64 #s(literal -1/2 binary64) a) c)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) c))) (neg.f64 (neg.f64 b_2)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/2 binary64) c))) (neg.f64 (/.f64 b_2 a)))","(/.f64 (neg.f64 (*.f64 (neg.f64 c) (*.f64 #s(literal -1/2 binary64) a))) (neg.f64 (neg.f64 b_2)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/2 binary64) a))) (neg.f64 (/.f64 b_2 c)))","(/.f64 (neg.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) a) (neg.f64 c))) (neg.f64 (neg.f64 b_2)))","(/.f64 (neg.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) a) #s(literal 1 binary64))) (neg.f64 (/.f64 b_2 c)))","(/.f64 (neg.f64 (neg.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) a) c))) (neg.f64 (neg.f64 b_2)))","(/.f64 (*.f64 (neg.f64 a) (*.f64 #s(literal -1/2 binary64) c)) (neg.f64 b_2))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/2 binary64) c)) (/.f64 b_2 a))","(/.f64 (*.f64 (neg.f64 c) (*.f64 #s(literal -1/2 binary64) a)) (neg.f64 b_2))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/2 binary64) a)) (/.f64 b_2 c))","(/.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) a) (neg.f64 c)) (neg.f64 b_2))","(/.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) a) #s(literal 1 binary64)) (/.f64 b_2 c))","(/.f64 (neg.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) a) c)) (neg.f64 b_2))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) a)) (neg.f64 (/.f64 b_2 c)))","(/.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) a) c) b_2)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b_2 (*.f64 (*.f64 #s(literal -1/2 binary64) a) c))))","(/.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 b_2 c))","(/.f64 #s(literal 1 binary64) (/.f64 b_2 (*.f64 (*.f64 #s(literal -1/2 binary64) a) c)))","(*.f64 (*.f64 #s(literal -1/2 binary64) a) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 #s(literal -1/2 binary64) (/.f64 a b_2))","(*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))","(*.f64 a (/.f64 #s(literal -1/2 binary64) b_2))","(*.f64 a (*.f64 (pow.f64 b_2 #s(literal -1 binary64)) #s(literal -1/2 binary64)))","(pow.f64 (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) a)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (neg.f64 a) #s(literal -1/2 binary64))) (neg.f64 (neg.f64 b_2)))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 a))) (neg.f64 (neg.f64 b_2)))","(/.f64 (neg.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) a))) (neg.f64 (neg.f64 b_2)))","(/.f64 (*.f64 (neg.f64 a) #s(literal -1/2 binary64)) (neg.f64 b_2))","(/.f64 (*.f64 #s(literal -1/2 binary64) (neg.f64 a)) (neg.f64 b_2))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) a)) (neg.f64 b_2))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) a))))","(/.f64 #s(literal 1/2 binary64) (neg.f64 (/.f64 b_2 a)))","(/.f64 (*.f64 #s(literal -1/2 binary64) a) b_2)","(/.f64 #s(literal -1/2 binary64) (/.f64 b_2 a))","(/.f64 #s(literal 1 binary64) (/.f64 b_2 (*.f64 #s(literal -1/2 binary64) a)))","(*.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 2 binary64))) (pow.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) (neg.f64 b_2)) (*.f64 b_2 b_2)) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2))) (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 2 binary64)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) (neg.f64 b_2)) (*.f64 b_2 b_2)) (+.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 2 binary64)) (*.f64 b_2 b_2))) (neg.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) (neg.f64 b_2))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) (neg.f64 b_2)) (*.f64 b_2 b_2)))))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)))) (*.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2))) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 2 binary64)))) (*.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2))) (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)))))","(/.f64 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 2 binary64)) (*.f64 b_2 b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) (neg.f64 b_2)))","(/.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 2 binary64)) (-.f64 (*.f64 b_2 b_2) (*.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) (neg.f64 b_2))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) (neg.f64 b_2)) (*.f64 b_2 b_2))))","(/.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 2 binary64))) (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2))) (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 2 binary64))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) (neg.f64 b_2)) (*.f64 b_2 b_2)) (+.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))))","(/.f64 (+.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 2 binary64)) (-.f64 (*.f64 b_2 b_2) (*.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) (neg.f64 b_2)))))","(/.f64 (+.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) (neg.f64 b_2)) (*.f64 b_2 b_2)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2))) (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) (neg.f64 b_2)) (*.f64 b_2 b_2)) (+.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))))","(fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)))","(fma.f64 b_2 #s(literal -1 binary64) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)))","(-.f64 (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 2 binary64)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) (neg.f64 b_2))) (/.f64 (*.f64 b_2 b_2) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) (neg.f64 b_2))))","(-.f64 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 0 binary64)) b_2)","(-.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)))) (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 2 binary64)) (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)))))","(-.f64 #s(literal 0 binary64) (-.f64 b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2))))","(-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2)","(+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) (neg.f64 b_2))","(+.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)))","(*.f64 (pow.f64 (/.f64 a (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 2 binary64)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 a (+.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) (neg.f64 b_2)) (*.f64 b_2 b_2)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2))","(*.f64 (neg.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2)) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2) (pow.f64 a #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2) a))","(pow.f64 (/.f64 (/.f64 a (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 a (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 2 binary64))) (pow.f64 a #s(literal -1 binary64)))) (neg.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 a #s(literal -1 binary64)))) (neg.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) (neg.f64 b_2)) (*.f64 b_2 b_2))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2) #s(literal 1 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2)))) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2))) a)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) (neg.f64 b_2)) (*.f64 b_2 b_2)) a)))","(/.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 2 binary64))) (pow.f64 a #s(literal -1 binary64))) (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2))))","(/.f64 (*.f64 (+.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 a #s(literal -1 binary64))) (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) (neg.f64 b_2)) (*.f64 b_2 b_2)))","(/.f64 (*.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2) #s(literal 1 binary64)) a)","(/.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 2 binary64)))) (neg.f64 (*.f64 a (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (neg.f64 (*.f64 a (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) (neg.f64 b_2)) (*.f64 b_2 b_2)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2))) (neg.f64 (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 2 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2))) a))","(/.f64 (*.f64 (+.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) (neg.f64 b_2)) (*.f64 b_2 b_2)) a))","(/.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 2 binary64))) (*.f64 a (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 a (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2))))","(/.f64 (+.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 a (fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) (neg.f64 b_2)) (*.f64 b_2 b_2))))","(/.f64 (neg.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2)) (neg.f64 a))","(/.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2) a)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 a (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2)))","(neg.f64 (/.f64 (neg.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2)) a))","(neg.f64 (/.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2) (neg.f64 a)))","(-.f64 (/.f64 (*.f64 b_2 b_2) (*.f64 a (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2))))) (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 2 binary64)) (*.f64 a (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2))))))","(-.f64 (/.f64 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 0 binary64)) a) (/.f64 b_2 a))","(-.f64 (/.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)))) a) (/.f64 (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) #s(literal 2 binary64)) (-.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)))) a))","(-.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) a) (/.f64 b_2 a))","(-.f64 (/.f64 #s(literal 0 binary64) a) (/.f64 (-.f64 b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2))) a))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 a)) (/.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2) (neg.f64 a)))","(exp.f64 (*.f64 (log.f64 (/.f64 a (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) b_2)","(*.f64 b_2 #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (*.f64 b_2 b_2))) (neg.f64 (+.f64 #s(literal 0 binary64) b_2)))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 b_2 b_2)) (+.f64 #s(literal 0 binary64) b_2))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))))","(neg.f64 b_2)","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) b_2)) (/.f64 (*.f64 b_2 b_2) (+.f64 #s(literal 0 binary64) b_2)))","(-.f64 (/.f64 #s(literal 0 binary64) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))))","(-.f64 #s(literal 0 binary64) b_2)","(+.f64 #s(literal 0 binary64) (neg.f64 b_2))","#s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2))","(*.f64 (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))) (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))))","(*.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) #s(literal 1/4 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) #s(literal 1/4 binary64)))","(pow.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) #s(literal 1 binary64))","(pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))","(fabs.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))))","(exp.f64 (log.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))))","(*.f64 (*.f64 (neg.f64 c) a) (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (pow.f64 (pow.f64 (*.f64 a c) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (*.f64 a c))","(*.f64 (/.f64 c b_2) a)","(*.f64 (/.f64 a b_2) c)","(*.f64 (*.f64 a c) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 a (/.f64 c b_2))","(*.f64 c (/.f64 a b_2))","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) a))","(pow.f64 (/.f64 (/.f64 (/.f64 b_2 c) a) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 b_2 c) a) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (*.f64 (neg.f64 c) a) #s(literal -1 binary64))) (neg.f64 b_2))","(/.f64 (neg.f64 (*.f64 c #s(literal 1 binary64))) (neg.f64 (/.f64 b_2 a)))","(/.f64 (neg.f64 (*.f64 a #s(literal 1 binary64))) (neg.f64 (/.f64 b_2 c)))","(/.f64 (neg.f64 (neg.f64 (*.f64 (neg.f64 c) a))) (neg.f64 (neg.f64 (neg.f64 b_2))))","(/.f64 (neg.f64 (*.f64 (*.f64 a c) #s(literal 1 binary64))) (neg.f64 b_2))","(/.f64 (/.f64 (*.f64 (neg.f64 c) a) #s(literal -1 binary64)) b_2)","(/.f64 (*.f64 c #s(literal 1 binary64)) (/.f64 b_2 a))","(/.f64 (*.f64 a #s(literal 1 binary64)) (/.f64 b_2 c))","(/.f64 (neg.f64 (*.f64 (neg.f64 c) a)) (neg.f64 (neg.f64 b_2)))","(/.f64 (*.f64 (*.f64 a c) #s(literal 1 binary64)) b_2)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (/.f64 b_2 c) a) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 b_2 c) a)))","(/.f64 (*.f64 (neg.f64 c) a) (neg.f64 b_2))","(/.f64 (neg.f64 c) (neg.f64 (/.f64 b_2 a)))","(/.f64 (neg.f64 a) (neg.f64 (/.f64 b_2 c)))","(/.f64 (*.f64 a c) b_2)","(/.f64 a (/.f64 b_2 c))","(/.f64 c (/.f64 b_2 a))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (/.f64 b_2 c) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (/.f64 b_2 c) a) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b_2 c) a))","(neg.f64 (*.f64 (neg.f64 c) (/.f64 a b_2)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 b_2)) (*.f64 (neg.f64 c) (/.f64 a b_2)))","(exp.f64 (*.f64 (log.f64 (/.f64 (/.f64 b_2 c) a)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (/.f64 b_2 c) a) #s(literal -2 binary64)) (*.f64 (neg.f64 b_2) b_2)) (pow.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c (neg.f64 b_2)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (/.f64 (/.f64 b_2 c) a) #s(literal -3 binary64)) #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (/.f64 b_2 c) a) #s(literal -2 binary64)) (*.f64 b_2 (-.f64 b_2 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c)))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c (neg.f64 b_2)) (fma.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (/.f64 b_2 c) a) #s(literal -2 binary64)) (*.f64 (neg.f64 b_2) b_2))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (/.f64 b_2 c) a) #s(literal -2 binary64)) (*.f64 b_2 (-.f64 b_2 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c)))) (fma.f64 (pow.f64 (/.f64 (/.f64 b_2 c) a) #s(literal -3 binary64)) #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c) #s(literal 2 binary64)))) (neg.f64 (-.f64 b_2 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (/.f64 b_2 c) a) #s(literal -2 binary64)) (*.f64 (neg.f64 b_2) b_2)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c (neg.f64 b_2)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (/.f64 (/.f64 b_2 c) a) #s(literal -3 binary64)) #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (/.f64 b_2 c) a) #s(literal -2 binary64)) (*.f64 b_2 (-.f64 b_2 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c)))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c) #s(literal 2 binary64)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c (neg.f64 b_2))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c (neg.f64 b_2)) (*.f64 b_2 b_2))) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c (neg.f64 b_2)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c (neg.f64 b_2))))","(/.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c) #s(literal 2 binary64))) (-.f64 b_2 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c)))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (/.f64 b_2 c) a) #s(literal -2 binary64)) (*.f64 (neg.f64 b_2) b_2))) (neg.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c (neg.f64 b_2))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (/.f64 (/.f64 b_2 c) a) #s(literal -3 binary64)) #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal 3 binary64)))) (neg.f64 (fma.f64 b_2 b_2 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c) b_2)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (/.f64 (/.f64 b_2 c) a) #s(literal -3 binary64)) #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (/.f64 b_2 c) a) #s(literal -2 binary64)) (*.f64 b_2 (-.f64 b_2 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c))))))","(/.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (/.f64 b_2 c) a) #s(literal -2 binary64)) (*.f64 (neg.f64 b_2) b_2)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c (neg.f64 b_2)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c (neg.f64 b_2)) (fma.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (/.f64 b_2 c) a) #s(literal -2 binary64)) (*.f64 (neg.f64 b_2) b_2)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (/.f64 b_2 c) a) #s(literal -2 binary64)) (*.f64 b_2 (-.f64 b_2 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c)))) (fma.f64 (pow.f64 (/.f64 (/.f64 b_2 c) a) #s(literal -3 binary64)) #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal 3 binary64))))))","(/.f64 (fma.f64 (pow.f64 (/.f64 (/.f64 b_2 c) a) #s(literal -3 binary64)) #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (fma.f64 b_2 b_2 (-.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c) b_2))))","(/.f64 (fma.f64 (pow.f64 (/.f64 (/.f64 b_2 c) a) #s(literal -3 binary64)) #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (fma.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (/.f64 b_2 c) a) #s(literal -2 binary64)) (*.f64 b_2 (-.f64 b_2 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c (neg.f64 b_2)) (fma.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (/.f64 b_2 c) a) #s(literal -2 binary64)) (*.f64 (neg.f64 b_2) b_2))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (/.f64 b_2 c) a) #s(literal -2 binary64)) (*.f64 b_2 (-.f64 b_2 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c)))) (fma.f64 (pow.f64 (/.f64 (/.f64 b_2 c) a) #s(literal -3 binary64)) #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal 3 binary64)))))","(fma.f64 (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)) a b_2)","(fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) a) c) (pow.f64 b_2 #s(literal -1 binary64)) b_2)","(fma.f64 (*.f64 #s(literal -1/2 binary64) c) (/.f64 a b_2) b_2)","(fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)","(fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)","(fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c b_2)","(fma.f64 #s(literal -1/2 binary64) (*.f64 (/.f64 c b_2) a) b_2)","(fma.f64 (/.f64 a b_2) (*.f64 #s(literal -1/2 binary64) c) b_2)","(fma.f64 (*.f64 (/.f64 c b_2) a) #s(literal -1/2 binary64) b_2)","(fma.f64 a (*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (*.f64 #s(literal -1/2 binary64) c)) b_2)","(fma.f64 a (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)) b_2)","(fma.f64 c (*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (*.f64 #s(literal -1/2 binary64) a)) b_2)","(fma.f64 c (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) b_2)","(-.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 b_2 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c))) (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c) #s(literal 2 binary64)) (-.f64 b_2 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c) #s(literal 2 binary64)) (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c (neg.f64 b_2))) (/.f64 (*.f64 b_2 b_2) (fma.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c (neg.f64 b_2))))","(+.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c) b_2)","(+.f64 b_2 (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":225.514892578125,"type":"rewrite"},{"compiler":[[18693,2275]],"memory":[[-1402208,51035648]],"time":96.613037109375,"type":"eval"},{"alts":[["(/.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) (*.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))))))","fresh",55.26694337245296,"binary64"],["(/.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2) a)","fresh",55.865902732609655,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64))))) a)","fresh",45.38974994417073,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","done",26.038966591759444,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","fresh",38.860972444426615,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 a c) b_2))) b_2)))) a)","next",29.426324542377294,"binary64"],["(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 b_2 c))) a)","fresh",45.43018540486016,"binary64"],["(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a))) a)","next",45.40284165486016,"binary64"],["(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","done",45.97452960547499,"binary64"],["(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 a (/.f64 #s(literal -1/2 binary64) b_2)) c)) a)","fresh",45.97452960532581,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2)))","fresh",37.49082368715097,"binary64"],["(-.f64 (/.f64 (*.f64 b_2 b_2) (*.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))))) (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) (*.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))))))","fresh",55.57336581694163,"binary64"],["(*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2))","next",37.4820537164563,"binary64"],["(exp.f64 (*.f64 (log.f64 (/.f64 a #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c)))) #s(literal -1 binary64)))","fresh",54.54106892104428,"binary64"],["(exp.f64 (*.f64 (log.f64 (/.f64 a #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)))) #s(literal -1 binary64)))","fresh",53.87047188511415,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/8 binary64)) (/.f64 (*.f64 c c) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2))","next",43.23256274955932,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -2 binary64) (/.f64 a b_2)))","fresh",42.362028710332595,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","fresh",41.79988412130958,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","next",42.34249758422694,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 b_2 #s(literal -1 binary64)))))","fresh",42.369841334231644,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","done",42.299528834231644,"binary64"]],"compiler":[[53,20],[21,14],[16,12],[13,10],[18,13],[35,22],[21,15],[21,15],[21,15],[21,15],[28,18],[81,21],[28,19],[25,19],[21,17],[30,20],[19,14],[19,14],[19,14],[23,17],[19,14],[53,20],[21,14],[16,12],[18,13],[35,22],[21,15],[21,15],[21,15],[28,18],[81,21],[28,19],[25,19],[21,17],[30,20],[19,14],[19,14],[19,14],[23,17]],"count":[[533,21]],"kept":[{"done":[1,1],"fresh":[5,3],"new":[522,15],"picked":[5,2]}],"memory":[[-7151344,28832464]],"min-error":[[3.5863240988138547,"binary64"]],"time":24.447021484375,"type":"prune"},{"egraph":[[0,8081,431,0.027284073],[7,6969,434,0.016903616],[6,4266,434,0.021372035],[5,3219,434,0.016605748],[4,2065,434,0.012535674],[3,669,488,0.007457194],[2,291,488,0.002221647],[1,143,493,0.001166512],[0,84,499,0.00075642],[0,55,499,0.000488161]],"inputs":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 a c) b_2))) b_2)))) a)","(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 a c) b_2))) b_2))))","(neg.f64 b_2)","b_2","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 a c) b_2))) b_2)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 a c) b_2))) b_2))","(*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 a c) b_2))) b_2)","#s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 a c) b_2)))","(-.f64 b_2 (/.f64 (*.f64 a c) b_2))","(/.f64 (*.f64 a c) b_2)","(*.f64 a c)","a","c","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","(*.f64 b_2 (/.f64 #s(literal -2 binary64) a))","b_2","(/.f64 #s(literal -2 binary64) a)","#s(literal -2 binary64)","a","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a))) a)","#s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a)))","(*.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a))","(/.f64 c b_2)","c","b_2","(*.f64 #s(literal -1/2 binary64) a)","#s(literal -1/2 binary64)","a","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/8 binary64)) (/.f64 (*.f64 c c) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2))","(/.f64 (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/8 binary64)) (/.f64 (*.f64 c c) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2)","(fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/8 binary64)) (/.f64 (*.f64 c c) b_2) (*.f64 #s(literal -1/2 binary64) c))","(*.f64 (/.f64 a b_2) #s(literal -1/8 binary64))","(/.f64 a b_2)","a","b_2","#s(literal -1/8 binary64)","(/.f64 (*.f64 c c) b_2)","(*.f64 c c)","c","(*.f64 #s(literal -1/2 binary64) c)","#s(literal -1/2 binary64)","(*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2))","(pow.f64 a #s(literal -1 binary64))","a","#s(literal -1 binary64)","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))","(*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))","(*.f64 b_2 b_2)","b_2","(-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))","#s(literal 1 binary64)","(*.f64 (/.f64 c b_2) (/.f64 a b_2))","(/.f64 c b_2)","c","(/.f64 a b_2)"]],"locations":[["(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2)","cost-diff",0],["(pow.f64 a #s(literal -1 binary64))","cost-diff",0],["(*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2))","cost-diff",2],["(*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))","cost-diff",6],["(*.f64 (/.f64 a b_2) #s(literal -1/8 binary64))","cost-diff",0],["(/.f64 (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/8 binary64)) (/.f64 (*.f64 c c) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2)","cost-diff",0],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/8 binary64)) (/.f64 (*.f64 c c) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2))","cost-diff",0],["(fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/8 binary64)) (/.f64 (*.f64 c c) b_2) (*.f64 #s(literal -1/2 binary64) c))","cost-diff",2],["(/.f64 c b_2)","cost-diff",0],["(*.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a))","cost-diff",0],["#s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a)))","cost-diff",0],["(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a))) a)","cost-diff",0],["(/.f64 #s(literal -2 binary64) a)","cost-diff",0],["(*.f64 b_2 (/.f64 #s(literal -2 binary64) a))","cost-diff",0],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","cost-diff",0],["(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 a c) b_2))) b_2)))","cost-diff",0],["(neg.f64 b_2)","cost-diff",0],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 a c) b_2))) b_2)))) a)","cost-diff",0],["(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 a c) b_2))) b_2))))","cost-diff",1]],"memory":[[6846336,14066752]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 a c) b_2))) b_2)))) a)","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (fma.f64 (neg.f64 a) (/.f64 c b_2) b_2)) b_2))) b_2) a)","(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 a c) b_2))) b_2))))","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (fma.f64 (neg.f64 a) (/.f64 c b_2) b_2)) b_2))) b_2)","(neg.f64 b_2)","b_2","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 a c) b_2))) b_2)))","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (fma.f64 (neg.f64 a) (/.f64 c b_2) b_2)) b_2)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 a c) b_2))) b_2))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (fma.f64 (neg.f64 a) (/.f64 c b_2) b_2)) b_2))","(*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 a c) b_2))) b_2)","(*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (fma.f64 (neg.f64 a) (/.f64 c b_2) b_2)) b_2)","#s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 a c) b_2)))","#s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (fma.f64 (neg.f64 a) (/.f64 c b_2) b_2))","(-.f64 b_2 (/.f64 (*.f64 a c) b_2))","(fma.f64 (neg.f64 a) (/.f64 c b_2) b_2)","(/.f64 (*.f64 a c) b_2)","(*.f64 (/.f64 a b_2) c)","(*.f64 a c)","(*.f64 c a)","a","c","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 #s(literal -2 binary64) a) b_2))","(*.f64 b_2 (/.f64 #s(literal -2 binary64) a))","(*.f64 (/.f64 #s(literal -2 binary64) a) b_2)","b_2","(/.f64 #s(literal -2 binary64) a)","#s(literal -2 binary64)","a","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a))) a)","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (/.f64 #s(literal -1/2 binary64) b_2) (*.f64 c a))) a)","#s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a)))","#s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (/.f64 #s(literal -1/2 binary64) b_2) (*.f64 c a)))","(*.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a))","(*.f64 (/.f64 #s(literal -1/2 binary64) b_2) (*.f64 c a))","(/.f64 c b_2)","c","b_2","(*.f64 #s(literal -1/2 binary64) a)","#s(literal -1/2 binary64)","a","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/8 binary64)) (/.f64 (*.f64 c c) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 (fma.f64 (/.f64 (/.f64 a b_2) b_2) (*.f64 #s(literal -1/8 binary64) c) #s(literal -1/2 binary64)) b_2) c))","(/.f64 (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/8 binary64)) (/.f64 (*.f64 c c) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2)","(*.f64 (/.f64 (fma.f64 (/.f64 (/.f64 a b_2) b_2) (*.f64 #s(literal -1/8 binary64) c) #s(literal -1/2 binary64)) b_2) c)","(fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/8 binary64)) (/.f64 (*.f64 c c) b_2) (*.f64 #s(literal -1/2 binary64) c))","(*.f64 (fma.f64 (/.f64 (/.f64 a b_2) b_2) (*.f64 #s(literal -1/8 binary64) c) #s(literal -1/2 binary64)) c)","(*.f64 (/.f64 a b_2) #s(literal -1/8 binary64))","(*.f64 #s(literal -1/8 binary64) (/.f64 a b_2))","(/.f64 a b_2)","a","b_2","#s(literal -1/8 binary64)","(/.f64 (*.f64 c c) b_2)","(*.f64 (/.f64 c b_2) c)","(*.f64 c c)","c","(*.f64 #s(literal -1/2 binary64) c)","#s(literal -1/2 binary64)","(*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2))","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) b_2) a)","(pow.f64 a #s(literal -1 binary64))","a","#s(literal -1 binary64)","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2)","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) b_2)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))","#s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))","(*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))","(fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))","(*.f64 b_2 b_2)","b_2","(-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))","(neg.f64 (fma.f64 (/.f64 (/.f64 a b_2) b_2) c #s(literal -1 binary64)))","#s(literal 1 binary64)","(*.f64 (/.f64 c b_2) (/.f64 a b_2))","(*.f64 (/.f64 (/.f64 a b_2) b_2) c)","(/.f64 c b_2)","c","(/.f64 a b_2)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":151.85595703125,"type":"simplify"},{"compiler":[[304,44]],"locations":[["(*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2))","accuracy",3.9890958714019775],["(*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))","accuracy",11.425895885381152],["(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2)","accuracy",11.996429556286323],["(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))","accuracy",21.41609059268961],["(/.f64 (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/8 binary64)) (/.f64 (*.f64 c c) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2)","accuracy",0.7275961372961519],["(fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/8 binary64)) (/.f64 (*.f64 c c) b_2) (*.f64 #s(literal -1/2 binary64) c))","accuracy",4.307551211751781],["(/.f64 (*.f64 c c) b_2)","accuracy",6.117713197316216],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/8 binary64)) (/.f64 (*.f64 c c) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2))","accuracy",41.83142246851592],["(*.f64 #s(literal -1/2 binary64) a)","accuracy",0.0],["(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a))) a)","accuracy",3.8930608616335354],["(*.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a))","accuracy",4.1140676789792625],["#s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a)))","accuracy",41.732047153022776],["(/.f64 #s(literal -2 binary64) a)","accuracy",0.0],["(*.f64 b_2 (/.f64 #s(literal -2 binary64) a))","accuracy",0.1875],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","accuracy",42.299528834231644],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 a c) b_2))) b_2)))) a)","accuracy",3.8930608616335354],["(/.f64 (*.f64 a c) b_2)","accuracy",4.320667673012375],["(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 a c) b_2))) b_2))))","accuracy",11.996429556286323],["(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 a c) b_2))) b_2)))","accuracy",21.41609059268961]],"memory":[[-2681408,49457120]],"mixsample":[[0.272705078125,"ival-sub",1200],[22.317138671875,"ival-div",0],[7.205810546875,"adjust",800],[0.010986328125,"ival-sub",4800],[0.1396484375,"ival-mult",1200],[0.118408203125,"ival-sub",1600],[0.151123046875,"ival-assert",0],[0.015869140625,"ival-sqrt",4800],[0.42236328125,"ival-sqrt",1200],[28.12744140625,"ival-sub",0],[2.538818359375,"ival-sqrt",0],[0.164306640625,"ival-sub",400],[0.02294921875,"ival-pow",800],[9.861083984375,"ival-pow",0],[0.033203125,"ival-sub",4400],[4.121337890625,"ival-add",0],[0.276611328125,"ival-mult",800],[0.009033203125,"ival-sqrt",2800],[0.21630859375,"ival-sub",800],[0.04345703125,"ival-mult",1600],[0.495849609375,"adjust",2800],[0.008056640625,"ival-sub",4000],[0.313720703125,"ival-sqrt",400],[0.2314453125,"ival-sqrt",2000],[0.31396484375,"ival-sqrt",800],[0.126953125,"ival-sub",2000],[0.01806640625,"ival-sqrt",4000],[0.072998046875,"ival-sqrt",4400],[3.59130859375,"adjust",2000],[0.17431640625,"ival-sub",2400],[32.353271484375,"ival-mult",0],[0.210693359375,"ival-sqrt",1600],[0.2177734375,"ival-mult",400],[0.006103515625,"ival-div",800],[0.37109375,"ival-true",0],[0.251708984375,"ival-sqrt",2400],[0.0048828125,"ival-sub",2800],[0.014892578125,"ival-add",800],[0.868408203125,"exact",0],[2.028076171875,"ival-neg",0]],"outcomes":[[21.60888671875,1,"valid",32],[38.06103515625,2,"valid",44],[8.74267578125,3,"valid",7],[96.150146484375,0,"valid",173]],"time":208.026123046875,"type":"localize"},{"count":[[23,118]],"inputs":[["(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 a c) b_2))) b_2))))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 a c) b_2))) b_2)))) a)","(neg.f64 b_2)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 a c) b_2))) b_2)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","(*.f64 b_2 (/.f64 #s(literal -2 binary64) a))","(/.f64 #s(literal -2 binary64) a)","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a))) a)","#s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a)))","(*.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a))","(/.f64 c b_2)","(fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/8 binary64)) (/.f64 (*.f64 c c) b_2) (*.f64 #s(literal -1/2 binary64) c))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/8 binary64)) (/.f64 (*.f64 c c) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2))","(/.f64 (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/8 binary64)) (/.f64 (*.f64 c c) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2)","(*.f64 (/.f64 a b_2) #s(literal -1/8 binary64))","(*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2))","(pow.f64 a #s(literal -1 binary64))","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2)","(/.f64 (*.f64 a c) b_2)","(*.f64 #s(literal -1/2 binary64) a)","(/.f64 (*.f64 c c) b_2)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))"]],"memory":[[2729456,18148720]],"outputs":[["(* -1/2 (/ (* a c) b_2))","(* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5)))))))))","(* -1/2 (/ c b_2))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))))))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(* -2 (/ b_2 a))","(/ -2 a)","(* -1/2 c)","(+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))))","(* -1/8 (/ a b_2))","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(/ 1 a)","(/ (* a c) b_2)","(* -1/2 a)","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))","(* a (+ (* -1/2 (/ c a)) (* -1/8 (/ (pow c 2) (pow b_2 2)))))","(* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))","(* a (+ (* -1/2 (/ c (* a b_2))) (* -1/8 (/ (pow c 2) (pow b_2 3)))))","(* -1 (* a c))","(* a (+ (* -1 c) (/ (pow b_2 2) a)))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* 1/8 (/ (pow c 2) (pow b_2 2))) (* 1/2 (/ c a)))))","(* -1 (* a (+ (* 1/8 (/ (pow c 2) (pow b_2 3))) (* 1/2 (/ c (* a b_2))))))","(* -1 (* a (+ c (* -1 (/ (pow b_2 2) a)))))","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(/ c b_2)","(/ (+ (* -1/2 (* (pow b_2 2) c)) (* -1/8 (* a (pow c 2)))) (pow b_2 2))","(/ (+ (* -1/2 (* (pow b_2 2) c)) (* -1/8 (* a (pow c 2)))) (pow b_2 3))","(/ (pow c 2) b_2)","(/ (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2)","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* -2 b_2)","(* -1 (* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a)))))))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3)))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5)))))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow a 3) (pow b_2 5)))))))))","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))) (* -1/16 (/ (pow a 2) (pow b_2 5))))))) (* 1/2 (/ 1 b_2))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(* c (- (* -1/8 (/ (* a c) (pow b_2 2))) 1/2))","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* (pow c 2) (- (* -1/8 (/ a (pow b_2 2))) (* 1/2 (/ 1 c))))","(* (pow c 2) (- (* -1/8 (/ a (pow b_2 3))) (* 1/2 (/ 1 (* b_2 c)))))","(* c (+ (* -1 a) (/ (pow b_2 2) c)))","(* -1 (* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ a (* -1 (/ (pow b_2 2) c)))))"]],"series":[[4.0439453125,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 (/ -2 a)) (/ -2 a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (/ c b_2) (* -1/2 a)) (/ c b_2) (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) b_2) (* (/ a b_2) -1/8) (* (* b_2 b_2) (- 1 (* (/ c b_2) (/ a b_2)))) (* (pow a -1) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) (pow a -1) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (/ (* a c) b_2) (* -1/2 a) (/ (* c c) b_2) (sqrt (- (* b_2 b_2) (* a c))))","c","-inf"],[3.695068359375,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 (/ -2 a)) (/ -2 a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (/ c b_2) (* -1/2 a)) (/ c b_2) (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) b_2) (* (/ a b_2) -1/8) (* (* b_2 b_2) (- 1 (* (/ c b_2) (/ a b_2)))) (* (pow a -1) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) (pow a -1) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (/ (* a c) b_2) (* -1/2 a) (/ (* c c) b_2) (sqrt (- (* b_2 b_2) (* a c))))","c","inf"],[2.69384765625,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 (/ -2 a)) (/ -2 a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (/ c b_2) (* -1/2 a)) (/ c b_2) (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) b_2) (* (/ a b_2) -1/8) (* (* b_2 b_2) (- 1 (* (/ c b_2) (/ a b_2)))) (* (pow a -1) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) (pow a -1) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (/ (* a c) b_2) (* -1/2 a) (/ (* c c) b_2) (sqrt (- (* b_2 b_2) (* a c))))","c","0"],[12.9609375,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 (/ -2 a)) (/ -2 a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (/ c b_2) (* -1/2 a)) (/ c b_2) (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) b_2) (* (/ a b_2) -1/8) (* (* b_2 b_2) (- 1 (* (/ c b_2) (/ a b_2)))) (* (pow a -1) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) (pow a -1) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (/ (* a c) b_2) (* -1/2 a) (/ (* c c) b_2) (sqrt (- (* b_2 b_2) (* a c))))","b_2","-inf"],[4.96923828125,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 (/ -2 a)) (/ -2 a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (/ c b_2) (* -1/2 a)) (/ c b_2) (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) b_2) (* (/ a b_2) -1/8) (* (* b_2 b_2) (- 1 (* (/ c b_2) (/ a b_2)))) (* (pow a -1) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) (pow a -1) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (/ (* a c) b_2) (* -1/2 a) (/ (* c c) b_2) (sqrt (- (* b_2 b_2) (* a c))))","b_2","inf"],[5.826904296875,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 (/ -2 a)) (/ -2 a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (/ c b_2) (* -1/2 a)) (/ c b_2) (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) b_2) (* (/ a b_2) -1/8) (* (* b_2 b_2) (- 1 (* (/ c b_2) (/ a b_2)))) (* (pow a -1) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) (pow a -1) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (/ (* a c) b_2) (* -1/2 a) (/ (* c c) b_2) (sqrt (- (* b_2 b_2) (* a c))))","b_2","0"],[6.65185546875,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 (/ -2 a)) (/ -2 a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (/ c b_2) (* -1/2 a)) (/ c b_2) (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) b_2) (* (/ a b_2) -1/8) (* (* b_2 b_2) (- 1 (* (/ c b_2) (/ a b_2)))) (* (pow a -1) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) (pow a -1) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (/ (* a c) b_2) (* -1/2 a) (/ (* c c) b_2) (sqrt (- (* b_2 b_2) (* a c))))","a","-inf"],[6.1650390625,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 (/ -2 a)) (/ -2 a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (/ c b_2) (* -1/2 a)) (/ c b_2) (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) b_2) (* (/ a b_2) -1/8) (* (* b_2 b_2) (- 1 (* (/ c b_2) (/ a b_2)))) (* (pow a -1) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) (pow a -1) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (/ (* a c) b_2) (* -1/2 a) (/ (* c c) b_2) (sqrt (- (* b_2 b_2) (* a c))))","a","inf"],[4.009765625,"((+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (neg b_2) (sqrt (- (* b_2 b_2) (* a c))) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 (/ -2 a)) (/ -2 a) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (* (/ c b_2) (* -1/2 a)) (/ c b_2) (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) b_2) (* (/ a b_2) -1/8) (* (* b_2 b_2) (- 1 (* (/ c b_2) (/ a b_2)))) (* (pow a -1) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) (pow a -1) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (/ (* a c) b_2) (* -1/2 a) (/ (* c c) b_2) (sqrt (- (* b_2 b_2) (* a c))))","a","0"]],"time":54.60498046875,"type":"series"},{"count":[[118,117]],"egraph":[[0,8135,2860,0.104776867],[2,6005,3006,0.031865864],[1,1752,3033,0.021745693],[0,555,3072,0.008390492]],"inputs":[["(* -1/2 (/ (* a c) b_2))","(* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5)))))))))","(* -1/2 (/ c b_2))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))))))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(* -2 (/ b_2 a))","(/ -2 a)","(* -1/2 c)","(+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))))","(* -1/8 (/ a b_2))","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(/ 1 a)","(/ (* a c) b_2)","(* -1/2 a)","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))","(* a (+ (* -1/2 (/ c a)) (* -1/8 (/ (pow c 2) (pow b_2 2)))))","(* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))","(* a (+ (* -1/2 (/ c (* a b_2))) (* -1/8 (/ (pow c 2) (pow b_2 3)))))","(* -1 (* a c))","(* a (+ (* -1 c) (/ (pow b_2 2) a)))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (+ (* 1/8 (/ (pow c 2) (pow b_2 2))) (* 1/2 (/ c a)))))","(* -1 (* a (+ (* 1/8 (/ (pow c 2) (pow b_2 3))) (* 1/2 (/ c (* a b_2))))))","(* -1 (* a (+ c (* -1 (/ (pow b_2 2) a)))))","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(* -1 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(/ c b_2)","(/ (+ (* -1/2 (* (pow b_2 2) c)) (* -1/8 (* a (pow c 2)))) (pow b_2 2))","(/ (+ (* -1/2 (* (pow b_2 2) c)) (* -1/8 (* a (pow c 2)))) (pow b_2 3))","(/ (pow c 2) b_2)","(/ (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2)","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* -2 b_2)","(* -1 (* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a)))))))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3)))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5)))))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow a 3) (pow b_2 5)))))))))","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))) (* -1/16 (/ (pow a 2) (pow b_2 5))))))) (* 1/2 (/ 1 b_2))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(* c (- (* -1/8 (/ (* a c) (pow b_2 2))) 1/2))","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* (pow c 2) (- (* -1/8 (/ a (pow b_2 2))) (* 1/2 (/ 1 c))))","(* (pow c 2) (- (* -1/8 (/ a (pow b_2 3))) (* 1/2 (/ 1 (* b_2 c)))))","(* c (+ (* -1 a) (/ (pow b_2 2) c)))","(* -1 (* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (+ a (* -1 (/ (pow b_2 2) c)))))"]],"memory":[[2168144,50931168]],"method":["egg-herbie"],"outputs":[["(* -1/2 (/ (* a c) b_2))","(*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)","(* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a)","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 a #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a)","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5)))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 #s(literal 5/64 binary64) b_2)) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 5 binary64)))) a (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a)","(* -1/2 (/ c b_2))","(*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(fma.f64 (*.f64 #s(literal -1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))","(fma.f64 (fma.f64 (*.f64 a #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 #s(literal 5/64 binary64) b_2)) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 5 binary64)))) a (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 a #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a b_2)","(* -2 (/ b_2 a))","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(/ -2 a)","(/.f64 #s(literal -2 binary64) a)","(* -1/2 c)","(*.f64 #s(literal -1/2 binary64) c)","(+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))))","(fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (*.f64 c a) b_2)) (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) c))","(* -1/8 (/ a b_2))","(*.f64 (/.f64 a b_2) #s(literal -1/8 binary64))","(pow b_2 2)","(*.f64 b_2 b_2)","(+ (* -1 (* a c)) (pow b_2 2))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(/ 1 a)","(/.f64 #s(literal 1 binary64) a)","(/ (* a c) b_2)","(/.f64 (*.f64 c a) b_2)","(* -1/2 a)","(*.f64 #s(literal -1/2 binary64) a)","(* (sqrt (* a c)) (sqrt -1))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a)))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a)) a)","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(*.f64 (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a))) a)","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(*.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/8 binary64) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a)))) a)","(* (sqrt (/ c a)) (sqrt -1))","(*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a)))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(fma.f64 (/.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/8 binary64) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) a))))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/8 binary64) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/8 binary64) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))) a)","(* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))","(*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (*.f64 c a) b_2)) (/.f64 c b_2))","(* a (+ (* -1/2 (/ c a)) (* -1/8 (/ (pow c 2) (pow b_2 2)))))","(*.f64 (fma.f64 (/.f64 (*.f64 #s(literal -1/8 binary64) c) b_2) (/.f64 c b_2) (*.f64 (/.f64 c a) #s(literal -1/2 binary64))) a)","(* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))","(*.f64 (*.f64 #s(literal -1/8 binary64) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))))","(* a (+ (* -1/2 (/ c (* a b_2))) (* -1/8 (/ (pow c 2) (pow b_2 3)))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a)","(* -1 (* a c))","(*.f64 (neg.f64 a) c)","(* a (+ (* -1 c) (/ (pow b_2 2) a)))","(*.f64 (fma.f64 b_2 (/.f64 b_2 a) (neg.f64 c)) a)","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (*.f64 c a)))","(* -1 (* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 a)))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (-.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (neg.f64 b_2)) a)))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)))) a) b_2) a)))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(neg.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(neg.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) b_2) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(neg.f64 (fma.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (-.f64 b_2 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/8 binary64)))) a)) a)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))))))","(* -1 (* a (+ (* 1/8 (/ (pow c 2) (pow b_2 2))) (* 1/2 (/ c a)))))","(*.f64 (neg.f64 a) (fma.f64 (/.f64 (*.f64 #s(literal 1/8 binary64) c) b_2) (/.f64 c b_2) (*.f64 #s(literal 1/2 binary64) (/.f64 c a))))","(* -1 (* a (+ (* 1/8 (/ (pow c 2) (pow b_2 3))) (* 1/2 (/ c (* a b_2))))))","(*.f64 (neg.f64 a) (fma.f64 (/.f64 #s(literal 1/2 binary64) a) (/.f64 c b_2) (/.f64 (*.f64 #s(literal 1/8 binary64) (*.f64 c c)) (pow.f64 b_2 #s(literal 3 binary64)))))","(* -1 (* a (+ c (* -1 (/ (pow b_2 2) a)))))","(*.f64 (fma.f64 b_2 (/.f64 b_2 a) (neg.f64 c)) a)","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a)) (neg.f64 b_2))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) #s(literal -1 binary64)) b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) b_2 #s(literal -1 binary64)) b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -1 binary64) a)) b_2 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 b_2 b_2)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) b_2 (/.f64 #s(literal -1 binary64) a)) b_2 (*.f64 (sqrt.f64 (/.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(* -1 b_2)","(neg.f64 b_2)","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(fma.f64 (*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) b_2) b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 b_2 (/.f64 b_2 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/8 binary64))) (*.f64 b_2 b_2) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (*.f64 c a))))","(/ c b_2)","(/.f64 c b_2)","(/ (+ (* -1/2 (* (pow b_2 2) c)) (* -1/8 (* a (pow c 2)))) (pow b_2 2))","(/.f64 (/.f64 (fma.f64 (*.f64 (*.f64 b_2 b_2) c) #s(literal -1/2 binary64) (*.f64 (*.f64 (*.f64 c c) a) #s(literal -1/8 binary64))) b_2) b_2)","(/ (+ (* -1/2 (* (pow b_2 2) c)) (* -1/8 (* a (pow c 2)))) (pow b_2 3))","(/.f64 (fma.f64 (*.f64 (*.f64 b_2 b_2) c) #s(literal -1/2 binary64) (*.f64 (*.f64 (*.f64 c c) a) #s(literal -1/8 binary64))) (pow.f64 b_2 #s(literal 3 binary64)))","(/ (pow c 2) b_2)","(*.f64 c (/.f64 c b_2))","(/ (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2)))) b_2)","(/.f64 (fma.f64 (*.f64 (/.f64 (*.f64 a a) b_2) #s(literal -1/8 binary64)) (*.f64 c (/.f64 c b_2)) (*.f64 (*.f64 #s(literal -1/2 binary64) a) c)) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))))) b_2)","(/.f64 (fma.f64 (*.f64 (/.f64 (*.f64 a a) b_2) #s(literal -1/8 binary64)) (*.f64 c (/.f64 c b_2)) (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (*.f64 #s(literal -1/2 binary64) a) c))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2)","(/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 c a (*.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (/.f64 #s(literal 5/64 binary64) (pow.f64 b_2 #s(literal 6 binary64))))) (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (*.f64 (/.f64 (*.f64 a a) b_2) #s(literal -1/8 binary64)) (*.f64 c (/.f64 c b_2))))) b_2)","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(/.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (*.f64 c a) b_2)) (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2)","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2)","(/.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (*.f64 c a) b_2)) (/.f64 c b_2) (fma.f64 (*.f64 (*.f64 a a) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 #s(literal -1/2 binary64) c))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2)","(/.f64 (fma.f64 #s(literal -1/2 binary64) (+.f64 c (*.f64 (/.f64 (pow.f64 a #s(literal 4 binary64)) a) (/.f64 (*.f64 (pow.f64 c #s(literal 4 binary64)) #s(literal 5/64 binary64)) (pow.f64 b_2 #s(literal 6 binary64))))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (*.f64 c a) b_2)) (/.f64 c b_2) (/.f64 (*.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(*.f64 (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64)) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64))) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 c a) b_2) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) a) a) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) b_2 b_2)","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)","(* -2 b_2)","(*.f64 #s(literal -2 binary64) b_2)","(* -1 (* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal -1/2 binary64) #s(literal 2 binary64)))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal -1/2 binary64) #s(literal 2 binary64))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(*.f64 (neg.f64 b_2) (+.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal -1/2 binary64) #s(literal 2 binary64))) (*.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a)))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 c b_2) (fma.f64 (*.f64 (*.f64 c c) (/.f64 a (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal -1/8 binary64) (/.f64 #s(literal 2 binary64) a))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 c b_2) (fma.f64 (*.f64 (*.f64 c c) a) (/.f64 #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1/16 binary64) (/.f64 #s(literal 2 binary64) a)))))","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64)))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(neg.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 (*.f64 c a) b_2) (/.f64 (*.f64 (*.f64 (*.f64 (*.f64 c c) a) a) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) b_2 b_2))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(/.f64 (fma.f64 (/.f64 (*.f64 #s(literal 1/8 binary64) a) b_2) (*.f64 c (/.f64 c b_2)) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2))","(* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3)))))","(*.f64 (fma.f64 (*.f64 c #s(literal -1/8 binary64)) (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c)","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) a) a) (pow.f64 b_2 #s(literal 3 binary64)))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c)","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow a 3) (pow b_2 5)))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal -1/16 binary64) (*.f64 (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 5/64 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 c b_2)) #s(literal -1/2 binary64))) c (/.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) a) a) (pow.f64 b_2 #s(literal 3 binary64)))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c)","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (*.f64 c #s(literal -1/8 binary64)) (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 #s(literal -1/2 binary64) b_2)) c)","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (fma.f64 (*.f64 c #s(literal -1/16 binary64)) (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 5 binary64)))) (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64))) c (/.f64 #s(literal -1/2 binary64) b_2)) c)","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))) (* -1/16 (/ (pow a 2) (pow b_2 5))))))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 5/64 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 c b_2)) (/.f64 (*.f64 (*.f64 a a) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 5 binary64)))) c (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64))) c (/.f64 #s(literal -1/2 binary64) b_2)) c)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(fma.f64 (fma.f64 (*.f64 c #s(literal -1/8 binary64)) (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c b_2)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (pow.f64 a #s(literal 3 binary64)) #s(literal -1/16 binary64)) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) a) a) (pow.f64 b_2 #s(literal 3 binary64)))) c (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64))) c b_2)","(* c (- (* -1/8 (/ (* a c) (pow b_2 2))) 1/2))","(*.f64 (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c)","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) c)) c)","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) c))) c)","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(*.f64 (fma.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b_2 #s(literal 4 binary64))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) c)))) c)","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 (neg.f64 b_2) c) a)) c)","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 (neg.f64 b_2) c) a))) c)","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (pow.f64 b_2 #s(literal 4 binary64))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 (neg.f64 b_2) c) a)))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b_2 #s(literal 4 binary64))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/8 binary64) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (pow.f64 b_2 #s(literal 4 binary64))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/8 binary64) (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))) c)","(* (pow c 2) (- (* -1/8 (/ a (pow b_2 2))) (* 1/2 (/ 1 c))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 a b_2) (/.f64 #s(literal -1/2 binary64) c)) (*.f64 c c))","(* (pow c 2) (- (* -1/8 (/ a (pow b_2 3))) (* 1/2 (/ 1 (* b_2 c)))))","(*.f64 (fma.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64) (/.f64 #s(literal -1/2 binary64) (*.f64 c b_2))) (*.f64 c c))","(* c (+ (* -1 a) (/ (pow b_2 2) c)))","(*.f64 (fma.f64 b_2 (/.f64 b_2 c) (neg.f64 a)) c)","(* -1 (* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (neg.f64 b_2)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 c a)) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)))) c) b_2) c)) (neg.f64 c))","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 c) a)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (/.f64 (neg.f64 b_2) a)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (+.f64 (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/8 binary64)))) c) (/.f64 b_2 a)) c)) (neg.f64 c))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (pow.f64 b_2 #s(literal 6 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))) (neg.f64 c))","(* -1 (* c (+ a (* -1 (/ (pow b_2 2) c)))))","(*.f64 (fma.f64 b_2 (/.f64 b_2 c) (neg.f64 a)) c)"]],"stop":[["iter limit",1],["node limit",1]],"time":338.326904296875,"type":"simplify"},{"count":[[23,470]],"egraph":[[0,8624,337,0.084050553],[2,2119,337,0.037644591],[1,306,337,0.008733478],[0,84,345,0.002240829],[0,55,345,0.000476519]],"inputs":[["(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 a c) b_2))) b_2))))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 a c) b_2))) b_2)))) a)","(neg.f64 b_2)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 a c) b_2))) b_2)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","(*.f64 b_2 (/.f64 #s(literal -2 binary64) a))","(/.f64 #s(literal -2 binary64) a)","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a))) a)","#s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a)))","(*.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a))","(/.f64 c b_2)","(fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/8 binary64)) (/.f64 (*.f64 c c) b_2) (*.f64 #s(literal -1/2 binary64) c))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/8 binary64)) (/.f64 (*.f64 c c) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2))","(/.f64 (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/8 binary64)) (/.f64 (*.f64 c c) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2)","(*.f64 (/.f64 a b_2) #s(literal -1/8 binary64))","(*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2))","(pow.f64 a #s(literal -1 binary64))","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2)","(/.f64 (*.f64 a c) b_2)","(*.f64 #s(literal -1/2 binary64) a)","(/.f64 (*.f64 c c) b_2)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))"]],"memory":[[1905808,56951968]],"outputs":[["(*.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) (pow.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64))) (pow.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))) (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))))) (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 b_2))) (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) (neg.f64 b_2))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))))) (neg.f64 (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64))))) (neg.f64 (neg.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))))))))","(/.f64 (-.f64 (*.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))))))","(/.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) (neg.f64 b_2)))","(/.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))) (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64)))) (neg.f64 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (-.f64 (*.f64 b_2 b_2) (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) (neg.f64 b_2))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64)))) (neg.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))))))))","(/.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))))","(/.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64))) (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (-.f64 (*.f64 b_2 b_2) (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) (neg.f64 b_2)))))","(/.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64))) (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))) (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))))) (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))) (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))))) (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64)))))","(fma.f64 (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))) (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))) (neg.f64 b_2))","(fma.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 1/4 binary64)) (neg.f64 b_2))","(fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))))","(fma.f64 b_2 #s(literal -1 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))))","(-.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) #s(literal 0 binary64)) b_2)","(-.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))))) (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))))))","(-.f64 #s(literal 0 binary64) (-.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))))","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)","(+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) (neg.f64 b_2))","(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))))","(*.f64 (pow.f64 (/.f64 a (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))) #s(literal -1 binary64)) (pow.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 a (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) (pow.f64 a #s(literal -1/2 binary64))) (pow.f64 a #s(literal -1/2 binary64)))","(*.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2))","(*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) (pow.f64 a #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) a))","(pow.f64 (/.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) (pow.f64 a #s(literal -1 binary64)))) (neg.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64))) (pow.f64 a #s(literal -1 binary64)))) (neg.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(literal 1 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)))) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) #s(literal 1 binary64))) (neg.f64 (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))) a)))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))))) a)))","(/.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) (pow.f64 a #s(literal -1 binary64))) (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))))","(/.f64 (*.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64))) (pow.f64 a #s(literal -1 binary64))) (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(literal 1 binary64)) a)","(/.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))) (neg.f64 (*.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))))))","(/.f64 (neg.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64)))) (neg.f64 (*.f64 a (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))))))))","(/.f64 (*.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) #s(literal 1 binary64)) (*.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))) a))","(/.f64 (*.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))))) a))","(/.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) (*.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))))))","(/.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64))) (*.f64 a (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))))))))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)) (neg.f64 a))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2))))","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) a)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)))","(neg.f64 (/.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)) a))","(neg.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) (neg.f64 a)))","(exp.f64 (*.f64 (log.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2))) #s(literal -1 binary64)))","(*.f64 #s(literal -1 binary64) b_2)","(*.f64 b_2 #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (*.f64 b_2 b_2))) (neg.f64 (+.f64 #s(literal 0 binary64) b_2)))","(/.f64 (neg.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2)))))","(/.f64 (-.f64 #s(literal 0 binary64) (*.f64 b_2 b_2)) (+.f64 #s(literal 0 binary64) b_2))","(/.f64 (-.f64 #s(literal 0 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 #s(literal 0 binary64) (fma.f64 b_2 b_2 (*.f64 #s(literal 0 binary64) b_2))))","(neg.f64 b_2)","(-.f64 #s(literal 0 binary64) b_2)","(+.f64 #s(literal 0 binary64) (neg.f64 b_2))","(*.f64 (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))) (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))))","(*.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 1/4 binary64)))","(pow.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) #s(literal 1 binary64))","(pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))","(fabs.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))))","(exp.f64 (log.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 #s(literal -2 binary64) a) b_2))","(*.f64 (*.f64 #s(literal -2 binary64) b_2) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (/.f64 #s(literal -2 binary64) a) b_2)","(*.f64 #s(literal -2 binary64) (*.f64 (pow.f64 a #s(literal -1 binary64)) b_2))","(*.f64 b_2 (/.f64 #s(literal -2 binary64) a))","(pow.f64 (/.f64 a (*.f64 #s(literal -2 binary64) b_2)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(literal 2 binary64) b_2)) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 b_2 #s(literal 2 binary64))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) b_2)) (neg.f64 (*.f64 #s(literal -1/2 binary64) a)))","(/.f64 (neg.f64 (*.f64 b_2 #s(literal 1 binary64))) (neg.f64 (*.f64 #s(literal -1/2 binary64) a)))","(/.f64 (neg.f64 (neg.f64 (*.f64 #s(literal -2 binary64) b_2))) (neg.f64 (neg.f64 a)))","(/.f64 (*.f64 #s(literal 2 binary64) b_2) (neg.f64 a))","(/.f64 (*.f64 b_2 #s(literal 2 binary64)) (neg.f64 a))","(/.f64 (*.f64 #s(literal 1 binary64) b_2) (*.f64 #s(literal -1/2 binary64) a))","(/.f64 (*.f64 b_2 #s(literal 1 binary64)) (*.f64 #s(literal -1/2 binary64) a))","(/.f64 (neg.f64 (*.f64 #s(literal -2 binary64) b_2)) (neg.f64 a))","(/.f64 (*.f64 #s(literal -2 binary64) b_2) a)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (*.f64 #s(literal -2 binary64) b_2))))","(/.f64 #s(literal 1 binary64) (/.f64 a (*.f64 #s(literal -2 binary64) b_2)))","(/.f64 (neg.f64 b_2) (neg.f64 (*.f64 #s(literal -1/2 binary64) a)))","(/.f64 b_2 (*.f64 #s(literal -1/2 binary64) a))","(*.f64 (*.f64 #s(literal -2 binary64) (pow.f64 a #s(literal -1/2 binary64))) (pow.f64 a #s(literal -1/2 binary64)))","(*.f64 #s(literal 2 binary64) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal -2 binary64))","(*.f64 #s(literal -2 binary64) (pow.f64 a #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(literal -2 binary64) a))","(pow.f64 (/.f64 (*.f64 #s(literal -1/2 binary64) a) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (*.f64 #s(literal -1/2 binary64) a) #s(literal -1 binary64))","(/.f64 #s(literal 2 binary64) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 #s(literal 2 binary64) (neg.f64 a))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (*.f64 #s(literal -1/2 binary64) a) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 #s(literal -1/2 binary64) a)))","(/.f64 #s(literal -2 binary64) (neg.f64 (neg.f64 a)))","(/.f64 #s(literal -2 binary64) a)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) a))))","(/.f64 #s(literal 1 binary64) (/.f64 (*.f64 #s(literal -1/2 binary64) a) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/2 binary64) a))","(neg.f64 (/.f64 #s(literal 2 binary64) a))","(exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -1/2 binary64) a)) #s(literal -1 binary64)))","(*.f64 (*.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2))) (pow.f64 a #s(literal -1/2 binary64))) (pow.f64 a #s(literal -1/2 binary64)))","(*.f64 (neg.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2)))) (pow.f64 (neg.f64 a) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2))))","(*.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2))) (pow.f64 a #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2))) a))","(pow.f64 (/.f64 (/.f64 a #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2)))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 a #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2))) #s(literal 1 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (neg.f64 (neg.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2)))))) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 (*.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2))) #s(literal 1 binary64)) a)","(/.f64 (neg.f64 (neg.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2))))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2)))) (neg.f64 a))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 a #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2)))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2))))))","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2))) a)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 a #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2)))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2)))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 a #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2)))))","(neg.f64 (/.f64 (neg.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2)))) a))","(neg.f64 (/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2))) (neg.f64 a)))","(exp.f64 (*.f64 (log.f64 (/.f64 a #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2))))) #s(literal -1 binary64)))","#s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2)))","(*.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) a) c) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)) a)","(*.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2))","(*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2))","(*.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a))","(*.f64 (/.f64 (*.f64 c a) b_2) #s(literal -1/2 binary64))","(*.f64 c (/.f64 (*.f64 #s(literal -1/2 binary64) a) b_2))","(*.f64 c (*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (*.f64 #s(literal -1/2 binary64) a)))","(*.f64 a (*.f64 #s(literal -1/2 binary64) (/.f64 c b_2)))","(pow.f64 (/.f64 b_2 (*.f64 (*.f64 #s(literal -1/2 binary64) a) c)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (neg.f64 c) (*.f64 #s(literal -1/2 binary64) a))) (neg.f64 (neg.f64 b_2)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/2 binary64) a))) (neg.f64 (/.f64 b_2 c)))","(/.f64 (neg.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) a) (neg.f64 c))) (neg.f64 (neg.f64 b_2)))","(/.f64 (neg.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) a) #s(literal 1 binary64))) (neg.f64 (/.f64 b_2 c)))","(/.f64 (neg.f64 (neg.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) a) c))) (neg.f64 (neg.f64 b_2)))","(/.f64 (*.f64 (neg.f64 c) (*.f64 #s(literal -1/2 binary64) a)) (neg.f64 b_2))","(/.f64 (*.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/2 binary64) a)) (/.f64 b_2 c))","(/.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) a) (neg.f64 c)) (neg.f64 b_2))","(/.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) a) #s(literal 1 binary64)) (/.f64 b_2 c))","(/.f64 (neg.f64 (*.f64 #s(literal -1/2 binary64) a)) (neg.f64 (/.f64 b_2 c)))","(/.f64 (neg.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) a) c)) (neg.f64 b_2))","(/.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) a) c) b_2)","(/.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 b_2 c))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b_2 (*.f64 (*.f64 #s(literal -1/2 binary64) a) c))))","(/.f64 #s(literal 1 binary64) (/.f64 b_2 (*.f64 (*.f64 #s(literal -1/2 binary64) a) c)))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (pow.f64 (pow.f64 c #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) c)","(*.f64 (neg.f64 c) (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 c b_2))","(*.f64 c (pow.f64 b_2 #s(literal -1 binary64)))","(pow.f64 (/.f64 (/.f64 b_2 c) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 b_2 c) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (neg.f64 c) #s(literal -1 binary64))) (neg.f64 b_2))","(/.f64 (neg.f64 (neg.f64 (neg.f64 c))) (neg.f64 (neg.f64 (neg.f64 b_2))))","(/.f64 (neg.f64 (*.f64 c #s(literal 1 binary64))) (neg.f64 b_2))","(/.f64 (/.f64 (neg.f64 c) #s(literal -1 binary64)) b_2)","(/.f64 (neg.f64 (neg.f64 c)) (neg.f64 (neg.f64 b_2)))","(/.f64 (*.f64 c #s(literal 1 binary64)) b_2)","(/.f64 (neg.f64 c) (neg.f64 b_2))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 b_2 c) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b_2 c)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 b_2 c))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b_2 c) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 b_2 c))","(/.f64 c b_2)","(neg.f64 (/.f64 (neg.f64 c) b_2))","(exp.f64 (*.f64 (log.f64 (/.f64 b_2 c)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 2 binary64)) (*.f64 #s(literal 1/4 binary64) (*.f64 c c))) (pow.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal 1/2 binary64) c)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 3 binary64))) (pow.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (-.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2))) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal 1/2 binary64) c)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 2 binary64)) (*.f64 #s(literal 1/4 binary64) (*.f64 c c)))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (-.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2))) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 2 binary64))) (fma.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 c c)) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 2 binary64)))) (neg.f64 (-.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 2 binary64)) (*.f64 #s(literal 1/4 binary64) (*.f64 c c))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal 1/2 binary64) c)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (-.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2))) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 2 binary64)) (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal 1/2 binary64) c))) (*.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal 1/2 binary64) c)) (*.f64 #s(literal 1/4 binary64) (*.f64 c c)))) (*.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal 1/2 binary64) c)) (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal 1/2 binary64) c))))","(/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 c c)) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 2 binary64))) (-.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 2 binary64)) (*.f64 #s(literal 1/4 binary64) (*.f64 c c)))) (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal 1/2 binary64) c))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 c c) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) (*.f64 #s(literal -1/2 binary64) c))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (-.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2))) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 2 binary64)) (*.f64 #s(literal 1/4 binary64) (*.f64 c c))) (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal 1/2 binary64) c)))","(/.f64 (fma.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 3 binary64))) (fma.f64 #s(literal 1/4 binary64) (*.f64 c c) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 2 binary64)) (*.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) (*.f64 #s(literal -1/2 binary64) c)))))","(/.f64 (fma.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (-.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2))) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal 1/2 binary64) c)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 2 binary64)) (*.f64 #s(literal 1/4 binary64) (*.f64 c c))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (-.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2))) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 2 binary64))) (fma.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal 1/2 binary64) c)) (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 2 binary64)) (*.f64 #s(literal 1/4 binary64) (*.f64 c c)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (-.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2))) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 2 binary64))) (fma.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 3 binary64)))))","(fma.f64 (*.f64 (*.f64 (/.f64 c b_2) c) (/.f64 a b_2)) #s(literal -1/8 binary64) (*.f64 #s(literal -1/2 binary64) c))","(fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) c))","(fma.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) c) (pow.f64 b_2 #s(literal -1 binary64)) (*.f64 #s(literal -1/2 binary64) c))","(fma.f64 (*.f64 (*.f64 (/.f64 c b_2) c) #s(literal -1/8 binary64)) (/.f64 a b_2) (*.f64 #s(literal -1/2 binary64) c))","(fma.f64 (*.f64 (/.f64 c b_2) c) (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) (*.f64 #s(literal -1/2 binary64) c))","(fma.f64 (*.f64 c c) (*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2))) (*.f64 #s(literal -1/2 binary64) c))","(fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) (*.f64 (/.f64 c b_2) c) (*.f64 #s(literal -1/2 binary64) c))","(fma.f64 #s(literal -1/8 binary64) (*.f64 (/.f64 a b_2) (*.f64 (/.f64 c b_2) c)) (*.f64 #s(literal -1/2 binary64) c))","(fma.f64 (/.f64 a b_2) (*.f64 (*.f64 (/.f64 c b_2) c) #s(literal -1/8 binary64)) (*.f64 #s(literal -1/2 binary64) c))","(fma.f64 #s(literal -1/2 binary64) c (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)))","(fma.f64 c (*.f64 (/.f64 c b_2) (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2))) (*.f64 #s(literal -1/2 binary64) c))","(fma.f64 c #s(literal -1/2 binary64) (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)))","(fma.f64 a (*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (*.f64 (*.f64 (/.f64 c b_2) c) #s(literal -1/8 binary64))) (*.f64 #s(literal -1/2 binary64) c))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 2 binary64)) (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal 1/2 binary64) c))) (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 c c)) (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal 1/2 binary64) c))))","(+.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) (*.f64 #s(literal -1/2 binary64) c))","(+.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2))","(*.f64 (pow.f64 (/.f64 b_2 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 2 binary64)) (*.f64 #s(literal 1/4 binary64) (*.f64 c c)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal 1/2 binary64) c)) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 b_2 (fma.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (-.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2))) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (pow.f64 (pow.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) c)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) c)))","(*.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) c))) (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)))","(*.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) c)) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2))","(pow.f64 (/.f64 (/.f64 b_2 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) c))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 b_2 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) c))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) c))) #s(literal -1 binary64))) (neg.f64 b_2))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 2 binary64)) (*.f64 #s(literal 1/4 binary64) (*.f64 c c))) (pow.f64 b_2 #s(literal -1 binary64)))) (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal 1/2 binary64) c))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 3 binary64))) (pow.f64 b_2 #s(literal -1 binary64)))) (neg.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (-.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2))) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) c)) #s(literal 1 binary64))) (neg.f64 b_2))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) c))))) (neg.f64 (neg.f64 (neg.f64 b_2))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 2 binary64)) (*.f64 #s(literal 1/4 binary64) (*.f64 c c))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal 1/2 binary64) c)) b_2)))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (-.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2))) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 2 binary64))) b_2)))","(/.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) c))) #s(literal -1 binary64)) b_2)","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 2 binary64)) (*.f64 #s(literal 1/4 binary64) (*.f64 c c))) (pow.f64 b_2 #s(literal -1 binary64))) (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal 1/2 binary64) c)))","(/.f64 (*.f64 (fma.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 3 binary64))) (pow.f64 b_2 #s(literal -1 binary64))) (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (-.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2))) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 2 binary64))))","(/.f64 (*.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) c)) #s(literal 1 binary64)) b_2)","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 2 binary64)) (*.f64 #s(literal 1/4 binary64) (*.f64 c c)))) (neg.f64 (*.f64 b_2 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal 1/2 binary64) c)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 3 binary64)))) (neg.f64 (*.f64 b_2 (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (-.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2))) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) c)))) (neg.f64 (neg.f64 b_2)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 2 binary64)) (*.f64 #s(literal 1/4 binary64) (*.f64 c c))) #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal 1/2 binary64) c)) b_2))","(/.f64 (*.f64 (fma.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (-.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2))) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 2 binary64))) b_2))","(/.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 2 binary64)) (*.f64 #s(literal 1/4 binary64) (*.f64 c c))) (*.f64 b_2 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal 1/2 binary64) c))))","(/.f64 (fma.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 3 binary64))) (*.f64 b_2 (fma.f64 (*.f64 #s(literal -1/2 binary64) c) (-.f64 (*.f64 #s(literal -1/2 binary64) c) (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2))) (pow.f64 (*.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) c))) (neg.f64 b_2))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 b_2 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) c))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b_2 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) c)))))","(/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 b_2 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) c))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b_2 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) c))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 b_2 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) c))))","(neg.f64 (/.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) c))) b_2))","(neg.f64 (/.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) c)) (neg.f64 b_2)))","(exp.f64 (*.f64 (log.f64 (/.f64 b_2 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 a b_2)) c) (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) c)))) #s(literal -1 binary64)))","(*.f64 (*.f64 #s(literal -1/8 binary64) a) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 #s(literal -1/8 binary64) (/.f64 a b_2))","(*.f64 (/.f64 a b_2) #s(literal -1/8 binary64))","(*.f64 a (/.f64 #s(literal -1/8 binary64) b_2))","(*.f64 a (*.f64 (pow.f64 b_2 #s(literal -1 binary64)) #s(literal -1/8 binary64)))","(pow.f64 (/.f64 b_2 (*.f64 #s(literal -1/8 binary64) a)) #s(literal -1 binary64))","(/.f64 (neg.f64 (*.f64 (neg.f64 a) #s(literal -1/8 binary64))) (neg.f64 (neg.f64 b_2)))","(/.f64 (neg.f64 (*.f64 #s(literal -1/8 binary64) (neg.f64 a))) (neg.f64 (neg.f64 b_2)))","(/.f64 (neg.f64 (neg.f64 (*.f64 #s(literal -1/8 binary64) a))) (neg.f64 (neg.f64 b_2)))","(/.f64 #s(literal 1/8 binary64) (neg.f64 (/.f64 b_2 a)))","(/.f64 (*.f64 (neg.f64 a) #s(literal -1/8 binary64)) (neg.f64 b_2))","(/.f64 (*.f64 #s(literal -1/8 binary64) (neg.f64 a)) (neg.f64 b_2))","(/.f64 (neg.f64 (*.f64 #s(literal -1/8 binary64) a)) (neg.f64 b_2))","(/.f64 (*.f64 #s(literal -1/8 binary64) a) b_2)","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b_2 (*.f64 #s(literal -1/8 binary64) a))))","(/.f64 #s(literal -1/8 binary64) (/.f64 b_2 a))","(/.f64 #s(literal 1 binary64) (/.f64 b_2 (*.f64 #s(literal -1/8 binary64) a)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) (*.f64 b_2 b_2))","(*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)))","(*.f64 b_2 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal 2 binary64))) (*.f64 b_2 b_2))) (neg.f64 (fma.f64 (/.f64 a b_2) (/.f64 c b_2) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal 3 binary64))) (*.f64 b_2 b_2))) (neg.f64 (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) (fma.f64 (/.f64 a b_2) (/.f64 c b_2) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal 2 binary64))))) (neg.f64 (fma.f64 (/.f64 a b_2) (/.f64 c b_2) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) (fma.f64 (/.f64 a b_2) (/.f64 c b_2) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal 2 binary64))) (*.f64 b_2 b_2)) (fma.f64 (/.f64 a b_2) (/.f64 c b_2) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal 3 binary64))) (*.f64 b_2 b_2)) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) (fma.f64 (/.f64 a b_2) (/.f64 c b_2) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal 2 binary64)))) (fma.f64 (/.f64 a b_2) (/.f64 c b_2) #s(literal 1 binary64)))","(/.f64 (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal 3 binary64)))) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) (fma.f64 (/.f64 a b_2) (/.f64 c b_2) #s(literal 1 binary64)) #s(literal 1 binary64)))","(fma.f64 (exp.f64 (log.f64 b_2)) (exp.f64 (log.f64 b_2)) (*.f64 (/.f64 (/.f64 (*.f64 (neg.f64 a) c) b_2) b_2) (*.f64 b_2 b_2)))","(fma.f64 (exp.f64 (log.f64 b_2)) (exp.f64 (log.f64 b_2)) (*.f64 (*.f64 b_2 b_2) (/.f64 (/.f64 (*.f64 (neg.f64 a) c) b_2) b_2)))","(fma.f64 (*.f64 (neg.f64 b_2) #s(literal -1 binary64)) b_2 (*.f64 (/.f64 (/.f64 (*.f64 (neg.f64 a) c) b_2) b_2) (*.f64 b_2 b_2)))","(fma.f64 (*.f64 (neg.f64 b_2) #s(literal -1 binary64)) b_2 (*.f64 (*.f64 b_2 b_2) (/.f64 (/.f64 (*.f64 (neg.f64 a) c) b_2) b_2)))","(fma.f64 #s(literal -1 binary64) (*.f64 b_2 (neg.f64 b_2)) (*.f64 (/.f64 (/.f64 (*.f64 (neg.f64 a) c) b_2) b_2) (*.f64 b_2 b_2)))","(fma.f64 #s(literal -1 binary64) (*.f64 b_2 (neg.f64 b_2)) (*.f64 (*.f64 b_2 b_2) (/.f64 (/.f64 (*.f64 (neg.f64 a) c) b_2) b_2)))","(fma.f64 (*.f64 b_2 b_2) #s(literal 1 binary64) (*.f64 (/.f64 (/.f64 (*.f64 (neg.f64 a) c) b_2) b_2) (*.f64 b_2 b_2)))","(fma.f64 (*.f64 b_2 b_2) #s(literal 1 binary64) (*.f64 (*.f64 b_2 b_2) (/.f64 (/.f64 (*.f64 (neg.f64 a) c) b_2) b_2)))","(fma.f64 #s(literal 1 binary64) (*.f64 b_2 b_2) (*.f64 (/.f64 (/.f64 (*.f64 (neg.f64 a) c) b_2) b_2) (*.f64 b_2 b_2)))","(fma.f64 #s(literal 1 binary64) (*.f64 b_2 b_2) (*.f64 (*.f64 b_2 b_2) (/.f64 (/.f64 (*.f64 (neg.f64 a) c) b_2) b_2)))","(fma.f64 (neg.f64 b_2) (neg.f64 b_2) (*.f64 (/.f64 (/.f64 (*.f64 (neg.f64 a) c) b_2) b_2) (*.f64 b_2 b_2)))","(fma.f64 (neg.f64 b_2) (neg.f64 b_2) (*.f64 (*.f64 b_2 b_2) (/.f64 (/.f64 (*.f64 (neg.f64 a) c) b_2) b_2)))","(fma.f64 b_2 b_2 (*.f64 (/.f64 (/.f64 (*.f64 (neg.f64 a) c) b_2) b_2) (*.f64 b_2 b_2)))","(fma.f64 b_2 b_2 (*.f64 (*.f64 b_2 b_2) (/.f64 (/.f64 (*.f64 (neg.f64 a) c) b_2) b_2)))","(+.f64 (*.f64 b_2 b_2) (*.f64 (/.f64 (/.f64 (*.f64 (neg.f64 a) c) b_2) b_2) (*.f64 b_2 b_2)))","(+.f64 (*.f64 b_2 b_2) (*.f64 (*.f64 b_2 b_2) (/.f64 (/.f64 (*.f64 (neg.f64 a) c) b_2) b_2)))","(*.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) (pow.f64 a #s(literal -1/2 binary64))) (pow.f64 a #s(literal -1/2 binary64)))","(*.f64 (pow.f64 a #s(literal -1/2 binary64)) (*.f64 (pow.f64 a #s(literal -1/2 binary64)) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2)))","(*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2)) (pow.f64 a #s(literal -1 binary64)))) (neg.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 a #s(literal -1 binary64)))) (neg.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2))) (neg.f64 a))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(literal 1 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2)))) (neg.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2)))","(/.f64 (neg.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))) (neg.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2)) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) a)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2)))) (neg.f64 (*.f64 a (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))) (neg.f64 (*.f64 a (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))))))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2)) (neg.f64 a))","(/.f64 (*.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2)) (pow.f64 a #s(literal -1 binary64))) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 a #s(literal -1 binary64))) (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2)) a)","(/.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(literal 1 binary64)) a)","(/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2))) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2))","(/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))))","(/.f64 (*.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2)) #s(literal 1 binary64)) (*.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) a))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) a))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2))) (*.f64 a (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 a (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))))","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) a)","(fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) (pow.f64 a #s(literal -1 binary64)) (*.f64 (neg.f64 b_2) (pow.f64 a #s(literal -1 binary64))))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 b_2)))","(+.f64 (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) (pow.f64 a #s(literal -1 binary64))) (*.f64 (neg.f64 b_2) (pow.f64 a #s(literal -1 binary64))))","(+.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 b_2)))","(*.f64 (pow.f64 a #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1/2 binary64)))","(*.f64 #s(literal 1 binary64) (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 a))","(pow.f64 (*.f64 a a) #s(literal -1/2 binary64))","(pow.f64 (/.f64 a #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (pow.f64 a #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 a #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 a))","(/.f64 #s(literal 1 binary64) (/.f64 a #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 a)))","(/.f64 #s(literal 1 binary64) a)","(exp.f64 (fma.f64 (log.f64 a) #s(literal -1/2 binary64) (*.f64 (log.f64 a) #s(literal -1/2 binary64))))","(exp.f64 (*.f64 (*.f64 (log.f64 a) #s(literal -1/2 binary64)) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 (*.f64 a a)) #s(literal -1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (pow.f64 a #s(literal -1/2 binary64))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 a) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2)) (pow.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2)))) (neg.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))))))","(/.f64 (-.f64 (*.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2)) (*.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) (*.f64 b_2 b_2))) (*.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2)))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))) (*.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))))","(/.f64 (neg.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2))) (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) (neg.f64 b_2))))","(/.f64 (neg.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2))) (neg.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2)))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (-.f64 (*.f64 b_2 b_2) (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) (neg.f64 b_2))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (neg.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))))","(/.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) (neg.f64 b_2)))","(/.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2)) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2))","(/.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (-.f64 (*.f64 b_2 b_2) (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) (neg.f64 b_2)))))","(/.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))))","(fma.f64 (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))) (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))) (neg.f64 b_2))","(fma.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 1/4 binary64)) (neg.f64 b_2))","(fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))))","(fma.f64 b_2 #s(literal -1 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))))","(-.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) #s(literal 0 binary64)) b_2)","(-.f64 (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2)) (/.f64 (*.f64 b_2 b_2) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2)))","(-.f64 (/.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))))","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2)","(+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) (neg.f64 b_2))","(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (pow.f64 (pow.f64 (*.f64 c a) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (*.f64 c a))","(*.f64 (*.f64 (neg.f64 a) c) (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)))","(*.f64 (/.f64 a b_2) c)","(*.f64 (/.f64 c b_2) a)","(*.f64 (*.f64 c a) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (*.f64 c a) b_2))","(*.f64 c (/.f64 a b_2))","(*.f64 a (/.f64 c b_2))","(pow.f64 (/.f64 (/.f64 (/.f64 b_2 a) c) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (*.f64 (neg.f64 a) c) #s(literal -1 binary64))) (neg.f64 b_2))","(/.f64 (neg.f64 (neg.f64 (*.f64 (neg.f64 a) c))) (neg.f64 (neg.f64 (neg.f64 b_2))))","(/.f64 (neg.f64 (*.f64 a #s(literal 1 binary64))) (neg.f64 (/.f64 b_2 c)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) a)) (neg.f64 (/.f64 b_2 c)))","(/.f64 (neg.f64 (*.f64 c #s(literal 1 binary64))) (neg.f64 (/.f64 b_2 a)))","(/.f64 (neg.f64 (*.f64 (*.f64 c a) #s(literal 1 binary64))) (neg.f64 b_2))","(/.f64 (/.f64 (*.f64 (neg.f64 a) c) #s(literal -1 binary64)) b_2)","(/.f64 (neg.f64 (*.f64 (neg.f64 a) c)) (neg.f64 (neg.f64 b_2)))","(/.f64 (*.f64 a #s(literal 1 binary64)) (/.f64 b_2 c))","(/.f64 (*.f64 #s(literal 1 binary64) a) (/.f64 b_2 c))","(/.f64 (*.f64 c #s(literal 1 binary64)) (/.f64 b_2 a))","(/.f64 (*.f64 (*.f64 c a) #s(literal 1 binary64)) b_2)","(/.f64 (neg.f64 c) (neg.f64 (/.f64 b_2 a)))","(/.f64 (*.f64 (neg.f64 a) c) (neg.f64 b_2))","(/.f64 (neg.f64 a) (neg.f64 (/.f64 b_2 c)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (/.f64 b_2 a) c) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 b_2 a) c)))","(/.f64 (*.f64 c a) b_2)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (/.f64 b_2 a) c))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (/.f64 b_2 a) c) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b_2 a) c))","(/.f64 c (/.f64 b_2 a))","(/.f64 a (/.f64 b_2 c))","(neg.f64 (/.f64 (*.f64 (neg.f64 a) c) b_2))","(exp.f64 (*.f64 (log.f64 (/.f64 (/.f64 b_2 a) c)) #s(literal -1 binary64)))","(*.f64 #s(literal -1/2 binary64) a)","(*.f64 a #s(literal -1/2 binary64))","(pow.f64 (*.f64 #s(literal -1/2 binary64) a) #s(literal 1 binary64))","(pow.f64 (/.f64 #s(literal -2 binary64) a) #s(literal -1 binary64))","(/.f64 (neg.f64 (neg.f64 a)) #s(literal -2 binary64))","(/.f64 (neg.f64 a) #s(literal 2 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal -2 binary64) a)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal -2 binary64) a))","(/.f64 a #s(literal -2 binary64))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (pow.f64 (pow.f64 c #s(literal -2 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (*.f64 c c))","(*.f64 (*.f64 (neg.f64 c) c) (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)))","(*.f64 (*.f64 c c) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 (/.f64 c b_2) c)","(*.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) c))","(*.f64 c (/.f64 c b_2))","(pow.f64 (/.f64 (/.f64 b_2 (*.f64 c c)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 b_2 (*.f64 c c)) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (*.f64 (neg.f64 c) c) #s(literal -1 binary64))) (neg.f64 b_2))","(/.f64 (neg.f64 (*.f64 (*.f64 c c) #s(literal 1 binary64))) (neg.f64 b_2))","(/.f64 (neg.f64 (neg.f64 (*.f64 (neg.f64 c) c))) (neg.f64 (neg.f64 (neg.f64 b_2))))","(/.f64 (neg.f64 (*.f64 c #s(literal 1 binary64))) (neg.f64 (/.f64 b_2 c)))","(/.f64 (/.f64 (*.f64 (neg.f64 c) c) #s(literal -1 binary64)) b_2)","(/.f64 (*.f64 (*.f64 c c) #s(literal 1 binary64)) b_2)","(/.f64 (neg.f64 (*.f64 (neg.f64 c) c)) (neg.f64 (neg.f64 b_2)))","(/.f64 (*.f64 c #s(literal 1 binary64)) (/.f64 b_2 c))","(/.f64 (neg.f64 c) (neg.f64 (/.f64 b_2 c)))","(/.f64 (*.f64 (neg.f64 c) c) (neg.f64 b_2))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 b_2 (*.f64 c c)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b_2 (*.f64 c c))))","(/.f64 (*.f64 c c) b_2)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 b_2 (*.f64 c c)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b_2 (*.f64 c c)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 b_2 (*.f64 c c)))","(/.f64 c (/.f64 b_2 c))","(neg.f64 (/.f64 (*.f64 (neg.f64 c) c) b_2))","(neg.f64 (/.f64 (*.f64 c c) (neg.f64 b_2)))","(exp.f64 (*.f64 (log.f64 (/.f64 b_2 (*.f64 c c))) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))) (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))))","(*.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 1/4 binary64)))","(pow.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) #s(literal 1 binary64))","(pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))","(fabs.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))))","(exp.f64 (log.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":274.7490234375,"type":"rewrite"},{"compiler":[[24974,2689]],"memory":[[386784,60555376]],"time":126.6201171875,"type":"eval"},{"alts":[["(/.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) (*.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))))))","fresh",48.67509837460948,"binary64"],["(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) a)","next",29.426324542377294,"binary64"],["(/.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2) a)","next",55.865902732609655,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64))))) a)","fresh",45.38974994417073,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","done",26.038966591759444,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","fresh",38.860972444426615,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 c (/.f64 b_2 a)))) b_2)))) a)","fresh",30.39156930412828,"binary64"],["(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 b_2 c))) a)","fresh",45.43018540486016,"binary64"],["(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a))) a)","done",45.40284165486016,"binary64"],["(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","done",45.97452960547499,"binary64"],["(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 a (/.f64 #s(literal -1/2 binary64) b_2)) c)) a)","fresh",45.97452960532581,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)))","fresh",29.534078302145733,"binary64"],["(*.f64 (pow.f64 (/.f64 a (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))))) #s(literal -1 binary64)))","fresh",51.62029405542837,"binary64"],["(*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) #s(approx (* (* b_2 b_2) (- 1 (* (/ c b_2) (/ a b_2)))) (*.f64 (neg.f64 a) c)))) b_2))","fresh",38.880503694426615,"binary64"],["(*.f64 (/.f64 #s(literal 1 binary64) a) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2))","next",37.4820537164563,"binary64"],["(exp.f64 (*.f64 (log.f64 (/.f64 a #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c)))) #s(literal -1 binary64)))","fresh",54.54106892104428,"binary64"],["(exp.f64 (*.f64 (log.f64 (/.f64 a #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)))) #s(literal -1 binary64)))","fresh",53.87047188511415,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/8 binary64)) (/.f64 (*.f64 c c) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2))","done",43.23256274955932,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))","next",41.79597787130958,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -2 binary64) (/.f64 a b_2)))","fresh",42.362028710332595,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","done",42.34249758422694,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (*.f64 (*.f64 #s(literal -2 binary64) (pow.f64 a #s(literal -1/2 binary64))) (pow.f64 a #s(literal -1/2 binary64)))))","fresh",53.453916633621404,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -1/2 binary64) a)) #s(literal -1 binary64)))))","next",53.509977129158294,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","done",42.299528834231644,"binary64"]],"compiler":[[69,25],[34,21],[21,14],[16,12],[13,10],[18,13],[35,22],[21,15],[21,15],[21,15],[21,15],[36,23],[107,32],[33,21],[28,18],[25,19],[21,17],[30,20],[35,24],[19,14],[19,14],[25,17],[23,18],[19,14],[69,25],[34,21],[21,14],[16,12],[18,13],[35,22],[21,15],[21,15],[36,23],[107,32],[33,21],[28,18],[25,19],[21,17],[35,24],[19,14],[25,17],[23,18]],"count":[[629,24]],"kept":[{"done":[3,3],"fresh":[13,8],"new":[608,10],"picked":[5,3]}],"memory":[[-2002016,33066640]],"min-error":[[3.5667928488138547,"binary64"]],"time":29.427978515625,"type":"prune"},{"egraph":[[0,8162,455,0.040526098],[7,7134,458,0.014766428],[6,4405,458,0.021013965],[5,3332,458,0.016310156],[4,2149,458,0.013441556],[3,719,512,0.008801673],[2,315,512,0.002694862],[1,156,524,0.001458082],[0,88,529,0.000804989],[0,60,535,0.000524257]],"inputs":[["(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) a)","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))","(*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)","#s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2)))","(-.f64 b_2 (/.f64 (*.f64 c a) b_2))","b_2","(/.f64 (*.f64 c a) b_2)","(*.f64 c a)","c","a","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))","(/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2)","#s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c))","(*.f64 #s(literal -1/2 binary64) c)","#s(literal -1/2 binary64)","c","b_2","(/.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2) a)","(-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2)","#s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2))","(fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)","(/.f64 c b_2)","c","b_2","(*.f64 #s(literal -1/2 binary64) a)","#s(literal -1/2 binary64)","a","(*.f64 (/.f64 #s(literal 1 binary64) a) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2))","(/.f64 #s(literal 1 binary64) a)","#s(literal 1 binary64)","a","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))","(*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))","(*.f64 b_2 b_2)","b_2","(-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))","(*.f64 (/.f64 c b_2) (/.f64 a b_2))","(/.f64 c b_2)","c","(/.f64 a b_2)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -1/2 binary64) a)) #s(literal -1 binary64)))))","(*.f64 b_2 (exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -1/2 binary64) a)) #s(literal -1 binary64))))","b_2","(exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -1/2 binary64) a)) #s(literal -1 binary64)))","(*.f64 (log.f64 (*.f64 #s(literal -1/2 binary64) a)) #s(literal -1 binary64))","(log.f64 (*.f64 #s(literal -1/2 binary64) a))","(*.f64 #s(literal -1/2 binary64) a)","#s(literal -1/2 binary64)","a","#s(literal -1 binary64)"]],"locations":[["(*.f64 b_2 (exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -1/2 binary64) a)) #s(literal -1 binary64))))","cost-diff",0],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -1/2 binary64) a)) #s(literal -1 binary64)))))","cost-diff",0],["(*.f64 (log.f64 (*.f64 #s(literal -1/2 binary64) a)) #s(literal -1 binary64))","cost-diff",1],["(exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -1/2 binary64) a)) #s(literal -1 binary64)))","cost-diff",3],["(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2)","cost-diff",0],["(/.f64 #s(literal 1 binary64) a)","cost-diff",0],["(*.f64 (/.f64 #s(literal 1 binary64) a) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2))","cost-diff",2],["(*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))","cost-diff",6],["(fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)","cost-diff",0],["#s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2))","cost-diff",0],["(-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2)","cost-diff",0],["(/.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2) a)","cost-diff",0],["(*.f64 #s(literal -1/2 binary64) c)","cost-diff",0],["#s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c))","cost-diff",0],["(/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2)","cost-diff",0],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))","cost-diff",0],["#s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))","cost-diff",0],["(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))","cost-diff",0],["(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)","cost-diff",0],["(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) a)","cost-diff",0]],"memory":[[-1112032,21205152]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) a)","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (fma.f64 (neg.f64 a) (/.f64 c b_2) b_2)) b_2))) b_2) a)","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (fma.f64 (neg.f64 a) (/.f64 c b_2) b_2)) b_2))) b_2)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (fma.f64 (neg.f64 a) (/.f64 c b_2) b_2)) b_2)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (fma.f64 (neg.f64 a) (/.f64 c b_2) b_2)) b_2))","(*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)","(*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (fma.f64 (neg.f64 a) (/.f64 c b_2) b_2)) b_2)","#s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2)))","#s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (fma.f64 (neg.f64 a) (/.f64 c b_2) b_2))","(-.f64 b_2 (/.f64 (*.f64 c a) b_2))","(fma.f64 (neg.f64 a) (/.f64 c b_2) b_2)","b_2","(/.f64 (*.f64 c a) b_2)","(*.f64 c a)","c","a","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))","(/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2)","#s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c))","(*.f64 #s(literal -1/2 binary64) c)","#s(literal -1/2 binary64)","c","b_2","(/.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2) a)","(/.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) a)","(-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2)","(-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2)","#s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2))","#s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2))","(fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)","(fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)","(/.f64 c b_2)","c","b_2","(*.f64 #s(literal -1/2 binary64) a)","#s(literal -1/2 binary64)","a","(*.f64 (/.f64 #s(literal 1 binary64) a) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2))","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) b_2) a)","(/.f64 #s(literal 1 binary64) a)","#s(literal 1 binary64)","a","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2)","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))) b_2)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))","#s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 c) a (*.f64 b_2 b_2)))","(*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))","(fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))","(*.f64 b_2 b_2)","b_2","(-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))","(-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2))","(*.f64 (/.f64 c b_2) (/.f64 a b_2))","(/.f64 (/.f64 (*.f64 c a) b_2) b_2)","(/.f64 c b_2)","c","(/.f64 a b_2)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -1/2 binary64) a)) #s(literal -1 binary64)))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 #s(literal -2 binary64) a) b_2))","(*.f64 b_2 (exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -1/2 binary64) a)) #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -2 binary64) a) b_2)","b_2","(exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -1/2 binary64) a)) #s(literal -1 binary64)))","(/.f64 #s(literal -2 binary64) a)","(*.f64 (log.f64 (*.f64 #s(literal -1/2 binary64) a)) #s(literal -1 binary64))","(neg.f64 (log.f64 (*.f64 #s(literal -1/2 binary64) a)))","(log.f64 (*.f64 #s(literal -1/2 binary64) a))","(*.f64 #s(literal -1/2 binary64) a)","#s(literal -1/2 binary64)","a","#s(literal -1 binary64)"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":180.81396484375,"type":"simplify"},{"compiler":[[311,46]],"locations":[["(log.f64 (*.f64 #s(literal -1/2 binary64) a))","accuracy",0.0],["(*.f64 b_2 (exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -1/2 binary64) a)) #s(literal -1 binary64))))","accuracy",0.08984375],["(exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -1/2 binary64) a)) #s(literal -1 binary64)))","accuracy",3.106919622196231],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -1/2 binary64) a)) #s(literal -1 binary64)))))","accuracy",22.908775970142436],["(*.f64 (/.f64 #s(literal 1 binary64) a) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2))","accuracy",2.1976955740819766],["(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2)","accuracy",5.660644888365302],["(*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))","accuracy",7.6864599867243495],["(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))","accuracy",11.865056676058924],["(/.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2) a)","accuracy",2.1508205740819766],["(fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)","accuracy",2.351937149262505],["(-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2)","accuracy",5.660644888365302],["#s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2))","accuracy",23.46521722420452],["(*.f64 #s(literal -1/2 binary64) c)","accuracy",0.0],["(/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2)","accuracy",0.01171875],["#s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c))","accuracy",13.549330185777189],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))","accuracy",23.398313932530844],["(/.f64 (*.f64 c a) b_2)","accuracy",1.5014021549394887],["(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) a)","accuracy",2.1508205740819766],["(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)","accuracy",5.660644888365302],["(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))","accuracy",11.865056676058924]],"memory":[[1058576,47840256]],"mixsample":[[0.13134765625,"ival-sub",1200],[2.932373046875,"adjust",800],[19.95166015625,"ival-div",0],[0.092041015625,"ival-sqrt",2000],[3.757080078125,"ival-exp",0],[0.105224609375,"ival-mult",1200],[0.054931640625,"ival-sub",1600],[0.056884765625,"ival-sub",2000],[0.09716796875,"ival-sqrt",800],[0.122314453125,"ival-assert",0],[6.406005859375,"ival-sub",0],[0.21875,"ival-sqrt",1200],[0.059814453125,"ival-sub",400],[2.4765625,"ival-sqrt",0],[0.012939453125,"ival-sqrt",4400],[1.6787109375,"adjust",2000],[0.070068359375,"ival-sub",2400],[0.006103515625,"ival-sub",4400],[0.12109375,"ival-mult",800],[4.176025390625,"ival-add",0],[0.10302734375,"ival-sqrt",1600],[0.09423828125,"ival-mult",400],[0.053955078125,"ival-sub",800],[48.633544921875,"ival-mult",0],[0.0068359375,"ival-mult",1600],[0.05078125,"adjust",2800],[0.1220703125,"ival-sqrt",2400],[3.756103515625,"ival-log",0],[0.25390625,"ival-true",0],[0.558349609375,"exact",0],[0.109130859375,"ival-sqrt",400],[1.22021484375,"ival-neg",0]],"outcomes":[[7.509521484375,1,"valid",13],[20.9697265625,2,"valid",26],[38.707275390625,0,"invalid",120],[0.819091796875,3,"valid",1],[58.726806640625,0,"valid",96]],"time":165.64208984375,"type":"localize"},{"count":[[23,131]],"inputs":[["(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) a)","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))","(/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2)","#s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c))","(*.f64 #s(literal -1/2 binary64) c)","(/.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2) a)","(-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2)","#s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2))","(fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)","(*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))","(*.f64 (/.f64 #s(literal 1 binary64) a) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2))","(/.f64 #s(literal 1 binary64) a)","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2)","(exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -1/2 binary64) a)) #s(literal -1 binary64)))","(*.f64 (log.f64 (*.f64 #s(literal -1/2 binary64) a)) #s(literal -1 binary64))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -1/2 binary64) a)) #s(literal -1 binary64)))))","(*.f64 b_2 (exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -1/2 binary64) a)) #s(literal -1 binary64))))","(/.f64 (*.f64 c a) b_2)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))","(log.f64 (*.f64 #s(literal -1/2 binary64) a))"]],"memory":[[-3715488,35818352]],"outputs":[["(* -1/2 (/ c b_2))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))))))","(* -1/2 (/ (* a c) b_2))","(* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5)))))))))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(* -1/2 c)","(+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))))","(/ 1 a)","(/ -2 a)","(* -1 (+ (log -1/2) (log a)))","(* -2 (/ b_2 a))","(/ (* a c) b_2)","(+ (log -1/2) (log a))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a c))","(* a (- (/ (pow b_2 2) a) c))","(* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))","(* a (+ (* -1/2 (/ c (* a b_2))) (* -1/8 (/ (pow c 2) (pow b_2 3)))))","(* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))","(* a (+ (* -1/2 (/ c a)) (* -1/8 (/ (pow c 2) (pow b_2 2)))))","(* a (+ (* -1/2 (/ c b_2)) (/ b_2 a)))","(* a (+ (* -1 c) (/ (pow b_2 2) a)))","(* -1 (+ (log -1/2) (* -1 (log (/ 1 a)))))","(+ (log -1/2) (* -1 (log (/ 1 a))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(* -1 (* a (+ (* 1/8 (/ (pow c 2) (pow b_2 3))) (* 1/2 (/ c (* a b_2))))))","(* -1 (* a (+ (* 1/8 (/ (pow c 2) (pow b_2 2))) (* 1/2 (/ c a)))))","(* -1 (* a (+ (* -1 (/ b_2 a)) (* 1/2 (/ c b_2)))))","(* -1 (* a (+ c (* -1 (/ (pow b_2 2) a)))))","(* -1 (+ (log 1/2) (* -1 (log (/ -1 a)))))","(+ (log 1/2) (* -1 (log (/ -1 a))))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(- (pow b_2 2) (* a c))","(/ (+ (* -1/2 (* (pow b_2 2) c)) (* -1/8 (* a (pow c 2)))) (pow b_2 3))","(/ (+ (* -1/2 (* (pow b_2 2) c)) (* -1/8 (* a (pow c 2)))) (pow b_2 2))","(/ (+ (* -1/2 (* a c)) (pow b_2 2)) b_2)","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2)","(/ (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a)))))))","(* -2 b_2)","(* -1 (* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 b_2)","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(* -1 (* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 1)))","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))) (* -1/16 (/ (pow a 2) (pow b_2 5))))))) (* 1/2 (/ 1 b_2))))","(* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3)))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5)))))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow a 3) (pow b_2 5)))))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(* c (- (* -1/8 (/ (* a c) (pow b_2 2))) 1/2))","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (- (/ (pow b_2 2) c) a))","(* (pow c 2) (- (* -1/8 (/ a (pow b_2 3))) (* 1/2 (/ 1 (* b_2 c)))))","(* (pow c 2) (- (* -1/8 (/ a (pow b_2 2))) (* 1/2 (/ 1 c))))","(* c (+ (* -1/2 (/ a b_2)) (/ b_2 c)))","(* c (+ (* -1 a) (/ (pow b_2 2) c)))","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))","(* -1 (* c (+ (* -1 (/ b_2 c)) (* 1/2 (/ a b_2)))))","(* -1 (* c (+ a (* -1 (/ (pow b_2 2) c)))))"]],"series":[[5.0419921875,"((/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) b_2) (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (* -1/2 c) (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (sqrt (- (* b_2 b_2) (* a c))) (+ (* (/ c b_2) (* -1/2 a)) b_2) (* (* b_2 b_2) (- 1 (* (/ c b_2) (/ a b_2)))) (* (/ 1 a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) (/ 1 a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (exp (* (log (* -1/2 a)) -1)) (* (log (* -1/2 a)) -1) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 (exp (* (log (* -1/2 a)) -1))) (/ (* c a) b_2) (sqrt (- (* b_2 b_2) (* a c))) (log (* -1/2 a)))","c","-inf"],[4.782958984375,"((/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) b_2) (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (* -1/2 c) (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (sqrt (- (* b_2 b_2) (* a c))) (+ (* (/ c b_2) (* -1/2 a)) b_2) (* (* b_2 b_2) (- 1 (* (/ c b_2) (/ a b_2)))) (* (/ 1 a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) (/ 1 a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (exp (* (log (* -1/2 a)) -1)) (* (log (* -1/2 a)) -1) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 (exp (* (log (* -1/2 a)) -1))) (/ (* c a) b_2) (sqrt (- (* b_2 b_2) (* a c))) (log (* -1/2 a)))","c","inf"],[3.444091796875,"((/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) b_2) (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (* -1/2 c) (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (sqrt (- (* b_2 b_2) (* a c))) (+ (* (/ c b_2) (* -1/2 a)) b_2) (* (* b_2 b_2) (- 1 (* (/ c b_2) (/ a b_2)))) (* (/ 1 a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) (/ 1 a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (exp (* (log (* -1/2 a)) -1)) (* (log (* -1/2 a)) -1) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 (exp (* (log (* -1/2 a)) -1))) (/ (* c a) b_2) (sqrt (- (* b_2 b_2) (* a c))) (log (* -1/2 a)))","c","0"],[4.657958984375,"((/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) b_2) (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (* -1/2 c) (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (sqrt (- (* b_2 b_2) (* a c))) (+ (* (/ c b_2) (* -1/2 a)) b_2) (* (* b_2 b_2) (- 1 (* (/ c b_2) (/ a b_2)))) (* (/ 1 a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) (/ 1 a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (exp (* (log (* -1/2 a)) -1)) (* (log (* -1/2 a)) -1) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 (exp (* (log (* -1/2 a)) -1))) (/ (* c a) b_2) (sqrt (- (* b_2 b_2) (* a c))) (log (* -1/2 a)))","b_2","-inf"],[2.912109375,"((/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) b_2) (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (* -1/2 c) (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (sqrt (- (* b_2 b_2) (* a c))) (+ (* (/ c b_2) (* -1/2 a)) b_2) (* (* b_2 b_2) (- 1 (* (/ c b_2) (/ a b_2)))) (* (/ 1 a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) (/ 1 a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (exp (* (log (* -1/2 a)) -1)) (* (log (* -1/2 a)) -1) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 (exp (* (log (* -1/2 a)) -1))) (/ (* c a) b_2) (sqrt (- (* b_2 b_2) (* a c))) (log (* -1/2 a)))","b_2","inf"],[2.715087890625,"((/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) b_2) (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (* -1/2 c) (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (sqrt (- (* b_2 b_2) (* a c))) (+ (* (/ c b_2) (* -1/2 a)) b_2) (* (* b_2 b_2) (- 1 (* (/ c b_2) (/ a b_2)))) (* (/ 1 a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) (/ 1 a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (exp (* (log (* -1/2 a)) -1)) (* (log (* -1/2 a)) -1) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 (exp (* (log (* -1/2 a)) -1))) (/ (* c a) b_2) (sqrt (- (* b_2 b_2) (* a c))) (log (* -1/2 a)))","b_2","0"],[20.206787109375,"((/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) b_2) (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (* -1/2 c) (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (sqrt (- (* b_2 b_2) (* a c))) (+ (* (/ c b_2) (* -1/2 a)) b_2) (* (* b_2 b_2) (- 1 (* (/ c b_2) (/ a b_2)))) (* (/ 1 a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) (/ 1 a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (exp (* (log (* -1/2 a)) -1)) (* (log (* -1/2 a)) -1) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 (exp (* (log (* -1/2 a)) -1))) (/ (* c a) b_2) (sqrt (- (* b_2 b_2) (* a c))) (log (* -1/2 a)))","a","-inf"],[17.5,"((/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) b_2) (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (* -1/2 c) (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (sqrt (- (* b_2 b_2) (* a c))) (+ (* (/ c b_2) (* -1/2 a)) b_2) (* (* b_2 b_2) (- 1 (* (/ c b_2) (/ a b_2)))) (* (/ 1 a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) (/ 1 a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (exp (* (log (* -1/2 a)) -1)) (* (log (* -1/2 a)) -1) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 (exp (* (log (* -1/2 a)) -1))) (/ (* c a) b_2) (sqrt (- (* b_2 b_2) (* a c))) (log (* -1/2 a)))","a","inf"],[44.35205078125,"((/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (sqrt (- (* b_2 b_2) (* a c))) (- (* b_2 b_2) (* a c)) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) b_2) (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (* -1/2 c) (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (sqrt (- (* b_2 b_2) (* a c))) (+ (* (/ c b_2) (* -1/2 a)) b_2) (* (* b_2 b_2) (- 1 (* (/ c b_2) (/ a b_2)))) (* (/ 1 a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) (/ 1 a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (exp (* (log (* -1/2 a)) -1)) (* (log (* -1/2 a)) -1) (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (* b_2 (exp (* (log (* -1/2 a)) -1))) (/ (* c a) b_2) (sqrt (- (* b_2 b_2) (* a c))) (log (* -1/2 a)))","a","0"]],"time":112.552001953125,"type":"series"},{"count":[[131,130]],"egraph":[[0,8217,2955,0.112473397],[2,6139,3108,0.030167261],[1,1885,3164,0.023409152],[0,595,3200,0.006426719]],"inputs":[["(* -1/2 (/ c b_2))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))))))","(* -1/2 (/ (* a c) b_2))","(* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5)))))))))","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(pow b_2 2)","(+ (* -1 (* a c)) (pow b_2 2))","(* -1/2 c)","(+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))))","(/ 1 a)","(/ -2 a)","(* -1 (+ (log -1/2) (log a)))","(* -2 (/ b_2 a))","(/ (* a c) b_2)","(+ (log -1/2) (log a))","(* (sqrt (/ c a)) (sqrt -1))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* (sqrt (* a c)) (sqrt -1))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a c))","(* a (- (/ (pow b_2 2) a) c))","(* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))","(* a (+ (* -1/2 (/ c (* a b_2))) (* -1/8 (/ (pow c 2) (pow b_2 3)))))","(* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))","(* a (+ (* -1/2 (/ c a)) (* -1/8 (/ (pow c 2) (pow b_2 2)))))","(* a (+ (* -1/2 (/ c b_2)) (/ b_2 a)))","(* a (+ (* -1 c) (/ (pow b_2 2) a)))","(* -1 (+ (log -1/2) (* -1 (log (/ 1 a)))))","(+ (log -1/2) (* -1 (log (/ 1 a))))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(* -1 (* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(* -1 (* a (+ (* 1/8 (/ (pow c 2) (pow b_2 3))) (* 1/2 (/ c (* a b_2))))))","(* -1 (* a (+ (* 1/8 (/ (pow c 2) (pow b_2 2))) (* 1/2 (/ c a)))))","(* -1 (* a (+ (* -1 (/ b_2 a)) (* 1/2 (/ c b_2)))))","(* -1 (* a (+ c (* -1 (/ (pow b_2 2) a)))))","(* -1 (+ (log 1/2) (* -1 (log (/ -1 a)))))","(+ (log 1/2) (* -1 (log (/ -1 a))))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(- (pow b_2 2) (* a c))","(/ (+ (* -1/2 (* (pow b_2 2) c)) (* -1/8 (* a (pow c 2)))) (pow b_2 3))","(/ (+ (* -1/2 (* (pow b_2 2) c)) (* -1/8 (* a (pow c 2)))) (pow b_2 2))","(/ (+ (* -1/2 (* a c)) (pow b_2 2)) b_2)","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2)","(/ (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2)))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a))))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a)))))))","(* -2 b_2)","(* -1 (* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 b_2)","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(* -1 (* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 1)))","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))) (* -1/16 (/ (pow a 2) (pow b_2 5))))))) (* 1/2 (/ 1 b_2))))","(* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3)))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5)))))))","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow a 3) (pow b_2 5)))))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(* c (- (* -1/8 (/ (* a c) (pow b_2 2))) 1/2))","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* c (- (/ (pow b_2 2) c) a))","(* (pow c 2) (- (* -1/8 (/ a (pow b_2 3))) (* 1/2 (/ 1 (* b_2 c)))))","(* (pow c 2) (- (* -1/8 (/ a (pow b_2 2))) (* 1/2 (/ 1 c))))","(* c (+ (* -1/2 (/ a b_2)) (/ b_2 c)))","(* c (+ (* -1 a) (/ (pow b_2 2) c)))","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(* -1 (* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))","(* -1 (* c (+ (* -1 (/ b_2 c)) (* 1/2 (/ a b_2)))))","(* -1 (* c (+ a (* -1 (/ (pow b_2 2) c)))))"]],"memory":[[1552304,50102144]],"method":["egg-herbie"],"outputs":[["(* -1/2 (/ c b_2))","(*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))","(+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))","(fma.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))","(fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 #s(literal 5/64 binary64) b_2)) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 5 binary64)))) a (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","(* -1/2 (/ (* a c) b_2))","(*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c)","(* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))))","(*.f64 (fma.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a)","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a)","(* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* a (+ (* -1/2 (/ (* a (+ (* 1/64 (/ (pow c 4) (pow b_2 6))) (* 1/16 (/ (pow c 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow c 3) (pow b_2 5)))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 (pow.f64 c #s(literal 4 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 #s(literal 5/64 binary64) b_2)) (/.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 5 binary64)))) a (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a)","b_2","(+ b_2 (* -1/2 (/ (* a c) b_2)))","(fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* -1/8 (/ (* a (pow c 2)) (pow b_2 3))))))","(fma.f64 (fma.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a b_2)","(+ b_2 (* a (+ (* -1/2 (/ c b_2)) (* a (+ (* -1/8 (/ (pow c 2) (pow b_2 3))) (* -1/16 (/ (* a (pow c 3)) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) a) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))) a b_2)","(pow b_2 2)","(*.f64 b_2 b_2)","(+ (* -1 (* a c)) (pow b_2 2))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(* -1/2 c)","(*.f64 #s(literal -1/2 binary64) c)","(+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))))","(fma.f64 (/.f64 (*.f64 #s(literal -1/8 binary64) a) b_2) (/.f64 (*.f64 c c) b_2) (*.f64 #s(literal -1/2 binary64) c))","(/ 1 a)","(/.f64 #s(literal 1 binary64) a)","(/ -2 a)","(/.f64 #s(literal -2 binary64) a)","(* -1 (+ (log -1/2) (log a)))","(neg.f64 (+.f64 (log.f64 a) (log.f64 #s(literal -1/2 binary64))))","(* -2 (/ b_2 a))","(*.f64 (/.f64 b_2 a) #s(literal -2 binary64))","(/ (* a c) b_2)","(*.f64 c (/.f64 a b_2))","(+ (log -1/2) (log a))","(+.f64 (log.f64 a) (log.f64 #s(literal -1/2 binary64)))","(* (sqrt (/ c a)) (sqrt -1))","(*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b_2) a))","(+ (* -1 (/ b_2 a)) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b_2) a)))","(+ (* -1 (/ b_2 a)) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b_2) a))))","(* (sqrt (* a c)) (sqrt -1))","(*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)))","(* a (+ (* -1 (/ b_2 a)) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b_2) a)) a)","(* a (- (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))) (/ b_2 a)))","(*.f64 (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b_2) a))) a)","(* a (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))) (/ b_2 a)))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (neg.f64 b_2) a)))) a)","(* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))) a)","(* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)))))) a)","(* -1 (* a c))","(*.f64 (neg.f64 a) c)","(* a (- (/ (pow b_2 2) a) c))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)","(* -1/8 (/ (* a (pow c 2)) (pow b_2 3)))","(*.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 3 binary64)))))","(* a (+ (* -1/2 (/ c (* a b_2))) (* -1/8 (/ (pow c 2) (pow b_2 3)))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a)","(* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))","(*.f64 (/.f64 (*.f64 #s(literal -1/8 binary64) a) b_2) (/.f64 (*.f64 c c) b_2))","(* a (+ (* -1/2 (/ c a)) (* -1/8 (/ (pow c 2) (pow b_2 2)))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 c c) b_2) (*.f64 (/.f64 c a) #s(literal -1/2 binary64))) a)","(* a (+ (* -1/2 (/ c b_2)) (/ b_2 a)))","(*.f64 (fma.f64 (/.f64 c b_2) #s(literal -1/2 binary64) (/.f64 b_2 a)) a)","(* a (+ (* -1 c) (/ (pow b_2 2) a)))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)","(* -1 (+ (log -1/2) (* -1 (log (/ 1 a)))))","(neg.f64 (+.f64 (log.f64 a) (log.f64 #s(literal -1/2 binary64))))","(+ (log -1/2) (* -1 (log (/ 1 a))))","(+.f64 (log.f64 a) (log.f64 #s(literal -1/2 binary64)))","(* -1 (* (sqrt (/ c a)) (sqrt -1)))","(*.f64 (neg.f64 (sqrt.f64 #s(literal -1 binary64))) (sqrt.f64 (/.f64 c a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ b_2 a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* 1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1))))) a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 1/2 binary64)) b_2) a)))","(+ (* -1 (* (sqrt (/ c a)) (sqrt -1))) (* -1 (/ (+ b_2 (* -1 (/ (+ (* -1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1)))) (* 1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1))))) a))) a)))","(neg.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (-.f64 b_2 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal 1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 #s(literal -1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2))))) a)) a)))","(* -1 (* (sqrt (* a c)) (sqrt -1)))","(*.f64 (sqrt.f64 (*.f64 c a)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))","(* -1 (* a (+ (* (sqrt (/ c a)) (sqrt -1)) (/ b_2 a))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 b_2 a)))","(* -1 (* a (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (-.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (neg.f64 b_2)) a)))","(* -1 (* a (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ a c)) (* (pow b_2 2) (sqrt -1))))) a)) b_2) a)) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a)) (/.f64 (+.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (*.f64 b_2 b_2)) (*.f64 #s(literal -1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (pow.f64 b_2 #s(literal 4 binary64)))))) a) b_2) a)))","(* -1 (* a (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))","(*.f64 (neg.f64 a) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 b_2 b_2) (sqrt.f64 (/.f64 c a)))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1))))))","(*.f64 (neg.f64 a) (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 b_2 b_2) (sqrt.f64 (/.f64 c a))))))","(* -1 (* a (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 7) (pow c 5)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ c a)) (sqrt -1)))))))","(*.f64 (neg.f64 a) (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 7 binary64))))) (pow.f64 b_2 #s(literal 6 binary64)) (*.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) (pow.f64 b_2 #s(literal 4 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c)))) (*.f64 b_2 b_2) (sqrt.f64 (/.f64 c a))))))","(* -1 (* a (- (* -1 (/ (pow b_2 2) a)) (* -1 c))))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)","(* -1 (* a (+ (* 1/8 (/ (pow c 2) (pow b_2 3))) (* 1/2 (/ c (* a b_2))))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) (/.f64 (*.f64 (*.f64 c c) #s(literal -1/8 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) a)","(* -1 (* a (+ (* 1/8 (/ (pow c 2) (pow b_2 2))) (* 1/2 (/ c a)))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 c c) b_2) (*.f64 (/.f64 c a) #s(literal -1/2 binary64))) a)","(* -1 (* a (+ (* -1 (/ b_2 a)) (* 1/2 (/ c b_2)))))","(*.f64 (fma.f64 (/.f64 c b_2) #s(literal -1/2 binary64) (/.f64 b_2 a)) a)","(* -1 (* a (+ c (* -1 (/ (pow b_2 2) a)))))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 a)) c) a)","(* -1 (+ (log 1/2) (* -1 (log (/ -1 a)))))","(-.f64 (log.f64 (/.f64 #s(literal -1 binary64) a)) (log.f64 #s(literal 1/2 binary64)))","(+ (log 1/2) (* -1 (log (/ -1 a))))","(-.f64 (log.f64 #s(literal 1/2 binary64)) (log.f64 (/.f64 #s(literal -1 binary64) a)))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ b_2 (sqrt -1)))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (/.f64 #s(literal -1 binary64) a)) b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (/ 1 (sqrt -1)))))) (/ 1 a))) (* (sqrt (/ c a)) (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 5 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) b_2 (/.f64 #s(literal -1 binary64) a)) b_2 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (sqrt.f64 (/.f64 c a))))","(+ (* -1 b_2) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64)) (neg.f64 b_2))","(+ (* b_2 (- (* 1/2 (* (sqrt (/ 1 (* a c))) (/ b_2 (sqrt -1)))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) #s(literal -1 binary64)) b_2 (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* b_2 (- (* b_2 (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))) 1)) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) b_2 #s(literal -1 binary64)) b_2 (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (* a c)) (sqrt -1)))","(fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (pow (sqrt -1) 3)))) (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))))))","(fma.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (/.f64 (*.f64 b_2 b_2) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) #s(literal -1/8 binary64) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(+ (* (sqrt (* a c)) (sqrt -1)) (* (pow b_2 2) (+ (* 1/2 (* (sqrt (/ 1 (* a c))) (/ 1 (sqrt -1)))) (* (pow b_2 2) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ 1 (pow (sqrt -1) 3)))) (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 2) (pow (sqrt -1) 5)))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (*.f64 b_2 (/.f64 b_2 (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (neg.f64 (sqrt.f64 #s(literal -1 binary64)))) #s(literal -1/8 binary64))) (*.f64 b_2 b_2) (*.f64 (/.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64))) #s(literal 1/2 binary64))) (*.f64 b_2 b_2) (*.f64 (sqrt.f64 (*.f64 c a)) (sqrt.f64 #s(literal -1 binary64))))","(- (pow b_2 2) (* a c))","(fma.f64 (neg.f64 a) c (*.f64 b_2 b_2))","(/ (+ (* -1/2 (* (pow b_2 2) c)) (* -1/8 (* a (pow c 2)))) (pow b_2 3))","(/.f64 (*.f64 c (fma.f64 (*.f64 #s(literal -1/8 binary64) c) a (*.f64 #s(literal -1/2 binary64) (*.f64 b_2 b_2)))) (pow.f64 b_2 #s(literal 3 binary64)))","(/ (+ (* -1/2 (* (pow b_2 2) c)) (* -1/8 (* a (pow c 2)))) (pow b_2 2))","(/.f64 (*.f64 c (fma.f64 (*.f64 #s(literal -1/8 binary64) c) a (*.f64 #s(literal -1/2 binary64) (*.f64 b_2 b_2)))) (*.f64 b_2 b_2))","(/ (+ (* -1/2 (* a c)) (pow b_2 2)) b_2)","(/.f64 (fma.f64 (*.f64 #s(literal -1/2 binary64) c) a (*.f64 b_2 b_2)) b_2)","(/ (+ (* -1/2 c) (* -1/8 (/ (* a (pow c 2)) (pow b_2 2)))) b_2)","(/.f64 (fma.f64 (/.f64 (*.f64 #s(literal -1/8 binary64) a) b_2) (/.f64 (*.f64 c c) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2)","(/ (+ (* -1/2 c) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4))))) b_2)","(/.f64 (fma.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 (/.f64 c b_2) (/.f64 c b_2)) (fma.f64 (*.f64 #s(literal -1/16 binary64) (*.f64 a a)) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 #s(literal -1/2 binary64) c))) b_2)","(/ (+ (* -1/2 c) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (* a (pow b_2 6)))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 4)))))) b_2)","(/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 #s(literal 5/64 binary64) a) c) (fma.f64 (*.f64 a #s(literal -1/8 binary64)) (*.f64 (/.f64 c b_2) (/.f64 c b_2)) (/.f64 (*.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 4 binary64))))) b_2)","(/ (+ (* -1/2 (* a c)) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2)))) b_2)","(/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) b_2) (*.f64 (*.f64 #s(literal -1/2 binary64) c) a)) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4))))) b_2)","(/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) b_2) (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64))) (*.f64 (*.f64 #s(literal -1/2 binary64) c) a))) b_2)","(/ (+ (* -1/2 (* a c)) (+ (* -1/2 (/ (+ (* 1/64 (* (pow a 4) (pow c 4))) (* 1/16 (* (pow a 4) (pow c 4)))) (pow b_2 6))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 2))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 4)))))) b_2)","(/.f64 (fma.f64 #s(literal -1/2 binary64) (fma.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) (pow.f64 c #s(literal 4 binary64))) (/.f64 #s(literal 5/64 binary64) (pow.f64 b_2 #s(literal 6 binary64))) (*.f64 c a)) (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) a) a) (*.f64 (/.f64 c b_2) (/.f64 c b_2)) (*.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 4 binary64)))))) b_2)","(* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2)))))","(*.f64 (fma.f64 (/.f64 (*.f64 c (/.f64 a b_2)) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64)) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))))))","(*.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (*.f64 c (/.f64 a b_2)) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64))) b_2)","(* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6)))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) a) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 4 binary64)))) (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (*.f64 (/.f64 (*.f64 c (/.f64 a b_2)) b_2) #s(literal -1/2 binary64)))) b_2 b_2)","(* (pow b_2 2) (+ 1 (* -1 (/ (* a c) (pow b_2 2)))))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (*.f64 c (/.f64 a b_2)) b_2)) b_2) b_2)","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (* 2 (/ 1 a)))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (/.f64 c b_2) b_2) #s(literal -1/2 binary64) (/.f64 #s(literal 2 binary64) a)))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (* 2 (/ 1 a))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 c b_2) (fma.f64 (*.f64 (*.f64 c c) (/.f64 a (pow.f64 b_2 #s(literal 4 binary64)))) #s(literal -1/8 binary64) (/.f64 #s(literal 2 binary64) a))))","(* -1 (* b_2 (+ (* -1/2 (/ c (pow b_2 2))) (+ (* -1/8 (/ (* a (pow c 2)) (pow b_2 4))) (+ (* -1/16 (/ (* (pow a 2) (pow c 3)) (pow b_2 6))) (* 2 (/ 1 a)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 c b_2) (fma.f64 (*.f64 (*.f64 c c) a) (/.f64 #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal 4 binary64))) (fma.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c #s(literal 3 binary64)) a) a) (pow.f64 b_2 #s(literal 6 binary64))) #s(literal -1/16 binary64) (/.f64 #s(literal 2 binary64) a)))))","(* -2 b_2)","(*.f64 #s(literal -2 binary64) b_2)","(* -1 (* b_2 (+ 2 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (*.f64 c (/.f64 a b_2)) b_2) #s(literal -1/2 binary64) #s(literal 2 binary64)))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (*.f64 c (/.f64 a b_2)) b_2) #s(literal -1/2 binary64) #s(literal 2 binary64))))","(* -1 (* b_2 (+ 2 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(*.f64 (neg.f64 b_2) (+.f64 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (*.f64 c (/.f64 a b_2)) b_2) #s(literal -1/2 binary64) #s(literal 2 binary64))) (*.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))))))","(* -1 b_2)","(neg.f64 b_2)","(* -1 (* b_2 (+ 1 (* -1/2 (/ (* a c) (pow b_2 2))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (*.f64 c (/.f64 a b_2)) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64)))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4)))))))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 c c) a) a) (pow.f64 b_2 #s(literal 4 binary64))) #s(literal -1/8 binary64) (fma.f64 (/.f64 (*.f64 c (/.f64 a b_2)) b_2) #s(literal -1/2 binary64) #s(literal 1 binary64))))","(* -1 (* b_2 (+ 1 (+ (* -1/2 (/ (* a c) (pow b_2 2))) (+ (* -1/8 (/ (* (pow a 2) (pow c 2)) (pow b_2 4))) (* -1/16 (/ (* (pow a 3) (pow c 3)) (pow b_2 6))))))))","(neg.f64 (fma.f64 (fma.f64 (*.f64 (*.f64 #s(literal -1/8 binary64) a) a) (*.f64 c (/.f64 c (pow.f64 b_2 #s(literal 4 binary64)))) (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 (pow.f64 c #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (*.f64 (/.f64 (*.f64 c (/.f64 a b_2)) b_2) #s(literal -1/2 binary64)))) b_2 b_2))","(* -1 (/ (+ (* 1/8 (/ (* a (pow c 2)) (pow b_2 2))) (* 1/2 c)) b_2))","(/.f64 (fma.f64 (*.f64 a #s(literal 1/8 binary64)) (*.f64 (/.f64 c b_2) (/.f64 c b_2)) (*.f64 #s(literal 1/2 binary64) c)) (neg.f64 b_2))","(* -1 (* b_2 (- (* 1/2 (/ (* a c) (pow b_2 2))) 1)))","(*.f64 (neg.f64 b_2) (fma.f64 (/.f64 (*.f64 c (/.f64 a b_2)) b_2) #s(literal 1/2 binary64) #s(literal -1 binary64)))","(* c (- (* -1/8 (/ (* a c) (pow b_2 3))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (*.f64 c #s(literal -1/8 binary64)) (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) (/.f64 #s(literal -1/2 binary64) b_2)) c)","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* -1/16 (/ (* (pow a 2) c) (pow b_2 5))))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (fma.f64 (*.f64 c #s(literal -1/16 binary64)) (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 5 binary64)))) (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64))) c (/.f64 #s(literal -1/2 binary64) b_2)) c)","(* c (- (* c (+ (* -1/8 (/ a (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) (* a b_2))) (* -1/16 (/ (pow a 2) (pow b_2 5))))))) (* 1/2 (/ 1 b_2))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 #s(literal -1/2 binary64) a) (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 5/64 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 c b_2)) (/.f64 (*.f64 (*.f64 a a) #s(literal -1/16 binary64)) (pow.f64 b_2 #s(literal 5 binary64)))) c (*.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64))) c (/.f64 #s(literal -1/2 binary64) b_2)) c)","(* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3)))))","(*.f64 (fma.f64 (*.f64 (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1/8 binary64)) c (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2))) c)","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5)))))))","(*.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (*.f64 (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1/8 binary64))) c (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2))) c)","(* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* c (+ (* -1/2 (/ (* c (+ (* 1/64 (/ (pow a 4) (pow b_2 6))) (* 1/16 (/ (pow a 4) (pow b_2 6))))) b_2)) (* -1/16 (/ (pow a 3) (pow b_2 5)))))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 (/.f64 (pow.f64 a #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 5 binary64))) #s(literal -1/16 binary64) (*.f64 (*.f64 (/.f64 (*.f64 (pow.f64 a #s(literal 4 binary64)) #s(literal 5/64 binary64)) (pow.f64 b_2 #s(literal 6 binary64))) (/.f64 c b_2)) #s(literal -1/2 binary64))) c (*.f64 (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1/8 binary64))) c (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2))) c)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* -1/8 (/ (* (pow a 2) c) (pow b_2 3))))))","(fma.f64 (fma.f64 (*.f64 (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1/8 binary64)) c (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2))) c b_2)","(+ b_2 (* c (+ (* -1/2 (/ a b_2)) (* c (+ (* -1/8 (/ (pow a 2) (pow b_2 3))) (* -1/16 (/ (* (pow a 3) c) (pow b_2 5))))))))","(fma.f64 (fma.f64 (fma.f64 (*.f64 #s(literal -1/16 binary64) (pow.f64 a #s(literal 3 binary64))) (/.f64 c (pow.f64 b_2 #s(literal 5 binary64))) (*.f64 (*.f64 a (/.f64 a (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1/8 binary64))) c (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2))) c b_2)","(* c (- (* -1/8 (/ (* a c) (pow b_2 2))) 1/2))","(*.f64 (fma.f64 (/.f64 (*.f64 c (/.f64 a b_2)) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c)","(* c (+ (* -1 (/ b_2 (* a c))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) (*.f64 c a))) c)","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) (*.f64 c a)))) c)","(* c (+ (* -1 (/ b_2 (* a c))) (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* (pow a 3) (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ 1 (* a c))) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 3 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (neg.f64 b_2) (*.f64 c a))))) c)","(* c (+ (* -1 (/ b_2 c)) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 (neg.f64 c))) c)","(* c (- (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))) (/ b_2 c)))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 (neg.f64 c)))) c)","(* c (- (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))) (/ b_2 c)))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 (neg.f64 c))))) c)","(* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))","(*.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64))))) c)","(* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (/ (pow b_2 4) (pow (sqrt -1) 3)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (/ (pow b_2 6) (pow (sqrt -1) 5)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (/ (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal 1/16 binary64) (/.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal 5 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64)))) (fma.f64 (*.f64 #s(literal -1/8 binary64) (/.f64 (pow.f64 b_2 #s(literal 4 binary64)) (neg.f64 (sqrt.f64 #s(literal -1 binary64))))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a))) (*.f64 b_2 (/.f64 b_2 (sqrt.f64 #s(literal -1 binary64))))) #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)))))) c)","(* c (- (/ (pow b_2 2) c) a))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 c)) a) c)","(* (pow c 2) (- (* -1/8 (/ a (pow b_2 3))) (* 1/2 (/ 1 (* b_2 c)))))","(*.f64 (fma.f64 (/.f64 a (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1/8 binary64) (/.f64 #s(literal -1/2 binary64) (*.f64 c b_2))) (*.f64 c c))","(* (pow c 2) (- (* -1/8 (/ a (pow b_2 2))) (* 1/2 (/ 1 c))))","(*.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 a b_2) (/.f64 #s(literal -1/2 binary64) c)) (*.f64 c c))","(* c (+ (* -1/2 (/ a b_2)) (/ b_2 c)))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 a b_2) (/.f64 b_2 c)) c)","(* c (+ (* -1 a) (/ (pow b_2 2) c)))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 c)) a) c)","(* -1 (* c (+ (* (sqrt (/ 1 (* a c))) (sqrt -1)) (/ b_2 (* a c)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (/.f64 b_2 a) c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1/2 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 2) (sqrt -1))))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (/.f64 (neg.f64 b_2) a)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (+ (* -1 (/ b_2 a)) (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 5) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c (pow a 3))) (* (pow b_2 2) (sqrt -1))))) c))) c)) (* (sqrt (/ 1 (* a c))) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (+.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c (pow.f64 a #s(literal 3 binary64)))) (*.f64 b_2 b_2)) (*.f64 #s(literal -1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 5 binary64)) c))) (pow.f64 b_2 #s(literal 4 binary64)))))) c) (/.f64 b_2 a)) c)) (neg.f64 c))","(* -1 (* c (+ (* (sqrt (/ a c)) (sqrt -1)) (/ b_2 c))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 b_2 c)) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1/2 (* (sqrt (/ 1 (* a c))) (* (pow b_2 2) (sqrt -1)))) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (fma.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) a) c)) (*.f64 b_2 b_2)) (*.f64 (sqrt.f64 #s(literal -1 binary64)) #s(literal -1/2 binary64)) (neg.f64 b_2)) (neg.f64 c))) (neg.f64 c))","(* -1 (* c (+ (* -1 (/ (- (* -1 (/ (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) c))) (* (pow b_2 4) (sqrt -1)))) (* 1/2 (* (sqrt (/ c a)) (* (pow b_2 2) (sqrt -1))))) c)) b_2) c)) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (fma.f64 (sqrt.f64 (/.f64 a c)) (sqrt.f64 #s(literal -1 binary64)) (/.f64 (+.f64 (/.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) (*.f64 (sqrt.f64 (/.f64 c a)) (*.f64 b_2 b_2)) (*.f64 #s(literal -1/8 binary64) (*.f64 (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 a #s(literal 3 binary64)) c))) (pow.f64 b_2 #s(literal 4 binary64)))))) c) b_2) c)) (neg.f64 c))","(* -1 (* c (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))","(*.f64 (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 b_2 b_2) (sqrt.f64 (/.f64 a c)))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1))))))","(*.f64 (fma.f64 (*.f64 #s(literal -1/8 binary64) (*.f64 (pow.f64 b_2 #s(literal 4 binary64)) (sqrt.f64 #s(literal -1 binary64)))) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 b_2 b_2) (sqrt.f64 (/.f64 a c))))) (neg.f64 c))","(* -1 (* c (+ (* -1/8 (* (sqrt (/ 1 (* (pow a 3) (pow c 5)))) (* (pow b_2 4) (sqrt -1)))) (+ (* 1/16 (* (sqrt (/ 1 (* (pow a 5) (pow c 7)))) (* (pow b_2 6) (sqrt -1)))) (+ (* 1/2 (* (sqrt (/ 1 (* a (pow c 3)))) (* (pow b_2 2) (sqrt -1)))) (* (sqrt (/ a c)) (sqrt -1)))))))","(*.f64 (fma.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal 1/16 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 7 binary64))) (pow.f64 a #s(literal 5 binary64))))) (pow.f64 b_2 #s(literal 6 binary64)) (*.f64 (*.f64 #s(literal -1/8 binary64) (sqrt.f64 (/.f64 (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal 5 binary64))) (pow.f64 a #s(literal 3 binary64))))) (pow.f64 b_2 #s(literal 4 binary64)))) (*.f64 (sqrt.f64 #s(literal -1 binary64)) (fma.f64 (*.f64 #s(literal 1/2 binary64) (sqrt.f64 (/.f64 #s(literal 1 binary64) (*.f64 (pow.f64 c #s(literal 3 binary64)) a)))) (*.f64 b_2 b_2) (sqrt.f64 (/.f64 a c))))) (neg.f64 c))","(* -1 (* c (- (* -1 (/ (pow b_2 2) c)) (* -1 a))))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 c)) a) c)","(* -1 (* c (+ (* -1 (/ b_2 c)) (* 1/2 (/ a b_2)))))","(*.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 a b_2) (/.f64 b_2 c)) c)","(* -1 (* c (+ a (* -1 (/ (pow b_2 2) c)))))","(*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 c)) a) c)"]],"stop":[["iter limit",1],["node limit",1]],"time":330.19677734375,"type":"simplify"},{"count":[[23,512]],"egraph":[[0,8877,398,0.087945452],[2,2446,401,0.042399914],[1,332,401,0.009222823],[0,88,406,0.002541516],[0,60,412,0.000475227]],"inputs":[["(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) a)","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))","(/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2)","#s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c))","(*.f64 #s(literal -1/2 binary64) c)","(/.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2) a)","(-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2)","#s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2))","(fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)","(*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))","(*.f64 (/.f64 #s(literal 1 binary64) a) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2))","(/.f64 #s(literal 1 binary64) a)","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2)","(exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -1/2 binary64) a)) #s(literal -1 binary64)))","(*.f64 (log.f64 (*.f64 #s(literal -1/2 binary64) a)) #s(literal -1 binary64))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -1/2 binary64) a)) #s(literal -1 binary64)))))","(*.f64 b_2 (exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -1/2 binary64) a)) #s(literal -1 binary64))))","(/.f64 (*.f64 c a) b_2)","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))","(log.f64 (*.f64 #s(literal -1/2 binary64) a))"]],"memory":[[1745136,67263568]],"outputs":[["(*.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) a))","(*.f64 (/.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) a) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)))","(*.f64 (/.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) a) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))))","(*.f64 (/.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 b_2)) a) (/.f64 (pow.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) a) (/.f64 (pow.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 a (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 b_2))) #s(literal -1 binary64)) (pow.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 a (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(literal 1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)) (/.f64 #s(literal -1 binary64) a))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2))","(*.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) a) #s(literal 1 binary64))","(*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) (pow.f64 a #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) a))","(pow.f64 (/.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) a) #s(literal 3 binary64)) (pow.f64 (neg.f64 (/.f64 b_2 a)) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) a) #s(literal 2 binary64)) (-.f64 (*.f64 (neg.f64 (/.f64 b_2 a)) (neg.f64 (/.f64 b_2 a))) (*.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) a) (neg.f64 (/.f64 b_2 a))))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 b_2)) (pow.f64 a #s(literal -1 binary64)))) (neg.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 a #s(literal -1 binary64)))) (neg.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(literal -1 binary64))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(literal 1 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) a) #s(literal 2 binary64)) (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)))) (neg.f64 (+.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) a) (/.f64 b_2 a))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) a) #s(literal 3 binary64)) (pow.f64 (/.f64 b_2 a) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) a) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) a) (/.f64 b_2 a))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)))) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 b_2)) #s(literal -1 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 b_2)) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) a)))","(/.f64 (neg.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) a) (*.f64 a b_2))) (neg.f64 (*.f64 a a)))","(/.f64 (-.f64 (neg.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))) (neg.f64 b_2)) (neg.f64 a))","(/.f64 (*.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 b_2)) (pow.f64 a #s(literal -1 binary64))) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 a #s(literal -1 binary64))) (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))))","(/.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(literal -1 binary64)) (neg.f64 a))","(/.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(literal 1 binary64)) a)","(/.f64 (-.f64 (pow.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) a) #s(literal 2 binary64)) (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64))) (+.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) a) (/.f64 b_2 a)))","(/.f64 (-.f64 (pow.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) a) #s(literal 3 binary64)) (pow.f64 (/.f64 b_2 a) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) a) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) a) (/.f64 b_2 a)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 b_2))) (neg.f64 (*.f64 a (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (neg.f64 (*.f64 a (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))))))","(/.f64 (*.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 b_2)) #s(literal -1 binary64)) (*.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 b_2)) #s(literal 1 binary64)) (*.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) a))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) a))","(/.f64 (-.f64 (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) a) (*.f64 a b_2)) (*.f64 a a))","(/.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 b_2)) (*.f64 a (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)))","(/.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 a (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)) (neg.f64 a))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2))))","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) a)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)))","(neg.f64 (/.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)) a))","(neg.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) (neg.f64 a)))","(fma.f64 (/.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 1/4 binary64)) a) (/.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 1/4 binary64)) #s(literal 1 binary64)) (neg.f64 (/.f64 b_2 a)))","(fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) (pow.f64 a #s(literal -1 binary64)) (neg.f64 (/.f64 b_2 a)))","(-.f64 (/.f64 (pow.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) a) #s(literal 2 binary64)) (+.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) a) (/.f64 b_2 a))) (/.f64 (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)) (+.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) a) (/.f64 b_2 a))))","(-.f64 (/.f64 (pow.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) a) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) a) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) a) (/.f64 b_2 a))))) (/.f64 (pow.f64 (/.f64 b_2 a) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) a) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)) (*.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) a) (/.f64 b_2 a))))))","(-.f64 (/.f64 (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) a) (*.f64 a a)) (/.f64 (*.f64 a b_2) (*.f64 a a)))","(-.f64 (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 a (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2))) (/.f64 (*.f64 b_2 b_2) (*.f64 a (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2))))","(-.f64 (/.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64)) (*.f64 a (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))))) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (*.f64 a (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))))))","(-.f64 (/.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) #s(literal 0 binary64)) a) (/.f64 b_2 a))","(-.f64 (/.f64 (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)) a) (/.f64 (/.f64 (*.f64 b_2 b_2) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)) a))","(-.f64 (/.f64 (/.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))) a) (/.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))) a))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 a)) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) (neg.f64 a)))","(-.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) a) (/.f64 b_2 a))","(exp.f64 (*.f64 (log.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2))) #s(literal -1 binary64)))","(+.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) a) (neg.f64 (/.f64 b_2 a)))","(*.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 b_2)) (pow.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 b_2))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64))) (fma.f64 b_2 b_2 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 b_2)))) (neg.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))))))","(/.f64 (neg.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 b_2))) (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) (neg.f64 b_2))))","(/.f64 (neg.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 b_2))) (neg.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (-.f64 (*.f64 b_2 b_2) (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) (neg.f64 b_2))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (neg.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))))","(/.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) (neg.f64 b_2)))","(/.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 b_2)) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2))","(/.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (-.f64 (*.f64 b_2 b_2) (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) (neg.f64 b_2)))))","(/.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 b_2)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 b_2))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))))","(fma.f64 (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))) (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))) (neg.f64 b_2))","(fma.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 1/4 binary64)) (neg.f64 b_2))","(fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))))","(fma.f64 b_2 #s(literal -1 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))))","(-.f64 (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) (neg.f64 b_2))) (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) (neg.f64 b_2))))","(-.f64 (/.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64)) (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (-.f64 (*.f64 b_2 b_2) (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) (neg.f64 b_2))))) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (-.f64 (*.f64 b_2 b_2) (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) (neg.f64 b_2))))))","(-.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) #s(literal 0 binary64)) b_2)","(-.f64 (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)) (/.f64 (*.f64 b_2 b_2) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)))","(-.f64 (/.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))))","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)","(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))))","(+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) (neg.f64 b_2))","(*.f64 (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))) (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))))","(*.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 1/4 binary64)))","(pow.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) #s(literal 1 binary64))","(pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))","(fabs.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))))","(exp.f64 (log.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))))","(*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))))","(pow.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 2 binary64)) #s(literal 1/2 binary64))","(pow.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) #s(literal 2 binary64))","(pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 1 binary64))","#s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))","(sqrt.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 2 binary64)))","(fabs.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))","(exp.f64 (*.f64 (log.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 2 binary64))) #s(literal 1/2 binary64)))","(exp.f64 (*.f64 (log.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))) #s(literal 2 binary64)))","(exp.f64 (*.f64 (log.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) #s(literal 1 binary64)))","(exp.f64 (log.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))","(*.f64 (/.f64 #s(literal -1 binary64) b_2) (/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) #s(literal -1 binary64)))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (pow.f64 (pow.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)))","(*.f64 (neg.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c))) (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)))","(*.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))","(pow.f64 (/.f64 (/.f64 b_2 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c))) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 b_2 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c))) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (neg.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c))) #s(literal -1 binary64))) (neg.f64 b_2))","(/.f64 (neg.f64 (*.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) #s(literal 1 binary64))) (neg.f64 b_2))","(/.f64 (neg.f64 (neg.f64 (neg.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c))))) (neg.f64 (neg.f64 (neg.f64 b_2))))","(/.f64 (/.f64 (neg.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c))) #s(literal -1 binary64)) b_2)","(/.f64 (*.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) #s(literal 1 binary64)) b_2)","(/.f64 (neg.f64 (neg.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)))) (neg.f64 (neg.f64 b_2)))","(/.f64 (neg.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c))) (neg.f64 b_2))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 b_2 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c))) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 b_2 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)))))","(/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 b_2 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c))))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b_2 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 b_2 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c))))","(neg.f64 (/.f64 (neg.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c))) b_2))","(neg.f64 (/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) (neg.f64 b_2)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 b_2)) (/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) (neg.f64 b_2)))","(exp.f64 (*.f64 (log.f64 (/.f64 b_2 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)))) #s(literal -1 binary64)))","#s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c))","(*.f64 #s(literal -1/2 binary64) c)","(*.f64 c #s(literal -1/2 binary64))","(*.f64 (/.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) a))","(*.f64 (/.f64 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) a) (/.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2)))","(*.f64 (/.f64 (fma.f64 b_2 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64))) a) (/.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) (fma.f64 b_2 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64)))))","(*.f64 (/.f64 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (*.f64 b_2 b_2)) a) (/.f64 (pow.f64 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) a) (/.f64 (pow.f64 (fma.f64 b_2 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (pow.f64 (/.f64 a (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (*.f64 b_2 b_2))) #s(literal -1 binary64)) (pow.f64 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) #s(literal -1 binary64)))","(*.f64 (pow.f64 (/.f64 a (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b_2 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) #s(literal 1 binary64)) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (neg.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2)) (/.f64 #s(literal -1 binary64) a))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 (pow.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2))","(*.f64 (/.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) a) #s(literal 1 binary64))","(*.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) (pow.f64 a #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) a))","(pow.f64 (/.f64 (/.f64 a (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2)) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 a (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2)) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) a) #s(literal 3 binary64)) (pow.f64 (neg.f64 (/.f64 b_2 a)) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) a) #s(literal 2 binary64)) (-.f64 (*.f64 (neg.f64 (/.f64 b_2 a)) (neg.f64 (/.f64 b_2 a))) (*.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) a) (neg.f64 (/.f64 b_2 a))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (*.f64 b_2 b_2)) (pow.f64 a #s(literal -1 binary64)))) (neg.f64 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 a #s(literal -1 binary64)))) (neg.f64 (fma.f64 b_2 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) #s(literal -1 binary64))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) #s(literal 1 binary64))) (neg.f64 a))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) a) #s(literal 2 binary64)) (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)))) (neg.f64 (+.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) a) (/.f64 b_2 a))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) a) #s(literal 3 binary64)) (pow.f64 (/.f64 b_2 a) #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) a) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)) (*.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) a) (/.f64 b_2 a))))))","(/.f64 (neg.f64 (neg.f64 (neg.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2)))) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (*.f64 b_2 b_2)) #s(literal -1 binary64))) (neg.f64 (*.f64 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (*.f64 b_2 b_2)) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 b_2 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64))) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b_2 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64))) a)))","(/.f64 (neg.f64 (-.f64 (*.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) a) (*.f64 a b_2))) (neg.f64 (*.f64 a a)))","(/.f64 (-.f64 (neg.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2))) (neg.f64 b_2)) (neg.f64 a))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (*.f64 b_2 b_2)) (pow.f64 a #s(literal -1 binary64))) (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 a #s(literal -1 binary64))) (fma.f64 b_2 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) #s(literal -1 binary64)) (neg.f64 a))","(/.f64 (*.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) #s(literal 1 binary64)) a)","(/.f64 (-.f64 (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) a) #s(literal 2 binary64)) (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64))) (+.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) a) (/.f64 b_2 a)))","(/.f64 (-.f64 (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) a) #s(literal 3 binary64)) (pow.f64 (/.f64 b_2 a) #s(literal 3 binary64))) (+.f64 (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) a) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)) (*.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) a) (/.f64 b_2 a)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (*.f64 b_2 b_2))) (neg.f64 (*.f64 a (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (neg.f64 (*.f64 a (fma.f64 b_2 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2))) (neg.f64 (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (*.f64 b_2 b_2)) #s(literal -1 binary64)) (*.f64 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (*.f64 b_2 b_2)) #s(literal 1 binary64)) (*.f64 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) a))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 b_2 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64))) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b_2 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64))) a))","(/.f64 (-.f64 (*.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) a) (*.f64 a b_2)) (*.f64 a a))","(/.f64 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (*.f64 b_2 b_2)) (*.f64 a (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2)))","(/.f64 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (*.f64 a (fma.f64 b_2 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64)))))","(/.f64 (neg.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2)) (neg.f64 a))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 a (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2)) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2))))","(/.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) a)","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 a (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 a (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2)))","(neg.f64 (/.f64 (neg.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2)) a))","(neg.f64 (/.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) (neg.f64 a)))","(fma.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) (pow.f64 a #s(literal -1 binary64)) (neg.f64 (/.f64 b_2 a)))","(-.f64 (/.f64 (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) a) #s(literal 2 binary64)) (+.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) a) (/.f64 b_2 a))) (/.f64 (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)) (+.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) a) (/.f64 b_2 a))))","(-.f64 (/.f64 (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) a) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) a) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)) (*.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) a) (/.f64 b_2 a))))) (/.f64 (pow.f64 (/.f64 b_2 a) #s(literal 3 binary64)) (+.f64 (pow.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) a) #s(literal 2 binary64)) (+.f64 (pow.f64 (/.f64 b_2 a) #s(literal 2 binary64)) (*.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) a) (/.f64 b_2 a))))))","(-.f64 (/.f64 (*.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) a) (*.f64 a a)) (/.f64 (*.f64 a b_2) (*.f64 a a)))","(-.f64 (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (*.f64 a (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2))) (/.f64 (*.f64 b_2 b_2) (*.f64 a (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2))))","(-.f64 (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 3 binary64)) (*.f64 a (fma.f64 b_2 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64))))) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (*.f64 a (fma.f64 b_2 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64))))))","(-.f64 (/.f64 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 0 binary64)) a) (/.f64 b_2 a))","(-.f64 (/.f64 (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2)) a) (/.f64 (/.f64 (*.f64 b_2 b_2) (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2)) a))","(-.f64 (/.f64 (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 3 binary64)) (fma.f64 b_2 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64)))) a) (/.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64)))) a))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 a)) (/.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) (neg.f64 a)))","(-.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) a) (/.f64 b_2 a))","(exp.f64 (*.f64 (log.f64 (/.f64 a (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2))) #s(literal -1 binary64)))","(+.f64 (/.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) a) (neg.f64 (/.f64 b_2 a)))","(*.f64 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (*.f64 b_2 b_2)) (pow.f64 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 (fma.f64 b_2 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (*.f64 b_2 b_2))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b_2 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 3 binary64))) (fma.f64 b_2 b_2 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (*.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (*.f64 b_2 b_2)))) (neg.f64 (neg.f64 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 b_2 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (*.f64 b_2 b_2))) (neg.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) (neg.f64 b_2))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (*.f64 b_2 b_2))) (neg.f64 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2)))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (neg.f64 (+.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (-.f64 (*.f64 b_2 b_2) (*.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) (neg.f64 b_2))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (neg.f64 (fma.f64 b_2 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (*.f64 b_2 b_2)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) (neg.f64 b_2)))","(/.f64 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (*.f64 b_2 b_2)) (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2))","(/.f64 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (-.f64 (*.f64 b_2 b_2) (*.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) (neg.f64 b_2)))))","(/.f64 (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (fma.f64 b_2 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (*.f64 b_2 b_2)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b_2 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (*.f64 b_2 b_2))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64))) (-.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 3 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))))","(fma.f64 #s(literal -1 binary64) b_2 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)))","(fma.f64 b_2 #s(literal -1 binary64) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)))","(-.f64 (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) (neg.f64 b_2))) (/.f64 (*.f64 b_2 b_2) (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) (neg.f64 b_2))))","(-.f64 (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 3 binary64)) (+.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (-.f64 (*.f64 b_2 b_2) (*.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) (neg.f64 b_2))))) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (+.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (-.f64 (*.f64 b_2 b_2) (*.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) (neg.f64 b_2))))))","(-.f64 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 0 binary64)) b_2)","(-.f64 (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64)) (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2)) (/.f64 (*.f64 b_2 b_2) (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2)))","(-.f64 (/.f64 (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 3 binary64)) (fma.f64 b_2 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64)))) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 (+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2) (pow.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) #s(literal 2 binary64)))))","(-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) b_2)","(+.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)) (neg.f64 b_2))","(+.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)))","#s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2))","(*.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (*.f64 c a) b_2) #s(literal 2 binary64)) (*.f64 (neg.f64 b_2) b_2)) (pow.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2) (neg.f64 b_2)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (/.f64 (*.f64 c a) b_2) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (*.f64 c a) b_2) #s(literal 2 binary64)) (*.f64 b_2 (-.f64 b_2 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2))))) #s(literal -1 binary64)))","(pow.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2) (neg.f64 b_2)) (fma.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (*.f64 c a) b_2) #s(literal 2 binary64)) (*.f64 (neg.f64 b_2) b_2))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (*.f64 c a) b_2) #s(literal 2 binary64)) (*.f64 b_2 (-.f64 b_2 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2))))) (fma.f64 (pow.f64 (/.f64 (*.f64 c a) b_2) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2)) #s(literal 2 binary64)))) (neg.f64 (-.f64 b_2 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (*.f64 c a) b_2) #s(literal 2 binary64)) (*.f64 (neg.f64 b_2) b_2)))) (neg.f64 (neg.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2) (neg.f64 b_2)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (/.f64 (*.f64 c a) b_2) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (*.f64 c a) b_2) #s(literal 2 binary64)) (*.f64 b_2 (-.f64 b_2 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2))))))))","(/.f64 (-.f64 (*.f64 b_2 b_2) (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2)) #s(literal 2 binary64))) (-.f64 b_2 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (*.f64 c a) b_2) #s(literal 2 binary64)) (*.f64 (neg.f64 b_2) b_2))) (neg.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2) (neg.f64 b_2))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (/.f64 (*.f64 c a) b_2) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal 3 binary64)))) (neg.f64 (fma.f64 b_2 b_2 (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2)) b_2)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (/.f64 (*.f64 c a) b_2) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal 3 binary64)))) (neg.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (*.f64 c a) b_2) #s(literal 2 binary64)) (*.f64 b_2 (-.f64 b_2 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2)))))))","(/.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (*.f64 c a) b_2) #s(literal 2 binary64)) (*.f64 (neg.f64 b_2) b_2)) (fma.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2) (neg.f64 b_2)))","(/.f64 (fma.f64 (pow.f64 (/.f64 (*.f64 c a) b_2) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (fma.f64 b_2 b_2 (-.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2)) #s(literal 2 binary64)) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2)) b_2))))","(/.f64 (fma.f64 (pow.f64 (/.f64 (*.f64 c a) b_2) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal 3 binary64))) (fma.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (*.f64 c a) b_2) #s(literal 2 binary64)) (*.f64 b_2 (-.f64 b_2 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2))))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2) (neg.f64 b_2)) (fma.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (*.f64 c a) b_2) #s(literal 2 binary64)) (*.f64 (neg.f64 b_2) b_2)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (*.f64 c a) b_2) #s(literal 2 binary64)) (*.f64 b_2 (-.f64 b_2 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2))))) (fma.f64 (pow.f64 (/.f64 (*.f64 c a) b_2) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2) (neg.f64 b_2)) (fma.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (*.f64 c a) b_2) #s(literal 2 binary64)) (*.f64 (neg.f64 b_2) b_2))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/4 binary64) (pow.f64 (/.f64 (*.f64 c a) b_2) #s(literal 2 binary64)) (*.f64 b_2 (-.f64 b_2 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2))))) (fma.f64 (pow.f64 (/.f64 (*.f64 c a) b_2) #s(literal 3 binary64)) #s(literal -1/8 binary64) (pow.f64 b_2 #s(literal 3 binary64)))))","(fma.f64 (/.f64 (*.f64 #s(literal -1/2 binary64) a) #s(literal -1 binary64)) (/.f64 (neg.f64 c) b_2) b_2)","(fma.f64 (/.f64 #s(literal -1/2 binary64) b_2) (/.f64 a (pow.f64 c #s(literal -1 binary64))) b_2)","(fma.f64 (/.f64 (*.f64 #s(literal -1/2 binary64) a) b_2) (/.f64 #s(literal 1 binary64) (pow.f64 c #s(literal -1 binary64))) b_2)","(fma.f64 (/.f64 (*.f64 #s(literal -1/2 binary64) a) b_2) (/.f64 (neg.f64 c) #s(literal -1 binary64)) b_2)","(fma.f64 (/.f64 (neg.f64 c) #s(literal -1 binary64)) (/.f64 (*.f64 #s(literal -1/2 binary64) a) b_2) b_2)","(fma.f64 (*.f64 (*.f64 #s(literal -1/2 binary64) a) c) (pow.f64 b_2 #s(literal -1 binary64)) b_2)","(fma.f64 (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)) a b_2)","(fma.f64 (/.f64 (neg.f64 c) b_2) (/.f64 (*.f64 #s(literal -1/2 binary64) a) #s(literal -1 binary64)) b_2)","(fma.f64 (pow.f64 b_2 #s(literal -1 binary64)) (/.f64 (*.f64 #s(literal -1/2 binary64) a) (pow.f64 c #s(literal -1 binary64))) b_2)","(fma.f64 (/.f64 a b_2) (/.f64 #s(literal -1/2 binary64) (pow.f64 c #s(literal -1 binary64))) b_2)","(fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2)","(fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)","(fma.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2) b_2)","(fma.f64 (/.f64 (*.f64 c a) b_2) #s(literal -1/2 binary64) b_2)","(fma.f64 c (/.f64 (*.f64 #s(literal -1/2 binary64) a) b_2) b_2)","(fma.f64 c (*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (*.f64 #s(literal -1/2 binary64) a)) b_2)","(fma.f64 a (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)) b_2)","(-.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 b_2 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2)))) (/.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2)) #s(literal 2 binary64)) (-.f64 b_2 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2)))))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2)) #s(literal 2 binary64)) (fma.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2) (neg.f64 b_2))) (/.f64 (*.f64 b_2 b_2) (fma.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2) (neg.f64 b_2))))","(+.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2)) b_2)","(+.f64 b_2 (*.f64 #s(literal -1/2 binary64) (/.f64 (*.f64 c a) b_2)))","(*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)","(*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) (*.f64 b_2 b_2))","(*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)))","(*.f64 b_2 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2))","(/.f64 (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 (/.f64 (/.f64 (neg.f64 c) b_2) b_2) a)) #s(literal 3 binary64))) (+.f64 (pow.f64 b_2 #s(literal 4 binary64)) (-.f64 (*.f64 (*.f64 (*.f64 b_2 b_2) (*.f64 (/.f64 (/.f64 (neg.f64 c) b_2) b_2) a)) (*.f64 (*.f64 b_2 b_2) (*.f64 (/.f64 (/.f64 (neg.f64 c) b_2) b_2) a))) (*.f64 (*.f64 b_2 b_2) (*.f64 (*.f64 b_2 b_2) (*.f64 (/.f64 (/.f64 (neg.f64 c) b_2) b_2) a))))))","(/.f64 (+.f64 (pow.f64 b_2 #s(literal 6 binary64)) (pow.f64 (*.f64 (*.f64 (/.f64 (/.f64 (neg.f64 c) b_2) b_2) a) (*.f64 b_2 b_2)) #s(literal 3 binary64))) (+.f64 (pow.f64 b_2 #s(literal 4 binary64)) (-.f64 (*.f64 (*.f64 (*.f64 (/.f64 (/.f64 (neg.f64 c) b_2) b_2) a) (*.f64 b_2 b_2)) (*.f64 (*.f64 (/.f64 (/.f64 (neg.f64 c) b_2) b_2) a) (*.f64 b_2 b_2))) (*.f64 (*.f64 b_2 b_2) (*.f64 (*.f64 (/.f64 (/.f64 (neg.f64 c) b_2) b_2) a) (*.f64 b_2 b_2))))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal 2 binary64))) (*.f64 b_2 b_2))) (neg.f64 (fma.f64 (/.f64 a b_2) (/.f64 c b_2) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal 3 binary64))) (*.f64 b_2 b_2))) (neg.f64 (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) (fma.f64 (/.f64 a b_2) (/.f64 c b_2) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal 2 binary64))))) (neg.f64 (fma.f64 (/.f64 a b_2) (/.f64 c b_2) #s(literal 1 binary64))))","(/.f64 (neg.f64 (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal 3 binary64))))) (neg.f64 (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) (fma.f64 (/.f64 a b_2) (/.f64 c b_2) #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal 2 binary64))) (*.f64 b_2 b_2)) (fma.f64 (/.f64 a b_2) (/.f64 c b_2) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal 3 binary64))) (*.f64 b_2 b_2)) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) (fma.f64 (/.f64 a b_2) (/.f64 c b_2) #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal 2 binary64)))) (fma.f64 (/.f64 a b_2) (/.f64 c b_2) #s(literal 1 binary64)))","(/.f64 (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (pow.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) #s(literal 3 binary64)))) (fma.f64 (/.f64 (/.f64 (*.f64 c a) b_2) b_2) (fma.f64 (/.f64 a b_2) (/.f64 c b_2) #s(literal 1 binary64)) #s(literal 1 binary64)))","(fma.f64 (exp.f64 (log.f64 b_2)) (exp.f64 (log.f64 b_2)) (*.f64 (*.f64 (/.f64 (/.f64 (neg.f64 c) b_2) b_2) a) (*.f64 b_2 b_2)))","(fma.f64 (exp.f64 (log.f64 b_2)) (exp.f64 (log.f64 b_2)) (*.f64 (*.f64 b_2 b_2) (*.f64 (/.f64 (/.f64 (neg.f64 c) b_2) b_2) a)))","(fma.f64 (*.f64 (neg.f64 b_2) #s(literal -1 binary64)) b_2 (*.f64 (*.f64 (/.f64 (/.f64 (neg.f64 c) b_2) b_2) a) (*.f64 b_2 b_2)))","(fma.f64 (*.f64 (neg.f64 b_2) #s(literal -1 binary64)) b_2 (*.f64 (*.f64 b_2 b_2) (*.f64 (/.f64 (/.f64 (neg.f64 c) b_2) b_2) a)))","(fma.f64 #s(literal -1 binary64) (*.f64 b_2 (neg.f64 b_2)) (*.f64 (*.f64 (/.f64 (/.f64 (neg.f64 c) b_2) b_2) a) (*.f64 b_2 b_2)))","(fma.f64 #s(literal -1 binary64) (*.f64 b_2 (neg.f64 b_2)) (*.f64 (*.f64 b_2 b_2) (*.f64 (/.f64 (/.f64 (neg.f64 c) b_2) b_2) a)))","(fma.f64 (*.f64 b_2 b_2) #s(literal 1 binary64) (*.f64 (*.f64 (/.f64 (/.f64 (neg.f64 c) b_2) b_2) a) (*.f64 b_2 b_2)))","(fma.f64 (*.f64 b_2 b_2) #s(literal 1 binary64) (*.f64 (*.f64 b_2 b_2) (*.f64 (/.f64 (/.f64 (neg.f64 c) b_2) b_2) a)))","(fma.f64 (neg.f64 b_2) (neg.f64 b_2) (*.f64 (*.f64 (/.f64 (/.f64 (neg.f64 c) b_2) b_2) a) (*.f64 b_2 b_2)))","(fma.f64 (neg.f64 b_2) (neg.f64 b_2) (*.f64 (*.f64 b_2 b_2) (*.f64 (/.f64 (/.f64 (neg.f64 c) b_2) b_2) a)))","(fma.f64 #s(literal 1 binary64) (*.f64 b_2 b_2) (*.f64 (*.f64 (/.f64 (/.f64 (neg.f64 c) b_2) b_2) a) (*.f64 b_2 b_2)))","(fma.f64 #s(literal 1 binary64) (*.f64 b_2 b_2) (*.f64 (*.f64 b_2 b_2) (*.f64 (/.f64 (/.f64 (neg.f64 c) b_2) b_2) a)))","(fma.f64 b_2 b_2 (*.f64 (*.f64 (/.f64 (/.f64 (neg.f64 c) b_2) b_2) a) (*.f64 b_2 b_2)))","(fma.f64 b_2 b_2 (*.f64 (*.f64 b_2 b_2) (*.f64 (/.f64 (/.f64 (neg.f64 c) b_2) b_2) a)))","(+.f64 (*.f64 b_2 b_2) (*.f64 (*.f64 (/.f64 (/.f64 (neg.f64 c) b_2) b_2) a) (*.f64 b_2 b_2)))","(+.f64 (*.f64 b_2 b_2) (*.f64 (*.f64 b_2 b_2) (*.f64 (/.f64 (/.f64 (neg.f64 c) b_2) b_2) a)))","(*.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(literal -1 binary64)) (/.f64 #s(literal -1 binary64) a))","(*.f64 (/.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2)) a) (/.f64 (pow.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) a) (/.f64 (pow.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) #s(literal -1 binary64)) #s(literal 1 binary64)))","(*.f64 (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) a) #s(literal 1 binary64))","(*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(literal 1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2))","(*.f64 #s(literal 1 binary64) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) a))","(pow.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2)) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) (pow.f64 a #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 (neg.f64 b_2) (pow.f64 a #s(literal -1 binary64))) #s(literal 3 binary64))) (fma.f64 (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) (pow.f64 a #s(literal -1 binary64))) (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) (pow.f64 a #s(literal -1 binary64))) (-.f64 (*.f64 (*.f64 (neg.f64 b_2) (pow.f64 a #s(literal -1 binary64))) (*.f64 (neg.f64 b_2) (pow.f64 a #s(literal -1 binary64)))) (*.f64 (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) (pow.f64 a #s(literal -1 binary64))) (*.f64 (neg.f64 b_2) (pow.f64 a #s(literal -1 binary64)))))))","(/.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))) #s(literal 3 binary64)) (pow.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 b_2)) #s(literal 3 binary64))) (fma.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))) (*.f64 (pow.f64 a #s(literal -1 binary64)) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))) (-.f64 (*.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 b_2)) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 b_2))) (*.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 b_2))))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2)) (pow.f64 a #s(literal -1 binary64)))) (neg.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 a #s(literal -1 binary64)))) (neg.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(literal -1 binary64))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2)))) (neg.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2)))","(/.f64 (neg.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))) (neg.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2))) (neg.f64 (neg.f64 a)))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2)) #s(literal -1 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2)) #s(literal 1 binary64))) (neg.f64 (*.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) a)))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1 binary64))) (neg.f64 (*.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) (neg.f64 a))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1 binary64))) (neg.f64 (*.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) a)))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2)))) (neg.f64 (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2))))","(/.f64 (neg.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))) (neg.f64 (*.f64 (neg.f64 a) (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2)))) (neg.f64 (*.f64 a (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))) (neg.f64 (*.f64 a (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))))))","(/.f64 (*.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2)) (pow.f64 a #s(literal -1 binary64))) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 a #s(literal -1 binary64))) (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2)) (neg.f64 a))","(/.f64 (*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(literal -1 binary64)) (neg.f64 a))","(/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2))) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2))","(/.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))))","(/.f64 (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2)) (neg.f64 a))","(/.f64 (*.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2)) #s(literal -1 binary64)) (*.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2)) #s(literal 1 binary64)) (*.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) a))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal -1 binary64)) (*.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) (neg.f64 a)))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) a))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2))) (*.f64 (neg.f64 a) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2)))","(/.f64 (*.f64 #s(literal -1 binary64) (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 (neg.f64 a) (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2))) (*.f64 a (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2)))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (*.f64 a (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2))))","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) a)","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2)))","(fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) (pow.f64 a #s(literal -1 binary64)) (*.f64 (neg.f64 b_2) (pow.f64 a #s(literal -1 binary64))))","(fma.f64 (pow.f64 a #s(literal -1 binary64)) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 b_2)))","(-.f64 (/.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) #s(literal 0 binary64)) a) (/.f64 b_2 a))","(-.f64 (/.f64 (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2)) a) (/.f64 (/.f64 (*.f64 b_2 b_2) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2)) a))","(-.f64 (/.f64 (/.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))) a) (/.f64 (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))) a))","(-.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) a) (/.f64 b_2 a))","(+.f64 (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) (pow.f64 a #s(literal -1 binary64))) (*.f64 (neg.f64 b_2) (pow.f64 a #s(literal -1 binary64))))","(+.f64 (*.f64 (pow.f64 a #s(literal -1 binary64)) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))) (*.f64 (pow.f64 a #s(literal -1 binary64)) (neg.f64 b_2)))","(*.f64 (pow.f64 a #s(literal -1/2 binary64)) (pow.f64 a #s(literal -1/2 binary64)))","(*.f64 #s(literal -1 binary64) (/.f64 #s(literal -1 binary64) a))","(*.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (pow.f64 a #s(literal -1 binary64)))","(pow.f64 (*.f64 a a) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 a #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (neg.f64 (neg.f64 a)) #s(literal -1 binary64))","(pow.f64 a #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (neg.f64 (neg.f64 a))))","(/.f64 #s(literal -1 binary64) (neg.f64 a))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 a)))","(/.f64 #s(literal 1 binary64) a)","(neg.f64 (/.f64 #s(literal -1 binary64) a))","(exp.f64 (*.f64 (log.f64 a) #s(literal -1 binary64)))","(*.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2)) (pow.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (pow.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) #s(literal -1 binary64)))","(*.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2))","(pow.f64 (/.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2))) #s(literal -1 binary64))","(pow.f64 (/.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 (neg.f64 b_2) #s(literal 1 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) #s(literal 1 binary64)) (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) #s(literal 1 binary64)) (-.f64 (*.f64 (*.f64 (neg.f64 b_2) #s(literal 1 binary64)) (*.f64 (neg.f64 b_2) #s(literal 1 binary64))) (*.f64 (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) #s(literal 1 binary64)) (*.f64 (neg.f64 b_2) #s(literal 1 binary64))))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 1 binary64) (neg.f64 b_2)) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal 1 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))) (*.f64 #s(literal 1 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))) (-.f64 (*.f64 (*.f64 #s(literal 1 binary64) (neg.f64 b_2)) (*.f64 #s(literal 1 binary64) (neg.f64 b_2))) (*.f64 (*.f64 #s(literal 1 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))) (*.f64 #s(literal 1 binary64) (neg.f64 b_2))))))","(/.f64 (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64))) (fma.f64 b_2 b_2 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2)))) (neg.f64 (neg.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2)))) (neg.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2)))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))) (neg.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))))","(/.f64 (neg.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2))) (neg.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) (neg.f64 b_2))))","(/.f64 (neg.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2))) (neg.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2)))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (-.f64 (*.f64 b_2 b_2) (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) (neg.f64 b_2))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (neg.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2))) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2))","(/.f64 (*.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))) (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))))","(/.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2)) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) (neg.f64 b_2)))","(/.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2)) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2))","(/.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (-.f64 (*.f64 b_2 b_2) (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) (neg.f64 b_2)))))","(/.f64 (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))) (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2)))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64))))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (*.f64 b_2 b_2))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) (-.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (pow.f64 b_2 #s(literal 3 binary64)))))","(fma.f64 (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))) (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))) (neg.f64 b_2))","(fma.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 1/4 binary64)) (neg.f64 b_2))","(fma.f64 #s(literal -1 binary64) b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))))","(fma.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) #s(literal 1 binary64) (*.f64 (neg.f64 b_2) #s(literal 1 binary64)))","(fma.f64 #s(literal 1 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) (*.f64 #s(literal 1 binary64) (neg.f64 b_2)))","(fma.f64 b_2 #s(literal -1 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))))","(-.f64 (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) (neg.f64 b_2))) (/.f64 (*.f64 b_2 b_2) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) (neg.f64 b_2))))","(-.f64 (/.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (-.f64 (*.f64 b_2 b_2) (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) (neg.f64 b_2))))) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (-.f64 (*.f64 b_2 b_2) (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) (neg.f64 b_2))))))","(-.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) #s(literal 0 binary64)) b_2)","(-.f64 (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2)) (/.f64 (*.f64 b_2 b_2) (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2)))","(-.f64 (/.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 3/2 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))) (/.f64 (pow.f64 b_2 #s(literal 3 binary64)) (fma.f64 b_2 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))))","(-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) b_2)","(+.f64 (*.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) #s(literal 1 binary64)) (*.f64 (neg.f64 b_2) #s(literal 1 binary64)))","(+.f64 (*.f64 #s(literal 1 binary64) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))) (*.f64 #s(literal 1 binary64) (neg.f64 b_2)))","(+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) (neg.f64 b_2))","(+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))))","(*.f64 (exp.f64 (*.f64 (log.f64 #s(literal -1/2 binary64)) #s(literal -1 binary64))) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (exp.f64 (*.f64 #s(literal -1 binary64) (log.f64 #s(literal -1/2 binary64)))) (exp.f64 (*.f64 #s(literal -1 binary64) (log.f64 a))))","(*.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 a)) (pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 #s(literal -1/2 binary64))))","(*.f64 (pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 #s(literal -1/2 binary64))) (pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 a)))","(*.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) a) #s(literal -1/2 binary64)) (pow.f64 (*.f64 #s(literal -1/2 binary64) a) #s(literal -1/2 binary64)))","(*.f64 #s(literal -2 binary64) (pow.f64 a #s(literal -1 binary64)))","(*.f64 (pow.f64 a #s(literal -1 binary64)) #s(literal -2 binary64))","(pow.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) a) #s(literal 2 binary64)) #s(literal -1/2 binary64))","(pow.f64 (pow.f64 (*.f64 #s(literal -1/2 binary64) a) #s(literal -1/2 binary64)) #s(literal 2 binary64))","(pow.f64 (exp.f64 #s(literal -1 binary64)) (log.f64 (*.f64 #s(literal -1/2 binary64) a)))","(pow.f64 (*.f64 #s(literal -1/2 binary64) a) #s(literal -1 binary64))","(/.f64 #s(literal -1 binary64) (neg.f64 (*.f64 #s(literal -1/2 binary64) a)))","(/.f64 #s(literal 1 binary64) (*.f64 #s(literal -1/2 binary64) a))","(exp.f64 (*.f64 (log.f64 (exp.f64 #s(literal -1 binary64))) (log.f64 (*.f64 #s(literal -1/2 binary64) a))))","(exp.f64 (neg.f64 (log.f64 (*.f64 #s(literal -1/2 binary64) a))))","(*.f64 #s(literal -1 binary64) (log.f64 (*.f64 #s(literal -1/2 binary64) a)))","(*.f64 (log.f64 (*.f64 #s(literal -1/2 binary64) a)) #s(literal -1 binary64))","(/.f64 (+.f64 (pow.f64 (*.f64 (log.f64 #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 (log.f64 a) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 (log.f64 #s(literal -1/2 binary64)) #s(literal -1 binary64)) (*.f64 (log.f64 #s(literal -1/2 binary64)) #s(literal -1 binary64)) (-.f64 (*.f64 (*.f64 (log.f64 a) #s(literal -1 binary64)) (*.f64 (log.f64 a) #s(literal -1 binary64))) (*.f64 (*.f64 (log.f64 #s(literal -1/2 binary64)) #s(literal -1 binary64)) (*.f64 (log.f64 a) #s(literal -1 binary64))))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal -1 binary64) (log.f64 #s(literal -1/2 binary64))) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal -1 binary64) (log.f64 a)) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal -1 binary64) (log.f64 #s(literal -1/2 binary64))) (*.f64 #s(literal -1 binary64) (log.f64 #s(literal -1/2 binary64))) (-.f64 (*.f64 (*.f64 #s(literal -1 binary64) (log.f64 a)) (*.f64 #s(literal -1 binary64) (log.f64 a))) (*.f64 (*.f64 #s(literal -1 binary64) (log.f64 #s(literal -1/2 binary64))) (*.f64 #s(literal -1 binary64) (log.f64 a))))))","(neg.f64 (log.f64 (*.f64 #s(literal -1/2 binary64) a)))","(fma.f64 (log.f64 #s(literal -1/2 binary64)) #s(literal -1 binary64) (*.f64 (log.f64 a) #s(literal -1 binary64)))","(fma.f64 #s(literal -1 binary64) (log.f64 #s(literal -1/2 binary64)) (*.f64 #s(literal -1 binary64) (log.f64 a)))","(+.f64 (*.f64 (log.f64 #s(literal -1/2 binary64)) #s(literal -1 binary64)) (*.f64 (log.f64 a) #s(literal -1 binary64)))","(+.f64 (*.f64 #s(literal -1 binary64) (log.f64 #s(literal -1/2 binary64))) (*.f64 #s(literal -1 binary64) (log.f64 a)))","(log.f64 (*.f64 #s(literal -2 binary64) (pow.f64 a #s(literal -1 binary64))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (*.f64 #s(literal -2 binary64) (pow.f64 a #s(literal -1 binary64))) b_2))","(*.f64 (*.f64 #s(literal -2 binary64) (pow.f64 a #s(literal -1 binary64))) b_2)","(*.f64 b_2 (*.f64 #s(literal -2 binary64) (pow.f64 a #s(literal -1 binary64))))","(*.f64 (/.f64 #s(literal -1 binary64) b_2) (/.f64 (*.f64 c a) #s(literal -1 binary64)))","(*.f64 (/.f64 c #s(literal -1 binary64)) (/.f64 (neg.f64 a) b_2))","(*.f64 (/.f64 a #s(literal -1 binary64)) (/.f64 (neg.f64 c) b_2))","(*.f64 (/.f64 (neg.f64 c) #s(literal -1 binary64)) (/.f64 a b_2))","(*.f64 (/.f64 (neg.f64 a) b_2) (/.f64 c #s(literal -1 binary64)))","(*.f64 (/.f64 (neg.f64 c) b_2) (/.f64 a #s(literal -1 binary64)))","(*.f64 (*.f64 (neg.f64 c) a) (pow.f64 (neg.f64 b_2) #s(literal -1 binary64)))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (/.f64 a (pow.f64 c #s(literal -1 binary64))))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (pow.f64 (pow.f64 (*.f64 c a) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (pow.f64 b_2 #s(literal -1 binary64)) (*.f64 c a))","(*.f64 (/.f64 a b_2) (/.f64 (neg.f64 c) #s(literal -1 binary64)))","(*.f64 (/.f64 a b_2) c)","(*.f64 (/.f64 c b_2) a)","(*.f64 #s(literal 1 binary64) (/.f64 (*.f64 c a) b_2))","(*.f64 (*.f64 c a) (pow.f64 b_2 #s(literal -1 binary64)))","(*.f64 c (/.f64 a b_2))","(*.f64 a (/.f64 c b_2))","(pow.f64 (/.f64 (/.f64 (/.f64 b_2 a) c) #s(literal 1 binary64)) #s(literal -1 binary64))","(pow.f64 (/.f64 (/.f64 b_2 a) c) #s(literal -1 binary64))","(/.f64 (neg.f64 (/.f64 (*.f64 (neg.f64 c) a) #s(literal -1 binary64))) (neg.f64 b_2))","(/.f64 (neg.f64 (neg.f64 (*.f64 (neg.f64 c) a))) (neg.f64 (neg.f64 (neg.f64 b_2))))","(/.f64 (neg.f64 (*.f64 #s(literal 1 binary64) a)) (neg.f64 (/.f64 b_2 c)))","(/.f64 (neg.f64 (*.f64 (*.f64 c a) #s(literal 1 binary64))) (neg.f64 b_2))","(/.f64 (neg.f64 (*.f64 c #s(literal 1 binary64))) (neg.f64 (/.f64 b_2 a)))","(/.f64 (/.f64 (*.f64 (neg.f64 c) a) #s(literal -1 binary64)) b_2)","(/.f64 (neg.f64 (*.f64 (neg.f64 c) a)) (neg.f64 (neg.f64 b_2)))","(/.f64 (*.f64 #s(literal 1 binary64) a) (/.f64 b_2 c))","(/.f64 (*.f64 c #s(literal 1 binary64)) (/.f64 b_2 a))","(/.f64 (*.f64 (*.f64 c a) #s(literal 1 binary64)) b_2)","(/.f64 (*.f64 (neg.f64 c) a) (neg.f64 b_2))","(/.f64 (neg.f64 c) (neg.f64 (/.f64 b_2 a)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 (/.f64 b_2 a) c) #s(literal 1 binary64))))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 (/.f64 b_2 a) c)))","(/.f64 #s(literal 1 binary64) (neg.f64 (neg.f64 (/.f64 (/.f64 b_2 a) c))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 (/.f64 b_2 a) c) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 b_2 a) c))","(/.f64 (*.f64 c a) b_2)","(/.f64 c (/.f64 b_2 a))","(neg.f64 (*.f64 (neg.f64 c) (/.f64 a b_2)))","(-.f64 (/.f64 #s(literal 0 binary64) (neg.f64 b_2)) (*.f64 (neg.f64 c) (/.f64 a b_2)))","(exp.f64 (*.f64 (log.f64 (/.f64 (/.f64 b_2 a) c)) #s(literal -1 binary64)))","(*.f64 (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))) (sqrt.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))))","(*.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 1/4 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 1/4 binary64)))","(pow.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 1/4 binary64)) #s(literal 2 binary64))","(pow.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 2 binary64)) #s(literal 1/4 binary64))","(pow.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))) #s(literal 1 binary64))","(pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)) #s(literal 1/2 binary64))","(sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))","(fabs.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2))))","(exp.f64 (log.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))))","(/.f64 (+.f64 (pow.f64 (log.f64 a) #s(literal 3 binary64)) (pow.f64 (log.f64 #s(literal -1/2 binary64)) #s(literal 3 binary64))) (fma.f64 (log.f64 a) (log.f64 a) (-.f64 (pow.f64 (log.f64 #s(literal -1/2 binary64)) #s(literal 2 binary64)) (*.f64 (log.f64 a) (log.f64 #s(literal -1/2 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 (log.f64 #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (log.f64 a) #s(literal 2 binary64)))) (neg.f64 (log.f64 (/.f64 #s(literal -1/2 binary64) a))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (log.f64 #s(literal -1/2 binary64)) #s(literal 3 binary64)) (pow.f64 (log.f64 a) #s(literal 3 binary64)))) (neg.f64 (fma.f64 (log.f64 #s(literal -1/2 binary64)) (log.f64 #s(literal -1/2 binary64)) (-.f64 (pow.f64 (log.f64 a) #s(literal 2 binary64)) (*.f64 (log.f64 #s(literal -1/2 binary64)) (log.f64 a))))))","(/.f64 (-.f64 (pow.f64 (log.f64 #s(literal -1/2 binary64)) #s(literal 2 binary64)) (pow.f64 (log.f64 a) #s(literal 2 binary64))) (log.f64 (/.f64 #s(literal -1/2 binary64) a)))","(/.f64 (+.f64 (pow.f64 (log.f64 #s(literal -1/2 binary64)) #s(literal 3 binary64)) (pow.f64 (log.f64 a) #s(literal 3 binary64))) (fma.f64 (log.f64 #s(literal -1/2 binary64)) (log.f64 #s(literal -1/2 binary64)) (-.f64 (pow.f64 (log.f64 a) #s(literal 2 binary64)) (*.f64 (log.f64 #s(literal -1/2 binary64)) (log.f64 a)))))","(-.f64 (/.f64 (pow.f64 (log.f64 #s(literal -1/2 binary64)) #s(literal 2 binary64)) (log.f64 (/.f64 #s(literal -1/2 binary64) a))) (/.f64 (pow.f64 (log.f64 a) #s(literal 2 binary64)) (log.f64 (/.f64 #s(literal -1/2 binary64) a))))","(+.f64 (log.f64 a) (log.f64 #s(literal -1/2 binary64)))","(+.f64 (log.f64 #s(literal -1/2 binary64)) (log.f64 a))","(log.f64 (*.f64 #s(literal -1/2 binary64) a))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":287.585205078125,"type":"rewrite"},{"compiler":[[30072,2694]],"memory":[[5844656,60081680]],"time":83.156005859375,"type":"eval"},{"alts":[["(fma.f64 (/.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 1/4 binary64)) a) (/.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 1/4 binary64)) #s(literal 1 binary64)) (neg.f64 (/.f64 b_2 a)))","fresh",30.8203582860819,"binary64"],["(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) b_2) a)","fresh",26.00929445191177,"binary64"],["(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) a)","fresh",38.860972444426615,"binary64"],["(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) a)","done",29.426324542377294,"binary64"],["(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 c (/.f64 b_2 a)))) b_2))) b_2) a)","fresh",30.39156930412828,"binary64"],["(/.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 b_2)) (*.f64 a (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)))","fresh",48.67509837460948,"binary64"],["(/.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2) a)","done",55.865902732609655,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64))))) a)","fresh",45.38974994417073,"binary64"],["(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 b_2 c))) a)","fresh",45.43018540486016,"binary64"],["(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)))","fresh",29.534078302145733,"binary64"],["(-.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) a) (/.f64 b_2 a))","fresh",29.806638125717676,"binary64"],["(*.f64 (/.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 b_2)) a) (/.f64 (pow.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(literal -1 binary64)) #s(literal 1 binary64)))","fresh",46.73076302557006,"binary64"],["(*.f64 (/.f64 #s(literal 1 binary64) a) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) #s(approx (* (* b_2 b_2) (- 1 (* (/ c b_2) (/ a b_2)))) (*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 c)) a) c)))) b_2))","fresh",29.208742594300066,"binary64"],["(exp.f64 (*.f64 (log.f64 (/.f64 a #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)))) #s(literal -1 binary64)))","fresh",53.87047188511415,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 (fma.f64 (/.f64 (*.f64 c (/.f64 a b_2)) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c)) b_2))","fresh",41.84348553561971,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))","done",41.79597787130958,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal 1 binary64) (/.f64 b_2 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)))))","fresh",41.9246399873543,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -2 binary64) (/.f64 a b_2)))","fresh",42.362028710332595,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 #s(literal -1 binary64) b_2) (/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) #s(literal -1 binary64))))","fresh",41.85847787130958,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","done",42.34249758422694,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (*.f64 (*.f64 #s(literal -2 binary64) (pow.f64 a #s(literal -1/2 binary64))) (pow.f64 a #s(literal -1/2 binary64)))))","fresh",53.453916633621404,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (exp.f64 (neg.f64 (log.f64 (*.f64 #s(literal -1/2 binary64) a))))))","fresh",53.509977129158294,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","done",42.299528834231644,"binary64"],["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (exp.f64 (*.f64 (log.f64 (/.f64 b_2 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)))) #s(literal -1 binary64))))","fresh",52.19026584662286,"binary64"]],"compiler":[[1627,268],[71,26],[20,13],[17,12],[34,21],[34,21],[68,24],[21,14],[16,12],[21,15],[36,23],[36,22],[72,28],[38,23],[21,17],[44,29],[35,24],[37,26],[19,14],[39,27],[19,14],[25,17],[22,17],[19,14],[39,28]],"count":[[653,24]],"kept":[{"done":[6,2],"fresh":[13,6],"new":[629,13],"picked":[5,3]}],"memory":[[-3442176,37856800]],"min-error":[[3.5628865988138547,"binary64"]],"time":63.349853515625,"type":"prune"},{"accuracy":[6.348045951143504],"baseline":[26.00929445191177],"branch":[["a",26.00929445191178,1,"binary64"],["b_2",6.348045951143504,3,"binary64"],["c",26.00929445191177,1,"binary64"],["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",12.991827333736383,5,"binary64"]],"compiler":[[1,3],[1,3],[1,3],[13,10]],"count":[[49,3]],"inputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -2 binary64) (/.f64 a b_2)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal 1 binary64) (/.f64 b_2 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)))))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) a)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 #s(literal -1 binary64) b_2) (/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) #s(literal -1 binary64))))","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 a (/.f64 #s(literal -1/2 binary64) b_2)) c)) a)","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a))) a)","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(/.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2) a)","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) b_2) a)","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (/.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 b_2 c))) a)","(/.f64 (+.f64 (neg.f64 b_2) #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (*.f64 #s(literal -1/2 binary64) a) (/.f64 c b_2) b_2))) a)","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) a)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 (fma.f64 (/.f64 (*.f64 c (/.f64 a b_2)) b_2) #s(literal -1/8 binary64) #s(literal -1/2 binary64)) c)) b_2))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 a c) b_2))) b_2)))) a)","(*.f64 (/.f64 #s(literal 1 binary64) a) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) #s(approx (* (* b_2 b_2) (- 1 (* (/ c b_2) (/ a b_2)))) (*.f64 (-.f64 (*.f64 b_2 (/.f64 b_2 c)) a) c)))) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (*.f64 (/.f64 a b_2) #s(literal -1/8 binary64)) (/.f64 (*.f64 c c) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 (fma.f64 (/.f64 #s(literal -1/8 binary64) b_2) (/.f64 (*.f64 (*.f64 c c) a) b_2) (*.f64 #s(literal -1/2 binary64) c)) b_2))","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 c (/.f64 b_2 a)))) b_2))) b_2) a)","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 c (/.f64 b_2 a)))) b_2)))) a)","(-.f64 (/.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) a) (/.f64 b_2 a))","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 (-.f64 #s(literal 1 binary64) (/.f64 (/.f64 (*.f64 c a) b_2) b_2)) b_2) b_2)))) a)","(*.f64 (/.f64 #s(literal 1 binary64) a) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2))","(/.f64 #s(literal 1 binary64) (/.f64 a (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2)))","(/.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 b_2)) (*.f64 a (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2)))","(/.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) (*.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))))))","(/.f64 (-.f64 (*.f64 b_2 b_2) #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) (*.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))))))","(*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) #s(approx (* (* b_2 b_2) (- 1 (* (/ c b_2) (/ a b_2)))) (*.f64 (neg.f64 a) c)))) b_2))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (/.f64 #s(literal -1 binary64) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) #s(literal -1 binary64))))) a)","(*.f64 (pow.f64 a #s(literal -1 binary64)) (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2)))))) b_2))","(-.f64 (/.f64 (*.f64 b_2 b_2) (*.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))))) (/.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))) (*.f64 a (-.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (*.f64 b_2 b_2) (-.f64 #s(literal 1 binary64) (*.f64 (/.f64 c b_2) (/.f64 a b_2))))))))))","(*.f64 (/.f64 (-.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 b_2)) a) (/.f64 (pow.f64 (+.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2))) b_2) #s(literal -1 binary64)) #s(literal 1 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (exp.f64 (neg.f64 (log.f64 (*.f64 #s(literal -1/2 binary64) a))))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (exp.f64 (*.f64 (log.f64 (*.f64 #s(literal -1/2 binary64) a)) #s(literal -1 binary64)))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (*.f64 (*.f64 #s(literal -2 binary64) (pow.f64 a #s(literal -1/2 binary64))) (pow.f64 a #s(literal -1/2 binary64)))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 (pow.f64 a #s(literal -1 binary64)) (pow.f64 b_2 #s(literal -1 binary64)))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (exp.f64 (*.f64 (log.f64 (/.f64 b_2 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)))) #s(literal -1 binary64))))","(exp.f64 (*.f64 (log.f64 (/.f64 a #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)))) #s(literal -1 binary64)))","(exp.f64 (*.f64 (log.f64 (/.f64 a #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 #s(literal -1/2 binary64) (/.f64 a b_2)) c)))) #s(literal -1 binary64)))","(fma.f64 (/.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 1/4 binary64)) a) (/.f64 (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 1/4 binary64)) #s(literal 1 binary64)) (neg.f64 (/.f64 b_2 a)))","(*.f64 (pow.f64 (/.f64 a (+.f64 (pow.f64 b_2 #s(literal 3 binary64)) (pow.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) #s(literal 3/2 binary64)))) #s(literal -1 binary64)) (pow.f64 (fma.f64 b_2 b_2 (+.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)) (*.f64 b_2 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 #s(approx (* (- 1 (/ (/ (* c a) b_2) b_2)) b_2) (-.f64 b_2 (/.f64 (*.f64 c a) b_2))) b_2)))))) #s(literal -1 binary64)))"]],"memory":[[-7144000,26056704]],"oracle":[64.0],"outputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) b_2) a)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))"]],"repr":["binary64"],"time":48.818115234375,"times":[[10.74609375,"a"],[11.076904296875,"b_2"],[11.765869140625,"c"],[10.2138671875,"(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"]],"type":"regimes"},{"accuracy":[10.299405938075969],"baseline":[38.860972444426615],"branch":[["b_2",10.299405938075969,3,"binary64"]],"compiler":[[1,3]],"count":[[15,3]],"inputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -2 binary64) (/.f64 a b_2)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal 1 binary64) (/.f64 b_2 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)))))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) a)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 #s(literal -1 binary64) b_2) (/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) #s(literal -1 binary64))))","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 a (/.f64 #s(literal -1/2 binary64) b_2)) c)) a)","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (*.f64 (/.f64 a b_2) #s(literal -1/2 binary64)) c)) a)","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a))) a)","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c)))) a)","(/.f64 (-.f64 #s(approx (sqrt (- (* b_2 b_2) (* a c))) (fma.f64 (/.f64 c b_2) (*.f64 #s(literal -1/2 binary64) a) b_2)) b_2) a)"]],"memory":[[3749088,3749088]],"oracle":[63.20617080826156],"outputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","(/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) a)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))"]],"repr":["binary64"],"time":5.2138671875,"times":[[3.947998046875,"b_2"]],"type":"regimes"},{"accuracy":[21.668700753517577],"baseline":[41.79597787130958],"branch":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",31.633023454079293,3,"binary64"],["b_2",21.668700753517577,2,"binary64"]],"compiler":[[13,10],[1,3]],"count":[[8,2]],"inputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))","(/.f64 #s(approx (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) (*.f64 #s(literal -2 binary64) b_2)) a)","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal -2 binary64) (/.f64 a b_2)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(literal 1 binary64) (/.f64 b_2 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)))))","(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 b_2 b_2)))) a)"]],"memory":[[-3616208,4703184]],"oracle":[62.624601539606864],"outputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))"]],"repr":["binary64"],"time":5.820068359375,"times":[[2.365966796875,"(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"],[2.4580078125,"b_2"]],"type":"regimes"},{"accuracy":[21.672607003517577],"baseline":[41.79988412130958],"branch":[["b_2",21.672607003517577,2,"binary64"]],"compiler":[[1,3]],"count":[[3,2]],"inputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))"]],"memory":[[2008688,2008688]],"oracle":[62.453021053868476],"outputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64)))"]],"repr":["binary64"],"time":1.8740234375,"times":[[1.468994140625,"b_2"]],"type":"regimes"},{"accuracy":[42.29952883423163],"baseline":[42.299528834231644],"branch":[["(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",42.29952883423165,1,"binary64"],["a",42.29952883423163,1,"binary64"],["c",42.29952883423164,1,"binary64"],["b_2",42.299528834231666,1,"binary64"]],"compiler":[[13,10],[1,3],[1,3],[1,3]],"count":[[2,1]],"inputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 b_2 (/.f64 #s(literal -2 binary64) a)))"]],"link":["."],"memory":[[-1799488,6542752]],"name":["quad2p (problem 3.2.1, positive)"],"oracle":[42.342497584231644],"outputs":[["#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))"]],"repr":["binary64"],"time":5.765869140625,"times":[[1.31689453125,"(/.f64 (+.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"],[1.219970703125,"a"],[1.293212890625,"c"],[1.258056640625,"b_2"]],"type":"regimes"},{"bstep":[[24.155029296875,2.241258349143298e-66,7.463399815502785e-61],[7.306884765625,-8.444673234962114e+156,-9.922354315312451e+150]],"compiler":[[35,25],[20,14],[35,25],[20,14],[35,25],[20,14],[35,25],[20,14],[35,25],[20,14],[35,25],[20,14],[35,25],[20,14],[35,25],[20,14],[35,25],[20,14],[20,14],[19,15],[20,14],[19,15],[20,14],[19,15],[20,14],[19,15],[15,13],[1,3]],"memory":[[2101216,10006464]],"method":["binary-search","binary-search"],"mixsample":[[1.241455078125,"adjust",800],[2.254150390625,"ival-div",0],[0.03515625,"ival-mult",800],[1.6943359375,"ival-add",0],[0.226806640625,"ival-sqrt",1600],[0.348876953125,"ival-mult",400],[3.36767578125,"ival-mult",0],[0.136474609375,"ival-sub",1600],[0.088623046875,"ival-assert",0],[1.135986328125,"ival-sub",0],[0.178466796875,"ival-true",0],[0.310302734375,"ival-sub",400],[1.590087890625,"ival-sqrt",0],[0.355224609375,"adjust",2000],[1.19970703125,"ival-neg",0],[0.510986328125,"ival-sqrt",400]],"outcomes":[[5.634033203125,1,"valid",38],[4.4697265625,2,"valid",25],[1.2744140625,0,"invalid",16],[10.6083984375,0,"valid",145]],"stop":[["narrow-enough",1],["predicate-same",1]],"time":35.837158203125,"type":"bsearch"},{"bstep":[[1.176025390625,2.241258349143298e-66,7.463399815502785e-61],[14.512939453125,-2.4785688255643095e-125,-6.91394860929283e-127]],"compiler":[[35,25],[17,13],[35,25],[17,13],[35,25],[17,13],[35,25],[17,13],[35,25],[17,13],[35,25],[17,13],[35,25],[17,13],[35,25],[17,13],[35,25],[17,13],[17,13],[19,15],[17,13],[19,15],[17,13],[19,15],[17,13],[19,15],[17,13],[19,15],[17,13],[19,15],[17,13],[19,15],[15,13],[1,3]],"memory":[[5700288,5700288]],"method":["binary-search","binary-search"],"mixsample":[[0.6943359375,"ival-sub",0],[0.968994140625,"ival-div",0],[0.094970703125,"ival-true",0],[0.6474609375,"ival-add",0],[2.017822265625,"ival-mult",0],[0.9599609375,"ival-sqrt",0],[0.057373046875,"ival-assert",0],[0.78564453125,"ival-neg",0]],"outcomes":[[1.847412109375,0,"invalid",24],[7.96826171875,0,"valid",112]],"stop":[["narrow-enough",1],["narrow-enough",1]],"time":18.431884765625,"type":"bsearch"},{"bstep":[[22.23388671875,3.5899176469439916e-305,6.22934740851642e-301]],"compiler":[[35,25],[19,15],[35,25],[19,15],[35,25],[19,15],[35,25],[19,15],[35,25],[19,15],[35,25],[19,15],[35,25],[19,15],[35,25],[19,15],[15,13],[1,3]],"memory":[[-1362064,7239664]],"method":["binary-search"],"mixsample":[[0.99365234375,"ival-sub",0],[1.437744140625,"ival-div",0],[0.14990234375,"ival-true",0],[0.96240234375,"ival-add",0],[2.99169921875,"ival-mult",0],[1.39599609375,"ival-sqrt",0],[0.08154296875,"ival-assert",0],[1.134765625,"ival-neg",0]],"outcomes":[[5.57763671875,0,"invalid",73],[9.100341796875,0,"valid",128]],"stop":[["narrow-enough",1]],"time":25.60302734375,"type":"bsearch"},{"bstep":[[1.14013671875,3.5899176469439916e-305,6.22934740851642e-301]],"compiler":[[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[19,15],[15,13],[1,3]],"memory":[[640032,640032]],"method":["binary-search"],"stop":[["narrow-enough",1]],"time":1.6279296875,"type":"bsearch"},{"egraph":[[7,2694,265,0.030645416],[6,1275,265,0.013951832],[5,618,265,0.005833889],[4,442,265,0.003464846],[3,274,265,0.003531695],[2,144,265,0.001625556],[1,86,271,0.001168426],[0,56,280,0.000941165]],"inputs":[["(if (<=.f64 b_2 #s(literal -50000000000000002312554067952099737000613136197536344245944363600636276876889825461691709941101712565994831225244845295459698844758220898317376004554752 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (if (<=.f64 b_2 #s(literal 8726832914295267/948568795032094272909893509191171341133987714380927500611236528192824358010355712 binary64)) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) b_2) a) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))))","(if (<=.f64 b_2 #s(literal -2286436926500971/95268205270873786358080970147496530326800480428008152797215483387004752771599292606210513399154418065180265231976520474104247304665780191232 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (if (<=.f64 b_2 #s(literal 8726832914295267/948568795032094272909893509191171341133987714380927500611236528192824358010355712 binary64)) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) a) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))))","(if (<=.f64 b_2 #s(literal 7115704217835139/197658450495420525734858737030192682665582665785295037457911482448662440984370455949180062208434691889831130726871886632216610095103313942252942773379627451095231859645084337269987214591887906583241960623508540106017585433031926463494241558251132379239072320812850360890950600210186037629088210457662115491511433340911616 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2)))","(if (<=.f64 b_2 #s(literal 7115704217835139/197658450495420525734858737030192682665582665785295037457911482448662440984370455949180062208434691889831130726871886632216610095103313942252942773379627451095231859645084337269987214591887906583241960623508540106017585433031926463494241558251132379239072320812850360890950600210186037629088210457662115491511433340911616 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))"]],"memory":[[-1666992,13983376]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 b_2 #s(literal -50000000000000002312554067952099737000613136197536344245944363600636276876889825461691709941101712565994831225244845295459698844758220898317376004554752 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (if (<=.f64 b_2 #s(literal 8726832914295267/948568795032094272909893509191171341133987714380927500611236528192824358010355712 binary64)) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (fma.f64 (neg.f64 a) c (*.f64 b_2 b_2)))) b_2) a) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))))","(if (<=.f64 b_2 #s(literal -2286436926500971/95268205270873786358080970147496530326800480428008152797215483387004752771599292606210513399154418065180265231976520474104247304665780191232 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) (if (<=.f64 b_2 #s(literal 8726832914295267/948568795032094272909893509191171341133987714380927500611236528192824358010355712 binary64)) (/.f64 (-.f64 (sqrt.f64 #s(approx (- (* b_2 b_2) (* a c)) (*.f64 (neg.f64 a) c))) b_2) a) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2))))","(if (<=.f64 b_2 #s(literal 7115704217835139/197658450495420525734858737030192682665582665785295037457911482448662440984370455949180062208434691889831130726871886632216610095103313942252942773379627451095231859645084337269987214591887906583241960623508540106017585433031926463494241558251132379239072320812850360890950600210186037629088210457662115491511433340911616 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/.f64 #s(approx (+ (* (* (/ a b_2) -1/8) (/ (* c c) b_2)) (* -1/2 c)) (*.f64 #s(literal -1/2 binary64) c)) b_2)))","(if (<=.f64 b_2 #s(literal 7115704217835139/197658450495420525734858737030192682665582665785295037457911482448662440984370455949180062208434691889831130726871886632216610095103313942252942773379627451095231859645084337269987214591887906583241960623508540106017585433031926463494241558251132379239072320812850360890950600210186037629088210457662115491511433340911616 binary64)) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a))) #s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 (/.f64 c b_2) #s(literal -1/2 binary64))))","#s(approx (/ (+ (neg b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (*.f64 #s(literal -2 binary64) (/.f64 b_2 a)))"]],"stop":[["node limit",1]],"time":88.337158203125,"type":"simplify"},{"compiler":[[280,57]],"memory":[[1205520,1205520]],"stop":[["fuel",1]],"time":1.635986328125,"type":"soundness"},{"compiler":[[280,57],[280,57],[89,26],[89,26],[13,10],[13,10]],"memory":[[430752,34071280]],"remove-preprocessing":[[],[],[],[],[],[]],"time":59.745849609375,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.02001953125,"type":"end"}]