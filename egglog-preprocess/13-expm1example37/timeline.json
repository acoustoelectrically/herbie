[{"memory":[[9296,9296]],"time":0.037109375,"type":"start"},{"compiler":[[9,6]],"memory":[[68016,68016]],"method":["search"],"sampling":[[1,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.0,"valid":0.49951171875}],[0,{"invalid":0.0,"precondition":0.50048828125,"unknown":0.49951171875,"valid":0.0}]],"time":0.3740234375,"type":"analyze"},{"bogosity":[{"invalid":0.0,"precondition":0.50048828125,"valid":0.49951171875}],"memory":[[8398672,160863136]],"mixsample":[[58.495849609375,"ival-fabs",0],[5.77880859375,"exact",0],[24.02587890625,"ival-<=",0],[80.19775390625,"ival-expm1",0],[3.955078125,"ival-assert",0]],"outcomes":[[312.826416015625,0,"valid",8256]],"time":519.559814453125,"type":"sample"},{"compiler":[[4,4],[10,6],[10,6]],"confusion":[[254,0,1,1]],"explanations":[["-.f64","(-.f64 (exp.f64 x) #s(literal 1 binary64))","cancellation",255,0,[],[[]]]],"fperrors":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))",254,1,[0.008034170011244969],0,false],["#s(literal 1 binary64)",0,0,false,0,false],["(exp.f64 x)",0,0,false,0,false],["x",0,0,false,0,false]],"freqs":[[1,255],[0,1]],"maybe-confusion":[[254,0,0,1,0,1]],"memory":[[-2532320,24619680]],"mixsample":[[0.37548828125,"ival-true",0],[4.967529296875,"ival-exp",0],[4.265625,"ival-expm1",0],[0.281982421875,"exact",0],[0.2060546875,"ival-assert",0]],"outcomes":[[19.4404296875,0,"valid",512]],"time":51.9501953125,"total-confusion":[[1,0,0,0,0,0]],"type":"explain"},{"compiler":[[4,4]],"egraph":[[0,12,2,0.000100654],[2,12,4,7.0573e-5],[1,11,4,7.4191e-5],[0,6,4,0.000143542],[0,4,4,7.7405e-5]],"inputs":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))"]],"memory":[[6595184,14696112]],"method":["egg-herbie"],"outputs":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))","(expm1.f64 x)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"symmetry":[[]],"time":140.5458984375,"type":"preprocess"},{"compiler":[[0,1]],"memory":[[40816,40816]],"time":0.06591796875,"type":"eval"},{"alts":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))","next",58.50516243972476,"binary64"]],"compiler":[[4,4]],"memory":[[303744,303744]],"time":0.6220703125,"type":"prune"},{"egraph":[[0,12,6,7.5799e-5],[2,12,8,7.0302e-5],[1,11,8,7.5307e-5],[0,6,8,0.000148878],[0,4,8,6.4475e-5]],"inputs":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))","(exp.f64 x)","x","#s(literal 1 binary64)"]],"locations":[["(exp.f64 x)","cost-diff",0],["(-.f64 (exp.f64 x) #s(literal 1 binary64))","cost-diff",2]],"memory":[[-7450000,464112]],"method":["egg-herbie"],"outputs":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))","(expm1.f64 x)","(exp.f64 x)","x","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":6.234130859375,"type":"simplify"},{"compiler":[[10,6]],"locations":[["(exp.f64 x)","accuracy",0.0],["(-.f64 (exp.f64 x) #s(literal 1 binary64))","accuracy",58.50516243972476]],"memory":[[5320880,5320880]],"mixsample":[[0.132080078125,"ival-true",0],[2.2880859375,"ival-exp",0],[1.949951171875,"ival-expm1",0],[0.13232421875,"exact",0],[0.083251953125,"ival-assert",0]],"outcomes":[[8.804443359375,0,"valid",256]],"time":13.90087890625,"type":"localize"},{"count":[[2,10]],"inputs":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))","(exp.f64 x)"]],"memory":[[289776,289776]],"outputs":[["x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(- (exp x) 1)","(exp x)"]],"series":[[0.108154296875,"((- (exp x) 1) (exp x))","x","-inf"],[0.1259765625,"((- (exp x) 1) (exp x))","x","inf"],[0.4189453125,"((- (exp x) 1) (exp x))","x","0"]],"time":0.826904296875,"type":"series"},{"count":[[10,9]],"egraph":[[0,725,53,0.005371388],[6,725,66,0.002661506],[5,720,66,0.003122794],[4,587,66,0.003398254],[3,371,66,0.00264704],[2,168,66,0.001274314],[1,77,66,0.000539912],[0,25,66,0.000325408]],"inputs":[["x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(- (exp x) 1)","(exp x)"]],"memory":[[-11056704,3509360]],"method":["egg-herbie"],"outputs":[["x","(* x (+ 1 (* 1/2 x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","1","#s(literal 1 binary64)","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(- (exp x) 1)","(expm1.f64 x)","(exp x)","(exp.f64 x)"]],"stop":[["iter limit",1],["saturated",1]],"time":35.837158203125,"type":"simplify"},{"count":[[2,84]],"egraph":[[0,1145,4,0.008074476],[2,130,6,0.003912607],[1,24,6,0.000844665],[0,6,6,0.000602775],[0,4,6,6.998e-5]],"inputs":[["(-.f64 (exp.f64 x) #s(literal 1 binary64))","(exp.f64 x)"]],"memory":[[4518320,12221760]],"outputs":[["(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (exp.f64 x)))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64)))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))) (-.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (exp.f64 x)))","(*.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64)))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal 4 binary64))))","(*.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (expm1.f64 x))","(*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (expm1.f64 x))","(*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (expm1.f64 (*.f64 x #s(literal 2 binary64))))","(*.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (expm1.f64 (*.f64 #s(literal 3 binary64) x)))","(*.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(*.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))))","(*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (/.f64 (expm1.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (*.f64 (expm1.f64 x) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (/.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal -1 binary64) (exp.f64 x))))))","(*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (expm1.f64 x))","(pow.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 x)) #s(literal -1 binary64))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 9 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64))))","(/.f64 (*.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))) (fma.f64 (exp.f64 x) (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))) (*.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (fma.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (fma.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)))) (neg.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(/.f64 (-.f64 (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (exp.f64 x)))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 9 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal -1 binary64) (exp.f64 x)))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 9 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (+.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal -1 binary64) (exp.f64 x)))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (neg.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal -1 binary64) (exp.f64 x))))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 x))))","(/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 #s(literal -1 binary64) (exp.f64 x)))))","(/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal -1 binary64) (exp.f64 x)))))","(/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (expm1.f64 x) #s(literal 1 binary64))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal -1 binary64) (exp.f64 x)))) (expm1.f64 (*.f64 #s(literal 3 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (expm1.f64 x)))","(neg.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(neg.f64 (/.f64 (neg.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(neg.f64 (/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (neg.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(neg.f64 (/.f64 (expm1.f64 (*.f64 #s(literal 3 binary64) x)) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (-.f64 #s(literal 1 binary64) (exp.f64 x)) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64))) (fma.f64 (exp.f64 x) (expm1.f64 x) #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (expm1.f64 x) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))) (-.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (exp.f64 x)) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (+.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (exp.f64 x) #s(literal 6 binary64)))) (fma.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (pow.f64 (exp.f64 x) #s(literal 4 binary64))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(fma.f64 (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 3/2 binary64)) (/.f64 (pow.f64 (exp.f64 x) #s(literal 3/2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (/.f64 (exp.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (exp.f64 x) #s(literal -1 binary64))","(fma.f64 (exp.f64 x) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(fma.f64 (exp.f64 x) (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (exp.f64 x) #s(literal 1 binary64) #s(literal -1 binary64))","(expm1.f64 x)","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal -1 binary64) (exp.f64 x))))) (/.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal -1 binary64) (exp.f64 x))))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(+.f64 #s(literal -1 binary64) (exp.f64 x))","(+.f64 (exp.f64 x) #s(literal -1 binary64))","(*.f64 #s(literal 1 binary64) (exp.f64 x))","(*.f64 (exp.f64 x) #s(literal 1 binary64))","(exp.f64 x)"]],"stop":[["iter limit",1],["iter limit",1],["node limit",1],["iter limit",1]],"time":133.177001953125,"type":"rewrite"},{"compiler":[[1818,254]],"memory":[[1107392,8955952]],"time":11.19091796875,"type":"eval"},{"alts":[["(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","fresh",58.76608766205578,"binary64"],["(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","fresh",58.94384947017878,"binary64"],["(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","fresh",59.29806170764161,"binary64"],["(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","next",60.56168059992402,"binary64"],["(expm1.f64 x)","next",0.0,"binary64"],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","next",0.20965628413770843,"binary64"],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","next",0.3554876019294538,"binary64"],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","next",0.6659627997746709,"binary64"]],"compiler":[[15,10],[12,8],[8,6],[6,5],[2,2],[17,13],[14,11],[11,9],[15,10],[12,8],[8,6],[6,5],[2,2],[17,13],[14,11],[11,9]],"count":[[94,8]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[93,8],"picked":[1,0]}],"memory":[[-1989328,6293712]],"min-error":[[0.0,"binary64"]],"time":6.613037109375,"type":"prune"},{"egraph":[[0,756,125,0.00391039],[6,756,125,0.002637128],[5,702,125,0.003794679],[4,442,125,0.002849789],[3,206,125,0.001321533],[2,99,125,0.000749535],[1,59,125,0.000420471],[0,38,125,0.000399747],[0,22,125,0.000250493]],"inputs":[["(expm1.f64 x)","x","(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (exp x) #s(literal 1 binary64))","#s(literal 1 binary64)","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(literal 1/2 binary64)","x","#s(literal 1 binary64)","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","#s(literal 1/6 binary64)","x","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","#s(literal 1/24 binary64)","x","#s(literal 1/6 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)"]],"locations":[["(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","cost-diff",0],["(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","cost-diff",0],["(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","cost-diff",0],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","cost-diff",0],["(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","cost-diff",0],["(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","cost-diff",0],["(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","cost-diff",0],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","cost-diff",0],["(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","cost-diff",0],["(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","cost-diff",0],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","cost-diff",0],["#s(approx (exp x) #s(literal 1 binary64))","cost-diff",0],["(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","cost-diff",0],["(expm1.f64 x)","cost-diff",0]],"memory":[[3422208,3422208]],"method":["egg-herbie"],"outputs":[["(expm1.f64 x)","x","(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (exp x) #s(literal 1 binary64))","#s(literal 1 binary64)","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(literal 1/2 binary64)","x","#s(literal 1 binary64)","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","#s(literal 1/6 binary64)","x","#s(literal 1/2 binary64)","#s(literal 1 binary64)","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","#s(literal 1/24 binary64)","x","#s(literal 1/6 binary64)","#s(literal 1/2 binary64)","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":27.531005859375,"type":"simplify"},{"compiler":[[117,24]],"locations":[["(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","accuracy",0.0],["(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","accuracy",0.01171875],["(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","accuracy",0.01953125],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","accuracy",0.19403128413264992],["(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","accuracy",0.0],["(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","accuracy",0.0],["(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","accuracy",0.0234375],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","accuracy",0.34365514513780954],["(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","accuracy",0.0],["(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","accuracy",0.015625],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","accuracy",0.6581214734841803],["#s(approx (exp x) #s(literal 1 binary64))","accuracy",1.4458254001648414],["(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","accuracy",58.50516243972476],["(expm1.f64 x)","accuracy",0.0]],"memory":[[-2802576,22209392]],"mixsample":[[0.26025390625,"ival-true",0],[3.039306640625,"ival-exp",0],[8.5869140625,"ival-add",0],[16.24169921875,"ival-mult",0],[7.35400390625,"const",0],[4.47119140625,"ival-expm1",0],[0.303466796875,"exact",0],[0.1259765625,"ival-assert",0]],"outcomes":[[62.760498046875,0,"valid",256]],"time":87.922119140625,"type":"localize"},{"count":[[15,47]],"inputs":[["(expm1.f64 x)","(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (exp x) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))"]],"memory":[[2733312,2733312]],"outputs":[["x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* 1/6 x))))","1/2","(+ 1/2 (* 1/6 x))","(+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x))))))","(+ 1/2 (* x (+ 1/6 (* 1/24 x))))","1/6","(+ 1/6 (* 1/24 x))","(- (exp x) 1)","(exp x)","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (/ 1 x)))","(* 1/2 x)","(* x (+ 1/2 (/ 1 x)))","(* 1/6 (pow x 3))","(* (pow x 3) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* 1/6 (pow x 2))","(* (pow x 2) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 2) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* 1/6 x)","(* x (+ 1/6 (* 1/2 (/ 1 x))))","(* 1/24 (pow x 4))","(* (pow x 4) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3))))))","(* 1/24 (pow x 3))","(* (pow x 3) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 3) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* (pow x 3) (+ 1/24 (+ (/ 1/2 (pow x 2)) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3))))))","(* 1/24 (pow x 2))","(* (pow x 2) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 2) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* 1/24 x)","(* x (+ 1/24 (* 1/6 (/ 1 x))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6)))","(* (pow x 4) (+ 1/24 (* -1 (/ (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6) x))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/6 (* 1/2 (/ 1 x))) x)) 1/24)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))) x)) 1/24)))"]],"series":[[3.91796875,"((- (exp x) 1) (- (exp x) 1) (exp x) (- (exp x) 1) (* (+ (* 1/2 x) 1) x) (+ (* 1/2 x) 1) (- (exp x) 1) (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) (+ (* (+ (* 1/6 x) 1/2) x) 1) (+ (* 1/6 x) 1/2) (- (exp x) 1) (* (+ (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) 1) x) (+ (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) 1) (+ (* (+ (* 1/24 x) 1/6) x) 1/2) (+ (* 1/24 x) 1/6))","x","-inf"],[4.296875,"((- (exp x) 1) (- (exp x) 1) (exp x) (- (exp x) 1) (* (+ (* 1/2 x) 1) x) (+ (* 1/2 x) 1) (- (exp x) 1) (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) (+ (* (+ (* 1/6 x) 1/2) x) 1) (+ (* 1/6 x) 1/2) (- (exp x) 1) (* (+ (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) 1) x) (+ (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) 1) (+ (* (+ (* 1/24 x) 1/6) x) 1/2) (+ (* 1/24 x) 1/6))","x","inf"],[2.577880859375,"((- (exp x) 1) (- (exp x) 1) (exp x) (- (exp x) 1) (* (+ (* 1/2 x) 1) x) (+ (* 1/2 x) 1) (- (exp x) 1) (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) (+ (* (+ (* 1/6 x) 1/2) x) 1) (+ (* 1/6 x) 1/2) (- (exp x) 1) (* (+ (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) 1) x) (+ (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) 1) (+ (* (+ (* 1/24 x) 1/6) x) 1/2) (+ (* 1/24 x) 1/6))","x","0"]],"time":12.19482421875,"type":"series"},{"count":[[47,46]],"egraph":[[0,8448,289,0.119843499],[4,5784,347,0.037756526],[3,3294,347,0.028649235],[2,870,349,0.016010485],[1,312,357,0.004504115],[0,89,361,0.001449217]],"inputs":[["x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* 1/6 x))))","1/2","(+ 1/2 (* 1/6 x))","(+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x))))))","(+ 1/2 (* x (+ 1/6 (* 1/24 x))))","1/6","(+ 1/6 (* 1/24 x))","(- (exp x) 1)","(exp x)","(* 1/2 (pow x 2))","(* (pow x 2) (+ 1/2 (/ 1 x)))","(* 1/2 x)","(* x (+ 1/2 (/ 1 x)))","(* 1/6 (pow x 3))","(* (pow x 3) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* 1/6 (pow x 2))","(* (pow x 2) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 2) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* 1/6 x)","(* x (+ 1/6 (* 1/2 (/ 1 x))))","(* 1/24 (pow x 4))","(* (pow x 4) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3))))))","(* 1/24 (pow x 3))","(* (pow x 3) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 3) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* (pow x 3) (+ 1/24 (+ (/ 1/2 (pow x 2)) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3))))))","(* 1/24 (pow x 2))","(* (pow x 2) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 2) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* 1/24 x)","(* x (+ 1/24 (* 1/6 (/ 1 x))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6)))","(* (pow x 4) (+ 1/24 (* -1 (/ (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6) x))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/6 (* 1/2 (/ 1 x))) x)) 1/24)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))) x)) 1/24)))"]],"memory":[[-525968,37087104]],"method":["egg-herbie"],"outputs":[["x","(* x (+ 1 (* 1/2 x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","1","#s(literal 1 binary64)","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* 1/2 x))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/2 (* 1/6 x))))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","1/2","#s(literal 1/2 binary64)","(+ 1/2 (* 1/6 x))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(+ 1/2 (* x (+ 1/6 (* 1/24 x))))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","1/6","#s(literal 1/6 binary64)","(+ 1/6 (* 1/24 x))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","(- (exp x) 1)","(expm1.f64 x)","(exp x)","(exp.f64 x)","(* 1/2 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(* (pow x 2) (+ 1/2 (/ 1 x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(* x (+ 1/2 (/ 1 x)))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(* 1/6 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64))","(* (pow x 3) (+ 1/6 (* 1/2 (/ 1 x))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x)","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)","(* 1/6 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/6 binary64))","(* (pow x 2) (+ 1/6 (* 1/2 (/ 1 x))))","(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)","(* (pow x 2) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(* 1/6 x)","(*.f64 #s(literal 1/6 binary64) x)","(* x (+ 1/6 (* 1/2 (/ 1 x))))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(* 1/24 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64))","(* (pow x 4) (+ 1/24 (* 1/6 (/ 1 x))))","(*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 x x))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(* 1/24 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64))","(* (pow x 3) (+ 1/24 (* 1/6 (/ 1 x))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x)","(* (pow x 3) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(* (pow x 3) (+ 1/24 (+ (/ 1/2 (pow x 2)) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(* 1/24 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/24 binary64))","(* (pow x 2) (+ 1/24 (* 1/6 (/ 1 x))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)","(* (pow x 2) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(* 1/24 x)","(*.f64 #s(literal 1/24 binary64) x)","(* x (+ 1/24 (* 1/6 (/ 1 x))))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6)))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)","(* (pow x 4) (+ 1/24 (* -1 (/ (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6) x))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/6 (* 1/2 (/ 1 x))) x)) 1/24)))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))) x)) 1/24)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))"]],"stop":[["iter limit",1],["node limit",1]],"time":397.6650390625,"type":"simplify"},{"count":[[15,456]],"egraph":[[0,8307,111,0.137591842],[2,1092,111,0.092215347],[1,150,111,0.005889241],[0,38,111,0.001842405],[0,22,111,0.000439861]],"inputs":[["(expm1.f64 x)","(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","#s(approx (exp x) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))"]],"memory":[[-538496,59703216]],"outputs":[["(*.f64 (/.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (expm1.f64 x) #s(literal 1 binary64)))","(*.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(*.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))))","(*.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 (exp.f64 x) #s(literal -1 binary64))))))","(*.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (expm1.f64 x))","(pow.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 x)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))) (*.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (fma.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (fma.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (*.f64 #s(literal -1 binary64) (exp.f64 x)))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))))) (neg.f64 (neg.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) #s(literal 1 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64)))) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (exp.f64 x) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (exp.f64 x) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 3 binary64)))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (exp.f64 x) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) (exp.f64 x)))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64)))) (neg.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 (exp.f64 x) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (expm1.f64 (*.f64 x #s(literal 2 binary64))) (-.f64 (exp.f64 x) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 x))))","(/.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 (exp.f64 x) #s(literal -1 binary64)))))","(/.f64 (expm1.f64 (*.f64 x #s(literal 3 binary64))) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 (exp.f64 x) #s(literal -1 binary64)))) (expm1.f64 (*.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (expm1.f64 x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (expm1.f64 x)))","(fma.f64 (/.f64 (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (/.f64 (exp.f64 x) #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(fma.f64 #s(literal 1 binary64) (exp.f64 x) #s(literal -1 binary64))","(fma.f64 (exp.f64 x) #s(literal 1 binary64) #s(literal -1 binary64))","(expm1.f64 x)","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 (exp.f64 x) #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 #s(literal 1 binary64) (*.f64 (exp.f64 x) #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64)))","(-.f64 (exp.f64 x) #s(literal 1 binary64))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 2 binary64)) (-.f64 (exp.f64 x) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 (exp.f64 x) #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 (exp.f64 x) #s(literal 3 binary64)) (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (-.f64 (exp.f64 x) #s(literal -1 binary64))) #s(literal -1 binary64))))","(+.f64 #s(literal -1 binary64) (exp.f64 x))","(+.f64 (exp.f64 x) #s(literal -1 binary64))","(*.f64 (/.f64 (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) (/.f64 (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))))","(*.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(*.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(*.f64 (-.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) (/.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (*.f64 (pow.f64 (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (/.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))))) (*.f64 (pow.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (pow.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) (/.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) (fma.f64 (pow.f64 (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (/.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (fma.f64 (pow.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (pow.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 2 binary64)) (*.f64 #s(literal -1 binary64) #s(approx (exp x) #s(literal 1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 2 binary64)))) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)))) (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (-.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64))) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (*.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) #s(approx (exp x) #s(literal 1 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (-.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))))","(fma.f64 (/.f64 #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) (/.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) (pow.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64))))","(fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))","(-.f64 (/.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (pow.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64)))","(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","(+.f64 (/.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 3 binary64)) (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64)))) (neg.f64 (pow.f64 (fma.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(approx (exp x) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))) #s(literal -1 binary64))))","(+.f64 #s(literal -1 binary64) #s(approx (exp x) #s(literal 1 binary64)))","(+.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal -1 binary64))","(*.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) #s(approx (exp x) #s(literal 1 binary64)))","#s(approx (exp x) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(*.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)))","(*.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64)) x x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(*.f64 x (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) x))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))) (-.f64 x (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))","(/.f64 (-.f64 (*.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x (*.f64 #s(literal 1/2 binary64) x))) (*.f64 x x)) (-.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) x))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x (*.f64 #s(literal 1/2 binary64) x)))) (-.f64 x (*.f64 x (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) (-.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) x))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) (*.f64 x (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) (-.f64 (*.f64 x x) (*.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) x))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) (*.f64 x (*.f64 #s(literal 1/2 binary64) x))) (*.f64 x (*.f64 x (*.f64 #s(literal 1/2 binary64) x))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) x)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)))) (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64)) x x)) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) x) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) x) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64))) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))","(/.f64 (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64)) x x) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) (fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64)) x x)))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x)","(fma.f64 #s(literal 1 binary64) x (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","(fma.f64 #s(literal 1 binary64) x (*.f64 x (*.f64 #s(literal 1/2 binary64) x)))","(fma.f64 x (*.f64 #s(literal 1/2 binary64) x) x)","(fma.f64 x #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","(fma.f64 x #s(literal 1 binary64) (*.f64 x (*.f64 #s(literal 1/2 binary64) x)))","(+.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) x)","(+.f64 (*.f64 x (*.f64 #s(literal 1/2 binary64) x)) x)","(+.f64 x (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","(+.f64 x (*.f64 x (*.f64 #s(literal 1/2 binary64) x)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (*.f64 #s(literal -1/2 binary64) x)))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))) (*.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal 1 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)))) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal -1 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 6 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64))) (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (*.f64 #s(literal -1/2 binary64) x)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (*.f64 #s(literal -1/2 binary64) x))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (fma.f64 (*.f64 x x) #s(literal 1/4 binary64) (*.f64 #s(literal -1/2 binary64) x))) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))))","(fma.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64))","(fma.f64 x #s(literal 1/2 binary64) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (neg.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) x) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) x x) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(*.f64 x (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) x))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x))) (-.f64 x (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x)))","(/.f64 (-.f64 (*.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))) (*.f64 x x)) (-.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) x))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))) (-.f64 x (*.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) (-.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) x))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x)) (*.f64 x (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) (-.f64 (*.f64 x x) (*.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) x))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))) (*.f64 x (*.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) x)) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(/.f64 (neg.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) x x)) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) x) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))","(/.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) x x) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) x x)))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x)","(fma.f64 #s(literal 1 binary64) x (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x))","(fma.f64 #s(literal 1 binary64) x (*.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))","(fma.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x)","(fma.f64 x #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x))","(fma.f64 x #s(literal 1 binary64) (*.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))","(+.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x) x)","(+.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) x)","(+.f64 x (*.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x))","(+.f64 x (*.f64 x (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","(*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))) (*.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 6 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(fma.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) #s(literal -1/4 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) #s(literal -1/4 binary64))) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64))","(fma.f64 x (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (neg.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))","(*.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x))))","(*.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) #s(literal -1/4 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) #s(literal -1/4 binary64)) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/4 binary64) (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) (*.f64 (neg.f64 x) #s(literal 1/12 binary64))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))) (*.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))) (+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (fma.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) #s(literal -1/4 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 4 binary64)) #s(literal 1/16 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) #s(literal 1/4 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 6 binary64)) #s(literal 1/64 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 4 binary64)) (+.f64 #s(literal 1/16 binary64) (pow.f64 (*.f64 x #s(literal 1/12 binary64)) #s(literal 2 binary64)))) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 6 binary64)) #s(literal 1/64 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal -1/8 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64))))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 9 binary64)) #s(literal 1/512 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 6 binary64)) (-.f64 #s(literal 1/64 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/1728 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x)))","(/.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) #s(literal -1/4 binary64))) (neg.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64))) (neg.f64 (+.f64 #s(literal 1/4 binary64) (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) (*.f64 (neg.f64 x) #s(literal 1/12 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64))) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64))))))","(/.f64 (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) #s(literal -1/4 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) (+.f64 #s(literal 1/4 binary64) (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) (*.f64 (neg.f64 x) #s(literal 1/12 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x)) (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/4 binary64) (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) (*.f64 (neg.f64 x) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))))","(fma.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(fma.f64 x #s(literal 1/6 binary64) #s(literal 1/2 binary64))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x))) (/.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","(+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))))","(+.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 1/2 binary64))","(+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) x) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) x x) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(*.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))) (-.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))","(/.f64 (-.f64 (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x))) (*.f64 x x)) (-.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) x))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)))) (-.f64 x (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (-.f64 (*.f64 x x) (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (*.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) (-.f64 (*.f64 x x) (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) x))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x))) (*.f64 x (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) x)) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(/.f64 (neg.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) x x)) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) x) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(/.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(/.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) x x) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) (fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) x x)))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)","(fma.f64 #s(literal 1 binary64) x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 #s(literal 1 binary64) x (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(fma.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)","(fma.f64 x #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 x #s(literal 1 binary64) (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(+.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)","(+.f64 (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) x)","(+.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(+.f64 x (*.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","(*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)))))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)))))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))) (*.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 6 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x))) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(fma.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) x) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) x) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 x (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64)))) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64))","(fma.f64 x (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (neg.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x))","(*.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))))","(*.f64 (neg.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))))))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))))))","(*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))) (*.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))))) (+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (fma.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 4 binary64)) #s(literal 1/16 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 6 binary64)) #s(literal 1/64 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 4 binary64)) (+.f64 #s(literal 1/16 binary64) (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64))))) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 6 binary64)) #s(literal 1/64 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 9 binary64)) #s(literal 1/512 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 6 binary64)) (-.f64 #s(literal 1/64 binary64) (*.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))))))","(/.f64 (neg.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)))))","(/.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64)))))","(/.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)) (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64)))) (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))))","(fma.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64)) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(fma.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (pow.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(fma.f64 (*.f64 x (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 x (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) #s(literal 1/2 binary64))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))))","(+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))))","(+.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))","(+.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x))","(*.f64 (-.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) x))))","(*.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (pow.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/36 binary64) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (*.f64 (neg.f64 x) #s(literal 1/144 binary64))))))","(*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)))) (*.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))))) (+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (fma.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (*.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 4 binary64)) #s(literal 1/1296 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal 1/36 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 6 binary64)) #s(literal 1/46656 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 4 binary64)) (+.f64 #s(literal 1/1296 binary64) (pow.f64 (*.f64 x #s(literal 1/144 binary64)) #s(literal 2 binary64)))) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 6 binary64)) #s(literal 1/46656 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal -1/216 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64))))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 9 binary64)) #s(literal 1/10077696 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 6 binary64)) (-.f64 #s(literal 1/46656 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/2985984 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) #s(literal 1/36 binary64))) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))))","(/.f64 (-.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64))) (-.f64 #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) x)))","(/.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64))) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64))) (neg.f64 (+.f64 #s(literal 1/36 binary64) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (*.f64 (neg.f64 x) #s(literal 1/144 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64))) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64))))))","(/.f64 (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) #s(literal -1/36 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))))","(/.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64)) (+.f64 #s(literal 1/36 binary64) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (*.f64 (neg.f64 x) #s(literal 1/144 binary64)))))","(/.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) x)) (-.f64 #s(literal 1/36 binary64) (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/36 binary64) (fma.f64 (*.f64 x x) #s(literal 1/576 binary64) (*.f64 (neg.f64 x) #s(literal 1/144 binary64)))) (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))))","(fma.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)))))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","(fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))","(-.f64 (/.f64 #s(literal 1/36 binary64) (-.f64 #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) x))) (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (-.f64 #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))))","(+.f64 (/.f64 (pow.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 2 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)))))","(+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 1/6 binary64))","(+.f64 #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) x))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":464.883056640625,"type":"rewrite"},{"compiler":[[14400,2116]],"memory":[[2561312,51041760]],"time":65.057861328125,"type":"eval"},{"alts":[["(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","fresh",58.76608766205578,"binary64"],["(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","next",58.94384947017878,"binary64"],["(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","next",59.29806170764161,"binary64"],["(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","done",60.56168059992402,"binary64"],["(expm1.f64 x)","done",0.0,"binary64"],["#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","next",0.19403128413264992,"binary64"],["#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))","fresh",0.34365514513780954,"binary64"],["#s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))","next",0.6581214734841803,"binary64"],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","done",0.3554876019294538,"binary64"],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","done",0.6659627997746709,"binary64"],["#s(approx (- (exp x) 1) #s(approx (* (+ (* 1/2 x) 1) x) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","next",60.184343184554066,"binary64"]],"compiler":[[15,10],[12,8],[8,6],[6,5],[2,2],[17,12],[14,10],[11,8],[14,11],[11,9],[18,13],[15,10],[12,8],[8,6],[17,12],[14,10],[11,8],[18,13]],"count":[[497,11]],"kept":[{"done":[0,0],"fresh":[3,3],"new":[489,4],"picked":[5,4]}],"memory":[[-1632224,23282064]],"min-error":[[0.0,"binary64"]],"time":15.281005859375,"type":"prune"},{"egraph":[[0,1001,163,0.004587135],[6,1001,169,0.00284847],[5,868,169,0.003365666],[4,431,169,0.002894595],[3,185,169,0.001288532],[2,107,169,0.000732924],[1,75,169,0.000521705],[0,47,169,0.000476924],[0,29,169,0.00027813]],"inputs":[["#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","#s(literal 1/24 binary64)","x","#s(literal 1/6 binary64)","#s(literal 1/2 binary64)","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","#s(approx (exp x) (+.f64 #s(literal 1 binary64) x))","(+.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(approx (- (exp x) 1) #s(approx (* (+ (* 1/2 x) 1) x) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","#s(approx (* (+ (* 1/2 x) 1) x) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(*.f64 x x)","x","#s(literal 1/2 binary64)","#s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x)","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","x","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(literal 1/2 binary64)","x","#s(literal 1 binary64)"]],"locations":[["(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","cost-diff",0],["(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","cost-diff",0],["#s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","cost-diff",0],["(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","cost-diff",0],["(*.f64 #s(literal 1/2 binary64) x)","cost-diff",0],["(fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x)","cost-diff",0],["#s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))","cost-diff",0],["(*.f64 x x)","cost-diff",0],["(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","cost-diff",0],["#s(approx (* (+ (* 1/2 x) 1) x) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","cost-diff",0],["#s(approx (- (exp x) 1) #s(approx (* (+ (* 1/2 x) 1) x) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","cost-diff",0],["(+.f64 #s(literal 1 binary64) x)","cost-diff",0],["#s(approx (exp x) (+.f64 #s(literal 1 binary64) x))","cost-diff",0],["(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","cost-diff",0],["(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","cost-diff",0],["(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","cost-diff",0],["(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)","cost-diff",0],["#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","cost-diff",0]],"memory":[[3701600,3701600]],"method":["egg-herbie"],"outputs":[["#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","#s(literal 1/24 binary64)","x","#s(literal 1/6 binary64)","#s(literal 1/2 binary64)","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","#s(approx (exp x) (+.f64 #s(literal 1 binary64) x))","(+.f64 #s(literal 1 binary64) x)","#s(literal 1 binary64)","x","#s(approx (- (exp x) 1) #s(approx (* (+ (* 1/2 x) 1) x) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","#s(approx (- (exp x) 1) #s(approx (* (+ (* 1/2 x) 1) x) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))","#s(approx (* (+ (* 1/2 x) 1) x) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","#s(approx (* (+ (* 1/2 x) 1) x) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(*.f64 (*.f64 #s(literal 1/2 binary64) x) x)","(*.f64 x x)","x","#s(literal 1/2 binary64)","#s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x)","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(*.f64 #s(literal 1/2 binary64) x)","#s(literal 1/2 binary64)","x","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","#s(literal 1/2 binary64)","x","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":28.658203125,"type":"simplify"},{"compiler":[[121,25]],"locations":[["(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","accuracy",0.0],["(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","accuracy",0.0],["#s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","accuracy",0.37785934296453416],["(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","accuracy",58.50516243972476],["(fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x)","accuracy",0.0],["(*.f64 #s(literal 1/2 binary64) x)","accuracy",0.0],["#s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))","accuracy",0.6581214734841803],["(*.f64 x x)","accuracy",0.0],["(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","accuracy",0.015625],["#s(approx (- (exp x) 1) #s(approx (* (+ (* 1/2 x) 1) x) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","accuracy",0.6581214734841803],["#s(approx (* (+ (* 1/2 x) 1) x) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","accuracy",60.18434317320254],["(+.f64 #s(literal 1 binary64) x)","accuracy",0.0],["#s(approx (exp x) (+.f64 #s(literal 1 binary64) x))","accuracy",0.7035161887630532],["(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","accuracy",58.50516243972476],["(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)","accuracy",0.0],["(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","accuracy",0.01171875],["(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","accuracy",0.0234375],["#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","accuracy",0.19403128413264992]],"memory":[[-1589648,24501952]],"mixsample":[[0.06005859375,"adjust",800],[8.210205078125,"ival-add",0],[2.697998046875,"ival-exp",0],[0.006103515625,"ival-mult",800],[0.006103515625,"ival-mult",400],[13.9365234375,"ival-mult",0],[2.4501953125,"ival-expm1",0],[0.097900390625,"ival-assert",0],[0.00390625,"ival-add",400],[0.205810546875,"ival-true",0],[7.184326171875,"const",0],[0.00390625,"ival-add",800],[0.2939453125,"exact",0],[0.044921875,"adjust",2000]],"outcomes":[[0.43310546875,2,"valid",1],[49.6396484375,0,"valid",255]],"time":72.789794921875,"type":"localize"},{"count":[[19,39]],"inputs":[["#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","#s(approx (exp x) (+.f64 #s(literal 1 binary64) x))","(+.f64 #s(literal 1 binary64) x)","#s(approx (- (exp x) 1) #s(approx (* (+ (* 1/2 x) 1) x) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","#s(approx (* (+ (* 1/2 x) 1) x) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(*.f64 x x)","#s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x)","(*.f64 #s(literal 1/2 binary64) x)","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))"]],"memory":[[3382576,3382576]],"outputs":[["x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(* 1/2 x)","(* x (+ 1/2 (* 1/6 x)))","(* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))","1/2","(+ 1/2 (* 1/6 x))","(+ 1/2 (* x (+ 1/6 (* 1/24 x))))","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(* 1/2 (pow x 2))","(pow x 2)","(+ 1 (* 1/2 x))","1/6","(+ 1/6 (* 1/24 x))","(- (exp x) 1)","(* 1/24 (pow x 4))","(* (pow x 4) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3))))))","(* 1/24 (pow x 3))","(* (pow x 3) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 3) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* 1/24 (pow x 2))","(* (pow x 2) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 2) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(exp x)","(* x (+ 1 (/ 1 x)))","(* (pow x 2) (+ 1/2 (/ 1 x)))","(* (pow x 2) (+ 1/2 (+ (/ 1 x) (/ 1 (pow x 2)))))","(* x (+ 1/2 (/ 1 x)))","(* 1/24 x)","(* x (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 4) (+ 1/24 (* -1 (/ (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6) x))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/6 (* 1/2 (/ 1 x))) x)) 1/24)))"]],"series":[[2.26708984375,"((- (exp x) 1) (+ (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) (+ (* (+ (* 1/24 x) 1/6) x) 1/2) (- (exp x) 1) (exp x) (+ 1 x) (- (exp x) 1) (* (+ (* 1/2 x) 1) x) (* (* x x) 1/2) (* x x) (- (exp x) 1) (+ (* (* 1/2 x) x) x) (* 1/2 x) (- (exp x) 1) (exp x) (+ (* (+ (* 1/2 x) 1) x) 1) (+ (* 1/2 x) 1) (+ (* 1/24 x) 1/6))","x","-inf"],[3.48095703125,"((- (exp x) 1) (+ (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) (+ (* (+ (* 1/24 x) 1/6) x) 1/2) (- (exp x) 1) (exp x) (+ 1 x) (- (exp x) 1) (* (+ (* 1/2 x) 1) x) (* (* x x) 1/2) (* x x) (- (exp x) 1) (+ (* (* 1/2 x) x) x) (* 1/2 x) (- (exp x) 1) (exp x) (+ (* (+ (* 1/2 x) 1) x) 1) (+ (* 1/2 x) 1) (+ (* 1/24 x) 1/6))","x","inf"],[2.009033203125,"((- (exp x) 1) (+ (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) (+ (* (+ (* 1/24 x) 1/6) x) 1/2) (- (exp x) 1) (exp x) (+ 1 x) (- (exp x) 1) (* (+ (* 1/2 x) 1) x) (* (* x x) 1/2) (* x x) (- (exp x) 1) (+ (* (* 1/2 x) x) x) (* 1/2 x) (- (exp x) 1) (exp x) (+ (* (+ (* 1/2 x) 1) x) 1) (+ (* 1/2 x) 1) (+ (* 1/24 x) 1/6))","x","0"]],"time":8.93115234375,"type":"series"},{"count":[[39,38]],"egraph":[[0,8196,224,0.082191299],[4,6149,267,0.028321936],[3,2276,267,0.027713717],[2,660,269,0.009006834],[1,259,269,0.002577335],[0,77,271,0.001043173]],"inputs":[["x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(* 1/2 x)","(* x (+ 1/2 (* 1/6 x)))","(* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))","1/2","(+ 1/2 (* 1/6 x))","(+ 1/2 (* x (+ 1/6 (* 1/24 x))))","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(* 1/2 (pow x 2))","(pow x 2)","(+ 1 (* 1/2 x))","1/6","(+ 1/6 (* 1/24 x))","(- (exp x) 1)","(* 1/24 (pow x 4))","(* (pow x 4) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3))))))","(* 1/24 (pow x 3))","(* (pow x 3) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 3) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* 1/24 (pow x 2))","(* (pow x 2) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 2) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(exp x)","(* x (+ 1 (/ 1 x)))","(* (pow x 2) (+ 1/2 (/ 1 x)))","(* (pow x 2) (+ 1/2 (+ (/ 1 x) (/ 1 (pow x 2)))))","(* x (+ 1/2 (/ 1 x)))","(* 1/24 x)","(* x (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 4) (+ 1/24 (* -1 (/ (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6) x))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/6 (* 1/2 (/ 1 x))) x)) 1/24)))"]],"memory":[[-5465344,35492448]],"method":["egg-herbie"],"outputs":[["x","(* x (+ 1 (* 1/2 x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(* x (+ 1/2 (* 1/6 x)))","(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","1/2","#s(literal 1/2 binary64)","(+ 1/2 (* 1/6 x))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(+ 1/2 (* x (+ 1/6 (* 1/24 x))))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","1","#s(literal 1 binary64)","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(* 1/2 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(pow x 2)","(*.f64 x x)","(+ 1 (* 1/2 x))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","1/6","#s(literal 1/6 binary64)","(+ 1/6 (* 1/24 x))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","(- (exp x) 1)","(expm1.f64 x)","(* 1/24 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64))","(* (pow x 4) (+ 1/24 (* 1/6 (/ 1 x))))","(*.f64 (pow.f64 x #s(literal 3 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 x x))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(* 1/24 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64))","(* (pow x 3) (+ 1/24 (* 1/6 (/ 1 x))))","(*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x)","(* (pow x 3) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(* 1/24 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/24 binary64))","(* (pow x 2) (+ 1/24 (* 1/6 (/ 1 x))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)","(* (pow x 2) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(exp x)","(exp.f64 x)","(* x (+ 1 (/ 1 x)))","(+.f64 #s(literal 1 binary64) x)","(* (pow x 2) (+ 1/2 (/ 1 x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(* (pow x 2) (+ 1/2 (+ (/ 1 x) (/ 1 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(* x (+ 1/2 (/ 1 x)))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(* 1/24 x)","(*.f64 #s(literal 1/24 binary64) x)","(* x (+ 1/24 (* 1/6 (/ 1 x))))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","(* (pow x 4) (+ 1/24 (* -1 (/ (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6) x))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/6 (* 1/2 (/ 1 x))) x)) 1/24)))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)"]],"stop":[["iter limit",1],["node limit",1]],"time":242.910888671875,"type":"simplify"},{"count":[[19,453]],"egraph":[[0,8214,150,0.079327789],[2,1360,156,0.032927545],[1,187,156,0.00499597],[0,47,156,0.001662618],[0,29,156,0.000373198]],"inputs":[["#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","#s(approx (exp x) (+.f64 #s(literal 1 binary64) x))","(+.f64 #s(literal 1 binary64) x)","#s(approx (- (exp x) 1) #s(approx (* (+ (* 1/2 x) 1) x) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","#s(approx (* (+ (* 1/2 x) 1) x) (*.f64 (*.f64 x x) #s(literal 1/2 binary64)))","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(*.f64 x x)","#s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x)","(*.f64 #s(literal 1/2 binary64) x)","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))"]],"memory":[[6534272,57272688]],"outputs":[["#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","(*.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(*.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64)))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","(*.f64 x (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (fma.f64 (/.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (/.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (/.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)))) (neg.f64 (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (*.f64 x x))) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (-.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x x (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (-.f64 (*.f64 x x) (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64))))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)))","(fma.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) x)","(fma.f64 (*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) (*.f64 x x)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)) x)","(fma.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal -1 binary64)) (neg.f64 (/.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(fma.f64 (*.f64 x x) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 x x) x)","(fma.f64 #s(literal 1 binary64) x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 x (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)","(fma.f64 x #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))) (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (/.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))","(+.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (neg.f64 (/.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(+.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)","(+.f64 x (*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) x) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) x) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64)))) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(*.f64 x (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x)) (*.f64 #s(literal 1/4 binary64) (*.f64 x x))) (-.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x) (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (-.f64 (*.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)) (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x))) (*.f64 #s(literal 1/4 binary64) (*.f64 x x))) (-.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)) (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x))) (-.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x)))","(/.f64 (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (*.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)) (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)))) (-.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))) (fma.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x) (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64))) (fma.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)) (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)) (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (*.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) (pow.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x) #s(literal 3 binary64))) (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 (*.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) (pow.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)) #s(literal 3 binary64))) (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 (*.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)) (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x))) (*.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) x)) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) x)) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)))) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (*.f64 x (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) x) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))","(/.f64 (*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) x) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))))","(/.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))","(/.f64 (*.f64 x (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64)))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))) (*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))) (*.f64 x (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))))))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x (*.f64 #s(literal 1/2 binary64) x))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64) (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)))","(fma.f64 #s(literal 1/2 binary64) x (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x))","(fma.f64 #s(literal 1/2 binary64) x (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x) (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)))","(fma.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) (*.f64 #s(literal 1/2 binary64) x))","(fma.f64 x #s(literal 1/2 binary64) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x))","(fma.f64 x #s(literal 1/2 binary64) (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)))","(+.f64 (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x) (*.f64 #s(literal 1/2 binary64) x))","(+.f64 (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)) (*.f64 #s(literal 1/2 binary64) x))","(+.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) x))","(+.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 x (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)))","(*.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))))","(*.f64 (neg.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))))))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))))))","(*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (fma.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))))))","(/.f64 (neg.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)))))","(/.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64)))))","(/.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)) (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64)))) (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(fma.f64 (*.f64 x (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (pow.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(fma.f64 (*.f64 x (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64))) (pow.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64)) #s(literal 1/2 binary64))","(fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 x (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) #s(literal 1/2 binary64))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))))","(+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))))","(+.f64 (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))","(+.f64 #s(literal 1/2 binary64) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x))","(*.f64 (/.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (/.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))))","(*.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))))))","(*.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))))","(*.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (/.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (fma.f64 (pow.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))) (/.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))) (fma.f64 (pow.f64 (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))) (pow.f64 (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (*.f64 #s(literal -1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))) (*.f64 (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))) (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)))) (-.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))))","(fma.f64 (/.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (/.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) (pow.f64 (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (pow.f64 (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(fma.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))","(-.f64 (/.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) (+.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))) (pow.f64 (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))) #s(literal -1 binary64)))","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","(+.f64 (/.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64)) (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (+.f64 (-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 2 binary64))) #s(literal -1 binary64))))","(+.f64 #s(literal -1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)))","(+.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))","(*.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)))","#s(approx (exp x) (+.f64 #s(literal 1 binary64) x))","(*.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(*.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(*.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(*.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x))","(pow.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)) #s(literal 3 binary64))) (fma.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (fma.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)) (*.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x))))))","(/.f64 (neg.f64 (fma.f64 x x #s(literal -1 binary64))) (neg.f64 (-.f64 x #s(literal 1 binary64))))","(/.f64 (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)))) (neg.f64 (neg.f64 (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))))","(/.f64 (-.f64 (*.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) x)) (*.f64 (-.f64 #s(literal 1 binary64) x) (*.f64 x x))) (*.f64 (-.f64 #s(literal 1 binary64) x) (-.f64 #s(literal 1 binary64) x)))","(/.f64 (fma.f64 x x #s(literal -1 binary64)) (-.f64 x #s(literal 1 binary64)))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (neg.f64 (-.f64 #s(literal 1 binary64) x)))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x))))","(/.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x x (-.f64 #s(literal 1 binary64) x)))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x #s(literal 1 binary64)) (fma.f64 x x #s(literal -1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (-.f64 #s(literal 1 binary64) x)) (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x)))","(fma.f64 #s(literal 1 binary64) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (neg.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x))))","(fma.f64 #s(literal 1 binary64) x #s(literal 1 binary64))","(fma.f64 x #s(literal 1 binary64) #s(literal 1 binary64))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))))","(-.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x)))","(+.f64 (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (neg.f64 (/.f64 (*.f64 x x) (-.f64 #s(literal 1 binary64) x))))","(+.f64 #s(literal 1 binary64) x)","(+.f64 x #s(literal 1 binary64))","#s(approx (- (exp x) 1) #s(approx (* (+ (* 1/2 x) 1) x) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))","#s(approx (* (+ (* 1/2 x) 1) x) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","(*.f64 (*.f64 #s(literal 1/2 binary64) x) x)","(*.f64 (*.f64 x x) #s(literal 1/2 binary64))","(*.f64 #s(literal 1/2 binary64) (*.f64 x x))","(*.f64 x (*.f64 #s(literal 1/2 binary64) x))","(*.f64 (exp.f64 (log.f64 x)) (exp.f64 (log.f64 x)))","(*.f64 (*.f64 x x) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (*.f64 x x))","(*.f64 x x)","(pow.f64 (exp.f64 (log.f64 x)) #s(literal 2 binary64))","(pow.f64 (*.f64 x x) #s(literal 1 binary64))","(pow.f64 x #s(literal 2 binary64))","(exp.f64 (*.f64 (log.f64 x) #s(literal 2 binary64)))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(*.f64 (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)))","(*.f64 (*.f64 x (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))) (pow.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)))","(*.f64 (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 x (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 x) x))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) x))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (*.f64 x (-.f64 x (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 x) x)) (pow.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) x) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal 3 binary64)))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (*.f64 x (-.f64 x (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 1 binary64))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(*.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(*.f64 x (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) x)) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) x)) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) x)) (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) x)) (fma.f64 (/.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) x)) (/.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) x)) (*.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) x)) (/.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) x))))))","(/.f64 (neg.f64 (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64)) x)) (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) x)) (neg.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64)))) (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)))) (neg.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)))) (neg.f64 (-.f64 x (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 x) x)))) (neg.f64 (neg.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (*.f64 x (-.f64 x (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))))))","(/.f64 (-.f64 (*.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) x)) (*.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) x) (*.f64 x x))) (pow.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) x) #s(literal 2 binary64)))","(/.f64 (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64)) x) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) x) (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (*.f64 x (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64))) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))","(/.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))) (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64))) (-.f64 x (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 x) x))) (neg.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) x)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x x (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal 3 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (*.f64 x (-.f64 x (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (*.f64 x (-.f64 x (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) (*.f64 x (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) (*.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal 3 binary64))))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))))","(fma.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (pow.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) x) #s(literal -1 binary64)) (neg.f64 (/.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) x))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x)","(fma.f64 (*.f64 x x) #s(literal 1/2 binary64) x)","(fma.f64 #s(literal 1/2 binary64) (*.f64 x x) x)","(fma.f64 #s(literal 1 binary64) x (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","(fma.f64 x (*.f64 #s(literal 1/2 binary64) x) x)","(fma.f64 x #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))) (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (-.f64 x (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))))","(-.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) x)) (/.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) x)))","(+.f64 (/.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) x)) (neg.f64 (/.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) x))))","(+.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) x)","(+.f64 x (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","(*.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64))","(*.f64 #s(literal 1/2 binary64) x)","(*.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 x #s(literal 1/2 binary64))","(*.f64 (/.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))) (/.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(*.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(*.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))))))","(*.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))) (fma.f64 (pow.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (fma.f64 (pow.f64 (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (pow.f64 (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 #s(literal -1 binary64) #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (*.f64 (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)))) (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))))","(fma.f64 (/.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))) (/.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (pow.f64 (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64))))","(fma.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))","(-.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (pow.f64 (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","(+.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64))))","(+.f64 #s(literal -1 binary64) #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))))","(+.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))","(*.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))))","#s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64)))))","(*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)))))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)))))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) (+.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))) (*.f64 x x)) (-.f64 (+.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) x))","(/.f64 (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 #s(literal 1 binary64) x))) (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) (+.f64 #s(literal 1 binary64) x)))","(/.f64 (-.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 #s(literal 1 binary64) x)) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64))) (-.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))","(/.f64 (-.f64 (*.f64 x x) (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x #s(literal 1 binary64)) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x #s(literal 1 binary64)))) (-.f64 x (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x #s(literal 1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (+.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) (+.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) (-.f64 (*.f64 x x) (*.f64 (+.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) x))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64) (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64))) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (-.f64 (*.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 #s(literal 1 binary64) x)) (*.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) (+.f64 #s(literal 1 binary64) x)))))","(/.f64 (+.f64 (pow.f64 (+.f64 #s(literal 1 binary64) x) #s(literal 3 binary64)) (*.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64))) (fma.f64 (+.f64 #s(literal 1 binary64) x) (+.f64 #s(literal 1 binary64) x) (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))))","(/.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) (pow.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x #s(literal 1 binary64)) #s(literal 3 binary64))) (fma.f64 x x (-.f64 (*.f64 (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x #s(literal 1 binary64)) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x #s(literal 1 binary64))) (*.f64 x (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x #s(literal 1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 x (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))) (pow.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (fma.f64 x x #s(literal -1 binary64)) (/.f64 #s(literal 1 binary64) (-.f64 x #s(literal 1 binary64))) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","(fma.f64 (-.f64 (*.f64 x x) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 x (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))) #s(literal 1 binary64))","(fma.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 x) x))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) x))) #s(literal 1 binary64))","(fma.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (*.f64 x (-.f64 x (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))))) #s(literal 1 binary64))","(fma.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(literal 1 binary64) x))) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","(fma.f64 (neg.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)))) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","(fma.f64 (-.f64 #s(literal 1 binary64) (*.f64 x x)) (pow.f64 (-.f64 #s(literal 1 binary64) x) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (*.f64 (neg.f64 x) x)) (pow.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) x) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 #s(literal 1 binary64) x))) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","(fma.f64 (+.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 x (-.f64 x #s(literal 1 binary64)) #s(literal 1 binary64)) #s(literal -1 binary64)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64)) (*.f64 #s(literal 1/2 binary64) (pow.f64 x #s(literal 3 binary64)))))) #s(literal 1 binary64))","(fma.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) #s(literal 1/8 binary64) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/4 binary64) (*.f64 x (-.f64 x (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)))) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) x (+.f64 #s(literal 1 binary64) x))","(fma.f64 (*.f64 x x) #s(literal 1/2 binary64) (+.f64 #s(literal 1 binary64) x))","(fma.f64 #s(literal 1/2 binary64) (*.f64 x x) (+.f64 #s(literal 1 binary64) x))","(fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","(fma.f64 #s(literal 1 binary64) x (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x #s(literal 1 binary64)))","(fma.f64 x (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal 1 binary64))","(fma.f64 x (*.f64 #s(literal 1/2 binary64) x) (+.f64 #s(literal 1 binary64) x))","(fma.f64 x #s(literal 1 binary64) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x #s(literal 1 binary64)))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (+.f64 #s(literal 1 binary64) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x)) x)","(+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64))) (neg.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) x) (+.f64 #s(literal 1 binary64) x))","(+.f64 (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x) #s(literal 1 binary64))","(+.f64 (+.f64 #s(literal 1 binary64) x) (*.f64 (*.f64 #s(literal 1/2 binary64) x) x))","(+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(+.f64 x (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x #s(literal 1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/4 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))))","(*.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (*.f64 #s(literal 1/2 binary64) x)))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) (pow.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/4 binary64) (*.f64 x x)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/4 binary64) (*.f64 x x))) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64))) (neg.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))) (neg.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) #s(literal -1 binary64)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64)) (fma.f64 #s(literal 1/4 binary64) (*.f64 x x) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x)) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/4 binary64) (*.f64 x x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (*.f64 #s(literal 1/2 binary64) x))) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/8 binary64) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))))","(fma.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64))","(fma.f64 x #s(literal 1/2 binary64) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))) (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (-.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))))","(-.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (/.f64 (*.f64 #s(literal 1/4 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64))) (neg.f64 (pow.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 #s(literal 1/2 binary64) x))","(*.f64 (-.f64 #s(literal 1/36 binary64) (*.f64 #s(literal 1/576 binary64) (*.f64 x x))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) x))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)))))","(*.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))))))","(*.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)) (pow.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/36 binary64) (-.f64 (*.f64 #s(literal 1/576 binary64) (*.f64 x x)) (*.f64 x #s(literal 1/144 binary64))))))","(*.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64)) (pow.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 (*.f64 #s(literal 1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (fma.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (*.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/36 binary64) (*.f64 #s(literal 1/576 binary64) (*.f64 x x)))) (neg.f64 (-.f64 #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))))))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) #s(literal 1/36 binary64))) (*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))))","(/.f64 (-.f64 #s(literal 1/36 binary64) (*.f64 #s(literal 1/576 binary64) (*.f64 x x))) (-.f64 #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) x)))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64))) (neg.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64))) (neg.f64 (+.f64 #s(literal 1/36 binary64) (-.f64 (*.f64 #s(literal 1/576 binary64) (*.f64 x x)) (*.f64 x #s(literal 1/144 binary64))))))","(/.f64 (neg.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64))) (neg.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64))))))","(/.f64 (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) #s(literal -1/36 binary64)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)))))","(/.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64)) (+.f64 #s(literal 1/36 binary64) (-.f64 (*.f64 #s(literal 1/576 binary64) (*.f64 x x)) (*.f64 x #s(literal 1/144 binary64)))))","(/.f64 (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64)) (fma.f64 #s(literal 1/576 binary64) (*.f64 x x) (-.f64 #s(literal 1/36 binary64) (*.f64 x #s(literal 1/144 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) x)) (-.f64 #s(literal 1/36 binary64) (*.f64 #s(literal 1/576 binary64) (*.f64 x x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/36 binary64) (-.f64 (*.f64 #s(literal 1/576 binary64) (*.f64 x x)) (*.f64 x #s(literal 1/144 binary64)))) (fma.f64 #s(literal 1/13824 binary64) (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))))","(fma.f64 (*.f64 #s(literal 1/576 binary64) (*.f64 x x)) (pow.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)))))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","(fma.f64 x #s(literal 1/24 binary64) #s(literal 1/6 binary64))","(-.f64 (/.f64 #s(literal 1/36 binary64) (-.f64 #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) x))) (/.f64 (*.f64 #s(literal 1/576 binary64) (*.f64 x x)) (-.f64 #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) x))))","(-.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))))","(+.f64 (/.f64 (*.f64 #s(literal 1/576 binary64) (*.f64 x x)) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64))) (neg.f64 (/.f64 #s(literal 1/36 binary64) (fma.f64 #s(literal 1/24 binary64) x #s(literal -1/6 binary64)))))","(+.f64 (*.f64 #s(literal 1/24 binary64) x) #s(literal 1/6 binary64))","(+.f64 #s(literal 1/6 binary64) (*.f64 #s(literal 1/24 binary64) x))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":283.6669921875,"type":"rewrite"},{"compiler":[[13943,1903]],"memory":[[2918048,49023872]],"time":93.027099609375,"type":"eval"},{"alts":[["(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","next",58.76608766205578,"binary64"],["(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","done",58.94384947017878,"binary64"],["(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","done",59.29806170764161,"binary64"],["(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","done",60.56168059992402,"binary64"],["(expm1.f64 x)","done",0.0,"binary64"],["#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","done",0.19403128413264992,"binary64"],["#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","next",0.34365514513780954,"binary64"],["#s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))","done",0.6581214734841803,"binary64"],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","done",0.3554876019294538,"binary64"],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","done",0.6659627997746709,"binary64"],["#s(approx (- (exp x) 1) #s(approx (* (+ (* 1/2 x) 1) x) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","done",60.184343184554066,"binary64"]],"compiler":[[15,10],[12,8],[8,6],[6,5],[2,2],[17,12],[20,15],[11,8],[14,11],[11,9],[18,13]],"count":[[493,11]],"kept":[{"done":[4,4],"fresh":[2,1],"new":[482,1],"picked":[5,5]}],"memory":[[-10062720,22261696]],"min-error":[[0.0,"binary64"]],"time":61.742919921875,"type":"prune"},{"egraph":[[0,557,113,0.003020087],[6,557,120,0.002171713],[5,537,120,0.002212555],[4,412,120,0.003302938],[3,189,120,0.002132424],[2,81,120,0.000786781],[1,54,120,0.000659726],[0,31,120,0.000364401],[0,19,120,0.000355297]],"inputs":[["#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","(fma.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)","(*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","#s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64))","#s(literal 1/6 binary64)","x","#s(literal 1/2 binary64)","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","#s(literal 1/6 binary64)","x","#s(literal 1/2 binary64)","#s(literal 1 binary64)"]],"locations":[["(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","cost-diff",0],["(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","cost-diff",0],["#s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","cost-diff",0],["(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","cost-diff",0],["(fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","cost-diff",0],["(*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","cost-diff",0],["(fma.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)","cost-diff",0],["#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","cost-diff",0]],"memory":[[2437568,2437568]],"method":["egg-herbie"],"outputs":[["#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","(fma.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)","(*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","#s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64))","#s(literal 1/6 binary64)","x","#s(literal 1/2 binary64)","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","#s(literal 1/6 binary64)","x","#s(literal 1/2 binary64)","#s(literal 1 binary64)"]],"stop":[["iter limit",1],["saturated",1],["iter limit",1]],"time":26.117919921875,"type":"simplify"},{"compiler":[[86,22]],"locations":[["(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","accuracy",0.0],["(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","accuracy",0.0],["#s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","accuracy",0.21983552616464208],["(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","accuracy",58.50516243972476],["(fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","accuracy",0.0],["(*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","accuracy",0.0234375],["#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","accuracy",0.19403128413264992],["#s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64))","accuracy",1.3427268651764337]],"memory":[[2049696,18960240]],"mixsample":[[0.086181640625,"adjust",800],[10.41259765625,"ival-add",0],[3.421875,"ival-exp",0],[0.010009765625,"ival-mult",800],[0.01220703125,"ival-mult",400],[17.98974609375,"ival-mult",0],[3.27978515625,"ival-expm1",0],[0.1611328125,"ival-assert",0],[0.0078125,"ival-add",400],[0.27783203125,"ival-true",0],[8.14111328125,"const",0],[0.008056640625,"ival-add",800],[0.55859375,"exact",0],[0.074951171875,"adjust",2000]],"outcomes":[[1.012939453125,2,"valid",1],[58.794189453125,0,"valid",255]],"time":78.563232421875,"type":"localize"},{"count":[[10,45]],"inputs":[["#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","(fma.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)","(*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","#s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))"]],"memory":[[-6278800,1640000]],"outputs":[["x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(* 1/2 x)","(* x (+ 1/2 (* 1/6 x)))","(* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))","1/2","(+ 1/2 (* 1/6 x))","(+ 1/2 (* x (+ 1/6 (* 1/24 x))))","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* 1/6 x))))","1/6","(+ 1/6 (* 1/24 x))","(- (exp x) 1)","(* 1/24 (pow x 4))","(* (pow x 4) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3))))))","(* 1/24 (pow x 3))","(* (pow x 3) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 3) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* 1/24 (pow x 2))","(* (pow x 2) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 2) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(exp x)","(* 1/6 (pow x 3))","(* (pow x 3) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (+ (/ 1 (pow x 2)) (/ 1 (pow x 3))))))","(* 1/6 (pow x 2))","(* (pow x 2) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 2) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* 1/24 x)","(* x (+ 1/24 (* 1/6 (/ 1 x))))","(* 1/6 x)","(* x (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 4) (+ 1/24 (* -1 (/ (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6) x))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/6 (* 1/2 (/ 1 x))) x)) 1/24)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (+ (/ 1 x) (/ 1 (pow x 2)))) x)) 1/6)))"]],"series":[[1.47900390625,"((- (exp x) 1) (+ (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) (+ (* (+ (* 1/24 x) 1/6) x) 1/2) (- (exp x) 1) (exp x) (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 1) (+ (* (+ (* 1/6 x) 1/2) x) 1) (+ (* 1/24 x) 1/6) (+ (* 1/6 x) 1/2))","x","-inf"],[3.567138671875,"((- (exp x) 1) (+ (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) (+ (* (+ (* 1/24 x) 1/6) x) 1/2) (- (exp x) 1) (exp x) (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 1) (+ (* (+ (* 1/6 x) 1/2) x) 1) (+ (* 1/24 x) 1/6) (+ (* 1/6 x) 1/2))","x","inf"],[0.98291015625,"((- (exp x) 1) (+ (* (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) x) x) (* (+ (* (+ (* 1/24 x) 1/6) x) 1/2) x) (+ (* (+ (* 1/24 x) 1/6) x) 1/2) (- (exp x) 1) (exp x) (+ (* (+ (* (+ (* 1/6 x) 1/2) x) 1) x) 1) (+ (* (+ (* 1/6 x) 1/2) x) 1) (+ (* 1/24 x) 1/6) (+ (* 1/6 x) 1/2))","x","0"]],"time":7.178955078125,"type":"series"},{"count":[[45,44]],"egraph":[[0,8142,286,0.074942295],[4,7074,341,0.019247769],[3,2708,349,0.027723898],[2,890,349,0.010395565],[1,309,351,0.002983164],[0,91,351,0.001024453]],"inputs":[["x","(* x (+ 1 (* 1/2 x)))","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(* 1/2 x)","(* x (+ 1/2 (* 1/6 x)))","(* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))","1/2","(+ 1/2 (* 1/6 x))","(+ 1/2 (* x (+ 1/6 (* 1/24 x))))","1","(+ 1 x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(+ 1 (* 1/2 x))","(+ 1 (* x (+ 1/2 (* 1/6 x))))","1/6","(+ 1/6 (* 1/24 x))","(- (exp x) 1)","(* 1/24 (pow x 4))","(* (pow x 4) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3))))))","(* 1/24 (pow x 3))","(* (pow x 3) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 3) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(* 1/24 (pow x 2))","(* (pow x 2) (+ 1/24 (* 1/6 (/ 1 x))))","(* (pow x 2) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(exp x)","(* 1/6 (pow x 3))","(* (pow x 3) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (+ (/ 1 (pow x 2)) (/ 1 (pow x 3))))))","(* 1/6 (pow x 2))","(* (pow x 2) (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 2) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(* 1/24 x)","(* x (+ 1/24 (* 1/6 (/ 1 x))))","(* 1/6 x)","(* x (+ 1/6 (* 1/2 (/ 1 x))))","(* (pow x 4) (+ 1/24 (* -1 (/ (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6) x))))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/6 (* 1/2 (/ 1 x))) x)) 1/24)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6)))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (+ (/ 1 x) (/ 1 (pow x 2)))) x)) 1/6)))"]],"memory":[[-177344,32988352]],"method":["egg-herbie"],"outputs":[["x","(* x (+ 1 (* 1/2 x)))","(*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x)","(* x (+ 1 (* x (+ 1/2 (* 1/6 x)))))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x)","(* x (+ 1 (* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))))","(*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(* 1/2 x)","(*.f64 #s(literal 1/2 binary64) x)","(* x (+ 1/2 (* 1/6 x)))","(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)","(* x (+ 1/2 (* x (+ 1/6 (* 1/24 x)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","1/2","#s(literal 1/2 binary64)","(+ 1/2 (* 1/6 x))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(+ 1/2 (* x (+ 1/6 (* 1/24 x))))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","1","#s(literal 1 binary64)","(+ 1 x)","(+.f64 #s(literal 1 binary64) x)","(+ 1 (* x (+ 1 (* 1/2 x))))","(fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* x (+ 1 (* x (+ 1/2 (* 1/6 x))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(+ 1 (* 1/2 x))","(fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64))","(+ 1 (* x (+ 1/2 (* 1/6 x))))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","1/6","#s(literal 1/6 binary64)","(+ 1/6 (* 1/24 x))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","(- (exp x) 1)","(expm1.f64 x)","(* 1/24 (pow x 4))","(*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64))","(* (pow x 4) (+ 1/24 (* 1/6 (/ 1 x))))","(*.f64 (+.f64 (/.f64 #s(literal 1/6 binary64) x) #s(literal 1/24 binary64)) (pow.f64 x #s(literal 4 binary64)))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) (*.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64)))","(* (pow x 4) (+ 1/24 (+ (/ 1/2 (pow x 2)) (+ (* 1/6 (/ 1 x)) (/ 1 (pow x 3))))))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64) x))","(* 1/24 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/24 binary64))","(* (pow x 3) (+ 1/24 (* 1/6 (/ 1 x))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) (*.f64 x x))","(* (pow x 3) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(* 1/24 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/24 binary64))","(* (pow x 2) (+ 1/24 (* 1/6 (/ 1 x))))","(*.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x)","(* (pow x 2) (+ 1/24 (+ (/ 1/2 (pow x 2)) (* 1/6 (/ 1 x)))))","(fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(exp x)","(exp.f64 x)","(* 1/6 (pow x 3))","(*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/6 binary64))","(* (pow x 3) (+ 1/6 (* 1/2 (/ 1 x))))","(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x))","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x)","(* (pow x 3) (+ 1/6 (+ (* 1/2 (/ 1 x)) (+ (/ 1 (pow x 2)) (/ 1 (pow x 3))))))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(* 1/6 (pow x 2))","(*.f64 (*.f64 x x) #s(literal 1/6 binary64))","(* (pow x 2) (+ 1/6 (* 1/2 (/ 1 x))))","(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)","(* (pow x 2) (+ 1/6 (+ (* 1/2 (/ 1 x)) (/ 1 (pow x 2)))))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(* 1/24 x)","(*.f64 #s(literal 1/24 binary64) x)","(* x (+ 1/24 (* 1/6 (/ 1 x))))","(fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64))","(* 1/6 x)","(*.f64 #s(literal 1/6 binary64) x)","(* x (+ 1/6 (* 1/2 (/ 1 x))))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(* (pow x 4) (+ 1/24 (* -1 (/ (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6) x))))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) (fma.f64 (pow.f64 x #s(literal 4 binary64)) #s(literal 1/24 binary64) x))","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/6 (* 1/2 (/ 1 x))) x)) 1/24)))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (/ 1 x)) x)) 1/6)))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) (*.f64 x x) x)","(* -1 (* (pow x 3) (- (* -1 (/ (+ 1/2 (+ (/ 1 x) (/ 1 (pow x 2)))) x)) 1/6)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))"]],"stop":[["iter limit",1],["node limit",1]],"time":266.344970703125,"type":"simplify"},{"count":[[10,298]],"egraph":[[0,8349,106,0.088323584],[2,1089,113,0.028516252],[1,146,113,0.005150851],[0,31,113,0.001257814],[0,19,113,0.00021534]],"inputs":[["#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","(fma.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)","(*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","#s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))"]],"memory":[[10023280,55221168]],"outputs":[["#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","(*.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 x (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))))))","(*.f64 (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)","(*.f64 (fma.f64 (pow.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (fma.f64 x x (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64)))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (pow.f64 (fma.f64 (pow.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","(*.f64 x (fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))) (*.f64 (/.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (/.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))) (+.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (/.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) #s(literal 3 binary64)) (pow.f64 (/.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (fma.f64 (/.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (/.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (/.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))))","(/.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 x (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)))) (neg.f64 (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))))) (neg.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (pow.f64 x #s(literal 4 binary64))) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x x)) (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 4 binary64)) (+.f64 (pow.f64 x #s(literal 4 binary64)) (*.f64 (pow.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 6 binary64))))) (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (pow.f64 x #s(literal 6 binary64))) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (pow.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 9 binary64)) (pow.f64 x #s(literal 9 binary64))) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 6 binary64)) (-.f64 (pow.f64 x #s(literal 6 binary64)) (*.f64 (pow.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 9 binary64))))) (fma.f64 (pow.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (*.f64 x x))) (*.f64 (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))","(/.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64))) (-.f64 x (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x))) (neg.f64 (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 x x (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64)))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))) (neg.f64 (fma.f64 (pow.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))))))","(/.f64 (fma.f64 (pow.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 (neg.f64 x) x)) (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 x x (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64))))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64))) (fma.f64 (pow.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 2 binary64)) (pow.f64 x #s(literal 4 binary64)) (*.f64 x (-.f64 x (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 x (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)) (-.f64 (*.f64 x x) (pow.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 x x (-.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (pow.f64 x #s(literal 3 binary64))))) (fma.f64 (pow.f64 x #s(literal 6 binary64)) (pow.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 x #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)))","(fma.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 x x)) (pow.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) x)","(fma.f64 (*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) (*.f64 x x)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)) x)","(fma.f64 (*.f64 x x) (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(fma.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (pow.f64 (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x) #s(literal -1 binary64)) (neg.f64 (/.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(fma.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x)","(fma.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) (*.f64 x x) x)","(fma.f64 #s(literal 1 binary64) x (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(fma.f64 x (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x)","(fma.f64 x #s(literal 1 binary64) (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(-.f64 (/.f64 (*.f64 x x) (-.f64 x (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))) (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 x (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (/.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)))","(+.f64 (/.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) #s(literal 2 binary64)) (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)) (neg.f64 (/.f64 (*.f64 x x) (-.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x))))","(+.f64 (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x) x)","(+.f64 x (*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x))","(*.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) x) (pow.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) x) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (pow.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (*.f64 x (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 3 binary64)))) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64))","(*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x)","(*.f64 x (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) x) (*.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 #s(literal 1/2 binary64) x))) (-.f64 (*.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) x) (*.f64 #s(literal 1/2 binary64) x)))","(/.f64 (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 #s(literal 1/2 binary64) x)) (*.f64 (*.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) x) (*.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) x))) (-.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) x)))","(/.f64 (-.f64 (*.f64 (*.f64 x (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x)) (*.f64 x (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x))) (*.f64 (*.f64 x #s(literal 1/2 binary64)) (*.f64 x #s(literal 1/2 binary64)))) (-.f64 (*.f64 x (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x)) (*.f64 x #s(literal 1/2 binary64))))","(/.f64 (-.f64 (*.f64 (*.f64 x #s(literal 1/2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (*.f64 x (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x)) (*.f64 x (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x)))) (-.f64 (*.f64 x #s(literal 1/2 binary64)) (*.f64 x (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) x) #s(literal 3 binary64)) (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64))) (fma.f64 (*.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) x) (*.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) x) (-.f64 (*.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 #s(literal 1/2 binary64) x)) (*.f64 (*.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) x) (*.f64 #s(literal 1/2 binary64) x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 #s(literal 1/2 binary64) x) #s(literal 3 binary64)) (pow.f64 (*.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) x) #s(literal 3 binary64))) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 #s(literal 1/2 binary64) x) (-.f64 (*.f64 (*.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) x) (*.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) x)) (*.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) x)))))","(/.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x)) #s(literal 3 binary64)) (pow.f64 (*.f64 x #s(literal 1/2 binary64)) #s(literal 3 binary64))) (fma.f64 (*.f64 x (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x)) (*.f64 x (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x)) (-.f64 (*.f64 (*.f64 x #s(literal 1/2 binary64)) (*.f64 x #s(literal 1/2 binary64))) (*.f64 (*.f64 x (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x)) (*.f64 x #s(literal 1/2 binary64))))))","(/.f64 (+.f64 (pow.f64 (*.f64 x #s(literal 1/2 binary64)) #s(literal 3 binary64)) (pow.f64 (*.f64 x (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x)) #s(literal 3 binary64))) (fma.f64 (*.f64 x #s(literal 1/2 binary64)) (*.f64 x #s(literal 1/2 binary64)) (-.f64 (*.f64 (*.f64 x (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x)) (*.f64 x (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x))) (*.f64 (*.f64 x #s(literal 1/2 binary64)) (*.f64 x (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x))))))","(/.f64 (neg.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) x)) (neg.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) x)) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64)))))","(/.f64 (neg.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)))) (neg.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (*.f64 x (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 3 binary64))))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) x) (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))","(/.f64 (*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) x) (-.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))))","(/.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))","(/.f64 (*.f64 x (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 3 binary64)))) (-.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))) (*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) (*.f64 x (-.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))) (*.f64 x (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 3 binary64))))))","(/.f64 x (/.f64 #s(literal 1 binary64) (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))))","(fma.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) x (*.f64 #s(literal 1/2 binary64) x))","(fma.f64 #s(literal 1/2 binary64) x (*.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) x))","(fma.f64 x (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) (*.f64 x #s(literal 1/2 binary64)))","(fma.f64 x #s(literal 1/2 binary64) (*.f64 x (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x)))","(+.f64 (*.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) x) (*.f64 #s(literal 1/2 binary64) x))","(+.f64 (*.f64 #s(literal 1/2 binary64) x) (*.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) x))","(+.f64 (*.f64 x (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x)) (*.f64 x #s(literal 1/2 binary64)))","(+.f64 (*.f64 x #s(literal 1/2 binary64)) (*.f64 x (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x)))","(*.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))))","(*.f64 (neg.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 3 binary64)))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))))))","(*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (pow.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))))))","(*.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))) (*.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))))) (+.f64 (/.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (fma.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (*.f64 (/.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 3 binary64))))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 4 binary64)) #s(literal 1/16 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 6 binary64)) #s(literal 1/64 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 4 binary64)) (+.f64 #s(literal 1/16 binary64) (*.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64))))) (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 6 binary64)) #s(literal 1/64 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 3 binary64)) #s(literal 1/8 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64)))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 9 binary64)) #s(literal 1/512 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 6 binary64)) (-.f64 #s(literal 1/64 binary64) (*.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 3 binary64))))) (-.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64))) (neg.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 3 binary64)))) (neg.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))))))","(/.f64 (neg.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 3 binary64)))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64)))))","(/.f64 (-.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)))))","(/.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64)))))","(/.f64 (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 3 binary64))) (-.f64 (+.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) #s(literal 1/4 binary64)) (*.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x)) (-.f64 #s(literal 1/4 binary64) (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/4 binary64) (-.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (*.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64)))) (+.f64 #s(literal 1/8 binary64) (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 3 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))))","(fma.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))))","(fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64))","(fma.f64 x #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) #s(literal 1/2 binary64))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x))) (/.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))))","(+.f64 (/.f64 (pow.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 2 binary64)) (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64))) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal -1/2 binary64)))))","(+.f64 (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x) #s(literal 1/2 binary64))","(+.f64 #s(literal 1/2 binary64) (*.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x))","(*.f64 (/.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))) (/.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) #s(literal 1 binary64)))","(*.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(*.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(*.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))))))","(*.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)))) (*.f64 (pow.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))))) (*.f64 (pow.f64 (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (pow.f64 (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))) (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))) (fma.f64 (pow.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (fma.f64 (pow.f64 (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)) (pow.f64 (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (pow.f64 (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64))))))","(/.f64 (+.f64 #s(literal -1 binary64) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64))) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (*.f64 #s(literal -1 binary64) #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64)))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (*.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 6 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)))) (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal 2 binary64)))","(/.f64 (-.f64 (*.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (*.f64 (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal 1 binary64))) (*.f64 (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) (-.f64 #s(literal -1 binary64) #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64)))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) #s(literal 1 binary64)) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)))))","(/.f64 (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)))) (-.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))))","(fma.f64 (/.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))) (/.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)) (neg.f64 (pow.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (pow.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (pow.f64 (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)) (neg.f64 (pow.f64 (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64))))","(fma.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64) #s(literal -1 binary64))","(fma.f64 #s(literal 1 binary64) #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))","(-.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))))) (/.f64 #s(literal 1 binary64) (+.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))))))","(-.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))) (pow.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64)))","(-.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (pow.f64 (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64)))","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","(+.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)) (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))) (neg.f64 (pow.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (/.f64 (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 3 binary64)) (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64)))) (neg.f64 (pow.f64 (+.f64 (-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64)) (pow.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 2 binary64))) #s(literal -1 binary64))))","(+.f64 #s(literal -1 binary64) #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))))","(+.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))","(*.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))))","#s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64)))))","(*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)))))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)))))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)) #s(literal -1 binary64)))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64)))) (*.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)))) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 6 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 3 binary64)))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))) (+.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))))","(fma.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) x) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) x) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 x (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) x x) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 1 binary64))","(fma.f64 x (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64))) (neg.f64 (pow.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","(*.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(*.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","(*.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))))","(*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))))","(*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (pow.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))) (*.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))) (+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(/.f64 (-.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) #s(literal 3 binary64)) (pow.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) #s(literal 3 binary64))) (fma.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (fma.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (*.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))))))","(/.f64 (neg.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))))","(/.f64 (neg.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)))) (neg.f64 (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))))","(/.f64 (neg.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))) (neg.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 4 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 4 binary64)) (+.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 6 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(/.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 9 binary64)) #s(literal 1 binary64)) #s(literal 1 binary64)) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 6 binary64)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)))) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(/.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal 1 binary64))) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64))) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))","(/.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64))) (neg.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))))","(/.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(/.f64 (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(/.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64)) (-.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x)) (-.f64 #s(literal 1 binary64) (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1 binary64) (-.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))) (+.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 3 binary64)) #s(literal 1 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))))","(fma.f64 (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) #s(literal -1/4 binary64)) x) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) x) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 x (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) #s(literal -1/4 binary64))) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (*.f64 x (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64))) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))) #s(literal -1 binary64)) #s(literal 1 binary64))","(fma.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)) (neg.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64) #s(literal 1 binary64))","(fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64))","(fma.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64))","(fma.f64 x (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 1 binary64))","(-.f64 (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))) (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (-.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))))","(-.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64)))","(+.f64 (/.f64 (pow.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 2 binary64)) (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64))) (neg.f64 (pow.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal -1 binary64)) #s(literal -1 binary64))))","(+.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) #s(literal 1 binary64))","(+.f64 #s(literal 1 binary64) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x))","#s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64))","(*.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal 1/36 binary64))) (/.f64 #s(literal 1 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x))))","(*.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) #s(literal -1/4 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))))","(*.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64))) (/.f64 #s(literal 1 binary64) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))))))","(*.f64 (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) #s(literal -1/4 binary64)) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) #s(literal -1 binary64)))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) (/.f64 #s(literal 1 binary64) (+.f64 #s(literal 1/4 binary64) (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) (*.f64 (neg.f64 x) #s(literal 1/12 binary64))))))","(*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) (pow.f64 (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))) #s(literal -1 binary64)))","(*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) #s(literal 1 binary64))","(*.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)))","(pow.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) #s(literal -1 binary64))","(/.f64 (-.f64 (*.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal 1/36 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 (*.f64 (*.f64 x x) #s(literal 1/36 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))) (*.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))) (+.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal 1/36 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))))","(/.f64 (-.f64 (pow.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal 1/36 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) #s(literal 3 binary64)) (pow.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) #s(literal 3 binary64))) (fma.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal 1/36 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 (*.f64 (*.f64 x x) #s(literal 1/36 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (fma.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (*.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal 1/36 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))))))","(/.f64 (neg.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal 1/36 binary64)))) (neg.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) #s(literal -1/4 binary64)))) (neg.f64 (neg.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))))","(/.f64 (neg.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)))) (neg.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/1296 binary64) (pow.f64 x #s(literal 4 binary64)) #s(literal -1/16 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) #s(literal 1/4 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/46656 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/64 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/1296 binary64) (pow.f64 x #s(literal 4 binary64)) (+.f64 #s(literal 1/16 binary64) (*.f64 (*.f64 x x) #s(literal 1/144 binary64)))) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","(/.f64 (*.f64 (fma.f64 #s(literal 1/46656 binary64) (pow.f64 x #s(literal 6 binary64)) #s(literal -1/64 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal -1/8 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64))))))","(/.f64 (*.f64 (fma.f64 (pow.f64 x #s(literal 9 binary64)) #s(literal 1/10077696 binary64) #s(literal 1/512 binary64)) #s(literal 1 binary64)) (*.f64 (fma.f64 #s(literal 1/46656 binary64) (pow.f64 x #s(literal 6 binary64)) (-.f64 #s(literal 1/64 binary64) (*.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/1728 binary64)))) (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64))))))","(/.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) #s(literal 1/36 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) #s(literal 1/4 binary64))) (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","(/.f64 (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal 1/36 binary64))) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x)))","(/.f64 (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) #s(literal -1/4 binary64))) (neg.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64))) (neg.f64 (+.f64 #s(literal 1/4 binary64) (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) (*.f64 (neg.f64 x) #s(literal 1/12 binary64))))))","(/.f64 (neg.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64))) (neg.f64 (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64))))))","(/.f64 (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) #s(literal -1/4 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))","(/.f64 #s(literal -1 binary64) (neg.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) (+.f64 #s(literal 1/4 binary64) (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) (*.f64 (neg.f64 x) #s(literal 1/12 binary64)))))","(/.f64 (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64)) (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) (-.f64 #s(literal 1/4 binary64) (*.f64 x #s(literal 1/12 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x)) (-.f64 #s(literal 1/4 binary64) (*.f64 (*.f64 x x) #s(literal 1/36 binary64)))))","(/.f64 #s(literal 1 binary64) (/.f64 (+.f64 #s(literal 1/4 binary64) (fma.f64 (*.f64 x x) #s(literal 1/36 binary64) (*.f64 (neg.f64 x) #s(literal 1/12 binary64)))) (fma.f64 (pow.f64 x #s(literal 3 binary64)) #s(literal 1/216 binary64) #s(literal 1/8 binary64))))","(/.f64 #s(literal 1 binary64) (/.f64 (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))) #s(literal 1 binary64)))","(/.f64 #s(literal 1 binary64) (/.f64 #s(literal 1 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))))","(fma.f64 (*.f64 (*.f64 x x) #s(literal 1/36 binary64)) (pow.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)) #s(literal -1 binary64)) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))))","(fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64))","(fma.f64 x #s(literal 1/6 binary64) #s(literal 1/2 binary64))","(-.f64 (/.f64 #s(literal 1/4 binary64) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x))) (/.f64 (*.f64 (*.f64 x x) #s(literal 1/36 binary64)) (-.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x))))","(-.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal 1/36 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))))","(+.f64 (/.f64 (*.f64 (*.f64 x x) #s(literal 1/36 binary64)) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64))) (neg.f64 (/.f64 #s(literal 1/4 binary64) (fma.f64 #s(literal 1/6 binary64) x #s(literal -1/2 binary64)))))","(+.f64 (*.f64 #s(literal 1/6 binary64) x) #s(literal 1/2 binary64))","(+.f64 #s(literal 1/2 binary64) (*.f64 #s(literal 1/6 binary64) x))"]],"stop":[["iter limit",1],["node limit",1],["iter limit",1]],"time":247.14892578125,"type":"rewrite"},{"compiler":[[13747,1589]],"memory":[[-2986912,35984016]],"time":87.453125,"type":"eval"},{"alts":[["(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","done",58.76608766205578,"binary64"],["(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","done",58.94384947017878,"binary64"],["(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","done",59.29806170764161,"binary64"],["(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","done",60.56168059992402,"binary64"],["(expm1.f64 x)","done",0.0,"binary64"],["#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","done",0.19403128413264992,"binary64"],["#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","done",0.34365514513780954,"binary64"],["#s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))","done",0.6581214734841803,"binary64"],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","done",0.3554876019294538,"binary64"],["#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","done",0.6659627997746709,"binary64"],["#s(approx (- (exp x) 1) #s(approx (* (+ (* 1/2 x) 1) x) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","done",60.184343184554066,"binary64"]],"compiler":[[169,60],[15,10],[12,8],[8,6],[6,5],[2,2],[17,12],[20,15],[11,8],[14,11],[11,9],[18,13]],"count":[[343,11]],"kept":[{"done":[9,9],"fresh":[0,0],"new":[332,0],"picked":[2,2]}],"memory":[[-589360,16530272]],"min-error":[[0.0,"binary64"]],"time":12.868896484375,"type":"prune"},{"accuracy":[0.0],"baseline":[0.0],"branch":[["x",0.0,1,"binary64"],["(-.f64 (exp.f64 x) #s(literal 1 binary64))",0.0,1,"binary64"],["(exp.f64 x)",0.0,1,"binary64"]],"compiler":[[1,1],[4,4],[2,2]],"count":[[14,1]],"inputs":[["(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","#s(approx (- (exp x) 1) #s(approx (* (+ (* 1/2 x) 1) x) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","(expm1.f64 x)","(-.f64 (exp.f64 x) #s(literal 1 binary64))"]],"memory":[[-393952,7522768]],"oracle":[60.73312623355147],"outputs":[["(expm1.f64 x)"]],"repr":["binary64"],"time":11.072021484375,"times":[[3.5,"x"],[2.98583984375,"(-.f64 (exp.f64 x) #s(literal 1 binary64))"],[3.552978515625,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[0.19403128413264992],"baseline":[0.19403128413264992],"branch":[["x",0.19403128413264992,1,"binary64"],["(-.f64 (exp.f64 x) #s(literal 1 binary64))",0.19403128413264992,1,"binary64"],["(exp.f64 x)",0.19403128413264992,1,"binary64"]],"compiler":[[1,1],[4,4],[2,2]],"count":[[12,1]],"inputs":[["(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","#s(approx (- (exp x) 1) #s(approx (* (+ (* 1/2 x) 1) x) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))"]],"memory":[[-1220496,7024208]],"oracle":[60.73312623355147],"outputs":[["#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))"]],"repr":["binary64"],"time":9.412109375,"times":[[3.111083984375,"x"],[2.56689453125,"(-.f64 (exp.f64 x) #s(literal 1 binary64))"],[2.776123046875,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[0.20965628413770843],"baseline":[0.20965628413770843],"branch":[["x",0.20965628413770843,1,"binary64"],["(-.f64 (exp.f64 x) #s(literal 1 binary64))",0.20965628413770843,1,"binary64"],["(exp.f64 x)",0.20965628413770843,1,"binary64"]],"compiler":[[1,1],[4,4],[2,2]],"count":[[11,1]],"inputs":[["(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","#s(approx (- (exp x) 1) #s(approx (* (+ (* 1/2 x) 1) x) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))"]],"memory":[[-3369872,6665952]],"oracle":[60.73312623355147],"outputs":[["#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))"]],"repr":["binary64"],"time":9.806884765625,"times":[[3.21484375,"x"],[3.149169921875,"(-.f64 (exp.f64 x) #s(literal 1 binary64))"],[2.5,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[0.34365514513780954],"baseline":[0.34365514513780954],"branch":[["x",0.34365514513780954,1,"binary64"],["(-.f64 (exp.f64 x) #s(literal 1 binary64))",0.34365514513780954,1,"binary64"],["(exp.f64 x)",0.34365514513780954,1,"binary64"]],"compiler":[[1,1],[4,4],[2,2]],"count":[[10,1]],"inputs":[["(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","#s(approx (- (exp x) 1) #s(approx (* (+ (* 1/2 x) 1) x) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(approx (+ (* 1/24 x) 1/6) #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))"]],"memory":[[-1878720,6376416]],"oracle":[60.73312623355147],"outputs":[["#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))"]],"repr":["binary64"],"time":9.43310546875,"times":[[3.0400390625,"x"],[2.283935546875,"(-.f64 (exp.f64 x) #s(literal 1 binary64))"],[3.08984375,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[0.35548760192945383],"baseline":[0.3554876019294538],"branch":[["x",0.35548760192945383,1,"binary64"],["(-.f64 (exp.f64 x) #s(literal 1 binary64))",0.35548760192945383,1,"binary64"],["(exp.f64 x)",0.35548760192945383,1,"binary64"]],"compiler":[[1,1],[4,4],[2,2]],"count":[[7,1]],"inputs":[["(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","#s(approx (- (exp x) 1) #s(approx (* (+ (* 1/2 x) 1) x) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))"]],"memory":[[5448336,5448336]],"oracle":[60.73312623355147],"outputs":[["#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))"]],"repr":["binary64"],"time":6.823974609375,"times":[[2.239990234375,"x"],[2.142822265625,"(-.f64 (exp.f64 x) #s(literal 1 binary64))"],[1.766845703125,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[0.6581214734841803],"baseline":[0.6581214734841803],"branch":[["x",0.6581214734841803,1,"binary64"],["(-.f64 (exp.f64 x) #s(literal 1 binary64))",0.6581214734841803,1,"binary64"],["(exp.f64 x)",0.6581214734841803,1,"binary64"]],"compiler":[[1,1],[4,4],[2,2]],"count":[[6,1]],"inputs":[["(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","#s(approx (- (exp x) 1) #s(approx (* (+ (* 1/2 x) 1) x) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))","(-.f64 #s(approx (exp x) (fma.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x #s(literal 1 binary64))) #s(literal 1 binary64))"]],"memory":[[-3059968,5259872]],"oracle":[60.73312623355147],"outputs":[["#s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))"]],"repr":["binary64"],"time":6.218994140625,"times":[[2.032958984375,"x"],[1.807861328125,"(-.f64 (exp.f64 x) #s(literal 1 binary64))"],[1.739990234375,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[0.6659627997746708],"baseline":[0.6659627997746709],"branch":[["x",0.6659627997746708,1,"binary64"],["(-.f64 (exp.f64 x) #s(literal 1 binary64))",0.6659627997746708,1,"binary64"],["(exp.f64 x)",0.6659627997746708,1,"binary64"]],"compiler":[[1,1],[4,4],[2,2]],"count":[[4,1]],"inputs":[["(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","#s(approx (- (exp x) 1) #s(approx (* (+ (* 1/2 x) 1) x) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))"]],"memory":[[4567952,4567952]],"oracle":[60.73312623355147],"outputs":[["#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))"]],"repr":["binary64"],"time":5.218994140625,"times":[[1.71484375,"x"],[1.47705078125,"(-.f64 (exp.f64 x) #s(literal 1 binary64))"],[1.447021484375,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[59.29806170764161],"baseline":[59.29806170764161],"branch":[["x",59.29806170764161,1,"binary64"],["(-.f64 (exp.f64 x) #s(literal 1 binary64))",59.29806170764161,1,"binary64"],["(exp.f64 x)",59.29806170764161,1,"binary64"]],"compiler":[[1,1],[4,4],[2,2]],"count":[[3,1]],"inputs":[["(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","#s(approx (- (exp x) 1) #s(approx (* (+ (* 1/2 x) 1) x) (*.f64 (*.f64 x x) #s(literal 1/2 binary64))))"]],"memory":[[-3938304,4357760]],"oracle":[60.73312623355147],"outputs":[["(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))"]],"repr":["binary64"],"time":4.60791015625,"times":[[1.450927734375,"x"],[1.24609375,"(-.f64 (exp.f64 x) #s(literal 1 binary64))"],[1.2919921875,"(exp.f64 x)"]],"type":"regimes"},{"accuracy":[60.561680599924],"baseline":[60.56168059992402],"branch":[["x",60.561680599924,1,"binary64"],["(-.f64 (exp.f64 x) #s(literal 1 binary64))",60.561680599924,1,"binary64"],["(exp.f64 x)",60.561680599924,1,"binary64"]],"compiler":[[1,1],[4,4],[2,2]],"count":[[1,1]],"inputs":[["(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))"]],"link":["."],"memory":[[3706480,3706480]],"name":["expm1 (example 3.7)"],"oracle":[60.56168059992402],"outputs":[["(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))"]],"repr":["binary64"],"time":3.3330078125,"times":[[1.007080078125,"x"],[0.93994140625,"(-.f64 (exp.f64 x) #s(literal 1 binary64))"],[0.8671875,"(exp.f64 x)"]],"type":"regimes"},{"egraph":[[11,7782,100,0.024524265],[10,5225,100,0.027837331],[9,3248,100,0.019059574],[8,1165,100,0.012394996],[7,646,100,0.007158929],[6,189,100,0.003046192],[5,111,100,0.001193127],[4,80,100,0.001038022],[3,59,100,0.000946191],[2,47,100,0.000761519],[1,41,100,0.000709389],[0,34,100,0.000646551]],"inputs":[["(expm1.f64 x)","#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))"]],"memory":[[-4838768,11558432]],"method":["egg-herbie"],"outputs":[["(expm1.f64 x)","#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x) x x))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 (fma.f64 #s(literal 1/24 binary64) x #s(literal 1/6 binary64)) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x) x x))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 (fma.f64 #s(literal 1/6 binary64) x #s(literal 1/2 binary64)) x #s(literal 1 binary64)) x))","#s(approx (- (exp x) 1) (fma.f64 (*.f64 #s(literal 1/2 binary64) x) x x))","#s(approx (- (exp x) 1) (*.f64 (fma.f64 #s(literal 1/2 binary64) x #s(literal 1 binary64)) x))","(-.f64 #s(approx (exp x) (+.f64 #s(literal 1 binary64) x)) #s(literal 1 binary64))","(-.f64 #s(approx (exp x) #s(literal 1 binary64)) #s(literal 1 binary64))"]],"stop":[["node limit",1]],"time":120.970947265625,"type":"simplify"},{"compiler":[[100,35]],"memory":[[1739472,1739472]],"stop":[["done",1]],"time":2.738037109375,"type":"soundness"},{"compiler":[[100,35],[100,35],[2,2],[2,2],[4,4],[4,4]],"memory":[[1022816,34083936]],"remove-preprocessing":[[],[],[],[],[],[],[],[],[],[]],"time":63.444091796875,"type":"preprocess"},{"memory":[[2000,2000]],"time":0.017822265625,"type":"end"}]